uint64_t ObtainCFDataSinfsFromMedia(const __CFString *a1, __CFArray **a2)
{
  uint64_t v3;
  CFIndex Count;
  CFIndex v5;
  __CFArray *Mutable;
  CFIndex v7;
  const __CFAllocator *v8;
  const CFArrayCallBacks *v9;
  const __CFDictionary *ValueAtIndex;
  uint64_t v11;
  void *value;
  CFArrayRef theArray;

  theArray = 0;
  v3 = ObtainSinfInfoFromMedia(a1, (uint64_t)&theArray);
  if ((_DWORD)v3)
  {
    v11 = v3;
    goto LABEL_11;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v11 = 0;
LABEL_11:
    Mutable = 0;
    goto LABEL_12;
  }
  v5 = Count;
  Mutable = 0;
  v7 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  while (1)
  {
    value = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
    if (CFDictionaryGetValueIfPresent(ValueAtIndex, CFSTR("sinf"), (const void **)&value))
      break;
LABEL_8:
    if (v5 == ++v7)
    {
      v11 = 0;
      goto LABEL_12;
    }
  }
  if (Mutable || (Mutable = CFArrayCreateMutable(v8, v5, v9)) != 0)
  {
    CFArrayAppendValue(Mutable, value);
    goto LABEL_8;
  }
  v11 = FigSignalErrorAt();
LABEL_12:
  if (theArray)
    CFRelease(theArray);
  *a2 = Mutable;
  return v11;
}

uint64_t ReadMovieUInt32(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  int v6;
  uint64_t v7;

  v6 = 0;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
  if (v4)
  {
    v7 = 0;
    v4(a1, 4, a2, &v6, &v7);
    LODWORD(v4) = v6;
  }
  return bswap32(v4);
}

uint64_t FindAtomOffsetOfType(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _QWORD *a5, _DWORD *a6)
{
  unsigned int v8;
  void (*v12)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (!a4)
    return 0;
  v8 = a4;
  while (1)
  {
    v18 = 0;
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
    if (v12)
    {
      v19 = 0;
      v12(a1, 4, a3, &v18, &v19);
      v13 = v18;
    }
    else
    {
      v13 = 0;
    }
    v18 = 0;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
    if (v14)
    {
      v19 = 0;
      v14(a1, 4, a3 + 4, &v18, &v19);
      v15 = v18;
    }
    else
    {
      v15 = 0;
    }
    result = 0;
    v17 = bswap32(v13);
    if (v17 < 8 || v8 < v17)
      break;
    if (bswap32(v15) == a2)
    {
      if (a5)
        *a5 = a3 + 8;
      if (a6)
        *a6 = v17 - 8;
      return 1;
    }
    a3 += v17;
    v8 -= v17;
    if (!v8)
      return 0;
  }
  return result;
}

uint64_t FindImageDescriptionExtensionOffset(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  void (*v12)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  void (*v13)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v10 = a2 + 86;
  LOWORD(v23) = 0;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (!v11 || (v24 = 0, v11(a1, 2, a2 + 84, &v23, &v24), !(_WORD)v23))
  {
    LOWORD(v23) = 0;
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
    if (v12)
    {
      v24 = 0;
      v12(a1, 2, a2 + 176, &v23, &v24);
      LODWORD(v12) = (unsigned __int16)v23;
    }
    v10 += __rev16(v12);
  }
  v23 = 0;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (v13)
  {
    v24 = 0;
    v13(a1, 4, a2, &v23, &v24);
    LODWORD(v13) = v23;
  }
  v14 = bswap32(v13);
  if (v14 >= 8)
  {
    v16 = v10 + v14;
    v17 = v10 + 8;
    do
    {
      v23 = 0;
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 8);
      if (!v18)
        break;
      v24 = 0;
      v18(a1, 4, v10, &v23, &v24);
      v19 = v23;
      if (!v23)
        break;
      v23 = 0;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 8);
      if (v20)
      {
        v24 = 0;
        v20(a1, 4, v10 + 4, &v23, &v24);
        v21 = v23;
      }
      else
      {
        v21 = 0;
      }
      v22 = bswap32(v19);
      if (bswap32(v21) == a3)
      {
        *a4 = v17;
        *a5 = v22 - 8;
        return 1;
      }
      v10 += v22;
      v17 = v10 + 8;
    }
    while (v10 + 8 <= v16);
  }
  return 0;
}

uint64_t ReadMovieUInt16(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *);
  unsigned __int16 v6;
  uint64_t v7;

  v6 = 0;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
  if (v4)
  {
    v7 = 0;
    v4(a1, 2, a2, &v6, &v7);
    LODWORD(v4) = v6;
  }
  return __rev16(v4);
}

uint64_t IsSoundDescriptionISOv1(uint64_t a1, uint64_t a2, size_t size)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, void *, uint64_t *);
  uint64_t v9;
  uint64_t v11;

  v5 = size;
  v6 = malloc_type_calloc(1uLL, size, 0xA0D8F360uLL);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
  if (v8)
  {
    v11 = 0;
    v8(a1, v5, a2, v7, &v11);
  }
  v9 = MEMORY[0x19402EF28](v7, v5, 1);
  free(v7);
  return v9;
}

uint64_t FindSampleDescriptionExtensionOffset(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t v15;
  uint64_t result;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  void (*v24)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v29 = 0;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (v10)
  {
    v30 = 0;
    v10(a1, 4, a2, &v29, &v30);
    v11 = v29;
  }
  else
  {
    v11 = 0;
  }
  v29 = 0;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (v12)
  {
    v30 = 0;
    v12(a1, 4, a2 + 8, &v29, &v30);
    v13 = v29;
  }
  else
  {
    v13 = 0;
  }
  LOWORD(v29) = 0;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (!v14)
    return 0;
  v15 = a2 + 12;
  v30 = 0;
  v14(a1, 2, a2 + 12, &v29, &v30);
  result = 0;
  if ((unsigned __int16)v29 == 256)
  {
    v17 = bswap32(v13);
    if (v17 >= 0x10)
    {
      v18 = bswap32(v11);
      v19 = v17;
      if (v17 < v18)
      {
        v29 = 0;
        v20 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 16);
        if (v20)
        {
          v30 = 0;
          v20(a1, 4, a2 + 8, &v29, &v30);
        }
        v21 = v19 + a2;
        v22 = v18 + a2;
        LOWORD(v29) = 0;
        v23 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 16);
        if (v23)
        {
          v30 = 0;
          v23(a1, 2, v15, &v29, &v30);
        }
        while (v21 + 8 <= v22)
        {
          v29 = 0;
          v24 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
          if (!v24)
            break;
          v30 = 0;
          v24(a1, 4, v21, &v29, &v30);
          v25 = v29;
          if (!v29)
            break;
          v29 = 0;
          v26 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
          if (v26)
          {
            v30 = 0;
            v26(a1, 4, v21 + 4, &v29, &v30);
            v27 = v29;
          }
          else
          {
            v27 = 0;
          }
          v28 = bswap32(v25);
          if (bswap32(v27) == a3)
          {
            *a4 = v21 + 8;
            *a5 = v28 - 8;
            return 1;
          }
          v21 += v28;
        }
        return 0;
      }
    }
  }
  return result;
}

_BYTE *ProcessTrackAbortAction(_BYTE *result)
{
  *result = 1;
  return result;
}

void ReadMovieBytesIntoCFData(uint64_t a1, uint64_t a2, CFIndex capacity, __CFData **a4)
{
  CFIndex v7;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  UInt8 *v11;
  unsigned int (*v12)(uint64_t, CFIndex, uint64_t, UInt8 *, uint64_t *);
  uint64_t v13;

  v7 = capacity;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity);
  v9 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_6;
  }
  v13 = 0;
  CFDataSetLength(Mutable, v7);
  MutableBytePtr = CFDataGetMutableBytePtr(v9);
  if (!MutableBytePtr)
  {
    if (!FigSignalErrorAt())
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = MutableBytePtr;
  v12 = *(unsigned int (**)(uint64_t, CFIndex, uint64_t, UInt8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
  if (!v12 || v12(a1, v7, a2, v11, &v13))
  {
LABEL_5:
    CFRelease(v9);
    v9 = 0;
  }
LABEL_6:
  *a4 = v9;
}

uint64_t createInitFPCtxtLock()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  sInitFPCtxtLock = result;
  return result;
}

__CFString *sbcbq_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerToBufferQueue %p>"), a1);
  return Mutable;
}

uint64_t sbcbq_setProperty(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  __int128 v8;
  CMTimeEpoch epoch;
  __int128 v10;
  CMTime *p_time1;
  CMTime *p_time2;
  CFTypeID v14;
  opaqueCMBufferQueueTriggerToken *v15;
  opaqueCMBufferQueue *v16;
  CFTypeID v17;
  __int128 v18;
  CMTimeEpoch v19;
  __int128 v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("HighWaterDuration")))
  {
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)a3);
        v8 = *(_OWORD *)&time1.value;
        epoch = time1.epoch;
        *(_QWORD *)(DerivedStorage + 28) = time1.epoch;
        *(_OWORD *)(DerivedStorage + 12) = v8;
        v10 = *(_OWORD *)(DerivedStorage + 12);
        time1.epoch = epoch;
        *(_OWORD *)&time1.value = v10;
        time2 = *(CMTime *)(DerivedStorage + 60);
        p_time1 = &time1;
        p_time2 = &time2;
        goto LABEL_5;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("LowWaterDuration")))
  {
    if (a3)
    {
      v14 = CFGetTypeID(a3);
      if (v14 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)a3);
        *(CMTime *)(DerivedStorage + 36) = time1;
        if ((*(_DWORD *)(DerivedStorage + 48) & 0x1D) == 1)
        {
          if (*(_QWORD *)(DerivedStorage + 96))
          {
            v15 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 112);
            if (v15)
            {
              CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 120), v15);
              *(_QWORD *)(DerivedStorage + 112) = 0;
              v16 = *(opaqueCMBufferQueue **)(DerivedStorage + 120);
              time1 = *(CMTime *)(DerivedStorage + 36);
              return CMBufferQueueInstallTrigger(v16, (CMBufferQueueTriggerCallback)sbcbq_LowWater, a1, 2, &time1, (CMBufferQueueTriggerToken *)(DerivedStorage + 112));
            }
          }
        }
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  if (!CFEqual(a2, CFSTR("PrerollDuration")))
    return 4294954512;
  if (!a3)
    return FigSignalErrorAt();
  v17 = CFGetTypeID(a3);
  if (v17 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  memset(&time1, 0, sizeof(time1));
  CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)a3);
  time2 = time1;
  v21 = *(CMTime *)(DerivedStorage + 60);
  if (!CMTimeCompare(&time2, &v21))
    return 0;
  v18 = *(_OWORD *)&time1.value;
  *(_OWORD *)(DerivedStorage + 60) = *(_OWORD *)&time1.value;
  v19 = time1.epoch;
  *(_QWORD *)(DerivedStorage + 76) = time1.epoch;
  *(_OWORD *)&time2.value = v18;
  time2.epoch = v19;
  v20 = *(_OWORD *)(DerivedStorage + 12);
  v21.epoch = *(_QWORD *)(DerivedStorage + 28);
  *(_OWORD *)&v21.value = v20;
  p_time1 = &time2;
  p_time2 = &v21;
LABEL_5:
  CMTimeCompare(p_time1, p_time2);
  return 0;
}

uint64_t sbcbq_resetSideQueueAndSwitchToMainQueue()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  CMBufferQueueReset((CMBufferQueueRef)DerivedStorage[16]);
  CFArrayRemoveAllValues((CFMutableArrayRef)DerivedStorage[18]);
  *((_BYTE *)DerivedStorage + 8) = 1;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

BOOL sbcbq_isQueueBelowPrerollLevel()
{
  uint64_t DerivedStorage;
  CMTime *v1;
  uint64_t v2;
  CMTime v4;
  CMTime time1;
  CMTime v6;
  CMTime v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v1 = (CMTime *)(DerivedStorage + 60);
  if ((*(_DWORD *)(DerivedStorage + 72) & 0x1D) != 1)
    v1 = (CMTime *)(DerivedStorage + 36);
  v6 = *v1;
  v2 = 120;
  if (!*(_BYTE *)(DerivedStorage + 8))
    v2 = 128;
  CMBufferQueueGetDuration(&v7, *(CMBufferQueueRef *)(DerivedStorage + v2));
  time1 = v7;
  v4 = v6;
  return CMTimeCompare(&time1, &v4) < 1;
}

uint64_t sbcbq_countNonMarkerOnlySampleBuffers(opaqueCMSampleBuffer *a1, _QWORD *a2)
{
  if (CMSampleBufferGetNumSamples(a1) >= 1)
    ++*a2;
  return 0;
}

uint64_t sbcbq_setAttachmentIfSampleBufferInPTSRange(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CMTime v5;
  CMTime time1;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetPresentationTimeStamp(&v7, a1);
  time1 = *(CMTime *)(a2 + 16);
  v5 = v7;
  if (CMTimeCompare(&time1, &v5) <= 0)
  {
    time1 = v7;
    v5 = *(CMTime *)(a2 + 40);
    if (CMTimeCompare(&time1, &v5) < 0)
      CMSetAttachment(a1, *(CFStringRef *)a2, *(CFTypeRef *)(a2 + 8), 1u);
  }
  return 0;
}

uint64_t FigMetricMediaResourceRequestEventDeserializeAndCopy(void *a1, _QWORD *a2)
{
  int64_t int64;
  int64_t v5;
  char v6;
  int v7;
  uint64_t CMTime;
  BOOL v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  int v16;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v18;
  const void *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  const void *v22;
  CFAbsoluteTime v23;
  CFAbsoluteTime v24;
  CFAbsoluteTime v25;
  CFAbsoluteTime v26;
  char v27;
  CFAbsoluteTime v28;
  CFAbsoluteTime v29;
  CFAbsoluteTime v30;
  CFAbsoluteTime v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  const __CFAllocator *v36;
  int64_t v37;
  __int128 v38;
  uint64_t v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44;
  CFTypeRef v45;
  CFTypeRef cf;
  CFTypeRef v47;
  CFTypeRef v48;
  const void *v49;
  const void *v50;
  const void *v51;
  __int128 v52;
  uint64_t v53;

  v52 = *MEMORY[0x1E0CA2E18];
  v53 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  cf = 0;
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  if (!a1 || !a2)
  {
    CMTime = FigSignalErrorAt();
    goto LABEL_22;
  }
  int64 = xpc_dictionary_get_int64(a1, "EventID");
  v5 = xpc_dictionary_get_int64(a1, "ByteRangeLength");
  v37 = xpc_dictionary_get_int64(a1, "ByteRangeLocation");
  v6 = xpc_dictionary_get_BOOL(a1, "ReadFromCache");
  v7 = xpc_dictionary_get_int64(a1, "MediaType");
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFDate();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFString();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFURL();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFString();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFData();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFError();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFDate();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFDate();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFDate();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFDate();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  switch(int64)
  {
    case 2:
      v15 = xpc_dictionary_get_BOOL(a1, "IsClientInitiated");
      CMTime = FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(a1, &v40);
      if (!(_DWORD)CMTime)
      {
        v16 = v7;
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        v18 = v5;
        v19 = v51;
        v20 = v48;
        v21 = cf;
        v22 = v49;
        v23 = MEMORY[0x194029D14](v45);
        v24 = MEMORY[0x194029D14](v44);
        v25 = MEMORY[0x194029D14](v43);
        v26 = MEMORY[0x194029D14](v42);
        v38 = v52;
        v39 = v53;
        CMTime = FigMetricContentKeyRequestEventCreate(AllocatorForMedia, v19, v20, &v38, v21, v22, v37, v18, v23, v24, v25, v26, v6, v41, v47, v16, v15, v40, a2);
      }
      goto LABEL_22;
    case 1:
      v27 = xpc_dictionary_get_BOOL(a1, "IsMapSegment");
      CMTime = FigXPCMessageCopyCFURL();
      if (!(_DWORD)CMTime)
      {
        v36 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v28 = MEMORY[0x194029D14](v45);
        v29 = MEMORY[0x194029D14](v44);
        v30 = MEMORY[0x194029D14](v43);
        v31 = MEMORY[0x194029D14](v42);
        v38 = v52;
        v39 = v53;
        CMTime = FigMetricHLSMediaSegmentRequestEventCreate(v36, v51, v50, v48, &v38, cf, v49, v28, v29, v30, v31, v32, v37, v5, v6, v41, v47, v7, v27,
                   a2);
      }
      goto LABEL_22;
    case 0:
      v9 = xpc_dictionary_get_BOOL(a1, "IsMultivariantPlaylist");
      v10 = FigGetAllocatorForMedia();
      v11 = MEMORY[0x194029D14](v45);
      v12 = MEMORY[0x194029D14](v44);
      v13 = MEMORY[0x194029D14](v43);
      v14 = MEMORY[0x194029D14](v42);
      v38 = v52;
      v39 = v53;
      BYTE4(v35) = v9;
      LODWORD(v35) = v7;
      CMTime = FigMetricHLSPlaylistRequestEventCreate(v10, v51, v48, &v38, cf, v49, v37, v5, v11, v12, v13, v14, v6, v41, v47, v35, a2);
LABEL_22:
      v33 = CMTime;
      goto LABEL_24;
  }
  v33 = 4294947834;
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v49)
    CFRelease(v49);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (v48)
    CFRelease(v48);
  if (v47)
    CFRelease(v47);
  if (v41)
    CFRelease(v41);
  if (v45)
    CFRelease(v45);
  if (v44)
    CFRelease(v44);
  if (v43)
    CFRelease(v43);
  if (v42)
    CFRelease(v42);
  if (v40)
    CFRelease(v40);
  return v33;
}

uint64_t FigMetricHLSPlaylistRequestEventCreate(const __CFAllocator *a1, const void *a2, const void *a3, __int128 *a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, CFAbsoluteTime a9, CFAbsoluteTime a10, CFAbsoluteTime a11, CFAbsoluteTime a12, char a13, const void *a14, const void *a15, int a16, char a17, _QWORD *a18)
{
  uint64_t v28;
  uint64_t DerivedStorage;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  CFAbsoluteTime Current;
  __int128 v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  uint64_t v40;

  if (a18)
  {
    FigMetricEventGetClassID();
    v28 = CMDerivedObjectCreate();
    if (!(_DWORD)v28)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage)
        return 4294954510;
      v30 = DerivedStorage;
      v31 = FigSimpleMutexCreate();
      *(_QWORD *)(v30 + 184) = v31;
      if (v31)
      {
        *(_BYTE *)v30 = 1;
        *(_QWORD *)(v30 + 8) = 0;
        if (a5)
        {
          v32 = (void *)CFRetain(a5);
        }
        else
        {
          Current = CFAbsoluteTimeGetCurrent();
          v32 = CFDateCreate(a1, Current);
        }
        *(_QWORD *)(v30 + 16) = v32;
        v34 = *a4;
        *(_QWORD *)(v30 + 48) = *((_QWORD *)a4 + 2);
        *(_OWORD *)(v30 + 32) = v34;
        if (a6)
          v35 = CFRetain(a6);
        else
          v35 = 0;
        *(_QWORD *)(v30 + 24) = v35;
        if (a2)
          v36 = CFRetain(a2);
        else
          v36 = 0;
        *(_QWORD *)(v30 + 56) = v36;
        if (a3)
          v37 = CFRetain(a3);
        else
          v37 = 0;
        *(_QWORD *)(v30 + 72) = v37;
        *(_QWORD *)(v30 + 80) = CFDateCreate(a1, a9);
        *(_QWORD *)(v30 + 88) = CFDateCreate(a1, a10);
        *(_QWORD *)(v30 + 96) = CFDateCreate(a1, a11);
        *(_QWORD *)(v30 + 104) = CFDateCreate(a1, a12);
        *(_QWORD *)(v30 + 112) = a7;
        *(_QWORD *)(v30 + 120) = a8;
        *(_BYTE *)(v30 + 128) = a13;
        if (a15)
          v38 = CFRetain(a15);
        else
          v38 = 0;
        *(_QWORD *)(v30 + 144) = v38;
        *(_BYTE *)(v30 + 152) = a17;
        *(_DWORD *)(v30 + 156) = a16;
        if (a14)
          v39 = CFRetain(a14);
        else
          v39 = 0;
        *(_QWORD *)(v30 + 136) = v39;
        v40 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!(_DWORD)v40)
          *a18 = 0;
        return v40;
      }
      return FigSignalErrorAt();
    }
    return v28;
  }
  return FigSignalErrorAt();
}

uint64_t FigMetricHLSMediaSegmentRequestEventCreate(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, __int128 *a5, const void *a6, const void *a7, CFAbsoluteTime a8, CFAbsoluteTime a9, CFAbsoluteTime a10, CFAbsoluteTime a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, const void *a16, const void *a17, int a18, char a19, _QWORD *a20)
{
  uint64_t v31;
  uint64_t DerivedStorage;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  CFAbsoluteTime Current;
  __int128 v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  uint64_t v44;

  if (a20)
  {
    FigMetricEventGetClassID();
    v31 = CMDerivedObjectCreate();
    if (!(_DWORD)v31)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage)
        return 4294954510;
      v33 = DerivedStorage;
      v34 = FigSimpleMutexCreate();
      *(_QWORD *)(v33 + 184) = v34;
      if (v34)
      {
        *(_BYTE *)v33 = 1;
        *(_QWORD *)(v33 + 8) = 1;
        if (a6)
        {
          v35 = (void *)CFRetain(a6);
        }
        else
        {
          Current = CFAbsoluteTimeGetCurrent();
          v35 = CFDateCreate(a1, Current);
        }
        *(_QWORD *)(v33 + 16) = v35;
        v37 = *a5;
        *(_QWORD *)(v33 + 48) = *((_QWORD *)a5 + 2);
        *(_OWORD *)(v33 + 32) = v37;
        if (a7)
          v38 = CFRetain(a7);
        else
          v38 = 0;
        *(_QWORD *)(v33 + 24) = v38;
        if (a2)
          v39 = CFRetain(a2);
        else
          v39 = 0;
        *(_QWORD *)(v33 + 56) = v39;
        if (a3)
          v40 = CFRetain(a3);
        else
          v40 = 0;
        *(_QWORD *)(v33 + 64) = v40;
        if (a4)
          v41 = CFRetain(a4);
        else
          v41 = 0;
        *(_QWORD *)(v33 + 72) = v41;
        *(_QWORD *)(v33 + 80) = CFDateCreate(a1, a8);
        *(_QWORD *)(v33 + 88) = CFDateCreate(a1, a9);
        *(_QWORD *)(v33 + 96) = CFDateCreate(a1, a10);
        *(_QWORD *)(v33 + 104) = CFDateCreate(a1, a11);
        *(_QWORD *)(v33 + 112) = a13;
        *(_QWORD *)(v33 + 120) = a14;
        *(_BYTE *)(v33 + 128) = a15;
        *(_DWORD *)(v33 + 156) = a18;
        if (a16)
          v42 = CFRetain(a16);
        else
          v42 = 0;
        *(_QWORD *)(v33 + 136) = v42;
        if (a17)
          v43 = CFRetain(a17);
        else
          v43 = 0;
        *(_QWORD *)(v33 + 144) = v43;
        *(_BYTE *)(v33 + 176) = a19;
        v44 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!(_DWORD)v44)
          *a20 = 0;
        return v44;
      }
      return FigSignalErrorAt();
    }
    return v31;
  }
  return FigSignalErrorAt();
}

uint64_t FigMetricContentKeyRequestEventCreate(const __CFAllocator *a1, const void *a2, const void *a3, __int128 *a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, CFAbsoluteTime a9, CFAbsoluteTime a10, CFAbsoluteTime a11, CFAbsoluteTime a12, char a13, const void *a14, const void *a15, int a16, char a17, const void *a18, _QWORD *a19)
{
  uint64_t v29;
  uint64_t DerivedStorage;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  CFAbsoluteTime Current;
  __int128 v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  uint64_t v42;

  if (a19)
  {
    FigMetricEventGetClassID();
    v29 = CMDerivedObjectCreate();
    if (!(_DWORD)v29)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage)
        return 4294954510;
      v31 = DerivedStorage;
      v32 = FigSimpleMutexCreate();
      *(_QWORD *)(v31 + 184) = v32;
      if (v32)
      {
        *(_BYTE *)v31 = 1;
        *(_QWORD *)(v31 + 8) = 2;
        if (a5)
        {
          v33 = (void *)CFRetain(a5);
        }
        else
        {
          Current = CFAbsoluteTimeGetCurrent();
          v33 = CFDateCreate(a1, Current);
        }
        *(_QWORD *)(v31 + 16) = v33;
        v35 = *a4;
        *(_QWORD *)(v31 + 48) = *((_QWORD *)a4 + 2);
        *(_OWORD *)(v31 + 32) = v35;
        if (a6)
          v36 = CFRetain(a6);
        else
          v36 = 0;
        *(_QWORD *)(v31 + 24) = v36;
        if (a2)
          v37 = CFRetain(a2);
        else
          v37 = 0;
        *(_QWORD *)(v31 + 56) = v37;
        if (a3)
          v38 = CFRetain(a3);
        else
          v38 = 0;
        *(_QWORD *)(v31 + 72) = v38;
        *(_QWORD *)(v31 + 80) = CFDateCreate(a1, a9);
        *(_QWORD *)(v31 + 88) = CFDateCreate(a1, a10);
        *(_QWORD *)(v31 + 96) = CFDateCreate(a1, a11);
        *(_QWORD *)(v31 + 104) = CFDateCreate(a1, a12);
        *(_QWORD *)(v31 + 112) = a7;
        *(_QWORD *)(v31 + 120) = a8;
        *(_BYTE *)(v31 + 128) = a13;
        if (a14)
          v39 = CFRetain(a14);
        else
          v39 = 0;
        *(_QWORD *)(v31 + 136) = v39;
        if (a15)
          v40 = CFRetain(a15);
        else
          v40 = 0;
        *(_QWORD *)(v31 + 144) = v40;
        *(_DWORD *)(v31 + 156) = a16;
        v41 = a18;
        if (a18)
          v41 = CFRetain(a18);
        *(_QWORD *)(v31 + 168) = v41;
        *(_BYTE *)(v31 + 160) = a17;
        v42 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!(_DWORD)v42)
          *a19 = 0;
        return v42;
      }
      return FigSignalErrorAt();
    }
    return v29;
  }
  return FigSignalErrorAt();
}

uint64_t merr_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[7];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[8];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[9];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[17];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[18];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)DerivedStorage[21];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)DerivedStorage[2];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)DerivedStorage[11];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)DerivedStorage[10];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)DerivedStorage[13];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)DerivedStorage[12];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)DerivedStorage[3];
  if (v12)
    CFRelease(v12);
  return FigSimpleMutexDestroy();
}

CFStringRef merr_copyDebugDesc(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  const __CFString *v3;
  const __CFAllocator *AllocatorForMedia;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v2 && v2(a1) == 2)
    v3 = CFSTR("[FigMetricContentKeyRequestEvent  %p]");
  else
    v3 = CFSTR("[FigMetricResourceRequestEvent %p]");
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, v3, a1);
}

void merr_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t merr_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 23));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 23));
  return v1;
}

uint64_t merr_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t merr_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef merr_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 184));
  return v2;
}

uint64_t merr_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 184));
  return v5;
}

void merr_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t merr_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 184));
  return v4;
}

uint64_t merr_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  int64_t v5;
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  const void *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void (*v13)(uint64_t);
  void (*v14)(uint64_t);
  void (*v15)(uint64_t);
  void (*v16)(uint64_t);
  void (*v17)(uint64_t);
  void (*v18)(uint64_t);
  void (*v19)(uint64_t);
  void (*v20)(uint64_t);
  int64_t v21;
  int64_t v22;
  uint64_t (*v23)(uint64_t);
  int64_t v24;
  unsigned int (*v25)(uint64_t);
  BOOL v26;
  unsigned int (*v27)(uint64_t);
  int64_t v28;
  unsigned int (*v29)(uint64_t);
  BOOL v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  unsigned int (*v33)(uint64_t);
  BOOL v34;
  const char *v35;
  unsigned int (*v36)(uint64_t);
  void (*v37)(uint64_t);
  uint64_t v38;
  __int128 v40;
  uint64_t v41;

  if (a1 && a2)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v4)
      v5 = v4(a1);
    else
      v5 = -12782;
    xpc_dictionary_set_int64(a2, "EventID", v5);
    v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v6)
    {
      v6(&v40, a1);
    }
    else
    {
      v40 = *MEMORY[0x1E0CA2E18];
      v41 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    }
    v7 = FigXPCMessageSetCMTime();
    if ((_DWORD)v7)
      return v7;
    v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v8)
      v8(a1);
    v7 = FigXPCMessageSetCFDate();
    if ((_DWORD)v7)
      return v7;
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v9)
      v10 = (const void *)v9(a1);
    else
      v10 = 0;
    v11 = FigXPCMessageSetCFString();
    if (!(_DWORD)v11)
    {
      v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 8);
      if (v12)
        v12(a1);
      v11 = FigXPCMessageSetCFURL();
      if (!(_DWORD)v11)
      {
        v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 16);
        if (v13)
          v13(a1);
        v11 = FigXPCMessageSetCFString();
        if (!(_DWORD)v11)
        {
          v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 24);
          if (v14)
            v14(a1);
          v11 = FigXPCMessageSetCFDate();
          if (!(_DWORD)v11)
          {
            v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 32);
            if (v15)
              v15(a1);
            v11 = FigXPCMessageSetCFDate();
            if (!(_DWORD)v11)
            {
              v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 40);
              if (v16)
                v16(a1);
              v11 = FigXPCMessageSetCFDate();
              if (!(_DWORD)v11)
              {
                v17 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 48);
                if (v17)
                  v17(a1);
                v11 = FigXPCMessageSetCFDate();
                if (!(_DWORD)v11)
                {
                  v18 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 72);
                  if (v18)
                    v18(a1);
                  v11 = FigXPCMessageSetCFError();
                  if (!(_DWORD)v11)
                  {
                    v19 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 80);
                    if (v19)
                      v19(a1);
                    v11 = FigXPCMessageSetCFData();
                    if (!(_DWORD)v11)
                    {
                      v20 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 56);
                      if (v20)
                      {
                        v20(a1);
                        v22 = v21;
                      }
                      else
                      {
                        v22 = 0;
                      }
                      xpc_dictionary_set_int64(a2, "ByteRangeLength", v22);
                      v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 56);
                      if (v23)
                        v24 = v23(a1);
                      else
                        v24 = 0;
                      xpc_dictionary_set_int64(a2, "ByteRangeLocation", v24);
                      v25 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 64);
                      if (v25)
                        v26 = v25(a1) != 0;
                      else
                        v26 = 0;
                      xpc_dictionary_set_BOOL(a2, "ReadFromCache", v26);
                      v27 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 96);
                      if (v27)
                        v28 = v27(a1);
                      else
                        v28 = 1836415096;
                      xpc_dictionary_set_int64(a2, "MediaType", v28);
                      if (v5 == 2)
                      {
                        v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 112);
                        if (v31)
                          v32 = v31(a1);
                        else
                          v32 = 0;
                        v11 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(a2, v32);
                        if (!(_DWORD)v11)
                        {
                          v36 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32)
                                                                       + 120);
                          if (v36)
                            v30 = v36(a1) != 0;
                          else
                            v30 = 0;
                          v35 = "IsClientInitiated";
                          goto LABEL_73;
                        }
                      }
                      else
                      {
                        if (v5 != 1)
                        {
                          if (v5)
                            goto LABEL_74;
                          v29 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 88);
                          if (v29)
                            v30 = v29(a1) != 0;
                          else
                            v30 = 0;
                          v35 = "IsMultivariantPlaylist";
LABEL_73:
                          xpc_dictionary_set_BOOL(a2, v35, v30);
LABEL_74:
                          v38 = 0;
                          if (!v10)
                            return v38;
                          goto LABEL_78;
                        }
                        v33 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 104);
                        if (v33)
                          v34 = v33(a1) != 0;
                        else
                          v34 = 0;
                        xpc_dictionary_set_BOOL(a2, "IsMapSegment", v34);
                        v37 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 128);
                        if (v37)
                          v37(a1);
                        v11 = FigXPCMessageSetCFURL();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v38 = v11;
    if (!v10)
      return v38;
LABEL_78:
    CFRelease(v10);
    return v38;
  }
  return FigSignalErrorAt();
}

uint64_t merr_getURL()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t merr_getServerAddress()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t merr_getRequestStartTime()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t merr_getRequestEndTime()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t merr_getResponseStartTime()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
}

uint64_t merr_getResponseEndTime()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104);
}

uint64_t merr_getByteRange()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112);
}

uint64_t merr_getReadFromCache()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 128);
}

uint64_t merr_getError()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 136);
}

uint64_t merr_getNetworkTransactionMetrics()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
}

uint64_t merr_isMultivariantPlaylist()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 152);
}

uint64_t merr_getMediaType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 156);
}

uint64_t merr_isMapSegment()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 176);
}

uint64_t merr_getIndexFileURL()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t merr_getContentKeySpecifier()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 168);
}

uint64_t merr_isKeyRequestClientInitiated()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 160);
}

uint64_t FigVirtualDisplaySourceGetClassID()
{
  MEMORY[0x19402F294](&FigVirtualDisplaySourceGetClassID_once, virtualDisplaySourceRegisterType);
  return sVirtualDisplaySourceClassID;
}

uint64_t virtualDisplaySourceRegisterType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplaySourceGetTypeID()
{
  MEMORY[0x19402F294](&FigVirtualDisplaySourceGetClassID_once, virtualDisplaySourceRegisterType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef virtualDisplaySourceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVirtualDisplaySource %p]"), a1);
}

uint64_t FigAssetCacheInspectorCreate_Remote(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t ObjectID;
  uint64_t uint64;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t value;
  xpc_object_t v12;
  xpc_object_t xdict;
  CFTypeRef cf[5];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v12 = 0;
  xdict = 0;
  value = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  cf[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
  cf[1] = (CFTypeRef)0x40000000;
  cf[2] = __raci_ensureClientEstablished_block_invoke;
  cf[3] = &unk_1E2F8D858;
  cf[4] = &v15;
  if (raci_ensureClientEstablished_sFigAssetCacheInspectorRemoteClientSetupOnce != -1)
    dispatch_once(&raci_ensureClientEstablished_sFigAssetCacheInspectorRemoteClientSetupOnce, cf);
  v5 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  if (!(_DWORD)v5)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if ((_DWORD)ObjectID || (ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value), (_DWORD)ObjectID))
    {
      v5 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, "AssetToken", value);
      v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v5)
      {
        uint64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E0CA36A0]);
        cf[0] = 0;
        FigAssetCacheInspectorGetClassID();
        v5 = CMDerivedObjectCreate();
        v8 = cf[0];
        if (!(_DWORD)v5)
        {
          *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = uint64;
          v5 = FigXPCRemoteClientAssociateObject();
          v8 = cf[0];
          if (!(_DWORD)v5)
          {
            if (cf[0])
            {
              v9 = CFRetain(cf[0]);
              v8 = cf[0];
            }
            else
            {
              v9 = 0;
            }
            v5 = 0;
            *a3 = v9;
          }
        }
        if (v8)
          CFRelease(v8);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

void __raci_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("AssetCacheInspector_ServerConnectionDied"));
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t raci_deadConnectionCallback()
{
  CMBaseObjectGetDerivedStorage();
  return FigAtomicCompareAndSwap32();
}

uint64_t raci_invalidate()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwap32())
    goto LABEL_6;
  v0 = FigXPCRemoteClientDisassociateObject();
  if ((_DWORD)v0)
  {
    v2 = v0;
    goto LABEL_7;
  }
  if (FigAtomicCompareAndSwap32())
  {
    v1 = FigXPCCreateBasicMessage();
    if ((_DWORD)v1)
      v2 = v1;
    else
      v2 = FigXPCRemoteClientSendSyncMessage();
  }
  else
  {
LABEL_6:
    v2 = 0;
  }
LABEL_7:
  FigXPCRelease();
  return v2;
}

CFStringRef raci_copyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigRemoteAssetCacheInspector %p>"), a1);
}

uint64_t raci_copyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = raci_getObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t raci_setProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = raci_getObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t raci_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwap32() || !FigAtomicCompareAndSwap32())
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t raci_copyCompletelyCachedMediaSelectionOptionsInGroup(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  CFTypeID v6;
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()) && a4)
  {
    ObjectID = raci_getObjectID(a1, &v10);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCMessageSetCFObject();
          if (!(_DWORD)ObjectID)
          {
            ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!(_DWORD)ObjectID)
              ObjectID = FigXPCMessageCopyCFArray();
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v8 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigCDSCALayerOutputNodeCreate(_QWORD *a1)
{
  uint64_t result;
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return FigSignalErrorAt();
  *a1 = 0;
  v5 = 0;
  MEMORY[0x19402F294](&FigCDSCALayerOutputNodeGetClassID_sRegisterFigCDSCALayerOutputNodeBaseTypeOnce, RegisterFigCDSCALayerOutputNodeBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v4 = 0;
    FigCDSOutputNodeCreate(v5, &v4);
    *DerivedStorage = v4;
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    DerivedStorage[1] = objc_alloc_init(FigCDSCALayerOutputNodeLayer);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t FigCDSCALayerOutputNodeAttachToCALayer(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "addSublayer:", *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8));
  return 0;
}

void FigCDSCALayerOutputNodeFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend(*(id *)(DerivedStorage + 8), "removeFromSuperlayer");

  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *FigCDSCALayerOutputNodeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigCDSCALayerOutputNode: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSCALayerOutputNode <FigCDSOutputNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_AddChildNode(const void *a1, const void *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const void *);
  _QWORD v10[6];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_AddChildNode_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 24);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const void *);
  _QWORD block[5];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveChildNode_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v4 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, const void *))(v6 + 32);
  if (v7)
    return v7(v4, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetChildNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveAllChildNodes(const void *a1)
{
  uint64_t *DerivedStorage;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  _QWORD block[5];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveAllChildNodes_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v3 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t))(v5 + 56);
  if (v6)
    return v6(v3);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetPosition(const void *a1, double a2, double a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, double, double);
  _QWORD block[7];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetPosition_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  *(double *)&block[5] = a2;
  *(double *)&block[6] = a3;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v7 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 72);
  if (v10)
    return v10(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetSize(const void *a1, double a2, double a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, double, double);
  _QWORD block[7];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetSize_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  *(double *)&block[5] = a2;
  *(double *)&block[6] = a3;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v7 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 88);
  if (v10)
    return v10(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetContent(const void *a1, const void *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const void *);
  _QWORD v10[6];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetContent_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 104);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_DumpInfo()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 112);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t RegisterFigCDSCALayerOutputNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSCALayerOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSCALayerOutputNode]"));
}

uint64_t FigSampleBufferConsumerCreateThatDiscards(_QWORD *a1)
{
  uint64_t v2;

  if (!a1)
    return FigSignalErrorAt();
  FigSampleBufferConsumerGetClassID();
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
    *a1 = 0;
  return v2;
}

__CFString *blackhole_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerThatDiscards %p>"), a1);
  return Mutable;
}

uint64_t blackhole_sendSampleBuffer()
{
  return 0;
}

uint64_t blackhole_isQueueAtOrAboveHighWater()
{
  return 0;
}

uint64_t blackhole_isQueueBelowLowWater()
{
  return 1;
}

uint64_t blackhole_installLowWaterTrigger()
{
  return 0;
}

uint64_t blackhole_removeLowWaterTrigger()
{
  return 0;
}

uint64_t blackhole_getPendingSampleBufferCount()
{
  return 0;
}

uint64_t blackhole_setAttachmentOnPendingSampleBuffersInPTSRange()
{
  return 0;
}

uint64_t blackhole_postNotification()
{
  return 0;
}

uint64_t blackhole_flush()
{
  return 0;
}

uint64_t FigSampleBufferConsumerGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleBufferConsumerGetClassID_sRegisterFigSampleBufferConsumerTypeOnce, RegisterFigSampleBufferConsumerType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferConsumerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleBufferConsumer %p]"), a1);
}

uint64_t TTMLParserGetTypeID()
{
  MEMORY[0x19402F294](&TTMLParserGetTypeID_sRegisterTTMLParserOnce, ttmlParser_RegisterTTMLParser);
  return sTTMLParserID;
}

uint64_t ttmlParser_RegisterTTMLParser()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sTTMLParserID = result;
  return result;
}

uint64_t TTMLParserCreate(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  const __CFAllocator *v8;
  _QWORD *Instance;
  _QWORD *v10;
  CFDictionaryRef Copy;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&TTMLParserGetTypeID_sRegisterTTMLParserOnce, ttmlParser_RegisterTTMLParser);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = Instance;
  Instance[2] = a2;
  Instance[3] = a1;
  Instance[7] = CFSetCreateMutable(v8, 0, 0);
  if (a3)
    Copy = CFDictionaryCreateCopy(v8, a3);
  else
    Copy = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10[8] = Copy;
  *a4 = v10;
  return 0;
}

uint64_t TTMLParserRegisterReportingCallbacks(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 32) = *a3;
  return 0;
}

uint64_t TTMLParserParseStream(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v3;
  uint64_t v4;
  CFIndex v5;
  CFMutableArrayRef v6;
  const __CFDictionary *ValueAtIndex;
  void *v8;
  CFMutableArrayRef Mutable;
  uint64_t active;
  CFIndex v11;
  const void *epoch;
  const void *v13;
  uint64_t SynchronicTree;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  const __CFArray *v18;
  CFIndex v19;
  const void *v20;
  uint64_t Parameters;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  const void *v25;
  uint64_t ActiveTimeRange;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __CFArray *v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex v33;
  const void *v34;
  uint64_t CMBaseObject;
  unsigned int (*v36)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v41;
  const void *v42;
  const __CFDictionary *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *);
  uint64_t v57;
  unsigned int (*v58)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *);
  uint64_t v59;
  unsigned int (*v60)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v61;
  const void *v62;
  CFTypeRef v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, CFTypeRef);
  CFTypeRef v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, const __CFString *, CFTypeRef);
  CFStringRef v69;
  CFStringRef v70;
  CFRange v71;
  CFIndex v72;
  const __CFString *v73;
  const __CFString *v74;
  const void *v75;
  CFIndex v76;
  CFIndex v77;
  CFIndex i;
  const void *v79;
  uint64_t v80;
  unsigned int (*v81)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *);
  uint64_t v84;
  CFTypeRef v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, const void *, CFTypeRef);
  CFTypeRef v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t, uint64_t, CFTypeRef);
  CFTypeRef v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v94;
  CMTimeValue v96;
  const void *v97;
  const void *v98;
  CFIndex v99;
  uint64_t v100;
  CFIndex Count;
  const void *v102;
  const void *v103;
  const void *v104;
  CFIndex v105;
  uint64_t v106;
  CFIndex v107;
  uint64_t v108;
  void *key;
  __CFArray *v110;
  const __CFAllocator *alloc;
  CMTimeRange v113;
  CMTimeRange v114;
  CFTypeRef v115;
  CFArrayRef theArray;
  CFTypeRef v117;
  uint64_t v118;
  CFArrayRef v119;
  CFTypeRef v120;
  CFTypeRef cf;
  void *value;
  CFArrayRef v123;
  CFTypeRef v124;
  CFTypeRef v125;
  CMTimeRange otherRange;
  CMTimeRange v127;
  CFTypeRef v128;
  CFTypeRef v129;
  CFTypeRef v130;
  CFTypeRef v131;
  CFTypeRef v132;
  CFTypeRef v133;
  CFTypeRef v134;
  CMTimeRange range;
  __int128 v136;
  CMTimeRange context;
  __int128 v138;
  char v139;
  const void *v140;
  const void *v141;
  char v142;
  const void *v143;
  const void *v144;
  char v145;
  uint64_t v146;
  CFRange v147;

  v146 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  v117 = 0;
  v115 = 0;
  CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 56));
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = FigTTMLTreeCreate(*MEMORY[0x1E0C9AE00], a2, (uint64_t *)&v117);
  if (!(_DWORD)v4)
  {
    v4 = FigTTMLTreeCopySliceTimeRangeArray((uint64_t)v117, &theArray);
    if (!(_DWORD)v4)
    {
      Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
        v6 = 0;
        goto LABEL_240;
      }
      v5 = 0;
      v6 = 0;
      key = (void *)*MEMORY[0x1E0CA3550];
      v106 = *MEMORY[0x1E0CA3340];
      v100 = *MEMORY[0x1E0CA3438];
      v104 = (const void *)*MEMORY[0x1E0CA3490];
      v103 = (const void *)*MEMORY[0x1E0CA34B0];
      v102 = (const void *)*MEMORY[0x1E0CA3428];
      v97 = (const void *)*MEMORY[0x1E0CA3408];
      v98 = (const void *)*MEMORY[0x1E0CA34B8];
      v96 = *MEMORY[0x1E0CA3378];
      alloc = v3;
      while (1)
      {
        memset(&v114, 0, sizeof(v114));
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v5);
        CMTimeRangeMakeFromDictionary(&v114, ValueAtIndex);
        if (v6)
          CFRelease(v6);
        v8 = (void *)v117;
        v113 = v114;
        value = 0;
        v123 = 0;
        v120 = 0;
        cf = 0;
        v118 = 0;
        v119 = 0;
        Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
        *(_OWORD *)&context.start.value = *(_OWORD *)&v113.start.value;
        context.start.epoch = v113.start.epoch;
        active = FigTTMLTreeCopyActiveRegionArray((uint64_t)v8, (__int128 *)&context.start.value, &v123);
        if ((_DWORD)active)
        {
          v29 = active;
          v6 = 0;
          epoch = 0;
          goto LABEL_212;
        }
        v105 = v5;
        v107 = CFArrayGetCount(v123);
        v110 = Mutable;
        if (v107 < 1)
          break;
        v11 = 0;
        epoch = 0;
        while (1)
        {
          v13 = CFArrayGetValueAtIndex(v123, v11);
          *(_OWORD *)&context.start.value = *(_OWORD *)&v113.start.value;
          context.start.epoch = v113.start.epoch;
          SynchronicTree = FigTTMLTreeCreateSynchronicTree(v3, v8, (__int128 *)&context.start.value, v13, (uint64_t *)&v120);
          if ((_DWORD)SynchronicTree
            || (SynchronicTree = FigTTMLSynchronicTreeCopyCaptionArray((uint64_t)v120, &v119), (_DWORD)SynchronicTree))
          {
            v29 = SynchronicTree;
LABEL_48:
            v6 = 0;
            goto LABEL_211;
          }
          v15 = CFArrayGetCount(v119);
          if (v15 >= 1)
            break;
LABEL_40:
          if (v120)
          {
            CFRelease(v120);
            v120 = 0;
          }
          if (v119)
          {
            CFRelease(v119);
            v119 = 0;
          }
          if (++v11 == v107)
            goto LABEL_50;
        }
        v16 = v15;
        v17 = 0;
        while (1)
        {
          v18 = (const __CFArray *)CFArrayGetValueAtIndex(v119, v17);
          if (epoch)
            CFRelease(epoch);
          context.start.value = 0;
          *(_QWORD *)&context.start.timescale = a1;
          context.start.epoch = (CMTimeEpoch)CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!context.start.epoch)
            break;
          v147.length = CFArrayGetCount(v18);
          v147.location = 0;
          CFArrayApplyFunction(v18, v147, (CFArrayApplierFunction)ttmlParser_addTextNodeSourceInformation, &context);
          epoch = (const void *)context.start.epoch;
LABEL_18:
          v19 = CFDictionaryGetCount((CFDictionaryRef)epoch);
          if (!epoch || v19)
          {
            if (epoch)
            {
              if (*(_QWORD *)(a1 + 32))
              {
                v20 = CFDictionaryGetValue((CFDictionaryRef)epoch, key);
                if (v20)
                  (*(void (**)(_QWORD, const void *))(a1 + 32))(*(_QWORD *)(a1 + 48), v20);
              }
            }
          }
          else
          {
            CFRelease(epoch);
            epoch = 0;
          }
          Parameters = FigTTMLTreeGetParameters((uint64_t)v8, &v118);
          if ((_DWORD)Parameters
            || (Parameters = FigCaptionDataCreateForTTML((uint64_t)v3, v18, v120, v13, epoch, v118, &cf),
                (_DWORD)Parameters))
          {
            v29 = Parameters;
            v6 = 0;
            goto LABEL_233;
          }
          context = v113;
          v22 = CFArrayGetCount(v18);
          if (v22)
          {
            v23 = v22;
            v24 = 0;
            while (1)
            {
              v25 = CFArrayGetValueAtIndex(v18, v24);
              memset(&v127, 0, sizeof(v127));
              ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)v25, (uint64_t)&v127);
              if ((_DWORD)ActiveTimeRange)
                break;
              range = context;
              otherRange = v127;
              CMTimeRangeGetUnion(&context, &range, &otherRange);
              if (v23 == ++v24)
                goto LABEL_31;
            }
            v29 = ActiveTimeRange;
            v3 = alloc;
            goto LABEL_47;
          }
LABEL_31:
          v127 = context;
          v3 = alloc;
          v27 = FigCaptionCreate((uint64_t)alloc, (__int128 *)&v127.start.value, (uint64_t)cf, (CFTypeRef *)&value);
          if ((_DWORD)v27)
          {
            v29 = v27;
LABEL_47:
            Mutable = v110;
            goto LABEL_48;
          }
          Mutable = v110;
          CFArrayAppendValue(v110, value);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          if (++v17 == v16)
            goto LABEL_40;
        }
        v28 = FigSignalErrorAt();
        epoch = 0;
        if (!(_DWORD)v28)
          goto LABEL_18;
        v29 = v28;
        v6 = 0;
LABEL_233:
        v5 = v105;
        Mutable = v110;
LABEL_212:
        if (v119)
          CFRelease(v119);
        if (v120)
          CFRelease(v120);
        if (epoch)
          CFRelease(epoch);
        if (Mutable)
          CFRelease(Mutable);
        if (cf)
          CFRelease(cf);
        if (value)
          CFRelease(value);
        if (v123)
          CFRelease(v123);
        if ((_DWORD)v29)
          goto LABEL_241;
        if (v115)
        {
          CFRelease(v115);
          v115 = 0;
        }
        context = v114;
        v94 = FigSampleBufferCreateFromFigCaptions((uint64_t)v3, v6, (uint64_t)&context, &v115);
        if ((_DWORD)v94)
        {
          v29 = v94;
          goto LABEL_241;
        }
        (*(void (**)(_QWORD, CFTypeRef))(a1 + 16))(*(_QWORD *)(a1 + 24), v115);
        if (++v5 == Count)
        {
LABEL_240:
          v29 = 0;
          goto LABEL_241;
        }
      }
      epoch = 0;
LABEL_50:
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), CFSTR("ConsolidateiTTRegions"));
      if (FigCFEqual())
      {
        v132 = 0;
        v131 = 0;
        v130 = 0;
        v129 = 0;
        v128 = 0;
        v30 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v31 = CFArrayGetCount(Mutable);
          if (v31 >= 1)
          {
            v32 = v31;
            v33 = 0;
            v99 = v31;
            do
            {
              v34 = CFArrayGetValueAtIndex(Mutable, v33);
              if (v132)
              {
                CFRelease(v132);
                v132 = 0;
              }
              v108 = (uint64_t)v34;
              CMBaseObject = FigCaptionGetCMBaseObject(v34);
              v36 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (!v36 || v36(CMBaseObject, CFSTR("CaptionData"), v3, &v132))
                goto LABEL_151;
              v133 = 0;
              v134 = 0;
              v37 = FigCaptionDataGetCMBaseObject();
              v38 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v38 && !v38(v37, v106, v3, &v133))
              {
                if (v133)
                {
                  v39 = FigCaptionRegionGetCMBaseObject();
                  v40 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v40 && !v40(v39, v100, v3, &v134))
                  {
                    if (FigCFEqual())
                    {
                      context.start.value = (CMTimeValue)v104;
                      MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(_QWORD *)&context.start.timescale = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v104);
                      LOBYTE(context.start.epoch) = 0;
                      context.duration.value = (CMTimeValue)v103;
                      MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(_QWORD *)&context.duration.timescale = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v103);
                      LOBYTE(context.duration.epoch) = 0;
                      *(_QWORD *)&v138 = v102;
                      MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *((_QWORD *)&v138 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v102);
                      v139 = 0;
                      v140 = v97;
                      MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      v141 = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v97);
                      v142 = 0;
                      v143 = v98;
                      MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      v144 = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v98);
                      v145 = 1;
                      v41 = FigCaptionRegionGetCMBaseObject();
                      if (ttmlParser_doPropertiesMatch(v41, (uint64_t)&context, 5))
                      {
                        v42 = (const void *)v96;
                        range.start.value = v96;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v43 = (const __CFDictionary *)g_topRegionProperties;
                        goto LABEL_69;
                      }
LABEL_77:
                      v46 = 1;
                    }
                    else
                    {
                      if (FigCFEqual())
                      {
                        context.start.value = (CMTimeValue)v104;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *(_QWORD *)&context.start.timescale = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v104);
                        LOBYTE(context.start.epoch) = 0;
                        context.duration.value = (CMTimeValue)v103;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *(_QWORD *)&context.duration.timescale = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v103);
                        LOBYTE(context.duration.epoch) = 0;
                        *(_QWORD *)&v138 = v102;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *((_QWORD *)&v138 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v102);
                        v139 = 0;
                        v140 = v97;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v141 = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v97);
                        v142 = 0;
                        v143 = v98;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v144 = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v98);
                        v145 = 1;
                        v44 = FigCaptionRegionGetCMBaseObject();
                        if (!ttmlParser_doPropertiesMatch(v44, (uint64_t)&context, 5))
                          goto LABEL_77;
                        v42 = (const void *)v96;
                        range.start.value = v96;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v43 = (const __CFDictionary *)g_bottomRegionProperties;
                      }
                      else if (FigCFEqual())
                      {
                        context.start.value = (CMTimeValue)v104;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *(_QWORD *)&context.start.timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v104);
                        LOBYTE(context.start.epoch) = 0;
                        context.duration.value = (CMTimeValue)v103;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *(_QWORD *)&context.duration.timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v103);
                        LOBYTE(context.duration.epoch) = 0;
                        *(_QWORD *)&v138 = v102;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *((_QWORD *)&v138 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v102);
                        v139 = 0;
                        v140 = v98;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v141 = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v98);
                        v142 = 1;
                        v47 = FigCaptionRegionGetCMBaseObject();
                        if (!ttmlParser_doPropertiesMatch(v47, (uint64_t)&context, 4))
                          goto LABEL_77;
                        v42 = (const void *)v96;
                        range.start.value = v96;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v43 = (const __CFDictionary *)g_leftRegionProperties;
                      }
                      else
                      {
                        if (!FigCFEqual())
                          goto LABEL_77;
                        context.start.value = (CMTimeValue)v104;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *(_QWORD *)&context.start.timescale = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v104);
                        LOBYTE(context.start.epoch) = 0;
                        context.duration.value = (CMTimeValue)v103;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *(_QWORD *)&context.duration.timescale = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v103);
                        LOBYTE(context.duration.epoch) = 0;
                        *(_QWORD *)&v138 = v102;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        *((_QWORD *)&v138 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v102);
                        v139 = 0;
                        v140 = v98;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v141 = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v98);
                        v142 = 1;
                        v48 = FigCaptionRegionGetCMBaseObject();
                        if (!ttmlParser_doPropertiesMatch(v48, (uint64_t)&context, 4))
                          goto LABEL_77;
                        v42 = (const void *)v96;
                        range.start.value = v96;
                        MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        v43 = (const __CFDictionary *)g_rightRegionProperties;
                      }
LABEL_69:
                      *(_QWORD *)&range.start.timescale = CFDictionaryGetValue(v43, v42);
                      LOBYTE(range.start.epoch) = 1;
                      v45 = FigCaptionDataGetCMBaseObject();
                      if (!ttmlParser_doPropertiesMatch(v45, (uint64_t)&range, 1))
                        goto LABEL_77;
                      v46 = 0;
                    }
                    Mutable = v110;
                    v32 = v99;
                    goto LABEL_81;
                  }
                }
                else
                {
                  FigSignalErrorAt();
                }
              }
              v46 = 1;
LABEL_81:
              if (v134)
                CFRelease(v134);
              if (v133)
                CFRelease(v133);
              if (!v46)
                goto LABEL_133;
              if (v131)
              {
                CFRelease(v131);
                v131 = 0;
              }
              v49 = FigCaptionDataGetCMBaseObject();
              v50 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (!v50 || v50(v49, v106, v3, &v131))
                goto LABEL_151;
              if (!v131)
              {
                FigSignalErrorAt();
                goto LABEL_151;
              }
              if (v128)
              {
                CFRelease(v128);
                v128 = 0;
              }
              v51 = FigCaptionRegionGetCMBaseObject();
              v52 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (!v52 || v52(v51, v100, v3, &v128))
                goto LABEL_151;
              v53 = *(_OWORD *)(MEMORY[0x1E0CA4AE8] + 16);
              *(_OWORD *)&context.start.value = *MEMORY[0x1E0CA4AE8];
              *(_OWORD *)&context.start.epoch = v53;
              v54 = *(_OWORD *)(MEMORY[0x1E0CA4AE8] + 48);
              *(_OWORD *)&context.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA4AE8] + 32);
              v138 = v54;
              v134 = 0;
              v55 = FigCaptionRegionGetCMBaseObject();
              v56 = *(unsigned int (**)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v56 && !v56(v55, v104, v3, &v134))
              {
                FigCaptionDynamicStyleGetInitialValue();
                memset(&range, 0, 32);
                FigGeometryPointMakeFromDictionary();
                if (v134)
                {
                  CFRelease(v134);
                  v134 = 0;
                }
                v57 = FigCaptionRegionGetCMBaseObject();
                v58 = *(unsigned int (**)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v58 && !v58(v57, v103, v3, &v134))
                {
                  FigCaptionDynamicStyleGetInitialValue();
                  FigGeometryDimensionMakeFromDictionary();
                  if (v134)
                  {
                    CFRelease(v134);
                    v134 = 0;
                  }
                  v59 = FigCaptionRegionGetCMBaseObject();
                  v60 = *(unsigned int (**)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v60 && !v60(v59, v102, v3, &v134))
                  {
                    FigCaptionDynamicStyleGetInitialValue();
                    FigGeometryDimensionMakeFromDictionary();
                    FigGeometrySizeMake();
                    FigGeometryRectMake();
                  }
                }
              }
              if (v134)
                CFRelease(v134);
              ttmlParser_getTopRegionRect();
              range = context;
              v136 = v138;
              if (FigGeometryRectEqualToRect())
              {
                v61 = v131;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                v62 = (const void *)g_topRegion;
LABEL_116:
                v131 = v62;
                if (v62)
                  CFRetain(v62);
                if (v61)
                  CFRelease(v61);
                if (v129)
                {
                  CFRelease(v129);
                  v129 = 0;
                }
                if (FigCaptionDataCreateMutableCopy())
                  goto LABEL_150;
                v63 = v131;
                v64 = FigCaptionDataGetCMBaseObject();
                v65 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
                if (!v65 || v65(v64, v106, v63))
                  goto LABEL_150;
                if (v130)
                {
                  CFRelease(v130);
                  v130 = 0;
                }
                if (FigCaptionCreateMutableCopy((uint64_t)alloc, v108, &v130)
                  || (v66 = v129,
                      v67 = FigCaptionGetCMBaseObject(v130),
                      (v68 = *(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56)) == 0)
                  || v68(v67, CFSTR("CaptionData"), v66))
                {
LABEL_150:
                  v3 = alloc;
                  goto LABEL_151;
                }
                CFArraySetValueAtIndex(Mutable, v33, v130);
                v3 = alloc;
                v69 = CFStringCreateWithFormat(alloc, 0, CFSTR("region(%@)"), v128);
                goto LABEL_131;
              }
              ttmlParser_getBottomRegionRect();
              range = context;
              v136 = v138;
              if (FigGeometryRectEqualToRect())
              {
                v61 = v131;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                v62 = (const void *)g_bottomRegion;
                goto LABEL_116;
              }
              ttmlParser_getLeftRegionRect();
              range = context;
              v136 = v138;
              if (FigGeometryRectEqualToRect())
              {
                v61 = v131;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                v62 = (const void *)g_leftRegion;
                goto LABEL_116;
              }
              ttmlParser_getRightRegionRect();
              range = context;
              v136 = v138;
              if (FigGeometryRectEqualToRect())
              {
                v61 = v131;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                v62 = (const void *)g_rightRegion;
                goto LABEL_116;
              }
              v69 = CFStringCreateWithFormat(v3, 0, CFSTR("region(%@)"), v128);
LABEL_131:
              v70 = v69;
              CFArrayAppendValue(v30, v69);
              if (v70)
                CFRelease(v70);
LABEL_133:
              ++v33;
            }
            while (v32 != v33);
          }
        }
        if (*(_QWORD *)(a1 + 32))
        {
          if (v30)
            v71.length = CFArrayGetCount(v30);
          else
            v71.length = 0;
          v71.location = 0;
          CFArraySortValues(v30, v71, (CFComparatorFunction)MEMORY[0x1E0C98F10], 0);
          v72 = 0;
          v73 = 0;
          while (v30)
          {
            if (v72 >= CFArrayGetCount(v30))
            {
              if (CFArrayGetCount(v30))
                (*(void (**)(_QWORD, __CFArray *))(a1 + 32))(*(_QWORD *)(a1 + 48), v30);
              break;
            }
            v74 = (const __CFString *)CFArrayGetValueAtIndex(v30, v72);
            if (!v73 || CFStringCompare(v73, v74, 0))
            {
              ++v72;
              v73 = v74;
              v3 = alloc;
            }
            else
            {
              CFArrayRemoveValueAtIndex(v30, v72);
              v3 = alloc;
            }
          }
        }
LABEL_151:
        if (v128)
          CFRelease(v128);
        if (v30)
          CFRelease(v30);
        if (v129)
          CFRelease(v129);
        if (v130)
          CFRelease(v130);
        if (v131)
          CFRelease(v131);
        if (v132)
          CFRelease(v132);
      }
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), CFSTR("FixUpiTTLeftRegionOrigin"));
      if (FigCFEqual())
      {
        range.start.value = 0;
        otherRange.start.value = 0;
        v125 = 0;
        v124 = 0;
        v133 = 0;
        v134 = 0;
        FigGeometryDimensionMake();
        memset(&v127, 0, 32);
        FigGeometryPointMake();
        *(_OWORD *)&context.start.value = *(_OWORD *)&v127.start.value;
        *(_OWORD *)&context.start.epoch = *(_OWORD *)&v127.start.epoch;
        v75 = (const void *)FigGeometryPointCopyAsDictionary();
        if (!FigCaptionDynamicStyleCreate())
        {
          if (Mutable)
          {
            v76 = CFArrayGetCount(Mutable);
            if (v76 >= 1)
            {
              v77 = v76;
              for (i = 0; v77 != i; ++i)
              {
                v79 = CFArrayGetValueAtIndex(Mutable, i);
                if (range.start.value)
                {
                  CFRelease((CFTypeRef)range.start.value);
                  range.start.value = 0;
                }
                v80 = FigCaptionGetCMBaseObject(v79);
                v81 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (!v81 || v81(v80, CFSTR("CaptionData"), alloc, &range))
                  break;
                if (otherRange.start.value)
                {
                  CFRelease((CFTypeRef)otherRange.start.value);
                  otherRange.start.value = 0;
                }
                v82 = FigCaptionDataGetCMBaseObject();
                v83 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (!v83 || v83(v82, v106, alloc, &otherRange))
                  break;
                if (!otherRange.start.value)
                {
                  FigSignalErrorAt();
                  break;
                }
                context.start.value = (CMTimeValue)v104;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                *(_QWORD *)&context.start.timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v104);
                LOBYTE(context.start.epoch) = 0;
                context.duration.value = (CMTimeValue)v103;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                *(_QWORD *)&context.duration.timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v103);
                LOBYTE(context.duration.epoch) = 0;
                *(_QWORD *)&v138 = v102;
                Mutable = v110;
                MEMORY[0x19402F294](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                *((_QWORD *)&v138 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v102);
                v139 = 0;
                v84 = FigCaptionRegionGetCMBaseObject();
                if (ttmlParser_doPropertiesMatch(v84, (uint64_t)&context, 3))
                {
                  if (v124)
                  {
                    CFRelease(v124);
                    v124 = 0;
                  }
                  if (FigCaptionDataCreateMutableCopy())
                    break;
                  if (v133)
                  {
                    CFRelease(v133);
                    v133 = 0;
                  }
                  if (FigCaptionRegionCreateMutableCopy())
                    break;
                  v85 = v134;
                  v86 = FigCaptionRegionGetCMBaseObject();
                  v87 = *(unsigned int (**)(uint64_t, const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
                  if (!v87)
                    break;
                  if (v87(v86, v104, v85))
                    break;
                  v88 = v133;
                  v89 = FigCaptionDataGetCMBaseObject();
                  v90 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                  if (!v90 || v90(v89, v106, v88))
                    break;
                  if (v125)
                  {
                    CFRelease(v125);
                    v125 = 0;
                  }
                  if (FigCaptionCreateMutableCopy((uint64_t)alloc, (uint64_t)v79, &v125))
                    break;
                  v91 = v124;
                  v92 = FigCaptionGetCMBaseObject(v125);
                  v93 = *(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56);
                  if (!v93 || v93(v92, CFSTR("CaptionData"), v91))
                    break;
                  CFArraySetValueAtIndex(v110, i, v125);
                }
              }
            }
          }
        }
        if (v134)
          CFRelease(v134);
        if (v75)
          CFRelease(v75);
        if (v133)
          CFRelease(v133);
        v3 = alloc;
        v5 = v105;
        if (v124)
          CFRelease(v124);
        if (v125)
          CFRelease(v125);
        if (otherRange.start.value)
          CFRelease((CFTypeRef)otherRange.start.value);
        if (range.start.value)
          CFRelease((CFTypeRef)range.start.value);
        v29 = 0;
        v6 = Mutable;
        Mutable = 0;
        goto LABEL_212;
      }
      v29 = 0;
      v6 = Mutable;
      Mutable = 0;
LABEL_211:
      v5 = v105;
      goto LABEL_212;
    }
  }
  v29 = v4;
  v6 = 0;
LABEL_241:
  if (v115)
    CFRelease(v115);
  if (v6)
    CFRelease(v6);
  if (theArray)
    CFRelease(theArray);
  if (v117)
    CFRelease(v117);
  return v29;
}

double ttmlParser_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void ttmlParser_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
}

CFStringRef ttmlParser_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[TTMLParser %p]"), a1);
}

CFStringRef ttmlParser_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[TTMLParser %p]"), a1);
}

void ttmlParser_addTextNodeSourceInformation(void *value, uint64_t a2)
{
  const void *ParentNode;
  const void *v4;
  const __CFAllocator *v5;
  const CFArrayCallBacks *v6;
  int v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  const __CFArray *v10;
  int v11;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFRange v14;

  if (value && !*(_DWORD *)a2)
  {
    ParentNode = value;
    v4 = (const void *)*MEMORY[0x1E0CA3550];
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      cf = 0;
      theArray = 0;
      if (CFSetContainsValue(*(CFSetRef *)(*(_QWORD *)(a2 + 8) + 56), ParentNode))
        goto LABEL_13;
      v7 = FigTTMLNodeCopySkippedElementLocalNames((uint64_t)ParentNode, &theArray);
      if (!v7)
      {
        if (!theArray || !CFArrayGetCount(theArray))
          goto LABEL_13;
        if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 16), v4, &cf))
        {
          CFRetain(cf);
LABEL_12:
          v9 = (__CFArray *)cf;
          v10 = theArray;
          v14.length = CFArrayGetCount(theArray);
          v14.location = 0;
          CFArrayAppendArray(v9, v10, v14);
LABEL_13:
          v11 = 0;
          goto LABEL_14;
        }
        Mutable = CFArrayCreateMutable(v5, 0, v6);
        cf = Mutable;
        if (Mutable)
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), v4, Mutable);
          goto LABEL_12;
        }
        v7 = FigSignalErrorAt();
      }
      v11 = v7;
LABEL_14:
      if (cf)
        CFRelease(cf);
      if (theArray)
        CFRelease(theArray);
      if (v11)
      {
        *(_DWORD *)a2 = v11;
        return;
      }
      CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a2 + 8) + 56), ParentNode);
      *(_DWORD *)a2 = 0;
      ParentNode = (const void *)FigTTMLNodeGetParentNode();
    }
    while (ParentNode);
  }
}

uint64_t ttmlParser_getTopRegionRect()
{
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  return FigGeometryRectMake();
}

uint64_t ttmlParser_getBottomRegionRect()
{
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  return FigGeometryRectMake();
}

uint64_t ttmlParser_getLeftRegionRect()
{
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  return FigGeometryRectMake();
}

uint64_t ttmlParser_getRightRegionRect()
{
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  return FigGeometryRectMake();
}

uint64_t ttmlParser_doPropertiesMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *i;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 1;
  v4 = *MEMORY[0x1E0C9AE00];
  v5 = a3 - 1;
  for (i = (_BYTE *)(a2 + 16); ; i += 24)
  {
    v7 = *((_QWORD *)i - 2);
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (!v8 || v8(a1, v7, v4, &cf) || (!*i || cf) && !FigCFEqual())
    {
      v9 = 0;
      goto LABEL_15;
    }
    if (!v5)
      break;
    --v5;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  v9 = 1;
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v9;
}

void ttmlParser_initializePredefinedRegionsAux()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  const void *v4;
  const __CFAllocator *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t CMBaseObject;
  unsigned int (*v15)(uint64_t, uint64_t, _QWORD);
  void *v16;
  void *v17;
  void *v18;
  void *key;
  _QWORD v20[6];

  v20[4] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CA3440];
  v20[0] = *MEMORY[0x1E0CA3458];
  v20[1] = v0;
  v1 = *MEMORY[0x1E0CA3450];
  v20[2] = *MEMORY[0x1E0CA3448];
  v20[3] = v1;
  ttmlParser_getTopRegionRect();
  ttmlParser_getBottomRegionRect();
  ttmlParser_getLeftRegionRect();
  ttmlParser_getRightRegionRect();
  v2 = 0;
  Mutable = 0;
  v4 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = (void *)*MEMORY[0x1E0CA3490];
  key = (void *)*MEMORY[0x1E0CA3438];
  v16 = (void *)*MEMORY[0x1E0CA3428];
  v17 = (void *)*MEMORY[0x1E0CA34B0];
  v6 = (const void *)*MEMORY[0x1E0CA3408];
  v7 = (const void *)*MEMORY[0x1E0CA34B8];
  v8 = 56;
  v9 = (const void *)*MEMORY[0x1E0CA3418];
  v10 = (const void *)*MEMORY[0x1E0C9AE50];
  while (1)
  {
    if (Mutable)
      CFRelease(Mutable);
    Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, key, (const void *)v20[v2]);
    if (v4)
      CFRelease(v4);
    v4 = (const void *)FigGeometryPointCopyAsDictionary();
    if (FigCaptionDynamicStyleCreate())
      break;
    CFDictionarySetValue(Mutable, v18, 0);
    if (v4)
      CFRelease(v4);
    v4 = (const void *)FigGeometryDimensionCopyAsDictionary();
    if (FigCaptionDynamicStyleCreate())
      break;
    CFDictionarySetValue(Mutable, v17, 0);
    if (v4)
      CFRelease(v4);
    v4 = (const void *)FigGeometryDimensionCopyAsDictionary();
    if (FigCaptionDynamicStyleCreate())
      break;
    CFDictionarySetValue(Mutable, v16, 0);
    if (FigCaptionDynamicStyleCreate())
      break;
    CFDictionarySetValue(Mutable, v6, 0);
    if (FigCaptionDynamicStyleCreate())
      break;
    CFDictionarySetValue(Mutable, v7, 0);
    CFDictionarySetValue(Mutable, v9, v10);
    if (Mutable)
      v11 = CFRetain(Mutable);
    else
      v11 = 0;
    *off_1E2F8DC88[v2++] = (uint64_t)v11;
    v8 += 64;
    if (v2 == 4)
    {
      if (!FigCaptionRegionCreate())
      {
        v12 = 0;
        v13 = *MEMORY[0x1E0CA3400];
        do
        {
          if (FigCaptionRegionCreateMutable())
            break;
          CMBaseObject = FigCaptionRegionGetCMBaseObject();
          v15 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (!v15)
            break;
          if (v15(CMBaseObject, v13, 0))
            break;
          CFDictionaryApplyFunction((CFDictionaryRef)*off_1E2F8DC88[v12], (CFDictionaryApplierFunction)ttmlParser_initializePredefinedRegion, 0);
          *off_1E2F8DCA8[v12++] = 0;
        }
        while (v12 != 4);
      }
      break;
    }
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v4)
    CFRelease(v4);
}

uint64_t ttmlParser_initializePredefinedRegion(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigCaptionRegionGetCMBaseObject();
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a1, a2);
  return result;
}

uint64_t remakerFamily_formatWriterErrorOccurred(uint64_t a1, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return remakerFamily_HandleNotificationErrorPayload(a2, 0);
}

void remakerFamily_renderPipelineDecodeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v9;
  uint64_t TypeID;
  __CFString **v11;
  uint64_t v12;

  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
  {
    if (*(_DWORD *)(a2 + 32) == 1936684398)
    {
      remakerFamily_HandleNotificationErrorPayload(v7, a2);
    }
    else
    {
      v9 = CFGetTypeID(v7);
      TypeID = FigAssetReaderGetTypeID();
      v11 = kFigAssetReaderNotification_DecodeError;
      if (v9 != TypeID)
        v11 = kFigRemakerNotification_DecodeError;
      remakerFamily_safelyPostNotification(v7, 0, (uint64_t)*v11, a5, v7);
      v12 = *(_QWORD *)(a2 + 152);
      *(_DWORD *)(v12 + 64) = -12137;
      if (*(_QWORD *)(v12 + 80))
        FigSemaphoreSignal();
    }
    CFRelease(v7);
  }
}

void remakerFamily_renderPipelineRanDry(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _DWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a2 + 64) = 1;
      if (dword_1EE2A2DD8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(a2 + 360))
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
    }
    CFRelease(v3);
  }
}

void remakerFamily_renderPipelineSegmentFinished(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const void *v7;
  _DWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTimeRange v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v7)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      CMTimeRangeMakeFromDictionary(&v10, a5);
      if ((v10.start.flags & 1) != 0
        && (v10.duration.flags & 1) != 0
        && !v10.duration.epoch
        && (v10.duration.value & 0x8000000000000000) == 0)
      {
        *(_BYTE *)(a2 + 64) = 1;
        if (dword_1EE2A2DD8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(_BYTE *)(a2 + 360))
          remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      }
    }
    CFRelease(v7);
  }
}

void remakerFamily_renderPipelineLostDecoderState(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  CFTypeID v5;
  int v6;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == FigAssetReaderGetTypeID())
      v6 = -16112;
    else
      v6 = -16104;
    remakerFamily_PostFailureNotificationIfError(v4, a2, v6, 1, 0);
    CFRelease(v4);
  }
}

void remakerFamily_aqOfflineMixerDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _DWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a2 + 216) = 1;
      if (dword_1EE2A2DD8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(a2 + 360))
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      else
        CMBufferQueueMarkEndOfData(*(CMBufferQueueRef *)(a2 + 208));
      remakerFamily_performLastStepIfComplete(v3);
    }
    CFRelease(v3);
  }
}

void remakerFamily_IntermediateMediaProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _DWORD *DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v11;
  opaqueCMBufferQueue *v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex j;
  const void *v18;
  opaqueCMBufferQueue *v19;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
      goto LABEL_23;
    }
    *(_BYTE *)(a2 + 256) = 1;
    v5 = *(_QWORD *)(a2 + 152);
    if (*(_BYTE *)(v5 + 160))
    {
      v6 = *(const __CFArray **)(v5 + 128);
      if (v6)
      {
        Count = CFArrayGetCount(v6);
        if (Count >= 1)
        {
          v8 = Count;
          for (i = 0; i != v8; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 240), i);
            if (!FigMediaProcessorIsAtEndOfOutputData((uint64_t)ValueAtIndex))
              *(_BYTE *)(a2 + 256) = 0;
          }
        }
      }
    }
    v11 = CFGetTypeID(v3);
    if (v11 == FigRemakerGetTypeID())
    {
      v12 = *(opaqueCMBufferQueue **)(a2 + 248);
      if (!v12)
        goto LABEL_23;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 152);
      v12 = *(opaqueCMBufferQueue **)(v13 + 72);
      if (!v12)
      {
LABEL_23:
        CFRelease(v3);
        return;
      }
      if (*(_BYTE *)(v13 + 160))
      {
        v14 = *(const __CFArray **)(v13 + 128);
        if (v14)
        {
          v15 = CFArrayGetCount(v14);
          if (v15 >= 1)
          {
            v16 = v15;
            for (j = 0; j != v16; ++j)
            {
              v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 240), j);
              v19 = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a2 + 152) + 128), j);
              if (FigMediaProcessorIsAtEndOfOutputData((uint64_t)v18))
                CMBufferQueueMarkEndOfData(v19);
            }
          }
        }
        goto LABEL_23;
      }
    }
    CMBufferQueueMarkEndOfData(v12);
    goto LABEL_23;
  }
}

void remakerFamily_MediaProcessorProcessSampleBufferFailed(uint64_t a1, uint64_t a2)
{
  const void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  remakerFamily_HandleNotificationErrorPayload(v3, a2);
  if (v3)
    CFRelease(v3);
}

void remakerFamily_CustomMediaProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _DWORD *DerivedStorage;
  opaqueCMBufferQueue *v5;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a2 + 280) = 1;
      v5 = *(opaqueCMBufferQueue **)(a2 + 272);
      if (v5)
        CMBufferQueueMarkEndOfData(v5);
    }
    CFRelease(v3);
  }
}

void remakerFamily_MediaProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *v5;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*(_DWORD *)DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a2 + 296) = 1;
      if (*(_BYTE *)(a2 + 360) && *(_QWORD *)(a2 + 288))
      {
        CFRetain((CFTypeRef)a2);
        dispatch_async_f(*(dispatch_queue_t *)(a2 + 376), (void *)a2, (dispatch_function_t)remakerFamily_startNextPassWork);
      }
      else if (*(_QWORD *)(DerivedStorage + 184))
      {
        remakerFamily_markFormatWriterTrackWithEOD(a2);
      }
      else
      {
        v5 = *(opaqueCMBufferQueue **)(*(_QWORD *)(a2 + 152) + 72);
        if (v5)
          CMBufferQueueMarkEndOfData(v5);
      }
      remakerFamily_performLastStepIfComplete(v3);
    }
    CFRelease(v3);
  }
}

void remakerFamily_MediaProcessorSessionTerminated(uint64_t a1, uint64_t a2)
{
  const void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v5;
  int v6;
  CFTypeID v7;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    if (v5 == FigAssetReaderGetTypeID())
    {
      v6 = -16112;
    }
    else
    {
      v7 = CFGetTypeID(v3);
      if (v7 == FigAssetWriterGetTypeID())
        v6 = -16124;
      else
        v6 = -16104;
    }
    remakerFamily_PostFailureNotificationIfError(v3, a2, v6, 1, 0);
    CFRelease(v3);
  }
  else
  {
    remakerFamily_PostFailureNotificationIfError(0, a2, -16104, 1, 0);
  }
}

uint64_t remakerFamily_registerDarwinNotification(uint64_t a1, int *a2)
{
  const char *CStringPtrAndBufferToFree;
  uint64_t v4;
  int out_token;
  void *v7;

  v7 = 0;
  out_token = -1;
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  if (!CStringPtrAndBufferToFree || notify_register_check(CStringPtrAndBufferToFree, &out_token))
  {
    v4 = FigSignalErrorAt();
  }
  else
  {
    v4 = 0;
    *a2 = out_token;
  }
  free(v7);
  return v4;
}

uint64_t remakerFamily_postDarwinNotificationWithState(int a1, int val, uint64_t a3)
{
  uint64_t CStringPtrAndBufferToFree;
  const char *v6;
  uint64_t v7;

  if (notify_is_valid_token(val)
    && ((CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree()) == 0
     || (v6 = (const char *)CStringPtrAndBufferToFree, notify_set_state(val, a3))
     || notify_post(v6)))
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    v7 = 0;
  }
  free(0);
  return v7;
}

uint64_t remakerFamily_SetRemakerState(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  int v6;
  uint64_t v7;
  int v8;

  if (!a1)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
    MEMORY[0x19402EA0C]();
  v6 = *(_DWORD *)DerivedStorage;
  switch(a2)
  {
    case 1:
      if (v6)
        goto LABEL_16;
      v7 = 0;
      v8 = 1;
      goto LABEL_22;
    case 2:
      if (v6 != 1)
        goto LABEL_16;
      v7 = 0;
      v8 = 2;
      goto LABEL_22;
    case 3:
      if ((v6 - 1) > 1)
        goto LABEL_16;
      v7 = 0;
      v8 = 3;
      goto LABEL_22;
    case 4:
      if (v6 != 3)
        goto LABEL_16;
      v7 = 0;
      v8 = 4;
      goto LABEL_22;
    case 5:
      if (v6 != 4)
        goto LABEL_16;
      v7 = 0;
      v8 = 5;
      goto LABEL_22;
    case 6:
      if (v6 == 8)
        goto LABEL_21;
      v7 = 0;
      v8 = 6;
      goto LABEL_22;
    case 7:
      goto LABEL_21;
    case 8:
      if (v6 == 7)
      {
        v7 = 0;
      }
      else
      {
        if (v6 == 6)
        {
LABEL_21:
          v7 = 0;
          v8 = 7;
        }
        else
        {
          v7 = 0;
          v8 = 8;
        }
LABEL_22:
        *(_DWORD *)DerivedStorage = v8;
      }
LABEL_23:
      if (*(_QWORD *)(DerivedStorage + 8))
        MEMORY[0x19402EA24]();
      if (a3)
        *a3 = *(_DWORD *)DerivedStorage;
      break;
    default:
LABEL_16:
      v7 = FigSignalErrorAt();
      goto LABEL_23;
  }
  return v7;
}

uint64_t remakerFamily_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  void *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t FigBaseObject;
  uint64_t v11;
  void (*v12)(uint64_t);
  const __CFArray *v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex j;
  const void *ValueAtIndex;
  NSObject *v18;
  CFTypeID v19;
  CFTypeID v20;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFArray *v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex k;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  const void *v30;
  const void *v31;
  CFTypeID v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeRef cf[25];

  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (FigAtomicCompareAndSwap32())
  {
    remakerFamily_SetRemakerState((uint64_t)a1, 8, 0);
    v3 = *(NSObject **)(DerivedStorage + 56);
    if (v3)
    {
      v4 = *(void **)(DerivedStorage + 184);
      if (v4)
      {
        if (dispatch_get_current_queue() == v3)
        {
          remakerFamily_InvalidateWriter((uint64_t)v4);
        }
        else
        {
          dispatch_sync_f(v3, v4, (dispatch_function_t)remakerFamily_InvalidateWriter);
          v5 = *(const __CFArray **)(DerivedStorage + 80);
          if (v5)
          {
            Count = CFArrayGetCount(v5);
            if (Count >= 1)
            {
              v7 = Count;
              for (i = 0; i != v7; ++i)
              {
                if (*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i) + 48))
                {
                  if (dword_1EE2A2DD8)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  FigSemaphoreSignal();
                }
              }
            }
          }
        }
      }
    }
    if (*(_QWORD *)(DerivedStorage + 376))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      FigPlaybackBossInvalidate(*(_QWORD *)(DerivedStorage + 376));
    }
    if (*(_QWORD *)(DerivedStorage + 184))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      FigBaseObject = FigFormatWriterGetFigBaseObject(*(_QWORD *)(DerivedStorage + 184));
      if (FigBaseObject)
      {
        v11 = FigBaseObject;
        v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v12)
          v12(v11);
      }
    }
    v13 = *(const __CFArray **)(DerivedStorage + 80);
    if (v13)
    {
      v14 = CFArrayGetCount(v13);
      if (v14 >= 1)
      {
        v15 = v14;
        for (j = 0; j != v15; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), j);
          remakerFamily_removeTrackNotifications((intptr_t)ValueAtIndex);
        }
      }
    }
    v18 = *(NSObject **)(DerivedStorage + 56);
    if (v18 && dispatch_get_current_queue() != v18)
      dispatch_sync_f(v18, 0, (dispatch_function_t)remakerFamily_NoOp);
    if (a1)
    {
      v19 = CFGetTypeID(a1);
      if (v19 == FigAssetWriterGetTypeID())
        FigSemaphoreSignal();
      v20 = CFGetTypeID(a1);
      if (v20 == FigRemakerGetTypeID())
      {
        if (*(_DWORD *)(DerivedStorage + 20))
        {
          if (*(_QWORD *)(DerivedStorage + 168))
          {
            CMBaseObject = CMByteStreamGetCMBaseObject();
            v22 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
            if (v22)
            {
              v22(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], cf);
              if (cf[0])
              {
                FigFileDeleteFile();
                if (cf[0])
                {
                  CFRelease(cf[0]);
                  cf[0] = 0;
                }
              }
            }
          }
        }
      }
    }
    v23 = *(const __CFArray **)(DerivedStorage + 80);
    if (v23)
    {
      v24 = CFArrayGetCount(v23);
      if (v24 >= 1)
      {
        v25 = v24;
        for (k = 0; k != v25; ++k)
        {
          v27 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), k);
          remakerFamily_invalidateTrack((uint64_t)v27);
        }
      }
    }
    if (a1)
    {
      v28 = CFGetTypeID(a1);
      if (v28 == FigRemakerGetTypeID())
        goto LABEL_53;
    }
    v29 = *(const void **)(DerivedStorage + 216);
    if (v29)
    {
      CFRelease(v29);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    v30 = *(const void **)(DerivedStorage + 168);
    if (v30)
    {
      CFRelease(v30);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    v31 = *(const void **)(DerivedStorage + 184);
    if (v31)
    {
      CFRelease(v31);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
    if (a1)
    {
LABEL_53:
      v32 = CFGetTypeID(a1);
      if (v32 == FigAssetWriterGetTypeID())
      {
        v33 = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(v33 + 368) == 1)
        {
          v34 = v33;
          if (!remakerFamily_postDarwinNotificationWithState(*(_QWORD *)(v33 + 352), *(_DWORD *)(v33 + 360), 0))*(_QWORD *)(v34 + 368) = 0;
        }
      }
    }
  }
  return 0;
}

uint64_t remakerFamily_InvalidateWriter(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  result = FigFormatWriterGetFigBaseObject(a1);
  if (result)
  {
    v2 = result;
    result = CMBaseObjectGetVTable();
    v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v3)
      return v3(v2);
  }
  return result;
}

intptr_t remakerFamily_removeTrackNotifications(intptr_t result)
{
  _QWORD *v1;
  intptr_t v2;
  CFIndex i;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)(result + 424))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    result = v1[52];
    if (result)
      result = dispatch_semaphore_signal((dispatch_semaphore_t)result);
  }
  if (v1[7])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[21])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[25])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[29])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
    if (*(_BYTE *)(v1[19] + 160))
    {
      result = v1[30];
      if (result)
      {
        result = CFArrayGetCount((CFArrayRef)result);
        if (result >= 2)
        {
          v2 = result;
          for (i = 1; i != v2; ++i)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v1[30], i);
            CMNotificationCenterGetDefaultLocalCenter();
            result = FigNotificationCenterRemoveWeakListeners();
          }
        }
      }
    }
  }
  if (v1[33])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[36])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListeners();
  }
  return result;
}

uint64_t remakerFamily_invalidateTrack(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v11;
  uint64_t FigBaseObject;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex j;
  const void *v23;
  uint64_t v24;

  result = FigAtomicCompareAndSwap32();
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(a1 + 288);
    if (v3)
      FigMediaProcessorInvalidate(v3);
    v4 = *(_QWORD *)(a1 + 264);
    if (v4)
      FigMediaProcessorInvalidate(v4);
    v5 = *(_QWORD *)(a1 + 232);
    if (v5)
    {
      FigMediaProcessorInvalidate(v5);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 160))
      {
        v6 = *(const __CFArray **)(a1 + 240);
        if (v6)
        {
          Count = CFArrayGetCount(v6);
          if (Count >= 2)
          {
            v8 = Count;
            for (i = 1; i != v8; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), i);
              FigMediaProcessorInvalidate((uint64_t)ValueAtIndex);
            }
          }
        }
      }
    }
    FigPlaybackBossInvalidate(*(_QWORD *)(a1 + 424));
    v11 = *(_QWORD *)(a1 + 56);
    if (v11)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
      if (FigBaseObject)
      {
        v13 = FigBaseObject;
        v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v14)
          v14(v13);
      }
    }
    assetReaderTrack_Invalidate(*(_QWORD *)(a1 + 152));
    assetWriterTrack_Invalidate(*(_QWORD *)(a1 + 160));
    v15 = *(_QWORD *)(a1 + 168);
    if (v15)
      FigVideoCompositionProcessorInvalidate(v15);
    v16 = *(NSObject **)(a1 + 376);
    if (v16 && dispatch_get_current_queue() != v16)
      dispatch_sync_f(v16, 0, (dispatch_function_t)remakerFamily_NoOp);
    remakerFamily_cleanupTemporaryTrackFiles(a1);
    v17 = *(_QWORD *)(a1 + 200);
    if (v17)
      FigAudioQueueOfflineMixerInvalidate(v17);
    v18 = *(_QWORD *)(a1 + 232);
    if (v18)
    {
      FigMediaProcessorInvalidate(v18);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 160))
      {
        v19 = *(const __CFArray **)(a1 + 240);
        if (v19)
        {
          v20 = CFArrayGetCount(v19);
          if (v20 >= 2)
          {
            v21 = v20;
            for (j = 1; j != v21; ++j)
            {
              v23 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), j);
              FigMediaProcessorInvalidate((uint64_t)v23);
            }
          }
        }
      }
    }
    v24 = *(_QWORD *)(a1 + 264);
    if (v24)
      FigMediaProcessorInvalidate(v24);
    result = *(_QWORD *)(a1 + 288);
    if (result)
      return FigMediaProcessorInvalidate(result);
  }
  return result;
}

void remakerFamily_invalidateAllMediaProcessors()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex j;
  const void *v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 80);
  if (v1)
  {
    Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      v3 = Count;
      for (i = 0; i != v3; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i);
        v6 = *((_QWORD *)ValueAtIndex + 33);
        if (v6)
          FigMediaProcessorInvalidate(v6);
        v7 = *((_QWORD *)ValueAtIndex + 29);
        if (v7)
        {
          FigMediaProcessorInvalidate(v7);
          if (*(_BYTE *)(*((_QWORD *)ValueAtIndex + 19) + 160))
          {
            v8 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 30);
            if (v8)
            {
              v9 = CFArrayGetCount(v8);
              if (v9 >= 2)
              {
                v10 = v9;
                for (j = 1; j != v10; ++j)
                {
                  v12 = CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 30), j);
                  FigMediaProcessorInvalidate((uint64_t)v12);
                }
              }
            }
          }
        }
        v13 = *((_QWORD *)ValueAtIndex + 36);
        if (v13)
          FigMediaProcessorInvalidate(v13);
        remakerFamily_cleanupTemporaryTrackFiles((uint64_t)ValueAtIndex);
      }
    }
  }
}

void remakerFamily_cleanupTemporaryTrackFiles(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 368);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 368) = 0;
  }
  v3 = *(const void **)(a1 + 400);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 400) = 0;
  }
}

void remakerFamily_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  NSObject *v19;
  void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  remakerFamily_Invalidate(a1);
  v4 = *(NSObject **)(DerivedStorage + 56);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    FigSemaphoreDestroy();
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 64) = 0;
  v5 = *(const void **)(DerivedStorage + 200);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 376);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 432);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 432) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 400);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 400) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 408);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 408) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 416);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 416) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 80);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 216);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 168);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 184);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 344);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 352);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  if (notify_is_valid_token(*(_DWORD *)(DerivedStorage + 360)))
  {
    notify_cancel(*(_DWORD *)(DerivedStorage + 360));
    *(_DWORD *)(DerivedStorage + 360) = -1;
  }
  if (dword_1EE2A2DD8)
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v20 = *(void **)(DerivedStorage + 448);
  if (v20)
  {
    os_release(v20);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 224))
  {
    FigFileDeleteFile();
    v21 = *(const void **)(DerivedStorage + 224);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 224) = 0;
    }
  }
  v22 = *(const void **)(DerivedStorage + 232);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 440);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 192);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 464);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 464) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 472);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 472) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 480);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 480) = 0;
  }
}

__CFString *remakerFamily_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const char *v5;
  CFTypeID v6;
  CFTypeID v7;
  CFIndex v8;
  CFAllocatorRef v9;
  unsigned int v10;
  const char *v11;
  const char *v12;
  const char *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = "FigRemaker";
  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == FigAssetReaderGetTypeID())
    {
      v5 = "FigAssetReader";
    }
    else
    {
      v7 = CFGetTypeID(a1);
      if (v7 == FigAssetWriterGetTypeID())
        v5 = "FigAssetWriter";
    }
  }
  v8 = CFGetRetainCount(a1);
  v9 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<%s %p retainCount: %d allocator: %p, "), v5, a1, v8, v9);
  v10 = *(_DWORD *)DerivedStorage - 1;
  if (v10 > 7)
    v11 = "bad";
  else
    v11 = off_1E2F8DF50[v10];
  if (*(_BYTE *)(DerivedStorage + 384))
    v12 = " singlePassBossIsDone";
  else
    v12 = "";
  if (*(_DWORD *)(DerivedStorage + 428))
    v13 = " didLastStep";
  else
    v13 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("state: %s%s%s, "), v11, v12, v13);
  CFStringAppendFormat(Mutable, 0, CFSTR("sourceAsset %@, destByteStream %@, tempByteStream %@, tempFilePath %@, formatWriter %@, singlePassBoss %@"), *(_QWORD *)(DerivedStorage + 72), *(_QWORD *)(DerivedStorage + 168), *(_QWORD *)(DerivedStorage + 216), *(_QWORD *)(DerivedStorage + 224), *(_QWORD *)(DerivedStorage + 184), *(_QWORD *)(DerivedStorage + 376));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  %@"), *(_QWORD *)(DerivedStorage + 80));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

_DWORD *remakerFamily_getChannelBySourceTrackID(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _DWORD *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    result = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v6);
    if (result[7] == a2)
      break;
    if (v5 == ++v6)
      return 0;
  }
  return result;
}

uint64_t remakerFamily_createTempFile(uint64_t a1, uint64_t a2, const __CFURL *a3, const char *a4, _QWORD *a5, _QWORD *a6)
{
  CFAllocatorRef *v9;
  const void *v10;
  const char *v12;
  char *v13;
  UInt8 *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  UInt8 buffer[1024];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a2)
  {
    v10 = (const void *)FigCFURLCreateFromTemporaryFileWithDirectoryAndSuffix();
    if (!v10)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  if (!a3)
  {
    v18 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
    if (!v18)
    {
      v10 = 0;
      v17 = 0;
      goto LABEL_25;
    }
    v10 = (const void *)FigCFURLCreateFromTemporaryFileWithDirectoryAndSuffix();
    v17 = 0;
    if (v10)
      goto LABEL_19;
    goto LABEL_25;
  }
  remakerFamily_MapError(a1, 6u);
  bzero(buffer, 0x400uLL);
  if (!CFURLGetFileSystemRepresentation(a3, 1u, buffer, 1024))
    goto LABEL_17;
  v12 = (const char *)_amkrtemp();
  if (v12)
  {
    v13 = (char *)v12;
    v14 = (UInt8 *)v12;
    if (a4)
    {
      v14 = buffer;
      snprintf((char *)buffer, 0x400uLL, "%s%s", v12, a4);
    }
    v15 = strlen((const char *)v14);
    v10 = CFURLCreateFromFileSystemRepresentation(*v9, v14, v15, 0);
    free(v13);
    if (v10)
    {
LABEL_18:
      v17 = remakerFamily_associateAdditionalURLWithExistingSandboxRegistration();
      v18 = 0;
      if ((_DWORD)v17)
        goto LABEL_25;
LABEL_19:
      if (a5)
      {
        v17 = CMByteStreamCreateForFileURL();
        if ((_DWORD)v17)
          goto LABEL_25;
        *a5 = 0;
      }
      if (a6)
      {
        *a6 = v10;
        goto LABEL_24;
      }
      goto LABEL_25;
    }
  }
  v16 = FigSignalErrorAt();
  if (!(_DWORD)v16)
  {
LABEL_17:
    v10 = 0;
    goto LABEL_18;
  }
  v17 = v16;
  v18 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
  if (!v18)
  {
LABEL_24:
    v10 = 0;
    goto LABEL_25;
  }
  v10 = (const void *)FigCFURLCreateFromTemporaryFileWithDirectoryAndSuffix();
  if (v10)
    goto LABEL_19;
LABEL_25:
  if (v10)
    CFRelease(v10);
  if (v18)
    CFRelease(v18);
  return v17;
}

uint64_t remakerFamily_associateAdditionalURLWithExistingSandboxRegistration()
{
  return FigGetSandboxRegistrationAssociatedWithURL();
}

uint64_t remakerFamily_getDestURL()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 160);
}

CMTime *remakerFamily_getLowWaterLevel@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int64_t v2;
  int32_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1)
  {
    v2 = 3;
    v3 = 30;
  }
  else
  {
    v2 = 35;
    v3 = 1000;
  }
  return CMTimeMake((CMTime *)a2, v2, v3);
}

CMTime *remakerFamily_getHighWaterLevel@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int64_t v2;
  int32_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1)
  {
    v2 = 5;
    v3 = 30;
  }
  else
  {
    v2 = 45;
    v3 = 1000;
  }
  return CMTimeMake((CMTime *)a2, v2, v3);
}

unint64_t remakerFamily_useAudioFormatWriterGivenFormatWriterOption(unint64_t result)
{
  const void *v1;

  if (result)
  {
    v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, CFSTR("CAFAudioFile"))
        || CFEqual(v1, CFSTR("AIFFAudioFile"))
        || CFEqual(v1, CFSTR("WAVEAudioFile"))
        || CFEqual(v1, CFSTR("AMRAudioFile")) != 0;
  }
  return result;
}

uint64_t remakerFamily_createFormatWriter(const void *a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage;
  const void *Value;
  unint64_t v13;
  const __CFString *v14;
  uint64_t MutableCopy;
  __CFDictionary *v16;
  uint64_t v17;
  CFTypeRef v18;
  int v19;
  int v20;
  uint64_t TempFile;
  _BOOL4 v22;
  uint64_t v23;
  CFTypeID v24;
  uint64_t v25;
  const __CFURL *v26;
  uint64_t v27;
  const void **v28;
  const void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t CMBaseObject;
  unsigned int (*v33)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, CFTypeRef);
  _QWORD *v37;
  void (*v38)(const void *, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v39;
  CFTypeRef v41;
  int v42;
  int v43;
  CFTypeRef v45;
  CFTypeRef v46;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v45 = 0;
  if (a5)
  {
    Value = CFDictionaryGetValue(a5, CFSTR("FileFormat"));
    v13 = (unint64_t)Value;
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 432) = Value;
    v14 = (const __CFString *)CFDictionaryGetValue(a5, CFSTR("AudioPrimingFormat"));
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v16 = (__CFDictionary *)MutableCopy;
      if (v14)
        goto LABEL_10;
      goto LABEL_9;
    }
    return FigSignalErrorAt();
  }
  v17 = FigCFDictionaryCreateMutableCopy();
  if (!v17)
    return FigSignalErrorAt();
  v16 = (__CFDictionary *)v17;
  v13 = 0;
LABEL_9:
  v14 = CFSTR("AudioPrimingFormat_DetermineFromSampleOrFileFormat");
  CFDictionarySetValue(v16, CFSTR("AudioPrimingFormat"), CFSTR("AudioPrimingFormat_DetermineFromSampleOrFileFormat"));
  if (!CFSTR("AudioPrimingFormat_DetermineFromSampleOrFileFormat"))
  {
    v18 = 0;
    goto LABEL_14;
  }
LABEL_10:
  if (!CFEqual(v14, CFSTR("AudioPrimingFormat_Manual")))
    *(_BYTE *)(DerivedStorage + 208) = 1;
  v18 = CFRetain(v14);
LABEL_14:
  *(_QWORD *)(DerivedStorage + 200) = v18;
  if (*(_BYTE *)(DerivedStorage + 32))
    CFDictionarySetValue(v16, CFSTR("RealTime"), (const void *)*MEMORY[0x1E0C9AE50]);
  *(_QWORD *)(DerivedStorage + 296) = a4;
  v19 = remakerFamily_useAudioFormatWriterGivenFormatWriterOption(v13);
  v20 = FigCFEqual();
  v43 = FigCFEqual();
  v42 = FigCFEqual();
  if (!*(_BYTE *)(DerivedStorage + 240))
    goto LABEL_38;
  if (v19)
  {
    TempFile = FigAudioFileFormatWriterCreateWithByteStream(a2, *(const void **)(DerivedStorage + 168), v16, &v45);
    if ((_DWORD)TempFile)
      goto LABEL_63;
  }
  else if (v20)
  {
    TempFile = FigTTMLFormatWriterCreateWithByteStream((uint64_t)a2, *(const void **)(DerivedStorage + 168), v16, &v45);
    if ((_DWORD)TempFile)
      goto LABEL_63;
  }
  else if (v43)
  {
    TempFile = FigSCCFormatWriterCreateWithByteStream(a2, *(const void **)(DerivedStorage + 168), (uint64_t)v16, &v45);
    if ((_DWORD)TempFile)
      goto LABEL_63;
  }
  else if (v42)
  {
    TempFile = FigWebVTTFormatWriterCreateWithByteStream((uint64_t)a2, *(const void **)(DerivedStorage + 168), (uint64_t)v16, &v45);
    if ((_DWORD)TempFile)
      goto LABEL_63;
  }
  else if (a4)
  {
    *(_BYTE *)(DerivedStorage + 240) = 0;
  }
  else
  {
    TempFile = FigMovieFormatWriterCreateWithByteStream(a2, *(const void **)(DerivedStorage + 168), v16, &v45);
    if ((_DWORD)TempFile)
      goto LABEL_63;
  }
  if (v45)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72) != 0;
    *(_BYTE *)(DerivedStorage + 240) = v22;
    if (v22)
      goto LABEL_34;
LABEL_38:
    if (*(_QWORD *)(DerivedStorage + 336))
      v29 = *(const void **)(DerivedStorage + 344);
    else
      v29 = *(const void **)(DerivedStorage + 168);
    goto LABEL_43;
  }
  if (!*(_BYTE *)(DerivedStorage + 240))
    goto LABEL_38;
LABEL_34:
  v23 = *(_QWORD *)(DerivedStorage + 336);
  v24 = CFGetTypeID(a1);
  v25 = *(_QWORD *)(DerivedStorage + 232);
  v26 = *(const __CFURL **)(DerivedStorage + 160);
  v27 = a4;
  if (v23)
  {
    TempFile = remakerFamily_createTempFile(v24, v25, v26, 0, 0, (_QWORD *)(DerivedStorage + 224));
    if (!(_DWORD)TempFile)
    {
      v28 = (const void **)(DerivedStorage + 344);
LABEL_42:
      v29 = *v28;
      CFDictionarySetValue(v16, CFSTR("WriteFileType"), CFSTR("WriteFileType_OnlyInWriteHeaderToByteStream"));
      a4 = v27;
LABEL_43:
      v30 = *(const void **)(DerivedStorage + 168);
      if (v30 && v29 && v30 != v29)
      {
        v31 = a4;
        v46 = 0;
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v33 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
        if (v33)
        {
          v34 = *MEMORY[0x1E0CA2080];
          if (!v33(CMBaseObject, *MEMORY[0x1E0CA2080], *MEMORY[0x1E0C9AE00], &v46))
          {
            v41 = v46;
            v35 = CMByteStreamGetCMBaseObject();
            v36 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v36)
              v36(v35, v34, v41);
          }
        }
        if (v46)
          CFRelease(v46);
        a4 = v31;
      }
      if (a3 >= 1)
      {
        v46 = 0;
        v37 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v37 >= 3uLL)
        {
          v38 = (void (*)(const void *, uint64_t, uint64_t, CFTypeRef *))v37[6];
          if (v38)
            v38(v29, a3, 2, &v46);
        }
      }
      if (v19)
      {
        TempFile = FigAudioFileFormatWriterCreateWithByteStream(a2, v29, v16, a6);
      }
      else if (v20)
      {
        TempFile = FigTTMLFormatWriterCreateWithByteStream((uint64_t)a2, v29, v16, a6);
      }
      else if (v43)
      {
        TempFile = FigSCCFormatWriterCreateWithByteStream(a2, v29, (uint64_t)v16, a6);
      }
      else if (v42)
      {
        if (a4)
          TempFile = FigWebVTTFormatWriterCreateForWritingWebVTTSegments(a2, a4, (uint64_t)a1, (uint64_t)v16, a6);
        else
          TempFile = FigWebVTTFormatWriterCreateWithByteStream((uint64_t)a2, v29, (uint64_t)v16, a6);
      }
      else if (a4)
      {
        TempFile = FigMovieFormatWriterCreateForWritingMovieFragments(a2, (uint64_t)remakerFamily_MovieFormatWriterFragmentCallback, (uint64_t)a1, v16, a6);
      }
      else
      {
        TempFile = FigMovieFormatWriterCreateWithByteStream(a2, v29, v16, a6);
      }
    }
  }
  else
  {
    v28 = (const void **)(DerivedStorage + 216);
    TempFile = remakerFamily_createTempFile(v24, v25, v26, 0, (_QWORD *)(DerivedStorage + 216), (_QWORD *)(DerivedStorage + 224));
    if (!(_DWORD)TempFile)
      goto LABEL_42;
  }
LABEL_63:
  v39 = TempFile;
  CFRelease(v16);
  if (v45)
    CFRelease(v45);
  return v39;
}

uint64_t remakerFamily_MovieFormatWriterFragmentCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(CMBaseObjectGetDerivedStorage() + 296);
  return v8(a1, a2, a5);
}

uint64_t remakerFamily_generateLoggingIdentifier(int a1, char *a2)
{
  const __CFAllocator *v4;
  uint64_t LoggingIdentifierOfLength;
  const void *v6;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  LoggingIdentifierOfLength = FigCFStringCreateLoggingIdentifierOfLength();
  if (!LoggingIdentifierOfLength)
    return 0;
  v6 = (const void *)LoggingIdentifierOfLength;
  v7 = CFStringCreateWithFormat(v4, 0, CFSTR("%c/%@"), a1, LoggingIdentifierOfLength);
  if (v7)
  {
    v8 = v7;
    if (CFStringGetCString(v7, a2, 10, 0x600u))
      v9 = 0;
    else
      v9 = 4294955190;
    CFRelease(v6);
    v6 = v8;
  }
  else
  {
    v9 = 0;
  }
  CFRelease(v6);
  return v9;
}

uint64_t remakerFamily_createChannel(const void *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeID v16;
  CFTypeID v17;

  CFGetAllocator(a1);
  MEMORY[0x19402F294](&FigRemakerTrackGetTypeID_sRegisterFigRemakerTrackOnce, RegisterFigRemakerTrack);
  Instance = _CFRuntimeCreateInstance();
  v9 = Instance;
  if (!a1)
  {
    v14 = FigSignalErrorAt();
    if (!v9)
      return v14;
    goto LABEL_9;
  }
  if (Instance)
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    FigKTraceInit();
    *(_QWORD *)(v9 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_DWORD *)(v9 + 28) = a2;
    *(_DWORD *)(v9 + 32) = a3;
    CFGetAllocator(a1);
    MEMORY[0x19402F294](&FigAssetReaderTrackGetTypeID_sRegisterFigAssetReaderTrackOnce, RegisterFigAssetReaderTrack);
    v10 = _CFRuntimeCreateInstance();
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)(v10 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(v9 + 152) = v11;
      CFGetAllocator(a1);
      MEMORY[0x19402F294](&FigAssetWriterTrackGetTypeID_sRegisterFigAssetWriterTrackOnce, RegisterFigAssetWriterTrack);
      v12 = _CFRuntimeCreateInstance();
      if (v12)
      {
        v13 = v12;
        v14 = 0;
        *(_QWORD *)(v12 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(_QWORD *)(v9 + 160) = v13;
        *a4 = v9;
        return v14;
      }
    }
    v16 = CFGetTypeID(a1);
    remakerFamily_MapError(v16, 0);
    v14 = FigSignalErrorAt();
LABEL_9:
    CFRelease((CFTypeRef)v9);
    return v14;
  }
  v17 = CFGetTypeID(a1);
  remakerFamily_MapError(v17, 0);
  return FigSignalErrorAt();
}

uint64_t remakerFamily_MapError(uint64_t a1, unsigned int a2)
{
  unsigned int *v4;
  uint64_t result;
  uint64_t TypeID;

  if (FigRemakerGetTypeID() == a1)
  {
    if (a2 < 7)
    {
      v4 = (unsigned int *)&unk_1932FAB58;
      return v4[a2];
    }
    return 4294966297;
  }
  if (FigAssetReaderGetTypeID() == a1)
  {
    if (a2 < 6)
    {
      v4 = (unsigned int *)&unk_1932FAB74;
      return v4[a2];
    }
    return 4294966297;
  }
  TypeID = FigAssetWriterGetTypeID();
  result = 4294966297;
  if (TypeID == a1 && a2 < 7)
  {
    v4 = (unsigned int *)&unk_1932FAB8C;
    return v4[a2];
  }
  return result;
}

void remakerFamily_commitChannel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    if (*(_QWORD *)(a2 + 56))
    {
      v5 = *(_DWORD *)(a2 + 32);
      if (v5 == 1986618469 || v5 == 1635088502)
        FigStartForwardingMediaServicesProcessDeathNotification();
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 80), (const void *)a2);
    CFRelease((CFTypeRef)a2);
  }
}

void remakerFamily_discardChannel(uint64_t a1, intptr_t a2)
{
  int v3;

  if (a2)
  {
    if (*(_QWORD *)(a2 + 56))
    {
      v3 = *(_DWORD *)(a2 + 32);
      if (v3 == 1986618469 || v3 == 1635088502)
        FigStopForwardingMediaServicesProcessDeathNotification();
    }
    remakerFamily_removeTrackNotifications(a2);
    CFRelease((CFTypeRef)a2);
  }
}

uint64_t remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 392))
  {
    v6 = result;
    if (a3 == 1986618469 || a3 == 1936684398 && *(_DWORD *)(result + 388) != 1986618469)
    {
      FigBaseObject = FigFormatWriterGetFigBaseObject(*(_QWORD *)(result + 184));
      result = CMBaseObjectGetVTable();
      v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
      if (v8)
        result = v8(FigBaseObject, CFSTR("MovieTimeScale"), a2);
      *(_DWORD *)(v6 + 388) = a3;
    }
  }
  return result;
}

uint64_t remakerFamily_buildMediaProcessorForAudioCompressionFromLPCMWithFormatWriter(const void *a1, uint64_t a2, const opaqueCMFormatDescription *a3, double *a4, size_t a5, AudioChannelLayout *a6, uint64_t a7, const void *a8)
{
  uint64_t DerivedStorage;
  __CFDictionary *MutableCopy;
  __CFDictionary *v16;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const __CFAllocator *v18;
  const void *v19;
  unsigned int v20;
  int64_t v21;
  int64_t v22;
  int v23;
  uint64_t *v24;
  const __CFDictionary *v25;
  uint64_t v26;
  uint64_t SampleBufferProcessor;
  const __CFAllocator *v28;
  uint64_t FigBaseObject;
  void (*v30)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFString *v31;
  CFTypeID v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, const __CFString *, const __CFAllocator *, const opaqueCMFormatDescription **);
  const AudioFormatListItem *MostCompatibleFormat;
  CFNumberRef v38;
  CFNumberRef v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, const __CFString *, CFNumberRef);
  uint64_t v43;
  size_t v45;
  AudioChannelLayout *v46;
  const void *v47;
  const __CFDictionary *v48;
  int valuePtr;
  CMTime v51;
  CMTime v52;
  const opaqueCMFormatDescription *v53;
  CFTypeRef v54[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v53 = 0;
  v54[0] = 0;
  CFGetAllocator(a1);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294954510;
  v16 = MutableCopy;
  if (*(_BYTE *)(DerivedStorage + 208))
    CFDictionarySetValue(MutableCopy, CFSTR("FigAudioCompressionOption_TrimSampleBufferDurations"), (const void *)*MEMORY[0x1E0C9AE50]);
  v45 = a5;
  v46 = a6;
  v47 = a8;
  CFDictionarySetValue(v16, CFSTR("kFigAudioCompressionOption_UseHardwareEncoderIfPresent"), (const void *)*MEMORY[0x1E0C9AE40]);
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(a3);
  if (a4
    && StreamBasicDescription
    && *a4 == StreamBasicDescription->mSampleRate
    && CFDictionaryContainsKey(v16, CFSTR("FigAudioCompressionOption_AudioConverterSampleRateConverterComplexity")))
  {
    CFDictionaryRemoveValue(v16, CFSTR("FigAudioCompressionOption_AudioConverterSampleRateConverterComplexity"));
  }
  v18 = CFGetAllocator(a1);
  v19 = *(const void **)(DerivedStorage + 184);
  v20 = *(_DWORD *)(a2 + 300);
  if (*(_BYTE *)(DerivedStorage + 32))
    v21 = 10;
  else
    v21 = 2;
  v48 = v16;
  CMTimeMake(&v52, v21, 1);
  if (*(_BYTE *)(DerivedStorage + 32))
    v22 = 8;
  else
    v22 = 1;
  CMTimeMake(&v51, v22, 1);
  if (*(_BYTE *)(DerivedStorage + 32))
    v23 = 30;
  else
    v23 = 31;
  v24 = (uint64_t *)(a2 + 288);
  v25 = v48;
  v26 = FigMediaProcessorCreateForAudioCompressionWithFormatWriter(v18, a3, (uint64_t)a4, v45, v46, v48, v47, v19, v20, (uint64_t)&v52, (__int128 *)&v51.value, 0, v23, (uint64_t *)(a2 + 288));
  if ((_DWORD)v26)
    goto LABEL_38;
  SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*v24);
  v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
  v30 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v30)
  {
    v30(FigBaseObject, CFSTR("SampleBufferProcessor_HardwareResourceName"), v28, v54);
    if (v54[0])
    {
      v31 = CFSTR("Remaker_WillStartUsingHardwareResource");
      if (a1)
      {
        v32 = CFGetTypeID(a1);
        v33 = v32 == FigAssetWriterGetTypeID();
        v25 = v48;
        if (v33)
          v31 = CFSTR("AssetWriter_WillStartUsingHardwareResource");
      }
      remakerFamily_safelyPostNotification(a1, 0, (uint64_t)v31, 0, a1);
      if (v54[0])
      {
        CFRelease(v54[0]);
        v54[0] = 0;
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v26 = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)v26)
  {
LABEL_38:
    v43 = v26;
  }
  else
  {
    v34 = FigMediaProcessorGetSampleBufferProcessor(*v24);
    v35 = FigSampleBufferProcessorGetFigBaseObject(v34);
    v36 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const opaqueCMFormatDescription **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v36)
    {
      v36(v35, CFSTR("SampleBufferProcessor_OutputFormatDescription"), v28, &v53);
      if (v53)
      {
        MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v53);
        if (MostCompatibleFormat)
        {
          valuePtr = (int)MostCompatibleFormat->mASBD.mSampleRate;
          v38 = CFNumberCreate(v28, kCFNumberSInt32Type, &valuePtr);
          if (v38)
          {
            v39 = v38;
            v40 = *(_QWORD *)(DerivedStorage + 184);
            v41 = *(unsigned int *)(a2 + 300);
            v42 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 24);
            if (v42)
              v42(v40, v41, CFSTR("MediaTimeScale"), v39);
            remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)a1, (uint64_t)v39, 1936684398);
            CFRelease(v39);
          }
        }
      }
    }
    v43 = 0;
  }
  CFRelease(v25);
  if (v53)
    CFRelease(v53);
  return v43;
}

void remakerFamily_safelyPostNotification(const void *a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DefaultLocalCenter;

  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    CFRetain(a1);
    if (a5)
      CFRetain(a5);
    if (dword_1EE2A2DD8 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
    if (a2)
      FigDeferNotificationToDispatchQueue();
    else
      remakerFamily_PostNotificationCallback(DefaultLocalCenter, a1, a3, a5);
  }
}

uint64_t remakerFamily_createVirtualCaptureCardAndByteStream()
{
  uint64_t result;

  result = FigVirtualCaptureCardGetSingleton();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t remakerFamily_createMultiPassPlaybackBossForTrack(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t RelatedTrackArray;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
    return FigSignalErrorAt();
  v5 = (const void *)v4;
  if (*(_BYTE *)(a1 + 360) && *(_DWORD *)(a1 + 300))
  {
    RelatedTrackArray = remakerFamily_createRelatedTrackArray((_DWORD *)a1, (__CFArray **)&cf);
    if (!(_DWORD)RelatedTrackArray)
      RelatedTrackArray = remakerFamily_createPlaybackBossForTracks(v5, (const __CFArray *)cf, a1, (uint64_t)&remakerFamily_multiPassPlaybackBossNotifications, a2);
    v7 = RelatedTrackArray;
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v5);
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t remakerFamily_createRelatedTrackArray(_DWORD *a1, __CFArray **a2)
{
  int v4;
  int v5;
  __CFArray *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  _DWORD *ValueAtIndex;
  int v14;
  int v15;
  __CFArray *v17;

  v4 = a1[75];
  v5 = a1[76];
  v6 = (__CFArray *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v6)
  {
    v8 = DerivedStorage;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, 0);
    CFArrayAppendValue(Mutable, a1);
    Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 80));
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; v11 != i; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 80), i);
        if (ValueAtIndex != a1)
        {
          if (v4)
          {
            v14 = a1[75];
            v15 = ValueAtIndex[76];
            if (v14 != v15 && v5 != 0)
            {
LABEL_13:
              v14 = a1[76];
              v15 = ValueAtIndex[75];
            }
            if (v14 == v15)
              CFArrayAppendValue(Mutable, ValueAtIndex);
            continue;
          }
          if (v5)
            goto LABEL_13;
        }
      }
    }
    if (a2)
    {
      *a2 = Mutable;
      v17 = v6;
    }
    else
    {
      CFRelease(v6);
      if (!Mutable)
        return 0;
      v17 = Mutable;
    }
    CFRelease(v17);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t remakerFamily_createPlaybackBossForTracks(const void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  int64_t Count;
  int64_t v10;
  CFTypeRef *v11;
  const __CFAllocator *v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, const __CFArray **);
  const void *ValueAtIndex;
  uint64_t (*v18)(const void *, int *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  uint64_t v23;
  CFIndex v24;
  const void *v25;
  uint64_t v26;
  _QWORD *v27;
  const void *v28;
  _QWORD *v29;
  __CFDictionary *Mutable;
  __CFDictionary *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __int128 *);
  uint64_t v36;
  void (*v37)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFMutableDictionaryRef DefaultEnhanced;
  uint64_t v39;
  const void *v40;
  void (*v41)(const void *, uint64_t, CFTypeRef *, _QWORD);
  const void *GradualDecoderRefresh;
  const AudioFormatListItem *v43;
  int v44;
  const void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  const __CFAllocator *v49;
  uint64_t v50;
  CFTypeRef *v51;
  _QWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  const void *v56;
  int v57;
  uint64_t v58;
  const void **v59;
  _DWORD *v60;
  const __CFAllocator *v61;
  void *value;
  const __CFArray *theArray;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime rhs;
  CMTime v68;
  _BYTE lhs[32];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[2];
  __int128 v76;
  _OWORD v77[2];
  CFTypeRef v78;
  CFTypeRef v79;
  const void *v80;
  const __CFArray *v81;
  CFTypeRef v82;
  const void *v83;
  int v84;
  CFTypeRef v85[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v85[0] = 0;
  v84 = 0;
  v82 = 0;
  v83 = 0;
  v80 = 0;
  v81 = 0;
  v79 = 0;
  theArray = a2;
  Count = CFArrayGetCount(a2);
  v10 = Count;
  if (Count < 1)
  {
    v20 = 0;
    v59 = 0;
    v60 = 0;
    v11 = 0;
    goto LABEL_96;
  }
  v60 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  v59 = (const void **)malloc_type_calloc(v10, 8uLL, 0x2004093837F09uLL);
  v11 = (CFTypeRef *)malloc_type_calloc(v10, 8uLL, 0x6004044C4A2DFuLL);
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
  v14 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v14)
    v14(CMBaseObject, CFSTR("iTunesGaplessInfo"), v12, v85);
  v61 = v12;
  v58 = DerivedStorage;
  v15 = *(_QWORD *)(DerivedStorage + 72);
  v16 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v16)
    v16(v15, 1936684398, &v81);
  if (v81 && CFArrayGetCount(v81) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v81, 0);
    v18 = *(uint64_t (**)(const void *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v18)
    {
LABEL_95:
      v20 = 4294954514;
      goto LABEL_96;
    }
    v19 = v18(ValueAtIndex, &v84, 0);
    if ((_DWORD)v19)
    {
LABEL_10:
      v20 = v19;
      goto LABEL_96;
    }
  }
  v21 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
  v22 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v22)
    goto LABEL_95;
  v53 = a5;
  v19 = v22(v21, CFSTR("assetProperty_FormatReader"), v12, &v80);
  if ((_DWORD)v19)
    goto LABEL_10;
  v57 = 0;
  v23 = 0;
  v24 = 0;
  value = (void *)*MEMORY[0x1E0C9AE40];
  v25 = (const void *)*MEMORY[0x1E0C9AE50];
  v26 = v58;
  v55 = (_OWORD *)(v58 + 88);
  v54 = (_OWORD *)(v58 + 112);
  v56 = (const void *)*MEMORY[0x1E0C9AE50];
  do
  {
    v27 = CFArrayGetValueAtIndex(theArray, v24);
    v78 = 0;
    v28 = (const void *)v27[7];
    if (v28)
    {
      v29 = v27;
      v60[v23] = *((_DWORD *)v27 + 7);
      v59[v23] = v28;
      Mutable = CFDictionaryCreateMutable(v61, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v11[v23] = Mutable;
      if (!Mutable)
      {
        v19 = FigSignalErrorAt();
        goto LABEL_10;
      }
      if (!*((_BYTE *)v29 + 50))
        CFDictionarySetValue(Mutable, CFSTR("BossTrack_TrimSampleBufferDurations"), value);
      if (*((_BYTE *)v29 + 49) && (*((_BYTE *)v29 + 340) & 1) != 0)
      {
        v74 = *(_OWORD *)(v29 + 41);
        *(_QWORD *)&v75[0] = v29[43];
        FigCFDictionarySetCMTime();
      }
      v31 = (__CFDictionary *)v11[v23];
      if (*((_BYTE *)v29 + 51))
      {
        CFDictionarySetValue(v31, CFSTR("BossTrack_SendSampleReferenceSampleBuffers"), v25);
        v31 = (__CFDictionary *)v11[v23];
      }
      if (*((_BYTE *)v29 + 52))
      {
        CFDictionarySetValue(v31, CFSTR("BossTrack_SendCaptionBackedSampleBuffers"), v25);
        v31 = (__CFDictionary *)v11[v23];
      }
      if (*((_BYTE *)v29 + 48))
        v32 = value;
      else
        v32 = v25;
      CFDictionarySetValue(v31, CFSTR("BossTrack_OptimizeSampleCursorIPCForPower"), v32);
      if (*((_DWORD *)v29 + 8) == 1936684398 && *((_BYTE *)v29 + 50))
      {
        *(_QWORD *)&v74 = 0;
        v33 = *(_QWORD *)(v26 + 72);
        v34 = *((unsigned int *)v29 + 7);
        v35 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v35)
          goto LABEL_95;
        v19 = v35(v33, v34, &v74);
        if ((_DWORD)v19)
          goto LABEL_10;
        v36 = FigAssetTrackGetCMBaseObject(v74);
        v37 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v37)
          v37(v36, CFSTR("assetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration"), v61, &v79);
        DefaultEnhanced = 0;
        v39 = *((unsigned int *)v29 + 7);
        v26 = v58;
        if ((_DWORD)v39 == v84 && v85[0])
        {
          v40 = v80;
          v41 = *(void (**)(const void *, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 56);
          if (v41)
            v41(v40, v39, &v78, 0);
          if (v78)
            DefaultEnhanced = FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader((const AudioFormatListItem *)v29[5], (uint64_t)v78, (CFDictionaryRef)v85[0]);
          else
            DefaultEnhanced = 0;
        }
        v43 = (const AudioFormatListItem *)v29[5];
        if (v43)
        {
          if (!DefaultEnhanced)
          {
            DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(v43);
            v43 = (const AudioFormatListItem *)v29[5];
          }
          GradualDecoderRefresh = (const void *)FigGaplessInfoCreateGradualDecoderRefresh((const opaqueCMFormatDescription *)v43);
          if (GradualDecoderRefresh)
            CFDictionarySetValue((CFMutableDictionaryRef)v11[v23], CFSTR("gdrCount"), GradualDecoderRefresh);
          if (FigGaplessInfoGetDefaultBonusAudioPrimingPacketCount((const opaqueCMFormatDescription *)v29[5]))
            FigCFDictionarySetInt32();
        }
        else
        {
          GradualDecoderRefresh = 0;
        }
        if (v79 && CFEqual(v79, v25))
        {
          if (DefaultEnhanced)
          {
            CFRelease(DefaultEnhanced);
            DefaultEnhanced = 0;
          }
        }
        else if (DefaultEnhanced)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v11[v23], CFSTR("iTunesGaplessInfo"), DefaultEnhanced);
        }
        if ((_QWORD)v74)
          CFRelease((CFTypeRef)v74);
      }
      else
      {
        GradualDecoderRefresh = 0;
        DefaultEnhanced = 0;
      }
      if (*((_DWORD *)v29 + 17))
      {
        FigCFDictionarySetInt32();
        v74 = *(_OWORD *)(v29 + 9);
        *(_QWORD *)&v75[0] = v29[11];
        FigCFDictionarySetCMTime();
        v74 = *((_OWORD *)v29 + 6);
        *(_QWORD *)&v75[0] = v29[14];
        FigCFDictionarySetCMTime();
      }
      if (*((_BYTE *)v29 + 121))
      {
        v74 = *(_OWORD *)((char *)v29 + 124);
        *(_QWORD *)&v75[0] = *(_QWORD *)((char *)v29 + 140);
        FigCFDictionarySetCMTime();
        v57 = 1;
      }
      if (*((_BYTE *)v29 + 440))
        CFDictionarySetValue((CFMutableDictionaryRef)v11[v23], CFSTR("BossTrack_RoundUpStartPTS"), v25);
      FigCFDictionarySetInt32();
      v44 = *((_DWORD *)v29 + 8);
      if (v44 == 1635088502 || v44 == 1986618469)
      {
        v46 = *(const void **)(v26 + 472);
        if (v46)
        {
          v74 = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)&v75[0] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          *(_OWORD *)((char *)v75 + 8) = v74;
          *((_QWORD *)&v75[1] + 1) = *(_QWORD *)&v75[0];
          v76 = v74;
          *(_QWORD *)&v77[0] = *(_QWORD *)&v75[0];
          *(_OWORD *)((char *)v77 + 8) = v74;
          *((_QWORD *)&v77[1] + 1) = *(_QWORD *)&v75[0];
          FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v46, *((_DWORD *)v29 + 7), &v74);
          v71 = v76;
          v72 = v77[0];
          v73 = v77[1];
          *(_OWORD *)lhs = v74;
          *(_OWORD *)&lhs[16] = v75[0];
          v70 = v75[1];
          if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)lhs))
          {
            *(_OWORD *)lhs = v74;
            *(_QWORD *)&lhs[16] = *(_QWORD *)&v75[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *(_OWORD *)((char *)v75 + 8);
            *(_QWORD *)&lhs[16] = *((_QWORD *)&v75[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = v74;
            *(_QWORD *)&lhs[16] = *(_QWORD *)&v75[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *(_OWORD *)((char *)v75 + 8);
            *(_QWORD *)&lhs[16] = *((_QWORD *)&v75[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *v55;
            *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 104);
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *v54;
            *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 128);
            FigCFDictionarySetCMTime();
            if (*(_BYTE *)(v26 + 136))
            {
              *(_OWORD *)lhs = *v55;
              *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 104);
              *(_OWORD *)&rhs.value = v74;
              rhs.epoch = *(_QWORD *)&v75[0];
              CMTimeSubtract(&v65, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
              *(_OWORD *)lhs = *v54;
              *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 128);
              rhs = *(CMTime *)((char *)v75 + 8);
              CMTimeAdd(&v64, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
            }
          }
          v25 = v56;
        }
      }
      else if (v44 == 1835365473)
      {
        v45 = *(const void **)(v26 + 480);
        if (v45)
        {
          v74 = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)&v75[0] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          *(_OWORD *)((char *)v75 + 8) = v74;
          *((_QWORD *)&v75[1] + 1) = *(_QWORD *)&v75[0];
          v76 = v74;
          *(_QWORD *)&v77[0] = *(_QWORD *)&v75[0];
          *(_OWORD *)((char *)v77 + 8) = v74;
          *((_QWORD *)&v77[1] + 1) = *(_QWORD *)&v75[0];
          v19 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v45, *((_DWORD *)v29 + 7), &v74);
          if ((_DWORD)v19)
            goto LABEL_10;
          v71 = v76;
          v72 = v77[0];
          v73 = v77[1];
          *(_OWORD *)lhs = v74;
          *(_OWORD *)&lhs[16] = v75[0];
          v70 = v75[1];
          v26 = v58;
          if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)lhs))
          {
            *(_OWORD *)lhs = v74;
            *(_QWORD *)&lhs[16] = *(_QWORD *)&v75[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *(_OWORD *)((char *)v75 + 8);
            *(_QWORD *)&lhs[16] = *((_QWORD *)&v75[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = v74;
            *(_QWORD *)&lhs[16] = *(_QWORD *)&v75[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *(_OWORD *)((char *)v75 + 8);
            *(_QWORD *)&lhs[16] = *((_QWORD *)&v75[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *v55;
            *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 104);
            FigCFDictionarySetCMTime();
            *(_OWORD *)lhs = *v54;
            *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 128);
            FigCFDictionarySetCMTime();
            if (*(_BYTE *)(v58 + 136))
            {
              *(_OWORD *)lhs = *v55;
              *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 104);
              *(_OWORD *)&rhs.value = v74;
              rhs.epoch = *(_QWORD *)&v75[0];
              CMTimeSubtract(&v68, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
              *(_OWORD *)lhs = *v54;
              *(_QWORD *)&lhs[16] = *(_QWORD *)(v58 + 128);
              rhs = *(CMTime *)((char *)v75 + 8);
              CMTimeAdd(&v66, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
            }
          }
        }
      }
      if (GradualDecoderRefresh)
        CFRelease(GradualDecoderRefresh);
      if (DefaultEnhanced)
        CFRelease(DefaultEnhanced);
      if (v79)
      {
        CFRelease(v79);
        v79 = 0;
      }
      if (v78)
        CFRelease(v78);
      ++v23;
    }
    ++v24;
  }
  while (v10 != v24);
  v47 = FigAssetGetCMBaseObject(*(_QWORD *)(v26 + 72));
  v48 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v48)
    goto LABEL_95;
  v19 = v48(v47, CFSTR("assetProperty_ByteStreamProvider"), v61, &v83);
  if ((_DWORD)v19)
    goto LABEL_10;
  v49 = CFGetAllocator(a1);
  v19 = FigPlaybackBossCreate(v49, v80, v23, v60, v59, (uint64_t)v11, v83, (const void *)1, 0, 1, 0, (uint64_t *)&v82);
  if ((_DWORD)v19)
    goto LABEL_10;
  if (v57)
  {
    v19 = FigPlaybackBossSetIFrameOnlySpeedThreshold((uint64_t)v82, 0.0);
    if ((_DWORD)v19)
      goto LABEL_10;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v50 = FigNotificationCenterAddWeakListeners();
  v20 = v50;
  if (v53 && !(_DWORD)v50)
  {
    *v53 = v82;
    v82 = 0;
    goto LABEL_98;
  }
LABEL_96:
  if (v82)
    CFRelease(v82);
LABEL_98:
  free(v60);
  free(v59);
  if (v11)
  {
    if (v10 >= 1)
    {
      v51 = v11;
      do
      {
        if (*v51)
        {
          CFRelease(*v51);
          *v51 = 0;
        }
        ++v51;
        --v10;
      }
      while (v10);
    }
    free(v11);
  }
  if (v85[0])
  {
    CFRelease(v85[0]);
    v85[0] = 0;
  }
  if (v83)
  {
    CFRelease(v83);
    v83 = 0;
  }
  if (v81)
    CFRelease(v81);
  if (v80)
    CFRelease(v80);
  if (v79)
    CFRelease(v79);
  return v20;
}

uint64_t remakerFamily_createSinglePassPlaybackBoss(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  _BYTE *ValueAtIndex;
  uint64_t PlaybackBossForTracks;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i);
      if (!ValueAtIndex[360])
        CFArrayAppendValue(Mutable, ValueAtIndex);
    }
  }
  PlaybackBossForTracks = remakerFamily_createPlaybackBossForTracks(a1, Mutable, (uint64_t)a1, (uint64_t)&remakerFamily_singlePassPlaybackBossNotifications, a2);
  if (Mutable)
    CFRelease(Mutable);
  return PlaybackBossForTracks;
}

uint64_t remakerFamily_startTrack(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  uint64_t TypeID;
  OpaqueVTCompressionSession *VTCompressionSession;
  uint64_t v19;
  uint64_t v20;
  CMTime v22;
  CMTime v23;

  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = (const void *)v6;
    v8 = *(_QWORD *)(a1 + 232);
    if (v8)
    {
      FigMediaProcessorGo(v8);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 160))
      {
        v9 = *(const __CFArray **)(a1 + 240);
        if (v9)
        {
          Count = CFArrayGetCount(v9);
          if (Count >= 2)
          {
            v11 = Count;
            for (i = 1; i != v11; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), i);
              FigMediaProcessorGo((uint64_t)ValueAtIndex);
            }
          }
        }
      }
    }
    v14 = *(_QWORD *)(a1 + 264);
    if (v14)
      FigMediaProcessorGo(v14);
    v15 = *(_QWORD *)(a1 + 288);
    if (v15)
    {
      if (*(_BYTE *)(a1 + 360))
      {
        v16 = CFGetTypeID(v7);
        TypeID = FigRemakerGetTypeID();
        v15 = *(_QWORD *)(a1 + 288);
        if (v16 == TypeID)
        {
          VTCompressionSession = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(v15);
          v19 = VTCompressionSessionBeginPass(VTCompressionSession, 0, 0);
          if ((_DWORD)v19)
          {
            v20 = v19;
            CFRelease(v7);
            return v20;
          }
          v15 = *(_QWORD *)(a1 + 288);
        }
      }
      FigMediaProcessorGo(v15);
    }
    CFRelease(v7);
  }
  v23 = *a2;
  v22 = *a3;
  return remakerFamily_startSourceRendererOfTrack(a1, &v23, &v22);
}

uint64_t remakerFamily_startSourceRendererOfTrack(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CMTime *);
  uint64_t started;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v17;
  CMTime v18;
  CMTime v19;

  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6)
    return 0;
  v7 = (const void *)v6;
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v18 = *a2;
    v9 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v9)
    {
      v19 = v18;
      started = v9(v8, &v19);
      if ((_DWORD)started && (_DWORD)started != -12782)
        goto LABEL_16;
    }
  }
  v12 = *(_QWORD *)(a1 + 168);
  if (!v12)
    goto LABEL_14;
  if (*(_DWORD *)(a1 + 436) == 1)
  {
    v13 = *(_QWORD *)(a1 + 176);
    v19 = *a2;
    v18 = *a3;
    if (!FigVideoCompositionInstructionArrayIsValid(v13, (uint64_t)&v19, (uint64_t)&v18))
    {
      v17 = CFGetTypeID(v7);
      remakerFamily_MapError(v17, 4u);
      started = FigSignalErrorAt();
      goto LABEL_16;
    }
    v12 = *(_QWORD *)(a1 + 168);
  }
  *(_BYTE *)(a1 + 184) = 0;
  v19 = *a2;
  v18 = *a3;
  started = FigVideoCompositionProcessorStartRenderingFramesForTimeRange(v12, &v19, (uint64_t)&v18);
  if (!(_DWORD)started)
  {
LABEL_14:
    v14 = *(_QWORD *)(a1 + 200);
    if (!v14)
    {
      v15 = 0;
      goto LABEL_18;
    }
    *(_BYTE *)(a1 + 216) = 0;
    v19 = *a2;
    v18 = *a3;
    started = FigAudioQueueOfflineMixerStartRenderingForTimeRange(v14, &v19, &v18);
  }
LABEL_16:
  v15 = started;
LABEL_18:
  CFRelease(v7);
  return v15;
}

uint64_t remakerFamily_startAllMultiPassTracks(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex v8;
  _OWORD *v9;
  _QWORD *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
    return 0;
  v6 = Count;
  v7 = 0;
  v8 = 0;
  v9 = (_OWORD *)(DerivedStorage + 88);
  do
  {
    memset(&v16, 0, sizeof(v16));
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v8);
    if (*((_BYTE *)ValueAtIndex + 360))
    {
      v11 = (uint64_t)ValueAtIndex;
      v12 = ValueAtIndex[53];
      if (v12)
      {
        *(_BYTE *)(v11 + 432) = 0;
        if (*(_BYTE *)(DerivedStorage + 136))
        {
          *(_OWORD *)&v15.value = *v9;
          v15.epoch = *(_QWORD *)(DerivedStorage + 104);
          result = FigPlaybackBossSendSampleForTime(v12, &v15, 4);
          if ((_DWORD)result)
            return result;
        }
        else
        {
          *(_OWORD *)&v15.value = *v9;
          v15.epoch = *(_QWORD *)(DerivedStorage + 104);
          v14 = *(CMTime *)(DerivedStorage + 112);
          result = FigPlaybackBossSendSamplesForTimeRange(v12, &v15, (uint64_t)&v14, 4);
          if ((_DWORD)result)
            return result;
        }
      }
      result = remakerFamily_getExpectedEndTime(a1, (uint64_t)&v16);
      if ((_DWORD)result)
        return result;
      *(_OWORD *)&v15.value = *v9;
      v15.epoch = *(_QWORD *)(DerivedStorage + 104);
      v14 = v16;
      result = remakerFamily_startTrack(v11, &v15, &v14);
      if ((_DWORD)result)
        return result;
      ++v7;
    }
    ++v8;
  }
  while (v6 != v8);
  result = 0;
  if (a2)
  {
    if (v7 >= 1)
    {
      result = 0;
      *a2 = 1;
    }
  }
  return result;
}

uint64_t remakerFamily_getExpectedEndTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  CFDictionaryRef v10;
  BOOL v11;
  CMTime v13;
  CFDictionaryRef dictionaryRepresentation;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dictionaryRepresentation = 0;
  if (!a2)
    return FigSignalErrorAt();
  v4 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  if ((*(_DWORD *)(DerivedStorage + 124) & 0x1D) == 1)
  {
    v5 = 0;
    v6 = *(_OWORD *)(DerivedStorage + 112);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 128);
    *(_OWORD *)a2 = v6;
  }
  else
  {
    v7 = *(_QWORD *)(DerivedStorage + 72);
    if (v7)
    {
      CMBaseObject = FigAssetGetCMBaseObject(v7);
      v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v9)
      {
        v5 = v9(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
        v10 = dictionaryRepresentation;
        if ((_DWORD)v5)
          v11 = 1;
        else
          v11 = dictionaryRepresentation == 0;
        if (!v11)
        {
          CMTimeMakeFromDictionary(&v13, dictionaryRepresentation);
          *(_OWORD *)a2 = *(_OWORD *)&v13.value;
          v10 = dictionaryRepresentation;
          *(_QWORD *)(a2 + 16) = v13.epoch;
        }
        if (v10)
          CFRelease(v10);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t remakerFamily_startAllSinglePassTracks(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  _BYTE *ValueAtIndex;
  uint64_t v7;
  uint64_t result;
  _OWORD *v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
  {
LABEL_7:
    result = *(_QWORD *)(DerivedStorage + 376);
    if (result)
    {
      v9 = (_OWORD *)(DerivedStorage + 88);
      if (*(_BYTE *)(DerivedStorage + 136))
      {
        *(_OWORD *)&v12.value = *v9;
        v12.epoch = *(_QWORD *)(DerivedStorage + 104);
        return FigPlaybackBossSendSampleForTime(result, &v12, 0);
      }
      else
      {
        *(_OWORD *)&v12.value = *v9;
        v12.epoch = *(_QWORD *)(DerivedStorage + 104);
        v11 = *(CMTime *)(DerivedStorage + 112);
        return FigPlaybackBossSendSamplesForTimeRange(result, &v12, (uint64_t)&v11, 0);
      }
    }
  }
  else
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      memset(&v12, 0, sizeof(v12));
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v5);
      if (!ValueAtIndex[360])
      {
        v7 = (uint64_t)ValueAtIndex;
        result = remakerFamily_getExpectedEndTime(a1, (uint64_t)&v12);
        if ((_DWORD)result)
          break;
        v11 = *(CMTime *)(DerivedStorage + 88);
        v10 = v12;
        result = remakerFamily_startTrack(v7, &v11, &v10);
        if ((_DWORD)result)
          break;
      }
      if (v4 == ++v5)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t remakerFamily_MarkEndOfDataForTrack(uint64_t a1, int a2)
{
  const void *v4;
  unsigned int *DerivedStorage;
  unsigned int *v6;
  unsigned int v7;
  opaqueCMBufferQueue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, const __CFString *, _QWORD, CMBufferQueueRef *);
  uint64_t v13;
  CMBufferQueueRef queue;

  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    v6 = DerivedStorage;
    v7 = *DerivedStorage;
    if (*DerivedStorage >= 7 || DerivedStorage[5] || v7 >= 5 || v7 <= 2)
    {
      v9 = FigSignalErrorAt();
    }
    else
    {
      if (a2)
        *(_WORD *)(a1 + 432) = 257;
      v8 = *(opaqueCMBufferQueue **)(*(_QWORD *)(a1 + 160) + 32);
      if (!v8 || (v9 = CMBufferQueueMarkEndOfData(v8), !(_DWORD)v9))
      {
        if (!*(_QWORD *)(a1 + 288))
        {
          v10 = *((_QWORD *)v6 + 23);
          if (v10)
          {
            queue = 0;
            v11 = *(unsigned int *)(a1 + 300);
            v12 = *(void (**)(uint64_t, uint64_t, const __CFString *, _QWORD, CMBufferQueueRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v12)
            {
              v12(v10, v11, CFSTR("SourceSampleBufferQueue"), *MEMORY[0x1E0C9AE00], &queue);
              if (queue)
              {
                if (queue != *(CMBufferQueueRef *)(*(_QWORD *)(a1 + 160) + 32))
                  CMBufferQueueMarkEndOfData(queue);
              }
            }
            FigBufferQueueRelease();
          }
        }
        v13 = 0;
        goto LABEL_18;
      }
    }
    v13 = v9;
LABEL_18:
    CFRelease(v4);
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t remakerFamily_createAudioMixdownSourceTrack(const void *a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const __CFString *a6, uint64_t a7, const void *a8, intptr_t *a9)
{
  uint64_t DerivedStorage;
  const void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v18;
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, int *);
  int v21;
  CFTypeID v22;
  uint64_t v23;
  intptr_t v24;
  __SecTask *v25;
  CFTypeRef v26;
  CFAllocatorRef v27;
  uint64_t v28;
  uint64_t RenderPipelineOptions;
  const __CFAllocator *v30;
  _QWORD *v31;
  uint64_t FigBaseObject;
  void (*v33)(uint64_t, const __CFString *, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, const __CFString *, const void *);
  CFTypeID TypeID;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, const __CFString *, const void *);
  CFTypeID v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, const __CFString *, const void *);
  CFTypeID v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, const __CFString *, const void *);
  const __CFString *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, const __CFString *, const __CFString *);
  CFTypeID v50;
  const __CFString *cf1;
  int v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef cf;
  intptr_t v58;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v58 = 0;
  v56 = 0;
  cf = 0;
  v55 = 0;
  v54 = 1936684398;
  v15 = (const void *)*MEMORY[0x1E0C9AE40];
  v16 = *(_QWORD *)(DerivedStorage + 72);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v17)
    goto LABEL_38;
  cf1 = a6;
  v18 = v17(v16, a2, &v55);
  if ((_DWORD)v18)
  {
LABEL_58:
    v46 = v18;
    v24 = 0;
    goto LABEL_39;
  }
  v19 = v55;
  v20 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v20)
  {
LABEL_38:
    v24 = 0;
    v46 = 4294954514;
LABEL_39:
    v26 = v15;
    goto LABEL_45;
  }
  v18 = v20(v19, 0, &v54);
  if ((_DWORD)v18)
    goto LABEL_58;
  if (!a1)
    goto LABEL_57;
  v21 = v54;
  v22 = CFGetTypeID(a1);
  if (v21 != 1936684398)
  {
    remakerFamily_MapError(v22, 1u);
LABEL_57:
    v18 = FigSignalErrorAt();
    goto LABEL_58;
  }
  v18 = remakerFamily_copyFormatDescription(v22, (uint64_t)v55, &cf);
  if ((_DWORD)v18)
    goto LABEL_58;
  v23 = remakerFamily_createChannel(a1, a2, v54, &v58);
  v24 = v58;
  if ((_DWORD)v23 || (v23 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v58), (_DWORD)v23))
  {
    v46 = v23;
    goto LABEL_39;
  }
  *(_BYTE *)(v24 + 48) = 0;
  *(_BYTE *)(v24 + 50) = 1;
  *(_QWORD *)(v24 + 40) = CFRetain(cf);
  v25 = *(__SecTask **)(DerivedStorage + 440);
  v26 = v15;
  if (v25)
    v26 = SecTaskCopyValueForEntitlement(v25, CFSTR("com.apple.coreaudio.allow-amr-decode"), 0);
  v27 = CFGetAllocator(a1);
  v28 = *MEMORY[0x1E0C9AE50];
  RenderPipelineOptions = remakerFamily_createRenderPipelineOptions((uint64_t)v27, cf, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], *MEMORY[0x1E0C9AE50] == (_QWORD)v26, 0, *(unsigned __int8 *)(DerivedStorage + 424), 0, 0, *(_BYTE *)(DerivedStorage + 32), a8, 0, DerivedStorage + 41, a2, (__CFDictionary **)&v56);
  if ((_DWORD)RenderPipelineOptions)
    goto LABEL_37;
  v30 = CFGetAllocator(a1);
  v31 = (_QWORD *)(v24 + 56);
  RenderPipelineOptions = FigAudioQueueRenderPipelineCreate(v30, (const __CFDictionary *)v56, (_QWORD *)(v24 + 56));
  if ((_DWORD)RenderPipelineOptions)
    goto LABEL_37;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*v31);
  v33 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v33)
    v33(FigBaseObject, CFSTR("HandleFormatDescriptionChanges"), v28);
  v34 = FigRenderPipelineGetFigBaseObject(*v31);
  v35 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  if (v35)
    v35(v34, CFSTR("AllowedToUseHardware"), v15);
  CMNotificationCenterGetDefaultLocalCenter();
  RenderPipelineOptions = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)RenderPipelineOptions)
    goto LABEL_37;
  if (a3)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a3))
    {
      v50 = CFGetTypeID(a1);
      remakerFamily_MapError(v50, 2u);
      goto LABEL_36;
    }
    v37 = FigRenderPipelineGetFigBaseObject(*v31);
    v38 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (!v38)
      goto LABEL_40;
    RenderPipelineOptions = v38(v37, CFSTR("AudioCurves"), a3);
    if ((_DWORD)RenderPipelineOptions)
      goto LABEL_37;
  }
  if (a4)
  {
    v39 = MTAudioProcessingTapGetTypeID();
    if (v39 != CFGetTypeID(a4))
      goto LABEL_36;
    v40 = FigRenderPipelineGetFigBaseObject(*v31);
    v41 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (!v41)
      goto LABEL_40;
    RenderPipelineOptions = v41(v40, CFSTR("AudioProcessingTap"), a4);
    if ((_DWORD)RenderPipelineOptions)
      goto LABEL_37;
  }
  if (a5)
  {
    v42 = CFDataGetTypeID();
    if (v42 == CFGetTypeID(a5))
    {
      v43 = FigRenderPipelineGetFigBaseObject(*v31);
      v44 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (v44)
      {
        RenderPipelineOptions = v44(v43, CFSTR("CinematicAudioParameters"), a5);
        if (!(_DWORD)RenderPipelineOptions)
          goto LABEL_31;
LABEL_37:
        v46 = RenderPipelineOptions;
        goto LABEL_45;
      }
LABEL_40:
      v46 = 4294954514;
      goto LABEL_45;
    }
LABEL_36:
    RenderPipelineOptions = FigSignalErrorAt();
    goto LABEL_37;
  }
LABEL_31:
  v45 = cf1;
  if (cf1)
  {
    if (!CFEqual(cf1, CFSTR("TimeDomain"))
      && !CFEqual(cf1, CFSTR("Spectral"))
      && !CFEqual(cf1, CFSTR("LowQualityZeroLatency"))
      && !CFEqual(cf1, CFSTR("Varispeed")))
    {
      goto LABEL_36;
    }
  }
  else
  {
    v45 = CFSTR("Spectral");
  }
  v47 = FigRenderPipelineGetFigBaseObject(*v31);
  v48 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v48)
    v48(v47, CFSTR("TimePitchAlgorithm"), v45);
  v46 = 0;
  *a9 = v24;
  v58 = 0;
  v24 = 0;
LABEL_45:
  remakerFamily_discardChannel((uint64_t)a1, v24);
  if (v56)
  {
    CFRelease(v56);
    v56 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v26)
    CFRelease(v26);
  if (v55)
    CFRelease(v55);
  return v46;
}

uint64_t remakerFamily_copyFormatDescription(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v7;
  uint64_t v8;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  CMBaseObject = FigAssetTrackGetCMBaseObject(a2);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v6)
  {
    v7 = v6(CMBaseObject, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
    if ((_DWORD)v7 == -12521)
      goto LABEL_10;
    v8 = v7;
    if ((_DWORD)v7)
      goto LABEL_14;
    if (theArray && CFArrayGetCount(theArray))
    {
      if (a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
        v8 = 0;
        *a3 = ValueAtIndex;
      }
      else
      {
        v8 = 0;
      }
    }
    else
    {
LABEL_10:
      if (FigAssetReaderGetTypeID() == a1)
        v8 = 4294955158;
      else
        v8 = 4294955173;
    }
  }
  else
  {
    v8 = 4294954514;
  }
LABEL_14:
  if (theArray)
    CFRelease(theArray);
  return v8;
}

uint64_t remakerFamily_setupMultiPassTrackIfNecessary(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFTypeID v5;
  uint64_t ExpectedDuration;
  CFTypeID v7;
  const __CFAllocator *v8;
  const __CFURL *v9;
  uint64_t v10;
  uint64_t v11;
  CMTime v13;
  CMTime start;
  CMTimeRange timeRange;
  CMTime v16;
  const __CFURL *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (!FigCFDictionaryGetBooleanIfPresent() || !*(_BYTE *)(a2 + 360))
    goto LABEL_10;
  if (a1)
  {
    v5 = CFGetTypeID(a1);
    if (v5 == FigAssetReaderGetTypeID())
      goto LABEL_8;
  }
  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  ExpectedDuration = remakerFamily_getExpectedDuration((uint64_t)a1, &v16);
  if (!(_DWORD)ExpectedDuration)
  {
    v7 = CFGetTypeID(a1);
    ExpectedDuration = remakerFamily_createTempFile(v7, *(_QWORD *)(DerivedStorage + 232), *(const __CFURL **)(DerivedStorage + 160), 0, 0, &v17);
    if (!(_DWORD)ExpectedDuration)
    {
      FigFileDeleteFile();
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      start = *(CMTime *)(DerivedStorage + 88);
      v13 = v16;
      v9 = v17;
      CMTimeRangeMake(&timeRange, &start, &v13);
      ExpectedDuration = VTFrameSiloCreate(v8, v9, &timeRange, 0, (VTFrameSiloRef *)(a2 + 368));
      if (!(_DWORD)ExpectedDuration)
      {
LABEL_8:
        *(_DWORD *)(a2 + 436) = 1;
        v10 = FigDispatchQueueCreateWithPriorityAndClientPID();
        *(_QWORD *)(a2 + 376) = v10;
        if (v10)
        {
          *(_QWORD *)(a2 + 416) = dispatch_semaphore_create(0);
          if (*(_QWORD *)(a2 + 376))
          {
LABEL_10:
            v11 = 0;
            goto LABEL_11;
          }
        }
        ExpectedDuration = FigSignalErrorAt();
      }
    }
  }
  v11 = ExpectedDuration;
LABEL_11:
  if (v17)
    CFRelease(v17);
  return v11;
}

uint64_t remakerFamily_createRenderPipelineOptions(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, const void *a6, int a7, int a8, char a9, char a10, const void *a11, char a12, uint64_t a13, unsigned int a14, __CFDictionary **a15)
{
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  const void **v24;
  const void *v25;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v27;
  CFStringRef v28;

  if (!a15)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 16, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v23 = Mutable;
  if (a2)
    CFDictionarySetValue(Mutable, CFSTR("FormatDescription"), a2);
  if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1)
    FigCFDictionarySetCMTime();
  if ((*(_DWORD *)(a4 + 12) & 0x1D) == 1)
    FigCFDictionarySetCMTime();
  v24 = (const void **)MEMORY[0x1E0C9AE50];
  if (a5)
    CFDictionarySetValue(v23, CFSTR("AllowAMRDecode"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (a6)
    CFDictionarySetValue(v23, CFSTR("SharePixelBufferPool"), a6);
  v25 = *v24;
  if (a7)
    CFDictionarySetValue(v23, CFSTR("MaximizePowerEfficiency"), *v24);
  if (a8)
    CFDictionarySetValue(v23, CFSTR("InhibitPixelFormatConversion"), v25);
  if (a9)
    CFDictionarySetValue(v23, CFSTR("InhibitCompressedBufferUse"), v25);
  CFDictionarySetValue(v23, CFSTR("NonRealTime"), v25);
  if (a10)
    CFDictionarySetValue(v23, CFSTR("RealTimePriority"), v25);
  if (a11)
    CFDictionarySetValue(v23, CFSTR("DestFormatDescription"), a11);
  if (a12)
    CFDictionarySetValue(v23, CFSTR("DisableAsyncVideoDecompression"), v25);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v27 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%s.t%d"), a13, a14);
  if (v27)
  {
    v28 = v27;
    CFDictionarySetValue(v23, CFSTR("LoggingID"), v27);
    *a15 = v23;
    CFRelease(v28);
  }
  else
  {
    *a15 = v23;
  }
  return 0;
}

uint64_t remakerFamily_getSourceASBDForTrackID(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, _QWORD, int *);
  CFTypeID v12;
  const AudioFormatListItem *RichestDecodableFormat;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v18;
  CFTypeRef cf;
  CMAudioFormatDescriptionRef desc;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  desc = 0;
  v18 = 0;
  if (*(_DWORD *)DerivedStorage >= 7u)
    goto LABEL_18;
  v7 = *(_QWORD *)(DerivedStorage + 72);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v8)
    goto LABEL_11;
  v9 = v8(v7, a2, &cf);
  if ((_DWORD)v9)
  {
LABEL_19:
    v14 = v9;
    goto LABEL_12;
  }
  v10 = cf;
  v11 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v11)
  {
LABEL_11:
    v14 = 4294954514;
    goto LABEL_12;
  }
  v9 = v11(v10, 0, &v18);
  if ((_DWORD)v9)
    goto LABEL_19;
  if (v18 != 1936684398)
    return FigSignalErrorAt();
  v12 = CFGetTypeID(a1);
  v9 = remakerFamily_copyFormatDescription(v12, (uint64_t)cf, &desc);
  if ((_DWORD)v9)
    goto LABEL_19;
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(desc);
  if (!RichestDecodableFormat)
  {
    RichestDecodableFormat = (const AudioFormatListItem *)CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    if (!RichestDecodableFormat)
    {
LABEL_18:
      v9 = FigSignalErrorAt();
      goto LABEL_19;
    }
  }
  v14 = 0;
  v15 = *(_OWORD *)&RichestDecodableFormat->mASBD.mSampleRate;
  v16 = *(_OWORD *)&RichestDecodableFormat->mASBD.mBytesPerPacket;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)&RichestDecodableFormat->mASBD.mBitsPerChannel;
  *(_OWORD *)a3 = v15;
  *(_OWORD *)(a3 + 16) = v16;
LABEL_12:
  if (desc)
    CFRelease(desc);
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t remakerfamily_updateClientPID()
{
  uint64_t DerivedStorage;
  CFNumberRef v1;
  uint64_t v2;
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, CFNumberRef);
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  uint64_t v10;
  int v11;
  const void *VTCompressionSession;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex i;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *propertyKey;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 36));
  v2 = *(_QWORD *)(DerivedStorage + 376);
  if (v2)
    FigPlaybackBossSetClientPID(v2, (uint64_t)v1);
  if (*(_QWORD *)(DerivedStorage + 184))
  {
    FigBaseObject = FigFormatWriterGetFigBaseObject();
    v4 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v4)
      v4(FigBaseObject, CFSTR("ClientPID"), v1);
  }
  if (!*(_QWORD *)(DerivedStorage + 56) || !FigDispatchQueueSetPriorityAndClientPID())
  {
    v5 = *(const __CFArray **)(DerivedStorage + 80);
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        propertyKey = (const __CFString *)*MEMORY[0x1E0CECF40];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v8);
          v10 = *((_QWORD *)ValueAtIndex + 36);
          if (v10)
          {
            FigMediaProcessorSetProperty(v10, CFSTR("ClientPID"), (uint64_t)v1);
            if (!*((_BYTE *)ValueAtIndex + 48))
            {
              v11 = *((_DWORD *)ValueAtIndex + 8);
              if (v11 == 1986618469 || v11 == 1635088502)
              {
                VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*((_QWORD *)ValueAtIndex
                                                                                              + 36));
                VTSessionSetProperty(VTCompressionSession, propertyKey, v1);
              }
            }
          }
          if (*((_DWORD *)ValueAtIndex + 8) == 1936684398)
          {
            v14 = *((_QWORD *)ValueAtIndex + 25);
            if (v14)
              FigAudioQueueOfflineMixerSetProperty(v14, CFSTR("AudioQueueOfflineMixer_ClientPID"), v1);
          }
          v15 = *((_QWORD *)ValueAtIndex + 7);
          if (v15)
          {
            v16 = FigRenderPipelineGetFigBaseObject(v15);
            v17 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v17)
              v17(v16, CFSTR("ClientPID"), v1);
          }
          v18 = *((_QWORD *)ValueAtIndex + 29);
          if (v18)
          {
            FigMediaProcessorSetProperty(v18, CFSTR("ClientPID"), (uint64_t)v1);
            if (*(_BYTE *)(*((_QWORD *)ValueAtIndex + 19) + 160))
            {
              v19 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 30);
              if (v19)
              {
                v20 = CFArrayGetCount(v19);
                if (v20 >= 2)
                {
                  v21 = v20;
                  for (i = 1; i != v21; ++i)
                  {
                    v23 = CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 30), i);
                    FigMediaProcessorSetProperty((uint64_t)v23, CFSTR("ClientPID"), (uint64_t)v1);
                  }
                }
              }
            }
          }
          v24 = *((_QWORD *)ValueAtIndex + 33);
          if (v24)
            FigMediaProcessorSetProperty(v24, CFSTR("ClientPID"), (uint64_t)v1);
          if (*((_DWORD *)ValueAtIndex + 8) == 1986618469)
          {
            v25 = *((_QWORD *)ValueAtIndex + 21);
            if (v25)
              FigVideoCompositionProcessorSetProperty(v25, CFSTR("VideoCompositionProcessor_ClientPID"), v1);
          }
          if (*((_BYTE *)ValueAtIndex + 360))
          {
            v26 = *((_QWORD *)ValueAtIndex + 53);
            if (v26)
              FigPlaybackBossSetClientPID(v26, (uint64_t)v1);
          }
          ++v8;
        }
        while (v8 != v7);
      }
    }
  }
  CFRelease(v1);
  return 0;
}

uint64_t remakerfamily_updateThrottleForBackground(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *ValueAtIndex;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  CFTypeID v14;
  CFTypeID v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 80);
  if (result)
  {
    Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      v7 = *MEMORY[0x1E0C9AE50];
      v8 = *MEMORY[0x1E0C9AE40];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v6);
        v10 = ValueAtIndex;
        if (*((_DWORD *)ValueAtIndex + 8) == 1986618469)
        {
          v11 = ValueAtIndex[21];
          if (v11)
          {
            v12 = (void *)(*(_BYTE *)(DerivedStorage + 40) ? v7 : v8);
            result = FigVideoCompositionProcessorSetProperty(v11, CFSTR("VideoCompositionProcessor_ThrottleForBackground"), v12);
            if ((_DWORD)result)
              break;
          }
        }
        if (*((_BYTE *)v10 + 360))
        {
          v13 = v10[53];
          if (v13)
            FigPlaybackBossSetThrottleForBackground(v13, *(_BYTE *)(DerivedStorage + 40));
        }
        if (v5 == ++v6)
          return 0;
      }
      if ((_DWORD)result == -12303)
      {
        if (a1)
        {
          v14 = CFGetTypeID(a1);
          if (v14 == FigRemakerGetTypeID())
          {
            return 4294955171;
          }
          else
          {
            v15 = CFGetTypeID(a1);
            if (v15 == FigAssetReaderGetTypeID())
              return 4294955157;
            else
              return 4294954993;
          }
        }
        else
        {
          return 4294954993;
        }
      }
    }
  }
  return result;
}

uint64_t remakerfamily_updateIOPolicy()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  CFNumberRef v2;
  CFNumberRef v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, CFNumberRef);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, CFNumberRef);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, CFNumberRef);
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = *MEMORY[0x1E0C9AE00];
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, DerivedStorage + 57);
  if (!v2)
    return FigSignalErrorAt();
  v3 = v2;
  v4 = DerivedStorage[9];
  if (v4)
  {
    CMBaseObject = FigAssetGetCMBaseObject(v4);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v6)
    {
      if (!v6(CMBaseObject, CFSTR("assetProperty_ContentByteStream"), v1, &cf) && cf != 0)
      {
        v8 = CMByteStreamGetCMBaseObject();
        v9 = *(void (**)(uint64_t, _QWORD, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v9)
          v9(v8, *MEMORY[0x1E0CA2080], v3);
      }
    }
  }
  if (DerivedStorage[21])
  {
    v10 = CMByteStreamGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
      v11(v10, *MEMORY[0x1E0CA2080], v3);
  }
  if (DerivedStorage[27])
  {
    v12 = CMByteStreamGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v13)
      v13(v12, *MEMORY[0x1E0CA2080], v3);
  }
  CFRelease(v3);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t remakerfamily_updateJoinWritingThreadToNewWorkgroup()
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  void (*v3)(uint64_t, const __CFString *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 394))
  {
    if (*(_BYTE *)(DerivedStorage + 32))
    {
      if (*(_BYTE *)(DerivedStorage + 176))
      {
        FigBaseObject = FigFormatWriterGetFigBaseObject(*(_QWORD *)(DerivedStorage + 184));
        v3 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v3)
          v3(FigBaseObject, CFSTR("JoinWritingThreadToNewWorkgroup"), *MEMORY[0x1E0C9AE50]);
      }
    }
  }
  return 0;
}

uint64_t remakerfamily_setFailureStatusIfError(uint64_t a1, int a2)
{
  uint64_t result;
  _DWORD *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v5 = (_DWORD *)result;
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    if ((*v5 & 0xFFFFFFFE) != 6)
      v5[5] = a2;
    return remakerFamily_SetRemakerState(a1, 6, 0);
  }
  return result;
}

BOOL remakerFamily_PostFailureNotificationIfError(const void *a1, uint64_t a2, int a3, int a4, int a5)
{
  _DWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v11;
  const __CFString *v12;
  CFTypeID v13;
  CFMutableDictionaryRef Mutable;
  NSObject *v15;
  CFTypeID v16;
  uint64_t v17;
  CFIndex Count;
  CFIndex v19;
  CFIndex i;
  CFTypeID v21;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a1)
    return a3 != 0;
  if (*DerivedStorage >= 7u)
  {
    FigSignalErrorAt();
    return a3 != 0;
  }
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = CFGetTypeID(a1);
  if (v11 == FigAssetReaderGetTypeID())
  {
    v12 = CFSTR("AssetReader_Failed");
  }
  else
  {
    v13 = CFGetTypeID(a1);
    if (v13 != FigAssetWriterGetTypeID())
    {
      v12 = CFSTR("Remaker_Failed");
      if (!a3)
        return a3 != 0;
      goto LABEL_12;
    }
    v12 = CFSTR("AssetWriter_Failed");
  }
  if (!a3)
    return a3 != 0;
LABEL_12:
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  remakerfamily_setFailureStatusIfError((uint64_t)a1, a3);
  if (a2 && dword_1EE2A2DD8)
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 == 1)
    remakerFamily_invalidateAllMediaProcessors();
  remakerFamily_safelyPostNotification(a1, a5, (uint64_t)v12, (uint64_t)Mutable, a1);
  v16 = CFGetTypeID(a1);
  if (v16 == FigAssetReaderGetTypeID())
  {
    v17 = CMBaseObjectGetDerivedStorage();
    Count = CFArrayGetCount(*(CFArrayRef *)(v17 + 80));
    if (Count >= 1)
    {
      v19 = Count;
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)(*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 80), i) + 19) + 80))
          FigSemaphoreSignal();
      }
    }
  }
  else
  {
    v21 = CFGetTypeID(a1);
    if (v21 == FigAssetWriterGetTypeID())
      FigSemaphoreSignal();
  }
  if (Mutable)
    CFRelease(Mutable);
  return a3 != 0;
}

uint64_t remakerFamily_SinglePassBossBecameIdle(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage >= 7u)
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 384) = 1;
  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = remakerFamily_HandleNotificationErrorPayload(a2, 0);
  if (!(_DWORD)result)
    return remakerFamily_performLastStepIfComplete(a2);
  return result;
}

uint64_t remakerFamily_HandleNotificationErrorPayload(const void *a1, uint64_t a2)
{
  if (FigCFDictionaryGetInt32IfPresent())
    remakerFamily_PostFailureNotificationIfError(a1, a2, 0, 1, 0);
  return 0;
}

uint64_t remakerFamily_performLastStepIfComplete(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _BYTE *ValueAtIndex;
  char v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DestinationTrackReferenceDictionary;
  CFTypeID v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, CMTime *);
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD);
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  const __CFAllocator *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t SampleBufferProcessor;
  uint64_t v30;
  uint64_t v31;
  uint64_t FigBaseObject;
  unsigned int (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CMFormatDescriptionRef *);
  const AudioStreamBasicDescription *StreamBasicDescription;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, const __CFString *, const __CFAllocator *, os_log_type_t *);
  NSObject *v37;
  CFMutableArrayRef Mutable;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeID v44;
  uint64_t CMBaseObject;
  void (*v46)(uint64_t, const __CFString *, _QWORD, CMTime *);
  const __CFAllocator *v47;
  uint64_t v48;
  CFIndex v49;
  __CFDictionary *v50;
  CFIndex i;
  _DWORD *v52;
  int v53;
  int v54;
  BOOL v55;
  CFNumberRef v56;
  CFNumberRef v57;
  const void *value;
  uint64_t v59;
  void (*v60)(uint64_t, const __CFString *, const void *);
  uint64_t v61;
  uint64_t v62;
  CFTypeID v63;
  CFIndex v64;
  CFIndex v65;
  CFIndex v66;
  uint64_t v67;
  CMTime *v68;
  const void *v69;
  uint64_t v70;
  void (*v71)(uint64_t, const __CFString *, uint64_t, CMFormatDescriptionRef *);
  uint64_t v72;
  const __CFString *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CMFormatDescriptionRef v77;
  uint64_t v78;
  void (*v79)(uint64_t, const __CFString *, CMFormatDescriptionRef);
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, const __CFString *, _QWORD, CMTime *);
  const __CFAllocator *v89;
  CFDictionaryRef v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t, CFDictionaryRef);
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  const void *v97;
  CMFormatDescriptionRef v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, CMFormatDescriptionRef, void *, CFArrayRef *);
  uint64_t v103;
  uint64_t v104;
  CFArrayRef v105;
  uint64_t v106;
  CFArrayRef v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, _QWORD);
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  CFTypeID v112;
  const __CFString *v113;
  const void *v114;
  int v115;
  CFTypeID v116;
  NSObject *v117;
  uint64_t v118;
  CFMutableDictionaryRef v119;
  CFMutableDictionaryRef v120;
  NSObject *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  const char *v125;
  CFTypeID v126;
  uint64_t v127;
  uint64_t v128;
  CFTypeRef v129;
  const __CFAllocator *v130;
  CFArrayRef theArray;
  os_log_type_t type[8];
  CMFormatDescriptionRef desc;
  CMTime cf;
  _DWORD v135[6];
  CMTime v136[5];
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 64);
  if (v4)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 64));
  if (!*(_BYTE *)(v3 + 384))
    goto LABEL_22;
  Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 80));
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 80), v7);
      if (*((_QWORD *)ValueAtIndex + 33))
      {
        if (!ValueAtIndex[280])
          break;
      }
      if (*((_QWORD *)ValueAtIndex + 29) && !ValueAtIndex[256]
        || *((_QWORD *)ValueAtIndex + 36) && !ValueAtIndex[296]
        || *((_QWORD *)ValueAtIndex + 25) && !ValueAtIndex[216]
        || *((_QWORD *)ValueAtIndex + 21) && !ValueAtIndex[184]
        || *((_QWORD *)ValueAtIndex + 46) && !ValueAtIndex[361])
      {
        break;
      }
      if (v6 == ++v7)
        goto LABEL_20;
    }
LABEL_22:
    v9 = 1;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_20:
  v9 = 0;
  if (v4)
LABEL_23:
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 64));
LABEL_24:
  if ((v9 & 1) != 0 || !FigAtomicCompareAndSwap32())
    return 0;
  v10 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2DD8)
  {
    LODWORD(desc) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*(_DWORD *)v10 >= 7u)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_170;
  }
  if (a1)
  {
    v14 = CFGetTypeID(a1);
    if (v14 == FigAssetReaderGetTypeID())
      goto LABEL_210;
  }
  if (!FigAtomicCompareAndSwap32() && dword_1EE2A2DD8)
  {
    LODWORD(desc) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*(_DWORD *)(v10 + 124) & 0x1D) == 1)
  {
    v16 = *(_QWORD *)(v10 + 184);
    cf = *(CMTime *)(v10 + 112);
    v17 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v17)
      goto LABEL_171;
    v136[0] = cf;
    v18 = v17(v16, v136);
    if ((_DWORD)v18)
    {
LABEL_170:
      DestinationTrackReferenceDictionary = v18;
      goto LABEL_180;
    }
  }
  v19 = *(_QWORD *)(v10 + 184);
  v20 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v20)
    goto LABEL_171;
  v128 = v10;
  v21 = v20(v19, 0);
  if ((_DWORD)v21)
  {
    DestinationTrackReferenceDictionary = v21;
    goto LABEL_180;
  }
  v22 = CMBaseObjectGetDerivedStorage();
  v23 = CFArrayGetCount(*(CFArrayRef *)(v22 + 80));
  v129 = a1;
  if (v23 >= 1)
  {
    v24 = v23;
    v25 = 0;
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v130 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v27 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v22 + 80), v25);
      v28 = v27[36];
      if (v28)
      {
        SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(v28);
        if (SampleBufferProcessor)
          break;
      }
LABEL_74:
      if (v24 == ++v25)
        goto LABEL_84;
    }
    v30 = *((unsigned int *)v27 + 75);
    *(_QWORD *)type = 0;
    desc = 0;
    theArray = 0;
    if (!(_DWORD)v30)
      goto LABEL_65;
    v31 = SampleBufferProcessor;
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
    v33 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v33 || v33(FigBaseObject, CFSTR("SampleBufferProcessorProperty_ImprovedOutputFormatDescription"), v26, &desc))
      goto LABEL_65;
    if (!desc)
    {
      Mutable = 0;
LABEL_68:
      if (*(_QWORD *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(_QWORD *)type = 0;
      }
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_74;
    }
    if (CMFormatDescriptionGetMediaType(desc) != 1936684398)
      goto LABEL_65;
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    if (!StreamBasicDescription)
      goto LABEL_65;
    if (StreamBasicDescription->mFormatID != 1634754915)
      goto LABEL_65;
    v35 = FigSampleBufferProcessorGetFigBaseObject(v31);
    v36 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v36
      || v36(v35, CFSTR("SampleBufferProcessor_OutputFormatDescription"), v26, type)
      || FigCFEqual())
    {
      goto LABEL_65;
    }
    if (dword_1EE2A2DD8)
    {
      v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v26 = v130;
    }
    if (remakerFamily_CopyFormatWriterTrackProperty((uint64_t)a1, v30, CFSTR("FormatDescriptionArray"), (uint64_t)v26, (uint64_t)&theArray)|| !theArray)
    {
LABEL_65:
      Mutable = 0;
      goto LABEL_66;
    }
    if (CFArrayGetCount(theArray) == 1)
    {
      CFArrayGetValueAtIndex(theArray, 0);
      if (FigCFEqual())
      {
        Mutable = CFArrayCreateMutable(v26, 1, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(Mutable, desc);
        if (remakerFamily_SetFormatWriterTrackProperty((uint64_t)a1, v30, CFSTR("ReplacementFormatDescriptionArray"), (uint64_t)Mutable))
        {
          v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v129;
LABEL_82:
          v26 = v130;
          goto LABEL_66;
        }
        if (dword_1EE2A2DD8)
        {
          v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_82;
        }
LABEL_66:
        if (desc)
        {
          CFRelease(desc);
          desc = 0;
        }
        goto LABEL_68;
      }
      if (dword_1EE2A2DD8)
      {
        v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        Mutable = 0;
        goto LABEL_82;
      }
    }
    Mutable = 0;
    goto LABEL_66;
  }
LABEL_84:
  v42 = CMBaseObjectGetDerivedStorage();
  v136[0].value = 0;
  cf.value = 0;
  v10 = v128;
  if (a1)
  {
    v43 = v42;
    v44 = CFGetTypeID(a1);
    if (v44 != FigRemakerGetTypeID()
      || (CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v43 + 72)),
          (v46 = *(void (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48)) == 0))
    {
      DestinationTrackReferenceDictionary = 0;
      v50 = 0;
      goto LABEL_108;
    }
    v47 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v46(CMBaseObject, CFSTR("assetProperty_TrackReferences"), *MEMORY[0x1E0C9AE00], v136);
    if (v136[0].value)
    {
      v48 = CMBaseObjectGetDerivedStorage();
      v49 = CFArrayGetCount(*(CFArrayRef *)(v48 + 80));
      v50 = CFDictionaryCreateMutable(v47, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v50)
      {
        if (v49 >= 1)
        {
          for (i = 0; i != v49; ++i)
          {
            v52 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v48 + 80), i);
            v53 = v52[7];
            LODWORD(desc) = v53;
            v54 = v52[75];
            if (!v54)
              v54 = v52[76];
            *(_DWORD *)type = v54;
            if (v53)
              v55 = v54 == 0;
            else
              v55 = 1;
            if (!v55)
            {
              v56 = CFNumberCreate(v47, kCFNumberSInt32Type, &desc);
              v57 = CFNumberCreate(v47, kCFNumberSInt32Type, type);
              CFDictionaryAddValue(v50, v56, v57);
              if (v57)
                CFRelease(v57);
              if (v56)
                CFRelease(v56);
            }
          }
        }
      }
      else
      {
        v127 = FigSignalErrorAt();
        if ((_DWORD)v127)
        {
          DestinationTrackReferenceDictionary = v127;
          v50 = 0;
          a1 = v129;
          goto LABEL_108;
        }
      }
      DestinationTrackReferenceDictionary = remakerFamily_createDestinationTrackReferenceDictionary((uint64_t)v50, (const __CFDictionary *)v136[0].value, (CFMutableDictionaryRef *)&cf);
      value = (const void *)cf.value;
      if (!(_DWORD)DestinationTrackReferenceDictionary)
      {
        v59 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v43 + 184));
        v60 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
        if (v60)
          v60(v59, CFSTR("TrackReference"), value);
      }
      a1 = v129;
      if (value)
        CFRelease(value);
LABEL_108:
      if (v136[0].value)
        CFRelease((CFTypeRef)v136[0].value);
      if (v50)
        CFRelease(v50);
      if ((_DWORD)DestinationTrackReferenceDictionary)
        goto LABEL_180;
    }
  }
  v61 = CMBaseObjectGetDerivedStorage();
  if (!a1)
    goto LABEL_134;
  v62 = v61;
  v63 = CFGetTypeID(v129);
  if (v63 != FigRemakerGetTypeID())
    goto LABEL_134;
  v64 = CFArrayGetCount(*(CFArrayRef *)(v62 + 80));
  if (v64 < 1)
    goto LABEL_134;
  v65 = v64;
  v66 = 0;
  v67 = *MEMORY[0x1E0C9AE00];
  v68 = (CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v69 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v62 + 80), v66);
    if (*((_DWORD *)v69 + 8) == 1936684398)
      break;
LABEL_129:
    if (v65 == ++v66)
      goto LABEL_134;
  }
  desc = 0;
  if (*((_BYTE *)v69 + 48))
  {
    v136[0] = *(CMTime *)(v62 + 88);
    cf = *v68;
    if (!CMTimeCompare(v136, &cf) && (*(_DWORD *)(v62 + 124) & 0x1D) != 1)
    {
      v70 = FigAssetGetCMBaseObject(*(_QWORD *)(v62 + 72));
      v71 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (v71)
      {
        v72 = v70;
        v73 = CFSTR("iTunesGaplessInfo");
LABEL_127:
        v71(v72, v73, v67, &desc);
      }
    }
  }
  else
  {
    v74 = *((_QWORD *)v69 + 36);
    if (v74)
    {
      v75 = FigMediaProcessorGetSampleBufferProcessor(v74);
      if (v75)
      {
        v76 = FigSampleBufferProcessorGetFigBaseObject(v75);
        v71 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v71)
        {
          v72 = v76;
          v73 = CFSTR("SampleBufferProcessor_iTunesGaplessInfo");
          goto LABEL_127;
        }
      }
    }
  }
  v77 = desc;
  if (!desc)
    goto LABEL_129;
  v78 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v62 + 184));
  v79 = *(void (**)(uint64_t, const __CFString *, CMFormatDescriptionRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
  if (v79)
    v79(v78, CFSTR("iTunesGaplessInfo"), v77);
  CFRelease(desc);
LABEL_134:
  a1 = v129;
  remakerFamily_transferMetadata(v129);
  v10 = v128;
  if (!*(_BYTE *)(v128 + 240))
  {
    v108 = *(_QWORD *)(v128 + 184);
    v109 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v109)
      goto LABEL_171;
    v18 = v109(v108, 0);
    if (!(_DWORD)v18)
    {
      v110 = *(_QWORD *)(v128 + 336);
      if (v110)
      {
        v111 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v111)
        {
          v18 = v111(v110);
          goto LABEL_170;
        }
LABEL_171:
        DestinationTrackReferenceDictionary = 4294954514;
        goto LABEL_180;
      }
LABEL_210:
      DestinationTrackReferenceDictionary = 0;
      goto LABEL_180;
    }
    goto LABEL_170;
  }
  v80 = *(_QWORD *)(v128 + 336);
  if (!v80)
    goto LABEL_139;
  v81 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v81)
    goto LABEL_171;
  v18 = v81(v80);
  if ((_DWORD)v18)
    goto LABEL_170;
  v18 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v18)
    goto LABEL_170;
LABEL_139:
  v82 = CMBaseObjectGetDerivedStorage();
  v136[0].value = 0;
  desc = 0;
  cf.value = 0;
  *(_QWORD *)type = 0;
  if (*(_DWORD *)v82 >= 7u)
  {
    v86 = FigSignalErrorAt();
    goto LABEL_223;
  }
  v83 = v82;
  if (!*(_BYTE *)(v82 + 241))
    goto LABEL_143;
  v84 = *(_QWORD *)(v82 + 184);
  v85 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v85)
    goto LABEL_172;
  v86 = v85(v84, 0);
  if ((_DWORD)v86)
  {
LABEL_223:
    DestinationTrackReferenceDictionary = v86;
    v99 = 0;
    v90 = 0;
    goto LABEL_175;
  }
LABEL_143:
  v87 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v83 + 184));
  v88 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v88)
  {
LABEL_172:
    v99 = 0;
    v90 = 0;
LABEL_174:
    DestinationTrackReferenceDictionary = 4294954514;
    goto LABEL_175;
  }
  v89 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v86 = v88(v87, CFSTR("HeaderByteCount"), *MEMORY[0x1E0C9AE00], v136);
  if ((_DWORD)v86)
    goto LABEL_223;
  v90 = CFDictionaryCreate(v89, (const void **)kFigFormatWriterWriteHeaderOption_ByteOffsetToAddToAllSampleOffsets, (const void **)v136, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v90)
  {
    v94 = FigSignalErrorAt();
    goto LABEL_227;
  }
  v91 = *(_QWORD *)(v83 + 184);
  v92 = *(_QWORD *)(v83 + 168);
  v93 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v93)
  {
LABEL_173:
    v99 = 0;
    goto LABEL_174;
  }
  v94 = v93(v91, v92, v90);
  if ((_DWORD)v94)
  {
LABEL_227:
    DestinationTrackReferenceDictionary = v94;
    v99 = 0;
    goto LABEL_175;
  }
  v95 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v83 + 184));
  v96 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v96)
    goto LABEL_173;
  DestinationTrackReferenceDictionary = v96(v95, CFSTR("MediaDataLocation"), v89, &cf);
  v97 = (const void *)cf.value;
  if ((_DWORD)DestinationTrackReferenceDictionary)
  {
    v99 = 0;
  }
  else
  {
    FigCFArrayGetInt64AtIndex();
    FigCFArrayGetInt64AtIndex();
    v98 = desc;
    theArray = 0;
    v99 = malloc_type_malloc(0x20000uLL, 0x8D86EC2BuLL);
    if (!v99)
      goto LABEL_224;
    v100 = *(_QWORD *)type;
    if (*(uint64_t *)type < 1)
    {
LABEL_213:
      DestinationTrackReferenceDictionary = 0;
    }
    else
    {
      while (*(_DWORD *)v83 < 7u)
      {
        v101 = *(_QWORD *)(v83 + 216);
        v102 = *(uint64_t (**)(uint64_t, uint64_t, CMFormatDescriptionRef, void *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v102)
        {
          DestinationTrackReferenceDictionary = 4294954514;
          goto LABEL_214;
        }
        if (v100 >= 0x20000)
          v103 = 0x20000;
        else
          v103 = v100;
        v104 = v102(v101, v103, v98, v99, &theArray);
        if ((_DWORD)v104)
        {
          DestinationTrackReferenceDictionary = v104;
          if ((_DWORD)v104 != -12873)
            goto LABEL_214;
          goto LABEL_213;
        }
        v105 = theArray;
        if (theArray)
        {
          while (1)
          {
            v106 = CMByteStreamAppend();
            if ((_DWORD)v106)
              goto LABEL_225;
            if (!v105)
            {
              v107 = theArray;
              goto LABEL_163;
            }
          }
        }
        v107 = 0;
LABEL_163:
        v98 = (CMFormatDescriptionRef)((char *)v98 + (_QWORD)v107);
        v100 = *(_QWORD *)type - (_QWORD)v107;
        *(_QWORD *)type = v100;
        if (v100 <= 0)
          goto LABEL_213;
      }
LABEL_224:
      v106 = FigSignalErrorAt();
LABEL_225:
      DestinationTrackReferenceDictionary = v106;
    }
LABEL_214:
    v97 = (const void *)cf.value;
  }
  a1 = v129;
  if (v97)
    CFRelease(v97);
LABEL_175:
  if (v136[0].value)
    CFRelease((CFTypeRef)v136[0].value);
  if (v90)
    CFRelease(v90);
  free(v99);
LABEL_180:
  remakerFamily_registerPowerLogEvent(a1, CFSTR("Export_Finished"));
  remakerFamily_invalidateAllMediaProcessors();
  if (a1)
  {
    v112 = CFGetTypeID(a1);
    if (v112 == FigRemakerGetTypeID())
    {
      remakerFamily_PostFailureNotificationIfError(a1, 0, DestinationTrackReferenceDictionary, 0, 0);
      if (!(_DWORD)DestinationTrackReferenceDictionary)
      {
        v113 = CFSTR("Remaker_Completed");
        v114 = a1;
        v115 = 0;
        goto LABEL_184;
      }
    }
    else
    {
      v116 = CFGetTypeID(a1);
      if (v116 == FigAssetWriterGetTypeID())
      {
        v117 = *(NSObject **)(v10 + 56);
        if (dispatch_get_current_queue() != v117)
          dispatch_sync_f(v117, 0, (dispatch_function_t)remakerFamily_NoOp);
        remakerfamily_setFailureStatusIfError((uint64_t)a1, DestinationTrackReferenceDictionary);
        if ((_DWORD)DestinationTrackReferenceDictionary != -12785)
        {
          if ((_DWORD)DestinationTrackReferenceDictionary)
          {
            remakerFamily_PostFailureNotificationIfError(a1, 0, DestinationTrackReferenceDictionary, 0, 1);
          }
          else if (*(_BYTE *)(v10 + 292))
          {
            v118 = CMBaseObjectGetDerivedStorage();
            v119 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v119)
            {
              v120 = v119;
              if (!FigCFDictionarySetInt32())
                (*(void (**)(_QWORD, CFMutableDictionaryRef, _QWORD))(v118 + 320))(0, v120, *(_QWORD *)(v118 + 328));
              CFRelease(v120);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            v113 = CFSTR("AssetWriter_Completed");
            v114 = a1;
            v115 = 1;
LABEL_184:
            remakerFamily_safelyPostNotification(v114, v115, (uint64_t)v113, 0, a1);
          }
        }
      }
    }
  }
  FigAtomicCompareAndSwap32();
  if (dword_1EE2A2DD8)
  {
    LODWORD(desc) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v122 = desc;
    if (os_log_type_enabled(v121, type[0]))
      v123 = v122;
    else
      v123 = v122 & 0xFFFFFFFE;
    if (v123)
    {
      v124 = *(_DWORD *)v10 - 1;
      if (v124 > 7)
        v125 = "bad";
      else
        v125 = off_1E2F8DF50[v124];
      LODWORD(cf.value) = 136315906;
      *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"remakerFamily_handleLastStep";
      LOWORD(cf.flags) = 2048;
      *(_QWORD *)((char *)&cf.flags + 2) = a1;
      HIWORD(cf.epoch) = 1024;
      v135[0] = DestinationTrackReferenceDictionary;
      LOWORD(v135[1]) = 2082;
      *(_QWORD *)((char *)&v135[1] + 2) = v125;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    v126 = CFGetTypeID(a1);
    if (v126 == FigAssetWriterGetTypeID())
      FigSemaphoreSignal();
  }
  return DestinationTrackReferenceDictionary;
}

void remakerFamily_MultiPassBossBecameIdle(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _DWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a2 + 432) = 1;
      if (dword_1EE2A2DD8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (remakerFamily_HandleNotificationErrorPayload(v3, a2))
      {
        v6 = *(NSObject **)(a2 + 416);
        if (v6)
          dispatch_semaphore_signal(v6);
      }
      else
      {
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      }
    }
    CFRelease(v3);
  }
}

uint64_t remakerFamily_startNextSegmentIfMultiPassComplete(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  char v6;
  _QWORD *ValueAtIndex;
  _QWORD *v8;
  uint64_t v9;
  opaqueCMBufferQueue *v10;
  const void *v11;
  _DWORD *DerivedStorage;
  const __CFArray *v13;
  const __CFArray *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t Segment;
  uint64_t v18;
  const __CFArray *v19;
  NSObject *v20;
  opaqueCMBufferQueue *v21;
  CFArrayRef theArray;
  _OWORD v24[3];

  theArray = 0;
  if (!*(_BYTE *)(a1 + 360))
  {
    v2 = FigSignalErrorAt();
    goto LABEL_38;
  }
  v1 = a1;
  v2 = remakerFamily_createRelatedTrackArray((_DWORD *)a1, &theArray);
  if ((_DWORD)v2)
  {
LABEL_38:
    v18 = v2;
    goto LABEL_50;
  }
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    v6 = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      v8 = ValueAtIndex;
      if (ValueAtIndex[53] && !*((_BYTE *)ValueAtIndex + 432))
        v6 = 0;
      if (ValueAtIndex[7] && !*((_BYTE *)ValueAtIndex + 64))
        v6 = 0;
      if (ValueAtIndex[25] && !*((_BYTE *)ValueAtIndex + 216))
        v6 = 0;
      if (ValueAtIndex[21] && !*((_BYTE *)ValueAtIndex + 184))
        v6 = 0;
      v9 = ValueAtIndex[19];
      v10 = *(opaqueCMBufferQueue **)(v9 + 72);
      if (v10)
      {
        if (!CMBufferQueueIsEmpty(v10))
          v6 = 0;
        v9 = v8[19];
      }
      if (*(_QWORD *)(v9 + 112) && !*(_BYTE *)(v9 + 200))
        v6 = 0;
      if (v8[52])
        v1 = (uint64_t)v8;
      ++v5;
    }
    while (v4 != v5);
    if (!v6)
    {
      v18 = 0;
      goto LABEL_50;
    }
  }
  v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!v11)
  {
    Segment = FigSignalErrorAt();
    goto LABEL_35;
  }
  if (*DerivedStorage >= 7u)
  {
    FigSignalErrorAt();
  }
  else
  {
    v13 = *(const __CFArray **)(v1 + 408);
    if (v13)
    {
      if (CFArrayGetCount(v13) >= 1)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v1 + 408), 0);
        v14 = *(const __CFArray **)(v1 + 408);
        if (v14)
        {
          if (CFArrayGetCount(v14) >= 1)
          {
            v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 408), 0);
            v16 = v15[1];
            v24[0] = *v15;
            v24[1] = v16;
            v24[2] = v15[2];
            Segment = remakerFamily_resetSourceRenderersForNextSegment(v1, (uint64_t)v24, 0);
LABEL_35:
            v18 = Segment;
            goto LABEL_42;
          }
        }
      }
    }
  }
  v18 = 0;
LABEL_42:
  v19 = *(const __CFArray **)(v1 + 408);
  if (!v19 || !CFArrayGetCount(v19))
  {
    v20 = *(NSObject **)(v1 + 416);
    if (v20)
      dispatch_semaphore_signal(v20);
    v21 = *(opaqueCMBufferQueue **)(*(_QWORD *)(v1 + 152) + 72);
    if (v21)
      CMBufferQueueMarkEndOfData(v21);
  }
  if (v11)
    CFRelease(v11);
LABEL_50:
  if (theArray)
    CFRelease(theArray);
  return v18;
}

uint64_t remakerFamily_createVideoPixelTransferProperties(int a1, CFDictionaryRef theDict, int a3, __CFDictionary **a4)
{
  const __CFAllocator *v7;
  __CFDictionary *MutableCopy;
  const void *v9;
  __CFDictionary *Value;
  CFMutableDictionaryRef Mutable;
  CFTypeID v12;
  uint64_t v13;

  if (!theDict)
  {
    MutableCopy = 0;
LABEL_13:
    v13 = 0;
    *a4 = MutableCopy;
    return v13;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  CFDictionaryRemoveValue(MutableCopy, CFSTR("MatrixHandling"));
  v9 = (const void *)*MEMORY[0x1E0CED7C8];
  Value = (__CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED7C8]);
  if (!Value)
    goto LABEL_13;
  Mutable = Value;
  v12 = CFGetTypeID(Value);
  if (v12 != CFDictionaryGetTypeID())
    goto LABEL_13;
  if (a3 != 270 && a3 != 90)
  {
    CFRetain(Mutable);
    CFDictionarySetValue(MutableCopy, v9, Mutable);
LABEL_12:
    CFRelease(Mutable);
    goto LABEL_13;
  }
  if (FigCFDictionaryGetInt32IfPresent() && FigCFDictionaryGetInt32IfPresent())
  {
    Mutable = CFDictionaryCreateMutable(v7, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CFDictionarySetValue(MutableCopy, v9, Mutable);
    if (!Mutable)
      goto LABEL_13;
    goto LABEL_12;
  }
  v13 = FigSignalErrorAt();
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v13;
}

void remakerFamily_startNextPassWork(uint64_t a1)
{
  const void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v4;
  int started;
  const void *v6;
  _DWORD *v7;
  _DWORD *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t (*)(uint64_t), uint64_t, os_log_type_t *);
  OpaqueVTFrameSilo *v14;
  int v15;
  _DWORD *DerivedStorage;
  CFTypeID v17;
  uint64_t TypeID;
  NSObject *v19;
  const __CFArray *v20;
  OpaqueVTCompressionSession *VTCompressionSession;
  int value_low;
  int TimeRangesForNextPass;
  OpaqueVTCompressionSession *v24;
  uint64_t v25;
  const __CFArray *v26;
  CFIndex Count;
  CFIndex v28;
  CFIndex v29;
  const void *ValueAtIndex;
  opaqueCMBufferQueue *v31;
  CFTypeID v32;
  const void *v33;
  NSObject *v34;
  unsigned int value;
  unsigned int v36;
  const __CFAllocator *v37;
  __CFDictionary *Mutable;
  __CFDictionary *v39;
  const void **v40;
  const __CFArray *v41;
  CFDataRef v42;
  CMTime end;
  CMTime type;
  CMTime v45;
  os_log_type_t v46[8];
  CMTime v47;
  CMTimeRange timeRange;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EE2A2DD8)
  {
    LODWORD(v45.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v2)
  {
    remakerFamily_PostFailureNotificationIfError(0, a1, 0, 1, 0);
    goto LABEL_73;
  }
  if (*(_BYTE *)(a1 + 433))
    goto LABEL_5;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v17 = CFGetTypeID(v2);
  TypeID = FigRemakerGetTypeID();
  LOBYTE(type.value) = 1;
  if (v17 == TypeID)
  {
    v19 = *(NSObject **)(a1 + 416);
    if (v19)
      dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
    v20 = *(const __CFArray **)(a1 + 408);
    if (v20)
    {
      if (CFArrayGetCount(v20))
        goto LABEL_81;
    }
  }
  if (*DerivedStorage >= 7u)
  {
LABEL_81:
    TimeRangesForNextPass = FigSignalErrorAt();
    goto LABEL_82;
  }
  VTCompressionSession = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(a1 + 288));
  v15 = VTCompressionSessionEndPass(VTCompressionSession, (Boolean *)&type, 0);
  value_low = LOBYTE(type.value);
  if (!v15 && LOBYTE(type.value))
  {
    v47.value = 0;
    v45.value = 0;
    TimeRangesForNextPass = VTCompressionSessionGetTimeRangesForNextPass(VTCompressionSession, &v47.value, (const CMTimeRange **)&v45);
    if (!TimeRangesForNextPass)
    {
      ++*(_DWORD *)(a1 + 436);
      TimeRangesForNextPass = remakerFamily_resetTrackMultiPassTimeRanges(a1, v45.value, v47.value);
      if (!TimeRangesForNextPass)
      {
        if (v17 != TypeID
          || (TimeRangesForNextPass = VTFrameSiloSetTimeRangesForNextPass(*(VTFrameSiloRef *)(a1 + 368), v47.value, (const CMTimeRange *)v45.value)) == 0&& (v24 = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(a1 + 288)), (TimeRangesForNextPass = VTCompressionSessionBeginPass(v24, 0, 0)) == 0)&& (timeRange = *(CMTimeRange *)v45.value, (TimeRangesForNextPass = remakerFamily_resetSourceRenderersForNextSegment(a1, (uint64_t)&timeRange, 1)) == 0))
        {
          *(_BYTE *)(a1 + 296) = 0;
          TimeRangesForNextPass = FigMediaProcessorReset(*(_QWORD *)(a1 + 288), 1);
          if (!TimeRangesForNextPass)
          {
            v25 = *(_QWORD *)(a1 + 232);
            if (!v25)
            {
LABEL_37:
              v31 = *(opaqueCMBufferQueue **)(*(_QWORD *)(a1 + 160) + 32);
              if (v31)
                CMBufferQueueReset(v31);
              v15 = 0;
              goto LABEL_40;
            }
            *(_BYTE *)(a1 + 256) = 0;
            TimeRangesForNextPass = FigMediaProcessorReset(v25, 1);
            if (!TimeRangesForNextPass)
            {
              if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 160))
              {
                v26 = *(const __CFArray **)(a1 + 240);
                if (v26)
                {
                  Count = CFArrayGetCount(v26);
                  if (Count >= 2)
                  {
                    v28 = Count;
                    v29 = 1;
                    while (1)
                    {
                      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), v29);
                      started = FigMediaProcessorReset((uint64_t)ValueAtIndex, 1);
                      if (started)
                        goto LABEL_74;
                      if (v28 == ++v29)
                        goto LABEL_37;
                    }
                  }
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_82:
    v15 = TimeRangesForNextPass;
LABEL_40:
    value_low = LOBYTE(type.value);
  }
  if (v15)
    goto LABEL_72;
  if (value_low)
  {
    v4 = 0;
    goto LABEL_47;
  }
LABEL_5:
  v4 = 1;
  if (*(_BYTE *)(a1 + 362))
  {
LABEL_47:
    if (*(_BYTE *)(a1 + 433))
      goto LABEL_71;
    v32 = CFGetTypeID(v2);
    if (v32 != FigAssetWriterGetTypeID())
      goto LABEL_71;
    v45.value = 0;
    type.value = 0;
    v33 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (dword_1EE2A2DD8)
    {
      LODWORD(end.value) = 0;
      v46[0] = OS_LOG_TYPE_DEFAULT;
      v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = end.value;
      if (os_log_type_enabled(v34, v46[0]))
        v36 = value;
      else
        v36 = value & 0xFFFFFFFE;
      if (v36)
      {
        LODWORD(v47.value) = 136315394;
        *(CMTimeValue *)((char *)&v47.value + 4) = (CMTimeValue)"assetWriter_postPassFinishedNotification";
        LOWORD(v47.flags) = 2048;
        *(_QWORD *)((char *)&v47.flags + 2) = v33;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!v33)
    {
LABEL_70:
      free((void *)v45.value);
LABEL_71:
      v15 = 0;
      goto LABEL_72;
    }
    v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = Mutable;
    v40 = (const void **)MEMORY[0x1E0C9AE40];
    if (!v4)
      v40 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("AssetWriter_FurtherPassesRequested"), *v40);
    FigCFDictionarySetInt32();
    if ((v4 & 1) != 0 || (v41 = *(const __CFArray **)(a1 + 408)) == 0 || CFArrayGetCount(v41) < 1)
    {
      v42 = 0;
    }
    else
    {
      if (remakerFamily_createTimeRangesCArray(*(CFArrayRef *)(a1 + 408), &type.value, &v45))
      {
        v42 = 0;
        goto LABEL_66;
      }
      v42 = CFDataCreate(v37, (const UInt8 *)v45.value, 48 * type.value);
      CFDictionarySetValue(v39, CFSTR("AssetWriter_PassTimeRanges"), v42);
    }
    remakerFamily_safelyPostNotification(v33, 0, (uint64_t)CFSTR("AssetWriter_WriterTrackIDPassFinished"), (uint64_t)v39, v33);
LABEL_66:
    CFRelease(v33);
    if (v39)
      CFRelease(v39);
    if (v42)
      CFRelease(v42);
    goto LABEL_70;
  }
  *(_BYTE *)(a1 + 362) = 1;
  started = remakerFamily_startAllSinglePassTracks((uint64_t)v2);
  if (started)
  {
LABEL_74:
    v15 = started;
    goto LABEL_72;
  }
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (_DWORD *)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v46 = 0;
  if (!v6)
  {
    v15 = FigSignalErrorAt();
    if (v15)
      goto LABEL_72;
    goto LABEL_46;
  }
  v8 = v7;
  if (*v7 >= 7u)
  {
    v11 = FigSignalErrorAt();
LABEL_80:
    v15 = v11;
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 384) = FigSemaphoreCreate();
  v9 = (const void *)*((_QWORD *)v8 + 23);
  v10 = *(unsigned int *)(a1 + 300);
  CMTimeMake(&v47, 2, 1);
  CMTimeMake(&v45, 1, 1);
  v11 = FigSampleBufferConsumerCreateForFormatWriter(v9, v10, (uint64_t)&v47, (__int128 *)&v45.value, (_QWORD *)(a1 + 392));
  if (v11)
    goto LABEL_80;
  v12 = *(_QWORD *)(a1 + 392);
  v13 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v13)
  {
    v15 = -12782;
    goto LABEL_45;
  }
  v11 = v13(v12, remakerFamily_frameSiloLowWaterTrigger, a1, v46);
  if (v11)
    goto LABEL_80;
  v14 = *(OpaqueVTFrameSilo **)(a1 + 368);
  type = *(CMTime *)(v8 + 22);
  end = *(CMTime *)(v8 + 28);
  CMTimeRangeFromTimeToTime(&timeRange, &type, &end);
  v15 = VTFrameSiloCallFunctionForEachSampleBuffer(v14, &timeRange, (void *)a1, (OSStatus (__cdecl *)(void *, CMSampleBufferRef))remakerFamily_addFrameFromSiloToFormatWriter);
  if (!v15)
  {
    remakerFamily_markFormatWriterTrackWithEOD(a1);
    *(_BYTE *)(a1 + 361) = 1;
    remakerFamily_performLastStepIfComplete(v6);
  }
LABEL_45:
  CFRelease(v6);
  if (!v15)
  {
LABEL_46:
    v4 = 1;
    goto LABEL_47;
  }
LABEL_72:
  remakerFamily_PostFailureNotificationIfError(v2, a1, v15, 1, 0);
  CFRelease(v2);
LABEL_73:
  CFRelease((CFTypeRef)a1);
}

void remakerFamily_markFormatWriterTrackWithEOD(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, const __CFString *, _QWORD, CMBufferQueueRef *);
  CMBufferQueueRef queue;

  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  queue = 0;
  if (v2)
  {
    v4 = *(_QWORD *)(DerivedStorage + 184);
    v5 = *(unsigned int *)(a1 + 300);
    v6 = *(void (**)(uint64_t, uint64_t, const __CFString *, _QWORD, CMBufferQueueRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 16);
    if (v6)
    {
      v6(v4, v5, CFSTR("SourceSampleBufferQueue"), *MEMORY[0x1E0C9AE00], &queue);
      if (queue)
      {
        CMBufferQueueMarkEndOfData(queue);
        FigBufferQueueRelease();
      }
    }
    CFRelease(v2);
  }
}

void remakerFamily_VideoCompositionProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _DWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_BYTE *)(a2 + 184) = 1;
      if (dword_1EE2A2DD8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(a2 + 360))
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      remakerFamily_performLastStepIfComplete(v3);
    }
    CFRelease(v3);
  }
}

void remakerFamily_VideoCompositionProcessorErrorOccurred(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  *(_BYTE *)(a2 + 184) = 1;
  remakerFamily_HandleNotificationErrorPayload(v3, a2);
  if (v3)
    CFRelease(v3);
}

uint64_t remakerFamily_checkClientHasAudioEncoderAccess(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int v4;
  BOOL v5;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  CFTypeID v9;
  uint64_t Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 1;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = v4 == 1634754915 || v4 == 1902211171;
  if (!v5 && v4 != 1667330147)
    return 1;
  v7 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(*(SecTaskRef *)(DerivedStorage + 440), CFSTR("com.apple.coreaudio.allow-apac-codec"), 0);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = CFGetTypeID(v7);
  if (v9 == CFBooleanGetTypeID())
    Value = CFBooleanGetValue(v8);
  else
    Value = 0;
  CFRelease(v8);
  return Value;
}

uint64_t remakerFamily_setFormatWriterTrackProperties(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  CFNumberRef v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, const __CFString *, CFNumberRef);
  CFNumberRef v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, const __CFString *, CFNumberRef);
  int v12;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0x100000;
  valuePtr = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v6 = *(_QWORD *)(DerivedStorage + 184);
  v7 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 24);
  if (v7)
    v7(v6, a2, CFSTR("PreferredChunkAlignment"), v5);
  v8 = CFNumberCreate(v4, kCFNumberIntType, &v12);
  v9 = *(_QWORD *)(DerivedStorage + 184);
  v10 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 24);
  if (v10)
    v10(v9, a2, CFSTR("PreferredChunkSize"), v8);
  if (v5)
    CFRelease(v5);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t remakerFamily_getTrackRotationAngle(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, const void **);
  uint64_t RotationAngleAndFlipsFromCGAffineTransform;
  double v9[6];
  const void *v10;

  v10 = 0;
  CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v6)
    return 0;
  v6(CMBaseObject, CFSTR("PreferredTransform"), *MEMORY[0x1E0C9AE00], &v10);
  if (!v10)
    return 0;
  FigGetCGAffineTransformFrom3x3MatrixArray(v10, (uint64_t)v9);
  RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(v9, a2, a3);
  CFRelease(v10);
  return RotationAngleAndFlipsFromCGAffineTransform;
}

CFDictionaryRef remakerFamily_IsRasterFormatDescription(const opaqueCMFormatDescription *a1)
{
  FourCharCode MediaSubType;
  CFDictionaryRef result;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  result = CVPixelFormatDescriptionCreateWithPixelFormatType(0, MediaSubType);
  if (result)
  {
    CFRelease(result);
    return (CFDictionaryRef)1;
  }
  return result;
}

uint64_t remakerFamily_finishVideoCompositionChannel(const void *a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, const __CFString *a5, const void *a6, const void *a7, int a8, const __CFArray *a9, uint64_t a10, const void *a11, __int128 *a12, int a13, int a14, int a15, const void *a16, CFDictionaryRef theDict, const __CFDictionary *a18, uint64_t a19, void *a20)
{
  uint64_t DerivedStorage;
  uint64_t v29;
  int v30;
  CFIndex v31;
  uint64_t v32;
  __CFString *v33;
  CFTypeRef v34;
  CFAllocatorRef v35;
  uint64_t v36;
  uint64_t v37;
  CFAllocatorRef v38;
  CFAllocatorRef v39;
  const __CFAllocator *v40;
  int v41;
  CFNumberRef v42;
  uint64_t FigBaseObject;
  void (*v44)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v45;
  void (*v46)(uint64_t, const __CFString *, _QWORD);
  CFTypeRef v47;
  CFAllocatorRef v48;
  uint64_t v49;
  CFTypeRef v50;
  void (*v51)(CFTypeRef, uint64_t);
  CFTypeRef v52;
  void (*v53)(CFTypeRef, float);
  CFAllocatorRef v54;
  int v55;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v59;
  uint64_t *v60;
  const __CFAllocator *v61;
  CFTypeRef v62;
  void *v63;
  uint64_t v64;
  CFNumberRef v65;
  uint64_t v66;
  uint64_t v67;
  CFAllocatorRef v68;
  CFTypeRef v69;
  uint64_t (*v70)(CFTypeRef, uint64_t, _QWORD);
  uint64_t Channel;
  CFIndex v72;
  uint64_t *v73;
  const __CFArray *v74;
  CFIndex v75;
  const void *ValueAtIndex;
  CFTypeID v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v81;
  uint64_t (*v82)(CFTypeRef, _QWORD, int *);
  CFTypeID v83;
  uint64_t v84;
  uint64_t v85;
  CFAllocatorRef v86;
  CFTypeRef v87;
  CMTime *HighWaterLevel;
  uint64_t v89;
  const __CFAllocator *v90;
  uint64_t v91;
  const CMBufferCallbacks *CallbacksForSampleBuffersSortedByOutputPTS;
  uint64_t v93;
  intptr_t *v94;
  __CFDictionary *MutableCopy;
  int v96;
  uint64_t VideoPixelTransferProperties;
  uint64_t v98;
  __int128 v99;
  uint64_t *v100;
  uint64_t v101;
  intptr_t *v102;
  intptr_t v103;
  unsigned int v105;
  CFTypeID v106;
  uint64_t TypeID;
  CFTypeID v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  const void *v112;
  const __CFNumber *v113;
  const __CFAllocator *allocator;
  int v115;
  intptr_t *v116;
  const __CFArray *v117;
  CFArrayRef theArray;
  CFIndex Count;
  CFTypeRef v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[24];
  _BYTE v127[24];
  CMTime v128;
  CMTime v129;
  void *v130[2];
  uint64_t v131;
  CMBufferQueueRef queueOut;
  unint64_t v133;
  int valuePtr;
  CFTypeRef cf1;
  CFTypeRef v136;
  CFTypeRef v137;
  CFTypeRef v138;
  CFTypeRef v139;
  CFTypeRef v140;
  CFTypeRef cf;
  __int128 v142;
  _BYTE v143[32];
  __int128 v144;
  _BYTE v145[32];
  const void *v146;
  CFTypeRef v147;
  int v148;
  CFTypeRef v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *value;
  void *v155[3];
  CGSize v156;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v149 = 0;
  v148 = 1986618469;
  v147 = 0;
  v146 = 0;
  v142 = *MEMORY[0x1E0CA2E68];
  v29 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&v143[8] = v142;
  *(_QWORD *)v143 = v29;
  *(_QWORD *)&v143[24] = v29;
  v144 = v142;
  *(_QWORD *)v145 = v29;
  *(_QWORD *)&v145[24] = v29;
  *(_OWORD *)&v145[8] = v142;
  v140 = 0;
  cf = 0;
  v138 = 0;
  v139 = 0;
  v137 = 0;
  cf1 = 0;
  if (*(_BYTE *)(DerivedStorage + 32))
    v30 = 30;
  else
    v30 = 31;
  valuePtr = v30;
  queueOut = 0;
  v133 = 0;
  v117 = a3;
  theArray = a4;
  Count = CFArrayGetCount(a3);
  v111 = a8;
  if (a4)
    v31 = CFArrayGetCount(a4);
  else
    v31 = 0;
  v136 = 0;
  v32 = v31 + Count;
  v116 = (intptr_t *)malloc_type_calloc(8uLL, v31 + Count, 0x68CD1045uLL);
  if (!a5)
    a5 = CFSTR("RemakerFamilyVideoCompositor_DeviceSpecific");
  if (CFEqual(a5, CFSTR("RemakerFamilyVideoCompositor_Basic")))
  {
    v33 = CFSTR("VideoCompositorBasic");
LABEL_11:
    v34 = CFRetain(v33);
    cf1 = v34;
    goto LABEL_12;
  }
  if (CFEqual(a5, CFSTR("RemakerFamilyVideoCompositor_vImage")))
  {
    v33 = CFSTR("VideoCompositorvImage");
    goto LABEL_11;
  }
  if (CFEqual(a5, CFSTR("RemakerFamilyVideoCompositor_Metal")))
  {
    v33 = CFSTR("VideoCompositorMetal");
    goto LABEL_11;
  }
  if (CFEqual(a5, CFSTR("RemakerFamilyVideoCompositor_OpenGL")))
  {
    v33 = CFSTR("VideoCompositorOpenGL");
    goto LABEL_11;
  }
  if (!CFEqual(a5, CFSTR("RemakerFamilyVideoCompositor_DeviceSpecific")))
  {
    TypeID = FigVideoCompositorGetTypeID();
    if (TypeID != CFGetTypeID(a5))
      goto LABEL_197;
    v33 = CFSTR("VideoCompositorCustom");
    goto LABEL_11;
  }
  v36 = FigVideoCompositorCopyDeviceSpecificCompositorName(1, &cf1);
  if ((_DWORD)v36)
    goto LABEL_198;
  v34 = cf1;
LABEL_12:
  v112 = a7;
  if (CFEqual(v34, CFSTR("VideoCompositorBasic")))
  {
    v35 = CFGetAllocator(a1);
    v36 = FigVideoCompositorCreateBasic((uint64_t)v35, 0, &v136);
    if (!(_DWORD)v36)
    {
      v37 = a2;
LABEL_29:
      v41 = 1;
      goto LABEL_30;
    }
LABEL_198:
    v59 = v36;
    v41 = 0;
LABEL_199:
    v65 = 0;
    v94 = v116;
    goto LABEL_156;
  }
  if (CFEqual(cf1, CFSTR("VideoCompositorvImage")))
  {
    v37 = a2;
    v38 = CFGetAllocator(a1);
    v36 = FigVideoCompositorCreatevImage((uint64_t)v38, 0, &v136);
    if (!(_DWORD)v36)
      goto LABEL_29;
    goto LABEL_198;
  }
  if (CFEqual(cf1, CFSTR("VideoCompositorMetal")))
  {
    v37 = a2;
    v39 = CFGetAllocator(a1);
    v36 = FigVideoCompositorCreateMetal((uint64_t)v39, &v136);
    if (!(_DWORD)v36)
      goto LABEL_29;
    goto LABEL_198;
  }
  if (CFEqual(cf1, CFSTR("VideoCompositorOpenGL")))
  {
    v37 = a2;
    v40 = CFGetAllocator(a1);
    v36 = FigVideoCompositorCreateOpenGL(v40, 0, &v136);
    if (!(_DWORD)v36)
      goto LABEL_29;
    goto LABEL_198;
  }
  if (!CFEqual(cf1, CFSTR("VideoCompositorCustom")))
  {
LABEL_197:
    v36 = FigSignalErrorAt();
    goto LABEL_198;
  }
  v37 = a2;
  v41 = 0;
  v136 = a5;
LABEL_30:
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  FigBaseObject = FigVideoCompositorGetFigBaseObject(v136);
  v44 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v44)
    v44(FigBaseObject, CFSTR("WorkerThreadPriority"), v42);
  if (v42)
    CFRelease(v42);
  v45 = FigVideoCompositorGetFigBaseObject(v136);
  v46 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v46)
    v46(v45, CFSTR("HighQualityRendering"), *MEMORY[0x1E0C9AE50]);
  if (!a1)
    goto LABEL_205;
  *(_OWORD *)v120 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)&v121 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v110 = *(_OWORD *)v120;
  *(_OWORD *)v130 = *(_OWORD *)v120;
  v109 = v121;
  v131 = v121;
  if (!FigVideoCompositionInstructionArrayIsValid((uint64_t)a6, (uint64_t)v120, (uint64_t)v130))
  {
    v108 = CFGetTypeID(a1);
    remakerFamily_MapError(v108, 4u);
LABEL_205:
    v49 = FigSignalErrorAt();
LABEL_206:
    v59 = v49;
    goto LABEL_199;
  }
  if (a6)
    v47 = CFRetain(a6);
  else
    v47 = 0;
  *(_QWORD *)(v37 + 176) = v47;
  v48 = CFGetAllocator(a1);
  v49 = FigImageQueueCreateForCoreVideo((uint64_t)v48, &v147);
  if ((_DWORD)v49)
    goto LABEL_206;
  v50 = v147;
  v51 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v51)
    v51(v50, 1);
  v52 = v147;
  v53 = *(void (**)(CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v53)
    v53(v52, 1.0);
  v54 = CFGetAllocator(a1);
  v55 = *(_BYTE *)(DerivedStorage + 32) ? 30 : 31;
  v49 = FigActivitySchedulerCreateForNewThread((uint64_t)v54, v55, CFSTR("com.apple.coremedia.remaker.videoprocessor"), &v146);
  if ((_DWORD)v49)
    goto LABEL_206;
  v156.width = (double)a14;
  v156.height = (double)a15;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v156);
  v57 = FigVideoCompositorGetFigBaseObject(v136);
  v58 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v58)
    v59 = v58(v57, CFSTR("RenderDimensions"), DictionaryRepresentation);
  else
    v59 = 4294954514;
  v115 = v41;
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if ((_DWORD)v59)
    goto LABEL_202;
  v60 = (uint64_t *)(v37 + 168);
  v61 = CFGetAllocator(a1);
  v62 = v136;
  v63 = (void *)v147;
  remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)&v129);
  remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)&v128);
  *(_OWORD *)v120 = *a12;
  *(_QWORD *)&v121 = *((_QWORD *)a12 + 2);
  v64 = FigVideoCompositionProcessorCreateWithImageQueue(v61, 5, v62, (CMTime *)v120, a13, v63, &v129, &v128, v146, (uint64_t *)(v37 + 168));
  if ((_DWORD)v64
    || (CMNotificationCenterGetDefaultLocalCenter(), v64 = FigNotificationCenterAddWeakListeners(), (_DWORD)v64)
    || (v64 = FigVideoCompositionProcessorSetCompositionInstructionCallback(*(_QWORD *)(v37 + 168), (uint64_t)remakerFamily_copyCompositionInstructionAtTime, v37), (_DWORD)v64)|| (v64 = FigVideoCompositionProcessorSetProperty(*v60, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), a20), (_DWORD)v64))
  {
    v59 = v64;
LABEL_202:
    v65 = 0;
    goto LABEL_115;
  }
  v133 = *v60 | 0x8000000000000000;
  v65 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v133);
  if (!v65)
  {
    v66 = FigSignalErrorAt();
LABEL_208:
    v59 = v66;
    goto LABEL_115;
  }
  v66 = FigVideoCompositionProcessorSetProperty(*v60, CFSTR("VideoCompositionProcessor_PixelBufferPoolSharingID"), v65);
  if ((_DWORD)v66)
    goto LABEL_208;
  v67 = *v60;
  v68 = CFGetAllocator(a1);
  v66 = FigVideoCompositionProcessorCopyProperty(v67, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), (uint64_t)v68, &v137);
  if ((_DWORD)v66)
    goto LABEL_208;
  v69 = v147;
  v70 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v70)
  {
    v59 = 4294954514;
LABEL_115:
    v94 = v116;
    goto LABEL_155;
  }
  v113 = v65;
  Channel = v70(v69, a19, 0);
  if ((_DWORD)Channel)
    goto LABEL_189;
  if (v32 < 1)
  {
LABEL_116:
    v120[0] = 0;
    v130[0] = 0;
    value = 0;
    v155[0] = 0;
    v152 = 0;
    v153 = 0;
    v150 = 0;
    v151 = 0;
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryGetValueIfPresent(a18, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), (const void **)&value);
    CFDictionaryGetValueIfPresent(a18, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), (const void **)v130);
    CFDictionaryGetValueIfPresent(a18, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), (const void **)v155);
    if (value)
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), value);
    if (v130[0])
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), v130[0]);
    if (v155[0])
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), v155[0]);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0CED7E0], (const void **)&v151))
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredYCbCrMatrix"), v151);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0CED7C0], (const void **)&v153))
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredColorPrimaries"), v153);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0CED7D8], (const void **)&v152))
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredTransferFunction"), v152);
    if (!value && v151)
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), v151);
    if (!v130[0] && v153)
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), v153);
    if (!v155[0] && v152)
      CFDictionaryAddValue(MutableCopy, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), v152);
    CFDictionaryGetValueIfPresent(a18, CFSTR("VideoCompositionProcessor_HDRDisplayMetadataPolicy"), (const void **)&v150);
    v94 = v116;
    if (v150)
      CFDictionarySetValue(MutableCopy, CFSTR("VideoCompositionProcessor_HDRDisplayMetadataPolicy"), v150);
    CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)remakerFamily_setPropertyOnVideoCompositionProcessor, (void *)*v60);
    VideoPixelTransferProperties = remakerFamily_createVideoPixelTransferProperties(v96, theDict, 0, (__CFDictionary **)v120);
    v65 = v113;
    if (!(_DWORD)VideoPixelTransferProperties)
      VideoPixelTransferProperties = FigVideoCompositionProcessorSetProperty(*v60, CFSTR("VideoCompositionProcessor_DestinationPixelTransferProperties"), (void *)v120[0]);
    v59 = VideoPixelTransferProperties;
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (v120[0])
      CFRelease(v120[0]);
    if (!(_DWORD)v59)
    {
      if (v112 && (v98 = FigVideoCompositionProcessorSetAnimationLayer(*v60, v111, v112, a9, a10, a11), (_DWORD)v98))
      {
        v59 = v98;
      }
      else
      {
        v99 = *a12;
        *(_QWORD *)(v37 + 344) = *((_QWORD *)a12 + 2);
        *(_OWORD *)(v37 + 328) = v99;
        remakerFamily_commitChannel((uint64_t)a1, v37);
        if (v32 >= 1)
        {
          v100 = v116;
          v101 = v32;
          do
          {
            remakerFamily_commitChannel((uint64_t)a1, *v100);
            *v100++ = 0;
            --v101;
          }
          while (v101);
          v59 = 0;
          v41 = v115;
          goto LABEL_157;
        }
        v59 = 0;
      }
    }
LABEL_155:
    v41 = v115;
    goto LABEL_156;
  }
  v72 = 0;
  v73 = v116;
  while (1)
  {
    LODWORD(v155[0]) = 0;
    if (v72 >= Count)
    {
      v75 = v72 - Count;
      v74 = theArray;
    }
    else
    {
      v74 = v117;
      v75 = v72;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(v74, v75);
    if (!ValueAtIndex || (v77 = CFNumberGetTypeID(), v77 != CFGetTypeID(ValueAtIndex)))
    {
      v105 = 5;
      goto LABEL_188;
    }
    CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, v155);
    v78 = *(_QWORD *)(DerivedStorage + 72);
    v79 = LODWORD(v155[0]);
    v80 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v80)
      goto LABEL_152;
    Channel = v80(v78, v79, &v149);
    if ((_DWORD)Channel)
      goto LABEL_189;
    v81 = v149;
    v82 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v82)
    {
LABEL_152:
      v59 = 4294954514;
      goto LABEL_153;
    }
    Channel = v82(v81, 0, &v148);
    if ((_DWORD)Channel)
      goto LABEL_189;
    if (v148 != 1635088502 && v148 != 1986618469 && v148 != 1835365473)
    {
      v105 = 1;
      goto LABEL_188;
    }
    v83 = CFGetTypeID(a1);
    v84 = remakerFamily_copyFormatDescription(v83, (uint64_t)v149, &v140);
    if ((_DWORD)v84 == -12138)
      goto LABEL_107;
    v59 = v84;
    if ((_DWORD)v84 == -12123)
      goto LABEL_107;
    if ((_DWORD)v84)
      goto LABEL_153;
    Channel = remakerFamily_createChannel(a1, (int)v155[0], v148, v73);
    if ((_DWORD)Channel)
      goto LABEL_189;
    v85 = *v73;
    *(_BYTE *)(v85 + 48) = 0;
    *(_BYTE *)(v85 + 50) = 1;
    if (v148 == 1986618469)
      goto LABEL_86;
    if (v148 != 1835365473)
      break;
    CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
    if (!CMBufferQueueCreate(allocator, 0, CallbacksForSampleBuffersSortedByOutputPTS, &queueOut))
    {
      Channel = FigRenderPipelineCreateForBufferQueue((uint64_t)allocator, queueOut, 0, (CFTypeRef *)(*v73 + 56));
      if ((_DWORD)Channel)
        goto LABEL_189;
      Channel = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 480), (int)v155[0], &v142);
      if ((_DWORD)Channel)
        goto LABEL_189;
      v93 = *v60;
      v122 = *(_OWORD *)&v143[16];
      v123 = v144;
      v124 = *(_OWORD *)v145;
      v125 = *(_OWORD *)&v145[16];
      *(_OWORD *)v120 = v142;
      v121 = *(_OWORD *)v143;
      *(_OWORD *)v130 = v110;
      v131 = v109;
      Channel = FigVideoCompositionProcessorSetSourceBufferQueue(v93, (int)v155[0], v120, queueOut, (uint64_t)v130);
      if ((_DWORD)Channel)
        goto LABEL_189;
      if (queueOut)
      {
        CFRelease(queueOut);
        queueOut = 0;
      }
      goto LABEL_96;
    }
LABEL_107:
    ++v72;
    ++v73;
    if (v32 == v72)
      goto LABEL_116;
  }
  if (v148 != 1635088502)
  {
LABEL_96:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v140)
    {
      CFRelease(v140);
      v140 = 0;
    }
    if (v139)
    {
      CFRelease(v139);
      v139 = 0;
    }
    if (v138)
    {
      CFRelease(v138);
      v138 = 0;
    }
    if (v149)
    {
      CFRelease(v149);
      v149 = 0;
    }
    goto LABEL_107;
  }
LABEL_86:
  if (!FigRemakerIsFormatDescriptionProtected(v140))
  {
    v86 = CFGetAllocator(a1);
    Channel = FigVisualContextCreateBasic((uint64_t)v86, 0, &cf);
    if ((_DWORD)Channel)
      goto LABEL_189;
    CFGetAllocator(a1);
    v87 = v140;
    remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)v127);
    HighWaterLevel = remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)v126);
    Channel = remakerFamily_createRenderPipelineOptions((uint64_t)HighWaterLevel, v87, (uint64_t)v127, (uint64_t)v126, 0, v113, *(unsigned __int8 *)(DerivedStorage + 424), 0, 0, *(_BYTE *)(DerivedStorage + 32), 0, 0, DerivedStorage + 41, v155[0], (__CFDictionary **)&v139);
    if ((_DWORD)Channel)
      goto LABEL_189;
    Channel = remakerFamily_createRemakerVideoDecoderSpecification(a1, v89, (__CFDictionary **)&v138);
    if ((_DWORD)Channel)
      goto LABEL_189;
    FigVideoFormatDescriptionContainsStereoMultiviewVideo();
    v90 = CFGetAllocator(a1);
    Channel = FigVideoRenderPipelineCreateWithVisualContext(v90, (int)v138, v137, 0, 1, (uint64_t)cf, 0, (const __CFDictionary *)v139, (_QWORD *)(*v73 + 56));
    if ((_DWORD)Channel)
      goto LABEL_189;
    Channel = remakerFamily_setVideoRenderPipelineProperties((int)a1, *v73, 0, 0, (const opaqueCMFormatDescription *)v140, a16, *(unsigned __int8 *)(DerivedStorage + 32), 0, 0);
    if ((_DWORD)Channel)
      goto LABEL_189;
    CMNotificationCenterGetDefaultLocalCenter();
    Channel = FigNotificationCenterAddWeakListeners();
    if ((_DWORD)Channel)
      goto LABEL_189;
    *(_BYTE *)(*v73 + 360) = *(_BYTE *)(v37 + 360);
    Channel = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 472), (int)v155[0], &v142);
    if ((_DWORD)Channel)
      goto LABEL_189;
    v91 = *v60;
    v122 = *(_OWORD *)&v143[16];
    v123 = v144;
    v124 = *(_OWORD *)v145;
    v125 = *(_OWORD *)&v145[16];
    *(_OWORD *)v120 = v142;
    v121 = *(_OWORD *)v143;
    Channel = FigVideoCompositionProcessorSetSourceVisualContext(v91, (int)v155[0], v148, v120, cf);
    if ((_DWORD)Channel)
      goto LABEL_189;
    *(_DWORD *)(*v73 + 304) = *(_DWORD *)(v37 + 300);
    goto LABEL_96;
  }
  v105 = 3;
LABEL_188:
  v106 = CFGetTypeID(a1);
  remakerFamily_MapError(v106, v105);
  Channel = FigSignalErrorAt();
LABEL_189:
  v59 = Channel;
LABEL_153:
  v94 = v116;
  v41 = v115;
  v65 = v113;
LABEL_156:
  if (v94)
  {
LABEL_157:
    if (v32 >= 1)
    {
      v102 = v94;
      do
      {
        v103 = *v102++;
        remakerFamily_discardChannel((uint64_t)a1, v103);
        --v32;
      }
      while (v32);
    }
    free(v94);
  }
  if (v147)
    CFRelease(v147);
  if (v146)
    CFRelease(v146);
  if (v138)
    CFRelease(v138);
  if (v137)
    CFRelease(v137);
  if (cf)
    CFRelease(cf);
  if (v140)
    CFRelease(v140);
  if (v139)
    CFRelease(v139);
  if (cf1)
    CFRelease(cf1);
  if (v65)
    CFRelease(v65);
  if (v149)
    CFRelease(v149);
  if (queueOut)
    CFRelease(queueOut);
  if (v41 && v136)
    CFRelease(v136);
  return v59;
}

uint64_t remakerFamily_copyCompositionInstructionAtTime(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  CMTimeEpoch v9;
  const void *ValueAtIndex;
  CFTypeRef v11;
  __int128 v13;
  CMTime v14;
  CMTime time2;
  CMTime time1;
  CMTime v17;
  CMTime v18;

  v4 = *(const __CFArray **)(a1 + 176);
  if (!v4)
    goto LABEL_7;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
  if (Count < 1)
    goto LABEL_7;
  v7 = Count;
  v8 = 0;
  v13 = *MEMORY[0x1E0CA2E18];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
    *(_OWORD *)&v14.value = *(_OWORD *)a2;
    v14.epoch = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&v18.value = v13;
    v18.epoch = v9;
    *(_OWORD *)&v17.value = v13;
    v17.epoch = v9;
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    time1 = v14;
    time2 = v18;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = v17;
      time2 = v14;
      if (CMTimeCompare(&time1, &time2) >= 1)
        break;
    }
    if (v7 == ++v8)
      goto LABEL_7;
  }
  if (ValueAtIndex)
    v11 = CFRetain(ValueAtIndex);
  else
LABEL_7:
    v11 = 0;
  *a3 = v11;
  return 0;
}

uint64_t remakerFamily_createRemakerVideoDecoderSpecification(const void *a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  int v10;
  const void *v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955190;
  v6 = DerivedStorage;
  *a3 = 0;
  v7 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954510;
  v9 = Mutable;
  v10 = *(unsigned __int8 *)(v6 + 426);
  v11 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v10)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCA0], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E0CEDCA8], v11);
  result = 0;
  *a3 = v9;
  return result;
}

uint64_t remakerFamily_setVideoRenderPipelineProperties(int a1, uint64_t a2, int a3, int a4, const opaqueCMFormatDescription *a5, const void *a6, int a7, int a8, CFDictionaryRef theDict)
{
  uint64_t v14;
  int v15;
  const __CFAllocator *v16;
  CFNumberRef v17;
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v20)(uint64_t, const __CFString *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, const __CFString *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t MaxLogicalCoreCount;
  CFNumberRef v29;
  uint64_t v30;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, CFNumberRef);
  CFTypeID v34;
  int Int32IfPresent;
  CFTypeID v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, const __CFString *, const void *);
  uint64_t v40;
  const void *Value;
  const void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, const __CFString *, const void *);
  uint64_t v46;
  uint64_t (*v47)(uint64_t, const __CFString *, const void *);
  uint64_t v48;
  uint64_t (*v49)(uint64_t, const __CFString *, const void *);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, const __CFString *, uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, const __CFString *, uint64_t);
  uint64_t v54;
  int valuePtr;
  uint64_t v57;
  int v58;

  v57 = 0;
  v14 = *(_QWORD *)(a2 + 56);
  if (a7)
    v15 = 0;
  else
    v15 = -20;
  valuePtr = v15;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v14);
  v20 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v20)
    goto LABEL_15;
  v54 = DerivedStorage;
  v21 = *MEMORY[0x1E0C9AE50];
  v22 = v20(FigBaseObject, CFSTR("ObeyEmptyMediaMarkers"), *MEMORY[0x1E0C9AE50]);
  if ((_DWORD)v22)
  {
LABEL_55:
    v30 = v22;
    v29 = 0;
    goto LABEL_17;
  }
  v23 = FigRenderPipelineGetFigBaseObject(v14);
  v24 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v24)
    goto LABEL_15;
  if (a3)
    v25 = v21;
  else
    v25 = *MEMORY[0x1E0C9AE40];
  v22 = v24(v23, CFSTR("RenderEmptyMedia"), v25);
  if ((_DWORD)v22)
    goto LABEL_55;
  v26 = FigRenderPipelineGetFigBaseObject(v14);
  v27 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (!v27)
  {
LABEL_15:
    v29 = 0;
    goto LABEL_16;
  }
  v22 = v27(v26, CFSTR("VideoDecoderPriority"), v17);
  if ((_DWORD)v22)
    goto LABEL_55;
  if (a8)
    MaxLogicalCoreCount = 1;
  else
    MaxLogicalCoreCount = FigThreadGetMaxLogicalCoreCount();
  v57 = MaxLogicalCoreCount;
  v29 = CFNumberCreate(v16, kCFNumberCFIndexType, &v57);
  v32 = FigRenderPipelineGetFigBaseObject(v14);
  v33 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v33)
    v33(v32, CFSTR("VideoDecoderThreadCount"), v29);
  if (a6)
  {
    v34 = CFGetTypeID(a6);
    if (v34 == CFStringGetTypeID())
      goto LABEL_59;
  }
  v58 = 0;
  if (a5 && CMFormatDescriptionGetExtensions(a5))
  {
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    if (v58 > 1 && Int32IfPresent != 0)
      a6 = (const void *)*MEMORY[0x1E0CED400];
  }
  if (a6)
  {
LABEL_59:
    v37 = CFGetTypeID(a6);
    if (v37 == CFStringGetTypeID())
    {
      v38 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 56));
      v39 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (!v39)
        goto LABEL_16;
      v40 = v39(v38, CFSTR("FieldMode"), a6);
      if ((_DWORD)v40)
        goto LABEL_56;
    }
  }
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED7C0]);
    v42 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED7D8]);
    v43 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED7E0]);
    if (Value)
    {
      v44 = FigRenderPipelineGetFigBaseObject(v14);
      v45 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (!v45)
        goto LABEL_16;
      v40 = v45(v44, CFSTR("ColorPrimaries"), Value);
      if ((_DWORD)v40)
        goto LABEL_56;
    }
    if (v42)
    {
      v46 = FigRenderPipelineGetFigBaseObject(v14);
      v47 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (!v47)
        goto LABEL_16;
      v40 = v47(v46, CFSTR("TransferFunction"), v42);
      if ((_DWORD)v40)
        goto LABEL_56;
    }
    if (v43)
    {
      v48 = FigRenderPipelineGetFigBaseObject(v14);
      v49 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (!v49)
        goto LABEL_16;
      v40 = v49(v48, CFSTR("YCbCrMatrix"), v43);
      if ((_DWORD)v40)
      {
LABEL_56:
        v30 = v40;
        goto LABEL_17;
      }
    }
  }
  if (!a4)
    goto LABEL_51;
  v50 = FigRenderPipelineGetFigBaseObject(v14);
  v51 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v51)
  {
LABEL_16:
    v30 = 4294954514;
    goto LABEL_17;
  }
  v40 = v51(v50, CFSTR("PreserveSyncFrames"), v21);
  if ((_DWORD)v40)
    goto LABEL_56;
LABEL_51:
  v30 = *(_QWORD *)(v54 + 464);
  if (v30)
  {
    v52 = FigRenderPipelineGetFigBaseObject(v14);
    v53 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v53)
      v53(v52, CFSTR("PlaybackSessionID"), v30);
    v30 = 0;
  }
LABEL_17:
  if (v17)
    CFRelease(v17);
  if (v29)
    CFRelease(v29);
  return v30;
}

uint64_t remakerFamily_createRemakerVideoEncoderSpecification(const void *a1, const __CFDictionary *a2, __CFDictionary **a3)
{
  const __CFAllocator *v5;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v7;
  uint64_t result;

  if (!a3)
    return 4294955190;
  *a3 = 0;
  v5 = CFGetAllocator(a1);
  if (a2)
    MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, a2);
  else
    MutableCopy = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = MutableCopy;
  if (!MutableCopy)
    return 4294954510;
  if (!CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E0CED248]))
    FigCFDictionarySetInt32();
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDD20], (const void *)*MEMORY[0x1E0C9AE50]);
  result = 0;
  *a3 = v7;
  return result;
}

uint64_t remakerFamily_getExpectedDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t ExpectedEndTime;
  CMTime v7;
  CMTime lhs;
  CMTime v9;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  ExpectedEndTime = remakerFamily_getExpectedEndTime(a1, (uint64_t)&v10);
  lhs = v10;
  v7 = *(CMTime *)(DerivedStorage + 88);
  CMTimeSubtract(&v9, &lhs, &v7);
  *a2 = v9;
  return ExpectedEndTime;
}

uint64_t remakerFamily_resetSourceRenderersForNextSegment(uint64_t a1, uint64_t a2, int a3)
{
  const void *v6;
  uint64_t DerivedStorage;
  uint64_t started;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  _QWORD *ValueAtIndex;
  _QWORD *v13;
  opaqueCMBufferQueue *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD);
  CFIndex v18;
  char v19;
  _BYTE *v20;
  uint64_t v21;
  const __CFArray *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  CMTime v29;
  CMTimeRange range;
  CMTime v31;
  __CFArray *v32;

  v32 = 0;
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  started = remakerFamily_createRelatedTrackArray((_DWORD *)a1, &v32);
  if (!(_DWORD)started)
  {
    Count = CFArrayGetCount(v32);
    if (Count < 1)
    {
LABEL_28:
      v26 = 0;
      goto LABEL_29;
    }
    v10 = Count;
    v11 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v32, v11);
      v13 = ValueAtIndex;
      if (a3)
      {
        v14 = *(opaqueCMBufferQueue **)(ValueAtIndex[19] + 72);
        if (v14)
        {
          started = CMBufferQueueReset(v14);
          if ((_DWORD)started)
            break;
        }
      }
      if (v13[25])
      {
        *((_BYTE *)v13 + 216) = 0;
        CMBufferQueueReset((CMBufferQueueRef)v13[26]);
        started = FigAudioQueueOfflineMixerReset(v13[25], 1);
        if ((_DWORD)started)
          break;
      }
      v15 = v13[7];
      if (v15)
      {
        *((_BYTE *)v13 + 64) = 0;
        v16 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (v16)
        {
          started = v16(v15, a3);
          if ((_DWORD)started && (_DWORD)started != -12782)
            break;
        }
      }
      *(_BYTE *)(v13[19] + 200) = 0;
      if (v10 == ++v11)
      {
        v18 = 0;
        v19 = 12;
        while (1)
        {
          v20 = CFArrayGetValueAtIndex(v32, v18);
          v21 = (uint64_t)v20;
          if (*((_QWORD *)v20 + 53))
          {
            v20[432] = 0;
            v22 = *(const __CFArray **)(a1 + 408);
            if (v22 && CFArrayGetCount(v22) > 1)
              v19 = 2;
            v23 = *(_QWORD *)(v21 + 424);
            if (*(_BYTE *)(DerivedStorage + 136))
            {
              *(_OWORD *)&range.start.value = *(_OWORD *)a2;
              range.start.epoch = *(_QWORD *)(a2 + 16);
              v24 = FigPlaybackBossSendSampleForTime(v23, &range.start, v19);
            }
            else
            {
              v25 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&range.start.value = *(_OWORD *)a2;
              *(_OWORD *)&range.start.epoch = v25;
              *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a2 + 32);
              CMTimeRangeGetEnd(&v31, &range);
              *(_OWORD *)&range.start.value = *(_OWORD *)a2;
              range.start.epoch = *(_QWORD *)(a2 + 16);
              v24 = FigPlaybackBossSendSamplesForTimeRange(v23, &range.start, (uint64_t)&v31, v19);
            }
            v26 = v24;
            if ((_DWORD)v24)
              goto LABEL_29;
          }
          v27 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&range.start.value = *(_OWORD *)a2;
          *(_OWORD *)&range.start.epoch = v27;
          *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a2 + 32);
          CMTimeRangeGetEnd(&v29, &range);
          *(_OWORD *)&range.start.value = *(_OWORD *)a2;
          range.start.epoch = *(_QWORD *)(a2 + 16);
          started = remakerFamily_startSourceRendererOfTrack(v21, &range.start, &v29);
          if ((_DWORD)started)
            goto LABEL_34;
          if (v10 == ++v18)
            goto LABEL_28;
        }
      }
    }
  }
LABEL_34:
  v26 = started;
LABEL_29:
  if (v32)
    CFRelease(v32);
  if (v6)
    CFRelease(v6);
  return v26;
}

uint64_t remakerFamily_resetTrackMultiPassTimeRanges(uint64_t a1, _QWORD *a2, CFIndex capacity)
{
  CFIndex v3;
  char *v4;
  BOOL v6;
  _QWORD *v8;
  CFIndex v9;
  __CFArray *v10;
  CFArrayCallBacks v12;

  if (a1)
  {
    v3 = capacity;
    v4 = (char *)a2;
    v6 = !*(_BYTE *)(a1 + 360) || capacity < 1;
    if (!v6 && a2 != 0)
    {
      v8 = a2 + 5;
      v9 = capacity;
      while ((*((_BYTE *)v8 - 28) & 1) != 0
           && (*((_BYTE *)v8 - 4) & 1) != 0
           && !*v8
           && (*(v8 - 2) & 0x8000000000000000) == 0)
      {
        v8 += 6;
        if (!--v9)
        {
          v10 = *(__CFArray **)(a1 + 408);
          if (v10)
          {
            CFArrayRemoveAllValues(v10);
          }
          else
          {
            *(_OWORD *)&v12.version = xmmword_1E2F8DE68;
            *(_OWORD *)&v12.release = *(_OWORD *)&off_1E2F8DE78;
            v12.equal = (CFArrayEqualCallBack)remakerFamily_timeRangesEqualCallBack;
            *(_QWORD *)(a1 + 408) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, &v12);
          }
          do
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 408), v4);
            v4 += 48;
            --v3;
          }
          while (v3);
          return 0;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t remakerFamily_createTimeRangesCArray(CFArrayRef theArray, CFIndex *a2, _QWORD *a3)
{
  CFIndex Count;
  _OWORD *v7;
  CFIndex v8;
  _OWORD *v9;
  _OWORD *ValueAtIndex;
  __int128 v11;
  __int128 v12;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (!a3)
      return FigSignalErrorAt();
  }
  else
  {
    Count = 0;
    if (!a3)
      return FigSignalErrorAt();
  }
  if (!a2)
    return FigSignalErrorAt();
  if (Count < 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = malloc_type_malloc(48 * Count, 0x1000040EED21634uLL);
    v8 = 0;
    v9 = v7;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      v12 = ValueAtIndex[1];
      v11 = ValueAtIndex[2];
      *v9 = *ValueAtIndex;
      v9[1] = v12;
      v9[2] = v11;
      ++v8;
      v9 += 3;
    }
    while (Count != v8);
  }
  *a2 = Count;
  *a3 = v7;
  return 0;
}

uint64_t remakerFamily_setupCompressionMediaProcessorAndFileOutput(const void *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, __int128 *a5, const __CFDictionary *a6, const __CFDictionary *a7, uint64_t a8, const void *a9, const __CFArray *a10, const __CFDictionary *a11)
{
  const __CFArray *v14;
  const __CFDictionary *v15;
  uint64_t DerivedStorage;
  uint64_t ExpectedDuration;
  CFTypeID v18;
  CFIndex Count;
  CFAllocatorRef *v21;
  uint64_t v22;
  void *ValueAtIndex;
  const void *v24;
  const __CFAllocator *v25;
  void *v26;
  const void *v27;
  int v28;
  uint64_t *v29;
  const void *VTCompressionSession;
  const void *v31;
  int64_t v32;
  int64_t v33;
  const __CFAllocator *v34;
  const void *v35;
  unsigned int v36;
  int v37;
  void *v38;
  const __CFAllocator *v39;
  void *v40;
  const void *v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const __CFAllocator *v47;
  CFDictionaryRef v48;
  CFDictionaryRef v49;
  uint64_t SampleBufferProcessor;
  uint64_t FigBaseObject;
  void (*v52)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, const __CFString *, const void *);
  _OWORD *v60;
  __int128 v61;
  const void *v62;
  uint64_t v63;
  uint64_t ExpectedEndTime;
  const __CFAllocator *v65;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v67;
  uint64_t v68;
  const void *v69;
  int v70;
  CFNumberRef v71;
  const void *v72;
  int v73;
  const void **v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  CFNumberRef v79;
  const void *v80;
  CFTypeID v81;
  uint64_t TempFile;
  const __CFAllocator *v83;
  const __CFURL *v84;
  int CFPreferenceNumberWithDefault;
  int v86;
  uint64_t v87;
  void *v88;
  CFIndex v89;
  CMTimeRange v95;
  CMTime supportedPropertyDictionaryOut;
  CMTimeRange v97;
  CMTimeRange v98;
  CMTime v99;
  CMTime end;
  CMTime propertyValueOut;
  CMTimeRange start;
  char v103;
  CMTime duration;
  CFTypeRef v105[2];

  v14 = a10;
  v15 = a11;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v99 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  ExpectedDuration = remakerFamily_getExpectedDuration((uint64_t)a1, &v99);
  if (!(_DWORD)ExpectedDuration)
  {
    if (a10)
    {
      v18 = CFGetTypeID(a10);
      if (v18 != CFArrayGetTypeID())
        return FigSignalErrorAt();
      Count = CFArrayGetCount(a10);
      if (Count <= 0)
        return FigSignalErrorAt();
    }
    else
    {
      Count = 0;
    }
    v21 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(a8 + 368))
    {
      v89 = Count;
      v22 = DerivedStorage;
      propertyValueOut.value = 0;
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a10, 0);
      v24 = a1;
      v25 = CFGetAllocator(a1);
      v88 = ValueAtIndex;
      if (a9)
        v26 = 0;
      else
        v26 = ValueAtIndex;
      *(_OWORD *)&start.start.value = *(_OWORD *)(v22 + 88);
      start.start.epoch = *(_QWORD *)(v22 + 104);
      duration = v99;
      CMTimeRangeMake(&v98, &start.start, &duration);
      v27 = *(const void **)(a8 + 368);
      DerivedStorage = v22;
      if (*(_BYTE *)(v22 + 32))
        v28 = 30;
      else
        v28 = 31;
      v29 = (uint64_t *)(a8 + 288);
      *(_OWORD *)&start.start.value = *a5;
      start.start.epoch = *((_QWORD *)a5 + 2);
      ExpectedDuration = FigMediaProcessorCreateForVideoCompressionWithFrameSilo(v25, a2, a3, a4, a6, a7, a9, v26, (uint64_t)&start, (__int128 *)&v98.start.value, v27, 0, v28, (uint64_t *)(a8 + 288));
      if ((_DWORD)ExpectedDuration)
        return ExpectedDuration;
      VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*v29);
      v21 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      a1 = v24;
      v14 = a10;
      v15 = a11;
      if (VTSessionCopyProperty(VTCompressionSession, (CFStringRef)*MEMORY[0x1E0CED0F0], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut))
      {
        v31 = *(const void **)(a8 + 368);
        if (v31)
        {
          CFRelease(v31);
          *(_QWORD *)(a8 + 368) = 0;
        }
        FigMediaProcessorInvalidate(*v29);
        if (*v29)
        {
          CFRelease((CFTypeRef)*v29);
          *v29 = 0;
        }
        *(_BYTE *)(a8 + 360) = 0;
      }
      if (propertyValueOut.value)
        CFRelease((CFTypeRef)propertyValueOut.value);
      Count = v89;
    }
    else
    {
      v88 = 0;
    }
    if (!*(_BYTE *)(a8 + 360))
    {
      memset(&start, 0, 24);
      if (*(_BYTE *)(DerivedStorage + 32))
        v32 = 10;
      else
        v32 = 2;
      CMTimeMake(&start.start, v32, 1);
      memset(&duration, 0, sizeof(duration));
      if (*(_BYTE *)(DerivedStorage + 32))
        v33 = 8;
      else
        v33 = 1;
      CMTimeMake(&duration, v33, 1);
      if ((unint64_t)Count < 2)
      {
        v38 = v88;
        if (Count)
          v38 = (void *)CFArrayGetValueAtIndex(v14, 0);
        v39 = CFGetAllocator(a1);
        if (a9)
          v40 = 0;
        else
          v40 = v38;
        propertyValueOut = *(CMTime *)(DerivedStorage + 88);
        end = v99;
        CMTimeRangeMake(&v95, &propertyValueOut, &end);
        v41 = *(const void **)(DerivedStorage + 184);
        v42 = *(_DWORD *)(a8 + 300);
        if (*(_BYTE *)(DerivedStorage + 32))
          v43 = 30;
        else
          v43 = 31;
        propertyValueOut = *(CMTime *)a5;
        end = start.start;
        supportedPropertyDictionaryOut = duration;
        ExpectedDuration = FigMediaProcessorCreateForVideoCompressionWithFormatWriter(v39, a2, a3, a4, a6, a7, a9, v40, (uint64_t)&propertyValueOut, (__int128 *)&v95.start.value, v41, v42, (__int128 *)&end.value, (__int128 *)&supportedPropertyDictionaryOut.value, 0, v43, (uint64_t *)(a8 + 288));
        if ((_DWORD)ExpectedDuration)
          return ExpectedDuration;
      }
      else
      {
        v34 = CFGetAllocator(a1);
        propertyValueOut = *(CMTime *)(DerivedStorage + 88);
        end = v99;
        CMTimeRangeMake(&v97, &propertyValueOut, &end);
        v35 = *(const void **)(DerivedStorage + 184);
        v36 = *(_DWORD *)(a8 + 300);
        if (*(_BYTE *)(DerivedStorage + 32))
          v37 = 30;
        else
          v37 = 31;
        propertyValueOut = *(CMTime *)a5;
        end = start.start;
        supportedPropertyDictionaryOut = duration;
        ExpectedDuration = FigMediaProcessorCreateForVideoCompressionWithVisualContextGroupAndFormatWriter(v34, a2, a3, a4, a6, a7, v14, (uint64_t)&propertyValueOut, (__int128 *)&v97.start.value, v35, v36, (__int128 *)&end.value, (__int128 *)&supportedPropertyDictionaryOut.value, 0, v37, (uint64_t *)(a8 + 288));
        if ((_DWORD)ExpectedDuration)
          return ExpectedDuration;
      }
      v21 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    }
    v44 = CMBaseObjectGetDerivedStorage();
    if ((*(_DWORD *)(v44 + 280) & 0x1D) == 1)
    {
      v45 = v44;
      v46 = v44 + 268;
      *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E68];
      start.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      duration = *(CMTime *)(v44 + 268);
      if (CMTimeCompare(&start.start, &duration) < 0 && (*(_DWORD *)(v45 + 256) & 0x1D) == 1)
      {
        v47 = *v21;
        *(_OWORD *)&start.start.value = *(_OWORD *)v46;
        start.start.epoch = *(_QWORD *)(v46 + 16);
        v48 = CMTimeCopyAsDictionary(&start.start, v47);
        *(_OWORD *)&start.start.value = *(_OWORD *)(v45 + 244);
        start.start.epoch = *(_QWORD *)(v45 + 260);
        v49 = CMTimeCopyAsDictionary(&start.start, v47);
        SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(a8 + 288));
        FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
        v52 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
        if (v52)
          v52(FigBaseObject, CFSTR("SampleBufferProcessorProperty_ForceSyncSampleIntervalForSegmentation"), v48);
        v53 = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(a8 + 288));
        v54 = FigSampleBufferProcessorGetFigBaseObject(v53);
        v55 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
        if (v55)
          v55(v54, CFSTR("SampleBufferProcessorProperty_InitialSegmentStartTime"), v49);
        if (v49)
          CFRelease(v49);
        if (v48)
          CFRelease(v48);
      }
    }
    v56 = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(a8 + 288));
    v57 = (const void *)*MEMORY[0x1E0C9AE50];
    v58 = FigSampleBufferProcessorGetFigBaseObject(v56);
    v59 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
    if (v59)
      v59(v58, CFSTR("SampleBufferProcessor_InheritOutputColorSpaceFromInput"), v57);
    v60 = (_OWORD *)(a8 + 328);
    if ((*((_DWORD *)a5 + 3) & 0x1D) == 1)
    {
      v61 = *a5;
      *(_QWORD *)(a8 + 344) = *((_QWORD *)a5 + 2);
      *v60 = v61;
    }
    else
    {
      CMTimeMake(&start.start, 1, 30);
      *v60 = *(_OWORD *)&start.start.value;
      *(_QWORD *)(a8 + 344) = start.start.epoch;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    ExpectedDuration = FigNotificationCenterAddWeakListeners();
    if ((_DWORD)ExpectedDuration)
      return ExpectedDuration;
    v62 = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(a8 + 288));
    supportedPropertyDictionaryOut.value = 0;
    v105[0] = 0;
    memset(&duration, 0, sizeof(duration));
    v103 = 0;
    v63 = CMBaseObjectGetDerivedStorage();
    ExpectedEndTime = remakerFamily_getExpectedEndTime((uint64_t)a1, (uint64_t)&duration);
    if ((_DWORD)ExpectedEndTime)
    {
      v87 = ExpectedEndTime;
      v71 = 0;
      v79 = 0;
      v67 = 0;
    }
    else
    {
      v65 = CFGetAllocator(a1);
      if (v15)
        MutableCopy = CFDictionaryCreateMutableCopy(v65, 0, v15);
      else
        MutableCopy = CFDictionaryCreateMutable(v65, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v67 = MutableCopy;
      v68 = VTSessionCopySupportedPropertyDictionary(v62, (CFDictionaryRef *)&supportedPropertyDictionaryOut);
      if ((_DWORD)v68)
      {
        v87 = v68;
        v71 = 0;
      }
      else
      {
        v69 = (const void *)*MEMORY[0x1E0CED178];
        if (!CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E0CED178]))
        {
          v71 = 0;
LABEL_77:
          v72 = (const void *)*MEMORY[0x1E0CED1A0];
          v73 = CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E0CED1A0]);
          v74 = (const void **)MEMORY[0x1E0C9AE40];
          if (v73)
          {
            if (*(_BYTE *)(v63 + 32))
              v75 = v57;
            else
              v75 = (const void *)*MEMORY[0x1E0C9AE40];
            CFDictionaryAddValue(v67, v72, v75);
          }
          v76 = (const void *)*MEMORY[0x1E0CED0B8];
          if (FigCFDictionaryGetBooleanIfPresent())
          {
            if (*(_BYTE *)(v63 + 424))
              v77 = v57;
            else
              v77 = *v74;
            CFDictionarySetValue(v67, v76, v77);
          }
          v78 = (const void *)*MEMORY[0x1E0CED0A8];
          if (CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E0CED0A8])&& !CFDictionaryContainsKey(v67, (const void *)*MEMORY[0x1E0CED0B0]))
          {
            LODWORD(start.start.value) = 30;
            v79 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &start);
            if (!v79)
            {
              TempFile = FigSignalErrorAt();
LABEL_126:
              v87 = TempFile;
              goto LABEL_109;
            }
            CFDictionaryAddValue(v67, v78, v79);
          }
          else
          {
            v79 = 0;
          }
          v80 = (const void *)*MEMORY[0x1E0CED0F0];
          if (!CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E0CED0F0]))
          {
LABEL_97:
            if (*(_BYTE *)(a8 + 360))
            {
              if (CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E0CECEF0]))
              {
                LODWORD(propertyValueOut.value) = 0;
                if (FigCFDictionaryGetInt32IfPresent())
                {
                  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
                  if (CFPreferenceNumberWithDefault <= 10)
                    v86 = 10;
                  else
                    v86 = CFPreferenceNumberWithDefault;
                  if (v86 >= 0x64)
                    v86 = 100;
                  LODWORD(propertyValueOut.value) = (int)((double)v86 / 100.0 * (double)SLODWORD(propertyValueOut.value));
                  FigCFDictionarySetInt32();
                }
              }
            }
            goto LABEL_106;
          }
          if (!*(_BYTE *)(a8 + 360))
          {
LABEL_106:
            if (*(_QWORD *)(v63 + 464))
              FigCFDictionarySetValue();
            VTSessionSetProperties(v62, v67);
            v87 = 0;
            goto LABEL_109;
          }
          v81 = CFGetTypeID(a1);
          TempFile = remakerFamily_createTempFile(v81, *(_QWORD *)(v63 + 232), *(const __CFURL **)(v63 + 160), 0, 0, v105);
          if (!(_DWORD)TempFile)
          {
            FigFileDeleteFile();
            v83 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v84 = (const __CFURL *)v105[0];
            propertyValueOut = *(CMTime *)(v63 + 88);
            end = duration;
            CMTimeRangeFromTimeToTime(&start, &propertyValueOut, &end);
            TempFile = VTMultiPassStorageCreate(v83, v84, &start, 0, (VTMultiPassStorageRef *)(a8 + 400));
            if (!(_DWORD)TempFile)
            {
              CFDictionaryAddValue(v67, v80, *(const void **)(a8 + 400));
              goto LABEL_97;
            }
          }
          goto LABEL_126;
        }
        if (*(_BYTE *)(v63 + 32))
          v70 = 80;
        else
          v70 = -20;
        LODWORD(start.start.value) = v70;
        v71 = CFNumberCreate(*v21, kCFNumberSInt32Type, &start);
        if (v71)
        {
          CFDictionaryAddValue(v67, v69, v71);
          goto LABEL_77;
        }
        v87 = FigSignalErrorAt();
      }
      v79 = 0;
    }
LABEL_109:
    if (v105[0])
      CFRelease(v105[0]);
    if (v71)
      CFRelease(v71);
    if (v79)
      CFRelease(v79);
    if (supportedPropertyDictionaryOut.value)
      CFRelease((CFTypeRef)supportedPropertyDictionaryOut.value);
    if (v67)
      CFRelease(v67);
    return v87;
  }
  return ExpectedDuration;
}

uint64_t remakerFamily_keepMarkerSbuf(const void *a1, uint64_t a2, CMAttachmentBearerRef target)
{
  CFTypeRef v5;
  const void *v6;

  v5 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E60], 0);
  if (!v5)
    return 1;
  v6 = *(const void **)(a2 + 56);
  if (v6)
    remakerFamily_safelyPostNotification(a1, 0, (uint64_t)CFSTR("SegmentFinished"), (uint64_t)v5, v6);
  return 0;
}

void remakerFamily_registerPowerLogEvent(const void *a1, const __CFString *a2)
{
  CFTypeID v4;
  uint64_t v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  const void *v9;
  uint64_t FigBaseObject;
  unsigned int (*v11)(uint64_t, const __CFString *, uint64_t, void **);
  _BOOL4 v12;
  void *value;

  value = 0;
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == FigRemakerGetTypeID())
    {
      if (!a2
        || (v5 = *MEMORY[0x1E0C9AE00],
            (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
      {
        FigSignalErrorAt();
        return;
      }
      v7 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("operation"), a2);
      if (CFStringCompare(a2, CFSTR("Export_Finished"), 1uLL) == kCFCompareEqualTo)
      {
        v8 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (!v8)
          goto LABEL_14;
        v9 = (const void *)v8;
        FigBaseObject = FigFormatWriterGetFigBaseObject(v8);
        v11 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
        v12 = v11 && v11(FigBaseObject, CFSTR("EstimatedFileByteCount"), v5, &value) == 0;
        CFRelease(v9);
        if (!value || !v12)
          goto LABEL_14;
        CFDictionarySetValue(v7, CFSTR("EstimatedFileByteCount"), value);
      }
      FigPowerLogRegisterEvent();
LABEL_14:
      CFRelease(v7);
      if (value)
        CFRelease(value);
    }
  }
}

BOOL remakerFamily_CFURLSchemeIsFile(const __CFURL *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  _BOOL8 v3;

  v1 = CFURLCopyScheme(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFStringCompare(CFSTR("file"), v1, 1uLL) == kCFCompareEqualTo;
  CFRelease(v2);
  return v3;
}

uint64_t remakerFamily_GetDefaultSourceAudioTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t DefaultTrackIDForMediaType;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_DWORD *)DerivedStorage >= 7u)
    return FigSignalErrorAt();
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v5)
    return 0;
  v5(CMBaseObject, CFSTR("assetProperty_FormatReader"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  DefaultTrackIDForMediaType = FPSupport_GetDefaultTrackIDForMediaType((uint64_t)cf, 1936684398, a2, 0);
  if (cf)
    CFRelease(cf);
  return DefaultTrackIDForMediaType;
}

const __CFArray *remakerFamily_hasTrackForMediaType(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFArray *result;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(const __CFArray **)(DerivedStorage + 80);
  if (result)
  {
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v6 = Count;
      v7 = 0;
      while (*((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v7) + 8) != a2)
      {
        if (v6 == ++v7)
          return 0;
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t remakerFamily_GetEnabledTrackWithAllAlphaSegments(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  int v9;
  const __CFArray *v10;
  BOOL v11;
  CFIndex v12;
  void (*v13)(const void *, unsigned int *, _QWORD);
  int v14;
  CFArrayRef theArray;
  unsigned int v17;

  v17 = 0;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    theArray = 0;
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      v5 = *MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
        if (remakerFamily_isTrackEnabled((uint64_t)ValueAtIndex))
        {
          CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
          v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (!v8)
            break;
          v9 = v8(CMBaseObject, CFSTR("FormatDescriptionArray"), v5, &theArray);
          v10 = theArray;
          if (v9)
            v11 = 1;
          else
            v11 = theArray == 0;
          if (v11)
            goto LABEL_24;
          if (CFArrayGetCount(theArray) < 1)
          {
LABEL_14:
            v13 = *(void (**)(const void *, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
            if (v13)
              v13(ValueAtIndex, &v17, 0);
            v14 = 1;
          }
          else
          {
            v12 = 0;
            while (1)
            {
              CFArrayGetValueAtIndex(v10, v12);
              if (!FigVideoFormatDescriptionContainsAlphaChannel())
                break;
              if (++v12 >= CFArrayGetCount(v10))
                goto LABEL_14;
            }
            v14 = 0;
          }
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
        }
        else
        {
          v14 = 0;
        }
        if (v14)
          break;
        ++v4;
      }
      while (v4 < v3);
      v10 = theArray;
LABEL_24:
      if (v10)
        CFRelease(v10);
    }
  }
  return v17;
}

uint64_t remakerFamily_isTrackEnabled(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef cf1;

  cf1 = 0;
  CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v2)
    return 1;
  v2(CMBaseObject, CFSTR("IsEnabled"), *MEMORY[0x1E0C9AE00], &cf1);
  if (!cf1)
    return 1;
  v3 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  CFRelease(cf1);
  return v3;
}

uint64_t remakerFamily_GetEnabledTrackWithHomogeneousStereoSegments(const __CFArray *a1)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const __CFString *v5;
  uint64_t v6;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  int v10;
  const __CFArray *v11;
  BOOL v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  char v20;
  CFIndex v21;
  int MVHEVCVideoLayerIDs;
  _BOOL4 v24;
  int v25;
  void (*v26)(const void *, unsigned int *, _QWORD);
  uint64_t v28;
  const __CFArray *v29;
  CFArrayRef theArray;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;

  v31 = 0;
  if (!a1)
    return v31;
  v1 = a1;
  Count = CFArrayGetCount(a1);
  theArray = 0;
  if (Count < 1)
    return v31;
  v3 = Count;
  v4 = 0;
  v5 = CFSTR("FormatDescriptionArray");
  v6 = *MEMORY[0x1E0C9AE00];
  v28 = *MEMORY[0x1E0C9AE00];
  v29 = v1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
    if (!remakerFamily_isTrackEnabled((uint64_t)ValueAtIndex))
    {
      v25 = 0;
      goto LABEL_33;
    }
    CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v9)
      break;
    v10 = v9(CMBaseObject, v5, v6, &theArray);
    v11 = theArray;
    if (v10)
      v12 = 1;
    else
      v12 = theArray == 0;
    if (v12)
      goto LABEL_36;
    v13 = CFArrayGetCount(theArray);
    v32 = 0;
    v33 = 0;
    if (v13 < 1)
    {
      v20 = 1;
      v24 = 1;
LABEL_25:
      v25 = 0;
      if (v24 && v20)
      {
        v26 = *(void (**)(const void *, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
        if (v26)
          v26(ValueAtIndex, &v31, 0);
        v25 = 1;
      }
      goto LABEL_31;
    }
    v14 = v13;
    CFArrayGetValueAtIndex(v11, 0);
    if (FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs())
    {
      v15 = v3;
      v16 = v5;
      v17 = 0;
      v18 = 0;
      v19 = 1;
      v20 = 1;
      do
      {
        v21 = v19;
        if (v19 == 1)
        {
          v18 = v32;
          v17 = v33;
        }
        else if (v18 != v32 || v17 != v33)
        {
          v20 = 0;
        }
        if (v14 == v19)
          break;
        CFArrayGetValueAtIndex(v11, v19);
        MVHEVCVideoLayerIDs = FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs();
        v19 = v21 + 1;
      }
      while (MVHEVCVideoLayerIDs);
      v24 = v21 >= v14;
      v5 = v16;
      v3 = v15;
      v6 = v28;
      v1 = v29;
      goto LABEL_25;
    }
    v25 = 0;
LABEL_31:
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
LABEL_33:
    ++v4;
  }
  while (v4 < v3 && !v25);
  v11 = theArray;
LABEL_36:
  if (v11)
    CFRelease(v11);
  return v31;
}

const __CFArray *remakerFamily_getTrackCount()
{
  const __CFArray *result;

  result = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 80);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t remakerFamily_GetDefaultSourceVideoTrackFromAsset(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  unsigned int (*v10)(uint64_t, uint64_t, CFArrayRef *);
  int v11;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  void (*v15)(const void *, int *, _QWORD);
  uint64_t (*v16)(uint64_t, uint64_t, CFArrayRef *);
  int v17;
  CFArrayRef v18;
  uint64_t DefaultTrackIDForMediaType;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  char v23;
  CFTypeRef v24;
  CFTypeRef cf;
  int v26;
  CFArrayRef theArray;

  v24 = 0;
  theArray = 0;
  v26 = 0;
  v10 = *(unsigned int (**)(uint64_t, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v10 && !v10(a2, 1986618469, &theArray))
  {
    v11 = 0;
    for (i = 0; ; ++i)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (i >= Count)
        break;
      cf = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v15 = *(void (**)(const void *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v15)
        v15(ValueAtIndex, &v26, 0);
      if (remakerFamily_isTrackEnabled((uint64_t)ValueAtIndex))
      {
        if (remakerFamily_copyFormatDescription(a1, (uint64_t)ValueAtIndex, &cf))
          goto LABEL_19;
        if (cf)
        {
          if (remakerFamily_IsRasterFormatDescription((const opaqueCMFormatDescription *)cf))
            v11 = v26;
          if (cf)
            CFRelease(cf);
        }
      }
    }
    if (v26)
      *a5 = v11;
  }
LABEL_19:
  if (theArray)
    CFRelease(theArray);
  if (*a5)
    return 0;
  theArray = 0;
  if (a3)
  {
    v16 = *(uint64_t (**)(uint64_t, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v16)
    {
      v17 = v16(a2, 1986618469, &theArray);
      v18 = theArray;
      if (!v17)
      {
        *a5 = remakerFamily_GetEnabledTrackWithAllAlphaSegments(theArray);
        v18 = theArray;
      }
      if (v18)
        CFRelease(v18);
    }
  }
  if (*a5)
    return 0;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v22 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v22)
    return 0;
  v22(CMBaseObject, CFSTR("assetProperty_FormatReader"), *MEMORY[0x1E0C9AE00], &v24);
  if (!v24)
    return 0;
  if (a4)
    v23 = 33;
  else
    v23 = 1;
  DefaultTrackIDForMediaType = FPSupport_GetDefaultTrackIDForMediaType((uint64_t)v24, 1986618469, (uint64_t)a5, v23);
  if (v24)
    CFRelease(v24);
  return DefaultTrackIDForMediaType;
}

uint64_t remakerFamily_GetDefaultSourceVideoTrack(const void *a1, _DWORD *a2)
{
  _DWORD *DerivedStorage;
  _DWORD *v5;
  CFTypeID v6;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = CFGetTypeID(a1);
  return remakerFamily_GetDefaultSourceVideoTrackFromAsset(v6, *((_QWORD *)v5 + 9), *((unsigned __int8 *)v5 + 460), *((unsigned __int8 *)v5 + 426), a2);
}

uint64_t remakerFamily_SetFormatWriterProperty(const void *a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const void *, const __CFDictionary *);
  CMTime v19;
  CMTime time1;
  CMTime v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage == 1 || CFEqual(a2, CFSTR("NextMovieFragmentSequenceNumber")))
  {
    v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (a1)
    {
      v8 = CFGetTypeID(a1);
      if (v8 == FigRemakerGetTypeID())
      {
        if (FigCFEqual())
        {
          v9 = FigSignalErrorAt();
          if (!v7)
            return v9;
          goto LABEL_32;
        }
      }
    }
    if (CFEqual(a2, CFSTR("MovieTimeScale")))
    {
      *(_BYTE *)(DerivedStorage + 392) = 1;
      *(_DWORD *)(DerivedStorage + 388) = 0;
    }
    if (CFEqual(a2, CFSTR("FileTypeCompatibleBrands"))
      || CFEqual(a2, CFSTR("FileTypeMajorBrand"))
      || CFEqual(a2, CFSTR("FileTypeMinorVersion")))
    {
      *(_BYTE *)(DerivedStorage + 393) = 1;
    }
    if (CFEqual(a2, CFSTR("JoinWritingThreadToNewWorkgroup")))
      *(_BYTE *)(DerivedStorage + 394) = 1;
    if (CFEqual(CFSTR("MovieFragmentCheckpointInterval"), a2))
    {
      memset(&v21, 0, sizeof(v21));
      CMTimeMakeFromDictionary(&v21, a3);
      if ((v21.flags & 0x1D) == 1
        && (time1 = v21, v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&time1, &v19)))
      {
        v10 = 0;
        v11 = 1;
      }
      else
      {
        v11 = 0;
        v10 = 1;
      }
      *(_BYTE *)(DerivedStorage + 241) = v11;
      if (v7)
      {
        FigBaseObject = FigFormatWriterGetFigBaseObject(v7);
        v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
        if (!v13)
          goto LABEL_31;
        if (v10)
          v14 = *MEMORY[0x1E0C9AE40];
        else
          v14 = *MEMORY[0x1E0C9AE50];
        v15 = v13(FigBaseObject, CFSTR("ConsolidateMovieFragments"), v14);
        if ((_DWORD)v15)
          goto LABEL_30;
      }
    }
    if (!v7)
      return 0;
    v16 = FigFormatWriterGetFigBaseObject(v7);
    v17 = *(uint64_t (**)(uint64_t, const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
    if (v17)
    {
      v15 = v17(v16, a2, a3);
LABEL_30:
      v9 = v15;
LABEL_32:
      CFRelease(v7);
      return v9;
    }
LABEL_31:
    v9 = 4294954514;
    goto LABEL_32;
  }
  return FigSignalErrorAt();
}

uint64_t remakerFamily_setFormatWriterProperties(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, CFMutableArrayRef);
  uint64_t v17;
  CFNumberRef v18;
  int v19;
  uint64_t FigBaseObject;
  void (*v21)(uint64_t, const __CFString *, CFNumberRef);
  int v22;
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, uint64_t);
  uint64_t v25;
  int v27;
  int v28;
  int valuePtr;

  valuePtr = 862416950;
  v28 = 256;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (a2 != 1635148593 || *(_BYTE *)(DerivedStorage + 393))
  {
    Mutable = 0;
    v8 = 0;
    v9 = 0;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_16;
  }
  v5 = FigCFEqual();
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!v5)
  {
    Mutable = 0;
    v8 = 0;
    v9 = 0;
LABEL_16:
    if (*(_BYTE *)(v4 + 32))
      v19 = 30;
    else
      v19 = 31;
    v27 = v19;
    v18 = CFNumberCreate(v6, kCFNumberSInt32Type, &v27);
    FigBaseObject = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v4 + 184));
    v21 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
    if (v21)
      v21(FigBaseObject, CFSTR("ThreadPriority"), v18);
    v22 = *(unsigned __int8 *)(v4 + 424);
    v23 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v4 + 184));
    v24 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v24)
    {
      if (v22)
        v25 = *MEMORY[0x1E0C9AE50];
      else
        v25 = *MEMORY[0x1E0C9AE40];
      v24(v23, CFSTR("MaximizePowerEfficiency"), v25);
    }
    v17 = 0;
    if (Mutable)
      goto LABEL_27;
    goto LABEL_28;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B378]);
  FigCFArrayAppendInt32();
  FigCFArrayAppendInt32();
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, &v28);
  v10 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v4 + 184));
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (v11)
  {
    v12 = v11(v10, CFSTR("FileTypeMajorBrand"), v8);
    if ((_DWORD)v12)
      goto LABEL_10;
    v13 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v4 + 184));
    v14 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v14)
    {
      v12 = v14(v13, CFSTR("FileTypeMinorVersion"), v9);
      if ((_DWORD)v12)
        goto LABEL_10;
      v15 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v4 + 184));
      v16 = *(uint64_t (**)(uint64_t, const __CFString *, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
      if (v16)
      {
        v12 = v16(v15, CFSTR("FileTypeCompatibleBrands"), Mutable);
        if ((_DWORD)v12)
        {
LABEL_10:
          v17 = v12;
          v18 = 0;
          if (!Mutable)
            goto LABEL_28;
LABEL_27:
          CFRelease(Mutable);
          goto LABEL_28;
        }
        goto LABEL_16;
      }
    }
  }
  v18 = 0;
  v17 = 4294954514;
  if (Mutable)
    goto LABEL_27;
LABEL_28:
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v18)
    CFRelease(v18);
  return v17;
}

uint64_t remakerFamily_SetFormatWriterTrackProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  _DWORD *DerivedStorage;
  _DWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, const void *, uint64_t);

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!CFEqual(a3, CFSTR("EditList")) && !CFEqual(a3, CFSTR("ReplacementFormatDescriptionArray")) && *v8 >= 3u)
    return FigSignalErrorAt();
  v9 = *((_QWORD *)v8 + 23);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 24);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t remakerFamily_CopyFormatWriterTrackProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *DerivedStorage;
  _DWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, const void *, uint64_t, uint64_t);

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (!CFEqual(a3, CFSTR("FormatDescriptionArray")) && *v10 >= 3u)
    return FigSignalErrorAt();
  v11 = *((_QWORD *)v10 + 23);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
  if (v12)
    return v12(v11, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t remakerFamily_resolveByteReferenceSampleBufferAndCopyByteStream(void *a1, const void *a2, _QWORD *a3)
{
  const __CFNumber *v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  size_t SampleSize;
  size_t v12;
  uint64_t v13;
  uint64_t (*v14)(CFTypeRef, size_t, uint64_t, CMBlockBufferRef *, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v18;
  CMBlockBufferRef dataBuffer;
  CFTypeRef cf;
  uint64_t valuePtr;
  uint64_t v22;

  valuePtr = 0;
  v22 = 0;
  dataBuffer = 0;
  cf = 0;
  v18 = a2;
  v6 = (const __CFNumber *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26F0], 0);
  if (!v6)
    goto LABEL_25;
  CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr);
  if (!CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26F8], 0))
    goto LABEL_25;
  v7 = *MEMORY[0x1E0C9AE00];
  if (a2)
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (!v9)
      goto LABEL_17;
    v10 = v9(CMBaseObject, *MEMORY[0x1E0CA2098], v7, &cf);
    if ((_DWORD)v10)
    {
LABEL_26:
      v16 = v10;
      goto LABEL_18;
    }
    if (FigCFEqual())
    {
      CFRetain(a2);
      goto LABEL_10;
    }
    v18 = 0;
  }
  v10 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v10)
    goto LABEL_26;
LABEL_10:
  SampleSize = CMSampleBufferGetSampleSize((CMSampleBufferRef)a1, 0);
  if (!SampleSize)
  {
LABEL_25:
    v16 = 4294955190;
    goto LABEL_18;
  }
  v12 = SampleSize;
  v13 = valuePtr;
  v14 = *(uint64_t (**)(CFTypeRef, size_t, uint64_t, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
  if (!v14)
  {
LABEL_17:
    v16 = 4294954514;
    goto LABEL_18;
  }
  v10 = v14(v18, v12, v13, &dataBuffer, &v22);
  if ((_DWORD)v10)
    goto LABEL_26;
  if (!v22)
    goto LABEL_25;
  v15 = CMSampleBufferSetDataBuffer((CMSampleBufferRef)a1, dataBuffer);
  v16 = v15;
  if (a3 && !(_DWORD)v15)
  {
    *a3 = v18;
    v18 = 0;
  }
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (dataBuffer)
    CFRelease(dataBuffer);
  return v16;
}

void remakerFamily_transferMetadata(const void *a1)
{
  uint64_t DerivedStorage;
  CFTypeID v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t);
  uint64_t v10;
  unsigned int (*v11)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v12;
  CFIndex Count;
  CFIndex v14;
  __CFArray *Mutable;
  CFIndex v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, __CFArray *);
  const __CFArray *v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  const __CFString *v30;
  const __CFAllocator *v31;
  const __CFString *v32;
  _QWORD *ValueAtIndex;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, const __CFString *, uint64_t);
  CFTypeRef v38;
  uint64_t v39;
  unsigned int (*v40)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v41;
  unsigned int (*v42)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFIndex v44;
  CFIndex v45;
  __CFArray *v46;
  CFIndex i;
  CFDictionaryRef v48;
  CFDictionaryRef v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, const __CFString *, __CFArray *);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, const __CFString *, uint64_t);
  const __CFString *v55;
  const __CFString *v56;
  CFTypeRef cf;
  CFTypeRef v58;
  CFArrayRef theArray;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v58 = 0;
  theArray = 0;
  cf = 0;
  values = 0;
  keys[0] = CFSTR("MetadataReader");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || (v3 = CFGetTypeID(a1), v3 != FigAssetReaderGetTypeID()))
  {
    v4 = *(_QWORD *)(DerivedStorage + 72);
    if (!v4
      || (CMBaseObject = FigAssetGetCMBaseObject(v4),
          (v6 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48)) != 0)
      && !v6(CMBaseObject, CFSTR("assetProperty_FormatReader"), *MEMORY[0x1E0C9AE00], &v58))
    {
      v7 = *(_QWORD *)(DerivedStorage + 400);
      if (v7)
      {
        FigBaseObject = FigFormatWriterGetFigBaseObject(*(_QWORD *)(DerivedStorage + 184));
        v9 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v9)
          v9(FigBaseObject, CFSTR("MetadataToWrite"), v7);
      }
      else if (v58)
      {
        v10 = FigFormatReaderGetFigBaseObject(v58);
        v11 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
        if (!v11)
          goto LABEL_63;
        v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (v11(v10, CFSTR("MetadataReaders"), *MEMORY[0x1E0C9AE00], &theArray))
          goto LABEL_63;
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v14 = Count;
            Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
            v16 = 0;
            v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
            v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
            do
            {
              values = (void *)CFArrayGetValueAtIndex(theArray, v16);
              v19 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, 1, v17, v18);
              if (v19)
              {
                v20 = v19;
                CFArrayAppendValue(Mutable, v19);
                CFRelease(v20);
              }
              ++v16;
            }
            while (v14 != v16);
            v21 = *(_QWORD *)(DerivedStorage + 408);
            if (v21)
            {
              v22 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(DerivedStorage + 184));
              v23 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
              if (v23)
                v23(v22, CFSTR("MetadataWhitelist"), v21);
            }
            v24 = FigFormatWriterGetFigBaseObject(*(_QWORD *)(DerivedStorage + 184));
            v25 = *(void (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v25)
              v25(v24, CFSTR("MetadataToTransfer"), Mutable);
            if (Mutable)
              CFRelease(Mutable);
          }
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
        }
      }
      v26 = *(const __CFArray **)(DerivedStorage + 80);
      if (v26)
      {
        v27 = CFArrayGetCount(v26);
        if (v27 >= 1)
        {
          v28 = v27;
          v29 = 0;
          v30 = CFSTR("MetadataReaders");
          v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v32 = CFSTR("TrackMetadataToTransfer");
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v29);
            v34 = *((unsigned int *)ValueAtIndex + 75);
            if (!(_DWORD)v34)
              v34 = *((unsigned int *)ValueAtIndex + 76);
            v35 = ValueAtIndex[24];
            if (v35)
            {
              if ((_DWORD)v34)
              {
                v36 = *(_QWORD *)(DerivedStorage + 184);
                v37 = *(void (**)(uint64_t, uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 24);
                if (v37)
                  v37(v36, v34, CFSTR("TrackMetadataToWrite"), v35);
              }
            }
            else
            {
              v38 = v58;
              if (v58)
              {
                v39 = *((unsigned int *)ValueAtIndex + 7);
                if ((_DWORD)v39)
                {
                  v40 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 56);
                  if (v40)
                  {
                    if (!v40(v38, v39, &cf, 0))
                    {
                      v41 = FigTrackReaderGetFigBaseObject(cf);
                      v42 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (v42)
                      {
                        if (!v42(v41, v30, v31, &theArray) && theArray != 0)
                        {
                          v44 = CFArrayGetCount(theArray);
                          if (v44 >= 1)
                          {
                            v45 = v44;
                            v55 = v30;
                            v56 = v32;
                            v46 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
                            for (i = 0; i != v45; ++i)
                            {
                              values = (void *)CFArrayGetValueAtIndex(theArray, i);
                              v48 = CFDictionaryCreate(v31, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                              if (v48)
                              {
                                v49 = v48;
                                CFArrayAppendValue(v46, v48);
                                CFRelease(v49);
                              }
                            }
                            v30 = v55;
                            if ((_DWORD)v34)
                            {
                              v50 = *(_QWORD *)(DerivedStorage + 184);
                              v51 = *(void (**)(uint64_t, uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                              if (v51)
                                v51(v50, v34, v56, v46);
                              v52 = *(_QWORD *)(DerivedStorage + 408);
                              if (v52)
                              {
                                v53 = *(_QWORD *)(DerivedStorage + 184);
                                v54 = *(void (**)(uint64_t, uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                                if (v54)
                                  v54(v53, v34, CFSTR("TrackMetadataWhitelist"), v52);
                              }
                            }
                            v32 = v56;
                            if (v46)
                              CFRelease(v46);
                          }
                          if (theArray)
                          {
                            CFRelease(theArray);
                            theArray = 0;
                          }
                        }
                      }
                      if (cf)
                      {
                        CFRelease(cf);
                        cf = 0;
                      }
                    }
                  }
                }
              }
            }
            ++v29;
          }
          while (v29 != v28);
        }
      }
    }
  }
LABEL_63:
  if (cf)
    CFRelease(cf);
  if (v58)
    CFRelease(v58);
  if (theArray)
    CFRelease(theArray);
}

uint64_t remakerFamily_createDestinationTrackReferenceDictionary(uint64_t a1, const __CFDictionary *a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  _QWORD context[2];
  uint64_t v11;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  context[0] = a1;
  context[1] = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v11 = 0;
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)remakerFamily_addDestinationTrackReferenceToDictionaryForEachReferenceType, context);
  v8 = v11;
  if ((_DWORD)v11)
    CFRelease(v7);
  else
    *a3 = v7;
  return v8;
}

void remakerFamily_addDestinationTrackReferenceToDictionaryForEachReferenceType(const void *a1, const __CFArray *a2, uint64_t a3)
{
  int v5;
  __CFDictionary *v7;
  const __CFDictionary *v8;
  CFMutableArrayRef Mutable;
  __CFArray *v10;
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  const void *ValueAtIndex;
  const void *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  uint64_t v22;
  CFIndex v23;
  uint64_t v24;
  __CFDictionary *v25;
  const void *v26;
  uint64_t v27;
  void *v28;
  void *value;

  if (a2)
  {
    v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
LABEL_3:
      *(_DWORD *)(a3 + 16) = v5;
      return;
    }
    v8 = *(const __CFDictionary **)a3;
    v7 = *(__CFDictionary **)(a3 + 8);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v10 = Mutable;
      v26 = a1;
      Count = CFArrayGetCount(a2);
      if (Count >= 0)
        v12 = Count;
      else
        v12 = Count + 1;
      if (Count >= 2)
      {
        v13 = v12 >> 1;
        v14 = 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, v14 - 1);
          v16 = CFArrayGetValueAtIndex(a2, v14);
          v28 = 0;
          value = 0;
          if (!CFDictionaryGetValueIfPresent(v8, ValueAtIndex, (const void **)&value))
            value = 0;
          if (CFDictionaryGetValueIfPresent(v8, v16, (const void **)&v28)
            && value
            && v28
            && !FigCFEqual())
          {
            CFArrayAppendValue(v10, value);
            CFArrayAppendValue(v10, v28);
          }
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v25 = v7;
      v17 = CFArrayGetCount(v10);
      if (v17 >= 2)
      {
        v18 = 0;
        v19 = v17 >> 1;
        do
        {
          v20 = 2 * v18 + 2;
          while (1)
          {
            CFArrayGetValueAtIndex(v10, 2 * v18);
            CFArrayGetValueAtIndex(v10, (2 * v18) | 1);
            v27 = v18++;
            if (v18 < v19)
              break;
LABEL_26:
            v20 += 2;
            if (v18 == v19)
              goto LABEL_32;
          }
          v21 = v20;
          v22 = v18;
          while (1)
          {
            CFArrayGetValueAtIndex(v10, v21);
            CFArrayGetValueAtIndex(v10, v21 + 1);
            if (FigCFEqual())
            {
              if (FigCFEqual())
                break;
            }
            ++v22;
            v21 += 2;
            if (v22 >= v19)
              goto LABEL_26;
          }
          CFArrayRemoveValueAtIndex(v10, v21);
          CFArrayRemoveValueAtIndex(v10, v21);
          v23 = CFArrayGetCount(v10);
          if (v23 >= 0)
            v24 = v23;
          else
            v24 = v23 + 1;
          v19 = v24 >> 1;
          v18 = v27;
        }
        while (v27 < v24 >> 1);
      }
LABEL_32:
      if (CFArrayGetCount(v10))
        CFDictionaryAddValue(v25, v26, v10);
      CFRelease(v10);
    }
    else
    {
      v5 = FigSignalErrorAt();
      if (v5)
        goto LABEL_3;
    }
  }
}

void remakerFamily_PostNotificationCallback(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (dword_1EE2A2DD8 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(a2);
  }
  if (a4)
    CFRelease(a4);
}

void remakerFamily_safeDispatchAsync(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (context)
    CFRetain(context);
  dispatch_async_f(queue, context, work);
  dispatch_async_f(queue, context, (dispatch_function_t)remakerFamily_relaseObject);
}

void remakerFamily_relaseObject(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void remakerFamily_initializePowerLog(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  const __CFUUID *v5;
  CFStringRef v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = DerivedStorage;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    v6 = CFUUIDCreateString(v4, v5);
    *(_QWORD *)(v3 + 464) = v6;
    if (v6)
    {
      Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v8 = Mutable;
        FigCFDictionarySetValue();
        FigPlaybackLogPowerEvent();
        CFRelease(v8);
      }
    }
    if (v5)
      CFRelease(v5);
  }
}

uint64_t assetReaderTrack_Invalidate(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  opaqueCMBufferQueue *ValueAtIndex;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, _QWORD);
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex j;
  const void *v15;
  void (*v16)(const void *, _QWORD, _QWORD);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD, _QWORD);

  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = FigAtomicCompareAndSwap32();
  if ((_DWORD)result)
  {
    result = *(_QWORD *)(a1 + 72);
    if (result)
    {
      CMBufferQueueRemoveTrigger((CMBufferQueueRef)result, *(CMBufferQueueTriggerToken *)(a1 + 88));
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 72), *(CMBufferQueueTriggerToken *)(a1 + 96));
      if (*(_BYTE *)(a1 + 160))
      {
        v4 = *(const __CFArray **)(a1 + 128);
        if (v4)
        {
          Count = CFArrayGetCount(v4);
          if (Count >= 2)
          {
            v6 = Count;
            for (i = 1; i != v6; ++i)
            {
              ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), i);
              CMBufferQueueRemoveTrigger(ValueAtIndex, *(CMBufferQueueTriggerToken *)(*(_QWORD *)(a1 + 136) + 8 * i));
              CMBufferQueueRemoveTrigger(ValueAtIndex, *(CMBufferQueueTriggerToken *)(*(_QWORD *)(a1 + 144) + 8 * i));
            }
          }
        }
      }
      result = CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 72), *(CMBufferQueueTriggerToken *)(a1 + 104));
    }
    v9 = *(_QWORD *)(a1 + 112);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v10)
        v10(v9, 0, 0);
      if (*(_BYTE *)(a1 + 160))
      {
        v11 = *(const __CFArray **)(a1 + 120);
        if (v11)
        {
          v12 = CFArrayGetCount(v11);
          if (v12 >= 2)
          {
            v13 = v12;
            for (j = 1; j != v13; ++j)
            {
              v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), j);
              v16 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
              if (v16)
                v16(v15, 0, 0);
            }
          }
        }
      }
      v17 = *(_QWORD *)(a1 + 112);
      v18 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v18)
        v18(v17, 0, 0);
      v19 = *(_QWORD *)(a1 + 112);
      result = CMBaseObjectGetVTable();
      v20 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 32);
      if (v20)
        return v20(v19, 0, 0);
    }
  }
  return result;
}

opaqueCMBufferQueue *assetWriterTrack_Invalidate(uint64_t a1)
{
  opaqueCMBufferQueue *result;

  result = (opaqueCMBufferQueue *)FigAtomicCompareAndSwap32();
  if ((_DWORD)result)
  {
    result = *(opaqueCMBufferQueue **)(a1 + 32);
    if (result)
      return (opaqueCMBufferQueue *)CMBufferQueueRemoveTrigger(result, *(CMBufferQueueTriggerToken *)(a1 + 88));
  }
  return result;
}

uint64_t RegisterFigRemakerTrack()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigRemakerTrackID = result;
  return result;
}

double FigRemakerTrackInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigRemakerTrackFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  remakerFamily_invalidateTrack((uint64_t)a1);
  v2 = (const void *)a1[53];
  if (v2)
  {
    CFRelease(v2);
    a1[53] = 0;
  }
  v3 = (const void *)a1[24];
  if (v3)
  {
    CFRelease(v3);
    a1[24] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  FigSemaphoreDestroy();
  a1[48] = 0;
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  v6 = (const void *)a1[19];
  if (v6)
  {
    CFRelease(v6);
    a1[19] = 0;
  }
  v7 = (const void *)a1[20];
  if (v7)
  {
    CFRelease(v7);
    a1[20] = 0;
  }
  v8 = (const void *)a1[21];
  if (v8)
  {
    CFRelease(v8);
    a1[21] = 0;
  }
  v9 = (const void *)a1[22];
  if (v9)
  {
    CFRelease(v9);
    a1[22] = 0;
  }
  v10 = a1[47];
  if (v10)
  {
    dispatch_release(v10);
    a1[47] = 0;
  }
  v11 = (const void *)a1[49];
  if (v11)
  {
    CFRelease(v11);
    a1[49] = 0;
  }
  v12 = a1[52];
  if (v12)
  {
    dispatch_release(v12);
    a1[52] = 0;
  }
  v13 = (const void *)a1[51];
  if (v13)
  {
    CFRelease(v13);
    a1[51] = 0;
  }
  v14 = (const void *)a1[25];
  if (v14)
  {
    CFRelease(v14);
    a1[25] = 0;
  }
  v15 = (const void *)a1[26];
  if (v15)
  {
    CFRelease(v15);
    a1[26] = 0;
  }
  FigBufferQueueRelease();
  a1[28] = 0;
  v16 = (const void *)a1[29];
  if (v16)
  {
    CFRelease(v16);
    a1[29] = 0;
  }
  v17 = (const void *)a1[30];
  if (v17)
  {
    CFRelease(v17);
    a1[30] = 0;
  }
  FigBufferQueueRelease();
  a1[31] = 0;
  v18 = (const void *)a1[33];
  if (v18)
  {
    CFRelease(v18);
    a1[33] = 0;
  }
  FigBufferQueueRelease();
  a1[34] = 0;
  v19 = (const void *)a1[36];
  if (v19)
  {
    CFRelease(v19);
    a1[36] = 0;
  }
  FigBufferQueueRelease();
  a1[39] = 0;
  v20 = (const void *)a1[2];
  if (v20)
  {
    CFRelease(v20);
    a1[2] = 0;
  }
}

CFStringRef FigRemakerTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRemakerTrack %p]"), a1);
}

__CFString *FigRemakerTrackCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const char *v4;
  const char *v5;
  const char *v6;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  if (*(_BYTE *)(a1 + 48))
    v4 = "(passthrough)";
  else
    v4 = "(recompress)";
  v5 = " (done)";
  if (*(_BYTE *)(a1 + 296))
    v6 = " (done)";
  else
    v6 = "";
  if (!*(_BYTE *)(a1 + 432))
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("FigRemakerTrack %p: '%c%c%c%c' id %d -> id %d %s, renderPipeline %@, mediaProcessor %@%s  multiPassBoss %@%s"), a1, HIBYTE(*(_DWORD *)(a1 + 32)), BYTE2(*(_DWORD *)(a1 + 32)), BYTE1(*(_DWORD *)(a1 + 32)), *(_DWORD *)(a1 + 32), *(unsigned int *)(a1 + 28), *(unsigned int *)(a1 + 300), v4, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 288), v6, *(_QWORD *)(a1 + 424), v5);
  return Mutable;
}

uint64_t remakerFamily_setPropertyOnVideoCompositionProcessor(const void *a1, void *a2, uint64_t a3)
{
  return FigVideoCompositionProcessorSetProperty(a3, a1, a2);
}

uint64_t remakerFamily_frameSiloLowWaterTrigger(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(uint64_t);

  v1 = *(_QWORD *)(a1 + 392);
  result = CMBaseObjectGetVTable();
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 24);
  if (v3)
  {
    result = v3(v1);
    if ((_DWORD)result)
      return FigSemaphoreSignal();
  }
  return result;
}

uint64_t remakerFamily_addFrameFromSiloToFormatWriter(uint64_t a1, uint64_t a2)
{
  const void *v4;
  _DWORD *DerivedStorage;
  _DWORD *v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    v6 = DerivedStorage;
    if (*DerivedStorage >= 7u)
    {
      v12 = FigSignalErrorAt();
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 392);
      v8 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v8)
      {
        if (v8(v7))
          FigSemaphoreWaitRelative();
      }
      v9 = *((_QWORD *)v6 + 23);
      v10 = *(unsigned int *)(a1 + 300);
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v11)
      {
        v13 = 4294954514;
        goto LABEL_10;
      }
      v12 = v11(v9, v10, a2);
    }
    v13 = v12;
LABEL_10:
    CFRelease(v4);
    return v13;
  }
  return FigSignalErrorAt();
}

__n128 remakerFamily_timeRangesRetainCallBack(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;

  v3 = malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  v5 = *(_OWORD *)(a2 + 16);
  result = *(__n128 *)(a2 + 32);
  *v3 = *(_OWORD *)a2;
  v3[1] = v5;
  v3[2] = result;
  return result;
}

void remakerFamily_timeRangesReleaseCallBack(int a1, void *a2)
{
  free(a2);
}

CFStringRef remakerFamily_timeRangesCopyDescriptionCallBack(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  CMTimeRange v4;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)&v4.start.value = *a1;
  *(_OWORD *)&v4.start.epoch = v2;
  *(_OWORD *)&v4.duration.timescale = a1[2];
  return CMTimeRangeCopyDescription(v1, &v4);
}

uint64_t remakerFamily_timeRangesEqualCallBack(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  CMTimeRange v5;
  CMTimeRange range1;

  v2 = a1[1];
  *(_OWORD *)&range1.start.value = *a1;
  *(_OWORD *)&range1.start.epoch = v2;
  *(_OWORD *)&range1.duration.timescale = a1[2];
  v3 = a2[1];
  *(_OWORD *)&v5.start.value = *a2;
  *(_OWORD *)&v5.start.epoch = v3;
  *(_OWORD *)&v5.duration.timescale = a2[2];
  return CMTimeRangeEqual(&range1, &v5);
}

uint64_t RegisterFigAssetReaderTrack()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAssetReaderTrackID = result;
  return result;
}

double FigAssetReaderTrackInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigAssetReaderTrackFinalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (dword_1EE2A2DD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  assetReaderTrack_Invalidate(a1);
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    FigSemaphoreDestroy();
    *(_QWORD *)(a1 + 80) = 0;
  }
  v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v10 = *(const void **)(a1 + 128);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 128) = 0;
  }
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  v11 = *(const void **)(a1 + 152);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v12 = *(const void **)(a1 + 192);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v13 = *(const void **)(a1 + 16);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef FigAssetReaderTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetReaderTrack %p]"), a1);
}

__CFString *FigAssetReaderTrackCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigAssetReaderTrack %p"), a1);
  return Mutable;
}

uint64_t RegisterFigAssetWriterTrack()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAssetWriterTrackID = result;
  return result;
}

double FigAssetWriterTrackInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 256) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void FigAssetWriterTrackFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  assetWriterTrack_Invalidate((uint64_t)a1);
  v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  v3 = (const void *)a1[12];
  if (v3)
  {
    CFRelease(v3);
    a1[12] = 0;
  }
  v4 = (void *)a1[20];
  if (v4)
  {
    free(v4);
    a1[20] = 0;
  }
  v5 = (const void *)a1[21];
  if (v5)
  {
    CFRelease(v5);
    a1[21] = 0;
  }
  v6 = (const void *)a1[28];
  if (v6)
  {
    CFRelease(v6);
    a1[28] = 0;
  }
  v7 = (const void *)a1[32];
  if (v7)
  {
    CFRelease(v7);
    a1[32] = 0;
  }
  v8 = (const void *)a1[2];
  if (v8)
  {
    CFRelease(v8);
    a1[2] = 0;
  }
}

CFStringRef FigAssetWriterTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetWriterTrack %p]"), a1);
}

__CFString *FigAssetWriterTrackCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigAssetWriterTrack %p"), a1);
  return Mutable;
}

uint64_t FigXPCAssetServerAssociateCopiedNeighborAsset(_xpc_connection_s *a1)
{
  int ClientPIDFromAuditToken;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  xpc_connection_get_audit_token();
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  v3 = CreateServedAssetState(ClientPIDFromAuditToken, &v9);
  v4 = v9;
  if ((_DWORD)v3 || (v3 = FigSandboxAssertionCreateForPID(), (_DWORD)v3))
  {
    v7 = v3;
LABEL_6:
    DisposeServedAssetState((CFTypeRef *)v4);
    return v7;
  }
  xpc_connection_get_pid(a1);
  v5 = FigOSTransactionCreate();
  *(_QWORD *)(v4 + 8) = v5;
  if (v5)
    v6 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
  else
    v6 = FigSignalErrorAt();
  v7 = v6;
  if ((_DWORD)v6)
    goto LABEL_6;
  return v7;
}

uint64_t CreateServedAssetState(int a1, _QWORD *a2)
{
  _DWORD *v4;
  uint64_t result;

  v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E00407B9DDE52uLL);
  if (v4)
  {
    result = 0;
    v4[4] = a1;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *a2 = v4;
  return result;
}

void DisposeServedAssetState(CFTypeRef *a1)
{
  CFTypeRef v2;
  void *v3;

  if (a1)
  {
    v2 = a1[4];
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    v3 = (void *)a1[1];
    if (v3)
      os_release(v3);
    free(a1);
  }
}

uint64_t FigXPCAssetServerCopyAssetForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigAssetServerStart()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v2;
  uint64_t v3;

  gCommonAssetServerAsyncQueue = (uint64_t)dispatch_queue_create("CommonAssetServerAsyncQueue", 0);
  FigWatchdogMonitorDispatchQueue();
  FigAssetWatchdogMonitorCommonQueues();
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v2 = Mutable;
  v3 = FigXPCServerStart();
  CFRelease(v2);
  return v3;
}

uint64_t HandleAssetMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  UInt8 bytes[16];

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  *(_QWORD *)bytes = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t HandleAssetNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  CFTypeRef cf;
  int v7;

  v7 = 0;
  cf = 0;
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t HandleAssetGetStatusOfValueForPropertyMessage(const void *a1)
{
  CFTypeID v1;
  uint64_t result;

  v1 = CFGetTypeID(a1);
  if (v1 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleAssetLoadValuesAsyncForPropertiesMessage(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t (*v9)(const void *, _QWORD, char *, _DWORD *);
  _DWORD *v10;
  uint64_t v11;
  char v13;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  v13 = 0;
  v6 = CFGetTypeID(a1);
  if (v6 != FigAssetGetTypeID())
  {
    v7 = FigSignalErrorAt();
LABEL_16:
    v11 = v7;
    goto LABEL_12;
  }
  v7 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v7)
    goto LABEL_16;
  v8 = xpc_dictionary_get_BOOL(a2, "isBatch");
  v9 = *(uint64_t (**)(const void *, _QWORD, char *, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v9)
  {
    v11 = 4294954514;
    goto LABEL_12;
  }
  v10 = v8 ? value : 0;
  v7 = v9(a1, *(_QWORD *)&value[1], &v13, v10);
  if ((_DWORD)v7)
    goto LABEL_16;
  xpc_dictionary_set_BOOL(a3, "AlreadyLoaded", v13 != 0);
  if (v8)
    xpc_dictionary_set_uint64(a3, "BatchID", value[0]);
  v11 = 0;
LABEL_12:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v11;
}

uint64_t HandleAssetLoadValueAsyncForPropertyMessage(const void *a1)
{
  CFTypeID v1;
  uint64_t result;

  v1 = CFGetTypeID(a1);
  if (v1 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleAssetCopyPropertyMessage(int a1, CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t result;

  v2 = CFGetTypeID(cf);
  if (v2 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleAssetValidateAsyncMessage(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID v5;
  uint64_t v6;
  uint64_t (*v7)(const void *, CFTypeRef, CFTypeRef, _DWORD *, _DWORD *);
  uint64_t v8;
  _DWORD value[3];
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  memset(value, 0, sizeof(value));
  v5 = CFGetTypeID(a1);
  if (v5 != FigAssetGetTypeID())
  {
    v6 = FigSignalErrorAt();
LABEL_14:
    v8 = v6;
    goto LABEL_8;
  }
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_14;
  v6 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v6)
    goto LABEL_14;
  v7 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, _DWORD *, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
  if (v7)
  {
    v8 = v7(a1, v11, cf, &value[1], value);
    if (!(_DWORD)v8)
    {
      xpc_dictionary_set_int64(a3, "ValidationStatus", *(int64_t *)&value[1]);
      xpc_dictionary_set_int64(a3, "ValidationResult", value[0]);
    }
  }
  else
  {
    v8 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return v8;
}

uint64_t HandleAssetLoadValuesAsyncForTrackPropertiesMessage(int a1, CFTypeRef cf, void *a3, void *a4)
{
  CFTypeID v7;
  uint64_t v8;
  _BOOL4 v9;
  xpc_object_t v10;
  void *v11;
  size_t count;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(CFTypeRef, __CFArray *, _QWORD, char *, _DWORD *);
  _DWORD *v19;
  uint64_t v20;
  char v22;
  _DWORD value[3];
  CFTypeRef cfa;

  memset(value, 0, sizeof(value));
  v22 = 0;
  v7 = CFGetTypeID(cf);
  if (v7 != FigAssetGetTypeID())
    goto LABEL_29;
  v8 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v8)
  {
LABEL_30:
    v17 = v8;
    goto LABEL_26;
  }
  v9 = xpc_dictionary_get_BOOL(a3, "isBatch");
  v10 = xpc_dictionary_get_value(a3, "Tracks");
  if (!v10)
  {
    v14 = 0;
    goto LABEL_14;
  }
  v11 = v10;
  count = xpc_array_get_count(v10);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_29:
    v8 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v14 = Mutable;
  if (count)
  {
    v15 = 0;
    while (1)
    {
      xpc_array_get_uint64(v11, v15);
      cfa = 0;
      v16 = FigXPCServerLookupAndRetainAssociatedObject();
      if (!(_DWORD)v16)
        v16 = FigSignalErrorAt();
      v17 = v16;
      if ((_DWORD)v16)
        break;
      CFArrayAppendValue(v14, 0);
      CFRelease(0);
      if (count == ++v15)
        goto LABEL_14;
    }
LABEL_24:
    if (!v14)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_14:
  v18 = *(uint64_t (**)(CFTypeRef, __CFArray *, _QWORD, char *, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 80);
  if (!v18)
  {
    v17 = 4294954514;
    goto LABEL_24;
  }
  if (v9)
    v19 = value;
  else
    v19 = 0;
  v20 = v18(cf, v14, *(_QWORD *)&value[1], &v22, v19);
  if ((_DWORD)v20)
  {
    v17 = v20;
    if (!v14)
      goto LABEL_26;
LABEL_25:
    CFRelease(v14);
    goto LABEL_26;
  }
  xpc_dictionary_set_BOOL(a4, "AlreadyLoaded", v22 != 0);
  if (v9)
    xpc_dictionary_set_uint64(a4, "BatchID", value[0]);
  v17 = 0;
  if (v14)
    goto LABEL_25;
LABEL_26:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v17;
}

uint64_t HandleAssetCopyChapterDataMessage(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  int64_t v6;
  int64_t v7;
  uint64_t (*v8)(const void *, int64_t, int64_t, int64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v4 = CFGetTypeID(a1);
  if (v4 == FigAssetGetTypeID())
  {
    int64 = xpc_dictionary_get_int64(a2, "ChapterGroupIndex");
    v6 = xpc_dictionary_get_int64(a2, "ChapterIndex");
    v7 = xpc_dictionary_get_int64(a2, "ChapterCount");
    v8 = *(uint64_t (**)(const void *, int64_t, int64_t, int64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
    if (!v8)
      return 4294954514;
    v9 = v8(a1, int64, v6, v7, &cf);
    v10 = cf;
    if ((_DWORD)v9)
    {
      v11 = v9;
      if (!cf)
        return v11;
    }
    else
    {
      v11 = FigXPCMessageSetCFArray();
      v10 = cf;
      if (!cf)
        return v11;
    }
    CFRelease(v10);
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t HandleAssetSetCookiesMessage(const void *a1, void *a2)
{
  CFTypeID v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  const void *data;
  CFTypeRef cf;
  size_t length;
  CFTypeRef v13;

  length = 0;
  v13 = 0;
  cf = 0;
  v4 = CFGetTypeID(a1);
  if (v4 != FigAssetGetTypeID())
  {
    v7 = FigSignalErrorAt();
    goto LABEL_9;
  }
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v6)
  {
    v7 = 4294954514;
    goto LABEL_9;
  }
  v7 = v6(CMBaseObject, CFSTR("assetProperty_StorageSession"), *MEMORY[0x1E0C9AE00], &cf);
  v8 = cf;
  if (!(_DWORD)v7)
  {
    if (!cf)
    {
      v7 = 0;
      goto LABEL_9;
    }
    FigXPCMessageCopyCFURL();
    data = xpc_dictionary_get_data(a2, "CookieData", &length);
    FigRemote_SetSerializedCookies((uint64_t)cf, (uint64_t)v13, (uint64_t)data, length);
    v8 = cf;
  }
  if (v8)
    CFRelease(v8);
LABEL_9:
  if (v13)
    CFRelease(v13);
  return v7;
}

uint64_t HandleAssetSetHTTPAuthMessage(const void *a1, void *a2)
{
  CFTypeID v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  const void *data;
  CFTypeRef cf;
  size_t length;

  cf = 0;
  length = 0;
  v4 = CFGetTypeID(a1);
  if (v4 == FigAssetGetTypeID())
  {
    CMBaseObject = FigAssetGetCMBaseObject(a1);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (!v6)
      return 4294954514;
    v7 = v6(CMBaseObject, CFSTR("assetProperty_StorageSession"), *MEMORY[0x1E0C9AE00], &cf);
    v8 = cf;
    if ((_DWORD)v7)
      goto LABEL_6;
    if (cf)
    {
      data = xpc_dictionary_get_data(a2, "HTTPAuthData", &length);
      v7 = FigRemote_SetSerializedAuth((uint64_t)cf, (uint64_t)data, length);
      v8 = cf;
LABEL_6:
      if (v8)
        CFRelease(v8);
      return v7;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t HandleAssetDefineMacroPropertyMessage(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(const void *, _QWORD, _QWORD);

  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  v3 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v3)
  {
    v3 = FigXPCMessageCopyCFArray();
    if (!(_DWORD)v3)
    {
      v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v4 < 2uLL)
        return 4294954514;
      v5 = (uint64_t (*)(const void *, _QWORD, _QWORD))v4[11];
      if (!v5)
        return 4294954514;
      return v5(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleAssetDefineTrackMacroPropertyMessage(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(const void *, _QWORD, _QWORD);

  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  v3 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v3)
  {
    v3 = FigXPCMessageCopyCFArray();
    if (!(_DWORD)v3)
    {
      v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v4 < 2uLL)
        return 4294954514;
      v5 = (uint64_t (*)(const void *, _QWORD, _QWORD))v4[12];
      if (!v5)
        return 4294954514;
      return v5(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleAssetDefineCrossTrackMacroPropertyMessage(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(const void *, _QWORD, _QWORD);

  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetGetTypeID())
    return FigSignalErrorAt();
  v3 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v3)
  {
    v3 = FigXPCMessageCopyCFArray();
    if (!(_DWORD)v3)
    {
      v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v4 < 2uLL)
        return 4294954514;
      v5 = (uint64_t (*)(const void *, _QWORD, _QWORD))v4[13];
      if (!v5)
        return 4294954514;
      return v5(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleAssetTrackCopyPropertyMessage(const void *a1)
{
  CFTypeID v1;
  uint64_t result;

  v1 = CFGetTypeID(a1);
  if (v1 != FigAssetTrackGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleAssetTrackGetStatusOfValueForPropertyMessage(const void *a1)
{
  CFTypeID v1;
  uint64_t result;

  v1 = CFGetTypeID(a1);
  if (v1 != FigAssetTrackGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleAssetTrackLoadValuesAsyncForPropertiesMessage(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t (*v9)(const void *, _QWORD, char *, _DWORD *);
  _DWORD *v10;
  uint64_t v11;
  char v13;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  v13 = 0;
  v6 = CFGetTypeID(a1);
  if (v6 != FigAssetTrackGetTypeID())
  {
    v7 = FigSignalErrorAt();
LABEL_16:
    v11 = v7;
    goto LABEL_12;
  }
  v7 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v7)
    goto LABEL_16;
  v8 = xpc_dictionary_get_BOOL(a2, "isBatch");
  v9 = *(uint64_t (**)(const void *, _QWORD, char *, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v9)
  {
    v11 = 4294954514;
    goto LABEL_12;
  }
  v10 = v8 ? value : 0;
  v7 = v9(a1, *(_QWORD *)&value[1], &v13, v10);
  if ((_DWORD)v7)
    goto LABEL_16;
  xpc_dictionary_set_BOOL(a3, "AlreadyLoaded", v13 != 0);
  if (v8)
    xpc_dictionary_set_uint64(a3, "BatchID", value[0]);
  v11 = 0;
LABEL_12:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v11;
}

uint64_t HandleAssetTrackLoadValueAsyncForPropertyMessage(const void *a1)
{
  CFTypeID v1;
  uint64_t result;

  v1 = CFGetTypeID(a1);
  if (v1 != FigAssetTrackGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleAssetTrackValidateAsyncMessage(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID v5;
  uint64_t v6;
  uint64_t (*v7)(const void *, CFTypeRef, CFTypeRef, _DWORD *, _DWORD *);
  uint64_t v8;
  _DWORD value[3];
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  memset(value, 0, sizeof(value));
  v5 = CFGetTypeID(a1);
  if (v5 != FigAssetTrackGetTypeID())
  {
    v6 = FigSignalErrorAt();
LABEL_14:
    v8 = v6;
    goto LABEL_8;
  }
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_14;
  v6 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v6)
    goto LABEL_14;
  v7 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, _DWORD *, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 40);
  if (v7)
  {
    v8 = v7(a1, v11, cf, &value[1], value);
    if (!(_DWORD)v8)
    {
      xpc_dictionary_set_int64(a3, "ValidationStatus", *(int64_t *)&value[1]);
      xpc_dictionary_set_int64(a3, "ValidationResult", value[0]);
    }
  }
  else
  {
    v8 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return v8;
}

void assetXPCServer_SandboxRegistrationRetrieveFromMessageAndAssociateToURL()
{
  FigXPCMessageCopySandboxRegistration();
}

uint64_t assetXPCServer_NotificationFilter(uint64_t a1, const void *a2, CFTypeRef cf1, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v6;
  CFTypeID v12;
  const void *Value;
  uint64_t CMBaseObject;
  unsigned int (*v15)(uint64_t, const void *, _QWORD, CFTypeRef *);
  xpc_object_t v16;
  void *v17;
  CFTypeID v18;
  const void *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, const void *, _QWORD, CFTypeRef *);
  xpc_object_t v22;
  uint64_t v23;
  const void *v24;
  __CFDictionary *MutableCopy;
  CFTypeRef cf;

  v6 = a4;
  cf = 0;
  if (!a4)
    return v6;
  if (CFEqual(cf1, CFSTR("assetNotice_PropertyLoaded")) || CFEqual(cf1, CFSTR("assetNotice_PropertyRevised")))
  {
    v12 = CFGetTypeID(a2);
    if (v12 != FigAssetGetTypeID())
      goto LABEL_32;
    Value = CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("assetPayload_Property"));
    if (CFEqual(CFSTR("assetProperty_MakeReadAheadAssertionWhenCreatingByteStream"), Value))
      goto LABEL_32;
    if (CFEqual(CFSTR("assetProperty_OriginalReadAheadAssertion"), Value))
      goto LABEL_32;
    if (CFEqual(CFSTR("assetProperty_ContentByteStream"), Value))
      goto LABEL_32;
    if (CFEqual(CFSTR("assetProperty_FormatReader"), Value))
      goto LABEL_32;
    if (CFEqual(CFSTR("assetProperty_CPEProtector"), Value))
      goto LABEL_32;
    if (CFEqual(CFSTR("assetProperty_ByteStreamProvider"), Value))
      goto LABEL_32;
    if (CFEqual(CFSTR("assetProperty_StorageSession"), Value))
      goto LABEL_32;
    CMBaseObject = FigAssetGetCMBaseObject(a2);
    v15 = *(unsigned int (**)(uint64_t, const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (!v15 || v15(CMBaseObject, Value, *MEMORY[0x1E0C9AE00], &cf))
      goto LABEL_32;
    v16 = xpc_dictionary_create(0, 0, 0);
    if (v16)
    {
      v17 = v16;
      if (!assetXPCServer_SerializeAssetPropertyValueIntoXPCDictionary(*(_QWORD *)(a1 + 24), Value))
      {
LABEL_16:
        xpc_dictionary_set_value(a6, "LoadedValue", v17);
        FigXPCMessageSetCFDictionary();
        v6 = 2;
LABEL_25:
        FigXPCRelease();
        goto LABEL_33;
      }
LABEL_24:
      v6 = 0;
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  if (CFEqual(cf1, CFSTR("assetTrackNotice_PropertyLoaded")) || CFEqual(cf1, CFSTR("assetTrackNotice_PropertyRevised")))
  {
    v18 = CFGetTypeID(a2);
    if (v18 != FigAssetTrackGetTypeID())
      goto LABEL_32;
    v19 = CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("assetPayload_Property"));
    v20 = FigAssetTrackGetCMBaseObject(a2);
    v21 = *(unsigned int (**)(uint64_t, const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (!v21 || v21(v20, v19, *MEMORY[0x1E0C9AE00], &cf))
      goto LABEL_32;
    v22 = xpc_dictionary_create(0, 0, 0);
    if (v22)
    {
      v17 = v22;
      if (!assetXPCServer_SerializeAssetTrackPropertyValueIntoXPCDictionary(v19, cf))
        goto LABEL_16;
      goto LABEL_24;
    }
    goto LABEL_31;
  }
  if (CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("assetPayload_CFError")))
  {
    v23 = FigCFCopyCFErrorAsPropertyList();
    if (v23)
    {
      v24 = (const void *)v23;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)v6);
      v6 = (uint64_t)MutableCopy;
      if (MutableCopy)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("assetPayload_CFError"));
        CFDictionarySetValue((CFMutableDictionaryRef)v6, CFSTR("CFErrorAsDictionary"), v24);
        *a5 = v6;
        v6 = 4;
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v24);
      goto LABEL_33;
    }
LABEL_31:
    FigSignalErrorAt();
  }
LABEL_32:
  v6 = 0;
LABEL_33:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t assetXPCServer_SerializeAssetPropertyValueIntoXPCDictionary(_xpc_connection_s *a1, CFTypeRef cf1, const void *a3, void *a4)
{
  const void *v4;
  uint64_t v8;
  pid_t pid;
  uint64_t v10;
  const char *v11;
  uint64_t IDForSessionByAssociatingWithClientConnection;
  CFTypeID v13;
  uint64_t v15;
  uint64_t value;

  v4 = a3;
  if (!a3)
    return (uint64_t)v4;
  if (!a1)
    return 4294951139;
  if (CFEqual(cf1, CFSTR("assetProperty_FormatReader")))
  {
    value = 0;
    v8 = FigAssetUsesRemoteFormatReader();
    if (((_DWORD)v8 || FigAssetAllowsSandboxedParsingOptIn(v8)) && FigFormatReaderIsRemote((_BOOL8)v4))
    {
      pid = xpc_connection_get_pid(a1);
      v4 = (const void *)FigFormatReaderXPCRemoteObtainObjectIDForOtherProcess((uint64_t)v4, pid, &value);
      v10 = value;
      v11 = "MediaParserFormatReaderObjectID";
LABEL_18:
      xpc_dictionary_set_uint64(a4, v11, v10);
      return (uint64_t)v4;
    }
    v4 = (const void *)FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, (uint64_t)v4);
LABEL_17:
    v11 = (const char *)*MEMORY[0x1E0CA36A0];
    v10 = value;
    goto LABEL_18;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CPEProtector")))
  {
    value = 0;
    IDForSessionByAssociatingWithClientConnection = FigXPCCPEProtectorServerAssociateCopiedNeighborCPEProtector(a1);
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CustomURLLoader")))
  {
    value = 0;
    IDForSessionByAssociatingWithClientConnection = FigCustomURLLoaderServerAssociateNeighbor();
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_DefaultContentKeySession")))
  {
    value = 0;
    v13 = CFGetTypeID(v4);
    if (v13 == FigContentKeySessionGetTypeID())
    {
      IDForSessionByAssociatingWithClientConnection = FigContentKeySessionServerGetIDForSessionByAssociatingWithClientConnection((uint64_t)v4, (uint64_t)a1, (uint64_t)&value);
LABEL_16:
      v4 = (const void *)IDForSessionByAssociatingWithClientConnection;
      if ((_DWORD)IDForSessionByAssociatingWithClientConnection)
        return (uint64_t)v4;
      goto LABEL_17;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ContentKeyBoss")))
    return assetXPCServer_SerializeContentKeyBossIntoXPCDictionary((uint64_t)a1, v4, a4);
  if (CFEqual(cf1, CFSTR("assetProperty_Tracks")))
    return assetXPCServer_SerializeTracksArrayIntoXPCDictionary((int)a1, (CFArrayRef)v4, a4);
  if (CFEqual(cf1, CFSTR("assetProperty_CommonMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_QuickTimeMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_QuickTimeUserData"))
    || CFEqual(cf1, CFSTR("assetProperty_ISOUserData"))
    || CFEqual(cf1, CFSTR("assetProperty_ID3Metadata"))
    || CFEqual(cf1, CFSTR("assetProperty_ID3MetadataBC"))
    || CFEqual(cf1, CFSTR("assetProperty_iTunesMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_HLSMetadata")))
  {
    value = 0;
    v15 = FigRemote_CreateBinaryPListDataFromMetadataItemArray(v4, &value);
    if (!(_DWORD)v15)
    {
      v4 = (const void *)FigXPCMessageSetCFData();
      if (value)
        CFRelease((CFTypeRef)value);
      return (uint64_t)v4;
    }
    return v15;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_HLSAlternates")))
    return assetXPCServer_SerializeHLSAlternatesIntoXPCDictionary((const __CFArray *)v4, a4);
  if (CFEqual(cf1, CFSTR("assetProperty_HLSSessionKeys")))
    return assetXPCServer_SerializeHLSSessionKeysIntoXPCDictionary((const __CFArray *)v4, a4);
  return FigXPCMessageSetCFObject();
}

uint64_t assetXPCServer_SerializeAssetTrackPropertyValueIntoXPCDictionary(const void *a1, const void *a2)
{
  const void *v2;
  uint64_t v5;
  CFTypeRef cf;

  v2 = a2;
  if (!a2)
    return (uint64_t)v2;
  if (CFEqual(a1, CFSTR("FormatDescriptionArray")))
    return FigXPCMessageSetFormatDescriptionArray();
  if (CFEqual(a1, CFSTR("CommonMetadata"))
    || CFEqual(a1, CFSTR("assetTrackProperty_QuickTimeMetadata"))
    || CFEqual(a1, CFSTR("assetTrackProperty_QuickTimeUserData"))
    || CFEqual(a1, CFSTR("assetTrackProperty_ISOUserData")))
  {
    cf = 0;
    v5 = FigRemote_CreateBinaryPListDataFromMetadataItemArray(v2, &cf);
    if ((_DWORD)v5)
      return v5;
    v2 = (const void *)FigXPCMessageSetCFData();
    if (cf)
      CFRelease(cf);
    return (uint64_t)v2;
  }
  return FigXPCMessageSetCFObject();
}

uint64_t assetXPCServer_SerializeContentKeyBossIntoXPCDictionary(uint64_t a1, CFTypeRef cf, void *a3)
{
  CFTypeID v6;
  uint64_t result;
  uint64_t value;

  value = 0;
  v6 = CFGetTypeID(cf);
  if (v6 != FigContentKeyBossGetTypeID())
    return FigSignalErrorAt();
  result = FigContentKeyBossServerGetIDByAssociatingWithClientConnection((uint64_t)cf, a1, (uint64_t)&value);
  if (!(_DWORD)result)
  {
    xpc_dictionary_set_uint64(a3, (const char *)*MEMORY[0x1E0CA36A0], value);
    return 0;
  }
  return result;
}

uint64_t assetXPCServer_SerializeTracksArrayIntoXPCDictionary(int a1, CFArrayRef theArray, void *a3)
{
  CFIndex Count;
  xpc_object_t v6;
  xpc_object_t v7;
  CFIndex v8;
  const void *ValueAtIndex;
  const void *v10;
  CFTypeID v11;
  uint64_t (*v12)(const void *, char *, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t xdict;
  uint64_t v19;

  Count = CFArrayGetCount(theArray);
  v6 = xpc_array_create(0, 0);
  if (!v6)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v7 = xpc_array_create(0, 0);
  if (v7)
  {
    xdict = a3;
    if (Count < 1)
    {
LABEL_11:
      xpc_dictionary_set_value(xdict, "TrackIDsAndTypes", v6);
      xpc_dictionary_set_value(xdict, "TrackObjectIDs", v7);
      v16 = 0;
      goto LABEL_13;
    }
    v8 = 0;
    while (1)
    {
      v19 = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      if (!ValueAtIndex)
        break;
      v10 = ValueAtIndex;
      v11 = CFGetTypeID(ValueAtIndex);
      if (v11 != FigAssetTrackGetTypeID())
        break;
      v12 = *(uint64_t (**)(const void *, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v12)
      {
        v16 = 4294954514;
        goto LABEL_13;
      }
      v13 = v12(v10, (char *)&v19 + 4, &v19);
      if ((_DWORD)v13)
        goto LABEL_15;
      v14 = v19;
      v15 = SHIDWORD(v19);
      v13 = FigXPCServerAssociateCopiedObjectWithConnection();
      if ((_DWORD)v13)
        goto LABEL_15;
      xpc_array_set_uint64(v6, 0xFFFFFFFFFFFFFFFFLL, v14 | (v15 << 32));
      xpc_array_set_uint64(v7, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (Count == ++v8)
        goto LABEL_11;
    }
  }
  v13 = FigSignalErrorAt();
LABEL_15:
  v16 = v13;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  return v16;
}

uint64_t assetXPCServer_SerializeHLSAlternatesIntoXPCDictionary(const __CFArray *a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;

  value = 0;
  v3 = FigAlternateCopyArrayOfAlternatesAsXPCObject(a1, &value);
  if (!(_DWORD)v3)
    xpc_dictionary_set_value(a2, (const char *)*MEMORY[0x1E0CA36C8], value);
  FigXPCRelease();
  return v3;
}

uint64_t assetXPCServer_SerializeHLSSessionKeysIntoXPCDictionary(const __CFArray *a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;

  value = 0;
  v3 = FigContentKeyBossClientServerXPC_CopySerializedKeySpecifiers(a1, &value);
  if (!(_DWORD)v3)
    xpc_dictionary_set_value(a2, (const char *)*MEMORY[0x1E0CA36C8], value);
  FigXPCRelease();
  return v3;
}

uint64_t FigPWDKeyExchangeSenderGetClassID()
{
  if (FigPWDKeyExchangeSenderGetClassID_onceToken != -1)
    dispatch_once_f(&FigPWDKeyExchangeSenderGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeSenderBaseTypeOnce);
  return sFigPWDKeyExchangeSenderClassID;
}

uint64_t RegisterFigPWDKeyExchangeSenderBaseTypeOnce()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPWDKeyExchangeSenderGetTypeID()
{
  if (FigPWDKeyExchangeSenderGetClassID_onceToken != -1)
    dispatch_once_f(&FigPWDKeyExchangeSenderGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeSenderBaseTypeOnce);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigPWDKeyExchangeSenderCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return FigPWDKeyExchangeSenderCreateForAOCP(*MEMORY[0x1E0C9AE00], a2, 0, a4);
}

CFStringRef SecureWirelessDisplaySenderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPWDKeyExchangeSender %p]"), a1);
}

CGAffineTransform *FCRGetTransform@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  _OWORD *v5;
  CGFloat v6;
  double v7;
  __int128 v8;
  __int128 v9;
  CATransform3D v11;

  v5 = (_OWORD *)MEMORY[0x1E0CD2610];
  v6 = *MEMORY[0x1E0CD2610];
  v7 = *(double *)(MEMORY[0x1E0CD2610] + 40);
  if (a2 > 0.0 && a3 > 0.0)
  {
    v7 = fmin(a4 / a2, a5 / a3);
    v6 = v7;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v11.m11 = v6;
  *(_OWORD *)&v11.m12 = *(_OWORD *)((char *)v5 + 8);
  *(_OWORD *)&v11.m14 = *(_OWORD *)((char *)v5 + 24);
  v11.m22 = v7;
  v8 = v5[6];
  *(_OWORD *)&v11.m33 = v5[5];
  *(_OWORD *)&v11.m41 = v8;
  *(_OWORD *)&v11.m43 = v5[7];
  v9 = v5[4];
  *(_OWORD *)&v11.m23 = v5[3];
  *(_OWORD *)&v11.m31 = v9;
  return CATransform3DGetAffineTransform((CGAffineTransform *)a1, &v11);
}

double FCRGetVideoPresentationBounds(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = 0u;
  v14 = 0u;
  v10 = a5;
  v12 = 0u;
  FCRGetTransform((uint64_t)&v12, a1, a2, a5, a6);
  if (a1 > 0.0 && a2 > 0.0)
    v10 = a2 * *(double *)&v13 + *(double *)&v12 * a1;
  return a3 + (a5 - v10) * 0.5;
}

double FCRGetOverscanSafeRect(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, a3 * 0.1 * 0.5, a4 * 0.1 * 0.5);
  return result;
}

double FCRGetOverscanSafeRectAspectFill(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, a3 * 0.1 * 0.5, a4 * 0.1);
  return result;
}

double FCRGetOverscanSafeRectForVideo(double *a1)
{
  double result;
  CGRect v2;

  v2.origin.x = FCRGetVideoPresentationBounds(a1[46], a1[47], a1[42], a1[43], a1[44], a1[45]);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v2, v2.size.width * 0.1 * 0.5, v2.size.height * 0.1 * 0.5);
  return result;
}

double FCRGetOverscanSafeRectForViewport(uint64_t a1)
{
  double result;
  CGRect v3;

  if (!CFPreferencesGetAppBooleanValue(CFSTR("use_legacy_overscan"), CFSTR("com.apple.coremedia"), 0))
    return FCRGetOverscanSafeRectForVideo((double *)a1);
  v3 = *(CGRect *)(a1 + 336);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v3, v3.size.width * 0.1 * 0.5, v3.size.height * 0.1 * 0.5);
  return result;
}

uint64_t FCRGetCEA608CellSize(uint64_t result)
{
  if (result)
  {
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    FigGeometryMappingConvertPointToPoint();
    FigGeometryPointGetCGPoint();
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    FigGeometryMappingConvertPointToPoint();
    return FigGeometryPointGetCGPoint();
  }
  return result;
}

uint64_t FCSupport_CopyMutableChapterFromTextSampleBBuf(void *a1, int a2, int a3, __CFDictionary **a4)
{
  OpaqueCMBlockBuffer *v9;
  const __CFAllocator *v11;
  size_t DataLength;
  uint64_t v13;
  char *v14;
  CFIndex v15;
  size_t v16;
  uint64_t v17;
  CFStringRef v18;
  __CFDictionary *Mutable;
  const __CFAllocator *v20;
  size_t v21;
  unsigned int v22;
  size_t v23;
  char *v24;
  unint64_t v25;
  int v27;
  CFIndex v28;
  CFStringRef v29;
  CFStringRef v30;
  const UInt8 *v31;
  const __CFAllocator *v32;
  CFIndex v33;
  CFStringEncoding v34;
  int v35;
  Boolean v36;
  const __CFString *v37;
  CMBlockBufferRef blockBufferOut;
  size_t totalLengthOut;
  char *dataPointerOut;

  dataPointerOut = 0;
  blockBufferOut = 0;
  if (a2 != 1952807028 && a2 != 1954034535)
    return FigSignalErrorAt();
  totalLengthOut = 0;
  if (CMBlockBufferIsRangeContiguous((CMBlockBufferRef)a1, 0, 0))
  {
    if (a1)
      v9 = (OpaqueCMBlockBuffer *)CFRetain(a1);
    else
      v9 = 0;
    blockBufferOut = v9;
LABEL_13:
    CMBlockBufferGetDataPointer(v9, 0, 0, &totalLengthOut, &dataPointerOut);
    if (a2 == 1954034535 && totalLengthOut <= 1
      || (v14 = dataPointerOut,
          v15 = bswap32(*(unsigned __int16 *)dataPointerOut) >> 16,
          v16 = v15 + 2,
          v15 + 2 > totalLengthOut))
    {
      v13 = FigSignalErrorAt();
      goto LABEL_17;
    }
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_51;
    v21 = totalLengthOut;
    if (v15 + 10 < totalLengthOut)
    {
      v22 = 0;
      while (1)
      {
        v23 = v16;
        v24 = &dataPointerOut[v16];
        v25 = bswap32(*(_DWORD *)&dataPointerOut[v16]);
        v16 = (v25 + v16);
        if (v25 < 9 || v21 < v16)
          goto LABEL_51;
        v27 = *((_DWORD *)v24 + 1);
        if (a2 == 1954034535 && v27 == 1717924456)
        {
          if (v21 - v23 <= 0xD)
            goto LABEL_51;
          v28 = v24[12];
          if (v28 + 13 > v25)
            goto LABEL_51;
          v29 = CFStringCreateWithBytes(v20, (const UInt8 *)v24 + 13, v28, 0x8000100u, 0);
          if (v29)
          {
            v30 = v29;
            CFDictionaryAddValue(Mutable, CFSTR("ChapterHREFURL"), v29);
            CFRelease(v30);
          }
        }
        else if (v27 == 1684237925)
        {
          if (v21 - v23 <= 0xB)
            goto LABEL_51;
          v22 = bswap32(*((_DWORD *)v24 + 2));
        }
        v21 = totalLengthOut;
        if (v16 + 8 >= totalLengthOut)
          goto LABEL_47;
      }
    }
    v22 = 0;
LABEL_47:
    if (a2 != 1954034535 && v22 != 256)
    {
      if (a2 == 1952807028)
      {
        v31 = (const UInt8 *)(v14 + 2);
        v32 = v20;
        v33 = v15;
        v34 = v22;
LABEL_57:
        v36 = 0;
LABEL_58:
        v18 = CFStringCreateWithBytes(v32, v31, v33, v34, v36);
        if (v18)
        {
          if (a3)
            v37 = CFSTR("ChapterHREFText");
          else
            v37 = CFSTR("ChapterName");
          CFDictionaryAddValue(Mutable, v37, v18);
        }
        v17 = 0;
        *a4 = Mutable;
        goto LABEL_18;
      }
LABEL_51:
      v17 = FigSignalErrorAt();
      v18 = 0;
      goto LABEL_19;
    }
    if (v15 >= 2)
    {
      v31 = (const UInt8 *)(v14 + 2);
      v35 = v14[2];
      if (v35 != 255)
      {
        if (v35 != 254 || v14[3] != 255)
          goto LABEL_56;
LABEL_65:
        v32 = v20;
        v33 = v15;
        v34 = 256;
        v36 = 1;
        goto LABEL_58;
      }
      if (v14[3] == 254)
        goto LABEL_65;
    }
LABEL_56:
    v31 = (const UInt8 *)(v14 + 2);
    v32 = v20;
    v33 = v15;
    v34 = 134217984;
    goto LABEL_57;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)a1);
  v13 = CMBlockBufferCreateContiguous(v11, (CMBlockBufferRef)a1, v11, 0, 0, DataLength, 0, &blockBufferOut);
  if (!(_DWORD)v13)
  {
    v9 = blockBufferOut;
    goto LABEL_13;
  }
LABEL_17:
  v17 = v13;
  v18 = 0;
LABEL_18:
  Mutable = 0;
LABEL_19:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  blockBufferOut = 0;
  if (v18)
    CFRelease(v18);
  if (Mutable)
    CFRelease(Mutable);
  return v17;
}

uint64_t FCSupport_GetListOfChapterTitleTrackIDs(uint64_t a1, uint64_t *a2, int **a3, unsigned int *a4)
{
  return fcSupport_GetListOfChapterTrackIDsForMediaType(1952807028, 2, a1, a2, a3, a4);
}

uint64_t FCSupport_CreateMutableChapterTitleTimesArrayForTrack(uint64_t a1, uint64_t a2, int a3, const __CFArray **a4)
{
  return fcSupport_CreateMutableChapterTimesArrayForTrackCommon(a1, a2, a3 != 0, a4);
}

uint64_t fcSupport_CreateMutableChapterTimesArrayForTrackCommon(uint64_t a1, uint64_t a2, int a3, const __CFArray **a4)
{
  __int128 v4;
  CMTimeEpoch v5;
  uint64_t (*v10)(uint64_t, uint64_t, CFTypeRef *, char *);
  uint64_t v11;
  int v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v15;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, CFTypeRef *);
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, CMTimeRange *);
  int v20;
  const __CFArray *v21;
  CFNumberRef v22;
  __CFDictionary *Mutable;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t (*v26)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  void **v27;
  CFTypeRef v28;
  uint64_t (*v29)(CFTypeRef, CMTimeRange *);
  uint64_t v30;
  CFTypeRef v31;
  uint64_t (*v32)(CFTypeRef, CMTimeRange *, CFTypeRef *, _QWORD, _QWORD);
  CFNumberRef v33;
  CFTypeRef v34;
  uint64_t (*v35)(CFTypeRef, CMFormatDescriptionRef *);
  CFTypeRef v36;
  uint64_t (*v37)(CFTypeRef, CMTime *);
  uint64_t v38;
  CFTypeRef v39;
  uint64_t (*v40)(CFTypeRef, CMTime *);
  CFDictionaryRef v41;
  CFDictionaryRef v42;
  __CFArray *v43;
  CFDictionaryRef v44;
  CFDictionaryRef v45;
  CFDictionaryRef v46;
  CFDictionaryRef v47;
  __CFDictionary *v48;
  const __CFString *v49;
  CFNumberRef v50;
  CFTypeRef v51;
  unsigned int (*v52)(CFTypeRef, uint64_t, CMTime *);
  CFTypeRef v53;
  uint64_t (*v54)(CFTypeRef, CMTime *);
  CFTypeRef v55;
  uint64_t (*v56)(CFTypeRef, CMTime *);
  CFIndex Count;
  const __CFArray *v58;
  __CFDictionary *ValueAtIndex;
  CFDictionaryRef v60;
  CFTypeRef v61;
  unsigned int (*v62)(CFTypeRef, uint64_t);
  uint64_t v63;
  void (*v64)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *);
  CFIndex v65;
  const __CFDictionary *v66;
  const __CFDictionary *v67;
  const __CFDictionary *v68;
  CFDictionaryRef v69;
  CFDictionaryRef v71;
  const __CFNumber *v72;
  void *value[2];
  CFNumberRef valuea;
  CMTime v75;
  CMTime lhs;
  CFDictionaryRef dictionaryRepresentation;
  CMTime v78;
  CMTimeRange time2;
  CMTimeRange cf;
  CMTime start;
  CMTime rhs;
  CMFormatDescriptionRef desc;
  CMTimeRange v84[2];
  CMTime v85;
  CMTime v86;
  CMTime v87;
  CMTime v88;
  CMTime v89;
  CFTypeRef v90;
  CFTypeRef v91;
  CFTypeRef v92;
  CFTypeRef v93;
  uint64_t valuePtr;
  CFTypeRef v95[3];

  valuePtr = 0;
  v95[0] = 0;
  v92 = 0;
  v93 = 0;
  v90 = 0;
  v91 = 0;
  memset(&v89, 0, sizeof(v89));
  memset(&v88, 0, sizeof(v88));
  memset(&v87, 0, sizeof(v87));
  v4 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v86.value = *MEMORY[0x1E0CA2E68];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v86.epoch = v5;
  memset(&v85, 0, sizeof(v85));
  memset(v84, 0, sizeof(v84));
  desc = 0;
  if (!a4)
  {
    v24 = FigSignalErrorAt();
    goto LABEL_85;
  }
  *(_OWORD *)value = v4;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (!v10)
    goto LABEL_80;
  v11 = v10(a1, a2, v95, (char *)&valuePtr + 4);
  if ((_DWORD)v11)
  {
LABEL_109:
    v24 = v11;
    Mutable = 0;
    goto LABEL_81;
  }
  if (a3 == 2)
    v12 = 1986618469;
  else
    v12 = 1952807028;
  if (HIDWORD(valuePtr) != v12)
  {
    Mutable = 0;
    v24 = 0;
    goto LABEL_81;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(v95[0]);
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v14)
  {
LABEL_80:
    Mutable = 0;
    v24 = 4294954514;
    goto LABEL_81;
  }
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = v14(FigBaseObject, CFSTR("EditCursorService"), *MEMORY[0x1E0C9AE00], &v91);
  if ((_DWORD)v11)
    goto LABEL_109;
  v16 = v95[0];
  v17 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v17)
    goto LABEL_80;
  v11 = v17(v16, &v93);
  if ((_DWORD)v11)
    goto LABEL_109;
  cf.start.value = 0;
  v18 = v93;
  v19 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v19)
    v20 = v19(v18, &cf);
  else
    v20 = -12782;
  if (cf.start.value)
    CFRelease((CFTypeRef)cf.start.value);
  if (v20 == -12842)
  {
    v21 = 0;
    v22 = 0;
    goto LABEL_19;
  }
  v25 = v91;
  v26 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v26)
    goto LABEL_80;
  *(_OWORD *)&cf.start.value = *(_OWORD *)value;
  cf.start.epoch = v5;
  v11 = v26(v25, &cf, &v90);
  if ((_DWORD)v11)
    goto LABEL_109;
  v21 = 0;
  valuea = 0;
  v27 = (void **)MEMORY[0x1E0C9AE40];
  if (a3 == 1)
    v27 = (void **)MEMORY[0x1E0C9AE50];
  v72 = (const __CFNumber *)*v27;
  do
  {
    v28 = v90;
    v29 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v29)
      goto LABEL_96;
    v30 = v29(v28, v84);
    if ((_DWORD)v30)
      goto LABEL_99;
    if ((v84[0].start.flags & 1) == 0)
      goto LABEL_69;
    v31 = v93;
    *(_OWORD *)&time2.start.value = *(_OWORD *)&v84[0].start.value;
    time2.start.epoch = v84[0].start.epoch;
    v32 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
    if (!v32)
    {
LABEL_96:
      Mutable = 0;
      v24 = 4294954514;
      goto LABEL_100;
    }
    *(_OWORD *)&cf.start.value = *(_OWORD *)&time2.start.value;
    cf.start.epoch = time2.start.epoch;
    v30 = v32(v31, &cf, &v92, 0, 0);
    if ((_DWORD)v30)
    {
LABEL_99:
      v24 = v30;
      Mutable = 0;
LABEL_100:
      v22 = valuea;
      if (!valuea)
        goto LABEL_81;
      goto LABEL_101;
    }
    v33 = valuea;
    if (!valuea)
    {
      v34 = v92;
      v35 = *(uint64_t (**)(CFTypeRef, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 160);
      if (!v35)
        goto LABEL_80;
      v11 = v35(v34, &desc);
      if ((_DWORD)v11)
        goto LABEL_109;
      LODWORD(valuePtr) = CMFormatDescriptionGetMediaSubType(desc);
      if (desc)
      {
        CFRelease(desc);
        desc = 0;
      }
      v33 = CFNumberCreate(v15, kCFNumberSInt32Type, &valuePtr);
      if (!v33)
      {
        v11 = FigSignalErrorAt();
        goto LABEL_109;
      }
    }
    valuea = v33;
    v36 = v92;
    v37 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v37)
      goto LABEL_97;
    v38 = v37(v36, &v89);
    if ((_DWORD)v38)
    {
LABEL_110:
      v24 = v38;
      Mutable = 0;
LABEL_98:
      v22 = valuea;
LABEL_101:
      CFRelease(v22);
      goto LABEL_81;
    }
    v39 = v92;
    v40 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v40)
    {
LABEL_97:
      Mutable = 0;
      v24 = 4294954514;
      goto LABEL_98;
    }
    v38 = v40(v39, &v87);
    if ((_DWORD)v38)
      goto LABEL_110;
    *(_OWORD *)&cf.start.value = *(_OWORD *)&v84[0].start.value;
    cf.start.epoch = v84[0].start.epoch;
    time2.start = v89;
    if (CMTimeCompare(&cf.start, &time2.start) >= 1)
    {
      memset(&cf, 0, 24);
      *(_OWORD *)&time2.start.value = *(_OWORD *)&v84[0].start.value;
      time2.start.epoch = v84[0].start.epoch;
      rhs = v89;
      CMTimeSubtract(&cf.start, &time2.start, &rhs);
      rhs = v87;
      start = cf.start;
      CMTimeSubtract(&time2.start, &rhs, &start);
      v87 = time2.start;
    }
    *(_OWORD *)&cf.start.value = *(_OWORD *)&v84[1].start.value;
    cf.start.epoch = v84[1].start.epoch;
    time2.start = v84[1].duration;
    CMTimeAdd(&v85, &cf.start, &time2.start);
    v88 = v84[1].start;
    *(_OWORD *)&cf.start.value = *(_OWORD *)&v84[1].start.value;
    cf.start.epoch = v84[1].start.epoch;
    while (1)
    {
      time2.start = v85;
      if ((CMTimeCompare(&cf.start, &time2.start) & 0x80000000) == 0)
        goto LABEL_63;
      start.value = 0;
      rhs = v87;
      cf = v84[0];
      time2 = v84[1];
      CMTimeMapDurationFromRangeToRange(&v86, &rhs, &cf, &time2);
      Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable
        || !v21 && (v21 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378])) == 0
        || (cf.start = v88, (v41 = CMTimeCopyAsDictionary(&cf.start, v15)) == 0))
      {
        v24 = FigSignalErrorAt();
        goto LABEL_100;
      }
      v42 = v41;
      v43 = v21;
      cf.start = v86;
      v44 = CMTimeCopyAsDictionary(&cf.start, v15);
      if (!v44)
      {
        v24 = FigSignalErrorAt();
        v71 = v42;
LABEL_107:
        CFRelease(v71);
        goto LABEL_100;
      }
      v45 = v44;
      cf.start = v89;
      v46 = CMTimeCopyAsDictionary(&cf.start, v15);
      if (!v46)
      {
        v24 = FigSignalErrorAt();
        CFRelease(v42);
        v71 = v45;
        goto LABEL_107;
      }
      v47 = v46;
      CFDictionaryAddValue(Mutable, CFSTR("ChapterTime"), v42);
      CFDictionaryAddValue(Mutable, CFSTR("ChapterDuration"), v45);
      CFDictionaryAddValue(Mutable, CFSTR("ChapterSampleMediaPTS"), v47);
      v48 = Mutable;
      if (a3 == 2)
      {
        v49 = CFSTR("ChapterImageMediaSubType");
        v50 = valuea;
      }
      else
      {
        CFDictionaryAddValue(Mutable, CFSTR("ChapterTextSubType"), valuea);
        v48 = Mutable;
        v49 = CFSTR("ChapterHREF");
        v50 = v72;
      }
      CFDictionaryAddValue(v48, v49, v50);
      CFArrayAppendValue(v43, Mutable);
      CFRelease(v42);
      CFRelease(v45);
      CFRelease(v47);
      CFRelease(Mutable);
      v51 = v92;
      v52 = *(unsigned int (**)(CFTypeRef, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 176);
      if (!v52 || v52(v51, 1, &start) || start.value != 1)
        break;
      v53 = v92;
      v54 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v54)
        goto LABEL_96;
      v30 = v54(v53, &v89);
      if ((_DWORD)v30)
        goto LABEL_99;
      v55 = v92;
      v56 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v56)
        goto LABEL_96;
      v21 = v43;
      v30 = v56(v55, &v87);
      if ((_DWORD)v30)
        goto LABEL_99;
      cf.start = v88;
      time2.start = v86;
      CMTimeAdd(&v88, &cf.start, &time2.start);
      cf.start = v88;
    }
    v21 = v43;
LABEL_63:
    cf.start = v88;
    time2.start = v85;
    if (CMTimeCompare(&cf.start, &time2.start) >= 1)
    {
      Count = CFArrayGetCount(v21);
      v58 = v21;
      ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v21, Count - 1);
      memset(&cf, 0, 24);
      time2.start = v88;
      rhs = v85;
      CMTimeSubtract(&v78, &time2.start, &rhs);
      time2.start = v86;
      CMTimeSubtract(&cf.start, &time2.start, &v78);
      *(_OWORD *)&time2.start.value = *(_OWORD *)&cf.start.value;
      time2.start.epoch = cf.start.epoch;
      v60 = CMTimeCopyAsDictionary(&time2.start, v15);
      CFDictionarySetValue(ValueAtIndex, CFSTR("ChapterDuration"), v60);
      if (v60)
        CFRelease(v60);
      v21 = v58;
    }
    if (v92)
    {
      CFRelease(v92);
      v92 = 0;
    }
LABEL_69:
    v61 = v90;
    v62 = *(unsigned int (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  }
  while (v62 && !v62(v61, 1));
  if (v21)
  {
    dictionaryRepresentation = 0;
    v63 = FigFormatReaderGetFigBaseObject(a1);
    v64 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v64)
    {
      v64(v63, CFSTR("Duration"), v15, &dictionaryRepresentation);
      if (dictionaryRepresentation)
      {
        memset(&cf, 0, 24);
        memset(&time2, 0, 24);
        memset(&rhs, 0, sizeof(rhs));
        memset(&start, 0, sizeof(start));
        v65 = CFArrayGetCount(v21);
        v66 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v65 - 1);
        CMTimeMakeFromDictionary(&rhs, dictionaryRepresentation);
        if (dictionaryRepresentation)
        {
          CFRelease(dictionaryRepresentation);
          dictionaryRepresentation = 0;
        }
        v67 = (const __CFDictionary *)CFDictionaryGetValue(v66, CFSTR("ChapterTime"));
        CMTimeMakeFromDictionary(&start, v67);
        v68 = (const __CFDictionary *)CFDictionaryGetValue(v66, CFSTR("ChapterDuration"));
        CMTimeMakeFromDictionary(&time2.start, v68);
        lhs = rhs;
        v75 = start;
        CMTimeSubtract(&cf.start, &lhs, &v75);
        lhs = cf.start;
        v75 = time2.start;
        if (CMTimeCompare(&lhs, &v75))
        {
          lhs = cf.start;
          v69 = CMTimeCopyAsDictionary(&lhs, v15);
          CFDictionarySetValue(v66, CFSTR("ChapterDuration"), v69);
          if (v69)
            CFRelease(v69);
        }
      }
    }
  }
  v22 = valuea;
LABEL_19:
  Mutable = 0;
  v24 = 0;
  *a4 = v21;
  if (v22)
    goto LABEL_101;
LABEL_81:
  if (desc)
    CFRelease(desc);
  if (Mutable)
    CFRelease(Mutable);
LABEL_85:
  if (v90)
    CFRelease(v90);
  if (v91)
    CFRelease(v91);
  if (v92)
    CFRelease(v92);
  if (v93)
    CFRelease(v93);
  if (v95[0])
    CFRelease(v95[0]);
  return v24;
}

uint64_t FCSupport_CreateMutableChapterImageTimesArrayForTrack(uint64_t a1, uint64_t a2, const __CFArray **a3)
{
  return fcSupport_CreateMutableChapterTimesArrayForTrackCommon(a1, a2, 2, a3);
}

const __CFDictionary *FCSupport_HasChapterDetails(const __CFDictionary *result)
{
  if (result)
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, CFSTR("ChapterSampleMediaPTS")) == 0);
  return result;
}

uint64_t FCSupport_PopulateChapterTitleDetail(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  const __CFNumber *v9;
  uint64_t v10;
  const void *v11;
  uint64_t (*v12)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CFTypeRef *);
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *);
  CFTypeRef v20;
  CFTypeRef v21;
  uint64_t (*v22)(uint64_t, CFTypeRef, _QWORD, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *, uint64_t *);
  CMTime v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CMTime v33;
  int valuePtr;
  CFDictionaryRef theDicta;
  CFTypeRef cf;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CMTime v40;

  v38 = 0;
  v39 = 0;
  v37 = 0;
  theDicta = 0;
  cf = 0;
  valuePtr = 0;
  memset(&v33, 0, sizeof(v33));
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  if (!a1 || !(_DWORD)a2 || !theDict)
    goto LABEL_43;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ChapterSampleMediaPTS"));
  v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ChapterTextSubType"));
  v10 = 0;
  if (Value && v9)
  {
    CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
    CMTimeMakeFromDictionary(&v33, Value);
    v11 = CFDictionaryGetValue(theDict, CFSTR("ChapterHREF"));
    v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
    if (!v12)
      goto LABEL_27;
    v13 = v12(a1, a2, &v32, 0);
    if ((_DWORD)v13)
      goto LABEL_44;
    v14 = v32;
    v15 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v15)
      goto LABEL_27;
    v13 = v15(v14, &v31);
    if ((_DWORD)v13)
      goto LABEL_44;
    v16 = v31;
    v27 = v33;
    v17 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
    if (!v17)
      goto LABEL_27;
    v40 = v27;
    v13 = v17(v16, &v40, &v30, 0, 0);
    if ((_DWORD)v13)
      goto LABEL_44;
    v18 = v30;
    v19 = *(uint64_t (**)(CFTypeRef, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 144);
    if (!v19)
      goto LABEL_27;
    v13 = v19(v18, &v39, &v38, &v28, &v29);
    if ((_DWORD)v13)
      goto LABEL_44;
    v20 = v28;
    if (v28)
      goto LABEL_19;
    v21 = v29;
    if (v29)
    {
      v22 = *(uint64_t (**)(uint64_t, CFTypeRef, _QWORD, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
      if (!v22)
        goto LABEL_27;
      v13 = v22(a3, v21, 0, 0, *MEMORY[0x1E0C9AE00], &v28);
      if (!(_DWORD)v13)
      {
        v20 = v28;
LABEL_19:
        v23 = v38;
        v24 = v39;
        v25 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
        if (v25)
        {
          v13 = v25(v20, v23, v24, &cf, &v37);
          if (!(_DWORD)v13)
          {
            if (v37 != v38)
            {
LABEL_26:
              v10 = 0;
              goto LABEL_28;
            }
            v13 = FCSupport_CopyMutableChapterFromTextSampleBBuf((void *)cf, valuePtr, v11 == (const void *)*MEMORY[0x1E0C9AE50], &theDicta);
            if (!(_DWORD)v13)
            {
              if (cf)
                CFRelease(cf);
              cf = 0;
              CFDictionaryRemoveValue(theDict, CFSTR("ChapterSampleMediaPTS"));
              CFDictionaryRemoveValue(theDict, CFSTR("ChapterTextSubType"));
              CFDictionaryRemoveValue(theDict, CFSTR("ChapterHREF"));
              CFDictionaryApplyFunction(theDicta, (CFDictionaryApplierFunction)FCSupport_copyChapterInfo, theDict);
              goto LABEL_26;
            }
          }
          goto LABEL_44;
        }
LABEL_27:
        v10 = 4294954514;
        goto LABEL_28;
      }
LABEL_44:
      v10 = v13;
      goto LABEL_28;
    }
LABEL_43:
    v13 = FigSignalErrorAt();
    goto LABEL_44;
  }
LABEL_28:
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (cf)
    CFRelease(cf);
  if (theDicta)
    CFRelease(theDicta);
  return v10;
}

void FCSupport_copyChapterInfo(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

uint64_t FCSupport_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, CFDataRef *a5, _QWORD *a6)
{
  const __CFDictionary *Value;
  uint64_t (*v12)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CFTypeRef *);
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, CFTypeRef *);
  CFTypeRef v20;
  uint64_t (*v21)(CFTypeRef, uint64_t *, CFIndex *, CFTypeRef *, CFTypeRef *);
  const __CFAllocator *v22;
  CFTypeRef v23;
  uint64_t (*v24)(uint64_t, CFTypeRef, _QWORD, _QWORD, _QWORD, CFTypeRef *);
  void *v25;
  void *v26;
  CFTypeRef v27;
  CFIndex v28;
  uint64_t v29;
  uint64_t (*v30)(CFTypeRef, CFIndex, uint64_t, void *, CFIndex *);
  uint64_t v31;
  CFDataRef v32;
  CFDataRef v33;
  CFTypeRef v34;
  uint64_t v35;
  CMTime v37;
  CFTypeRef cf;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  CMTime v44;
  CFIndex v45;
  CFIndex size;
  uint64_t v47;
  CMTime v48;

  v47 = 0;
  v45 = 0;
  size = 0;
  memset(&v44, 0, sizeof(v44));
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  cf = 0;
  v39 = 0;
  if (!a1)
    goto LABEL_48;
  if (!(_DWORD)a3)
    goto LABEL_48;
  if (!theDict)
    goto LABEL_48;
  if (!a5)
    goto LABEL_48;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ChapterSampleMediaPTS"));
  if (!Value)
    goto LABEL_48;
  CMTimeMakeFromDictionary(&v44, Value);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (!v12)
    goto LABEL_32;
  v13 = v12(a1, a3, &v43, 0);
  if ((_DWORD)v13)
    goto LABEL_49;
  v14 = v43;
  v15 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v15)
    goto LABEL_32;
  v13 = v15(v14, &v42);
  if ((_DWORD)v13)
    goto LABEL_49;
  v16 = v42;
  v37 = v44;
  v17 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 8);
  if (!v17)
    goto LABEL_32;
  v48 = v37;
  v13 = v17(v16, &v48, &v41, 0, 0);
  if ((_DWORD)v13)
    goto LABEL_49;
  if (a6)
  {
    v18 = v41;
    v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (!v19)
      goto LABEL_32;
    v13 = v19(v18, &cf);
    if ((_DWORD)v13)
      goto LABEL_49;
  }
  v20 = v41;
  v21 = *(uint64_t (**)(CFTypeRef, uint64_t *, CFIndex *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 144);
  if (!v21)
    goto LABEL_32;
  v13 = v21(v20, &v47, &size, &v39, &v40);
  if ((_DWORD)v13)
  {
LABEL_49:
    v35 = v13;
    goto LABEL_33;
  }
  if (v39)
  {
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_22;
  }
  v23 = v40;
  if (!v40)
    goto LABEL_48;
  v24 = *(uint64_t (**)(uint64_t, CFTypeRef, _QWORD, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
  if (!v24)
  {
LABEL_32:
    v35 = 4294954514;
    goto LABEL_33;
  }
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = v24(a2, v23, 0, 0, *MEMORY[0x1E0C9AE00], &v39);
  if ((_DWORD)v13)
    goto LABEL_49;
LABEL_22:
  v25 = CFAllocatorAllocate(v22, size, 0);
  if (!v25)
  {
LABEL_48:
    v13 = FigSignalErrorAt();
    goto LABEL_49;
  }
  v26 = v25;
  v27 = v39;
  v28 = size;
  v29 = v47;
  v30 = *(uint64_t (**)(CFTypeRef, CFIndex, uint64_t, void *, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
  if (!v30)
  {
    v35 = 4294954514;
LABEL_47:
    CFAllocatorDeallocate(v22, v26);
    goto LABEL_33;
  }
  v31 = v30(v27, v28, v29, v26, &v45);
  if ((_DWORD)v31)
  {
LABEL_53:
    v35 = v31;
    goto LABEL_47;
  }
  if (v45 != size || (v32 = CFDataCreateWithBytesNoCopy(v22, (const UInt8 *)v26, v45, v22)) == 0)
  {
    v31 = FigSignalErrorAt();
    goto LABEL_53;
  }
  v33 = v32;
  if (a6)
  {
    v34 = cf;
    if (cf)
      v34 = CFRetain(cf);
    *a6 = v34;
  }
  v35 = 0;
  *a5 = v33;
LABEL_33:
  if (v43)
    CFRelease(v43);
  if (v42)
    CFRelease(v42);
  if (v41)
    CFRelease(v41);
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (cf)
    CFRelease(cf);
  return v35;
}

uint64_t FCSupport_CopyChapterTimesForChapterGroup(CFArrayRef theArray, CFIndex a2, __CFArray **a3)
{
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  __CFArray *Mutable;
  CFIndex i;
  const __CFDictionary *v13;
  const void *v14;

  if ((a2 & 0x8000000000000000) == 0 && a3)
  {
    if (!theArray)
      goto LABEL_10;
    if (CFArrayGetCount(theArray) > a2)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, a2);
      Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("chapterGroupKey_PerChapterInfo"));
      if (Value)
      {
        v8 = Value;
        Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          v10 = Count;
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          for (i = 0; i != v10; ++i)
          {
            v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
            v14 = CFDictionaryGetValue(v13, CFSTR("ChapterTime"));
            CFArrayAppendValue(Mutable, v14);
          }
          goto LABEL_11;
        }
      }
LABEL_10:
      Mutable = 0;
LABEL_11:
      *a3 = Mutable;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FCSupport_CopyChapterTimeRangesForChapterGroup(CFArrayRef theArray, CFIndex a2, __CFArray **a3)
{
  __CFArray **v3;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  CFIndex v13;
  void *v14;
  void *v15;
  const CFDictionaryValueCallBacks *v16;
  const __CFDictionary *v17;
  void *v18;
  void *v19;
  CFDictionaryRef v20;
  __CFArray **v22;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = a3;
    if (a3)
    {
      if (!theArray)
        goto LABEL_12;
      if (CFArrayGetCount(theArray) > a2)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, a2);
        Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("chapterGroupKey_PerChapterInfo"));
        if (Value)
        {
          v8 = Value;
          Count = CFArrayGetCount(Value);
          if (Count >= 1)
          {
            v10 = Count;
            v22 = v3;
            v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            v13 = 0;
            v14 = (void *)*MEMORY[0x1E0CA2E48];
            v15 = (void *)*MEMORY[0x1E0CA2E38];
            v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
            do
            {
              v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v13);
              v18 = (void *)CFDictionaryGetValue(v17, CFSTR("ChapterTime"));
              v19 = (void *)CFDictionaryGetValue(v17, CFSTR("ChapterDuration"));
              keys[0] = v14;
              keys[1] = v15;
              values[0] = v18;
              values[1] = v19;
              v20 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], v16);
              CFArrayAppendValue(Mutable, v20);
              if (v20)
                CFRelease(v20);
              ++v13;
            }
            while (v10 != v13);
            v3 = v22;
            goto LABEL_13;
          }
        }
LABEL_12:
        Mutable = 0;
LABEL_13:
        *v3 = Mutable;
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

void fcSupport_getTrackMediaTypeAndEnabled(uint64_t a1, uint64_t a2, Boolean *a3)
{
  unsigned int (*v6)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  Boolean v9;
  CFTypeRef cf;
  CFTypeRef cf1;

  cf = 0;
  v6 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (v6 && !v6(a1, a2, &cf, 0))
  {
    cf1 = 0;
    FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
    v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v8 && (v8(FigBaseObject, CFSTR("TrackEnabled"), *MEMORY[0x1E0C9AE00], &cf1), cf1))
    {
      v9 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      CFRelease(cf1);
    }
    else
    {
      v9 = 1;
    }
    *a3 = v9;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t IFFParseByteStreamAndCreateItemInformation(char a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef *v10;
  _OWORD v12[7];
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  if ((a1 & 1) != 0)
    LOBYTE(v13) = 1;
  memset(v12, 0, sizeof(v12));
  v5 = FigAtomStreamInitWithByteStream();
  if ((_DWORD)v5)
    goto LABEL_23;
  v6 = IFFParseChildAtoms((uint64_t)v12, 3, (uint64_t)&IFFParseByteStreamAndCreateItemInformation_atomDispatch, (uint64_t)&v13);
  if (!*((_QWORD *)&v13 + 1))
  {
    v7 = v6;
    if ((_DWORD)v6)
      goto LABEL_13;
  }
  if (!*((_QWORD *)&v13 + 1))
  {
    v5 = FigSignalErrorAt();
LABEL_23:
    v7 = v5;
    goto LABEL_13;
  }
  v8 = CFRetain(a2);
  v9 = *((_QWORD *)&v13 + 1);
  *(_QWORD *)(*((_QWORD *)&v13 + 1) + 16) = v8;
  v5 = PerformIFFItemBodyParsing(v9);
  if ((_DWORD)v5)
    goto LABEL_23;
  v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!(_DWORD)v14)
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v5 = IFFInformationSetTracksDetected(*((uint64_t *)&v13 + 1), *v10);
  if ((_DWORD)v5)
    goto LABEL_23;
  v7 = IFFInformationSetBrands(*((_QWORD **)&v13 + 1), *((CFTypeRef *)&v14 + 1), (const void *)v15, *((const void **)&v15 + 1));
  if (!(_DWORD)v7)
  {
    *a3 = *((_QWORD *)&v13 + 1);
    *((_QWORD *)&v13 + 1) = 0;
  }
LABEL_13:
  if (*((_QWORD *)&v13 + 1))
    CFRelease(*((CFTypeRef *)&v13 + 1));
  if (*((_QWORD *)&v14 + 1))
    CFRelease(*((CFTypeRef *)&v14 + 1));
  if ((_QWORD)v15)
    CFRelease((CFTypeRef)v15);
  if (*((_QWORD *)&v15 + 1))
    CFRelease(*((CFTypeRef *)&v15 + 1));
  return v7;
}

uint64_t ParseFileTypeAtom(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  CFMutableArrayRef *v6;
  uint64_t v7;

  v4 = a2[3];
  v3 = a2 + 3;
  if (v4)
    return FigSignalErrorAt();
  v5 = a2 + 4;
  if (a2[4])
    return FigSignalErrorAt();
  v7 = a2[5];
  v6 = (CFMutableArrayRef *)(a2 + 5);
  if (v7)
    return FigSignalErrorAt();
  else
    return IFFParseFileTypeAtom(a1, v3, v5, v6);
}

uint64_t ParseGlobalMetaDataAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef cf;
  _OWORD v7[7];

  cf = 0;
  if (*(_QWORD *)(a2 + 8))
    return 0;
  memset(v7, 0, sizeof(v7));
  v3 = CheckAtomVersionIsZero();
  if ((_DWORD)v3
    || (v3 = IFFItemInformationCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf), (_DWORD)v3)
    || (v3 = FigAtomStreamInitWithParent(), (_DWORD)v3))
  {
    v4 = v3;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = cf;
    v4 = IFFParseChildAtoms((uint64_t)v7, 9, (uint64_t)&ParseGlobalMetaDataAtom_atomDispatch, a2);
    if (!(_DWORD)v4)
      return v4;
    *(_QWORD *)(a2 + 8) = 0;
  }
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t ParseGlobalMovieAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD v5[7];

  memset(v5, 0, sizeof(v5));
  v3 = FigAtomStreamInitWithParent();
  if (!(_DWORD)v3 && IFFParseChildAtoms((uint64_t)v5, 1, (uint64_t)"kart", a2))
    *(_DWORD *)(a2 + 16) = 0;
  return v3;
}

uint64_t IFFParseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  _DWORD *v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  char *v22;
  char v23;

  v8 = 0;
  v9 = 0;
  v10 = (_DWORD *)(a3 + 8);
  while (2)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a2 < 1)
    {
      v18 = 0;
      v13 = 0;
      goto LABEL_20;
    }
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v10;
    while (1)
    {
      v16 = *(v15 - 1);
      if ((v16 & 4) != 0)
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t))v15;
        goto LABEL_12;
      }
      if (!*(v15 - 2))
        break;
LABEL_12:
      v15 += 4;
      if (a2 == ++v14)
        goto LABEL_16;
    }
    v17 = 1 << v14;
    if ((v16 & 1) != 0 && (v8 & v17) != 0)
      return FigSignalErrorAt();
    v8 |= v17;
    result = (*(uint64_t (**)(uint64_t, uint64_t))v15)(a1, a4);
    v13 = 1;
    if ((_DWORD)result == 1717723499)
    {
      v12 = 1;
      goto LABEL_12;
    }
    if ((_DWORD)result == 1937010544)
      goto LABEL_30;
    if ((_DWORD)result)
      return result;
LABEL_16:
    v18 = v12 != 0;
    if (v12 && !v9)
      return FigSignalErrorAt();
LABEL_20:
    if (((v13 != 0) & ~v18) != 0 || !v9)
    {
LABEL_24:
      result = FigAtomStreamAdvanceToNextAtom();
      v19 = result;
      v20 = (_DWORD)result == -12890;
      if ((_DWORD)result == -12890)
        result = 0;
      else
        result = result;
      if (v20)
        goto LABEL_31;
      if ((_DWORD)result)
      {
        result = v19;
        goto LABEL_31;
      }
      continue;
    }
    break;
  }
  result = v9(a1, a4);
  if ((_DWORD)result == 1937010544)
  {
LABEL_30:
    result = 0;
LABEL_31:
    if (a2 >= 1)
    {
      v21 = 0;
      v22 = (char *)(a3 + 4);
      do
      {
        v23 = *v22;
        v22 += 16;
        if ((v23 & 2) != 0 && ((v8 >> v21) & 1) == 0)
          result = FigSignalErrorAt();
        ++v21;
      }
      while (a2 != v21);
    }
    return result;
  }
  if (!(_DWORD)result)
    goto LABEL_24;
  return result;
}

uint64_t PerformIFFItemBodyParsing(uint64_t result)
{
  _QWORD *v1;
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  const __CFAllocator *v5;
  int ItemExtents;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  CFIndex v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, unint64_t, uint64_t, char *, _QWORD *);
  unsigned int *v24;
  const __CFAllocator *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const __CFAllocator *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, unint64_t, uint64_t, unsigned __int8 *, _OWORD *);
  unsigned int *v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  const __CFAllocator *v53;
  unint64_t v54;
  __int32 v55;
  int64x2_t *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int (*v68)(uint64_t, unint64_t, uint64_t, unsigned int *, _QWORD *);
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  BOOL v77;
  uint64_t v79;
  uint64_t v80;
  const __CFAllocator *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t, char *, _QWORD *);
  CFIndex v98;
  unsigned __int8 v99;
  const __CFArray *Count;
  _QWORD *ValueAtIndex;
  uint64_t v102;
  int *v103;
  int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned __int16 *v107;
  int *v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  _DWORD *v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  const __CFAllocator *v120;
  unsigned int *v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  int64x2_t v128;
  int32x2_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64x2_t v133;
  int8x16_t v134;
  unint64_t v135;
  char *v136;
  _DWORD *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  const __CFAllocator *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  const __CFAllocator *v150;
  _QWORD *v151;
  const __CFArray *ItemCount;
  CFIndex v153;
  CFIndex v154;
  CFIndex v155;
  unsigned __int8 *v156;
  uint64_t v157;
  unsigned __int8 *v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  _OWORD v166[9];
  _QWORD v167[4];

  v167[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (_QWORD *)result;
    ItemCount = IFFInformationGetItemCount(result);
    if ((uint64_t)ItemCount >= 1)
    {
      v2 = 0;
      v151 = v1;
      do
      {
        v160 = 0;
        v159 = 0;
        result = IFFInformationGetItemAtIndex((uint64_t)v1, v2, &v160, 0, 0);
        if ((_DWORD)result)
          return result;
        result = IFFInformationGetItemType(v160, &v159);
        if ((_DWORD)result)
          return result;
        if (v159 > 1768912491)
        {
          if (v159 == 1768912492)
          {
            v79 = v160;
            v80 = v1[2];
            v81 = CFGetAllocator(v1);
            *(_QWORD *)&v166[0] = 0;
            v163 = 0;
            v164 = 0;
            v162 = 0;
            ItemExtents = IFFInformationGetItemExtents(v79, 0, v166, &v164, &v163, &v162);
            if (!ItemExtents)
            {
              v82 = v163;
              if (v163 >= 1)
              {
                v83 = 0;
                v84 = (uint64_t *)(v162 + 8);
                do
                {
                  v85 = v83;
                  v86 = *v84;
                  v84 += 2;
                  v83 += v86;
                  if (v85 >= v83)
                    goto LABEL_117;
                  --v82;
                }
                while (v82);
                if (v83 > 1 && (v83 & 0x8000000000000000) == 0 && v83 <= 0x100000)
                {
                  v87 = (unsigned __int8 *)CFAllocatorAllocate(v81, v83, 0);
                  if (v87)
                  {
                    v148 = v79;
                    v150 = v81;
                    v154 = v2;
                    v158 = v87;
                    if (v163 >= 1)
                    {
                      v88 = 0;
                      v89 = 0;
                      v90 = v162;
                      v91 = (char *)v87;
                      while (1)
                      {
                        v167[0] = 0;
                        v92 = (uint64_t *)(v90 + v88);
                        v93 = v164;
                        v94 = *(_QWORD *)&v166[0];
                        v95 = *v92;
                        v96 = v92[1];
                        v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                        if (!v97)
                          break;
                        if (v97(v80, v96, v94 + v93 + v95, v91, v167))
                          break;
                        v90 = v162;
                        if (v167[0] != *(_QWORD *)(v162 + v88 + 8))
                          break;
                        v91 += v167[0];
                        ++v89;
                        v88 += 16;
                        if (v89 >= v163)
                          goto LABEL_110;
                      }
                      v118 = FigSignalErrorAt();
                      v104 = 0;
                      v53 = v150;
                      v1 = v151;
                      v49 = (unsigned int *)v158;
LABEL_138:
                      free(v104);
LABEL_139:
                      v2 = v154;
                      goto LABEL_171;
                    }
LABEL_110:
                    v49 = (unsigned int *)v158;
                    if (*v158)
                    {
LABEL_182:
                      v118 = FigSignalErrorAt();
                      v53 = v150;
                      v1 = v151;
                      goto LABEL_139;
                    }
                    v98 = 0;
                    v99 = v158[1];
                    v1 = v151;
                    while (1)
                    {
                      Count = *(const __CFArray **)(v148 + 520);
                      if (Count)
                        Count = (const __CFArray *)CFArrayGetCount(Count);
                      if (v98 >= (uint64_t)Count)
                        break;
                      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v148 + 520), v98++);
                      if (*(_DWORD *)ValueAtIndex == 1684630887)
                      {
                        v102 = ValueAtIndex[1];
                        goto LABEL_123;
                      }
                    }
                    v102 = 0;
LABEL_123:
                    if (v83 <= 9)
                    {
                      v118 = FigSignalErrorAt();
                      v104 = 0;
                    }
                    else
                    {
                      v167[0] = vrev16_s8(*(int8x8_t *)(v158 + 2));
                      v103 = (int *)malloc_type_calloc(v102, 8uLL, 0x100004052888210uLL);
                      v104 = v103;
                      if (v103)
                      {
                        if ((v99 & 1) == 0)
                        {
                          v53 = v150;
                          if (v83 >= 4 * v102 + 14)
                          {
                            v105 = *((unsigned __int16 *)v158 + 5);
                            v106 = *((unsigned __int16 *)v158 + 6);
                            if (v102 >= 1)
                            {
                              v107 = (unsigned __int16 *)(v158 + 14);
                              v108 = v103 + 1;
                              v109 = v102;
                              do
                              {
                                *(v108 - 1) = (int)bswap32(*v107) >> 16;
                                *v108 = (int)bswap32(v107[1]) >> 16;
                                v108 += 2;
                                v107 += 2;
                                --v109;
                              }
                              while (v109);
                            }
                            v110 = bswap32(v105) >> 16;
                            v111 = bswap32(v106) >> 16;
                            goto LABEL_136;
                          }
                          v117 = FigSignalErrorAt();
LABEL_137:
                          v118 = v117;
                          goto LABEL_138;
                        }
                        if (v83 >= 8 * v102 + 18)
                        {
                          v112 = *(_DWORD *)(v158 + 10);
                          v113 = *(_DWORD *)(v158 + 14);
                          v53 = v150;
                          if (v102 >= 1)
                          {
                            v114 = (unsigned int *)(v158 + 18);
                            v115 = v103 + 1;
                            v116 = v102;
                            do
                            {
                              *(v115 - 1) = bswap32(*v114);
                              *v115 = bswap32(v114[1]);
                              v115 += 2;
                              v114 += 2;
                              --v116;
                            }
                            while (v116);
                          }
                          v110 = bswap32(v112);
                          v111 = bswap32(v113);
LABEL_136:
                          v117 = IFFInformationSetItemBodyImageDerivationOverlay(v148, v167, v110, v111, v103, v102);
                          goto LABEL_137;
                        }
                      }
                      v118 = FigSignalErrorAt();
                    }
                    v53 = v150;
                    goto LABEL_138;
                  }
                }
              }
              goto LABEL_117;
            }
LABEL_118:
            if (!ItemExtents)
              goto LABEL_174;
LABEL_173:
            *(_BYTE *)(v160 + 16) = 0;
            goto LABEL_174;
          }
          if (v159 == 1953325424)
          {
            v30 = v160;
            v31 = v1[2];
            v32 = CFGetAllocator(v1);
            v165 = 0;
            v163 = 0;
            v164 = 0;
            v162 = 0;
            v167[0] = 0;
            ItemExtents = IFFInformationGetItemExtents(v30, &v165, &v164, &v163, &v162, v167);
            if (ItemExtents)
              goto LABEL_118;
            v33 = v162;
            if (v162 < 1)
              goto LABEL_117;
            v34 = 0;
            v35 = (uint64_t *)(v167[0] + 8);
            do
            {
              v36 = v34;
              v37 = *v35;
              v35 += 2;
              v34 += v37;
              if (v36 >= v34)
                goto LABEL_117;
              --v33;
            }
            while (v33);
            if (v34 <= 2)
              goto LABEL_117;
            if ((v34 & 0x8000000000000000) != 0)
              goto LABEL_117;
            v38 = (unsigned __int8 *)CFAllocatorAllocate(v32, v34, 0);
            if (!v38)
              goto LABEL_117;
            v147 = v30;
            v150 = v32;
            v154 = v2;
            v156 = v38;
            if (v162 < 1)
            {
LABEL_57:
              v49 = (unsigned int *)v156;
              v50 = *v156;
              v51 = v34 - 1;
              if (*v156)
              {
                memset(v166, 0, sizeof(v166));
                if (v50 != 255)
                  goto LABEL_182;
                v52 = v156[1];
                v53 = v150;
                v1 = v151;
                v2 = v154;
                if (v52 < 0x10)
                {
                  BYTE4(v166[0]) = v52 & 1;
                  BYTE5(v166[0]) = (v52 & 2) != 0;
                  v54 = v52 >= 8 ? 13 : 17;
                  if (v54 <= v51)
                  {
                    if (v52 >= 8)
                    {
                      v56 = (int64x2_t *)(v156 + 14);
                      v129 = (int32x2_t)vrev32_s8(*(int8x8_t *)(v156 + 2));
                      *(_QWORD *)&v166[1] = __PAIR64__(v129.u32[0], bswap32(*(_DWORD *)(v156 + 10)));
                      v55 = v129.i32[0];
                      *((int32x2_t *)&v166[0] + 1) = vrev64_s32(v129);
                      v57 = 20;
                    }
                    else
                    {
                      v55 = 0;
                      v56 = (int64x2_t *)(v156 + 18);
                      *(int8x16_t *)((char *)v166 + 8) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)(v156 + 2), 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(v156 + 2), 0x20uLL)));
                      v57 = 40;
                    }
                    v130 = 3;
                    if ((v52 & 1) == 0)
                      v130 = 1;
                    if (v54 + v57 * (unint64_t)v130 <= v51)
                    {
                      v131 = 0;
                      v132 = (8 * v130) | (32 * v130);
                      do
                      {
                        if (v52 >= 8)
                        {
                          v137 = (_DWORD *)((char *)v166 + v131);
                          v138 = v56->i32[0];
                          v139 = v56->u32[1];
                          v141 = v56->u32[2];
                          v140 = v56->u32[3];
                          v142 = v56[1].u32[0];
                          v56 = (int64x2_t *)((char *)v56 + 20);
                          v137[6] = bswap32(v138);
                          v137[7] = v55;
                          v137[8] = bswap32(v139);
                          v137[9] = v55;
                          v137[10] = bswap32(v141);
                          v137[11] = v55;
                          v137[12] = bswap32(v140);
                          v137[13] = v55;
                          v137[14] = bswap32(v142);
                          v137[15] = v55;
                        }
                        else
                        {
                          v133 = v56[1];
                          v134 = vorrq_s8((int8x16_t)vshlq_n_s64(*v56, 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v56, 0x20uLL));
                          v135 = v56[2].u64[0];
                          v56 = (int64x2_t *)((char *)v56 + 40);
                          v136 = (char *)v166 + v131;
                          *(int8x16_t *)(v136 + 24) = vrev64q_s8(v134);
                          *(int8x16_t *)(v136 + 40) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v133, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v133, 0x20uLL)));
                          *((_QWORD *)v136 + 7) = __rev32(v135);
                        }
                        v131 += 40;
                      }
                      while (v132 != v131);
                      if ((v52 & 1) == 0)
                      {
LABEL_168:
                        v166[4] = *(_OWORD *)((char *)&v166[1] + 8);
                        v166[5] = *(_OWORD *)((char *)&v166[2] + 8);
                        *(_QWORD *)&v166[6] = *((_QWORD *)&v166[3] + 1);
                        *(_OWORD *)((char *)&v166[6] + 8) = *(_OWORD *)((char *)&v166[1] + 8);
                        *(_OWORD *)((char *)&v166[7] + 8) = *(_OWORD *)((char *)&v166[2] + 8);
                        *((_QWORD *)&v166[8] + 1) = *((_QWORD *)&v166[3] + 1);
                      }
LABEL_169:
                      v143 = IFFInformationSetItemBodyImageDerivationTonemap(v147, (uint64_t)v166);
LABEL_170:
                      v118 = v143;
                      goto LABEL_171;
                    }
                  }
                }
              }
              else
              {
                memset((char *)v166 + 4, 0, 140);
                if (v34 <= 5)
                  goto LABEL_182;
                v53 = v150;
                v1 = v151;
                v2 = v154;
                if (!*(_WORD *)(v156 + 1))
                {
                  v122 = bswap32(*(unsigned __int16 *)(v156 + 3)) >> 16;
                  v123 = (char)v156[5];
                  BYTE4(v166[0]) = (v123 & 0x80) != 0;
                  BYTE5(v166[0]) = (v123 & 0x40) != 0;
                  LOWORD(v166[0]) = 0;
                  WORD1(v166[0]) = v122;
                  v124 = v123 >= 0 ? 1 : 3;
                  if (v51 >= 40 * v124 + 21)
                  {
                    v125 = 0;
                    *(int8x16_t *)((char *)v166 + 8) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)(v156 + 6), 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(v156 + 6), 0x20uLL)));
                    do
                    {
                      v126 = *(_QWORD *)&v156[v125 + 54];
                      v127 = (char *)v166 + v125;
                      v128 = *(int64x2_t *)&v156[v125 + 38];
                      *(int8x16_t *)(v127 + 24) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&v156[v125 + 22], 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)&v156[v125 + 22], 0x20uLL)));
                      *(int8x16_t *)(v127 + 40) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v128, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v128, 0x20uLL)));
                      *((_QWORD *)v127 + 7) = __rev32(v126);
                      v125 += 40;
                    }
                    while (40 * v124 != v125);
                    if ((v123 & 0x80000000) == 0)
                      goto LABEL_168;
                    goto LABEL_169;
                  }
                }
              }
              v143 = FigSignalErrorAt();
              goto LABEL_170;
            }
            v39 = 0;
            v40 = 1;
            v41 = v34;
            v42 = v38;
            while (1)
            {
              v43 = *(_QWORD *)(v167[0] + v39 + 8);
              *(_QWORD *)&v166[0] = 0;
              v44 = v163;
              v45 = v164;
              v46 = *(_QWORD *)(v167[0] + v39);
              v47 = *(unsigned int (**)(uint64_t, unint64_t, uint64_t, unsigned __int8 *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v47)
                break;
              if (v41 < v43)
                v43 = v41;
              if (v47(v31, v43, v45 + v44 + v46, v42, v166) || *(_QWORD *)&v166[0] != v43)
                break;
              if (v40 < v162)
              {
                v42 += v43;
                ++v40;
                v39 += 16;
                v41 -= v43;
                if (v41)
                  continue;
              }
              goto LABEL_57;
            }
            v118 = FigSignalErrorAt();
            v53 = v150;
            v1 = v151;
            v2 = v154;
            v49 = (unsigned int *)v156;
LABEL_171:
            v120 = v53;
            v121 = v49;
LABEL_172:
            CFAllocatorDeallocate(v120, v121);
            if (v118)
              goto LABEL_173;
          }
        }
        else if (v159 == 1165519206)
        {
          v58 = v160;
          v59 = v1[2];
          v161 = 0;
          *(_QWORD *)&v166[0] = 0;
          v163 = 0;
          v164 = 0;
          v162 = 0;
          ItemExtents = IFFInformationGetItemExtents(v160, &v161, v166, &v164, &v163, &v162);
          if (ItemExtents)
            goto LABEL_118;
          if (v163 >= 1)
          {
            v155 = v2;
            v157 = v58;
            v60 = 0;
            v61 = &v165;
            v62 = 1;
            v63 = 4;
            while (1)
            {
              v64 = v164;
              v65 = *(_QWORD *)&v166[0];
              v66 = *(_QWORD *)(v162 + v60);
              v67 = *(_QWORD *)(v162 + v60 + 8);
              v167[0] = 0;
              v68 = *(unsigned int (**)(uint64_t, unint64_t, uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v68)
                break;
              if (v67 >= v63)
                v67 = v63;
              if (v68(v59, v67, v65 + v64 + v66, v61, v167) || v167[0] != v67)
                break;
              v61 = (unsigned int *)((char *)v61 + v67);
              v63 -= v67;
              if (v63)
                v70 = v163 <= v62;
              else
                v70 = 1;
              ++v62;
              v60 += 16;
              if (v70)
              {
                v2 = v155;
                v1 = v151;
                if (v63)
                  goto LABEL_180;
                v71 = bswap32(v165);
                v72 = v71;
                if (v165)
                {
                  v72 = v71;
                  if (v163 >= 1)
                  {
                    v73 = (unint64_t *)(v162 + 8);
                    v74 = 1;
                    v72 = v71;
                    do
                    {
                      v75 = *v73;
                      v73 += 2;
                      v76 = v72 >= v75;
                      v72 -= v75;
                      v77 = v72 != 0 && v76;
                      if (!v76)
                        v72 = 0;
                    }
                    while (v77 && v163 > v74++);
                  }
                }
                if (!v72)
                {
                  ItemExtents = IFFInformationSetItemBodyImageExifPayload(v157, v71);
                  goto LABEL_118;
                }
                goto LABEL_117;
              }
            }
            v2 = v155;
            v1 = v151;
            if (FigSignalErrorAt())
              goto LABEL_173;
            goto LABEL_174;
          }
LABEL_180:
          if (FigSignalErrorAt())
            goto LABEL_173;
        }
        else if (v159 == 1735551332)
        {
          v3 = v160;
          v4 = v1[2];
          v5 = CFGetAllocator(v1);
          v165 = 0;
          *(_QWORD *)&v166[0] = 0;
          v163 = 0;
          v164 = 0;
          v162 = 0;
          ItemExtents = IFFInformationGetItemExtents(v3, &v165, v166, &v164, &v163, &v162);
          if (!ItemExtents)
          {
            v7 = v163;
            if (v163 >= 1)
            {
              v8 = 0;
              v9 = (uint64_t *)(v162 + 8);
              do
              {
                v10 = *v9;
                v9 += 2;
                v11 = v10 + v8;
                if (v8 >= v10 + v8)
                  goto LABEL_117;
                v8 = v11;
                --v7;
              }
              while (v7);
              if (v11 > 1)
              {
                v12 = v11 >= 0xC ? 12 : v11;
                v145 = v12;
                v13 = (unsigned int *)CFAllocatorAllocate(v5, v12, 0);
                if (v13)
                {
                  v153 = v2;
                  v144 = v3;
                  v146 = v5;
                  v149 = v13;
                  if (v163 >= 1)
                  {
                    v14 = 0;
                    v15 = 1;
                    v16 = v145;
                    v17 = (char *)v13;
                    while (1)
                    {
                      v18 = *(_QWORD *)(v162 + v14 + 8);
                      v167[0] = 0;
                      v19 = v164;
                      v20 = *(_QWORD *)&v166[0];
                      v21 = *(_QWORD *)(v162 + v14);
                      v22 = *(unsigned int (**)(uint64_t, unint64_t, uint64_t, char *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                      if (!v22)
                        break;
                      if (v16 < v18)
                        v18 = v16;
                      if (v22(v4, v18, v20 + v19 + v21, v17, v167) || v167[0] != v18)
                        break;
                      if (v15 < v163)
                      {
                        v17 += v18;
                        ++v15;
                        v14 += 16;
                        v16 -= v18;
                        if (v16)
                          continue;
                      }
                      goto LABEL_31;
                    }
                    v118 = FigSignalErrorAt();
                    v24 = v149;
                    v1 = v151;
                    v2 = v153;
LABEL_145:
                    v25 = v146;
LABEL_146:
                    v120 = v25;
                    v121 = v24;
                    goto LABEL_172;
                  }
LABEL_31:
                  v24 = v149;
                  if (*(_BYTE *)v149)
                  {
                    v118 = FigSignalErrorAt();
                    v1 = v151;
                    v2 = v153;
                    goto LABEL_145;
                  }
                  v1 = v151;
                  v2 = v153;
                  v25 = v146;
                  if ((*((_BYTE *)v149 + 1) & 1) != 0)
                  {
                    if (v11 <= 0xB)
                      goto LABEL_187;
                    v26 = *((unsigned __int8 *)v149 + 2) + 1;
                    v27 = *((unsigned __int8 *)v149 + 3) + 1;
                    v28 = bswap32(v149[1]);
                    v29 = bswap32(v149[2]);
LABEL_142:
                    v119 = IFFInformationSetItemBodyImageDerivationGrid(v144, v27, v26, v28, v29);
                  }
                  else
                  {
                    if (v145 > 7)
                    {
                      v26 = *((unsigned __int8 *)v149 + 2) + 1;
                      v27 = *((unsigned __int8 *)v149 + 3) + 1;
                      v28 = bswap32(*((unsigned __int16 *)v149 + 2)) >> 16;
                      v29 = bswap32(*((unsigned __int16 *)v149 + 3)) >> 16;
                      goto LABEL_142;
                    }
LABEL_187:
                    v119 = FigSignalErrorAt();
                  }
                  v118 = v119;
                  goto LABEL_146;
                }
              }
            }
LABEL_117:
            ItemExtents = FigSignalErrorAt();
          }
          goto LABEL_118;
        }
LABEL_174:
        ++v2;
      }
      while ((const __CFArray *)v2 != ItemCount);
    }
    return 0;
  }
  return result;
}

uint64_t IFFParseMetaAtomStreamAndCreateItemInformation()
{
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v2;
  CFTypeRef cf[2];
  __int128 v4;
  __int128 v5;

  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)cf = 0u;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  v2 = CurrentAtomTypeAndDataLength;
  if (cf[1])
    CFRelease(cf[1]);
  return v2;
}

uint64_t IFFParseFileTypeAtom(uint64_t a1, _QWORD *a2, _QWORD *a3, CFMutableArrayRef *a4)
{
  uint64_t BBuf;
  size_t v8;
  const __CFAllocator *v9;
  const void *UInt32;
  const void *v11;
  CFMutableArrayRef Mutable;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef theBuffer;

  totalLengthOut = 0;
  theBuffer = 0;
  dataPointerOut = 0;
  if (*(_DWORD *)(a1 + 64) != 1718909296)
    goto LABEL_28;
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)BBuf)
    goto LABEL_29;
  BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)BBuf)
    goto LABEL_29;
  v8 = totalLengthOut;
  if (totalLengthOut < 0xC || !dataPointerOut || (totalLengthOut & 3) != 0)
  {
LABEL_28:
    BBuf = FigSignalErrorAt();
LABEL_29:
    v15 = BBuf;
    UInt32 = 0;
LABEL_30:
    v11 = 0;
    goto LABEL_18;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  if (!UInt32)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v11 = (const void *)FigCFNumberCreateUInt32();
  if (!v11)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_18;
  }
  Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v13 = v8 >> 2;
    v14 = 2;
    do
    {
      FigCFArrayAppendInt32();
      ++v14;
    }
    while (v13 != v14);
    if (a2)
    {
      *a2 = UInt32;
      UInt32 = 0;
    }
    if (a3)
    {
      *a3 = v11;
      v11 = 0;
    }
    v15 = 0;
    if (a4)
    {
      *a4 = Mutable;
LABEL_18:
      Mutable = 0;
    }
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  if (theBuffer)
    CFRelease(theBuffer);
  if (UInt32)
    CFRelease(UInt32);
  if (v11)
    CFRelease(v11);
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

uint64_t ParseGlobalMetaDataIFFHandlerAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CheckAtomVersionIsZero();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
      return IFFInformationSetItemHandler(*(_QWORD *)(a2 + 8), bswap32(0));
  }
  return result;
}

uint64_t ParseGlobalMetaDataPrimaryItemAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
      return IFFInformationSetPrimaryItemID(*(_QWORD *)(a2 + 8), bswap32(0) >> 16);
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFDataInfoAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  memset(v4, 0, sizeof(v4));
  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
    return IFFParseChildAtoms((uint64_t)v4, 1, (uint64_t)"ferd", a2);
  return result;
}

uint64_t ParseGlobalMetaDataItemInfoAtom(uint64_t a1, uint64_t a2)
{
  uint64_t CurrentAtomTypeAndDataLength;
  int v4;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  os_log_type_t type[8];
  size_t lengthAtOffsetOut;
  unsigned int v20;
  unsigned __int16 v21;
  uint64_t v22;
  char v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  char v33;
  char *v34;
  void *v35;
  char *__s;
  CFTypeRef cf;
  unsigned __int8 v38;
  uint64_t v39;
  char *dataPointerOut[3];
  uint64_t v41[17];

  v41[16] = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v38 = 0;
  __s = 0;
  cf = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_60;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_60;
  v4 = v38;
  v5 = v38 >= 2u;
  *(_BYTE *)(*(_QWORD *)(a2 + 8) + 176) &= v38 < 2u;
  if (v5)
  {
    LODWORD(lengthAtOffsetOut) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v4 = v38;
  }
  if (!v4)
  {
    LOWORD(v41[0]) = 0;
    CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)CurrentAtomTypeAndDataLength)
    {
      v32 = bswap32(LOWORD(v41[0])) >> 16;
      goto LABEL_11;
    }
LABEL_60:
    v7 = CurrentAtomTypeAndDataLength;
    goto LABEL_56;
  }
  CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_60;
  v32 = bswap32(v32);
LABEL_11:
  v7 = FigAtomStreamInitWithParent();
  if (!(_DWORD)v7 && v32)
  {
    while (1)
    {
      v24 = 0;
      v23 = 0;
      v22 = 0;
      v41[0] = 0;
      v21 = 0;
      v20 = 0;
      CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_60;
      if (v24 == 1768842853)
      {
        CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomVersionAndFlags();
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_60;
        if ((v23 & 0xFE) != 2)
          goto LABEL_59;
        if (v23 == 2)
        {
          LOWORD(dataPointerOut[0]) = 0;
          CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_60;
          LODWORD(v22) = bswap32(LOWORD(dataPointerOut[0])) >> 16;
          v8 = 6;
        }
        else
        {
          CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_60;
          LODWORD(v22) = bswap32(v22);
          v8 = 8;
        }
        CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomData();
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_60;
        v9 = v21;
        v21 = __rev16(v21);
        if (v9)
        {
LABEL_59:
          CurrentAtomTypeAndDataLength = FigSignalErrorAt();
          goto LABEL_60;
        }
        CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomData();
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_60;
        v20 = bswap32(v20);
        CurrentAtomTypeAndDataLength = IFFInformationAddItemWithType(*(_QWORD *)(a2 + 8), v20, v22, v41, &v33);
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_60;
        if (v20 == 1970432288 || v20 == 1835625829)
        {
          v10 = v8 + 6;
          if (v39 > v10)
          {
            dataPointerOut[0] = 0;
            *(_QWORD *)type = 0;
            lengthAtOffsetOut = 0;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            v11 = v34;
            if (v34)
            {
              v34 = 0;
              free(v11);
            }
            v12 = __s;
            if (__s)
            {
              __s = 0;
              free(v12);
            }
            v13 = v35;
            if (v35)
            {
              v35 = 0;
              free(v13);
            }
            CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
            if ((_DWORD)CurrentAtomTypeAndDataLength)
              goto LABEL_60;
            CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, dataPointerOut);
            if ((_DWORD)CurrentAtomTypeAndDataLength)
              goto LABEL_60;
            CurrentAtomTypeAndDataLength = copyNullTerminatedStringAndAdvanceBuffer(dataPointerOut, &lengthAtOffsetOut, &v34, 0, (size_t *)type);
            if ((_DWORD)CurrentAtomTypeAndDataLength)
              goto LABEL_60;
            v14 = *(_QWORD *)type;
            CurrentAtomTypeAndDataLength = IFFInformationSetItemName(v41[0], v34, 0);
            if ((_DWORD)CurrentAtomTypeAndDataLength)
              goto LABEL_60;
            CurrentAtomTypeAndDataLength = copyNullTerminatedStringAndAdvanceBuffer(dataPointerOut, &lengthAtOffsetOut, &__s, 0, (size_t *)type);
            if ((_DWORD)CurrentAtomTypeAndDataLength)
              goto LABEL_60;
            if (v20 != 1835625829)
              goto LABEL_47;
            if (v14 + v10 + *(_QWORD *)type >= v39)
              goto LABEL_46;
            CurrentAtomTypeAndDataLength = copyNullTerminatedStringAndAdvanceBuffer(dataPointerOut, &lengthAtOffsetOut, &v35, 0, (size_t *)type);
            if ((_DWORD)CurrentAtomTypeAndDataLength)
              goto LABEL_60;
            if (v20 == 1835625829)
LABEL_46:
              v15 = IFFInformationSetItemMIMETypeAndEncoding(v41[0], __s, (const char *)v35);
            else
LABEL_47:
              v15 = IFFInformationSetItemURIType(v41[0], __s, 0);
            v7 = v15;
            if ((_DWORD)v15)
              break;
          }
        }
        if ((v22 & 0x100000000) == 0)
        {
          CurrentAtomTypeAndDataLength = IFFInformationSetItemDisplayable(v41[0], 1);
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_60;
        }
      }
      v16 = v32;
      if (v32 >= 2)
      {
        if (FigAtomStreamAdvanceToNextAtom())
          goto LABEL_59;
        v16 = v32;
      }
      v32 = v16 - 1;
      if (v16 == 1)
      {
        v7 = 0;
        break;
      }
    }
  }
LABEL_56:
  if (cf)
    CFRelease(cf);
  free(v34);
  free(__s);
  free(v35);
  return v7;
}

uint64_t ParseGlobalMetaDataItemLocationAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned __int16 v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  _BYTE v36[10];
  int v37;
  char v38;

  v38 = 0;
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)result)
    return result;
  if (v28 >= 2u)
  {
    if (v28 != 2)
      return FigSignalErrorAt();
    result = FigAtomStreamReadCurrentAtomData();
    if ((_DWORD)result)
      return result;
    v4 = bswap32(*(unsigned __int16 *)&v36[4]) >> 16;
    v3 = bswap32(*(unsigned int *)&v36[6]);
    v5 = 10;
  }
  else
  {
    result = FigAtomStreamReadCurrentAtomData();
    if ((_DWORD)result)
      return result;
    v3 = bswap32(HIWORD(v37)) >> 16;
    v4 = (bswap32((unsigned __int16)v37) >> 16) & 0xFFF0;
    v5 = 8;
  }
  v6 = v4 >> 12;
  if (v6 > 8 || ((1 << v6) & 0x111) == 0)
    return FigSignalErrorAt();
  v8 = (v4 >> 8) & 0xF;
  if ((_DWORD)v8 != 4 && (_DWORD)v8 != 8)
    return FigSignalErrorAt();
  if ((v4 & 0xF) != 0)
    return FigSignalErrorAt();
  v9 = v4 >> 4;
  if ((v4 & 0xB0) != 0 && v9 != 8)
    return FigSignalErrorAt();
  if (v3)
  {
    while (1)
    {
      v27 = 0;
      if (v28 == 2)
        break;
      if (v28 == 1)
      {
        result = FigAtomStreamReadCurrentAtomData();
        if ((_DWORD)result)
          return result;
        v5 += 6;
        v11 = bswap32((unsigned __int16)v34) >> 16;
        v12 = HIBYTE(v34);
        goto LABEL_27;
      }
      if (v28)
      {
        v11 = 0;
        v10 = 0;
      }
      else
      {
        result = FigAtomStreamReadCurrentAtomData();
        if ((_DWORD)result)
          return result;
        v10 = 0;
        v5 += 4;
        v11 = bswap32(*(unsigned __int16 *)v36) >> 16;
      }
LABEL_29:
      switch(v9)
      {
        case 8:
          v26 = v10;
          result = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)result)
            return result;
          v13 = bswap64(v29);
          if (v13 < 0)
            return FigSignalErrorAt();
          v5 += 10;
          v14 = v30;
LABEL_37:
          v15 = bswap32(v14) >> 16;
LABEL_40:
          v10 = v26;
          goto LABEL_42;
        case 4:
          v26 = v10;
          result = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)result)
            return result;
          v5 += 6;
          v15 = bswap32((unsigned __int16)v32) >> 16;
          v13 = bswap32(v31);
          goto LABEL_40;
        case 0:
          v26 = v10;
          result = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)result)
            return result;
          v13 = 0;
          v5 += 2;
          v14 = HIWORD(v32);
          goto LABEL_37;
      }
      v15 = 0;
      v13 = 0;
LABEL_42:
      if (v10 >= 2)
        return FigSignalErrorAt();
      v16 = v3;
      v17 = v15;
      result = IFFInformationReserveItemExtentTable(*(_QWORD *)(a2 + 8), v11, v10, v13, v15, &v27, &v38);
      if ((_DWORD)result)
        return result;
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = v13 ^ 0x7FFFFFFFFFFFFFFFLL;
        v20 = 16 * v17;
        do
        {
          if (v4 >= 0x1000)
          {
            result = FigAtomStreamReadCurrentAtomData();
            if ((_DWORD)result)
              return result;
            v21 = bswap32(0);
            v22 = bswap64(0);
            if ((_DWORD)v6 != 4)
              v21 = v22;
            *(_QWORD *)(v27 + v18) = v21;
            if (v19 < v21)
              return FigSignalErrorAt();
            v5 += v6;
          }
          else
          {
            *(_QWORD *)(v27 + v18) = 0;
          }
          result = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)result)
            return result;
          v5 += v8;
          v23 = bswap32(0);
          v24 = bswap64(0);
          if ((_DWORD)v8 != 4)
            v23 = v24;
          *(_QWORD *)(v27 + v18 + 8) = v23;
          v18 += 16;
        }
        while (v20 != v18);
      }
      v3 = v16 - 1;
      v9 = v4 >> 4;
      if (!v3)
        return 0;
    }
    result = FigAtomStreamReadCurrentAtomData();
    if ((_DWORD)result)
      return result;
    v5 += 8;
    v11 = bswap32(v33);
    v12 = BYTE5(v33);
LABEL_27:
    v10 = v12 & 0xF;
    goto LABEL_29;
  }
  return 0;
}

uint64_t ParseGlobalMetaDataIFFItemReferenceAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;

  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!(_DWORD)result)
  {
    if (v19 >= 2u)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = FigAtomStreamInitWithParent();
      if ((_DWORD)result == -12893)
      {
        return 0;
      }
      else if (!(_DWORD)result)
      {
        while (1)
        {
          v11 = 0;
          v10 = 0;
          v9 = 0;
          result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
          if ((_DWORD)result)
            break;
          if ((_BYTE)v19)
          {
            result = FigAtomStreamReadCurrentAtomData();
            if ((_DWORD)result)
              return result;
            LODWORD(v11) = bswap32(v11);
            v4 = 4;
          }
          else
          {
            result = FigAtomStreamReadCurrentAtomData();
            if ((_DWORD)result)
              return result;
            LODWORD(v11) = bswap32(0) >> 16;
            v4 = 2;
          }
          result = FigAtomStreamReadCurrentAtomData();
          if ((_DWORD)result)
            break;
          v5 = bswap32(v10);
          v10 = HIWORD(v5);
          result = IFFInformationReserveItemReferenceTable(*(_QWORD *)(a2 + 8), v11, SHIDWORD(v11), HIWORD(v5), &v9, (_BYTE *)&v19 + 1);
          if ((_DWORD)result)
            break;
          if (v10)
          {
            v6 = 0;
            v7 = v4 + 2;
            do
            {
              if ((_BYTE)v19)
              {
                result = FigAtomStreamReadCurrentAtomData();
                if ((_DWORD)result)
                  return result;
                v7 += 4;
                v8 = bswap32(0);
              }
              else
              {
                result = FigAtomStreamReadCurrentAtomData();
                if ((_DWORD)result)
                  return result;
                v7 += 2;
                v8 = bswap32(0) >> 16;
              }
              *(_DWORD *)(v9 + 4 * v6++) = v8;
            }
            while (v6 < v10);
          }
          if (FigAtomStreamAdvanceToNextAtom())
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataItemPropertiesAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  memset(v4, 0, sizeof(v4));
  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
    return IFFParseChildAtoms((uint64_t)v4, 2, (uint64_t)&ParseGlobalMetaDataItemPropertiesAtom_atomDispatch, a2);
  return result;
}

uint64_t ParseGlobalMetaDataItemDataAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomDataGlobalOffset();
  if (!(_DWORD)result)
    return IFFInformationSetItemDataOffset(*(_QWORD *)(a2 + 8), 0);
  return result;
}

uint64_t ParseGlobalMetaDataGroupsListAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  memset(v4, 0, sizeof(v4));
  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
    return IFFParseChildAtoms((uint64_t)v4, 4, (uint64_t)"rets", a2);
  return result;
}

uint64_t ParseGlobalMetaDataDataRefAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t copyNullTerminatedStringAndAdvanceBuffer(_BYTE **a1, size_t *a2, _QWORD *a3, CFStringRef *a4, size_t *a5)
{
  uint64_t result;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  _BOOL8 v16;
  _BYTE *v17;
  _BYTE *v18;
  CFStringRef v19;
  size_t v20;

  if (a3)
    *a3 = 0;
  if (a5)
    *a5 = 0;
  result = 4294954516;
  if (a1)
  {
    if (a2)
    {
      v11 = *a1;
      if (*a1)
      {
        v12 = *a2;
        if (!*a2)
          return 0;
        if (*v11)
        {
          v13 = 1;
          while (1)
          {
            v14 = v13;
            if (v12 == v13)
              break;
            ++v13;
            if (!v11[v14])
            {
              v15 = v14;
              goto LABEL_18;
            }
          }
          v15 = *a2;
LABEL_18:
          v16 = v14 < v12;
          if (a3)
            goto LABEL_19;
        }
        else
        {
          v15 = 0;
          v16 = 1;
          if (a3)
          {
LABEL_19:
            v17 = malloc_type_malloc(v15 + 1, 0xE78362C5uLL);
            if (!v17)
              return FigSignalErrorAt();
            v18 = v17;
            memcpy(v17, v11, v15);
            v18[v15] = 0;
            *a3 = v18;
            if (!a4)
            {
LABEL_23:
              v20 = v15 + v16;
              if (a5)
                *a5 = v20;
              result = 0;
              *a1 = &v11[v20];
              *a2 = v12 - v20;
              return result;
            }
LABEL_21:
            v19 = CFStringCreateWithBytes(0, v11, v15, 0x8000100u, 0);
            if (v19)
            {
              *a4 = v19;
              goto LABEL_23;
            }
            return FigSignalErrorAt();
          }
        }
        if (!a4)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyContainerAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  memset(v4, 0, sizeof(v4));
  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
    return IFFParseChildAtoms((uint64_t)v4, 26, (uint64_t)"Ccva", a2);
  return result;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAssociationAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyCodecConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int CurrentAtomTypeAndDataLength;
  unsigned int v4;
  BOOL v5;
  char *dataPointerOut;
  size_t v8;
  int v9;
  CMBlockBufferRef theBuffer;
  int v11[2];

  theBuffer = 0;
  *(_QWORD *)v11 = 0;
  v9 = 0;
  dataPointerOut = 0;
  v8 = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!CurrentAtomTypeAndDataLength)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if (!CurrentAtomTypeAndDataLength)
    {
      CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
      if (!CurrentAtomTypeAndDataLength)
      {
        if (dataPointerOut)
        {
          CurrentAtomTypeAndDataLength = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 1, (CFArrayRef ***)v11, 0);
          if (!CurrentAtomTypeAndDataLength)
            CurrentAtomTypeAndDataLength = IFFInformationSetItemPropertyCodecConfiguration(*(uint64_t *)v11, v9, dataPointerOut, v8);
        }
        else
        {
          CurrentAtomTypeAndDataLength = FigSignalErrorAt();
        }
      }
    }
  }
  v4 = CurrentAtomTypeAndDataLength;
  if (theBuffer)
    CFRelease(theBuffer);
  if (*(_QWORD *)v11)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
    return v4;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyImageSpatialExtents(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  int v6;
  CFArrayRef **v7;

  v7 = 0;
  LODWORD(result) = CheckAtomVersionIsZero();
  if ((_DWORD)result)
    goto LABEL_13;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
    goto LABEL_13;
  v6 = bswap32(0);
  if (v6 < 0)
  {
    LODWORD(result) = FigSignalErrorAt();
LABEL_13:
    v4 = 0;
    goto LABEL_6;
  }
  LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 2, &v7, 0);
  v4 = v7;
  if (!(_DWORD)result)
  {
    LODWORD(result) = IFFInformationSetItemPropertySpatialExtents((uint64_t)v7, v6, v6);
    v4 = v7;
  }
LABEL_6:
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyPixelAspectRatio(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  CFArrayRef **v5;
  BOOL v6;
  unint64_t v7;
  CFArrayRef **v8;

  v8 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
  {
    v5 = 0;
  }
  else
  {
    v7 = _byteswap_uint64(0);
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(v4 + 176) &= 1u;
    LODWORD(result) = IFFInformationReserveSharedItemProperty((CFArrayRef *)v4, 3, &v8, 0);
    v5 = v8;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertySpatialExtents((uint64_t)v8, v7, SHIDWORD(v7));
      v5 = v8;
    }
  }
  if (v5)
    v6 = 1;
  else
    v6 = (_DWORD)result == 0;
  if (v6)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyPixelInformation()
{
  unsigned int CurrentAtomData;
  unsigned int v1;
  BOOL v2;
  _BYTE count[9];
  size_t lengthAtOffsetOut;
  CMBlockBufferRef theBuffer;
  int v7[2];

  theBuffer = 0;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)&count[1] = 0;
  lengthAtOffsetOut = 0;
  CurrentAtomData = CheckAtomVersionIsZero();
  if (!CurrentAtomData)
  {
    CurrentAtomData = FigAtomStreamReadCurrentAtomData();
    if (!CurrentAtomData)
    {
      CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomData)
      {
        CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, (char **)&count[1]);
        if (!CurrentAtomData)
          CurrentAtomData = FigSignalErrorAt();
      }
    }
  }
  v1 = CurrentAtomData;
  if (theBuffer)
    CFRelease(theBuffer);
  if (*(_QWORD *)v7)
    v2 = 1;
  else
    v2 = v1 == 0;
  if (v2)
    return v1;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyColorInformation(uint64_t a1, uint64_t a2)
{
  unsigned int CurrentAtomData;
  unsigned int v4;
  unsigned int v6;
  BOOL v7;
  __int16 v9;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;
  CMBlockBufferRef theBuffer;
  int v13[2];

  theBuffer = 0;
  *(_QWORD *)v13 = 0;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    v4 = bswap32(0);
    if (v4 == 1852009592)
    {
      CurrentAtomData = FigAtomStreamReadCurrentAtomData();
      if (!CurrentAtomData)
      {
        v9 = bswap32(0) >> 16;
        CurrentAtomData = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 4, (CFArrayRef ***)v13, 0);
        if (!CurrentAtomData)
          CurrentAtomData = IFFInformationSetItemPropertyIndexedColor(*(uint64_t *)v13, v9, v9, v9, 0);
      }
    }
    else
    {
      if (v4 != 1917403971 && v4 != 1886547814)
        goto LABEL_17;
      CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomData)
      {
        CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
        if (!CurrentAtomData)
        {
          if (!lengthAtOffsetOut || !dataPointerOut)
          {
LABEL_17:
            CurrentAtomData = FigSignalErrorAt();
            goto LABEL_18;
          }
          CurrentAtomData = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 5, (CFArrayRef ***)v13, 0);
          if (!CurrentAtomData)
            CurrentAtomData = IFFInformationSetItemPropertyICCProfileData(*(uint64_t *)v13, dataPointerOut, lengthAtOffsetOut);
        }
      }
    }
  }
LABEL_18:
  v6 = CurrentAtomData;
  if (theBuffer)
    CFRelease(theBuffer);
  if (*(_QWORD *)v13)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (v7)
    return v6;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyContentLightLevel(uint64_t a1, uint64_t a2)
{
  unsigned int BBuf;
  unsigned int v4;
  BOOL v5;
  size_t v7;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CFArrayRef **v10;

  theBuffer = 0;
  v10 = 0;
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!BBuf)
  {
    v7 = 0;
    dataPointerOut = 0;
    BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
    if (!BBuf)
    {
      if (v7 == 4)
      {
        BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 6, &v10, 0);
        if (!BBuf)
          BBuf = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v10, (unsigned __int8 *)dataPointerOut, v7);
      }
      else
      {
        BBuf = FigSignalErrorAt();
      }
    }
  }
  v4 = BBuf;
  if (theBuffer)
    CFRelease(theBuffer);
  if (v10)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
    return v4;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyMasteringDisplayColorVolume(uint64_t a1, uint64_t a2)
{
  unsigned int BBuf;
  unsigned int v4;
  BOOL v5;
  size_t v7;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CFArrayRef **v10;

  theBuffer = 0;
  v10 = 0;
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!BBuf)
  {
    v7 = 0;
    dataPointerOut = 0;
    BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
    if (!BBuf)
    {
      if (v7 == 24)
      {
        BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 7, &v10, 0);
        if (!BBuf)
          BBuf = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v10, (unsigned __int8 *)dataPointerOut, v7);
      }
      else
      {
        BBuf = FigSignalErrorAt();
      }
    }
  }
  v4 = BBuf;
  if (theBuffer)
    CFRelease(theBuffer);
  if (v10)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
    return v4;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyContentColorVolume(uint64_t a1, uint64_t a2)
{
  unsigned int CurrentAtomData;
  unsigned int v4;
  BOOL v5;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  unsigned __int8 v9;
  unsigned __int8 v10;
  CMBlockBufferRef theBuffer;
  CFArrayRef **v12;

  theBuffer = 0;
  v12 = 0;
  v10 = 0;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    v9 = 0;
    CurrentAtomData = IFFItemPropertyGetCCLVDataLength(v10, &v9);
    if (!CurrentAtomData)
    {
      CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomData)
      {
        lengthAtOffsetOut = 0;
        dataPointerOut = 0;
        CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
        if (!CurrentAtomData)
        {
          if (lengthAtOffsetOut == v9)
          {
            CurrentAtomData = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 8, &v12, 0);
            if (!CurrentAtomData)
              CurrentAtomData = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v12, (unsigned __int8 *)dataPointerOut, lengthAtOffsetOut);
          }
          else
          {
            CurrentAtomData = FigSignalErrorAt();
          }
        }
      }
    }
  }
  v4 = CurrentAtomData;
  if (theBuffer)
    CFRelease(theBuffer);
  if (v12)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
    return v4;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAmbientViewingEnvironment(uint64_t a1, uint64_t a2)
{
  unsigned int BBuf;
  unsigned int v4;
  BOOL v5;
  size_t v7;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CFArrayRef **v10;

  theBuffer = 0;
  v10 = 0;
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!BBuf)
  {
    v7 = 0;
    dataPointerOut = 0;
    BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
    if (!BBuf)
    {
      if (v7 == 8)
      {
        BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 9, &v10, 0);
        if (!BBuf)
          BBuf = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v10, (unsigned __int8 *)dataPointerOut, v7);
      }
      else
      {
        BBuf = FigSignalErrorAt();
      }
    }
  }
  v4 = BBuf;
  if (theBuffer)
    CFRelease(theBuffer);
  if (v10)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
    return v4;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyCleanAperture(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int32x4_t v4;
  int32x4_t v5;
  CFArrayRef **v6;
  BOOL v7;
  int8x16_t v8;
  CFArrayRef **v9;

  v9 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
  {
    v6 = 0;
  }
  else
  {
    v4 = (int32x4_t)vshrq_n_u64((uint64x2_t)0, 0x20uLL);
    v8 = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)0, 0x20uLL), (int8x16_t)v4));
    v5.i64[0] = 0x100000001;
    v5.i64[1] = 0x100000001;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v5, (int32x4_t)vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), v4))))) & 1) != 0)
    {
      v6 = 0;
      LODWORD(result) = 0;
    }
    else
    {
      LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 10, &v9, 0);
      v6 = v9;
      if (!(_DWORD)result)
      {
        LODWORD(result) = IFFInformationSetItemPropertyCleanAperture(v9, v8.i64[0], v8.i64[1], v8.i64[0], v8.i64[1]);
        v6 = v9;
      }
    }
  }
  if (v6)
    v7 = 1;
  else
    v7 = (_DWORD)result == 0;
  if (v7)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyImageRotation(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  CFArrayRef **v6;

  v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 11, &v6, 0);
    v4 = v6;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v6, 0);
      v4 = v6;
    }
  }
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyImageMirroring(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  CFArrayRef **v6;

  v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 12, &v6, 0);
    v4 = v6;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v6, 0);
      v4 = v6;
    }
  }
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAuxiliaryType(uint64_t a1, uint64_t a2)
{
  unsigned int BBuf;
  size_t v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  size_t v10;
  char *__s;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  int v15[2];

  theBuffer = 0;
  *(_QWORD *)v15 = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v10 = 0;
  __s = 0;
  BBuf = CheckAtomVersionIsZero();
  if (!BBuf)
  {
    BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if (!BBuf)
    {
      BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (!BBuf)
      {
        BBuf = copyNullTerminatedStringAndAdvanceBuffer(&dataPointerOut, &lengthAtOffsetOut, &__s, 0, &v10);
        if (!BBuf)
        {
          v4 = lengthAtOffsetOut;
          v5 = dataPointerOut;
          BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 13, (CFArrayRef ***)v15, 0);
          if (!BBuf)
          {
            if (v4)
              v6 = v5;
            else
              v6 = 0;
            BBuf = IFFInformationSetItemPropertyAuxiliaryType(*(uint64_t *)v15, __s, v6, v4);
          }
        }
      }
    }
  }
  v7 = BBuf;
  if (theBuffer)
    CFRelease(theBuffer);
  free(__s);
  if (*(_QWORD *)v15)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (v8)
    return v7;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyDisparityAdjustment(uint64_t a1, uint64_t a2)
{
  return _parseDisparityAdjustmentPropertyHelper(a1, a2, 1);
}

uint64_t ParseGlobalMetaDataIFFItemPropertyLayerSelector(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  __int16 v6;
  CFArrayRef **v7;

  v7 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
  {
    v4 = 0;
  }
  else
  {
    v6 = bswap32(0) >> 16;
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 21, &v7, 0);
    v4 = v7;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyLayerSelector((uint64_t)v7, v6);
      v4 = v7;
    }
  }
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAVIFOperatingPointSelector(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  CFArrayRef **v6;

  v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)result)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 22, &v6, 0);
    v4 = v6;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyAVIFOperatingPointSelector((uint64_t)v6, 0);
      v4 = v6;
    }
  }
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAVIFLayeredImageIndexing(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t i;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  CFArrayRef **v10;

  v10 = 0;
  v9 = 0;
  v8 = 0;
  v7 = 0;
  v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)result)
  {
    LODWORD(result) = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      for (i = 0; i != 6; i += 2)
        *(_WORD *)((char *)&v8 + i) = bswap32(*(unsigned __int16 *)((char *)&v8 + i)) >> 16;
      LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 23, &v10, 0);
      if (!(_DWORD)result)
        LODWORD(result) = IFFInformationSetItemPropertyAVIFLayerSizes(v10, (unsigned __int16)v8, HIWORD(v8), v9);
    }
  }
  if (v10)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyUUIDProperty(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  int v6;
  _QWORD v7[2];
  CFArrayRef **v8;

  v7[1] = 0;
  v8 = 0;
  v7[0] = 0;
  LODWORD(result) = FigAtomStreamGetCurrentAtomUUIDType();
  if (!(_DWORD)result)
  {
    switch(IFFInformationGetItemPropertyTypeForUUID(v7))
    {
      case 0xFu:
        LODWORD(result) = FigAtomStreamReadCurrentAtomData();
        if (!(_DWORD)result)
        {
          v6 = bswap32(0);
          LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 15, &v8, 0);
          if (!(_DWORD)result)
            goto LABEL_5;
        }
        break;
      case 0x10u:
        LODWORD(result) = FigAtomStreamReadCurrentAtomData();
        if (!(_DWORD)result)
        {
          v6 = bswap32(0);
          LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 16, &v8, 0);
          if (!(_DWORD)result)
LABEL_5:
            LODWORD(result) = IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v8, v6);
        }
        break;
      case 0x11u:
        LODWORD(result) = _parseExtrinsicsPropertyHelper(a1, a2);
        break;
      case 0x12u:
        LODWORD(result) = _parseIntrinsicsPropertyHelper(a1, a2);
        break;
      case 0x13u:
        LODWORD(result) = _parseDisparityAdjustmentPropertyHelper(a1, a2, 0);
        break;
      case 0x14u:
        LODWORD(result) = _parseStereoAggressorsPropertyHelper(a1, a2);
        break;
      default:
        LODWORD(result) = -12845;
        break;
    }
  }
  if (v8)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyUnknownAtom(uint64_t a1, uint64_t a2)
{
  return IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 0, 0, 0);
}

uint64_t _parseExtrinsicsPropertyHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  CFArrayRef **v6;

  v6 = 0;
  LODWORD(result) = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)result)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 17, &v6, 0);
    v4 = v6;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyExtrinsics((uint64_t)v6, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      v4 = v6;
    }
  }
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t _parseIntrinsicsPropertyHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFArrayRef **v4;
  BOOL v5;
  int8x16_t v6;
  int v7;
  CFArrayRef **v8;

  v8 = 0;
  LODWORD(result) = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)result || (LODWORD(result) = FigAtomStreamReadCurrentAtomData(), (_DWORD)result))
  {
    v4 = 0;
  }
  else
  {
    v6 = vrev32q_s8((int8x16_t)0);
    v7 = bswap32(0);
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 18, &v8, 0);
    v4 = v8;
    if (!(_DWORD)result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyIntrinsics((uint64_t)v8, 0, 0, 0, v6.i32[0], v6.i32[3], v6.i32[1], v6.i32[2], v7);
      v4 = v8;
    }
  }
  if (v4)
    v5 = 1;
  else
    v5 = (_DWORD)result == 0;
  if (v5)
    return result;
  else
    return 1717723499;
}

uint64_t _parseDisparityAdjustmentPropertyHelper(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v5;
  CFArrayRef **v6;

  v6 = 0;
  if (!a3 || (result = CheckAtomVersionIsZero(), !(_DWORD)result))
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      v5 = bswap32(0);
      result = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 19, &v6, 0);
      if (!(_DWORD)result)
        return IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v6, v5);
    }
  }
  return result;
}

uint64_t _parseStereoAggressorsPropertyHelper(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int CurrentAtomData;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFStringRef *v14;
  unsigned int BBuf;
  int v16;
  unsigned int v17;
  unint64_t v18;
  const void *v19;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  __int16 v26;
  unsigned __int8 v27;
  CFTypeRef cf;
  int v29[2];

  cf = 0;
  *(_QWORD *)v29 = 0;
  v3 = CheckAtomVersionIsZero();
  if (v3)
  {
    v17 = v3;
    v8 = 0;
    v7 = 0;
LABEL_32:
    v4 = 1;
    goto LABEL_23;
  }
  v27 = 0;
  v4 = 1;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (CurrentAtomData)
  {
    v17 = CurrentAtomData;
    v8 = 0;
    v7 = 0;
    goto LABEL_23;
  }
  v6 = v27 + 1;
  v4 = 1;
  v7 = (char *)malloc_type_calloc(v6, 1uLL, 0x100004077774924uLL);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_30;
  }
  v4 = 1;
  v8 = (char *)malloc_type_calloc(v6, 1uLL, 0x100004077774924uLL);
  if (!v8)
  {
LABEL_30:
    v17 = -12846;
    goto LABEL_23;
  }
  v9 = malloc_type_calloc(v6, 8uLL, 0x6004044C4A2DFuLL);
  if (!v9)
  {
    v17 = -12846;
    goto LABEL_32;
  }
  v10 = v9;
  v21 = a2;
  v22 = v27;
  v11 = 0;
  v12 = v27 + 1;
  v13 = 5;
  v14 = (CFStringRef *)v9;
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v26 = 0;
    BBuf = FigAtomStreamReadCurrentAtomData();
    if (BBuf)
      break;
    v13 += 2;
    v7[v11] = v26;
    v16 = SHIBYTE(v26);
    v8[v11] = HIBYTE(v26) & 0x7F;
    if (v16 < 0)
    {
      BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (BBuf)
        break;
      lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      v23 = 0;
      BBuf = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (BBuf)
        break;
      BBuf = copyNullTerminatedStringAndAdvanceBuffer(&dataPointerOut, &lengthAtOffsetOut, 0, v14, &v23);
      if (BBuf)
        break;
      v13 += v23;
    }
    ++v11;
    ++v14;
    if (v12 == v11)
    {
      BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(v21 + 8), 20, (CFArrayRef ***)v29, 0);
      if (!BBuf)
        BBuf = IFFInformationSetItemPropertyStereoAggressors(*(uint64_t *)v29, v6, v7, v8, v10);
      break;
    }
  }
  v17 = BBuf;
  v18 = 0;
  do
  {
    v19 = (const void *)v10[v18 / 8];
    if (v19)
      CFRelease(v19);
    v18 += 8;
  }
  while (8 * v22 + 8 != v18);
  free(v10);
  v4 = *(_QWORD *)v29 == 0;
LABEL_23:
  free(v8);
  free(v7);
  if (v17 != 0 && v4)
    return 1717723499;
  else
    return v17;
}

uint64_t ParseGlobalMetaDataGroupAtom(uint64_t a1, uint64_t a2)
{
  __int32 v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int8x8_t v9;
  int v10;
  CFArrayRef *v11;

  v11 = 0;
  if (!FigAtomStreamGetCurrentAtomVersionAndFlags() && !FigAtomStreamReadCurrentAtomData())
  {
    v9 = vrev32_s8(0);
    if (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
    {
      if (v9.i32[0] < 0)
      {
        if (!FigSignalErrorAt())
          return 0;
      }
      else if (!IFFInformationReserveItemGroup(*(_QWORD *)(a2 + 8), v9.i32[0], 0, 0, (uint64_t *)&v11))
      {
        v3 = v9.i32[1];
        v10 = v9.i32[1] - 1;
        v4 = -1;
        if (!v3)
        {
LABEL_13:
          *((_DWORD *)v11 + 5) = v4;
          return 0;
        }
        v5 = 12;
        while (!FigAtomStreamReadCurrentAtomData())
        {
          v6 = bswap32(0);
          if (IFFInformationAddItemToGroup(*(_QWORD *)(a2 + 8), v6, (uint64_t)v11))
            break;
          if (v6 < v4)
            v4 = v6;
          v7 = v10--;
          v5 += 4;
          if (!v7)
            goto LABEL_13;
        }
      }
    }
  }
  if (v11)
    IFFInformationDropItemGroup(*(_QWORD *)(a2 + 8), v11);
  return 0;
}

uint64_t TallyGlobalMovieTrackAtom(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 16);
  return 0;
}

uint64_t FigMetadataGetISO639_1NonCanonicalMapping()
{
  MEMORY[0x19402F294](&FigMetadataSetupNonCanonicalLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639NonCanonicalLanguageMapping);
  return gISO639_2TToISO639_1NonCanonicalDict;
}

uint64_t FigMetadataGetISO639_1Mapping()
{
  MEMORY[0x19402F294](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  return gISO639_2TToISO639_1Dict;
}

uint64_t FigISOUserDataGetOSTypeKeyToStringKeyMapping()
{
  MEMORY[0x19402F294](&FigISOUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpStringKeyMapping);
  return gISOUserDataOSTypeKeyToStringKeyDict;
}

uint64_t FigUserDataGetOSTypeKeyToStringKeyMapping()
{
  MEMORY[0x19402F294](&FigUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpStringKeyMapping);
  return gUserDataOSTypeKeyToStringKeyDict;
}

uint64_t FigUserDataGetOSTypeKeyToCFNumberMapping()
{
  MEMORY[0x19402F294](&FigUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpStringKeyMapping);
  return gUserDataOSTypeKeyToCFNumberDict;
}

uint64_t FigiTunesMetadataGetOSTypeKeyToShortStringKeyMapping()
{
  MEMORY[0x19402F294](&FigiTunesMetadataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpStringKeyMapping);
  return giTunesMetadataOSTypeKeyToShortStringKeyDict;
}

uint64_t FigUserDataCopyOSTypeKeysFromCommonKey(void *a1, _QWORD *a2)
{
  const __CFDictionary *v4;

  MEMORY[0x19402F294](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
  v4 = (const __CFDictionary *)gUserDataCommonKeyToOSTypeKeyDict;
  MEMORY[0x19402F294](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
  FigCopyOSTypeKeysFromCommonKeys(a1, a2, v4, (const __CFDictionary *)gUserDataCommonKeyMappingCountDict);
  return 0;
}

void *FigCopyOSTypeKeysFromCommonKeys(void *key, _QWORD *a2, CFDictionaryRef theDict, const __CFDictionary *a4)
{
  void *result;
  void **v8;
  uint64_t Value;
  CFIndex v10;
  const __CFAllocator *v11;
  void **p_values;
  void *values;

  if (!key || !a2)
    return (void *)FigSignalErrorAt();
  *a2 = 0;
  result = (void *)CFDictionaryGetValue(theDict, key);
  values = result;
  if (result)
  {
    v8 = (void **)result;
    Value = (uint64_t)CFDictionaryGetValue(a4, key);
    if (Value < 1)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_values = &values;
      v10 = 1;
    }
    else
    {
      v10 = Value;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_values = v8;
    }
    result = CFArrayCreate(v11, (const void **)p_values, v10, 0);
    *a2 = result;
  }
  return result;
}

uint64_t FigISOUserDataCopyOSTypeKeysFromCommonKey(void *a1, _QWORD *a2)
{
  const __CFDictionary *v4;

  MEMORY[0x19402F294](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
  v4 = (const __CFDictionary *)gISOUserDataCommonKeyToOSTypeKeyDict;
  MEMORY[0x19402F294](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
  FigCopyOSTypeKeysFromCommonKeys(a1, a2, v4, (const __CFDictionary *)gISOUserDataCommonKeyMappingCountDict);
  return 0;
}

uint64_t FigQuickTimeMetadataCopyNativeKeysFromCommonKey(const void *a1, _QWORD *a2)
{
  const void *Value;

  MEMORY[0x19402F294](&FigQuickTimeMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigQuickTimeMetadataSetUpCommonKeyMapping);
  if (!a1 || !a2)
    return FigSignalErrorAt();
  Value = CFDictionaryGetValue((CFDictionaryRef)gQuickTimeMetadataCommonKeyToNativeKeyDict, a1);
  if (Value)
    Value = CFRetain(Value);
  *a2 = Value;
  return 0;
}

uint64_t FigUserDataStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  MEMORY[0x19402F294](&FigUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpStringKeyMapping);
  return FigMetadataCopyOSTypeKeyFromStringKey((const __CFDictionary *)gUserDataStringKeyToOSTypeKeyDict, a1, a2);
}

uint64_t FigMetadataCopyOSTypeKeyFromStringKey(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  unsigned int Value;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return FigMetadataStringKeyToOSTypeKey(a2, 0, a3);
  *a3 = Value;
  return 1;
}

uint64_t FigISOUserDataStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  MEMORY[0x19402F294](&FigISOUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpStringKeyMapping);
  return FigMetadataCopyOSTypeKeyFromStringKey((const __CFDictionary *)gISOUserDataStringKeyToOSTypeKeyDict, a1, a2);
}

uint64_t FigID3MetadataStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  return FigMetadataStringKeyToOSTypeKey(a1, 1, a2);
}

uint64_t FigMetadataStringKeyToOSTypeKey(const __CFString *a1, int a2, unsigned int *a3)
{
  unint64_t Length;
  uint64_t result;
  CFIndex Bytes;
  unsigned int v9;
  char v10;
  UInt8 buffer[4];
  CFRange v13;

  *(_DWORD *)buffer = 0;
  Length = CFStringGetLength(a1);
  result = 0;
  if (Length <= 4)
  {
    v13.location = 0;
    v13.length = Length;
    Bytes = CFStringGetBytes(a1, v13, 0, 0, 0, buffer, 4, 0);
    result = 0;
    if (Length == Bytes)
    {
      v9 = bswap32(*(unsigned int *)buffer);
      v10 = 32 - 8 * Length;
      if (Length >= 4 || a2 == 0)
        v10 = 0;
      *a3 = v9 >> v10;
      return 1;
    }
  }
  return result;
}

uint64_t FigID3MetadataCommonKeyToOSTypeKey(const void *a1, _DWORD *a2)
{
  uint64_t result;

  MEMORY[0x19402F294](&FigID3MetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigID3MetadataSetUpCommonKeyMapping);
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)gID3MetadataCommonKeyToOSTypeKeyDict, a1);
  if ((_DWORD)result)
  {
    *a2 = result;
    return 1;
  }
  return result;
}

CFNumberRef FigMetadataCopyLangCodeFromLocale(const __CFLocale *a1)
{
  const __CFDictionary *v2;
  CFTypeRef v3;
  BOOL v4;
  __int16 valuePtr;
  void *value;

  MEMORY[0x19402F294](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  v2 = (const __CFDictionary *)gISO639CanonicalToLangCodeDict;
  v3 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(v2, v3, (const void **)&value))
    return 0;
  valuePtr = (__int16)value;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
}

uint64_t FigMetadataGetPackedISO639_2T(const __CFString *a1)
{
  char buffer[4];

  *(_DWORD *)buffer = 0;
  if (a1 && CFStringGetLength(a1) == 3 && CFStringGetCString(a1, buffer, 4, 0x600u))
    return (unsigned __int16)((32 * buffer[1] - 3072) | (buffer[0] << 10) ^ 0x8000 | (buffer[2] - 96));
  else
    return 21956;
}

uint64_t FigMetadataGetPackedISO639_2TFromLocale(const __CFLocale *a1)
{
  const __CFDictionary *v2;
  const __CFString *v3;
  BOOL v4;
  uint64_t result;
  const __CFString *v6;
  void *value;

  MEMORY[0x19402F294](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  if (!a1
    || ((v2 = (const __CFDictionary *)gISO639CanonicalToISO639_2TDict,
         (v3 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088])) != 0)
      ? (v4 = v2 == 0)
      : (v4 = 1),
        v4))
  {
    LOWORD(result) = 21956;
  }
  else
  {
    v6 = v3;
    value = 0;
    if (CFDictionaryGetValueIfPresent(v2, v3, (const void **)&value))
      LOWORD(result) = (_WORD)value;
    else
      LOWORD(result) = FigMetadataGetPackedISO639_2T(v6);
  }
  return (unsigned __int16)result;
}

void *FigMetadataGetISO639_1FromISO639_2T(const __CFString *a1)
{
  const __CFDictionary *v2;
  unsigned int PackedISO639_2T;
  void *value;

  value = 0;
  MEMORY[0x19402F294](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  v2 = (const __CFDictionary *)gISO639_2TToISO639_1Dict;
  PackedISO639_2T = FigMetadataGetPackedISO639_2T(a1);
  if (CFDictionaryGetValueIfPresent(v2, (const void *)PackedISO639_2T, (const void **)&value))
    return value;
  else
    return 0;
}

uint64_t FigMetadataGetPackedISO639_2TFromLocaleIdentifier(const __CFString *a1)
{
  const __CFDictionary *v2;
  const __CFAllocator *v3;
  const __CFArray *ArrayBySeparatingStrings;
  const void *ValueAtIndex;
  int ValueIfPresent;
  unsigned __int16 PackedISO639_2TFromLocale;
  const __CFLocale *v8;
  void *value;

  if (!a1)
    return FigMetadataGetPackedISO639_2TFromLocale(0);
  value = 0;
  MEMORY[0x19402F294](&FigMetadataSetupNonCanonicalLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639NonCanonicalLanguageMapping);
  v2 = (const __CFDictionary *)gISO639NonCanonicalToISO639_2TDict;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, CFSTR("-"));
  ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
  ValueIfPresent = CFDictionaryGetValueIfPresent(v2, ValueAtIndex, (const void **)&value);
  PackedISO639_2TFromLocale = (unsigned __int16)value;
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
  if (!ValueIfPresent)
  {
    v8 = CFLocaleCreate(v3, a1);
    PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2TFromLocale(v8);
    if (v8)
      CFRelease(v8);
  }
  return PackedISO639_2TFromLocale;
}

void FigMetadataCopyCurrentLocaleAndLangCode(CFTypeRef *a1, CFNumberRef *a2)
{
  CFLocaleRef v4;
  const __CFLocale *v5;
  CFTypeRef v6;
  const __CFDictionary *v7;
  __int16 valuePtr;
  void *value;

  v4 = CFLocaleCopyCurrent();
  if (v4)
  {
    v5 = v4;
    if (a1)
      *a1 = CFRetain(v4);
    if (a2)
    {
      v6 = CFLocaleGetValue(v5, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
      MEMORY[0x19402F294](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
      v7 = (const __CFDictionary *)gISO639CanonicalToLangCodeDict;
      *a2 = 0;
      if (v7)
      {
        if (v6)
        {
          value = 0;
          if (CFDictionaryGetValueIfPresent(v7, v6, (const void **)&value))
          {
            valuePtr = (__int16)value;
            *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
          }
        }
      }
    }
    CFRelease(v5);
  }
}

uint64_t FigMetadataCopyISO8601GMTStringFromDate(const __CFDate *a1, CFStringRef *a2)
{
  const __CFAllocator *v4;
  CFDateFormatterRef ISO8601Formatter;
  __CFDateFormatter *v6;
  CFTimeZoneRef v7;
  CFTimeZoneRef v8;
  CFStringRef StringWithDate;
  uint64_t v10;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x773uLL);
  if (!ISO8601Formatter)
    return FigSignalErrorAt();
  v6 = ISO8601Formatter;
  v7 = CFTimeZoneCreateWithTimeIntervalFromGMT(v4, 0.0);
  if (v7)
  {
    v8 = v7;
    CFDateFormatterSetProperty(v6, (CFStringRef)*MEMORY[0x1E0C9AF68], v7);
    StringWithDate = CFDateFormatterCreateStringWithDate(v4, v6, a1);
    if (StringWithDate)
    {
      v10 = 0;
      *a2 = StringWithDate;
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    CFRelease(v8);
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
  CFRelease(v6);
  return v10;
}

BOOL FigUserDataWeKnowIsISOText(int a1)
{
  return a1 == 1953390957;
}

uint64_t FigISOUserDataWeKnowIsISOText(int a1)
{
  uint64_t result;
  int v3;

  result = 0;
  if (a1 <= 1735291492)
  {
    if (a1 <= 1668246635)
    {
      if (a1 == 1633969523)
        return 1;
      v3 = 1635087464;
    }
    else
    {
      if (a1 == 1668246636 || a1 == 1668313716)
        return 1;
      v3 = 1685283696;
    }
LABEL_15:
    if (a1 != v3)
      return result;
    return 1;
  }
  if (a1 > 1937207908)
  {
    if (a1 == 1937207909 || a1 == 1953390957)
      return 1;
    v3 = 1953068140;
    goto LABEL_15;
  }
  if (a1 != 1735291493 && a1 != 1819239273)
  {
    v3 = 1885696614;
    goto LABEL_15;
  }
  return 1;
}

uint64_t FigMetadataWriteFreeAtom(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v8;

  if (a4)
  {
    result = FigAtomWriterGetAtomSize();
    if ((_DWORD)result)
      return result;
    v8 = a4;
    if (a4 <= a3)
      v8 = a3;
    a3 = v8;
  }
  return FigMetadataAppendFreeAtom(a2, a3);
}

uint64_t FigMetadataGetAllCommonKeys()
{
  MEMORY[0x19402F294](&FigMetadataGetAllCommonKeys_sCreateKeyArrayOnce, FigMetadataSetupCommonKeys);
  return gCommonKeyArray;
}

CFArrayRef FigMetadataSetupCommonKeys()
{
  CFArrayRef result;
  void *values[25];

  values[24] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("title");
  values[1] = CFSTR("creator");
  values[2] = CFSTR("subject");
  values[3] = CFSTR("description");
  values[4] = CFSTR("publisher");
  values[5] = CFSTR("contributor");
  values[6] = CFSTR("creationDate");
  values[7] = CFSTR("lastModifiedDate");
  values[8] = CFSTR("type");
  values[9] = CFSTR("format");
  values[10] = CFSTR("identifier");
  values[11] = CFSTR("source");
  values[12] = CFSTR("language");
  values[13] = CFSTR("relation");
  values[14] = CFSTR("location");
  values[15] = CFSTR("copyrights");
  values[16] = CFSTR("albumName");
  values[17] = CFSTR("author");
  values[18] = CFSTR("artist");
  values[19] = CFSTR("artwork");
  values[20] = CFSTR("make");
  values[21] = CFSTR("model");
  values[22] = CFSTR("software");
  values[23] = CFSTR("accessibilityDescription");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 24, 0);
  gCommonKeyArray = (uint64_t)result;
  return result;
}

const __CFString *FigMetadataGetCommonKey(CFTypeRef cf1, const __CFString *a2)
{
  const __CFString *result;
  char v5;
  uint64_t *v6;
  const __CFDictionary *v7;
  CFTypeID v8;
  unint64_t v9;
  CFTypeID v10;
  unsigned int v11;
  unsigned int valuePtr;

  result = 0;
  if (cf1 && a2)
  {
    if (CFEqual(cf1, CFSTR("udta")))
    {
      MEMORY[0x19402F294](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
      v5 = 1;
      v6 = &gUserDataOSTypeKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, CFSTR("uiso")))
    {
      MEMORY[0x19402F294](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
      v5 = 1;
      v6 = &gISOUserDataOSTypeKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, CFSTR("mdta")))
    {
      MEMORY[0x19402F294](&FigQuickTimeMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigQuickTimeMetadataSetUpCommonKeyMapping);
      v5 = 0;
      v6 = &gQuickTimeMetadataNativeKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, CFSTR("itsk")))
    {
      MEMORY[0x19402F294](&FigiTunesMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpCommonKeyMapping);
      v5 = 1;
      v6 = &giTunesMetadataShortKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, CFSTR("org.id3")))
    {
      MEMORY[0x19402F294](&FigID3MetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigID3MetadataSetUpCommonKeyMapping);
      v5 = 1;
      v6 = &gID3MetadataOSTypeKeyToCommonKeyDict;
    }
    else
    {
      if (CFEqual(cf1, CFSTR("icy")))
      {
        if (FigCFEqual())
          return CFSTR("title");
        else
          return 0;
      }
      if (!CFEqual(cf1, CFSTR("caaf")))
      {
        if (CFEqual(cf1, CFSTR("comn")))
          return a2;
        else
          return 0;
      }
      MEMORY[0x19402F294](&FigAudioFileInfoDictionarySetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigAudioFileInfoDictionarySetUpCommonKeyMapping);
      v5 = 0;
      v6 = &gAudioFileInfoDictionaryKeyToCommonKeyDict;
    }
    v7 = (const __CFDictionary *)*v6;
    if (*v6)
    {
      v8 = CFGetTypeID(a2);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr);
        v9 = valuePtr;
        return (const __CFString *)CFDictionaryGetValue(v7, (const void *)v9);
      }
      v10 = CFGetTypeID(a2);
      if (v10 == CFStringGetTypeID())
      {
        if ((v5 & 1) == 0)
          return (const __CFString *)CFDictionaryGetValue(v7, a2);
        v11 = 0;
        if (FigMetadataStringKeyToOSTypeKeyWithKeySpace((uint64_t)cf1, a2, &v11))
        {
          v9 = v11;
          return (const __CFString *)CFDictionaryGetValue(v7, (const void *)v9);
        }
      }
    }
    return 0;
  }
  return result;
}

CFIndex FigMetadataStringKeyToOSTypeKeyWithKeySpace(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  const __CFDictionary *v5;
  const __CFString *v7;
  int v8;

  if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpStringKeyMapping);
    v5 = (const __CFDictionary *)gUserDataStringKeyToOSTypeKeyDict;
    return FigMetadataCopyOSTypeKeyFromStringKey(v5, a2, a3);
  }
  if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigISOUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpStringKeyMapping);
    v5 = (const __CFDictionary *)gISOUserDataStringKeyToOSTypeKeyDict;
    return FigMetadataCopyOSTypeKeyFromStringKey(v5, a2, a3);
  }
  if (FigCFEqual())
    return FigiTunesMetadataShortStringKeyToOSTypeKey(a2, a3);
  if (FigCFEqual())
  {
    v7 = a2;
    v8 = 1;
  }
  else
  {
    v7 = a2;
    v8 = 0;
  }
  return FigMetadataStringKeyToOSTypeKey(v7, v8, a3);
}

uint64_t FigMetadataCopyTrackQuickTimeMetadata(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, __CFArray **);
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v17;

  cf = 0;
  v17 = 0;
  if (!a1)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (!a3)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v7)
  {
    v7(FigBaseObject, CFSTR("SupportsMetadataArrays"), a2, &cf);
    v7 = (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))cf;
  }
  if (v7 == (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))*MEMORY[0x1E0C9AE50])
  {
    v12 = FigTrackReaderGetFigBaseObject(a1);
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v13)
    {
      v11 = v13(v12, CFSTR("QuickTimeMetadataArray"), a2, a3);
      goto LABEL_11;
    }
    v14 = 4294954514;
  }
  else
  {
    v8 = FigTrackReaderGetFigBaseObject(a1);
    v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v9)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9(v8, CFSTR("QuickTimeMetadataReader"), *MEMORY[0x1E0C9AE00], &v17);
      if (v17)
      {
        v11 = FigMetadataCopyMetadataItemsIf(v10, (uint64_t)v17, 0, 0, a3);
LABEL_11:
        v14 = v11;
        goto LABEL_14;
      }
    }
    v14 = 0;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (v17)
    CFRelease(v17);
  return v14;
}

uint64_t FigMetadataCopyAllMetadataItems(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  return FigMetadataCopyMetadataItemsIf(a1, a2, 0, 0, a3);
}

uint64_t FigMetadataCopyTrackQuickTimeUserdata(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, __CFArray **);
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v17;

  cf = 0;
  v17 = 0;
  if (!a1)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (!a3)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v7)
  {
    v7(FigBaseObject, CFSTR("SupportsMetadataArrays"), a2, &cf);
    v7 = (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))cf;
  }
  if (v7 == (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))*MEMORY[0x1E0C9AE50])
  {
    v12 = FigTrackReaderGetFigBaseObject(a1);
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v13)
    {
      v11 = v13(v12, CFSTR("QuickTimeUserDataArray"), a2, a3);
      goto LABEL_11;
    }
    v14 = 4294954514;
  }
  else
  {
    v8 = FigTrackReaderGetFigBaseObject(a1);
    v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v9)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9(v8, CFSTR("QuickTimeUserDataReader"), *MEMORY[0x1E0C9AE00], &v17);
      if (v17)
      {
        v11 = FigMetadataCopyMetadataItemsIf(v10, (uint64_t)v17, 0, 0, a3);
LABEL_11:
        v14 = v11;
        goto LABEL_14;
      }
    }
    v14 = 0;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (v17)
    CFRelease(v17);
  return v14;
}

uint64_t FigMetadataCopyTrackISOUserdata(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, __CFArray **);
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v17;

  cf = 0;
  v17 = 0;
  if (!a1)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (!a3)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v7)
  {
    v7(FigBaseObject, CFSTR("SupportsMetadataArrays"), a2, &cf);
    v7 = (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))cf;
  }
  if (v7 == (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))*MEMORY[0x1E0C9AE50])
  {
    v12 = FigTrackReaderGetFigBaseObject(a1);
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v13)
    {
      v11 = v13(v12, CFSTR("ISOUserDataArray"), a2, a3);
      goto LABEL_11;
    }
    v14 = 4294954514;
  }
  else
  {
    v8 = FigTrackReaderGetFigBaseObject(a1);
    v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v9)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v9(v8, CFSTR("ISOUserDataReader"), *MEMORY[0x1E0C9AE00], &v17);
      if (v17)
      {
        v11 = FigMetadataCopyMetadataItemsIf(v10, (uint64_t)v17, 0, 0, a3);
LABEL_11:
        v14 = v11;
        goto LABEL_14;
      }
    }
    v14 = 0;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (v17)
    CFRelease(v17);
  return v14;
}

uint64_t FigMetadataCopyTrackCommonMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, const __CFAllocator *, __CFArray **);
  uint64_t v17;
  uint64_t v18;
  CFTypeRef cf;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;

  v22 = 0;
  v23 = 0;
  cf = 0;
  v21 = 0;
  if (!a1)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (!a3)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_16;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (v7)
  {
    v7(FigBaseObject, CFSTR("SupportsMetadataArrays"), a2, &cf);
    v7 = (void (*)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))cf;
  }
  if (v7 != (void (*)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))*MEMORY[0x1E0C9AE50])
  {
    v8 = FigTrackReaderGetFigBaseObject(a1);
    v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v9)
      v9(v8, CFSTR("QuickTimeMetadataReader"), a2, &v23);
    v10 = FigTrackReaderGetFigBaseObject(a1);
    v11 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v11)
      v11(v10, CFSTR("QuickTimeUserDataReader"), a2, &v22);
    v12 = FigTrackReaderGetFigBaseObject(a1);
    v13 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v13)
    {
      v13(v12, CFSTR("ISOUserDataReader"), a2, &v21);
      v14 = v21;
    }
    else
    {
      v14 = 0;
    }
    v17 = FigMetadataCopyCommonMetadata((uint64_t)v23, 0, (uint64_t)v22, (uint64_t)v14, 0, a2, a3);
    goto LABEL_16;
  }
  v15 = FigTrackReaderGetFigBaseObject(a1);
  v16 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v16)
  {
    v17 = v16(v15, CFSTR("CommonMetadataArray"), a2, a3);
LABEL_16:
    v18 = v17;
    goto LABEL_17;
  }
  v18 = 4294954514;
LABEL_17:
  if (cf)
    CFRelease(cf);
LABEL_19:
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  return v18;
}

uint64_t FigMetadataCopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFAllocator *a6, __CFArray **a7)
{
  const __CFArray *v13;
  CFIndex v14;
  __CFArray *Mutable;
  const __CFArray *v16;
  const void *ValueAtIndex;
  unsigned int (*v18)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *);
  unsigned int (*v19)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *);
  unsigned int (*v20)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *);
  uint64_t (*v21)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *);
  int v22;
  void (*v23)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *);
  __CFDictionary *v24;
  __CFDictionary *v25;
  uint64_t v26;
  __CFArray **v28;
  CFIndex Count;
  CFDictionaryRef theDict;
  void *value;

  theDict = 0;
  value = 0;
  MEMORY[0x19402F294](&FigMetadataGetAllCommonKeys_sCreateKeyArrayOnce, FigMetadataSetupCommonKeys);
  v13 = (const __CFArray *)gCommonKeyArray;
  v28 = a7;
  if (!gCommonKeyArray)
  {
    Mutable = 0;
LABEL_37:
    v26 = 0;
    *v28 = Mutable;
    goto LABEL_38;
  }
  Count = CFArrayGetCount((CFArrayRef)gCommonKeyArray);
  if (Count < 1)
  {
    v26 = FigSignalErrorAt();
LABEL_38:
    Mutable = 0;
    goto LABEL_39;
  }
  v14 = 0;
  Mutable = 0;
  while (1)
  {
    v16 = v13;
    ValueAtIndex = CFArrayGetValueAtIndex(v13, v14);
    if ((!a1
       || (v18 = *(unsigned int (**)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
       || v18(a1, CFSTR("comn"), ValueAtIndex, 0, a6, &value, &theDict))
      && (!a2
       || (v19 = *(unsigned int (**)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
       || v19(a2, CFSTR("comn"), ValueAtIndex, 0, a6, &value, &theDict))
      && (!a3
       || (v20 = *(unsigned int (**)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
       || v20(a3, CFSTR("comn"), ValueAtIndex, 0, a6, &value, &theDict)))
    {
      if (a4)
      {
        v21 = *(uint64_t (**)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v21)
          v22 = v21(a4, CFSTR("comn"), ValueAtIndex, 0, a6, &value, &theDict);
        else
          v22 = -12782;
        if (!a5 || !v22)
          goto LABEL_23;
      }
      else if (!a5)
      {
        goto LABEL_23;
      }
      v23 = *(void (**)(uint64_t, const __CFString *, const void *, _QWORD, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v23)
        v23(a5, CFSTR("comn"), ValueAtIndex, 0, a6, &value, &theDict);
    }
LABEL_23:
    if (value)
      break;
LABEL_32:
    v13 = v16;
    if (theDict)
    {
      CFRelease(theDict);
      theDict = 0;
    }
    if (Count == ++v14)
      goto LABEL_37;
  }
  if (Mutable || (Mutable = CFArrayCreateMutable(a6, 0, MEMORY[0x1E0C9B378])) != 0)
  {
    v24 = theDict
        ? CFDictionaryCreateMutableCopy(a6, 0, theDict)
        : CFDictionaryCreateMutable(a6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v25 = v24;
    if (v24)
    {
      CFDictionaryAddValue(v24, CFSTR("value"), value);
      CFArrayAppendValue(Mutable, v25);
      CFRelease(v25);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
      goto LABEL_32;
    }
  }
  v26 = FigSignalErrorAt();
LABEL_39:
  if (value)
    CFRelease(value);
  if (theDict)
    CFRelease(theDict);
  if (Mutable)
    CFRelease(Mutable);
  return v26;
}

uint64_t FigMetadataCopyMovieCommonMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v16;
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef cf;

  v22 = 0;
  cf = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  if (a1 && a3)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
    v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("QuickTimeMetadataReader"), a2, &cf);
    v8 = FigFormatReaderGetFigBaseObject(a1);
    v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v9)
      v9(v8, CFSTR("iTunesMetadataReader"), a2, &v22);
    v10 = FigFormatReaderGetFigBaseObject(a1);
    v11 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v11)
      v11(v10, CFSTR("QuickTimeUserDataReader"), a2, &v21);
    v12 = FigFormatReaderGetFigBaseObject(a1);
    v13 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v13)
      v13(v12, CFSTR("ISOUserDataReader"), a2, &v20);
    v14 = FigFormatReaderGetFigBaseObject(a1);
    v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v15)
    {
      v15(v14, CFSTR("MetadataReader"), a2, &v19);
      v16 = v19;
    }
    else
    {
      v16 = 0;
    }
    v17 = FigMetadataCopyCommonMetadata((uint64_t)cf, (uint64_t)v22, (uint64_t)v21, (uint64_t)v20, (uint64_t)v16, a2, a3);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t FigMetadataCopyMovieMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (a1 && a3)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v6)
      return 0;
    v7 = v6(FigBaseObject, CFSTR("MetadataReaders"), a2, &cf);
    v8 = cf;
    if (v7)
    {
      v9 = 0;
      if (!cf)
        return v9;
      goto LABEL_9;
    }
    v9 = FigMetadataCopyAllMetadata((const __CFArray *)cf, a2, a3);
    v8 = cf;
    if (cf)
LABEL_9:
      CFRelease(v8);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t FigMetadataCopyAllMetadata(const __CFArray *a1, const __CFAllocator *a2, __CFArray **a3)
{
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t FigBaseObject;
  unsigned int (*v10)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t (*v11)(const void *, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFArray *Mutable;
  unsigned int (*v16)(const void *, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *);
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  __CFDictionary *v19;
  __CFDictionary *v20;
  __CFArray *v21;
  uint64_t v22;
  __CFArray *v25;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  void *value;

  theDict = 0;
  value = 0;
  cf = 0;
  if (!a1 || (Count = CFArrayGetCount(a1), Count < 1))
  {
    v25 = 0;
LABEL_36:
    v22 = 0;
    *a3 = v25;
    goto LABEL_37;
  }
  v6 = Count;
  v7 = 0;
  v25 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    FigBaseObject = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
    v10 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
    {
      if (!v10(FigBaseObject, CFSTR("format"), a2, &cf))
        break;
    }
LABEL_33:
    if (++v7 == v6)
      goto LABEL_36;
  }
  v11 = *(uint64_t (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v11 || (v12 = v11(ValueAtIndex, 0, 0), v12 < 1))
  {
    v20 = 0;
LABEL_29:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v20)
      CFRelease(v20);
    goto LABEL_33;
  }
  v13 = v12;
  v14 = 0;
  Mutable = 0;
  do
  {
    v16 = *(unsigned int (**)(const void *, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v16 && !v16(ValueAtIndex, 0, 0, v14, a2, &value, &theDict))
    {
      MutableCopy = CFDictionaryCreateMutableCopy(a2, 0, theDict);
      v18 = MutableCopy;
      if (!MutableCopy)
        goto LABEL_45;
      CFDictionaryAddValue(MutableCopy, CFSTR("value"), value);
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
        if (!Mutable)
          goto LABEL_45;
      }
      CFArrayAppendValue(Mutable, v18);
      CFRelease(v18);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
      if (theDict)
      {
        CFRelease(theDict);
        theDict = 0;
      }
    }
    ++v14;
  }
  while (v13 != v14);
  if (!Mutable)
  {
    v20 = 0;
    goto LABEL_29;
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    v20 = 0;
    goto LABEL_28;
  }
  v19 = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v19)
  {
    v20 = v19;
    CFDictionaryAddValue(v19, CFSTR("items"), Mutable);
    CFDictionaryAddValue(v20, CFSTR("format"), cf);
    v21 = v25;
    if (v25 || (v21 = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378])) != 0)
    {
      v25 = v21;
      CFArrayAppendValue(v21, v20);
LABEL_28:
      CFRelease(Mutable);
      goto LABEL_29;
    }
    v22 = FigSignalErrorAt();
    CFRelease(v20);
    v18 = 0;
LABEL_48:
    CFRelease(Mutable);
  }
  else
  {
    v18 = 0;
LABEL_45:
    v22 = FigSignalErrorAt();
    if (v25)
      CFRelease(v25);
    if (Mutable)
      goto LABEL_48;
  }
  if (v18)
    CFRelease(v18);
LABEL_37:
  if (value)
    CFRelease(value);
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  return v22;
}

uint64_t FigMetadataCopyTrackMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (a1 && a3)
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v6)
      return 0;
    v7 = v6(FigBaseObject, CFSTR("MetadataReaders"), a2, &cf);
    v8 = cf;
    if (v7)
    {
      v9 = 0;
      if (!cf)
        return v9;
      goto LABEL_9;
    }
    v9 = FigMetadataCopyAllMetadata((const __CFArray *)cf, a2, a3);
    v8 = cf;
    if (cf)
LABEL_9:
      CFRelease(v8);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t FigMetadataCopyMetadataItemsIf(const __CFAllocator *a1, uint64_t a2, unsigned int (*a3)(CFDictionaryRef, uint64_t), uint64_t a4, __CFArray **a5)
{
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD);
  CFIndex v11;
  uint64_t v12;
  __CFArray *Mutable;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *);
  int v16;
  CFDictionaryRef v17;
  __CFDictionary *MutableCopy;
  __CFDictionary *v19;
  uint64_t v20;
  void *value;
  CFDictionaryRef theDict;

  value = 0;
  theDict = 0;
  v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v10 && (v11 = v10(a2, 0, 0)) != 0)
  {
    v12 = v11;
    Mutable = CFArrayCreateMutable(a1, v11, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (v12 >= 1)
      {
        v14 = 0;
        while (1)
        {
          v15 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (v15)
            v16 = v15(a2, 0, 0, v14, a1, &value, &theDict);
          else
            v16 = -12782;
          v17 = theDict;
          if (v16 || !value || !theDict)
            goto LABEL_18;
          if (!a3)
            goto LABEL_15;
          if (a3(theDict, a4))
            break;
LABEL_17:
          v17 = theDict;
LABEL_18:
          if (v17)
          {
            CFRelease(v17);
            theDict = 0;
          }
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          if (v12 == ++v14)
            goto LABEL_23;
        }
        v17 = theDict;
LABEL_15:
        MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, v17);
        if (!MutableCopy)
          goto LABEL_33;
        v19 = MutableCopy;
        CFDictionaryAddValue(MutableCopy, CFSTR("value"), value);
        CFArrayAppendValue(Mutable, v19);
        CFRelease(v19);
        goto LABEL_17;
      }
LABEL_23:
      v20 = 0;
    }
    else
    {
LABEL_33:
      v20 = FigSignalErrorAt();
    }
  }
  else
  {
    v20 = 0;
    Mutable = 0;
  }
  if (theDict)
  {
    CFRelease(theDict);
    theDict = 0;
  }
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  if ((_DWORD)v20 && Mutable)
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  *a5 = Mutable;
  return v20;
}

uint64_t FigMetadataArrayHasKey(uint64_t result, uint64_t a2, uint64_t a3, const __CFArray *a4, CFIndex a5, CFIndex a6)
{
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  const void *Value;
  CFRange v17;

  if (result)
  {
    v10 = (const __CFArray *)result;
    Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
      return 0;
    v12 = Count;
    v13 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
      v15 = ValueAtIndex;
      if (!a3 || (CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace")), FigCFEqual()))
      {
        Value = CFDictionaryGetValue(v15, CFSTR("key"));
        if (a4)
        {
          v17.location = a5;
          v17.length = a6;
          if (CFArrayContainsValue(a4, v17, Value))
            return 1;
        }
        else if (FigCFEqual())
        {
          return 1;
        }
      }
      if (v12 == ++v13)
        return 0;
    }
  }
  return result;
}

CFIndex FigMetadataArrayGetKeyCount(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  __CFSet *Mutable;
  const __CFAllocator *v8;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v10;
  const void *Value;
  CFIndex v12;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  Mutable = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v6);
    v10 = ValueAtIndex;
    if (!a2 || (CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace")), FigCFEqual()))
    {
      if (!Mutable)
        Mutable = CFSetCreateMutable(v8, 0, 0);
      Value = CFDictionaryGetValue(v10, CFSTR("key"));
      CFSetAddValue(Mutable, Value);
    }
    ++v6;
  }
  while (v5 != v6);
  if (!Mutable)
    return 0;
  v12 = CFSetGetCount(Mutable);
  CFRelease(Mutable);
  return v12;
}

uint64_t FigMetadataArrayCopyKeyAtIndex(const __CFArray *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  __CFSet *Mutable;
  const __CFAllocator *v12;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  const void *Value;
  uint64_t v16;
  CFTypeRef v18;
  _QWORD *v19;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v9 = Count;
    v19 = a4;
    v10 = 0;
    Mutable = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v10);
      v14 = ValueAtIndex;
      if (!a3 || (CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace")), FigCFEqual()))
      {
        if (!Mutable)
          Mutable = CFSetCreateMutable(v12, 0, 0);
        Value = CFDictionaryGetValue(v14, CFSTR("key"));
        CFSetAddValue(Mutable, Value);
        if (CFSetGetCount(Mutable) - 1 == a2)
          break;
      }
      if (v9 == ++v10)
        goto LABEL_12;
    }
    if (Value)
    {
      v18 = CFRetain(Value);
      v16 = 0;
      *v19 = v18;
      if (!Mutable)
        return v16;
      goto LABEL_13;
    }
  }
  else
  {
    Mutable = 0;
  }
LABEL_12:
  v16 = FigSignalErrorAt();
  if (Mutable)
LABEL_13:
    CFRelease(Mutable);
  return v16;
}

uint64_t FigMetadataArrayGetItemCount(const __CFArray *a1, uint64_t a2, uint64_t a3, const __CFArray *a4, CFIndex a5, CFIndex a6)
{
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  const void *Value;
  CFRange v20;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v12 = Count;
  v13 = 0;
  v14 = 0;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v13);
    v16 = ValueAtIndex;
    if (!a3 || (CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace")), FigCFEqual()))
    {
      Value = CFDictionaryGetValue(v16, CFSTR("key"));
      if (a4)
      {
        v20.location = a5;
        v20.length = a6;
        if (CFArrayContainsValue(a4, v20, Value))
          ++v14;
      }
      else if (!a2 || FigCFEqual())
      {
        ++v14;
      }
    }
    ++v13;
  }
  while (v12 != v13);
  return v14;
}

uint64_t FigMetadataArrayCopyItemWithKeyAndIndex(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFArray *a5, CFIndex a6, CFIndex a7, _QWORD *a8, __CFDictionary **a9)
{
  CFIndex Count;
  CFIndex v14;
  uint64_t v15;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v18;
  const void *Value;
  const void *v20;
  __CFDictionary *MutableCopy;
  CFRange v25;

  v25.location = a6;
  v25.length = a7;
  if (!a1)
    goto LABEL_21;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    goto LABEL_21;
  v14 = Count;
  v15 = 0;
  v16 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v16);
    v18 = ValueAtIndex;
    if (a4)
    {
      CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
      if (!FigCFEqual())
        goto LABEL_13;
    }
    Value = CFDictionaryGetValue(v18, CFSTR("key"));
    if (a5)
    {
      if (!CFArrayContainsValue(a5, v25, Value))
        goto LABEL_13;
    }
    else if (a2 && !FigCFEqual())
    {
      goto LABEL_13;
    }
    if (v15 == a3)
      break;
    ++v15;
LABEL_13:
    if (v14 == ++v16)
      goto LABEL_21;
  }
  if (a8)
  {
    v20 = CFDictionaryGetValue(v18, CFSTR("value"));
    if (v20)
      v20 = CFRetain(v20);
    *a8 = v20;
  }
  if (a9)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v18);
    CFDictionaryRemoveValue(MutableCopy, CFSTR("value"));
    *a9 = MutableCopy;
  }
LABEL_21:
  if (!a8)
    return 0;
  if (*a8)
    return 0;
  return 4294954689;
}

CFStringRef FigMetadataGetCoreMediaDataType(uint64_t a1, CFStringRef PreferredIdentifierForTag, uint64_t a3)
{
  CFTypeID v6;
  uint64_t v7;
  CFTypeID v8;
  CFTypeID v9;
  CFTypeID v10;
  CFStringRef *v11;
  CFIndex Length;
  CFStringRef *v13;
  const void *Value;
  const __CFDictionary *v15;
  const void *v16;
  int key;
  int key_4;
  int valuePtr;

  if (FigCFEqual())
    return PreferredIdentifierForTag;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!PreferredIdentifierForTag)
        return PreferredIdentifierForTag;
      v8 = CFGetTypeID(PreferredIdentifierForTag);
      if (v8 != CFNumberGetTypeID())
        return 0;
      key_4 = -1;
      CFNumberGetValue((CFNumberRef)PreferredIdentifierForTag, kCFNumberSInt32Type, &key_4);
      if (key_4 == 22)
      {
        PreferredIdentifierForTag = 0;
        switch(a3)
        {
          case 1:
            v7 = MEMORY[0x1E0CA2488];
            return *(CFStringRef *)v7;
          case 2:
            v7 = MEMORY[0x1E0CA2470];
            return *(CFStringRef *)v7;
          case 4:
            v7 = MEMORY[0x1E0CA2478];
            return *(CFStringRef *)v7;
          case 8:
            v7 = MEMORY[0x1E0CA2480];
            return *(CFStringRef *)v7;
          default:
            return PreferredIdentifierForTag;
        }
        return PreferredIdentifierForTag;
      }
      if (key_4 == 21)
      {
        PreferredIdentifierForTag = 0;
        switch(a3)
        {
          case 1:
            goto LABEL_22;
          case 2:
            goto LABEL_41;
          case 4:
            goto LABEL_42;
          case 8:
            goto LABEL_43;
          default:
            return PreferredIdentifierForTag;
        }
        return PreferredIdentifierForTag;
      }
      MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpQuickTimeMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping);
      v15 = (const __CFDictionary *)gQTMetadataDataTypeToCoreMediaDataTypeDict;
      v16 = (const void *)key_4;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpUTIMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUTIMapping);
            return (CFStringRef)CFDictionaryGetValue((CFDictionaryRef)gUTIDataTypeToCoreMediaDataTypeDict, PreferredIdentifierForTag);
          }
          return 0;
        }
        if (PreferredIdentifierForTag)
        {
          v10 = CFGetTypeID(PreferredIdentifierForTag);
          if (v10 == CFStringGetTypeID())
          {
            v11 = (CFStringRef *)MEMORY[0x1E0CA5A90];
            Length = CFStringGetLength(PreferredIdentifierForTag);
            v13 = (CFStringRef *)MEMORY[0x1E0CA5A88];
            if (Length != 3)
              v13 = v11;
            PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(*v13, PreferredIdentifierForTag, 0);
            if (PreferredIdentifierForTag)
            {
              MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpUTIMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUTIMapping);
              Value = CFDictionaryGetValue((CFDictionaryRef)gUTIDataTypeToCoreMediaDataTypeDict, PreferredIdentifierForTag);
              CFRelease(PreferredIdentifierForTag);
              return (CFStringRef)Value;
            }
            return PreferredIdentifierForTag;
          }
          return 0;
        }
        return PreferredIdentifierForTag;
      }
      if (!PreferredIdentifierForTag)
        return PreferredIdentifierForTag;
      v9 = CFGetTypeID(PreferredIdentifierForTag);
      if (v9 != CFNumberGetTypeID())
        return 0;
      key = -1;
      CFNumberGetValue((CFNumberRef)PreferredIdentifierForTag, kCFNumberSInt32Type, &key);
      if (key == 21)
      {
        PreferredIdentifierForTag = 0;
        switch(a3)
        {
          case 1:
LABEL_22:
            v7 = MEMORY[0x1E0CA2468];
            return *(CFStringRef *)v7;
          case 2:
LABEL_41:
            v7 = MEMORY[0x1E0CA2450];
            return *(CFStringRef *)v7;
          case 4:
LABEL_42:
            v7 = MEMORY[0x1E0CA2458];
            return *(CFStringRef *)v7;
          case 8:
LABEL_43:
            v7 = MEMORY[0x1E0CA2460];
            return *(CFStringRef *)v7;
          default:
            return PreferredIdentifierForTag;
        }
        return PreferredIdentifierForTag;
      }
      MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpiTunesMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpiTunesMetadataMapping);
      v15 = (const __CFDictionary *)giTunesDataTypeToCoreMediaDataTypeDict;
      v16 = (const void *)key;
    }
    return (CFStringRef)CFDictionaryGetValue(v15, v16);
  }
  if (PreferredIdentifierForTag)
  {
    v6 = CFGetTypeID(PreferredIdentifierForTag);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = -1;
      CFNumberGetValue((CFNumberRef)PreferredIdentifierForTag, kCFNumberSInt32Type, &valuePtr);
      switch(valuePtr)
      {
        case 3:
          v7 = MEMORY[0x1E0CA2490];
          return *(CFStringRef *)v7;
        case 2:
          v7 = MEMORY[0x1E0CA2498];
          return *(CFStringRef *)v7;
        case 0:
          v7 = MEMORY[0x1E0CA2440];
          return *(CFStringRef *)v7;
      }
    }
    return 0;
  }
  return PreferredIdentifierForTag;
}

uint64_t FigMetadataGetDataTypeWithNamespaceForCoreMediaDataType(uint64_t a1, const void *a2, const void **a3)
{
  uint64_t result;
  uint64_t *v6;

  if (FigCFEqual())
  {
    *a3 = a2;
    return 1;
  }
  if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpQuickTimeMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping);
    v6 = &gCoreMediaDataTypeToQTMetadataDataTypeDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpiTunesMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpiTunesMetadataMapping);
    v6 = &gCoreMediaDataTypeToiTunesDataTypeDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpUserdataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUserdataMapping);
    v6 = &gCoreMediaDataTypeToUserDataTypeDict;
  }
  else
  {
    result = FigCFEqual();
    if (!(_DWORD)result)
      return result;
    MEMORY[0x19402F294](&FigCoreMediaDataTypesSetUpUTIMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUTIMapping);
    v6 = &gCoreMediaDataTypeToUTIDataTypeDict;
  }
  result = *v6;
  if (*v6)
    return CFDictionaryGetValueIfPresent((CFDictionaryRef)result, a2, a3);
  return result;
}

BOOL FigMetadataDataLengthCanHoldValue(char a1, int a2, CFNumberRef number)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;

  if (a2)
  {
    v4 = -1 << (8 * a1 - 1);
    v7 = 0;
    CFNumberGetValue(number, kCFNumberSInt64Type, &v7);
    return v4 <= v7 && v7 <= ~v4;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &v7);
    return !v7 && v8 >> (8 * a1) == 0;
  }
}

uint64_t FigMetadataGetNumericalDataTypeForMetadataProperties(uint64_t a1, const __CFDictionary *a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  const __CFString *Value;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString **v12;
  CFTypeID v13;
  uint64_t result;
  uint64_t v15;
  CFStringRef CoreMediaDataType;
  CFStringRef v17;
  const void *v18;
  int valuePtr;

  valuePtr = 0;
  if (!a2)
    return FigSignalErrorAt();
  if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
    return 4294954516;
  if (!a4)
    return FigSignalErrorAt();
  Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("dataType"));
  if (!Value)
    return 4294954516;
  v10 = Value;
  v11 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("dataTypeNamespace"));
  if (!v11)
  {
    v11 = CFSTR("com.apple.quicktime.mdta");
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        v12 = (const __CFString **)&kFigMetadataDataTypeNamespace_iTunes;
      }
      else
      {
        if (!FigCFEqual() && !FigCFEqual())
          return 4294954516;
        v12 = (const __CFString **)&kFigMetadataDataTypeNamespace_Userdata;
      }
      v11 = *v12;
    }
    if (v11)
      goto LABEL_16;
    return 4294954516;
  }
LABEL_16:
  if (FigCFEqual())
  {
    v13 = CFGetTypeID(v10);
    if (v13 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v10, kCFNumberSInt32Type, &valuePtr);
      FigCFDictionaryGetCFIndexIfPresent();
      result = 0;
      v15 = 0;
    }
    else
    {
      v15 = 0;
      result = 4294954516;
    }
  }
  else
  {
    v18 = 0;
    FigCFDictionaryGetCFIndexIfPresent();
    v15 = 0;
    CoreMediaDataType = FigMetadataGetCoreMediaDataType((uint64_t)v11, v10, 0);
    if (CoreMediaDataType
      && (v17 = CoreMediaDataType,
          FigMetadataGetDataTypeWithNamespaceForCoreMediaDataType(a3, CoreMediaDataType, &v18)))
    {
      valuePtr = (int)v18;
      if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2468]) || CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2488]))
      {
        result = 0;
        v15 = 1;
      }
      else if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2450]) || CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2470]))
      {
        result = 0;
        v15 = 2;
      }
      else if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2458]) || CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2478]))
      {
        result = 0;
        v15 = 4;
      }
      else if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2460])
             || (result = CFEqual(v17, (CFTypeRef)*MEMORY[0x1E0CA2480]), (_DWORD)result))
      {
        result = 0;
        v15 = 8;
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      result = 4294954685;
    }
  }
  if (a5)
    *a5 = v15;
  *a4 = valuePtr;
  return result;
}

__CFArray *FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v7;
  CFTypeRef v8;
  BOOL v9;
  CFTypeID v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CFTypeRef *, _QWORD);
  CFTypeID v14;
  const __CFData *v15;
  const char *BytePtr;
  size_t Length;
  size_t v18;
  size_t v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  int v24;
  int v25;
  unsigned int v26;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v28;
  unsigned int v29;
  const char *v30;
  size_t v31;
  size_t v32;
  CFStringRef v33;
  CFStringRef v34;
  int v35;
  CFMutableArrayRef v36;
  __CFDictionary *v37;
  __CFArray *v38;
  __CFArray *v39;
  CFIndex Count;
  CFIndex v41;
  uint64_t (*v42)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v43;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CFTypeRef *, _QWORD);
  CFTypeID v48;
  int v49;
  const __CFData *v50;
  const char *v51;
  size_t v52;
  size_t v53;
  size_t v54;
  const char *v55;
  CFStringRef v56;
  CFStringRef v57;
  unsigned int *v58;
  unsigned int v59;
  void *v60;
  size_t v61;
  CFStringRef v62;
  int v63;
  const void *v64;
  CFIndex v65;
  signed int v66;
  CFDictionaryRef v67;
  CFDictionaryRef v68;
  CFDictionaryRef v69;
  CFIndex v70;
  CFDictionaryRef v71;
  CFDictionaryRef v72;
  int v73;
  CFMutableArrayRef v74;
  CFIndex v75;
  const void *ValueAtIndex;
  const void *Value;
  const __CFAllocator *blockAllocator;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  CFIndex range;
  CMTime v84;
  CMTime time;
  CFTypeRef cf;
  int valuePtr;
  CFTypeRef v88;
  CMBlockBufferRef blockBufferOut;
  void *values[2];
  const void *v91;
  __int128 memoryBlock;
  const __CFString *v93;
  uint64_t v94;
  CFRange v95;

  v94 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  cf = 0;
  if (!a2)
    return 0;
  v2 = a2;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v4)
    goto LABEL_48;
  v81 = v4(v2);
  if (v81 < 1)
    goto LABEL_48;
  FigBaseObject = FigMetadataReaderGetFigBaseObject(v2);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v6)
    goto LABEL_48;
  v7 = v6(FigBaseObject, CFSTR("formatVersion"), a1, &cf);
  v8 = cf;
  if (v7)
    v9 = 1;
  else
    v9 = cf == 0;
  if (v9)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    if (cf)
      goto LABEL_51;
    goto LABEL_52;
  }
  v10 = CFGetTypeID(cf);
  if (v10 != CFNumberGetTypeID())
  {
LABEL_48:
    v36 = 0;
    v37 = 0;
    v38 = 0;
LABEL_49:
    v39 = 0;
    goto LABEL_50;
  }
  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v11 = 0;
  v80 = v2;
  do
  {
    v12 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v12)
      goto LABEL_48;
    if (v12(v2, CFSTR("org.id3"), CFSTR("CTOC"), v11, a1, &cf, 0) || cf == 0)
      goto LABEL_48;
    v14 = CFGetTypeID(cf);
    if (v14 != CFDataGetTypeID())
      goto LABEL_48;
    v15 = (const __CFData *)cf;
    BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
    Length = CFDataGetLength(v15);
    v18 = strnlen(BytePtr, Length);
    if (v18 >= Length || (v19 = v18 + 1, (uint64_t)(v18 + 1) >= (uint64_t)Length))
    {
      v35 = FigSignalErrorAt();
LABEL_38:
      v28 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      if (!v35)
        goto LABEL_31;
      goto LABEL_50;
    }
    v20 = &BytePtr[Length];
    v21 = &BytePtr[v19];
    v22 = &BytePtr[v19];
    v25 = *(unsigned __int8 *)v22;
    v23 = v22 + 1;
    v24 = v25;
    if (v23 >= &BytePtr[Length]
      || (v26 = *(unsigned __int8 *)v23, !*v23)
      || (Mutable = CFArrayCreateMutable(a1, *(unsigned __int8 *)v23, MEMORY[0x1E0C9B378])) == 0)
    {
      v35 = FigSignalErrorAt();
LABEL_37:
      v2 = v80;
      goto LABEL_38;
    }
    v28 = Mutable;
    v29 = 0;
    v30 = v21 + 2;
    do
    {
      v31 = strnlen(v30, v20 - v30);
      if (v31 >= v20 - v30 || (v32 = v31, (v33 = CFStringCreateWithBytes(a1, (const UInt8 *)v30, v31, 0, 0)) == 0))
      {
        v35 = FigSignalErrorAt();
        CFRelease(v28);
        goto LABEL_37;
      }
      v34 = v33;
      CFArrayAppendValue(v28, v33);
      CFRelease(v34);
      v30 += v32 + 1;
      ++v29;
    }
    while (v29 < v26);
    if ((~v24 & 3) != 0)
    {
      CFRelease(v28);
      v28 = 0;
    }
    v2 = v80;
LABEL_31:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    ++v11;
  }
  while (v11 < v81 && !v28);
  if (!v28)
    goto LABEL_48;
  Count = CFArrayGetCount(v28);
  if (Count < 1
    || ((v41 = Count,
         (v42 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 40)) == 0)
      ? (v43 = 0)
      : (v43 = v42(v2, CFSTR("org.id3"), CFSTR("CHAP"))),
        v43 < v41))
  {
    v37 = 0;
  }
  else
  {
    v37 = CFDictionaryCreateMutable(0, v41, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v37)
    {
      v45 = 0;
      blockAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
      range = v41;
      v79 = v43;
      while (1)
      {
        v46 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v46)
          goto LABEL_128;
        if (v46(v2, CFSTR("org.id3"), CFSTR("CHAP"), v45, a1, &cf, 0) || cf == 0)
          goto LABEL_128;
        v48 = CFGetTypeID(cf);
        if (v48 != CFDataGetTypeID())
          goto LABEL_128;
        v49 = valuePtr;
        v50 = (const __CFData *)cf;
        v51 = (const char *)CFDataGetBytePtr((CFDataRef)cf);
        v52 = CFDataGetLength(v50);
        v53 = strnlen(v51, v52);
        if (v53 >= v52)
        {
          v73 = FigSignalErrorAt();
          goto LABEL_118;
        }
        v54 = v53;
        v55 = &v51[v52];
        v56 = CFStringCreateWithBytes(a1, (const UInt8 *)v51, v53, 0, 0);
        v57 = v56;
        v58 = (unsigned int *)&v51[v54 + 1];
        if ((uint64_t)(v52 - (v54 + 1)) < 4 || (uint64_t)(v52 - (v54 + 1) - 4) < 4 || v55 - (const char *)v58 - 8 < 8)
        {
          v73 = FigSignalErrorAt();
          if (v57)
            CFRelease(v57);
LABEL_118:
          v65 = range;
          if (v73)
            goto LABEL_128;
          goto LABEL_107;
        }
        v59 = *v58;
        v82 = v58[1];
        blockBufferOut = 0;
        values[0] = 0;
        v88 = 0;
        if ((v49 - 255) <= 0xFFFFFF02)
          break;
        v60 = v58 + 4;
        v61 = v55 - (const char *)(v58 + 4);
        if (v61 >= 0xFFFFFF7)
          break;
        v62 = v56;
        if (v61 < 0xB
          || (LODWORD(memoryBlock) = bswap32(v49 | 0x49443300),
              WORD2(memoryBlock) = 0,
              *(_DWORD *)((char *)&memoryBlock + 6) = bswap32(v61 & 0x7F | (((v61 >> 14) & 0x7F) << 16) & 0x80FF80FF | (((v61 >> 21) & 0x7F) << 24) | (((v61 >> 7) & 0x7F) << 8)),
              CMBlockBufferCreateWithMemoryBlock(a1, &memoryBlock, 0xAuLL, blockAllocator, 0, 0, 0xAuLL, 0, &blockBufferOut))|| CMBlockBufferAppendMemoryBlock(blockBufferOut, v60, v61, blockAllocator, 0, 0, v61, 0)|| FigMetadataReaderCreateForTimedID3(a1, (uint64_t)blockBufferOut, &v88))
        {
          v64 = 0;
          v65 = range;
          goto LABEL_83;
        }
        v63 = FigMetadataCopyMetadataItemsIf(a1, (uint64_t)v88, 0, 0, (__CFArray **)values);
        v64 = values[0];
        v65 = range;
        if (!v63)
          goto LABEL_83;
        if (values[0])
        {
          CFRelease(values[0]);
LABEL_115:
          v64 = 0;
        }
        v65 = range;
        v62 = v57;
LABEL_83:
        if (blockBufferOut)
          CFRelease(blockBufferOut);
        if (v88)
          CFRelease(v88);
        if (!v62)
          goto LABEL_105;
        v95.location = 0;
        v95.length = v65;
        if (CFArrayContainsValue(v28, v95, v62))
        {
          v66 = bswap32(v59);
          CMTimeMake(&time, v66, 1000);
          v67 = CMTimeCopyAsDictionary(&time, a1);
          CMTimeMake(&v84, (int)(bswap32(v82) - v66), 1000);
          v68 = CMTimeCopyAsDictionary(&v84, a1);
          v69 = v68;
          v91 = 0;
          *(_QWORD *)&memoryBlock = CFSTR("ChapterTime");
          *((_QWORD *)&memoryBlock + 1) = CFSTR("ChapterDuration");
          v93 = 0;
          values[0] = v67;
          values[1] = v68;
          if (v64)
          {
            v93 = CFSTR("ChapterMetadataItems");
            v91 = v64;
          }
          v62 = v57;
          if (v67 && v68)
          {
            if (v64)
              v70 = 3;
            else
              v70 = 2;
            v71 = CFDictionaryCreate(a1, (const void **)&memoryBlock, (const void **)values, v70, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionarySetValue(v37, v62, v71);
LABEL_98:
            CFRelease(v67);
            v72 = v71;
          }
          else
          {
            v71 = 0;
            v72 = 0;
            if (v67)
              goto LABEL_98;
          }
          if (v69)
            CFRelease(v69);
          if (v72)
            CFRelease(v72);
          v65 = range;
        }
        CFRelease(v62);
LABEL_105:
        if (v64)
          CFRelease(v64);
LABEL_107:
        v2 = v80;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v79 == ++v45)
        {
          v74 = CFArrayCreateMutable(a1, v65, MEMORY[0x1E0C9B378]);
          v39 = v74;
          if (!v74)
          {
LABEL_124:
            v38 = 0;
            goto LABEL_129;
          }
          v75 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v28, v75);
            Value = CFDictionaryGetValue(v37, ValueAtIndex);
            if (!Value)
              break;
            CFArrayAppendValue(v39, Value);
            if (v65 == ++v75)
              goto LABEL_124;
          }
          v36 = v28;
          v38 = v39;
          goto LABEL_49;
        }
      }
      FigSignalErrorAt();
      goto LABEL_115;
    }
  }
LABEL_128:
  v38 = 0;
  v39 = 0;
LABEL_129:
  v36 = v28;
LABEL_50:
  v8 = cf;
  if (cf)
LABEL_51:
    CFRelease(v8);
LABEL_52:
  if (v36)
    CFRelease(v36);
  if (v37)
    CFRelease(v37);
  if (v38)
    CFRelease(v38);
  return v39;
}

uint64_t FigIcyMetadataParseSampleBuffer(void *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v8;
  __CFDictionary *v9;
  BOOL v10;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t v12;
  CFDictionaryRef v13;
  size_t DataLength;
  uint64_t DataPointer;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  const __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  CFDictionaryRef v31;
  CFDictionaryRef v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  CFTypeRef *v37;
  CFTypeRef *v38;
  __CFArray *theArray;
  CFDictionaryRef v40;
  const __CFAllocator *allocator;
  CMTime time;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  void *values[4];
  void *keys[6];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  allocator = CFGetAllocator(a1);
  dataPointerOut = 0;
  blockBufferOut = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = v8;
  if (Mutable)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a1);
    v12 = CMBlockBufferCreateContiguous(0, DataBuffer, 0, 0, 0, 0, 0, &blockBufferOut);
    if ((_DWORD)v12)
    {
      v35 = v12;
      v13 = 0;
      goto LABEL_54;
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&time, (CMSampleBufferRef)a1);
    v13 = CMTimeCopyAsDictionary(&time, allocator);
    if (v13)
    {
      DataLength = CMBlockBufferGetDataLength(blockBufferOut);
      DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
      if ((_DWORD)DataPointer)
      {
LABEL_66:
        v35 = DataPointer;
        goto LABEL_54;
      }
      if (!dataPointerOut[DataLength - 1])
      {
        v37 = a2;
        v38 = a3;
        v40 = v13;
        v16 = dataPointerOut + 1;
        v17 = MEMORY[0x1E0C80978];
        while (1)
        {
          v18 = *(v16 - 1);
          if ((v18 & 0x80000000) != 0)
            break;
          if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) == 0)
            goto LABEL_15;
LABEL_14:
          dataPointerOut = v16++;
        }
        if (__maskrune(v18, 0x4000uLL))
          goto LABEL_14;
LABEL_15:
        theArray = Mutable;
        v19 = dataPointerOut;
        if (*dataPointerOut)
        {
          while (1)
          {
            v20 = strchr(v19, 61);
            if (!v20)
              goto LABEL_48;
            v21 = strchr(v20 + 1, 39);
            if (!v21)
              goto LABEL_48;
            v22 = v21;
            v23 = strchr(v21, 59);
            if (v23)
              v24 = v23 + 1;
            else
              v24 = &v22[strlen(v22)];
            v25 = v24;
            if (v24 >= v22)
            {
              v25 = v24;
              do
              {
                if (*v25 == 39)
                  break;
                --v25;
              }
              while (v25 >= v22);
            }
            if (v25 <= v22)
              goto LABEL_48;
            if (v22 + 1 < v25)
              break;
            do
            {
LABEL_43:
              dataPointerOut = v24;
              v33 = *v24;
              if ((v33 & 0x80000000) != 0)
                v34 = __maskrune(v33, 0x4000uLL);
              else
                v34 = *(_DWORD *)(v17 + 4 * v33 + 60) & 0x4000;
              ++v24;
            }
            while (v34);
            v19 = dataPointerOut;
            if (!*dataPointerOut)
              goto LABEL_48;
          }
          if (!strncasecmp(v19, "StreamUrl", 9uLL))
          {
            v27 = CFSTR("StreamUrl");
          }
          else
          {
            if (strncasecmp(v19, "StreamTitle", 0xBuLL))
            {
              keys[0] = (void *)134217984;
              v26 = FigCFStringCreateWithBytesWithUnknownEncoding();
              goto LABEL_33;
            }
            v27 = CFSTR("StreamTitle");
          }
          v26 = (uint64_t)CFRetain(v27);
LABEL_33:
          v28 = (__CFString *)v26;
          if (v26)
          {
            if (!FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
            {
              if (v28 == CFSTR("StreamUrl"))
              {
                v29 = (__CFString *)CFStringCreateWithBytes(allocator, (const UInt8 *)v22 + 1, (CFIndex)&v25[~(unint64_t)v22], 0x8000100u, 1u);
              }
              else
              {
                keys[0] = (void *)134217984;
                v29 = (__CFString *)FigCFStringCreateWithBytesWithUnknownEncoding();
              }
              v30 = v29;
              if (v29)
              {
                keys[0] = CFSTR("key");
                keys[1] = CFSTR("value");
                values[0] = v28;
                values[1] = v29;
                keys[2] = CFSTR("keyspace");
                keys[3] = CFSTR("timestamp");
                values[2] = CFSTR("icy");
                values[3] = v40;
                v31 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v31)
                {
                  v32 = v31;
                  CFArrayAppendValue(theArray, v28);
                  CFDictionarySetValue(v9, v28, v32);
                  CFRelease(v28);
                  v28 = v30;
                  v30 = (__CFString *)v32;
                }
                CFRelease(v28);
                v28 = v30;
              }
            }
            CFRelease(v28);
          }
          goto LABEL_43;
        }
LABEL_48:
        Mutable = theArray;
        if (v37)
          *v37 = CFRetain(theArray);
        v13 = v40;
        if (v38)
        {
          v35 = 0;
          *v38 = CFRetain(v9);
          if (!theArray)
            goto LABEL_55;
        }
        else
        {
          v35 = 0;
          if (!theArray)
            goto LABEL_55;
        }
LABEL_54:
        CFRelease(Mutable);
        goto LABEL_55;
      }
    }
    DataPointer = FigSignalErrorAt();
    goto LABEL_66;
  }
  v35 = FigSignalErrorAt();
  v13 = 0;
  if (Mutable)
    goto LABEL_54;
LABEL_55:
  if (v9)
    CFRelease(v9);
  if (v13)
    CFRelease(v13);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v35;
}

uint64_t FigIsCommonKeyMappedToMetadataFormat(const void *a1, uint64_t a2)
{
  uint64_t *v3;

  if (!a2)
    return 0;
  if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
    v3 = &gUserDataCommonKeyToOSTypeKeyDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
    v3 = &gISOUserDataCommonKeyToOSTypeKeyDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigQuickTimeMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigQuickTimeMetadataSetUpCommonKeyMapping);
    v3 = &gQuickTimeMetadataCommonKeyToNativeKeyDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19402F294](&FigiTunesMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpCommonKeyMapping);
    v3 = &giTunesMetadataCommonKeyToShortKeyDict;
  }
  else
  {
    if (!FigCFEqual())
      return 0;
    MEMORY[0x19402F294](&FigID3MetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigID3MetadataSetUpCommonKeyMapping);
    v3 = &gID3MetadataCommonKeyToOSTypeKeyDict;
  }
  if (*v3)
    return CFDictionaryContainsKey((CFDictionaryRef)*v3, a1);
  return 0;
}

const __CFData *FigMetadataCreateMetadataItemsFromFigMetadataPropertyListSampleBuffer(opaqueCMSampleBuffer *a1, _QWORD *a2)
{
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t DataPointer;
  size_t DataLength;
  CFIndex v6;
  const __CFAllocator *v7;
  const __CFData *v8;
  CFPropertyListRef v9;
  const void *v10;
  CFTypeID v11;
  UInt8 *bytes;
  CMBlockBufferRef blockBufferOut;

  bytes = 0;
  blockBufferOut = 0;
  if (!a2)
  {
    DataPointer = FigSignalErrorAt();
    goto LABEL_16;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  if (!DataBuffer)
    goto LABEL_11;
  DataPointer = CMBlockBufferCreateContiguous(0, DataBuffer, 0, 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)DataPointer)
  {
LABEL_16:
    v8 = (const __CFData *)DataPointer;
    goto LABEL_12;
  }
  DataLength = CMBlockBufferGetDataLength(blockBufferOut);
  if (!DataLength)
  {
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  v6 = DataLength;
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, (char **)&bytes);
  if ((_DWORD)DataPointer)
    goto LABEL_16;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (v8)
  {
    v9 = CFPropertyListCreateWithData(v7, v8, 0, 0, 0);
    if (v9)
    {
      v10 = v9;
      v11 = CFGetTypeID(v9);
      if (v11 == CFArrayGetTypeID())
        *a2 = v10;
      else
        CFRelease(v10);
    }
    CFRelease(v8);
    goto LABEL_11;
  }
  FigSignalErrorAt();
LABEL_12:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v8;
}

__CFArray *FigMetadataCreateMetadataItemsFromSampleBuffer(opaqueCMSampleBuffer *a1)
{
  CMBlockBufferRef DataBuffer;
  const opaqueCMFormatDescription *FormatDescription;
  signed int MediaSubType;
  const __CFAllocator *v5;
  CMBlockBufferRef v6;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v8;
  const __CFDictionary *ValueAtIndex;
  CFTypeRef cf;
  __CFArray *v12;
  CFStringRef theString1;
  void *value;

  cf = 0;
  v12 = 0;
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (CMFormatDescriptionGetMediaType(FormatDescription) != 1835365473)
    return v12;
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType <= 1768174367)
  {
    if (MediaSubType != 1701671783)
    {
      if (MediaSubType != 1768126752
        || !FigMetadataReaderCreateWithSampleBufferForIcy(*MEMORY[0x1E0C9AE00], a1, &cf))
      {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    theString1 = 0;
    value = 0;
    if (!a1)
      goto LABEL_25;
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (!SampleAttachmentsArray)
      goto LABEL_25;
    v8 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) < 1)
      goto LABEL_25;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0);
    if (!ValueAtIndex)
      goto LABEL_25;
    if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0CA4E08], (const void **)&value))
      goto LABEL_25;
    if (!value)
      goto LABEL_25;
    CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0CA49D8], (const void **)&theString1);
    if (!theString1
      || CFStringCompare(theString1, CFSTR("https://developer.apple.com/streaming/emsg-id3"), 0)
      && CFStringCompare(theString1, CFSTR("https://aomedia.org/emsg/ID3"), 0))
    {
      goto LABEL_25;
    }
    v6 = CMSampleBufferGetDataBuffer(a1);
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_12;
  }
  if (MediaSubType == 1768174368)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = DataBuffer;
LABEL_12:
    if (!FigMetadataReaderCreateForTimedID3(v5, (uint64_t)v6, &cf))
      goto LABEL_25;
    goto LABEL_27;
  }
  if (MediaSubType != 1835360888)
  {
    if (MediaSubType == 1886155636)
    {
      FigMetadataCreateMetadataItemsFromFigMetadataPropertyListSampleBuffer(a1, &v12);
      goto LABEL_27;
    }
LABEL_25:
    if (!cf)
      return v12;
    FigMetadataCopyMetadataItemsIf((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t)cf, 0, 0, &v12);
    goto LABEL_27;
  }
  if (!FigMetadataReaderCreateForBoxedMetadata(*MEMORY[0x1E0C9AE00], (uint64_t)DataBuffer, (uint64_t)FormatDescription, &cf))goto LABEL_25;
LABEL_27:
  if (cf)
    CFRelease(cf);
  return v12;
}

CFDictionaryRef FigMetadataSetUpISO639LanguageMapping()
{
  uint64_t v0;
  const double *v1;
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  CFDictionaryRef result;
  void *v5[162];
  void *values[162];
  void *keys[163];
  float64x2x3_t v8;

  keys[162] = *(void **)MEMORY[0x1E0C80C00];
  bzero(keys, 0x510uLL);
  bzero(values, 0x510uLL);
  bzero(v5, 0x510uLL);
  v0 = 0;
  v1 = (const double *)&FigMetadataSetUpISO639LanguageMapping_sLanguageMapping;
  do
  {
    v8 = vld3q_f64(v1);
    v1 += 6;
    *(float64x2_t *)&keys[v0] = v8.val[0];
    *(float64x2_t *)&values[v0] = v8.val[1];
    *(float64x2_t *)&v5[v0] = v8.val[2];
    v0 += 2;
  }
  while (v0 != 162);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  gISO639CanonicalToISO639_2TDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 162, MEMORY[0x1E0C9B390], 0);
  gISO639CanonicalToLangCodeDict = (uint64_t)CFDictionaryCreate(v2, (const void **)keys, (const void **)v5, 162, v3, 0);
  result = CFDictionaryCreate(v2, (const void **)values, (const void **)keys, 162, 0, MEMORY[0x1E0C9B3A0]);
  gISO639_2TToISO639_1Dict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigMetadataSetUpISO639NonCanonicalLanguageMapping()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  const __CFAllocator *v5;
  CFDictionaryRef result;
  _OWORD v7[3];
  void *keys[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v0 = 0;
  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)keys = 0u;
  memset(v7, 0, sizeof(v7));
  v1 = &qword_1E2F8F3D0;
  do
  {
    keys[v0] = (void *)*(v1 - 1);
    v2 = *v1;
    v1 += 2;
    *(_QWORD *)((char *)v7 + v0 * 8) = v2;
    ++v0;
  }
  while (v0 != 3);
  v3 = &qword_1E2F8F400;
  do
  {
    keys[v0] = (void *)*(v3 - 1);
    v4 = *v3;
    v3 += 2;
    *(_QWORD *)((char *)v7 + v0 * 8) = v4;
    ++v0;
  }
  while (v0 != 6);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gISO639NonCanonicalToISO639_2TDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)v7, 6, MEMORY[0x1E0C9B390], 0);
  result = CFDictionaryCreate(v5, (const void **)v7, (const void **)keys, 3, 0, 0);
  gISO639_2TToISO639_1NonCanonicalDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigUserDataSetUpCommonKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  CFDictionaryRef result;
  const __CFString *v3;
  void *values[24];
  void *keys[19];

  keys[18] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("title");
  keys[1] = CFSTR("subject");
  keys[2] = CFSTR("description");
  keys[3] = CFSTR("publisher");
  keys[4] = CFSTR("contributor");
  keys[5] = CFSTR("creationDate");
  keys[6] = CFSTR("type");
  keys[7] = CFSTR("format");
  keys[8] = CFSTR("source");
  keys[9] = CFSTR("location");
  keys[10] = CFSTR("copyrights");
  keys[11] = CFSTR("albumName");
  keys[12] = CFSTR("author");
  keys[13] = CFSTR("artist");
  keys[14] = CFSTR("make");
  keys[15] = CFSTR("model");
  keys[16] = CFSTR("software");
  keys[17] = CFSTR("accessibilityDescription");
  values[0] = CFSTR("title");
  values[1] = CFSTR("title");
  values[2] = CFSTR("title");
  values[3] = CFSTR("subject");
  values[4] = CFSTR("description");
  values[5] = CFSTR("description");
  values[6] = CFSTR("publisher");
  values[7] = CFSTR("contributor");
  values[8] = CFSTR("contributor");
  values[9] = CFSTR("contributor");
  values[10] = CFSTR("contributor");
  values[11] = CFSTR("creationDate");
  values[12] = CFSTR("type");
  values[13] = CFSTR("format");
  values[14] = CFSTR("source");
  values[15] = CFSTR("location");
  values[16] = CFSTR("copyrights");
  values[17] = CFSTR("albumName");
  values[18] = CFSTR("author");
  values[19] = CFSTR("artist");
  values[20] = CFSTR("make");
  values[21] = CFSTR("model");
  values[22] = CFSTR("software");
  values[23] = CFSTR("accessibilityDescription");
  v3 = CFSTR("title");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  gUserDataCommonKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&FigUserDataSetUpCommonKeyMapping_toUserdataKeys, 18, MEMORY[0x1E0C9B390], 0);
  gUserDataOSTypeKeyToCommonKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)&FigUserDataSetUpCommonKeyMapping_fromUserdataKeys, (const void **)values, 24, 0, MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreate(v0, (const void **)&v3, &FigUserDataSetUpCommonKeyMapping_keyMappingCount, 1, v1, 0);
  gUserDataCommonKeyMappingCountDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigISOUserDataSetUpCommonKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  CFDictionaryRef result;
  const __CFString *v3;
  void *values[11];
  void *v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *keys[11];

  keys[10] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("copyrights");
  keys[1] = CFSTR("author");
  keys[2] = CFSTR("contributor");
  keys[3] = CFSTR("location");
  keys[4] = CFSTR("title");
  keys[5] = CFSTR("description");
  keys[6] = CFSTR("artwork");
  keys[7] = CFSTR("creationDate");
  keys[8] = CFSTR("software");
  keys[9] = CFSTR("accessibilityDescription");
  v7 = xmmword_1932FAD20;
  v8 = *(_OWORD *)"pcsd";
  v9 = xmmword_1932FAD40;
  *(_OWORD *)v5 = *(_OWORD *)"trpc";
  v6 = *(_OWORD *)"frep";
  v10 = 1633969523;
  values[0] = CFSTR("copyrights");
  values[1] = CFSTR("author");
  values[2] = CFSTR("contributor");
  values[3] = CFSTR("location");
  values[4] = CFSTR("title");
  values[5] = CFSTR("title");
  values[6] = CFSTR("description");
  values[7] = CFSTR("artwork");
  values[8] = CFSTR("creationDate");
  values[9] = CFSTR("software");
  values[10] = CFSTR("accessibilityDescription");
  v3 = CFSTR("title");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  gISOUserDataCommonKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)"trpc", 10, MEMORY[0x1E0C9B390], 0);
  gISOUserDataOSTypeKeyToCommonKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)v5, (const void **)values, 11, 0, MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreate(v0, (const void **)&v3, &FigISOUserDataSetUpCommonKeyMapping_keyMappingCount, 1, v1, 0);
  gISOUserDataCommonKeyMappingCountDict = (uint64_t)result;
  return result;
}

void FigUserDataSetUpStringKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryValueCallBacks *v1;
  __CFDictionary *Mutable;
  uint64_t i;
  unint64_t v4;
  const void *UInt32;
  void *keys[41];

  keys[40] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("@alb");
  keys[1] = CFSTR("@arg");
  keys[2] = CFSTR("@ART");
  keys[3] = CFSTR("@aut");
  keys[4] = CFSTR("@chp");
  keys[5] = CFSTR("@cmt");
  keys[6] = CFSTR("@com");
  keys[7] = CFSTR("@cpy");
  keys[8] = CFSTR("@day");
  keys[9] = CFSTR("@des");
  keys[10] = CFSTR("@dir");
  keys[11] = CFSTR("@dis");
  keys[12] = CFSTR("@enc");
  keys[13] = CFSTR("@nam");
  keys[14] = CFSTR("@gen");
  keys[15] = CFSTR("@hst");
  keys[16] = CFSTR("@inf");
  keys[17] = CFSTR("@key");
  keys[18] = CFSTR("@mak");
  keys[19] = CFSTR("@mod");
  keys[20] = CFSTR("@ope");
  keys[21] = CFSTR("@fmt");
  keys[22] = CFSTR("@src");
  keys[23] = CFSTR("@prf");
  keys[24] = CFSTR("@prd");
  keys[25] = CFSTR("@pub");
  keys[26] = CFSTR("@PRD");
  keys[27] = CFSTR("@swr");
  keys[28] = CFSTR("@req");
  keys[29] = CFSTR("@trk");
  keys[30] = CFSTR("@wrn");
  keys[31] = CFSTR("@wrt");
  keys[32] = CFSTR("@url");
  keys[33] = CFSTR("@xyz");
  keys[34] = CFSTR("@src");
  keys[35] = CFSTR("@phg");
  keys[36] = CFSTR("tnam");
  keys[37] = CFSTR("tagc");
  keys[38] = CFSTR("ludt");
  keys[39] = CFSTR("@ade");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gUserDataStringKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)FigUserDataSetUpStringKeyMapping_userdataOSTypeKeys, 40, MEMORY[0x1E0C9B390], 0);
  v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gUserDataOSTypeKeyToStringKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)FigUserDataSetUpStringKeyMapping_userdataOSTypeKeys, (const void **)keys, 40, 0, MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v0, 40, 0, v1);
  for (i = 0; i != 40; ++i)
  {
    v4 = FigUserDataSetUpStringKeyMapping_userdataOSTypeKeys[i];
    UInt32 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, (const void *)v4, UInt32);
    if (UInt32)
      CFRelease(UInt32);
  }
  gUserDataOSTypeKeyToCFNumberDict = (uint64_t)Mutable;
}

CFDictionaryRef FigISOUserDataSetUpStringKeyMapping()
{
  const __CFAllocator *v0;
  CFDictionaryRef result;
  void *keys[19];

  keys[18] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("cprt");
  keys[1] = CFSTR("date");
  keys[2] = CFSTR("ludt");
  keys[3] = CFSTR("auth");
  keys[4] = CFSTR("perf");
  keys[5] = CFSTR("gnre");
  keys[6] = CFSTR("yrrc");
  keys[7] = CFSTR("loci");
  keys[8] = CFSTR("titl");
  keys[9] = CFSTR("dscp");
  keys[10] = CFSTR("coll");
  keys[11] = CFSTR("urat");
  keys[12] = CFSTR("thmb");
  keys[13] = CFSTR("albm");
  keys[14] = CFSTR("kywd");
  keys[15] = CFSTR("clsf");
  keys[16] = CFSTR("rtng");
  keys[17] = CFSTR("tagc");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gISOUserDataStringKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)"trpc", 18, MEMORY[0x1E0C9B390], 0);
  result = CFDictionaryCreate(v0, (const void **)"trpc", (const void **)keys, 18, 0, MEMORY[0x1E0C9B3A0]);
  gISOUserDataOSTypeKeyToStringKeyDict = (uint64_t)result;
  return result;
}

void FigQuickTimeMetadataSetUpCommonKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const __CFDictionary *v2;
  __CFDictionary *Mutable;
  uint64_t v4;
  const CFArrayCallBacks *v5;
  const void *v6;
  const void *Value;
  CFIndex v8;
  const void **v9;
  const __CFAllocator *v10;
  CFArrayRef v11;
  void *values;
  void *keys;
  void *v14[22];
  void *v15[22];
  _QWORD v16[17];
  _QWORD v17[2];
  _QWORD v18[18];

  v18[17] = *MEMORY[0x1E0C80C00];
  v16[0] = v17;
  v15[0] = CFSTR("com.apple.quicktime.displayname");
  v15[1] = CFSTR("com.apple.quicktime.title");
  v17[0] = CFSTR("com.apple.quicktime.displayname");
  v17[1] = CFSTR("com.apple.quicktime.title");
  v16[1] = CFSTR("com.apple.quicktime.keywords");
  v15[2] = CFSTR("com.apple.quicktime.keywords");
  v16[2] = CFSTR("com.apple.quicktime.description");
  v16[3] = CFSTR("com.apple.quicktime.publisher");
  v15[3] = CFSTR("com.apple.quicktime.description");
  v15[4] = CFSTR("com.apple.quicktime.information");
  v15[5] = CFSTR("com.apple.quicktime.publisher");
  v16[4] = CFSTR("com.apple.quicktime.performer");
  v16[5] = CFSTR("com.apple.quicktime.creationdate");
  v15[6] = CFSTR("com.apple.quicktime.performer");
  v15[7] = CFSTR("com.apple.quicktime.creationdate");
  v16[6] = CFSTR("com.apple.quicktime.content.identifier");
  v16[7] = CFSTR("com.apple.quicktime.location.ISO6709");
  v15[8] = CFSTR("com.apple.quicktime.content.identifier");
  v15[9] = CFSTR("com.apple.quicktime.location.ISO6709");
  v16[8] = CFSTR("com.apple.quicktime.copyright");
  v16[9] = CFSTR("com.apple.quicktime.album");
  v15[10] = CFSTR("com.apple.quicktime.copyright");
  v15[11] = CFSTR("com.apple.quicktime.album");
  v16[10] = CFSTR("com.apple.quicktime.author");
  v16[11] = CFSTR("com.apple.quicktime.artist");
  v15[12] = CFSTR("com.apple.quicktime.author");
  v15[13] = CFSTR("com.apple.quicktime.artist");
  v15[14] = CFSTR("com.apple.quicktime.originalartist");
  v15[15] = CFSTR("com.apple.quicktime.director");
  v15[16] = CFSTR("com.apple.quicktime.producer");
  v16[12] = CFSTR("com.apple.quicktime.artwork");
  v16[13] = CFSTR("com.apple.quicktime.make");
  v15[17] = CFSTR("com.apple.quicktime.artwork");
  v15[18] = CFSTR("com.apple.quicktime.make");
  v16[14] = CFSTR("com.apple.quicktime.model");
  v16[15] = CFSTR("com.apple.quicktime.software");
  v15[19] = CFSTR("com.apple.quicktime.model");
  v15[20] = CFSTR("com.apple.quicktime.software");
  v18[1] = CFSTR("subject");
  v16[16] = CFSTR("com.apple.quicktime.accessibility.description");
  v15[21] = CFSTR("com.apple.quicktime.accessibility.description");
  v14[2] = CFSTR("subject");
  v18[2] = CFSTR("description");
  v18[3] = CFSTR("publisher");
  v14[3] = CFSTR("description");
  v14[4] = CFSTR("description");
  v18[5] = CFSTR("creationDate");
  v14[5] = CFSTR("publisher");
  v14[7] = CFSTR("creationDate");
  v18[6] = CFSTR("identifier");
  v18[7] = CFSTR("location");
  v14[8] = CFSTR("identifier");
  v14[9] = CFSTR("location");
  v18[8] = CFSTR("copyrights");
  v18[9] = CFSTR("albumName");
  v14[10] = CFSTR("copyrights");
  v14[11] = CFSTR("albumName");
  v14[12] = CFSTR("author");
  v18[10] = CFSTR("author");
  v18[4] = CFSTR("contributor");
  v14[6] = CFSTR("contributor");
  v18[11] = CFSTR("artist");
  v14[13] = CFSTR("artist");
  v14[14] = CFSTR("contributor");
  v14[15] = CFSTR("contributor");
  v14[16] = CFSTR("contributor");
  v18[12] = CFSTR("artwork");
  v18[13] = CFSTR("make");
  v14[17] = CFSTR("artwork");
  v14[18] = CFSTR("make");
  v18[14] = CFSTR("model");
  v18[15] = CFSTR("software");
  v14[19] = CFSTR("model");
  v14[20] = CFSTR("software");
  v14[21] = CFSTR("accessibilityDescription");
  v18[16] = CFSTR("accessibilityDescription");
  v18[0] = CFSTR("title");
  v14[0] = CFSTR("title");
  v14[1] = CFSTR("title");
  values = (void *)2;
  keys = CFSTR("title");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], 0);
  Mutable = CFDictionaryCreateMutable(v0, 0, v1, MEMORY[0x1E0C9B3A0]);
  v4 = 0;
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  do
  {
    v6 = (const void *)v18[v4];
    Value = CFDictionaryGetValue(v2, v6);
    if (Value)
    {
      v8 = (CFIndex)Value;
      v9 = (const void **)v16[v4];
      v10 = v0;
    }
    else
    {
      v9 = (const void **)&v16[v4];
      v10 = v0;
      v8 = 1;
    }
    v11 = CFArrayCreate(v10, v9, v8, v5);
    CFDictionaryAddValue(Mutable, v6, v11);
    CFRelease(v11);
    ++v4;
  }
  while (v4 != 17);
  gQuickTimeMetadataCommonKeyToNativeKeyDict = (uint64_t)Mutable;
  gQuickTimeMetadataNativeKeyToCommonKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)v15, (const void **)v14, 22, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
    CFRelease(v2);
}

CFDictionaryRef FigID3MetadataSetUpCommonKeyMapping()
{
  const __CFAllocator *v0;
  CFDictionaryRef result;
  void *keys[35];

  keys[34] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("title");
  keys[1] = CFSTR("creator");
  keys[2] = CFSTR("subject");
  keys[3] = CFSTR("description");
  keys[4] = CFSTR("publisher");
  keys[5] = CFSTR("contributor");
  keys[6] = CFSTR("creationDate");
  keys[7] = CFSTR("type");
  keys[8] = CFSTR("format");
  keys[9] = CFSTR("identifier");
  keys[10] = CFSTR("source");
  keys[11] = CFSTR("language");
  keys[12] = CFSTR("copyrights");
  keys[13] = CFSTR("albumName");
  keys[14] = CFSTR("author");
  keys[15] = CFSTR("artist");
  keys[16] = CFSTR("artwork");
  keys[17] = CFSTR("title");
  keys[18] = CFSTR("creator");
  keys[19] = CFSTR("subject");
  keys[20] = CFSTR("description");
  keys[21] = CFSTR("publisher");
  keys[22] = CFSTR("contributor");
  keys[23] = CFSTR("creationDate");
  keys[24] = CFSTR("type");
  keys[25] = CFSTR("format");
  keys[26] = CFSTR("identifier");
  keys[27] = CFSTR("source");
  keys[28] = CFSTR("language");
  keys[29] = CFSTR("copyrights");
  keys[30] = CFSTR("albumName");
  keys[31] = CFSTR("author");
  keys[32] = CFSTR("artist");
  keys[33] = CFSTR("artwork");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gID3MetadataCommonKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)"2TIT", 17, MEMORY[0x1E0C9B390], 0);
  result = CFDictionaryCreate(v0, (const void **)"2TIT", (const void **)keys, 34, 0, MEMORY[0x1E0C9B3A0]);
  gID3MetadataOSTypeKeyToCommonKeyDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigAudioFileInfoDictionarySetUpCommonKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  CFDictionaryRef result;
  void *values[11];
  void *keys[12];

  keys[11] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("title");
  keys[1] = CFSTR("description");
  keys[2] = CFSTR("publisher");
  keys[3] = CFSTR("creationDate");
  keys[4] = CFSTR("identifier");
  keys[5] = CFSTR("copyrights");
  keys[6] = CFSTR("albumName");
  keys[7] = CFSTR("author");
  keys[8] = CFSTR("artist");
  keys[9] = CFSTR("artwork");
  keys[10] = CFSTR("software");
  values[0] = CFSTR("info-title");
  values[1] = CFSTR("info-description");
  values[2] = CFSTR("info-provider");
  values[3] = CFSTR("info-recorded date");
  values[4] = CFSTR("info-ISRC");
  values[5] = CFSTR("info-copyright");
  values[6] = CFSTR("info-album");
  values[7] = CFSTR("info-author");
  values[8] = CFSTR("info-artist");
  values[9] = CFSTR("aart");
  values[10] = CFSTR("info-encoding application");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  gAudioFileCommonKeyToInfoDictionaryKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 11, MEMORY[0x1E0C9B390], 0);
  result = CFDictionaryCreate(v0, (const void **)values, (const void **)keys, 11, v1, MEMORY[0x1E0C9B3A0]);
  gAudioFileInfoDictionaryKeyToCommonKeyDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFAllocator *v13;
  CFDictionaryRef result;
  void *keys[26];
  void *values[2];
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA2498];
  values[0] = *(void **)MEMORY[0x1E0CA2440];
  values[1] = v0;
  v1 = (void *)*MEMORY[0x1E0CA2408];
  v17 = (void *)*MEMORY[0x1E0CA2490];
  v18 = v1;
  v2 = (void *)*MEMORY[0x1E0CA23F0];
  v19 = (void *)*MEMORY[0x1E0CA2418];
  v20 = v2;
  v3 = (void *)*MEMORY[0x1E0CA23E0];
  v21 = (void *)*MEMORY[0x1E0CA23F8];
  v22 = v3;
  v4 = (void *)*MEMORY[0x1E0CA4BB8];
  v23 = (void *)*MEMORY[0x1E0CA4BC0];
  v24 = v4;
  v5 = (void *)*MEMORY[0x1E0CA2450];
  v25 = (void *)*MEMORY[0x1E0CA2468];
  v26 = v5;
  v6 = (void *)*MEMORY[0x1E0CA2428];
  v27 = (void *)*MEMORY[0x1E0CA2458];
  v28 = v6;
  v7 = (void *)*MEMORY[0x1E0CA2448];
  v29 = (void *)*MEMORY[0x1E0CA23E8];
  v30 = v7;
  v8 = (void *)*MEMORY[0x1E0CA2488];
  v31 = (void *)*MEMORY[0x1E0CA2460];
  v32 = v8;
  v9 = (void *)*MEMORY[0x1E0CA2478];
  v33 = (void *)*MEMORY[0x1E0CA2470];
  v34 = v9;
  v10 = (void *)*MEMORY[0x1E0CA23D8];
  v35 = (void *)*MEMORY[0x1E0CA2480];
  v36 = v10;
  v11 = (void *)*MEMORY[0x1E0CA2438];
  v37 = (void *)*MEMORY[0x1E0CA2430];
  v38 = v11;
  v12 = (void *)*MEMORY[0x1E0CA2420];
  v39 = (void *)*MEMORY[0x1E0CA2410];
  v40 = v12;
  keys[0] = values[0];
  keys[1] = v0;
  keys[2] = v17;
  keys[3] = v2;
  keys[4] = v21;
  keys[5] = v25;
  keys[6] = v5;
  keys[7] = v27;
  keys[8] = v31;
  keys[9] = v8;
  keys[10] = v33;
  keys[11] = v9;
  keys[12] = v35;
  keys[13] = v6;
  keys[14] = v29;
  keys[15] = v7;
  keys[16] = v10;
  keys[17] = v37;
  keys[18] = v11;
  keys[19] = v39;
  keys[20] = v12;
  keys[21] = v1;
  keys[22] = v19;
  keys[23] = v3;
  keys[24] = v23;
  keys[25] = v4;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gQTMetadataDataTypeToCoreMediaDataTypeDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping_fromQTMetadataDataTypes, (const void **)values, 26, 0, MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreate(v13, (const void **)keys, (const void **)&FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping_toQTMetadataDataTypes, 26, MEMORY[0x1E0C9B390], 0);
  gCoreMediaDataTypeToQTMetadataDataTypeDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpiTunesMetadataMapping()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  const __CFAllocator *v5;
  CFDictionaryRef result;
  void *keys[11];
  void *values[2];
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA2498];
  values[0] = *(void **)MEMORY[0x1E0CA2440];
  values[1] = v0;
  v1 = (void *)*MEMORY[0x1E0CA2400];
  v9 = (void *)*MEMORY[0x1E0CA2490];
  v10 = v1;
  v2 = (void *)*MEMORY[0x1E0CA2418];
  v11 = (void *)*MEMORY[0x1E0CA2408];
  v12 = v2;
  v13 = (void *)*MEMORY[0x1E0CA23E0];
  keys[0] = values[0];
  keys[1] = v0;
  v3 = (void *)*MEMORY[0x1E0CA2468];
  keys[2] = v9;
  keys[3] = v3;
  v4 = (void *)*MEMORY[0x1E0CA2458];
  keys[4] = *(void **)MEMORY[0x1E0CA2450];
  keys[5] = v4;
  keys[6] = *(void **)MEMORY[0x1E0CA2460];
  keys[7] = v1;
  keys[8] = v11;
  keys[9] = v2;
  keys[10] = v13;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  giTunesDataTypeToCoreMediaDataTypeDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&FigCoreMediaDataTypesSetUpiTunesMetadataMapping_fromiTunesDataTypes, (const void **)values, 7, 0, MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreate(v5, (const void **)keys, (const void **)&FigCoreMediaDataTypesSetUpiTunesMetadataMapping_toiTunesDataTypes, 11, MEMORY[0x1E0C9B390], 0);
  gCoreMediaDataTypeToiTunesDataTypeDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpUTIMapping()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const __CFAllocator *v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  CFDictionaryRef result;
  void *v10[7];
  void *v11[7];
  void *values[2];
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *keys[2];
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA5B68];
  keys[0] = *(void **)MEMORY[0x1E0CA5B20];
  keys[1] = v0;
  v1 = (void *)*MEMORY[0x1E0CA5C10];
  v19 = (void *)*MEMORY[0x1E0CA5BA8];
  v20 = v1;
  v2 = (void *)*MEMORY[0x1E0CA5CA0];
  v21 = (void *)*MEMORY[0x1E0CA5AE0];
  v22 = v2;
  v23 = (void *)*MEMORY[0x1E0CA5C98];
  v3 = (void *)*MEMORY[0x1E0CA2400];
  values[0] = *(void **)MEMORY[0x1E0CA2440];
  values[1] = v3;
  v4 = (void *)*MEMORY[0x1E0CA2418];
  v13 = (void *)*MEMORY[0x1E0CA2408];
  v14 = v4;
  v5 = (void *)*MEMORY[0x1E0CA2498];
  v15 = (void *)*MEMORY[0x1E0CA23E0];
  v16 = v5;
  v17 = (void *)*MEMORY[0x1E0CA2490];
  v11[0] = values[0];
  v11[1] = v5;
  v11[2] = v17;
  v11[3] = v3;
  v11[4] = v13;
  v11[5] = v4;
  v11[6] = v15;
  v10[0] = keys[0];
  v10[1] = v2;
  v10[2] = v23;
  v10[3] = v0;
  v10[4] = v19;
  v10[5] = v1;
  v10[6] = v21;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gUTIDataTypeToCoreMediaDataTypeDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreate(v6, (const void **)v11, (const void **)v10, 7, v7, v8);
  gCoreMediaDataTypeToUTIDataTypeDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpUserdataMapping()
{
  const void *v0;
  CFDictionaryRef result;
  const void *v2[4];

  v2[3] = *(const void **)MEMORY[0x1E0C80C00];
  v0 = (const void *)*MEMORY[0x1E0CA2498];
  v2[0] = *(const void **)MEMORY[0x1E0CA2440];
  v2[1] = v0;
  v2[2] = *(const void **)MEMORY[0x1E0CA2490];
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, (const void **)&FigCoreMediaDataTypesSetUpUserdataMapping_toUserDataTypes, 3, MEMORY[0x1E0C9B390], 0);
  gCoreMediaDataTypeToUserDataTypeDict = (uint64_t)result;
  return result;
}

uint64_t FigMetadataReaderCreateForiTunesMetadataArray(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

__CFString *FigiTunesMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  CFTypeRef *DerivedStorage;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int (*v11)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v12;
  CFStringRef v13;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigiTunesMetadataReader %p\n"), DerivedStorage);
  v5 = CFCopyDescription(*DerivedStorage);
  if (v5)
  {
    v6 = v5;
    CFStringAppendFormat(Mutable, 0, CFSTR("  ByteStream = %@\n"), v5);
    CFRelease(v6);
  }
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v7)
  {
    v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      v9 = v8;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v8);
      for (i = 0; i != v9; ++i)
      {
        theDict = 0;
        cf = 0;
        v11 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v11 || v11(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v12 = CFCopyDescription(cf);
          if (v12)
          {
            v13 = v12;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v12);
            CFRelease(v13);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigiTunesMetadataCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  CFTypeRef *v6;
  CFTypeRef v7;
  uint64_t result;

  if (CFEqual(cf1, CFSTR("complete")))
  {
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_5:
    v7 = CFRetain(*v6);
    result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(cf1, CFSTR("format")))
  {
    v6 = (CFTypeRef *)&kFigMetadataFormat_iTunes;
    goto LABEL_5;
  }
  return 4294954512;
}

void metadataPropertiesCallback(const void *a1, const void *a2, __CFString *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  signed int valuePtr;

  if (CFEqual(a1, CFSTR("key")))
  {
    v6 = CFGetTypeID(a2);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr))
      {
        valuePtr = bswap32(valuePtr);
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %c%c%c%c\n"), (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      }
    }
    else
    {
      v7 = CFGetTypeID(a2);
      if (v7 == CFStringGetTypeID())
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %@\n"), a2);
    }
  }
  else if (CFEqual(a1, CFSTR("locale")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Locale = %@\n"), a2);
  }
  else if (CFEqual(a1, CFSTR("dataType")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     DataType = %@ (basic type)\n"), a2);
  }
}

uint64_t FigiTunesMetadataHasKey(const void *a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v8;
  CFTypeID v9;
  uint64_t result;
  CFTypeID v11;
  char v12;
  int v13;
  CFTypeID v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  CFComparisonResult v17;
  char v18;
  CFStringRef theString2;
  uint64_t valuePtr;
  _OWORD v21[7];
  _OWORD v22[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage || !a3 || !a2)
    goto LABEL_34;
  v8 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  valuePtr = 0;
  if (!CFEqual(a2, CFSTR("comn")))
  {
    if (CFEqual(a2, CFSTR("itsk")))
    {
      v11 = CFGetTypeID(a3);
      if (v11 == CFStringGetTypeID())
      {
        if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, (unsigned int *)&valuePtr + 1))
          goto LABEL_34;
      }
      else
      {
        v14 = CFGetTypeID(a3);
        if (v14 != CFNumberGetTypeID()
          || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
        {
          goto LABEL_34;
        }
      }
      if (HIDWORD(valuePtr) != 757935405)
        goto LABEL_17;
    }
    else if (CFEqual(a2, CFSTR("itlk")))
    {
      v12 = 0;
      v13 = 1;
LABEL_18:
      if (*(uint64_t *)(DerivedStorage + 24) >= 1
        && !FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v22, 0))
      {
        while (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
        {
          if ((_DWORD)valuePtr == 757935405)
          {
            if (v13)
            {
              theString2 = 0;
              v15 = CFGetAllocator(a1);
              if (FigiTunesMetadataCopyLongKey((uint64_t)v21, v15, &theString2))
                return 0;
              v16 = theString2;
              if (theString2)
              {
                v17 = CFStringCompare(a3, theString2, 0);
                CFRelease(v16);
                if (v17 == kCFCompareEqualTo)
                  return 1;
              }
            }
          }
          else
          {
            if (HIDWORD(valuePtr) == (_DWORD)valuePtr)
              v18 = v12;
            else
              v18 = 0;
            if ((v18 & 1) != 0)
              return 1;
          }
          if (FigAtomStreamAdvanceToNextAtom())
            return 0;
        }
      }
      return 0;
    }
LABEL_34:
    FigSignalErrorAt();
    return 0;
  }
  v9 = CFGetTypeID(a3);
  if (v9 != CFStringGetTypeID())
    goto LABEL_34;
  result = (uint64_t)CFDictionaryGetValue(v8, a3);
  HIDWORD(valuePtr) = result;
  if ((_DWORD)result)
  {
LABEL_17:
    v13 = 0;
    v12 = 1;
    goto LABEL_18;
  }
  return result;
}

uint64_t FigiTunesMetadataGetKeyCount(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int Atom;
  int v10;
  uint64_t result;
  _OWORD v12[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_25;
  v4 = DerivedStorage;
  memset(v12, 0, sizeof(v12));
  if (!a2)
  {
    if (!*(_BYTE *)(DerivedStorage + 40) || !*(_BYTE *)(DerivedStorage + 56))
    {
      v7 = 0;
LABEL_15:
      v8 = 1;
      goto LABEL_16;
    }
    v6 = *(_QWORD *)(DerivedStorage + 32);
LABEL_12:
    v5 = *(_QWORD *)(v4 + 48);
    return v5 + v6;
  }
  if (!CFEqual(a2, CFSTR("itsk")))
  {
    if (CFEqual(a2, CFSTR("itlk")))
    {
      if (!*(_BYTE *)(v4 + 56))
      {
        v8 = 0;
        v7 = 1;
LABEL_16:
        if (*(uint64_t *)(v4 + 24) < 1)
        {
          v6 = 0;
          v5 = 0;
          return v5 + v6;
        }
        if (!FigiTunesMetadataGetItemListAtomStream(v4, (uint64_t)v12, 0))
        {
          v6 = 0;
          v5 = 0;
          do
          {
            if (FigAtomStreamGetCurrentAtomTypeAndDataLength())
              return 0;
            v6 += v8;
            Atom = FigAtomStreamAdvanceToNextAtom();
          }
          while (!Atom);
          v10 = Atom;
          result = 0;
          if (v10 != -12890)
            return result;
          if (v7)
          {
            if (v7 == 1)
            {
              *(_QWORD *)(v4 + 48) = 0;
              *(_BYTE *)(v4 + 56) = 1;
              return v5 + v6;
            }
            *(_QWORD *)(v4 + 32) = v6;
          }
          else
          {
            *(_QWORD *)(v4 + 32) = v6;
            *(_QWORD *)(v4 + 48) = 0;
            *(_BYTE *)(v4 + 56) = 1;
          }
          *(_BYTE *)(v4 + 40) = 1;
          return v5 + v6;
        }
        return 0;
      }
      v6 = 0;
      goto LABEL_12;
    }
LABEL_25:
    FigSignalErrorAt();
    return 0;
  }
  if (!*(_BYTE *)(v4 + 40))
  {
    v7 = 2;
    goto LABEL_15;
  }
  v5 = 0;
  v6 = *(_QWORD *)(v4 + 32);
  return v5 + v6;
}

uint64_t FigiTunesMetadataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, const __CFAllocator *a4, CFStringRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  int v17;
  CFNumberRef v18;
  int valuePtr;
  _OWORD v20[7];
  _OWORD v21[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (a2)
  {
    if (CFEqual(a2, CFSTR("itsk")))
    {
      v11 = 0;
      v12 = 2;
      v13 = 1;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("itlk")))
        return FigSignalErrorAt();
      v13 = 0;
      v11 = 1;
      v12 = 1;
    }
  }
  else
  {
    v11 = 0;
    v13 = 0;
    v12 = 0;
  }
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  if (*(uint64_t *)(v10 + 24) <= 0)
    return FigSignalErrorAt();
  valuePtr = 0;
  if (!*(_BYTE *)(v10 + 57))
    goto LABEL_16;
  if (*(_DWORD *)(v10 + 60) != v12 || (v14 = *(_QWORD *)(v10 + 64), v14 >= a3))
  {
    *(_BYTE *)(v10 + 57) = 0;
LABEL_16:
    result = FigiTunesMetadataGetItemListAtomStream(v10, (uint64_t)v21, 0);
    v14 = 0;
    if ((_DWORD)result)
      return result;
    goto LABEL_17;
  }
  result = FigiTunesMetadataGetItemListAtomStream(v10, (uint64_t)v21, *(_QWORD *)(v10 + 72));
  if ((_DWORD)result)
    return result;
  *(_BYTE *)(v10 + 57) = 0;
LABEL_17:
  v16 = a2 == 0;
  if (a2)
    v17 = v13;
  else
    v17 = 1;
  if (v16)
    v11 = 1;
  do
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (valuePtr == 757935405)
    {
      if (!v11)
        goto LABEL_31;
      if (v14 == a3)
      {
        result = FigiTunesMetadataCopyLongKey((uint64_t)v20, a4, a5);
        if ((_DWORD)result)
          return result;
LABEL_38:
        *(_DWORD *)(v10 + 60) = v12;
        *(_QWORD *)(v10 + 64) = a3;
        result = FigAtomStreamGetCurrentAtomOffsetInParent();
        if (!(_DWORD)result)
          *(_BYTE *)(v10 + 57) = 1;
        return result;
      }
    }
    else
    {
      if (!v17)
        goto LABEL_31;
      if (v14 == a3)
      {
        v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        *a5 = (CFStringRef)v18;
        if (!v18)
          return FigSignalErrorAt();
        goto LABEL_38;
      }
    }
    ++v14;
LABEL_31:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
  }
  while (!(_DWORD)result);
  if ((_DWORD)result == -12890)
    return 0;
  else
    return result;
}

uint64_t FigiTunesMetadataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, const __CFAllocator *a5, unint64_t a6, unint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v14;
  CFTypeID v15;
  int v16;
  int v17;
  int v18;
  uint64_t ItemListAtomStream;
  CFTypeID v20;
  CFStringRef v21;
  CFStringRef v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int Atom;
  uint64_t v26;
  uint64_t v27;
  CFTypeID v28;
  CFTypeID v29;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34;
  CFStringRef v35;
  uint64_t valuePtr;
  _BYTE v37[112];
  _BYTE v38[128];

  memset(v38, 0, 112);
  memset(v37, 0, sizeof(v37));
  valuePtr = 0;
  v35 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage)
    goto LABEL_68;
  if (!(a6 | a7))
  {
    ItemListAtomStream = FigSignalErrorAt();
LABEL_79:
    v27 = ItemListAtomStream;
    goto LABEL_74;
  }
  v31 = (_QWORD *)a6;
  v32 = (_QWORD *)a7;
  if (!a2)
  {
    if (a3)
      goto LABEL_68;
    v16 = 0;
    v18 = 0;
    v17 = 0;
LABEL_11:
    if (*(uint64_t *)(DerivedStorage + 24) > 0)
    {
      if (!a3 && *(_BYTE *)(DerivedStorage + 57))
      {
        if (*(_DWORD *)(DerivedStorage + 60) == v17)
        {
          v34 = *(_QWORD *)(DerivedStorage + 64);
          if (v34 < a4)
          {
            ItemListAtomStream = FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v38, *(_QWORD *)(DerivedStorage + 72));
            if (!(_DWORD)ItemListAtomStream)
            {
              *(_BYTE *)(DerivedStorage + 57) = 0;
              goto LABEL_25;
            }
            goto LABEL_79;
          }
        }
        *(_BYTE *)(DerivedStorage + 57) = 0;
      }
      ItemListAtomStream = FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v38, 0);
      v34 = 0;
      if (!(_DWORD)ItemListAtomStream)
      {
LABEL_25:
        v21 = 0;
        if (!a2)
        {
          v18 = 1;
          v16 = 1;
        }
        while (1)
        {
          ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
          if ((_DWORD)ItemListAtomStream)
            goto LABEL_79;
          if ((_DWORD)valuePtr == 757935405)
          {
            if (v16)
            {
              if (!a3)
                goto LABEL_48;
              if (v21)
              {
                CFRelease(v21);
                v35 = 0;
              }
              ItemListAtomStream = FigiTunesMetadataCopyLongKey((uint64_t)v37, a5, &v35);
              if ((_DWORD)ItemListAtomStream)
                goto LABEL_79;
              v22 = v35;
              if (v35)
              {
                if (CFStringCompare(a3, v35, 0) == kCFCompareEqualTo)
                {
                  v21 = v22;
LABEL_48:
                  ItemListAtomStream = FigAtomStreamInitWithParent();
                  if (!(_DWORD)ItemListAtomStream)
                  {
                    v24 = v34;
                    while (1)
                    {
                      ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
                      if ((_DWORD)ItemListAtomStream)
                        break;
                      Atom = FigAtomStreamAdvanceToNextAtom();
                      if (Atom)
                        goto LABEL_52;
                    }
                  }
                  goto LABEL_79;
                }
                v23 = 0;
                v21 = v22;
                goto LABEL_56;
              }
              v21 = 0;
            }
          }
          else if (v18 && (!a3 || HIDWORD(valuePtr) == (_DWORD)valuePtr))
          {
            ItemListAtomStream = FigAtomStreamInitWithParent();
            if (!(_DWORD)ItemListAtomStream)
            {
              v24 = v34;
              while (1)
              {
                ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
                if ((_DWORD)ItemListAtomStream)
                  break;
                Atom = FigAtomStreamAdvanceToNextAtom();
                if (Atom)
                {
LABEL_52:
                  if (Atom == -12890)
                    v23 = 0;
                  else
                    v23 = Atom;
                  v34 = v24;
                  goto LABEL_56;
                }
              }
            }
            goto LABEL_79;
          }
          v23 = 0;
LABEL_56:
          v26 = FigAtomStreamAdvanceToNextAtom();
          if ((_DWORD)v26)
          {
            v27 = v26;
            a6 = (unint64_t)v31;
            a7 = (unint64_t)v32;
            if ((_DWORD)v26 != -12890)
              goto LABEL_74;
            if (!(_DWORD)v23)
            {
              v27 = 4294954689;
              goto LABEL_74;
            }
            goto LABEL_69;
          }
        }
      }
      goto LABEL_79;
    }
    goto LABEL_80;
  }
  v14 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  if (CFEqual(a2, CFSTR("comn")))
  {
    if (a3)
    {
      v15 = CFGetTypeID(a3);
      if (v15 == CFStringGetTypeID())
      {
        HIDWORD(valuePtr) = CFDictionaryGetValue(v14, a3);
        if (!HIDWORD(valuePtr))
        {
          v27 = 4294954691;
          goto LABEL_74;
        }
        goto LABEL_8;
      }
    }
LABEL_68:
    v23 = FigSignalErrorAt();
    goto LABEL_69;
  }
  if (CFEqual(a2, CFSTR("itsk")))
  {
    if (!a3)
      goto LABEL_8;
    v20 = CFGetTypeID(a3);
    if (v20 == CFStringGetTypeID())
    {
      if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, (unsigned int *)&valuePtr + 1))
        goto LABEL_68;
    }
    else
    {
      v29 = CFGetTypeID(a3);
      if (v29 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
        goto LABEL_68;
    }
    if (HIDWORD(valuePtr) != 757935405)
    {
LABEL_8:
      v16 = 0;
      v17 = 2;
      v18 = 1;
      goto LABEL_11;
    }
    goto LABEL_80;
  }
  if (!CFEqual(a2, CFSTR("itlk")))
    goto LABEL_68;
  if (!a3 || (v28 = CFGetTypeID(a3), v28 == CFStringGetTypeID()))
  {
    v18 = 0;
    v16 = 1;
    v17 = 1;
    goto LABEL_11;
  }
LABEL_80:
  v23 = FigSignalErrorAt();
  a6 = (unint64_t)v31;
  a7 = (unint64_t)v32;
LABEL_69:
  v27 = v23;
  if (!(_DWORD)v23)
  {
    if (a6)
      *(_QWORD *)a6 = 0;
    v27 = 0;
    if (a7)
      *(_QWORD *)a7 = 0;
  }
LABEL_74:
  if (v35)
    CFRelease(v35);
  return v27;
}

uint64_t FigiTunesMetadataCopyLongKey(uint64_t a1, const __CFAllocator *a2, CFStringRef *a3)
{
  uint64_t CurrentAtomTypeAndDataLength;
  int v6;
  int v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t Atom;
  CFMutableStringRef Mutable;
  const __CFString *v13;
  const __CFString *v14;
  CFStringRef v15;
  CFStringRef v16;
  UInt8 *bytes;
  char *dataPointerOut;
  size_t v20;
  size_t totalLengthOut;
  CMBlockBufferRef v22;
  CMBlockBufferRef theBuffer;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  v25 = 0;
  theBuffer = 0;
  v24 = 0;
  totalLengthOut = 0;
  v22 = 0;
  dataPointerOut = 0;
  v20 = 0;
  bytes = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamInitWithParent();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
  {
    v6 = 0;
    do
    {
      v7 = v6;
      CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_48;
      if (v25 == 1851878757)
      {
        if (v24 >= 1)
        {
          CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_48;
          CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer(v22, 0, 0, &v20, (char **)&bytes);
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_48;
          v9 = 0;
          if (bytes && v20)
          {
            v9 = 0;
            while (bytes[v9])
            {
              if (v20 == ++v9)
              {
                v9 = v20;
                break;
              }
            }
          }
          v20 = v9;
        }
        v6 = 0;
        v10 = 0;
        if (v7)
          goto LABEL_32;
      }
      else if (v25 == 1835360622)
      {
        if (v24 >= 1)
        {
          CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_48;
          CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_48;
          v8 = 0;
          if (dataPointerOut && totalLengthOut)
          {
            v8 = 0;
            while (dataPointerOut[v8])
            {
              if (totalLengthOut == ++v8)
              {
                v8 = totalLengthOut;
                break;
              }
            }
          }
          totalLengthOut = v8;
        }
        v6 = 1;
      }
      Atom = FigAtomStreamAdvanceToNextAtom();
    }
    while (!(_DWORD)Atom);
    v10 = Atom;
    if ((_DWORD)Atom != -12890)
    {
LABEL_32:
      Mutable = CFStringCreateMutable(a2, 0);
      if (dataPointerOut)
      {
        v13 = CFStringCreateWithBytes(a2, (const UInt8 *)dataPointerOut, totalLengthOut, 0x8000100u, 0);
        if (!v13)
        {
LABEL_46:
          v10 = FigSignalErrorAt();
          goto LABEL_39;
        }
        v14 = v13;
        CFStringAppend(Mutable, v13);
        CFRelease(v14);
      }
      if (!bytes)
      {
LABEL_38:
        *a3 = CFStringCreateCopy(a2, Mutable);
        goto LABEL_39;
      }
      v15 = CFStringCreateWithBytes(a2, bytes, v20, 0x8000100u, 0);
      if (v15)
      {
        v16 = v15;
        CFStringAppendFormat(Mutable, 0, CFSTR(".%@"), v15);
        CFRelease(v16);
        goto LABEL_38;
      }
      goto LABEL_46;
    }
    if (v6)
    {
      v10 = 0;
      goto LABEL_32;
    }
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  }
LABEL_48:
  v10 = CurrentAtomTypeAndDataLength;
  Mutable = 0;
LABEL_39:
  if (theBuffer)
    CFRelease(theBuffer);
  if (v22)
    CFRelease(v22);
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

uint64_t FigiTunesMetadataGetDataAtomCount(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
  {
    while (1)
    {
      result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if ((_DWORD)result)
        break;
      result = FigAtomStreamAdvanceToNextAtom();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == -12890)
        {
          result = 0;
          if (a2)
            *a2 = 0;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t FigiTunesMetadataCopyItemValueAndProperties()
{
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v3;
  int valuePtr;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  uint64_t v7;
  int v8;

  v8 = 0;
  theBuffer = 0;
  v7 = 0;
  dataPointerOut = 0;
  valuePtr = 0;
  v3 = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  else
    return 4294954687;
}

void ArrayiTunesDataFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *ArrayiTunesDataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v10;
  CFStringRef v11;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" Fig(Array)iTunesMetadataReader %p\n"), DerivedStorage);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
  {
    v6 = v5(a1, 0, 0);
    if (v6 >= 1)
    {
      v7 = v6;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v6);
      for (i = 0; i != v7; ++i)
      {
        theDict = 0;
        cf = 0;
        v9 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v9 || v9(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v10 = CFCopyDescription(cf);
          if (v10)
          {
            v11 = v10;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v10);
            CFRelease(v11);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ArrayiTunesDataCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  CFTypeRef *v6;
  CFTypeRef v7;
  uint64_t result;

  if (CFEqual(cf1, CFSTR("complete")))
  {
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_5:
    v7 = CFRetain(*v6);
    result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(cf1, CFSTR("format")))
  {
    v6 = (CFTypeRef *)&kFigMetadataFormat_iTunes;
    goto LABEL_5;
  }
  return 4294954512;
}

uint64_t *ArrayiTunesDataHasKey(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t *DerivedStorage;
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v7;
  CFTypeID v8;
  CFNumberRef v9;
  CFTypeID v10;
  const __CFNumber *v11;
  CFTypeID v12;
  unsigned int valuePtr;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return DerivedStorage;
  }
  if (!a3 || !a2)
    goto LABEL_21;
  v7 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  valuePtr = 0;
  if (CFEqual(a2, CFSTR("comn")))
  {
    v8 = CFGetTypeID(a3);
    if (v8 == CFStringGetTypeID())
    {
      valuePtr = CFDictionaryGetValue(v7, a3);
      if (valuePtr)
      {
        v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        a2 = CFSTR("itlk");
        goto LABEL_19;
      }
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("itsk")))
  {
    v10 = CFGetTypeID(a3);
    if (v10 == CFStringGetTypeID())
    {
      if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr))
        goto LABEL_21;
    }
    else
    {
      v12 = CFGetTypeID(a3);
      if (v12 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
        goto LABEL_21;
    }
    if (valuePtr == 757935405)
    {
LABEL_21:
      FigSignalErrorAt();
      return 0;
    }
    v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, CFSTR("itlk")))
      goto LABEL_21;
    v11 = (const __CFNumber *)CFRetain(a3);
  }
  v9 = v11;
LABEL_19:
  DerivedStorage = (uint64_t *)FigMetadataArrayHasKey(*DerivedStorage, (uint64_t)v9, (uint64_t)a2, 0, 0, 0);
  if (v9)
    CFRelease(v9);
  return DerivedStorage;
}

CFIndex ArrayiTunesDataGetKeyCount(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFIndex v5;
  CFIndex KeyCount;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_15;
  v4 = DerivedStorage;
  if (!a2)
  {
    if (!*(_BYTE *)(DerivedStorage + 16) || !*(_BYTE *)(DerivedStorage + 32))
    {
LABEL_9:
      KeyCount = FigMetadataArrayGetKeyCount(*(const __CFArray **)v4, (uint64_t)CFSTR("itsk"));
      *(_QWORD *)(v4 + 8) = KeyCount;
      *(_BYTE *)(v4 + 16) = 1;
      if (a2)
      {
        v5 = 0;
        return v5 + KeyCount;
      }
LABEL_17:
      v5 = FigMetadataArrayGetKeyCount(*(const __CFArray **)v4, (uint64_t)CFSTR("itlk"));
      *(_QWORD *)(v4 + 24) = v5;
      *(_BYTE *)(v4 + 32) = 1;
      return v5 + KeyCount;
    }
    KeyCount = *(_QWORD *)(DerivedStorage + 8);
LABEL_14:
    v5 = *(_QWORD *)(v4 + 24);
    return v5 + KeyCount;
  }
  if (!CFEqual(a2, CFSTR("itsk")))
  {
    if (CFEqual(a2, CFSTR("itlk")))
    {
      if (!*(_BYTE *)(v4 + 32))
      {
        KeyCount = 0;
        goto LABEL_17;
      }
      KeyCount = 0;
      goto LABEL_14;
    }
LABEL_15:
    FigSignalErrorAt();
    return 0;
  }
  if (!*(_BYTE *)(v4 + 16))
    goto LABEL_9;
  v5 = 0;
  KeyCount = *(_QWORD *)(v4 + 8);
  return v5 + KeyCount;
}

uint64_t ArrayiTunesDataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  const __CFArray **v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && a5
    && ((v9 = (const __CFArray **)DerivedStorage, !a2) || CFEqual(a2, CFSTR("itsk")) || CFEqual(a2, CFSTR("itlk"))))
  {
    return FigMetadataArrayCopyKeyAtIndex(*v9, a3, (uint64_t)a2, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ArrayiTunesDataGetItemCount(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  const __CFArray **DerivedStorage;
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v7;
  CFTypeID v8;
  CFNumberRef v9;
  CFTypeID v11;
  CFTypeID v12;
  const __CFNumber *v13;
  CFTypeID v14;
  unsigned int valuePtr;

  DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return (uint64_t)DerivedStorage;
  }
  if (!a2)
  {
    if (a3)
      goto LABEL_26;
    return FigMetadataArrayGetItemCount(*DerivedStorage, 0, (uint64_t)a2, 0, 0, 0);
  }
  v7 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  valuePtr = 0;
  if (CFEqual(a2, CFSTR("comn")))
  {
    if (a3)
    {
      v8 = CFGetTypeID(a3);
      if (v8 == CFStringGetTypeID())
      {
        valuePtr = CFDictionaryGetValue(v7, a3);
        if (valuePtr)
        {
          v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          a2 = CFSTR("itsk");
          goto LABEL_24;
        }
        return 0;
      }
    }
    goto LABEL_26;
  }
  if (!CFEqual(a2, CFSTR("itsk")))
  {
    if (!CFEqual(a2, CFSTR("itlk")))
      goto LABEL_26;
    if (a3)
    {
      v12 = CFGetTypeID(a3);
      if (v12 != CFStringGetTypeID())
        goto LABEL_26;
      v13 = (const __CFNumber *)CFRetain(a3);
LABEL_23:
      v9 = v13;
LABEL_24:
      DerivedStorage = (const __CFArray **)FigMetadataArrayGetItemCount(*DerivedStorage, (uint64_t)v9, (uint64_t)a2, 0, 0, 0);
      if (v9)
        CFRelease(v9);
      return (uint64_t)DerivedStorage;
    }
    return FigMetadataArrayGetItemCount(*DerivedStorage, 0, (uint64_t)a2, 0, 0, 0);
  }
  if (!a3)
    return FigMetadataArrayGetItemCount(*DerivedStorage, 0, (uint64_t)a2, 0, 0, 0);
  v11 = CFGetTypeID(a3);
  if (v11 == CFStringGetTypeID())
  {
    if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr))
      goto LABEL_26;
  }
  else
  {
    v14 = CFGetTypeID(a3);
    if (v14 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      goto LABEL_26;
  }
  if (valuePtr != 757935405)
  {
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    goto LABEL_23;
  }
LABEL_26:
  FigSignalErrorAt();
  return 0;
}

uint64_t ArrayiTunesDataCopyItemWithKeyAndIndex(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, unint64_t a6, __CFDictionary **a7)
{
  const __CFArray **DerivedStorage;
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v14;
  CFTypeID v15;
  CFNumberRef v16;
  CFTypeID v18;
  CFTypeID v19;
  const __CFNumber *v20;
  CFTypeID v21;
  uint64_t v22;
  unsigned int valuePtr;

  DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage || !(a6 | (unint64_t)a7))
    return FigSignalErrorAt();
  if (!a2)
  {
    if (a3)
      return FigSignalErrorAt();
    return FigMetadataArrayCopyItemWithKeyAndIndex(*DerivedStorage, 0, a4, (uint64_t)a2, 0, 0, 0, (_QWORD *)a6, a7);
  }
  v14 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  valuePtr = 0;
  if (!CFEqual(a2, CFSTR("comn")))
  {
    if (CFEqual(a2, CFSTR("itsk")))
    {
      if (a3)
      {
        v18 = CFGetTypeID(a3);
        if (v18 == CFStringGetTypeID())
        {
          if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr))
            return FigSignalErrorAt();
        }
        else
        {
          v21 = CFGetTypeID(a3);
          if (v21 != CFNumberGetTypeID())
            return FigSignalErrorAt();
          if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
            return FigSignalErrorAt();
        }
        if (valuePtr != 757935405)
        {
          v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          goto LABEL_24;
        }
        return FigSignalErrorAt();
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("itlk")))
        return FigSignalErrorAt();
      if (a3)
      {
        v19 = CFGetTypeID(a3);
        if (v19 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v20 = (const __CFNumber *)CFRetain(a3);
LABEL_24:
        v16 = v20;
LABEL_25:
        v22 = FigMetadataArrayCopyItemWithKeyAndIndex(*DerivedStorage, (uint64_t)v16, a4, (uint64_t)a2, 0, 0, 0, (_QWORD *)a6, a7);
        if (v16)
          CFRelease(v16);
        return v22;
      }
    }
    return FigMetadataArrayCopyItemWithKeyAndIndex(*DerivedStorage, 0, a4, (uint64_t)a2, 0, 0, 0, (_QWORD *)a6, a7);
  }
  if (a3)
  {
    v15 = CFGetTypeID(a3);
    if (v15 == CFStringGetTypeID())
    {
      valuePtr = CFDictionaryGetValue(v14, a3);
      if (valuePtr)
      {
        v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        a2 = CFSTR("itsk");
        goto LABEL_25;
      }
      return 4294954691;
    }
  }
  return FigSignalErrorAt();
}

double fhqCF_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void fhqCF_Finalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 80);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
  v7 = *(NSObject **)(a1 + 16);
  if (v7)
    dispatch_release(v7);
}

CFStringRef fhqCF_CopyFormattingDesc(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("FigHapticQueue:%p"), a1);
}

CFStringRef fhqCF_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  Float64 Rate;

  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = *(_QWORD *)(a1 + 24);
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 32));
  return CFStringCreateWithFormat(v2, 0, CFSTR("FigHapticQueue:%p{engine=%@, rate=%.1f}"), a1, v3, *(_QWORD *)&Rate);
}

uint64_t FigHapticQueueCreate(const __CFAllocator *a1, const void *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  NSObject *v11;
  dispatch_source_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v20[5];
  _QWORD handler[5];
  os_log_type_t type;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    if (FigHapticQueueGetTypeID_nonce != -1)
      dispatch_once(&FigHapticQueueGetTypeID_nonce, &__block_literal_global_25);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v7 = Instance;
      *(_QWORD *)(Instance + 24) = CFRetain(a2);
      *(_BYTE *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_DWORD *)(v7 + 56) = 1065353216;
      *(_DWORD *)(v7 + 88) = 0;
      if (dword_1EE2A2DF8)
      {
        v23 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v9 = CMBufferQueueCreateWithHandlers(a1, 0, &FigHapticQueueCreate_hapticPlayerQueueHandlers, (CMBufferQueueRef *)(v7 + 64));
      if (!(_DWORD)v9)
      {
        Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(v7 + 80) = Mutable;
        if (Mutable)
        {
          v11 = dispatch_queue_create("com.apple.coremedia.hapticsqueue", 0);
          *(_QWORD *)(v7 + 16) = v11;
          if (v11)
          {
            v12 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v11);
            *(_QWORD *)(v7 + 72) = v12;
            if (v12)
            {
              v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
              if (v13)
              {
                v14 = v13;
                v15 = MEMORY[0x1E0C809B0];
                v16 = *(NSObject **)(v7 + 72);
                handler[0] = MEMORY[0x1E0C809B0];
                handler[1] = 0x40000000;
                handler[2] = __FigHapticQueueCreate_block_invoke;
                handler[3] = &__block_descriptor_tmp_17_0;
                handler[4] = v14;
                dispatch_source_set_event_handler(v16, handler);
                v17 = *(NSObject **)(v7 + 72);
                v20[0] = v15;
                v20[1] = 0x40000000;
                v20[2] = __FigHapticQueueCreate_block_invoke_2;
                v20[3] = &__block_descriptor_tmp_18_1;
                v20[4] = v14;
                dispatch_source_set_cancel_handler(v17, v20);
                dispatch_source_set_timer(*(dispatch_source_t *)(v7 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
                dispatch_resume(*(dispatch_object_t *)(v7 + 72));
                v18 = 0;
                *a3 = v7;
                return v18;
              }
            }
          }
          v18 = 4294949434;
LABEL_18:
          CFRelease((CFTypeRef)v7);
          return v18;
        }
        v9 = FigSignalErrorAt();
      }
      v18 = v9;
      goto LABEL_18;
    }
  }
  return FigSignalErrorAt();
}

double gFigHapticQueueTrace_block_invoke@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  uint64_t v5;

  FigHapticPlayerGetOutputTimeRange(a1, (uint64_t)&v4);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

double gFigHapticQueueTrace_block_invoke_2@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  FigHapticPlayerGetOutputTimeRange(a1, (uint64_t)&v4);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t gFigHapticQueueTrace_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMTime v5;
  CMTime time2;
  CMTime v7;
  CMTime time1;

  FigHapticPlayerGetOutputTimeRange(a2, (uint64_t)&v7);
  time1 = v7;
  FigHapticPlayerGetOutputTimeRange(a3, (uint64_t)&v5);
  time2 = v5;
  return CMTimeCompare(&time1, &time2);
}

uint64_t fhq_scheduleWaitingHapticPlayers(uint64_t a1)
{
  uint64_t v2;
  CMBufferRef v4;
  CMBufferRef v5;
  BOOL v6;

  v6 = 0;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  v2 = 0;
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 32)) > 0.0)
  {
    v4 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 64));
    if (v4)
    {
      v5 = v4;
      while (1)
      {
        v2 = fhq_scheduleHapticPlayer(a1, v5, &v6);
        CFRelease(v5);
        if ((_DWORD)v2 || v6)
          break;
        v5 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 64));
        if (!v5)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t FigHapticQueueSetTimebase(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v4[6];

  v2 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __FigHapticQueueSetTimebase_block_invoke;
  v4[3] = &__block_descriptor_tmp_19_0;
  v4[4] = a1;
  v4[5] = a2;
  dispatch_sync(v2, v4);
  return 0;
}

uint64_t FigHapticQueueSetActiveChannelIndex(uint64_t a1, CFNumberRef number)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  os_log_type_t type;
  int v10;
  _QWORD valuePtr[23];

  valuePtr[22] = *MEMORY[0x1E0C80C00];
  valuePtr[0] = 0;
  if (dword_1EE2A2DF8 >= 2)
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (number)
  {
    CFNumberGetValue(number, kCFNumberCFIndexType, valuePtr);
    v5 = valuePtr[0];
  }
  else
  {
    v5 = 0;
  }
  v6 = MEMORY[0x1E0C809B0];
  *(_QWORD *)(a1 + 48) = v5;
  v8[0] = v6;
  v8[1] = 0x40000000;
  v8[2] = __FigHapticQueueSetActiveChannelIndex_block_invoke;
  v8[3] = &__block_descriptor_tmp_21_0;
  v8[4] = a1;
  return fhq_applyBlockToAllPlayers(a1, v8);
}

uint64_t fhq_applyBlockToAllPlayers(uint64_t a1, void *a2)
{
  uint64_t result;

  result = fhq_applyBlockToSubmittedPlayers();
  if (!(_DWORD)result)
    return CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 64), (OSStatus (__cdecl *)(CMBufferRef, void *))applyBlockToBuffer, a2);
  return result;
}

uint64_t FigHapticQueueSetVolume(uint64_t a1, CFNumberRef number)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v5;
  uint64_t v6;
  _QWORD v8[5];
  os_log_type_t type;
  int v10;
  int valuePtr;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  valuePtr = 1065353216;
  if (dword_1EE2A2DF8 >= 2)
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (number)
  {
    CFNumberGetValue(number, kCFNumberFloatType, &valuePtr);
    v5 = *(float *)&valuePtr;
  }
  else
  {
    v5 = 1.0;
  }
  v6 = MEMORY[0x1E0C809B0];
  *(float *)(a1 + 56) = v5;
  v8[0] = v6;
  v8[1] = 0x40000000;
  v8[2] = __FigHapticQueueSetVolume_block_invoke;
  v8[3] = &__block_descriptor_tmp_22_0;
  v8[4] = a1;
  return fhq_applyBlockToAllPlayers(a1, v8);
}

uint64_t FigHapticQueueSetIsMuted(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  _QWORD v7[5];
  os_log_type_t type;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2DF8)
  {
    v9 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = MEMORY[0x1E0C809B0];
  *(_BYTE *)(a1 + 40) = a2;
  v7[0] = v5;
  v7[1] = 0x40000000;
  v7[2] = __FigHapticQueueSetIsMuted_block_invoke;
  v7[3] = &__block_descriptor_tmp_25;
  v7[4] = a1;
  return fhq_applyBlockToAllPlayers(a1, v7);
}

uint64_t FigHapticQueueStart(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if (dword_1EE2A2DF8)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueueStart_block_invoke;
  block[3] = &unk_1E2F8FA98;
  block[4] = &v9;
  block[5] = a1;
  dispatch_sync(v3, block);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t FigHapticQueuePause(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if (dword_1EE2A2DF8)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueuePause_block_invoke;
  block[3] = &unk_1E2F8FAC0;
  block[4] = &v9;
  block[5] = a1;
  dispatch_sync(v3, block);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t FigHapticQueueStop(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if (dword_1EE2A2DF8)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueueStop_block_invoke;
  block[3] = &unk_1E2F8FAE8;
  block[4] = &v9;
  block[5] = a1;
  dispatch_sync(v3, block);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t FigHapticQueueEnqueueSamples(uint64_t a1, CMSampleBufferRef sbuf)
{
  _QWORD handler[5];

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = __FigHapticQueueEnqueueSamples_block_invoke;
  handler[3] = &__block_descriptor_tmp_31_1;
  handler[4] = a1;
  return CMSampleBufferCallBlockForEachSample(sbuf, handler);
}

uint64_t fhq_scheduleHapticPlayer(uint64_t a1, const void *a2, BOOL *a3)
{
  double Rate;
  double v7;
  CMClockRef HostTimeClock;
  CMClockRef v9;
  const void *v10;
  const void *v11;
  CMClockRef v12;
  int v13;
  unsigned int v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v16;
  uint64_t started;
  NSObject *v18;
  NSObject *v19;
  uint64_t v21;
  CMTime v22;
  CMTime rhs;
  CMTime type;
  CMTime time1;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTimeRange v29;
  CMTime v30;
  CMTime v31;
  CMTime time2;
  CMTimeRange time[2];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 32));
  if (Rate <= 0.0)
    goto LABEL_11;
  v7 = Rate;
  memset(&v31, 0, sizeof(v31));
  HostTimeClock = CMClockGetHostTimeClock();
  CMSyncGetTime(&v31, HostTimeClock);
  memset(&v30, 0, sizeof(v30));
  v9 = CMClockGetHostTimeClock();
  v10 = *(const void **)(a1 + 32);
  time[0].start = v31;
  CMSyncConvertTime(&v30, &time[0].start, v9, v10);
  memset(&v29, 0, sizeof(v29));
  FigHapticPlayerGetOutputTimeRange((uint64_t)a2, (uint64_t)&v29);
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  time[0].start = v30;
  time2 = v29.start;
  if ((CMTimeCompare(&time[0].start, &time2) & 0x80000000) == 0)
  {
    time[0] = v29;
    time2 = v30;
    if (CMTimeRangeContainsTime(time, &time2))
    {
      v27 = v31;
      time[0].start = v30;
      time2 = v29.start;
      CMTimeSubtract(&v28, &time[0].start, &time2);
      goto LABEL_6;
    }
LABEL_11:
    v16 = 0;
    started = 0;
    if (!a3)
      return started;
    goto LABEL_22;
  }
  v11 = *(const void **)(a1 + 32);
  v12 = CMClockGetHostTimeClock();
  *(_OWORD *)&time[0].start.value = *(_OWORD *)&v29.start.value;
  time[0].start.epoch = v29.start.epoch;
  CMSyncConvertTime(&v27, &time[0].start, v11, v12);
  v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
LABEL_6:
  memset(&v26, 0, sizeof(v26));
  time[0].start = v27;
  time2 = v31;
  CMTimeSubtract(&v26, &time[0].start, &time2);
  v13 = *(_DWORD *)(a1 + 88);
  if (v13 < 10)
    v14 = 1;
  else
    v14 = 2;
  *(_DWORD *)(a1 + 88) = v13 + 1;
  if (v14 <= dword_1EE2A2DF8)
  {
    LODWORD(time1.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  time[0].start = v26;
  *(_OWORD *)&time2.value = kFigHapticQueue_HowFarIntoTheFutureToSubmit;
  time2.epoch = 0;
  if (CMTimeCompare(&time[0].start, &time2) <= 0)
  {
    if (dword_1EE2A2DF8 >= 2)
    {
      LODWORD(time1.value) = 0;
      LOBYTE(type.value) = 0;
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigHapticPlayerSetPlaybackRate((uint64_t)a2, v7);
    v21 = *(_QWORD *)(a1 + 24);
    time[0].start = v27;
    time2 = v28;
    started = FigHapticEngineStartPlayerAtHostTimeWithOffset(v21, (uint64_t)a2, (__int128 *)&time[0].start.value, (__int128 *)&time2.value);
    if (!(_DWORD)started)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), a2);
    v16 = 0;
    if (a3)
      goto LABEL_22;
  }
  else
  {
    if (dword_1EE2A2DF8 >= 2)
    {
      LODWORD(time1.value) = 0;
      LOBYTE(type.value) = 0;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    memset(time, 0, 24);
    CMBufferQueueGetFirstPresentationTimeStamp(&time[0].start, *(CMBufferQueueRef *)(a1 + 64));
    started = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 64), a2);
    v16 = (_DWORD)started == 0;
    if (!(_DWORD)started)
    {
      memset(&time2, 0, sizeof(time2));
      CMBufferQueueGetFirstPresentationTimeStamp(&time2, *(CMBufferQueueRef *)(a1 + 64));
      time1 = time[0].start;
      type = time2;
      if (CMTimeCompare(&time1, &type))
      {
        memset(&time1, 0, sizeof(time1));
        type = time2;
        rhs = v30;
        CMTimeSubtract(&time1, &type, &rhs);
        memset(&type, 0, sizeof(type));
        rhs = time1;
        *(_OWORD *)&v22.value = kFigHapticQueue_HowEarlyToWakeup;
        v22.epoch = 0;
        CMTimeSubtract(&type, &rhs, &v22);
        rhs = type;
        fhq_rescheduleWaitingPlayersAfterTime(a1, (uint64_t)&rhs);
      }
    }
    if (a3)
LABEL_22:
      *a3 = v16;
  }
  return started;
}

uint64_t fhq_applyBlockToSubmittedPlayers()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  v2 = 0;
  v3 = &v2;
  v4 = 0x2000000000;
  v5 = 0;
  FigCFArrayApplyBlock();
  v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t __fhq_applyBlockToSubmittedPlayers_block_invoke(uint64_t result)
{
  uint64_t v1;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
  {
    v1 = result;
    result = (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = result;
  }
  return result;
}

uint64_t applyBlockToBuffer(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void fhq_rescheduleWaitingPlayersAfterTime(uint64_t a1, uint64_t a2)
{
  dispatch_time_t v4;
  CMTime v5;
  CMTime v6;

  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    v5 = *(CMTime *)a2;
    CMTimeConvertScale(&v6, &v5, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(CMTime *)a2 = v6;
    v4 = dispatch_time(0, *(_QWORD *)a2);
  }
  else
  {
    v4 = -1;
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), v4, 0xFFFFFFFFFFFFFFFFLL, 0);
}

uint64_t __fhq_pauseSubmittedPlayers_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = FigHapticPlayerPauseNow((uint64_t)a2);
  if (!(_DWORD)result)
    return CMBufferQueueEnqueue(*(CMBufferQueueRef *)(*(_QWORD *)(a1 + 32) + 64), a2);
  return result;
}

uint64_t __fhq_removeAllPlayers_block_invoke(uint64_t a1, uint64_t a2)
{
  return FigHapticEngineStopPlayerNow(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), a2);
}

uint64_t FigMetadataReaderCreateForQuickTimeMetadata(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  uint64_t CurrentAtomGlobalOffset;
  char v12;
  uint64_t CurrentAtomTypeAndDataLength;
  unsigned int Atom;
  _OWORD v15[14];
  unint64_t v16;
  int v17;

  if (!a2 || !a4 || a3 < 0)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[2] = CFRetain(a2);
  *DerivedStorage = CFRetain(a2);
  DerivedStorage[1] = a3;
  v17 = 0;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v9 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v9 + 24)
    || *(_QWORD *)(v9 + 32)
    || FigAtomStreamInitWithByteStream()
    || FigAtomStreamInitWithParent())
  {
    return 4294954687;
  }
  v12 = 0;
  do
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
    {
      CurrentAtomGlobalOffset = CurrentAtomTypeAndDataLength;
      goto LABEL_25;
    }
    if (v17 == 1801812339 || v17 == 1768715124)
    {
      CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    else
    {
      if (v17 != 1751411826)
        goto LABEL_21;
      CurrentAtomGlobalOffset = FigMetadataValidateHandlerType((uint64_t)v15, v16);
      if (!(_DWORD)CurrentAtomGlobalOffset)
        v12 = 1;
    }
    if ((_DWORD)CurrentAtomGlobalOffset)
      goto LABEL_25;
LABEL_21:
    Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  if (Atom == -12890)
    CurrentAtomGlobalOffset = 0;
  else
    CurrentAtomGlobalOffset = Atom;
LABEL_25:
  if (!v12)
    return 4294954687;
  if (!(_DWORD)CurrentAtomGlobalOffset)
    *a4 = 0;
  return CurrentAtomGlobalOffset;
}

uint64_t FigMetadataReaderCreateForQuickTimeMetadataArray(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

void FigQuickTimeMetadataFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

__CFString *FigQuickTimeMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  CFTypeRef *DerivedStorage;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int (*v11)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v12;
  CFStringRef v13;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigQuickTimeMetadataReader %p\n"), DerivedStorage);
  v5 = CFCopyDescription(*DerivedStorage);
  if (v5)
  {
    v6 = v5;
    CFStringAppendFormat(Mutable, 0, CFSTR("  ByteStream = %@\n"), v5);
    CFRelease(v6);
  }
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v7)
  {
    v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      v9 = v8;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v8);
      for (i = 0; i != v9; ++i)
      {
        theDict = 0;
        cf = 0;
        v11 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v11 || v11(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v12 = CFCopyDescription(cf);
          if (v12)
          {
            v13 = v12;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v12);
            CFRelease(v13);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_0, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigQuickTimeMetadataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("complete")))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_7:
    v8 = CFRetain(*v7);
    result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    v7 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeMetadata;
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("containerByteStream")))
  {
    v7 = (CFTypeRef *)(DerivedStorage + 16);
    goto LABEL_7;
  }
  return 4294954512;
}

void metadataPropertiesCallback_0(const void *a1, const void *a2, __CFString *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  const __CFAllocator *v8;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFStringRef v11;
  CFStringRef v12;
  signed int valuePtr;

  if (CFEqual(a1, CFSTR("key")))
  {
    v6 = CFGetTypeID(a2);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr);
      valuePtr = bswap32(valuePtr);
      CFStringAppendFormat(a3, 0, CFSTR("     Key = %c%c%c%c\n"), (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
    }
    else
    {
      v7 = CFGetTypeID(a2);
      if (v7 == CFDataGetTypeID()
        && (v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
            BytePtr = CFDataGetBytePtr((CFDataRef)a2),
            Length = CFDataGetLength((CFDataRef)a2),
            (v11 = CFStringCreateWithBytes(v8, BytePtr, Length, 0, 0)) != 0))
      {
        v12 = v11;
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %@\n"), v11);
        CFRelease(v12);
      }
      else
      {
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %@\n"), a2);
      }
    }
  }
  else if (CFEqual(a1, CFSTR("locale")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Locale = %@\n"), a2);
  }
  else if (CFEqual(a1, CFSTR("dataType")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     DataType = %@ (well-known)\n"), a2);
  }
  else if (CFEqual(a1, CFSTR("keyspace")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Keyspace = %@\n"), a2);
  }
}

uint64_t FigQuickTimeMetadataCopyValue(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v8;
  CFStringRef v9;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CFStringRef, uint64_t);
  unsigned int v14;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *);
  unsigned int v19;
  CFTypeRef v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  const __CFLocale *v25;
  const __CFString *Value;
  const __CFString *v27;
  const __CFString *v28;
  const __CFLocale *v29;
  const __CFLocale *v30;
  const __CFString *v31;
  unsigned int v32;
  const __CFString *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  const __CFString *v40;
  const __CFString *key;
  uint64_t v42;
  unsigned int v44;
  CFTypeRef v45;
  CFTypeRef v46;
  CFTypeRef cf;

  if (!a1 || (v8 = a3) == 0 || (v9 = theString) == 0 || !a6 || (v12 = a1, CFStringGetLength(theString) != 4))
  {
    v34 = FigSignalErrorAt();
    LODWORD(v16) = 0;
    goto LABEL_50;
  }
  v13 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v13 || (v42 = v13(v12, v9, v8), v42 < 1))
  {
    LODWORD(v16) = 0;
    v34 = 0;
    goto LABEL_50;
  }
  v37 = a6;
  v38 = a7;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v40 = (const __CFString *)*MEMORY[0x1E0C9B060];
  key = (const __CFString *)*MEMORY[0x1E0C9B088];
  v39 = v12;
  v17 = 1;
  while (1)
  {
    v46 = 0;
    cf = 0;
    v18 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v18)
      break;
    v19 = v18(v12, v9, v8, v17 - 1, a5, &cf, &v46);
    if (v19)
    {
      v34 = v19;
      if (v16)
        goto LABEL_46;
LABEL_43:
      if (!v15)
        goto LABEL_50;
      goto LABEL_49;
    }
    if (!a4 || CFGetTypeID(cf) == a4)
    {
      v44 = v14;
      v45 = v16;
      v20 = v15;
      v21 = v9;
      v22 = v8;
      v23 = a4;
      v24 = (const __CFDictionary *)v46;
      v25 = CFLocaleCopyCurrent();
      Value = (const __CFString *)CFLocaleGetValue(v25, key);
      v27 = (const __CFString *)CFLocaleGetValue(v25, v40);
      if (v24 && (v28 = v27, (v29 = (const __CFLocale *)CFDictionaryGetValue(v24, CFSTR("locale"))) != 0))
      {
        v30 = v29;
        v31 = (const __CFString *)CFLocaleGetValue(v29, key);
        v32 = 0;
        if (v31 && Value)
          v32 = CFStringCompare(v31, Value, 0) == kCFCompareEqualTo;
        v33 = (const __CFString *)CFLocaleGetValue(v30, v40);
        if (v33)
        {
          v8 = v22;
          v15 = v20;
          if (v28 && CFStringCompare(v33, v28, 0) == kCFCompareEqualTo)
            ++v32;
          a4 = v23;
          v9 = v21;
          goto LABEL_25;
        }
      }
      else
      {
        v32 = 0;
      }
      a4 = v23;
      v8 = v22;
      v9 = v21;
      v15 = v20;
LABEL_25:
      v12 = v39;
      v16 = v45;
      v14 = v44;
      if (v25)
        CFRelease(v25);
      if (v32 >= v44)
      {
        if (v45)
          CFRelease(v45);
        if (v15)
          CFRelease(v15);
        v14 = v32 + 1;
        v16 = CFRetain(cf);
        v15 = CFRetain(v46);
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v46)
      CFRelease(v46);
    v34 = 0;
    if (v17 < v42)
    {
      ++v17;
      if (v14 < 3)
        continue;
    }
    goto LABEL_42;
  }
  v34 = -12782;
LABEL_42:
  if (!v16)
    goto LABEL_43;
LABEL_46:
  *v37 = v16;
  if (v38)
  {
    *v38 = v15;
    LODWORD(v16) = 1;
    goto LABEL_50;
  }
  LODWORD(v16) = 1;
  if (v15)
LABEL_49:
    CFRelease(v15);
LABEL_50:
  if (a4)
    v35 = -12608;
  else
    v35 = -12607;
  if (v16 | v34)
    return v34;
  else
    return v35;
}

uint64_t FigQuickTimeMetadataHasKey(const void *a1, const __CFString *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const __CFString *v12;
  const __CFString *ValueAtIndex;
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v17;
  CFArrayRef theArray;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v17 = 0;
  theArray = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3 || !a2 || (v7 = DerivedStorage, CFStringGetLength(a2) != 4))
  {
    FigSignalErrorAt();
LABEL_20:
    v14 = 0;
    goto LABEL_21;
  }
  if (metadataCreateNativeKeySpaceAndKeys(a2, a3, &v17, &theArray))
    goto LABEL_20;
  v8 = theArray;
  if (!CFArrayGetCount(theArray))
    goto LABEL_20;
  Count = CFArrayGetCount(v8);
  if (!Count)
    goto LABEL_20;
  v10 = Count;
  v11 = 0;
  v12 = (const __CFString *)v17;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!FigQuickTimeMetadataCopyKeyPosSet(a1, v12, ValueAtIndex, (__CFSet **)&cf)
      && CFSetGetCount((CFSetRef)cf) == 1)
    {
      CFSetGetValues((CFSetRef)cf, (const void **)values);
      if (FigQuickTimeMetadataIsKeyPosInUse(v7, (uint64_t)values[0], 0))
        break;
    }
    if (v10 == ++v11)
    {
      v14 = 0;
      goto LABEL_16;
    }
  }
  v14 = 1;
LABEL_16:
  if (cf)
    CFRelease(cf);
LABEL_21:
  if (v17)
    CFRelease(v17);
  if (theArray)
    CFRelease(theArray);
  return v14;
}

uint64_t FigQuickTimeMetadataGetKeyCount(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int inited;
  unsigned int v8;
  unsigned int IsKeyPosInUse;
  uint64_t v12;
  _OWORD v13[7];
  int CurrentAtomTypeAndDataLength;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_27;
  v4 = DerivedStorage;
  if (a2)
  {
    if (CFStringGetLength(a2) == 4 && !CFEqual(a2, CFSTR("comn")))
    {
      v5 = FigQuickTimeMetadataStringToOSType(a2);
      goto LABEL_7;
    }
LABEL_27:
    v6 = 0;
    if (!FigSignalErrorAt())
      return v6;
    return 0;
  }
  v5 = 0;
LABEL_7:
  memset(v13, 0, sizeof(v13));
  if (!*(_BYTE *)(v4 + 48))
  {
    inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(v4, (uint64_t)v13, &v12);
    v6 = 0;
    CurrentAtomTypeAndDataLength = inited;
    if (inited || !(_DWORD)v12)
    {
LABEL_24:
      if (!inited)
        return v6;
    }
    else
    {
      v6 = 0;
      v8 = 1;
      while (1)
      {
        CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
        if (CurrentAtomTypeAndDataLength)
          break;
        if (!a2 || HIDWORD(v12) == v5)
        {
          IsKeyPosInUse = FigQuickTimeMetadataIsKeyPosInUse(v4, v8, &CurrentAtomTypeAndDataLength);
          if (CurrentAtomTypeAndDataLength)
            return 0;
          v6 += IsKeyPosInUse;
        }
        inited = FigAtomStreamAdvanceToNextAtom();
        if (inited == -12890)
        {
          inited = CurrentAtomTypeAndDataLength;
LABEL_23:
          *(_BYTE *)(v4 + 48) = 1;
          *(_QWORD *)(v4 + 40) = v6;
          goto LABEL_24;
        }
        CurrentAtomTypeAndDataLength = inited;
        if (!inited && v8++ <= v12)
          continue;
        goto LABEL_23;
      }
    }
    return 0;
  }
  return *(_QWORD *)(v4 + 40);
}

uint64_t FigQuickTimeMetadataCopyKeyAtIndex(uint64_t a1, const __CFString *a2, uint64_t a3, const __CFAllocator *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int IsKeyPosInUse;
  unsigned int Atom;
  CFStringRef v17;
  UInt8 *bytes;
  CMBlockBufferRef theBuffer;
  uint64_t v21;
  CFIndex numBytes;
  _OWORD v23[7];
  unsigned int inited;

  memset(v23, 0, sizeof(v23));
  v21 = 0;
  numBytes = 0;
  bytes = 0;
  theBuffer = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5)
    goto LABEL_32;
  v10 = DerivedStorage;
  if (a2)
  {
    if (CFStringGetLength(a2) == 4 && !CFEqual(a2, CFSTR("comn")))
    {
      v11 = FigQuickTimeMetadataStringToOSType(a2);
      goto LABEL_8;
    }
LABEL_32:
    inited = FigSignalErrorAt();
    goto LABEL_29;
  }
  v11 = 0;
LABEL_8:
  inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(v10, (uint64_t)v23, (_DWORD *)&v21 + 1);
  if (inited)
    goto LABEL_29;
  if (HIDWORD(v21) <= a3)
    goto LABEL_32;
  v12 = 0;
  v13 = 1;
  while (1)
  {
    inited = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (inited)
      break;
    if (!a2 || (_DWORD)v21 == v11)
    {
      IsKeyPosInUse = FigQuickTimeMetadataIsKeyPosInUse(v10, v13, &inited);
      if (inited)
        break;
      if (IsKeyPosInUse)
      {
        if (v12 == a3)
        {
          if (numBytes < 1)
          {
            *a5 = CFRetain(&stru_1E2FD85F8);
            break;
          }
          inited = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
          if (inited)
            break;
          inited = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, (char **)&bytes);
          if (inited)
            break;
          v17 = CFStringCreateWithBytes(a4, bytes, numBytes, 0x8000100u, 0);
          *a5 = v17;
          if (v17)
            break;
          goto LABEL_32;
        }
        ++v12;
      }
    }
    Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom != -12890)
    {
      inited = Atom;
      if (!Atom && v13++ <= HIDWORD(v21))
        continue;
    }
    break;
  }
LABEL_29:
  if (theBuffer)
    CFRelease(theBuffer);
  return inited;
}

uint64_t FigQuickTimeMetadataGetItemCount(const void *a1, const __CFString *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *v13;
  const __CFString *v14;
  const __CFString *ValueAtIndex;
  __CFSet *v17;
  const __CFString *v18;
  CFTypeRef v19[3];

  v18 = 0;
  v19[0] = 0;
  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    goto LABEL_21;
  }
  v7 = DerivedStorage;
  if (*(uint64_t *)(DerivedStorage + 32) < 1 || metadataCreateNativeKeySpaceAndKeys(a2, a3, &v18, v19))
    goto LABEL_21;
  v8 = (const __CFArray *)v19[0];
  v9 = 0;
  if (!CFArrayGetCount((CFArrayRef)v19[0]) || !v8)
    goto LABEL_22;
  Count = CFArrayGetCount(v8);
  if (!Count)
  {
LABEL_21:
    v9 = 0;
    goto LABEL_22;
  }
  v11 = Count;
  v12 = 0;
  v9 = 0;
  v13 = (const void *)*MEMORY[0x1E0C9B0D0];
  v14 = v18;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v12);
    if (CFEqual(ValueAtIndex, v13))
      ValueAtIndex = 0;
    if (v17)
    {
      CFRelease(v17);
      v17 = 0;
    }
    if (!FigQuickTimeMetadataCopyKeyPosSet(a1, v14, ValueAtIndex, &v17))
      break;
LABEL_18:
    if (++v12 == v11)
      goto LABEL_22;
  }
  if (!FigQuickTimeMetadataGetItemListAtomStream(v7))
  {
    while (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
    {
      if (CFSetContainsValue(v17, 0))
        ++v9;
      if (FigAtomStreamAdvanceToNextAtom())
        goto LABEL_18;
    }
  }
LABEL_22:
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  if (v19[0])
    CFRelease(v19[0]);
  return v9;
}

uint64_t FigQuickTimeMetadataCopyItemWithKeyAndIndex(const void *a1, const __CFString *a2, void *a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6, __CFDictionary **a7)
{
  uint64_t ItemListAtomStream;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t DataPointer;
  const void *v21;
  const __CFString *v22;
  const __CFString *ValueAtIndex;
  int Atom;
  unint64_t v25;
  CFStringRef v26;
  __CFDictionary *Mutable;
  uint64_t v28;
  CFTypeRef *v29;
  CFTypeRef *v30;
  const __CFAllocator *v31;
  __CFArray *v32;
  const __CFAllocator *v33;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t BBuf;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int8x8_t *v41;
  unint64_t v42;
  uint64_t i;
  CFNumberRef v44;
  CFNumberRef v45;
  __CFArray *v46;
  CFStringRef v47;
  CFStringRef v48;
  __CFDictionary *v49;
  const __CFString *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int8 v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t SInt16;
  CFMutableDictionaryRef v59;
  __CFDictionary *v60;
  CFStringRef v61;
  const __CFAllocator *v62;
  const UInt8 *v63;
  CFStringEncoding v64;
  unint64_t v65;
  CGPoint v66;
  CGFloat v67;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v69;
  const __CFAllocator *v70;
  CFNumberType v71;
  CFNumberRef v72;
  uint64_t CurrentAtomDataGlobalOffset;
  uint64_t v74;
  CFNumberRef v75;
  CFNumberRef v76;
  uint64_t SInt8;
  CGPoint v78;
  CGFloat y;
  CGSize v80;
  CGFloat height;
  unsigned int v82;
  unsigned int v83;
  const char *v84;
  unint64_t *p_valuePtr;
  BOOL v86;
  const char *v87;
  const __CFString *v88;
  const __CFString *v89;
  CFLocaleRef v90;
  CFStringRef ExtendedLanguageTag;
  CFStringRef v92;
  CFNumberRef v93;
  CFNumberRef v94;
  CFNumberRef v95;
  CFNumberRef v96;
  uint64_t v97;
  CFDataRef v98;
  CFTypeRef v99;
  unsigned int v100;
  uint64_t inited;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  BOOL v108;
  const void *v109;
  unsigned int v110;
  const __CFString *v112;
  void *v113;
  __CFDictionary **v114;
  _QWORD *v115;
  __CFDictionary *theDict;
  const __CFAllocator *allocator;
  uint64_t DerivedStorage;
  CFTypeRef *v119;
  const __CFString *v120;
  CFTypeRef v121[4];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  CFTypeRef cf;
  CFTypeRef v136;
  CFArrayRef theArray;
  unint64_t valuePtr;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  char v142;
  char *v143;
  char *dataPointerOut;
  uint64_t v145;
  _OWORD v146[8];
  CGRect v147;

  theArray = 0;
  v136 = 0;
  cf = 0;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v122 = 0u;
  memset((char *)&v121[1] + 4, 0, 20);
  v121[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v119 = a6;
  if (!DerivedStorage)
    goto LABEL_294;
  if (!((unint64_t)a6 | (unint64_t)a7))
  {
    ItemListAtomStream = FigSignalErrorAt();
LABEL_293:
    DataPointer = ItemListAtomStream;
    v25 = 0;
    v26 = 0;
    goto LABEL_266;
  }
  if (*(uint64_t *)(DerivedStorage + 32) < 1)
  {
LABEL_294:
    DataPointer = FigSignalErrorAt();
    v25 = 0;
    v26 = 0;
    Mutable = 0;
    v29 = v119;
    if ((_DWORD)DataPointer)
      goto LABEL_267;
    goto LABEL_262;
  }
  ItemListAtomStream = metadataCreateNativeKeySpaceAndKeys(a2, a3, &v136, &theArray);
  if ((_DWORD)ItemListAtomStream)
    goto LABEL_293;
  v15 = theArray;
  if (!CFArrayGetCount(theArray) || (v113 = a3, (Count = CFArrayGetCount(v15)) == 0))
  {
    v25 = 0;
    v26 = 0;
    Mutable = 0;
    DataPointer = 4294954689;
    goto LABEL_267;
  }
  v17 = Count;
  allocator = a5;
  v114 = a7;
  v18 = 0;
  v19 = 0;
  LODWORD(DataPointer) = 0;
  v21 = (const void *)*MEMORY[0x1E0C9B0D0];
  v22 = (const __CFString *)v136;
LABEL_8:
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v18);
  v120 = ValueAtIndex;
  if (CFEqual(ValueAtIndex, v21))
    ValueAtIndex = 0;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (FigQuickTimeMetadataCopyKeyPosSet(a1, v22, ValueAtIndex, (__CFSet **)&cf))
    goto LABEL_22;
  ItemListAtomStream = FigQuickTimeMetadataGetItemListAtomStream(DerivedStorage);
  if ((_DWORD)ItemListAtomStream)
    goto LABEL_293;
  while (1)
  {
    ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)ItemListAtomStream)
      goto LABEL_293;
    if (!CFSetContainsValue((CFSetRef)cf, (const void *)HIDWORD(v121[1])))
      goto LABEL_18;
    if (v19 == a4)
      break;
    ++v19;
LABEL_18:
    Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom)
    {
      if (Atom == -12890)
        LODWORD(DataPointer) = 0;
      else
        LODWORD(DataPointer) = Atom;
LABEL_22:
      if (++v18 == v17)
      {
        v25 = 0;
        v26 = 0;
        Mutable = 0;
        if ((_DWORD)DataPointer)
          DataPointer = DataPointer;
        else
          DataPointer = 4294954689;
        goto LABEL_267;
      }
      goto LABEL_8;
    }
  }
  v28 = FigAtomStreamInitWithParent();
  if ((_DWORD)v28)
  {
    DataPointer = v28;
    goto LABEL_212;
  }
  v112 = ValueAtIndex;
  v29 = v119;
  v140 = 0;
  v30 = v121;
  if (!v119)
    v30 = 0;
  v115 = v30;
  v145 = 0;
  *(_QWORD *)&v146[0] = 0;
  v143 = 0;
  dataPointerOut = 0;
  a7 = v114;
  if (v114)
  {
    v31 = allocator;
    Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v119)
      goto LABEL_31;
  }
  else
  {
    Mutable = 0;
    v31 = allocator;
    if (v119)
LABEL_31:
      v121[0] = 0;
  }
  theDict = 0;
  v32 = 0;
  v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (2)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_283;
    if (HIDWORD(v140) == 1684108385)
    {
      v139 = 0;
      if (*(_QWORD *)&v146[0] < 8uLL)
        goto LABEL_193;
      BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if ((_DWORD)BBuf)
        goto LABEL_290;
      BBuf = CMBlockBufferGetDataPointer((CMBlockBufferRef)v145, 0, 0, 0, &dataPointerOut);
      if ((_DWORD)BBuf)
        goto LABEL_290;
      v36 = dataPointerOut;
      v37 = *(_DWORD *)dataPointerOut;
      v38 = *((unsigned __int16 *)dataPointerOut + 2);
      v39 = *((unsigned __int16 *)dataPointerOut + 3);
      v40 = bswap32(*(_DWORD *)dataPointerOut);
      LODWORD(v140) = v40;
      if (v29 && !HIBYTE(v40))
      {
        v41 = (int8x8_t *)(dataPointerOut + 8);
        v42 = *(_QWORD *)&v146[0] - 8;
        v139 = *(_QWORD *)&v146[0] - 8;
        if (v40 > 64)
        {
          switch(v40)
          {
            case 'A':
              if (*(_QWORD *)&v146[0] != 9)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateSInt8();
              goto LABEL_140;
            case 'B':
              if (*(_QWORD *)&v146[0] != 10)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateSInt16();
              goto LABEL_140;
            case 'C':
              if (*(_QWORD *)&v146[0] != 12)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateSInt32();
              goto LABEL_140;
            case 'F':
              if (*(_QWORD *)&v146[0] != 16)
                goto LABEL_196;
              v78 = (CGPoint)vcvtq_f64_f32((float32x2_t)vrev32_s8(*v41));
              y = v78.y;
              SInt8 = (uint64_t)CGPointCreateDictionaryRepresentation(v78);
              if (!SInt8)
                goto LABEL_285;
              goto LABEL_140;
            case 'G':
              if (*(_QWORD *)&v146[0] != 16)
                goto LABEL_196;
              v80 = (CGSize)vcvtq_f64_f32((float32x2_t)vrev32_s8(*v41));
              height = v80.height;
              SInt8 = (uint64_t)CGSizeCreateDictionaryRepresentation(v80);
              if (!SInt8)
                goto LABEL_285;
              goto LABEL_140;
            case 'H':
              if (*(_QWORD *)&v146[0] != 24)
                goto LABEL_196;
              v147.origin.x = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 2)));
              v147.origin.y = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 3)));
              v147.size.width = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 4)));
              v147.size.height = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 5)));
              SInt8 = (uint64_t)CGRectCreateDictionaryRepresentation(v147);
              if (!SInt8)
                goto LABEL_285;
              goto LABEL_140;
            case 'J':
              if (*(_QWORD *)&v146[0] != 16)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateSInt64();
              goto LABEL_140;
            case 'K':
              if (*(_QWORD *)&v146[0] != 9)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateUInt8();
              goto LABEL_140;
            case 'L':
              if (*(_QWORD *)&v146[0] != 10)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateUInt16();
              goto LABEL_140;
            case 'M':
              if (*(_QWORD *)&v146[0] != 12)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateUInt32();
              goto LABEL_140;
            case 'N':
              if (*(_QWORD *)&v146[0] != 16)
                goto LABEL_196;
              SInt8 = FigCFNumberCreateUInt64();
              goto LABEL_140;
            case 'O':
            case 'S':
              if (*(_QWORD *)&v146[0] != 80)
                goto LABEL_196;
              valuePtr = 0;
              v32 = CFArrayCreateMutable(allocator, 9, MEMORY[0x1E0C9B378]);
              if (!v32)
                goto LABEL_285;
              for (i = 8; i != 80; i += 8)
              {
                valuePtr = bswap64(*(_QWORD *)&v36[i]);
                v44 = CFNumberCreate(v33, kCFNumberDoubleType, &valuePtr);
                if (!v44)
                  goto LABEL_285;
                v45 = v44;
                CFArrayAppendValue(v32, v44);
                CFRelease(v45);
              }
              v46 = v32;
              goto LABEL_114;
            case 'P':
            case 'Q':
              if (((v42 >> 1) & 0x7FFFFFFFFFFFFFFCLL) == v42)
                goto LABEL_196;
              v31 = allocator;
              if (v37 != 1342177280 || v42 <= 0x17)
              {
                DataPointer = 4294954687;
                if (v37 != 1358954496 || v42 < 0x10)
                  goto LABEL_198;
              }
              v65 = v42 >> 3;
              v32 = CFArrayCreateMutable(allocator, v42 >> 3, MEMORY[0x1E0C9B378]);
              if (!v32)
                goto LABEL_289;
              break;
            default:
              goto LABEL_177;
          }
          while (1)
          {
            v66 = (CGPoint)vcvtq_f64_f32((float32x2_t)vrev32_s8(*v41));
            v67 = v66.y;
            DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v66);
            if (!DictionaryRepresentation)
              break;
            v69 = DictionaryRepresentation;
            CFArrayAppendValue(v32, DictionaryRepresentation);
            CFRelease(v69);
            ++v41;
            if (!--v65)
            {
              *v115 = CFRetain(v32);
              goto LABEL_172;
            }
          }
LABEL_289:
          BBuf = FigSignalErrorAt();
LABEL_290:
          DataPointer = BBuf;
LABEL_198:
          v29 = v119;
          goto LABEL_199;
        }
        if (v40 > 20)
        {
          switch(v40)
          {
            case 21:
              DataPointer = 4294954687;
              v31 = allocator;
              switch(*(_QWORD *)&v146[0])
              {
                case 9:
                  SInt16 = FigCFNumberCreateSInt8();
                  goto LABEL_171;
                case 0xALL:
                  SInt16 = FigCFNumberCreateSInt16();
                  goto LABEL_171;
                case 0xBLL:
                case 0xDLL:
                case 0xELL:
                case 0xFLL:
                  goto LABEL_198;
                case 0xCLL:
                  SInt16 = FigCFNumberCreateSInt32();
                  goto LABEL_171;
                case 0x10:
                  SInt16 = FigCFNumberCreateSInt64();
                  goto LABEL_171;
                default:
                  goto LABEL_197;
              }
            case 22:
              DataPointer = 4294954687;
              v31 = allocator;
              switch(*(_QWORD *)&v146[0])
              {
                case 9:
                  SInt16 = FigCFNumberCreateUInt8();
                  goto LABEL_171;
                case 0xALL:
                  SInt16 = FigCFNumberCreateUInt16();
                  goto LABEL_171;
                case 0xBLL:
                case 0xDLL:
                case 0xELL:
                case 0xFLL:
                  goto LABEL_198;
                case 0xCLL:
                  SInt16 = FigCFNumberCreateUInt32();
                  goto LABEL_171;
                case 0x10:
                  SInt16 = FigCFNumberCreateUInt64();
                  goto LABEL_171;
                default:
                  goto LABEL_197;
              }
            case 23:
              if (*(_QWORD *)&v146[0] != 12)
                goto LABEL_196;
              LODWORD(valuePtr) = bswap32(v41->i32[0]);
              v70 = v33;
              v71 = kCFNumberFloat32Type;
              goto LABEL_103;
            case 24:
              if (*(_QWORD *)&v146[0] != 16)
                goto LABEL_196;
              valuePtr = bswap64((unint64_t)*v41);
              v70 = v33;
              v71 = kCFNumberFloat64Type;
LABEL_103:
              v72 = CFNumberCreate(v70, v71, &valuePtr);
              *v115 = v72;
              if (!v72)
                goto LABEL_285;
              goto LABEL_141;
            case 28:
              CurrentAtomDataGlobalOffset = FigAtomStreamGetCurrentAtomDataGlobalOffset();
              if ((_DWORD)CurrentAtomDataGlobalOffset)
                goto LABEL_286;
              v31 = allocator;
              BBuf = FigMetadataReaderCreateForQuickTimeMetadata((uint64_t)allocator, *(const void **)DerivedStorage, (uint64_t)v143, v115);
              v29 = v119;
              if ((_DWORD)BBuf)
                goto LABEL_290;
              goto LABEL_142;
            case 30:
              if (*(_QWORD *)&v146[0] != 24)
                goto LABEL_196;
              LODWORD(valuePtr) = 0;
              theDict = CFDictionaryCreateMutable(allocator, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!theDict)
                goto LABEL_285;
              v74 = 0;
              break;
            default:
              goto LABEL_177;
          }
          do
          {
            LODWORD(valuePtr) = bswap32(v41->u32[v74]);
            v75 = CFNumberCreate(v33, kCFNumberSInt32Type, &valuePtr);
            if (!v75)
            {
LABEL_285:
              CurrentAtomDataGlobalOffset = FigSignalErrorAt();
LABEL_286:
              DataPointer = CurrentAtomDataGlobalOffset;
              goto LABEL_197;
            }
            v76 = v75;
            CFDictionarySetValue(theDict, off_1E2F8FE50[v74], v75);
            CFRelease(v76);
            ++v74;
          }
          while (v74 != 4);
          v46 = theDict;
LABEL_114:
          SInt8 = (uint64_t)CFRetain(v46);
LABEL_140:
          *v115 = SInt8;
LABEL_141:
          v29 = v119;
          v31 = allocator;
          goto LABEL_142;
        }
        switch(v40)
        {
          case 1:
            v31 = allocator;
            v62 = allocator;
            v63 = (const UInt8 *)(dataPointerOut + 8);
            v64 = 134217984;
            break;
          case 2:
            if ((uint64_t)v42 < 2)
            {
LABEL_196:
              DataPointer = 4294954687;
LABEL_197:
              v31 = allocator;
              goto LABEL_198;
            }
            v31 = allocator;
            v62 = allocator;
            v63 = (const UInt8 *)(dataPointerOut + 8);
            v64 = 268435712;
            break;
          case 3:
            v31 = allocator;
            v62 = allocator;
            v63 = (const UInt8 *)(dataPointerOut + 8);
            v64 = 0;
            break;
          default:
LABEL_177:
            v31 = allocator;
            v98 = CFDataCreate(allocator, (const UInt8 *)v41, v42);
            *v115 = v98;
            if (!v98)
              goto LABEL_289;
LABEL_172:
            v29 = v119;
            if (!Mutable)
              goto LABEL_173;
LABEL_143:
            if (v38 | v39)
            {
              v82 = __rev16(v39);
              LODWORD(valuePtr) = 0;
              v142 = 0;
              v141 = 0;
              if (v82 >= 0x100)
              {
                LOBYTE(valuePtr) = (v82 >> 10) | 0x60;
                BYTE1(valuePtr) = (v82 >> 5) & 0x1F | 0x60;
                BYTE2(valuePtr) = v82 & 0x1F | 0x60;
              }
              v83 = __rev16(v38);
              if (v83 >= 0x100)
                v141 = __rev16(v83);
              v84 = "";
              p_valuePtr = &valuePtr;
              if (v39)
              {
                v86 = v38 == 0;
              }
              else
              {
                p_valuePtr = (unint64_t *)"";
                v86 = 1;
              }
              v87 = "_";
              if (v86)
                v87 = "";
              if (v38)
                v84 = (const char *)&v141;
              v88 = CFStringCreateWithFormat(v31, 0, CFSTR("%s%s%s"), p_valuePtr, v87, v84);
              if (v88)
              {
                v89 = v88;
                v90 = CFLocaleCreate(v31, v88);
                CFRelease(v89);
                if (v90)
                {
                  CFDictionaryAddValue(Mutable, CFSTR("locale"), v90);
                  CFRelease(v90);
                }
              }
              ExtendedLanguageTag = FigQuickTimeMetadataCreateExtendedLanguageTag(v31, v83, v82);
              v29 = v119;
              if (ExtendedLanguageTag)
              {
                v92 = ExtendedLanguageTag;
                CFDictionaryAddValue(Mutable, CFSTR("extendedLanguageTag"), ExtendedLanguageTag);
                CFRelease(v92);
              }
            }
            if (!BYTE3(v140))
            {
              v93 = CFNumberCreate(v33, kCFNumberSInt32Type, &v140);
              if (v93)
              {
                v94 = v93;
                CFDictionaryAddValue(Mutable, CFSTR("dataType"), v93);
                CFDictionaryAddValue(Mutable, CFSTR("dataTypeNamespace"), CFSTR("com.apple.quicktime.mdta"));
                CFRelease(v94);
                if (v139 >= 1 && (v140 - 21) <= 1)
                {
                  v95 = CFNumberCreate(v33, kCFNumberSInt64Type, &v139);
                  if (v95)
                  {
                    v96 = v95;
                    CFDictionaryAddValue(Mutable, CFSTR("dataLength"), v95);
                    CFRelease(v96);
                  }
                }
              }
            }
            goto LABEL_173;
        }
        SInt16 = (uint64_t)CFStringCreateWithBytes(v62, v63, v42, v64, 0);
LABEL_171:
        *v115 = SInt16;
        if (!SInt16)
          goto LABEL_289;
        goto LABEL_172;
      }
      v31 = allocator;
      if (v29)
      {
LABEL_193:
        DataPointer = 4294954687;
        goto LABEL_198;
      }
LABEL_142:
      if (!Mutable)
        goto LABEL_173;
      goto LABEL_143;
    }
    if (Mutable && HIDWORD(v140) == 1851878757)
    {
      if (*(_QWORD *)&v146[0] < 4uLL)
      {
        DataPointer = 4294954687;
        goto LABEL_199;
      }
      if (*(_QWORD *)&v146[0] == 4)
        goto LABEL_173;
      CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_283;
      CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer((CMBlockBufferRef)v145, 0, 0, 0, &dataPointerOut);
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_283;
      v47 = CFStringCreateWithBytes(v31, (const UInt8 *)dataPointerOut, *(_QWORD *)&v146[0] - 4, 0x8000100u, 0);
      if (!v47)
        break;
      v48 = v47;
      v49 = Mutable;
      v50 = CFSTR("name");
      goto LABEL_56;
    }
    if (HIDWORD(v140) != 1684304993)
      goto LABEL_173;
    if (*(_QWORD *)&v146[0] <= 0xBuLL)
      break;
    CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_283;
    CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer((CMBlockBufferRef)v145, 0, 0, 0, &dataPointerOut);
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_283;
    v51 = *(_DWORD *)dataPointerOut;
    v52 = *((unsigned __int16 *)dataPointerOut + 2);
    v53 = *((unsigned __int16 *)dataPointerOut + 3);
    v54 = dataPointerOut[8];
    v55 = *(unsigned __int16 *)(dataPointerOut + 9);
    LODWORD(v140) = bswap32(*(_DWORD *)dataPointerOut);
    if (!v51 && !v55)
    {
      v56 = v54 >> 4;
      if (v54 < 0x10u || v56 == 4 || v56 == 8)
      {
        v57 = v54 & 0xF;
        if (v57 <= 8 && ((1 << v57) & 0x111) != 0 && *(_QWORD *)&v146[0] - 11 >= v56 + v57)
        {
          if (v119)
          {
            v59 = CFDictionaryCreateMutable(v31, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v59)
            {
              DataPointer = FigSignalErrorAt();
              theDict = 0;
              goto LABEL_198;
            }
            v60 = v59;
            FigCFDictionarySetInt64();
            FigCFDictionarySetInt64();
            theDict = v60;
            v121[0] = CFRetain(v60);
          }
          if (!Mutable)
          {
            v29 = v119;
            goto LABEL_173;
          }
          FigCFDictionarySetInt32();
          FigCFDictionarySetValue();
          v29 = v119;
          if (!(v52 | v53)
            || (v61 = FigQuickTimeMetadataCreateExtendedLanguageTag(v31, __rev16(v52), __rev16(v53))) == 0)
          {
LABEL_173:
            if (v145)
              CFRelease((CFTypeRef)v145);
            v145 = 0;
            v97 = FigAtomStreamAdvanceToNextAtom();
            if ((_DWORD)v97)
            {
              DataPointer = v97;
              if ((_DWORD)v97 == -12890)
              {
                if (v29)
                {
                  if (v121[0])
                    DataPointer = 0;
                  else
                    DataPointer = 4294954689;
                }
                else
                {
                  DataPointer = 0;
                }
              }
              goto LABEL_199;
            }
            continue;
          }
          v48 = v61;
          v49 = Mutable;
          v50 = CFSTR("extendedLanguageTag");
LABEL_56:
          CFDictionaryAddValue(v49, v50, v48);
          CFRelease(v48);
          goto LABEL_173;
        }
      }
    }
    break;
  }
  CurrentAtomTypeAndDataLength = FigSignalErrorAt();
LABEL_283:
  DataPointer = CurrentAtomTypeAndDataLength;
LABEL_199:
  if (v145)
    CFRelease((CFTypeRef)v145);
  if (theDict)
    CFRelease(theDict);
  if (v32)
    CFRelease(v32);
  if (!(_DWORD)DataPointer)
  {
    if (!Mutable)
    {
      v25 = 0;
LABEL_259:
      v26 = 0;
LABEL_262:
      if (v29)
      {
        *v29 = v121[0];
        v121[0] = 0;
      }
      DataPointer = 0;
      if (!a7)
        goto LABEL_267;
      *a7 = Mutable;
LABEL_266:
      Mutable = 0;
      goto LABEL_267;
    }
    v99 = v136;
    if (v112 && v136)
    {
      v100 = 0;
      v25 = 0;
      goto LABEL_256;
    }
    v100 = HIDWORD(v121[1]);
    memset(v146, 0, 112);
    dataPointerOut = 0;
    v145 = 0;
    LODWORD(v139) = 0;
    LODWORD(valuePtr) = 0;
    v143 = 0;
    if (v113 && v136)
    {
      inited = FigSignalErrorAt();
    }
    else
    {
      if (!HIDWORD(v121[1]))
      {
        DataPointer = FigSignalErrorAt();
        goto LABEL_302;
      }
      inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(DerivedStorage, (uint64_t)v146, &v139);
      if (!(_DWORD)inited)
      {
        if ((_DWORD)v139)
        {
          v102 = 0;
          v103 = v100 - 1;
          while (1)
          {
            v104 = v102;
            v105 = FigAtomStreamGetCurrentAtomTypeAndDataLength();
            if ((_DWORD)v105)
              goto LABEL_304;
            if (v103 == v104)
              break;
            v106 = FigAtomStreamAdvanceToNextAtom();
            if (v106 == -12890)
            {
              v100 = 0;
              goto LABEL_242;
            }
            v25 = 0;
            v100 = 0;
            if (!v106)
            {
              v102 = v104 + 1;
              if (v104 < v139)
                continue;
            }
            goto LABEL_244;
          }
          if (v99)
            v100 = 0;
          else
            v100 = valuePtr;
          if (v113)
          {
LABEL_242:
            v25 = 0;
          }
          else
          {
            if (v145 >= 1)
            {
              v107 = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
              if (!(_DWORD)v107)
              {
                DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)dataPointerOut, 0, 0, 0, &v143);
                if ((_DWORD)DataPointer)
                  goto LABEL_305;
                if ((_DWORD)valuePtr == 1835299937)
                {
                  v25 = (unint64_t)CFStringCreateWithBytes(allocator, (const UInt8 *)v143, v145, 0x8000100u, 0);
                  if (!v25)
                    goto LABEL_288;
                }
                else
                {
                  v25 = (unint64_t)CFDataCreate(allocator, (const UInt8 *)v143, v145);
                  if (!v25)
                  {
LABEL_288:
                    DataPointer = FigSignalErrorAt();
                    goto LABEL_250;
                  }
                }
                goto LABEL_243;
              }
              DataPointer = v107;
LABEL_305:
              v25 = 0;
LABEL_250:
              v29 = v119;
              goto LABEL_251;
            }
            v25 = (unint64_t)CFRetain(&stru_1E2FD85F8);
          }
LABEL_243:
          v106 = 0;
LABEL_244:
          if (v106)
            v108 = 1;
          else
            v108 = v103 == v104;
          if (v108)
            DataPointer = v106;
          else
            DataPointer = 4294954692;
          goto LABEL_250;
        }
        v105 = FigSignalErrorAt();
LABEL_304:
        DataPointer = v105;
        v100 = 0;
        goto LABEL_305;
      }
    }
    DataPointer = inited;
    v100 = 0;
LABEL_302:
    v25 = 0;
LABEL_251:
    if (dataPointerOut)
      CFRelease(dataPointerOut);
    if ((_DWORD)DataPointer)
      goto LABEL_213;
    v31 = allocator;
    if (!((unint64_t)v112 | v25))
    {
      v25 = 0;
      if (v99)
        goto LABEL_258;
      goto LABEL_261;
    }
    v109 = (const void *)v25;
    if (!v112)
    {
LABEL_257:
      CFDictionaryAddValue(Mutable, CFSTR("key"), v109);
      v99 = v136;
      if (v136)
      {
LABEL_258:
        CFDictionaryAddValue(Mutable, CFSTR("keyspace"), v99);
        goto LABEL_259;
      }
LABEL_261:
      v110 = bswap32(v100);
      v26 = CFStringCreateWithFormat(v31, 0, CFSTR("%c%c%c%c"), v110, BYTE1(v110), BYTE2(v110), HIBYTE(v110));
      CFDictionaryAddValue(Mutable, CFSTR("keyspace"), v26);
      goto LABEL_262;
    }
LABEL_256:
    v109 = v120;
    goto LABEL_257;
  }
  if (v29 && v121[0])
  {
    CFRelease(v121[0]);
    v121[0] = 0;
  }
  if (v114 && Mutable)
    CFRelease(Mutable);
LABEL_212:
  v25 = 0;
  Mutable = 0;
LABEL_213:
  v26 = 0;
LABEL_267:
  if (v121[0])
    CFRelease(v121[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v25)
    CFRelease((CFTypeRef)v25);
  if (v26)
    CFRelease(v26);
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  if (v136)
    CFRelease(v136);
  return DataPointer;
}

uint64_t metadataCreateNativeKeySpaceAndKeys(const __CFString *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  CFTypeID v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  const __CFAllocator *v13;
  CFArrayRef v14;
  CFArrayRef v16;
  int v17;
  CFTypeID v18;
  CFTypeID TypeID;
  CFTypeRef cf;
  void *values;

  cf = 0;
  values = a2;
  if (!a1)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a2)
    {
      v14 = CFArrayCreate(v13, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      if (!v14)
        return FigSignalErrorAt();
LABEL_15:
      v12 = v14;
      v11 = 0;
      goto LABEL_16;
    }
LABEL_14:
    v14 = CFArrayCreate(v13, MEMORY[0x1E0C9B0D0], 1, MEMORY[0x1E0C9B378]);
    if (!v14)
      return FigSignalErrorAt();
    goto LABEL_15;
  }
  if (CFStringGetLength(a1) != 4)
    return FigSignalErrorAt();
  if (!a2)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_14;
  }
  if (!CFEqual(a1, CFSTR("comn")))
  {
    v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (v16)
    {
      v12 = v16;
      v11 = CFRetain(a1);
      v17 = CFEqual(a1, CFSTR("mdta"));
      v18 = CFGetTypeID(values);
      TypeID = CFStringGetTypeID();
      if (!v17)
      {
        if (v18 == TypeID)
          goto LABEL_16;
        TypeID = CFDataGetTypeID();
      }
      if (v18 == TypeID)
        goto LABEL_16;
      v9 = FigSignalErrorAt();
      CFRelease(v12);
      if (!v11)
        return v9;
      v10 = v11;
      goto LABEL_30;
    }
    return FigSignalErrorAt();
  }
  v8 = CFGetTypeID(a2);
  if (v8 == CFStringGetTypeID())
  {
    v9 = FigQuickTimeMetadataCopyNativeKeysFromCommonKey(a2, &cf);
    v10 = cf;
    if (!(_DWORD)v9)
    {
      if (cf || (cf = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378])) != 0)
      {
        v11 = CFRetain(CFSTR("mdta"));
        v12 = cf;
LABEL_16:
        v9 = 0;
        *a4 = v12;
        *a3 = v11;
        return v9;
      }
      v9 = FigSignalErrorAt();
      v10 = cf;
    }
    if (!v10)
      return v9;
LABEL_30:
    CFRelease(v10);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t FigQuickTimeMetadataCopyKeyPosSet(const void *a1, const __CFString *a2, const __CFString *a3, __CFSet **a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeID v9;
  int64_t v10;
  CFIndex Length;
  UInt8 *BytePtr;
  int v13;
  uint64_t v14;
  void *v15;
  __CFSet *Mutable;
  void *v17;
  uint64_t inited;
  unint64_t v19;
  BOOL v20;
  char v21;
  uint64_t CurrentAtomTypeAndDataLength;
  const __CFAllocator *v23;
  uint64_t Atom;
  __CFSet **v27;
  int v28;
  int v30;
  uint64_t v31;
  _OWORD v32[8];
  CFRange v33;

  v31 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (a2)
    v30 = FigQuickTimeMetadataStringToOSType(a2);
  else
    v30 = 0;
  memset(v32, 0, 112);
  v27 = a4;
  if (a3)
  {
    v9 = CFGetTypeID(a3);
    if (v9 != CFStringGetTypeID())
    {
      Length = CFDataGetLength((CFDataRef)a3);
      BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)a3);
      v13 = 0;
      if (Length < 1)
      {
        v15 = 0;
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    v10 = CFStringGetLength(a3);
    Length = v10;
    if (v10 >= 1)
    {
      BytePtr = (UInt8 *)malloc_type_malloc(v10, 0x7A6A6124uLL);
      if (!BytePtr)
      {
        v13 = 0;
        goto LABEL_10;
      }
      v33.location = 0;
      v33.length = Length;
      v13 = 1;
      if (Length != CFStringGetBytes(a3, v33, 0x8000100u, 0, 0, BytePtr, Length, 0))
        goto LABEL_10;
LABEL_14:
      v17 = malloc_type_malloc(Length, 0x9869448CuLL);
      if (v17)
      {
        v15 = v17;
        goto LABEL_17;
      }
LABEL_10:
      v14 = FigSignalErrorAt();
      v15 = 0;
      Mutable = 0;
LABEL_45:
      if ((_DWORD)v14)
      {
LABEL_48:
        if (!v13)
          goto LABEL_51;
        goto LABEL_49;
      }
      *v27 = Mutable;
LABEL_47:
      Mutable = 0;
      goto LABEL_48;
    }
  }
  else
  {
    Length = 0;
  }
  BytePtr = 0;
  v15 = 0;
  v13 = 0;
LABEL_17:
  inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(v8, (uint64_t)v32, (_DWORD *)&v31 + 1);
  if ((_DWORD)inited)
  {
    v14 = inited;
    goto LABEL_47;
  }
  if (HIDWORD(v31))
  {
    v28 = v13;
    v19 = 0;
    Mutable = 0;
    if (a2)
      v20 = a3 == 0;
    else
      v20 = 1;
    v21 = !v20;
    while (1)
    {
      CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if ((_DWORD)CurrentAtomTypeAndDataLength)
      {
        v14 = CurrentAtomTypeAndDataLength;
        if (v28)
          goto LABEL_49;
        goto LABEL_51;
      }
      if (a3)
      {
        if (Length)
          goto LABEL_34;
      }
      else if (a2 && (_DWORD)v31 != v30)
      {
        goto LABEL_34;
      }
      if (!Mutable)
      {
        v23 = CFGetAllocator(a1);
        Mutable = CFSetCreateMutable(v23, 0, 0);
      }
      CFSetAddValue(Mutable, (const void *)(v19 + 1));
      if ((v21 & 1) != 0)
      {
LABEL_39:
        v14 = 0;
LABEL_40:
        if ((_DWORD)v14)
        {
          v13 = v28;
          goto LABEL_45;
        }
        v13 = v28;
        if (Mutable)
          goto LABEL_45;
        goto LABEL_42;
      }
LABEL_34:
      Atom = FigAtomStreamAdvanceToNextAtom();
      if ((_DWORD)Atom == -12890)
        goto LABEL_39;
      v14 = Atom;
      if (!(_DWORD)Atom && v19++ < HIDWORD(v31))
        continue;
      goto LABEL_40;
    }
  }
  Mutable = 0;
LABEL_42:
  v14 = 4294954692;
  if (v13)
  {
LABEL_49:
    if (BytePtr)
      free(BytePtr);
  }
LABEL_51:
  if (v15)
    free(v15);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

uint64_t FigQuickTimeMetadataIsKeyPosInUse(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int ItemListAtomStream;

  if (a2 <= 0)
  {
    ItemListAtomStream = FigSignalErrorAt();
  }
  else if (*(uint64_t *)(a1 + 32) < 1)
  {
    ItemListAtomStream = 0;
  }
  else
  {
    ItemListAtomStream = FigQuickTimeMetadataGetItemListAtomStream(a1);
    if (!ItemListAtomStream)
    {
      while (1)
      {
        ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
        if (ItemListAtomStream)
          break;
        ItemListAtomStream = FigAtomStreamAdvanceToNextAtom();
        if (ItemListAtomStream)
        {
          if (ItemListAtomStream == -12890)
            ItemListAtomStream = 0;
          break;
        }
      }
    }
  }
  if (a3)
    *a3 = ItemListAtomStream;
  return 0;
}

uint64_t FigQuickTimeMetadataStringToOSType(const __CFString *a1)
{
  UInt8 buffer[4];
  CFRange v4;

  *(_DWORD *)buffer = 0;
  v4.length = CFStringGetLength(a1);
  v4.location = 0;
  CFStringGetBytes(a1, v4, 0, 0, 0, buffer, 4, 0);
  return bswap32(*(unsigned int *)buffer);
}

uint64_t FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;

  if (*(uint64_t *)(a1 + 24) < 1
    || (result = FigAtomStreamInitWithByteStream(), !(_DWORD)result)
    && (result = FigAtomStreamGetCurrentAtomTypeAndDataLength(), !(_DWORD)result))
  {
    result = 0;
    if (a3)
      *a3 = 0;
  }
  return result;
}

uint64_t FigQuickTimeMetadataGetItemListAtomStream(uint64_t a1)
{
  uint64_t result;

  if (*(uint64_t *)(a1 + 32) < 1)
    return 0;
  result = FigAtomStreamInitWithByteStream();
  if (!(_DWORD)result)
    return FigAtomStreamInitWithParent();
  return result;
}

CFStringRef FigQuickTimeMetadataCreateExtendedLanguageTag(CFAllocatorRef alloc, unsigned int a2, unsigned int a3)
{
  uint64_t CStringPtrAndBufferToFree;
  const __CFDictionary *ISO639_1Mapping;
  const __CFDictionary *ISO639_1NonCanonicalMapping;
  int *v9;
  const char *v10;
  const char *v11;
  CFStringRef v12;
  void *value;
  void *v15;
  __int16 v16;
  char v17;
  int v18;

  CStringPtrAndBufferToFree = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  if (a3 >= 0x100)
  {
    ISO639_1Mapping = (const __CFDictionary *)FigMetadataGetISO639_1Mapping();
    value = 0;
    if (!CFDictionaryGetValueIfPresent(ISO639_1Mapping, (const void *)a3, (const void **)&value))
    {
      ISO639_1NonCanonicalMapping = (const __CFDictionary *)FigMetadataGetISO639_1NonCanonicalMapping();
      if (!CFDictionaryGetValueIfPresent(ISO639_1NonCanonicalMapping, (const void *)a3, (const void **)&value))
      {
        LOBYTE(v18) = (a3 >> 10) | 0x60;
        BYTE1(v18) = (a3 >> 5) & 0x1F | 0x60;
        BYTE2(v18) = a3 & 0x1F | 0x60;
      }
    }
    CStringPtrAndBufferToFree = (uint64_t)value;
    if (value)
    {
      CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      if (!CStringPtrAndBufferToFree)
      {
        FigSignalErrorAt();
LABEL_17:
        v12 = 0;
        goto LABEL_18;
      }
    }
  }
  if (a2 >= 0x100)
    v16 = __rev16(a2);
  if (!a3)
    goto LABEL_17;
  v9 = &v18;
  if (CStringPtrAndBufferToFree)
    v9 = (int *)CStringPtrAndBufferToFree;
  v10 = "-";
  v11 = "";
  if (a2)
    v11 = (const char *)&v16;
  else
    v10 = "";
  v12 = CFStringCreateWithFormat(alloc, 0, CFSTR("%s%s%s"), v9, v10, v11);
LABEL_18:
  free(v15);
  return v12;
}

void ArrayQTMetadataFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *ArrayQTMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v10;
  CFStringRef v11;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" Fig(Array)QuickTimeMetadataReader %p\n"), DerivedStorage);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
  {
    v6 = v5(a1, 0, 0);
    if (v6 >= 1)
    {
      v7 = v6;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v6);
      for (i = 0; i != v7; ++i)
      {
        theDict = 0;
        cf = 0;
        v9 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v9 || v9(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v10 = CFCopyDescription(cf);
          if (v10)
          {
            v11 = v10;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v10);
            CFRelease(v11);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_0, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ArrayQTMetadataCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  CFTypeRef *v6;
  CFTypeRef v7;
  uint64_t result;

  if (CFEqual(cf1, CFSTR("complete")))
  {
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_5:
    v7 = CFRetain(*v6);
    result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(cf1, CFSTR("format")))
  {
    v6 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeMetadata;
    goto LABEL_5;
  }
  return 4294954512;
}

const __CFString *ArrayQTMetadataHasKey(uint64_t a1, const __CFString *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t *v6;
  int v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  CFTypeRef v12;
  const void *ValueAtIndex;
  uint64_t HasKey;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2)
  {
    v6 = (uint64_t *)DerivedStorage;
    if (CFStringGetLength(a2) == 4)
    {
      v7 = metadataCreateNativeKeySpaceAndKeys(a2, a3, &cf, &theArray);
      v8 = theArray;
      if (!v7)
      {
        if (CFArrayGetCount(theArray))
        {
          Count = CFArrayGetCount(v8);
          if (Count)
          {
            v10 = Count;
            v11 = 0;
            v12 = cf;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
              HasKey = FigMetadataArrayHasKey(*v6, (uint64_t)ValueAtIndex, (uint64_t)v12, 0, 0, 0);
              if ((_DWORD)HasKey)
                break;
              if (v10 == ++v11)
                goto LABEL_10;
            }
            a2 = (const __CFString *)HasKey;
            if (!v8)
              goto LABEL_14;
            goto LABEL_13;
          }
        }
      }
LABEL_10:
      a2 = 0;
      if (v8)
LABEL_13:
        CFRelease(v8);
    }
    else
    {
      FigSignalErrorAt();
      a2 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  return a2;
}

CFIndex ArrayQTMetadataGetKeyCount(uint64_t a1, const __CFString *a2)
{
  const __CFArray **DerivedStorage;

  DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  if (!a2 || CFStringGetLength(a2) == 4 && !CFEqual(a2, CFSTR("comn")))
    return FigMetadataArrayGetKeyCount(*DerivedStorage, (uint64_t)a2);
  FigSignalErrorAt();
  return 0;
}

uint64_t ArrayQTMetadataCopyKeyAtIndex(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  const __CFArray **v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5)
    return FigSignalErrorAt();
  v9 = (const __CFArray **)DerivedStorage;
  if (a2 && (CFStringGetLength(a2) != 4 || CFEqual(a2, CFSTR("comn"))))
    return FigSignalErrorAt();
  else
    return FigMetadataArrayCopyKeyAtIndex(*v9, a3, (uint64_t)a2, a5);
}

uint64_t ArrayQTMetadataGetItemCount(uint64_t a1, const __CFString *a2, void *a3)
{
  const __CFArray **DerivedStorage;
  int v6;
  CFArrayRef v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  const void *ValueAtIndex;
  uint64_t v15;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  v6 = metadataCreateNativeKeySpaceAndKeys(a2, a3, &cf, &theArray);
  v7 = theArray;
  if (v6 || (Count = CFArrayGetCount(theArray)) == 0)
  {
    v11 = 0;
    if (v7)
LABEL_9:
      CFRelease(v7);
  }
  else
  {
    v9 = Count;
    v10 = 0;
    v11 = 0;
    v12 = (const void *)*MEMORY[0x1E0C9B0D0];
    v13 = cf;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
      if (CFEqual(ValueAtIndex, v12))
        v15 = 0;
      else
        v15 = (uint64_t)ValueAtIndex;
      v11 += FigMetadataArrayGetItemCount(*DerivedStorage, v15, (uint64_t)v13, 0, 0, 0);
      ++v10;
    }
    while (v9 != v10);
    if (v7)
      goto LABEL_9;
  }
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t ArrayQTMetadataCopyItemWithKeyAndIndex(uint64_t a1, const __CFString *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, __CFDictionary **a7)
{
  uint64_t DerivedStorage;
  const __CFArray **v13;
  uint64_t v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const void *v19;
  CFTypeRef v20;
  const void *ValueAtIndex;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a6 | (unint64_t)a7)
  {
    v13 = (const __CFArray **)DerivedStorage;
    v14 = metadataCreateNativeKeySpaceAndKeys(a2, a3, &cf, &theArray);
    v15 = theArray;
    if ((_DWORD)v14)
    {
      v23 = v14;
    }
    else if (CFArrayGetCount(theArray))
    {
      Count = CFArrayGetCount(v15);
      if (Count)
      {
        v17 = Count;
        v18 = 0;
        v19 = (const void *)*MEMORY[0x1E0C9B0D0];
        v20 = cf;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v15, v18);
          if (CFEqual(ValueAtIndex, v19))
            v22 = 0;
          else
            v22 = (uint64_t)ValueAtIndex;
          v23 = FigMetadataArrayCopyItemWithKeyAndIndex(*v13, v22, a4, (uint64_t)v20, 0, 0, 0, (_QWORD *)a6, a7);
          if (!(_DWORD)v23)
            break;
          ++v18;
        }
        while (v17 != v18);
      }
      else
      {
        v23 = 0;
      }
    }
    else
    {
      v23 = 4294954689;
    }
    if (v15)
      CFRelease(v15);
  }
  else
  {
    v23 = FigSignalErrorAt();
  }
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t FigAssetDownloadCoordinatorMarkAssetForInteractivity(uint64_t a1)
{
  _QWORD context[2];
  uint64_t v4;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  v4 = 0;
  if (!a1)
    return FigSignalErrorAt();
  context[0] = gAssetDownloadCoordinator;
  context[1] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), context, (dispatch_function_t)sadc_markAssetForInteractivityDispatch);
  return v4;
}

void sadc_markAssetForInteractivityDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  CFTypeRef v6;
  BOOL v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef);
  CFTypeRef cf;
  void *value;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  cf = 0;
  value = 0;
  v4 = sadc_copyAssetWeakReference(v2, v3, (CFTypeRef *)&value);
  if (v4)
    goto LABEL_9;
  CFBagAddValue(*(CFMutableBagRef *)(v2 + 56), value);
  v5 = sadc_copyAssetDownloaderForAsset(v2, v3, (uint64_t *)&cf);
  v6 = cf;
  if (v5)
    v7 = 1;
  else
    v7 = cf == 0;
  if (!v7)
  {
    if (MEMORY[0x194029AE0](*(_QWORD *)(v2 + 56), value) != 1)
    {
      v5 = 0;
      goto LABEL_12;
    }
    v8 = cf;
    v9 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v9)
    {
      v5 = -12782;
      goto LABEL_12;
    }
    v4 = v9(v8);
LABEL_9:
    v5 = v4;
LABEL_12:
    v6 = cf;
  }
  if (v6)
    CFRelease(v6);
  if (value)
    CFRelease(value);
  *(_DWORD *)(a1 + 16) = v5;
}

uint64_t FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(const void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken == -1)
  {
    if (!a1)
      return FigSignalErrorAt();
  }
  else
  {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
    if (!a1)
      return FigSignalErrorAt();
  }
  v2 = gAssetDownloadCoordinator;
  v3 = malloc_type_calloc(1uLL, 0x18uLL, 0x106004025F8D3E0uLL);
  if (v3)
  {
    v4 = v3;
    *v3 = v2;
    v3[1] = CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(v2 + 8), v4, (dispatch_function_t)sadc_unmarkAssetForInteractivityDispatch);
    return 0;
  }
  return FigSignalErrorAt();
}

void sadc_unmarkAssetForInteractivityDispatch(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  CFTypeRef v5;
  BOOL v6;
  CFTypeRef v7;
  void (*v8)(CFTypeRef);
  CFTypeRef cf;
  void *value;

  v3 = *a1;
  v2 = a1[1];
  cf = 0;
  value = 0;
  if (sadc_copyAssetWeakReference(v3, v2, (CFTypeRef *)&value))
  {
LABEL_9:
    v5 = cf;
    goto LABEL_10;
  }
  CFBagRemoveValue(*(CFMutableBagRef *)(v3 + 56), value);
  v4 = sadc_copyAssetDownloaderForAsset(v3, v2, (uint64_t *)&cf);
  v5 = cf;
  if (v4)
    v6 = 1;
  else
    v6 = cf == 0;
  if (!v6)
  {
    if (!CFBagContainsValue(*(CFBagRef *)(v3 + 56), value))
    {
      v7 = cf;
      v8 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v8)
        v8(v7);
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v5)
    CFRelease(v5);
  if (value)
    CFRelease(value);
  FigDeferCFRelease();
  free(a1);
}

uint64_t FigAssetDownloadCoordinatorRegisterAssetForDownloader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  _QWORD context[6];
  uint64_t v14;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  v14 = 0;
  if (!a1 || !a3)
    return FigSignalErrorAt();
  context[0] = gAssetDownloadCoordinator;
  context[1] = a1;
  context[2] = a2;
  context[3] = a3;
  context[4] = a4;
  context[5] = a5;
  dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), context, (dispatch_function_t)sadc_registerAssetForDownloaderDispatch);
  result = HIDWORD(v14);
  if (a6)
  {
    if (!HIDWORD(v14))
      *a6 = v14;
  }
  return result;
}

void sadc_registerAssetForDownloaderDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  int WeakAssetKey;
  BOOL v9;
  const void *v10;
  const void *Value;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  int v14;
  int v15;
  int v16;
  int v17;
  void *key;
  CFTypeRef cf;
  CFBooleanRef BOOLean;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(const void **)(a1 + 24);
  v6 = *(const void **)(a1 + 32);
  v7 = *(const void **)(a1 + 40);
  key = 0;
  cf = 0;
  WeakAssetKey = sadc_getWeakAssetKey(v2, &key);
  if (WeakAssetKey || (WeakAssetKey = sadc_copyAssetWeakReference(v3, v2, &cf)) != 0)
  {
    v15 = WeakAssetKey;
    v9 = 0;
    v10 = 0;
    goto LABEL_29;
  }
  v9 = MEMORY[0x194029AE0](*(_QWORD *)(v3 + 56), cf) > 0;
  v10 = (const void *)FigCFWeakReferenceTableCopyValue();
  if (v4 && FigCFEqual())
  {
LABEL_26:
    v15 = 0;
    goto LABEL_29;
  }
  v17 = CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 24), key);
  if (v17)
  {
    CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 24), key);
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 32), key);
    if (!FigCFEqual())
    {
      v15 = FigSignalErrorAt();
      goto LABEL_29;
    }
    if (Value && !FigCFEqual())
    {
      v16 = FigSignalErrorAt();
      goto LABEL_28;
    }
  }
  if (!v4 || !v10)
  {
    if (!v4)
      goto LABEL_23;
LABEL_22:
    v16 = FigCFWeakReferenceTableAddValueAssociatedWithKey();
    if (!v16)
    {
LABEL_23:
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 24), key, v5);
      if (v6)
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 32), key, v6);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 40), key, v7);
      if (v17)
        goto LABEL_26;
      CMNotificationCenterGetDefaultLocalCenter();
      v16 = FigDispatchAsyncPostNotification();
    }
LABEL_28:
    v15 = v16;
    goto LABEL_29;
  }
  BOOLean = (CFBooleanRef)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigAssetDownloaderGetCMBaseObject(v10);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (v13)
  {
    v14 = v13(CMBaseObject, CFSTR("AssetDownloaderProperty_HasAccessToDestinationURL"), *MEMORY[0x1E0C9AE00], &BOOLean);
    if (v14)
    {
      v15 = v14;
      if (v14 == -16651)
        goto LABEL_14;
    }
    else
    {
      if (!CFBooleanGetValue(BOOLean))
      {
LABEL_14:
        v15 = 0;
        goto LABEL_18;
      }
      v15 = FigSignalErrorAt();
    }
  }
  else
  {
    v15 = -12782;
  }
LABEL_18:
  if (BOOLean)
    CFRelease(BOOLean);
  if (!v15)
  {
    v16 = FigCFWeakReferenceTableRemoveValue();
    if (v16)
      goto LABEL_28;
    goto LABEL_22;
  }
LABEL_29:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  *(_DWORD *)(a1 + 52) = v15;
  *(_BYTE *)(a1 + 48) = v9;
}

uint64_t FigAssetDownloadCoordinatorCopyDestinationURLForAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD context[2];
  uint64_t v8;
  uint64_t v9;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  v4 = gAssetDownloadCoordinator;
  v8 = 0;
  v9 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  result = sadc_getWeakAssetKey(a1, &v6);
  if (!(_DWORD)result)
  {
    context[0] = v4;
    context[1] = v6;
    dispatch_sync_f(*(dispatch_queue_t *)(v4 + 8), context, (dispatch_function_t)sadc_copyDestinationURLDispatch);
    result = v9;
    if (!(_DWORD)v9)
      *a2 = v8;
  }
  return result;
}

uint64_t sadc_getWeakAssetKey(uint64_t a1, _QWORD *a2)
{
  uint64_t CMBaseObject;
  unsigned int (*v4)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t v5;
  uint64_t v7;
  CFNumberRef number;

  v7 = 0;
  number = 0;
  if (a2
    && (CMBaseObject = FigAssetGetCMBaseObject(a1),
        (v4 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48)) != 0)
    && !v4(CMBaseObject, CFSTR("assetProperty_DownloadToken"), *MEMORY[0x1E0C9AE00], &number)
    && (CFNumberGetValue(number, kCFNumberLongLongType, &v7), v7))
  {
    v5 = 0;
    *a2 = v7;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  if (number)
    CFRelease(number);
  return v5;
}

const void *sadc_copyDestinationURLDispatch(uint64_t a1)
{
  const void *result;

  result = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a1 + 24), *(const void **)(a1 + 8));
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t FigAssetDownloadCoordinatorCopyDestinationURLForDownloadToken(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  v6 = 0;
  v7 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v5[0] = gAssetDownloadCoordinator;
  v5[1] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), v5, (dispatch_function_t)sadc_copyDestinationURLDispatch);
  result = v7;
  if (!(_DWORD)v7)
    *a2 = v6;
  return result;
}

uint64_t FigAssetDownloadCoordinatorCopyClientBundleIdentifierForAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  v6 = 0;
  v7 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  v5[0] = gAssetDownloadCoordinator;
  v5[1] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), v5, (dispatch_function_t)sadc_copyClientBundleIdentifierForAssetDispatch);
  result = v7;
  if (!(_DWORD)v7)
    *a2 = v6;
  return result;
}

uint64_t sadc_copyClientBundleIdentifierForAssetDispatch(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const void *Value;
  CFTypeRef v6;
  void *key;

  v3 = *a1;
  v2 = a1[1];
  key = 0;
  if (v2)
  {
    result = sadc_getWeakAssetKey(v2, &key);
    if (!(_DWORD)result)
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 32), key);
      if (Value)
        v6 = CFRetain(Value);
      else
        v6 = 0;
      result = 0;
      a1[2] = (uint64_t)v6;
    }
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *((_DWORD *)a1 + 6) = result;
  return result;
}

uint64_t FigAssetDownloadCoordinatorUnregisterAssetWithDownloadTokenForAllDownloaders(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  v2 = gAssetDownloadCoordinator;
  v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (!v3)
    return FigSignalErrorAt();
  *v3 = v2;
  v3[1] = a1;
  dispatch_async_f(*(dispatch_queue_t *)(v2 + 8), v3, (dispatch_function_t)sadc_unregisterAssetWithDownloadTokenForAllDownloadersDispatch);
  return 0;
}

void sadc_unregisterAssetWithDownloadTokenForAllDownloadersDispatch(CFDictionaryRef **a1)
{
  CFDictionaryRef *v2;
  CFDictionaryRef *v3;

  v3 = *a1;
  v2 = a1[1];
  if (CFDictionaryContainsKey((*a1)[3], v2))
  {
    if ((CFDictionaryGetValue(v3[5], v2) & 1) != 0)
    {
      CFDictionaryGetValue(v3[3], v2);
      FigFileDeleteDirectory();
    }
    CFDictionaryRemoveValue(v3[3], v2);
    CFDictionaryRemoveValue(v3[4], v2);
    CFDictionaryRemoveValue(v3[5], v2);
  }
  free(a1);
}

uint64_t FigAssetDownloadCoordinatorScheduleAccessToURL(const void *a1, const void *a2, NSObject *a3, char a4, uint64_t a5)
{
  dispatch_queue_t *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (FigAssetDownloadSchedulerGetGlobal_onceToken == -1)
  {
    if (!a1)
      return FigSignalErrorAt();
  }
  else
  {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
    if (!a1)
      return FigSignalErrorAt();
  }
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        v10 = (dispatch_queue_t *)gAssetDownloadScheduler;
        v11 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040F23578B3uLL);
        if (v11)
        {
          v12 = v11;
          *v11 = CFRetain(a1);
          v12[1] = CFRetain(a2);
          v12[2] = a5;
          *((_BYTE *)v12 + 24) = a4;
          dispatch_retain(a3);
          v12[4] = a3;
          dispatch_async_f(*v10, v12, (dispatch_function_t)sads_scheduleAccessToURLDispatch);
          return 0;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

void sads_scheduleAccessToURLDispatch(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  sads_scheduleAccessToURLDispatchGuts(*(const void **)a1, *(const __CFURL **)(a1 + 8), *(unsigned __int8 *)(a1 + 24), *(const void **)(a1 + 16), *(NSObject **)(a1 + 32), 0, 0);
  v2 = *(NSObject **)(a1 + 32);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t FigAssetDownloadCoordinatorRequestImmediateAccessToURL(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t context;
  uint64_t v8;
  uint64_t v9;

  if (FigAssetDownloadSchedulerGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
  v8 = 0;
  v9 = 0;
  if (!a1 || !a3)
    return FigSignalErrorAt();
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)gAssetDownloadScheduler, &context, (dispatch_function_t)sads_requestImmediateAccessToURLAndCopyScheduledAccessToken);
  if (a2)
    *a2 = v8;
  *a3 = v9;
  return 0;
}

void sads_requestImmediateAccessToURLAndCopyScheduledAccessToken(uint64_t a1)
{
  char *v2;
  CFTypeRef v3;

  v2 = (char *)(a1 + 8);
  v3 = FigCFHTTPCreateURLString(*(const __CFURL **)a1);
  sads_scheduleAccessToURLDispatchGuts((const void *)*MEMORY[0x1E0C9B0D0], *(const __CFURL **)a1, 1, 0, 0, v2, (_QWORD *)(a1 + 16));
  if (v3)
    CFRelease(v3);
}

uint64_t FigAssetDownloadCoordinatorRelinquishAccessToURL(void *context)
{
  if (FigAssetDownloadSchedulerGetGlobal_onceToken == -1)
  {
    if (context)
    {
LABEL_3:
      dispatch_async_f(*(dispatch_queue_t *)gAssetDownloadScheduler, context, (dispatch_function_t)sads_relinquishAccessToURLDispatch);
      return 0;
    }
  }
  else
  {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
    if (context)
      goto LABEL_3;
  }
  return FigSignalErrorAt();
}

void sads_relinquishAccessToURLDispatch(void *key)
{
  CFMutableDictionaryRef *v2;
  const void *Value;
  void *v4;
  void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *ValueAtIndex;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  if (FigAssetDownloadSchedulerGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
  v2 = (CFMutableDictionaryRef *)gAssetDownloadScheduler;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(gAssetDownloadScheduler + 16), key);
  if (Value)
  {
    v4 = (void *)CFRetain(Value);
    if (v4)
    {
      v5 = v4;
      sads_cleanupScheduledAccessToURL(v2, key, v4);
      v6 = (const __CFArray *)CFDictionaryGetValue(v2[5], v5);
      if (v6)
      {
        v7 = v6;
        if (CFArrayGetCount(v6) >= 1)
        {
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
            v9 = CFDictionaryGetValue(v2[3], ValueAtIndex);
            if (!v9)
              break;
            v10 = v9;
            v11 = CFDictionaryGetValue(v2[4], ValueAtIndex);
            if (!v11)
              break;
            v12 = (uint64_t)v11;
            v13 = (void *)FigCFWeakReferenceTableCopyValue();
            if (v13)
            {
              v14 = v13;
              sads_dispatchScheduledCallbackFn(v13, 1, (uint64_t)ValueAtIndex, v10, v12);
              goto LABEL_14;
            }
            sads_cleanupScheduledAccessToURL(v2, ValueAtIndex, v5);
            if (CFArrayGetCount(v7) <= 0)
              goto LABEL_11;
          }
LABEL_17:
          CFRelease(v5);
          return;
        }
LABEL_11:
        v14 = 0;
LABEL_14:
        if (CFArrayGetCount(v7))
        {
LABEL_16:
          CFRelease(v5);
          v5 = v14;
          if (!v14)
            return;
          goto LABEL_17;
        }
      }
      else
      {
        v14 = 0;
      }
      CFDictionaryRemoveValue(v2[5], v5);
      goto LABEL_16;
    }
  }
}

void sadc_globalDownloadCoordinatorInitOnce()
{
  _QWORD *v0;
  dispatch_queue_t v1;
  dispatch_queue_t v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef v6;
  CFMutableBagRef v7;

  v0 = malloc_type_calloc(1uLL, 0x40uLL, 0x200400FA965B2uLL);
  if (v0)
  {
    v1 = dispatch_queue_create("com.apple.coremedia.streaming-asset-download-coordinator.registration-state", 0);
    v0[1] = v1;
    if (v1)
    {
      FigWatchdogMonitorDispatchQueue();
      v2 = dispatch_queue_create("com.apple.coremedia.streaming-asset-download-coordinator.notification", 0);
      *v0 = v2;
      if (v2)
      {
        v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (FigCFWeakReferenceTableCreate())
          goto LABEL_13;
        Mutable = CFDictionaryCreateMutable(v3, 0, 0, MEMORY[0x1E0C9B3A0]);
        v0[3] = Mutable;
        if (!Mutable)
          goto LABEL_12;
        v5 = CFDictionaryCreateMutable(v3, 0, 0, MEMORY[0x1E0C9B3A0]);
        v0[4] = v5;
        if (!v5)
          goto LABEL_12;
        v6 = CFDictionaryCreateMutable(v3, 0, 0, 0);
        v0[5] = v6;
        if (!v6)
          goto LABEL_12;
        if (FigCFWeakReferenceTableCreate())
        {
LABEL_13:
          free(v0);
          return;
        }
        v7 = CFBagCreateMutable(v3, 0, MEMORY[0x1E0C9B388]);
        v0[7] = v7;
        if (v7)
        {
          gAssetDownloadCoordinator = (uint64_t)v0;
          return;
        }
      }
    }
  }
LABEL_12:
  if (FigSignalErrorAt())
    goto LABEL_13;
}

uint64_t sadc_copyAssetWeakReference(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t WeakAssetKey;
  uint64_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  if (a2 && a3)
  {
    WeakAssetKey = sadc_getWeakAssetKey(a2, &v11);
    if (!(_DWORD)WeakAssetKey)
    {
      v5 = FigCFWeakReferenceTableCopyValue();
      if (v5)
      {
        v6 = (const void *)v5;
        v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        if (!FigCFEqual())
        {
          v8 = FigSignalErrorAt();
          goto LABEL_10;
        }
LABEL_9:
        v8 = 0;
        *a3 = CFRetain(v6);
LABEL_10:
        CFRelease(v6);
        if (v7)
          CFRelease(v7);
        return v8;
      }
      v9 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v9)
      {
        v6 = (const void *)v9;
        FigCFWeakReferenceTableAddValueAssociatedWithKey();
        v7 = 0;
        goto LABEL_9;
      }
      return FigSignalErrorAt();
    }
    return WeakAssetKey;
  }
  return FigSignalErrorAt();
}

uint64_t sadc_copyAssetDownloaderForAsset(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  result = sadc_getWeakAssetKey(a2, &v6);
  if (!(_DWORD)result)
  {
    v5 = FigCFWeakReferenceTableCopyValue();
    result = 0;
    *a3 = v5;
  }
  return result;
}

void sads_downloadSchedulerCreateInitOnce()
{
  _QWORD *v0;
  dispatch_queue_t v1;
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef v6;

  v0 = malloc_type_calloc(1uLL, 0x30uLL, 0x20040A759441BuLL);
  if (v0)
  {
    v1 = dispatch_queue_create("com.apple.coremedia.streaming-asset-download-coordinator.scheduled-access-state", 0);
    *v0 = v1;
    if (v1)
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (FigCFWeakReferenceTableCreate())
      {
LABEL_11:
        free(v0);
        return;
      }
      Mutable = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E0C9B3A0]);
      v0[2] = Mutable;
      if (Mutable)
      {
        v4 = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E0CA3700]);
        v0[3] = v4;
        if (v4)
        {
          v5 = CFDictionaryCreateMutable(v2, 0, 0, 0);
          v0[4] = v5;
          if (v5)
          {
            v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v0[5] = v6;
            if (v6)
            {
              gAssetDownloadScheduler = (uint64_t)v0;
              return;
            }
          }
        }
      }
    }
  }
  if (FigSignalErrorAt())
    goto LABEL_11;
}

void sads_scheduleAccessToURLDispatchGuts(const void *a1, const __CFURL *a2, int a3, const void *a4, NSObject *a5, char *a6, _QWORD *a7)
{
  CFMutableDictionaryRef *v14;
  CFTypeRef v15;
  const void *Value;
  void *v17;
  BOOL v18;
  char v19;
  char v20;
  CFMutableArrayRef Mutable;
  char v22;

  if (FigAssetDownloadSchedulerGetGlobal_onceToken != -1)
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
  v14 = (CFMutableDictionaryRef *)gAssetDownloadScheduler;
  v15 = FigCFHTTPCreateURLString(a2);
  Value = CFDictionaryGetValue(v14[5], v15);
  if (Value)
    v17 = (void *)CFRetain(Value);
  else
    v17 = 0;
  v18 = a3 != 0;
  v19 = v17 == 0;
  if (v17)
  {
    v20 = v18;
  }
  else
  {
    v18 = 0;
    v20 = 1;
  }
  if (!a1)
  {
    FigSignalErrorAt();
LABEL_31:
    if (v17)
    {
LABEL_26:
      CFRelease(v17);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if (v18)
  {
LABEL_18:
    v22 = v20 ^ 1;
    if (!a4)
      v22 = 1;
    if ((v22 & 1) == 0)
      sads_dispatchScheduledCallbackFn(a1, v19, 0, a5, (uint64_t)a4);
    if (a6)
      *a6 = v19;
    if (a7)
      *a7 = 0;
    goto LABEL_26;
  }
  if (FigCFWeakReferenceTableAddValueAndGetKey())
    goto LABEL_31;
  if (v17)
  {
LABEL_15:
    CFArrayAppendValue((CFMutableArrayRef)v17, 0);
    CFDictionarySetValue(v14[2], 0, v15);
    if (a4 && a5)
    {
      CFDictionarySetValue(v14[3], 0, a5);
      CFDictionarySetValue(v14[4], 0, a4);
    }
    goto LABEL_18;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (Mutable)
  {
    v17 = Mutable;
    CFDictionarySetValue(v14[5], v15, Mutable);
    goto LABEL_15;
  }
  FigSignalErrorAt();
LABEL_27:
  if (v15)
    CFRelease(v15);
}

void sads_dispatchScheduledCallbackFn(const void *a1, char a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  _BYTE *v10;
  _BYTE *v11;
  CFTypeRef v12;

  v10 = malloc_type_calloc(1uLL, 0x20uLL, 0x10C0040ABF999C2uLL);
  if (v10)
  {
    v11 = v10;
    if (a1)
      v12 = CFRetain(a1);
    else
      v12 = 0;
    *(_QWORD *)v11 = v12;
    v11[8] = a2;
    *((_QWORD *)v11 + 2) = a3;
    *((_QWORD *)v11 + 3) = a5;
    dispatch_async_f(a4, v11, (dispatch_function_t)sads_performDispatchScheduledCallbackFn);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void sads_performDispatchScheduledCallbackFn(_QWORD *a1)
{
  const void *v2;
  void (*v3)(_QWORD, _QWORD, _QWORD);

  v2 = (const void *)*a1;
  v3 = (void (*)(_QWORD, _QWORD, _QWORD))a1[3];
  if (!v3)
  {
    FigSignalErrorAt();
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3(*a1, *((unsigned __int8 *)a1 + 8), a1[2]);
  if (v2)
LABEL_3:
    CFRelease(v2);
LABEL_4:
  free(a1);
}

void sads_cleanupScheduledAccessToURL(CFMutableDictionaryRef *a1, const void *a2, void *key)
{
  const __CFArray *Value;
  __CFArray *v6;
  CFRange v7;

  Value = (const __CFArray *)CFDictionaryGetValue(a1[5], key);
  if (Value)
  {
    v6 = Value;
    v7.length = CFArrayGetCount(Value);
    v7.location = 0;
    if (!CFArrayGetFirstIndexOfValue(v6, v7, a2))
    {
      CFDictionaryRemoveValue(a1[2], a2);
      CFDictionaryRemoveValue(a1[3], a2);
      CFDictionaryRemoveValue(a1[4], a2);
      CFArrayRemoveValueAtIndex(v6, 0);
    }
  }
}

uint64_t FigCaptionRendererStackLayoutRegionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  int64x2_t v5;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  v8 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererStackLayoutRegionGetClassID_sRegisterFigCaptionRendererStackLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererStackLayoutRegionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    v3 = v8;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)DerivedStorage = 1;
    *(_QWORD *)(DerivedStorage + 24) = 0x3FAB4A2339C0EBEELL;
    *(_QWORD *)(DerivedStorage + 32) = 0x300000064;
    v5 = vdupq_n_s64(0x4049000000000000uLL);
    *(int64x2_t *)(DerivedStorage + 56) = v5;
    *(int64x2_t *)(DerivedStorage + 40) = v5;
    v7 = 0;
    FigCaptionRendererNodeCreate(&v7);
    *(_QWORD *)(DerivedStorage + 8) = v7;
    *a1 = v3;
  }
  return v2;
}

void FigCaptionRendererStackLayoutRegionFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
}

__CFString *FigCaptionRendererStackLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererStackLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererStackLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t result;
  const __CFArray *v9;
  uint64_t v10;
  void (*v11)(uint64_t, CFMutableArrayRef *);
  CFMutableArrayRef theArray;
  CFRange v13;

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
  if (!v7)
    return 4294954514;
  result = v7(v4, a2);
  if (!(_DWORD)result)
  {
    theArray = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v9 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 2);
      if (v10 && (v11 = *(void (**)(uint64_t, CFMutableArrayRef *))(v10 + 24)) != 0)
      {
        v11(a1, &theArray);
        v9 = theArray;
      }
      else
      {
        v9 = 0;
      }
    }
    v13.length = CFArrayGetCount(v9);
    v13.location = 0;
    CFArraySortValues(theArray, v13, (CFComparatorFunction)fcrStackLayout_TimeComparator, 0);
    return 0;
  }
  return result;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(const void *, CGRect *);
  const __CFDictionary *v8;
  const void *Value;
  double y;
  CGFloat height;
  CGSize v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, CGRect *);
  double MidY;
  CGFloat v17;
  CGFloat x;
  CGFloat width;
  double MidX;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(const void *, double, double);
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(const void *, double, double);
  CGContext *v30;
  CGColorSpace *v31;
  CGColor *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(const void *, CGRect *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  CGSize v41;
  CGPoint v42;
  CGRect v43;
  CGRect rect;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v41 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v42 = (CGPoint)*MEMORY[0x1E0C9D628];
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  rect.size = v41;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7)
        v7(a1, &rect);
    }
  }
  v8 = *(const __CFDictionary **)(a2 + 296);
  if (v8)
  {
    Value = CFDictionaryGetValue(v8, a1);
    if (*(_DWORD *)(a2 + 328))
    {
      y = rect.origin.y;
      height = rect.size.height;
    }
    else
    {
      v12 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      v43.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      v43.size = v12;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(void (**)(const void *, CGRect *))(v14 + 72);
          if (v15)
            v15(a1, &v43);
        }
      }
      MidY = CGRectGetMidY(rect);
      v17 = CGRectGetMidY(v43);
      height = rect.size.height;
      y = v17 + v17 - MidY + rect.size.height * -0.5;
      rect.origin.y = y;
    }
    x = rect.origin.x;
    width = rect.size.width;
    MidX = CGRectGetMidX(*(CGRect *)(&y - 1));
    v21 = CGRectGetMidY(rect);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v22 = CMBaseObjectGetProtocolVTable();
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        v24 = *(void (**)(const void *, double, double))(v23 + 72);
        if (v24)
          v24(Value, MidX, v21);
      }
    }
    v25 = rect.size.width;
    v26 = rect.size.height;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v29 = *(void (**)(const void *, double, double))(v28 + 88);
        if (v29)
          v29(Value, v25, v26);
      }
    }
  }
  v30 = *(CGContext **)(a2 + 320);
  if (v30 && *(_BYTE *)(a2 + 746))
  {
    v31 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    rect = *(CGRect *)ymmword_1932FB5A8;
    v32 = CGColorCreate(v31, &rect.origin.x);
    if (v32)
    {
      CGContextSaveGState(v30);
      v43.origin = v42;
      v43.size = v41;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v33 = CMBaseObjectGetProtocolVTable();
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          v35 = *(void (**)(const void *, CGRect *))(v34 + 104);
          if (v35)
            v35(a1, &v43);
        }
      }
      CGContextSetRGBStrokeColor(v30, 0.4, 0.8, 1.0, 1.0);
      CGContextSetLineWidth(v30, 3.0);
      CGContextStrokeRect(v30, v43);
      CGContextRestoreGState(v30);
    }
    CGColorRelease(v32);
    CFRelease(v31);
  }
  v36 = *(_QWORD *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v37 = CMBaseObjectGetProtocolVTable();
  if (!v37)
    return 4294954508;
  v38 = *(_QWORD *)(v37 + 16);
  if (!v38)
    return 4294954508;
  v39 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 280);
  if (v39)
    return v39(v36, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, _BYTE *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _BYTE *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __int128 *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, CFArrayRef *);
  CFIndex Count;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, __int128 *);
  double v29;
  double v30;
  const void *ValueAtIndex;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(const void *, _BYTE *);
  int v35;
  double v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(const void *, _BYTE *);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(const void *, __int128 *);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(const void *, double *);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(const void *, char *);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(const void *, double, double);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, double, double);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(const void *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, double *);
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double x;
  double y;
  double width;
  double height;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, double, double, double, double);
  unint64_t v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(const void *, double, double);
  uint64_t v90;
  uint64_t v91;
  void (*v92)(const void *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  void (*v95)(const void *, _BYTE *);
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD, _BYTE *);
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  double v109[3];
  CFArrayRef theArray;
  __int128 v111;
  __int128 v112;
  _BYTE v113[48];
  __int128 v114;
  CGRect v115;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(v3 + 32);
  v5 = *(double *)(v3 + 24) * (double)*(int *)(v3 + 36);
  v6 = *(double *)(v3 + 56);
  v7 = *(double *)(v3 + 40);
  if (*(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5 >= 0.0)
    v8 = *(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5;
  else
    v8 = 0.0;
  v9 = *(_QWORD *)(v3 + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, _BYTE *))(v11 + 80);
      if (v12)
      {
        v113[0] = 1;
        *(_DWORD *)&v113[1] = 0;
        *(_DWORD *)&v113[4] = 0;
        *(double *)&v113[8] = v6 / 100.0 + v7 / -100.0 * ((double)v4 / 100.0);
        v113[16] = 1;
        *(_DWORD *)&v113[17] = 0;
        *(_DWORD *)&v113[20] = 0;
        *(double *)&v113[24] = v8;
        v113[32] = 1;
        *(_DWORD *)&v113[33] = 0;
        *(_DWORD *)&v113[36] = 0;
        *(double *)&v113[40] = (double)v4 / 100.0;
        LOBYTE(v114) = 1;
        *(_DWORD *)((char *)&v114 + 1) = 0;
        DWORD1(v114) = 0;
        *((double *)&v114 + 1) = v5;
        v12(v9, v113);
      }
    }
  }
  v13 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)v113 = FCRRectNull;
  *(_OWORD *)&v113[16] = *(_OWORD *)&byte_1932FABC0;
  *(_OWORD *)&v113[32] = xmmword_1932FABD0;
  v114 = *(_OWORD *)&byte_1932FABE0;
  v102 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v103 = *MEMORY[0x1E0C9D628];
  v111 = *MEMORY[0x1E0C9D628];
  v112 = v102;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(void (**)(uint64_t, _BYTE *))(v15 + 88);
      if (v16)
        v16(a1, v113);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, __int128 *))(v18 + 72);
      if (v19)
        v19(a1, &v111);
    }
  }
  if (*(double *)&v113[40] != -1.0)
  {
    v71 = *(double *)&v112;
    v72 = *(double *)&v111 + *(double *)&v113[8];
    if (v113[0])
      v72 = *(double *)&v111 + *(double *)&v113[8] * *(double *)&v112;
    v73 = *((double *)&v111 + 1) + *(double *)&v113[24];
    if (v113[16])
      v73 = *((double *)&v111 + 1) + *(double *)&v113[24] * *((double *)&v112 + 1);
    v74 = 1.0;
    if (!v113[32])
      v71 = 1.0;
    if ((_BYTE)v114)
      v74 = *((double *)&v112 + 1);
    v76 = *((double *)&v114 + 1) * v74;
    v75 = *(double *)&v113[40] * v71;
    v115 = CGRectIntegral(*(CGRect *)&v72);
    x = v115.origin.x;
    y = v115.origin.y;
    width = v115.size.width;
    height = v115.size.height;
    v81 = *(_QWORD *)(v13 + 8);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v82 = CMBaseObjectGetProtocolVTable();
    if (v82)
    {
      v83 = *(_QWORD *)(v82 + 16);
      if (v83)
      {
        v84 = *(void (**)(uint64_t, double, double, double, double))(v83 + 96);
        if (v84)
          v84(v81, x, y, width, height);
      }
    }
  }
  theArray = 0;
  v20 = *(_QWORD *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24);
      if (v23)
        v23(v20, &theArray);
    }
  }
  Count = CFArrayGetCount(theArray);
  v111 = v103;
  v112 = v102;
  v25 = *(_QWORD *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(void (**)(uint64_t, __int128 *))(v27 + 104);
      if (v28)
        v28(v25, &v111);
    }
  }
  v30 = *((double *)&v111 + 1);
  v29 = *(double *)&v111;
  if (*(_BYTE *)DerivedStorage)
  {
    if (Count >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
      v101 = *MEMORY[0x1E0C9D820];
      *(_OWORD *)v113 = *MEMORY[0x1E0C9D820];
      FigCaptionRendererNodeProtocolGetProtocolID();
      v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = *(void (**)(const void *, _BYTE *))(v33 + 120);
          if (v34)
            v34(ValueAtIndex, v113);
        }
      }
      v35 = 0;
      v36 = *(double *)&v113[8];
      v37 = Count + 1;
      v100 = *MEMORY[0x1E0C9D538];
      do
      {
        v38 = CFArrayGetValueAtIndex(theArray, v37 - 2);
        *(_OWORD *)v113 = v103;
        *(_OWORD *)&v113[16] = v102;
        v105 = v101;
        *(_OWORD *)v109 = v100;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v39 = CMBaseObjectGetProtocolVTable();
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 16);
          if (v40)
          {
            v41 = *(void (**)(const void *, _BYTE *))(v40 + 104);
            if (v41)
              v41(v38, v113);
          }
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        v42 = CMBaseObjectGetProtocolVTable();
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 16);
          if (v43)
          {
            v44 = *(void (**)(const void *, __int128 *))(v43 + 120);
            if (v44)
              v44(v38, &v105);
          }
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        v45 = CMBaseObjectGetProtocolVTable();
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 16);
          if (v46)
          {
            v47 = *(void (**)(const void *, double *))(v46 + 136);
            if (v47)
              v47(v38, v109);
          }
        }
        if (*(double *)&v113[8] != v30)
        {
          v108 = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v48 = CMBaseObjectGetProtocolVTable();
          if (v48)
          {
            v49 = *(_QWORD *)(v48 + 16);
            if (v49)
            {
              v50 = *(void (**)(const void *, char *))(v49 + 248);
              if (v50)
                v50(v38, &v108);
            }
          }
          if (!v108)
          {
            if (v109[0] == -1.0 && v109[1] == -1.0)
            {
              v109[0] = v29;
              v109[1] = v30 - v36;
              FigCaptionRendererNodeProtocolGetProtocolID();
              v51 = CMBaseObjectGetProtocolVTable();
              if (v51)
              {
                v52 = *(_QWORD *)(v51 + 16);
                if (v52)
                {
                  v53 = *(void (**)(const void *, double, double))(v52 + 128);
                  if (v53)
                    v53(v38, v29, v30 - v36);
                }
              }
            }
            v107 = 0;
            FigCaptionRendererMoveToActionCreate(&v107);
            v54 = v107;
            FigCaptionRendererActionProtocolGetProtocolID();
            v55 = CMBaseObjectGetProtocolVTable();
            if (v55)
            {
              v56 = *(_QWORD *)(v55 + 16);
              if (v56)
              {
                v57 = *(void (**)(uint64_t, uint64_t))(v56 + 16);
                if (v57)
                  v57(v54, 450);
              }
            }
            v58 = v107;
            FigCaptionRendererMoveToActionProtocolGetProtocolID();
            v59 = CMBaseObjectGetProtocolVTable();
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 16);
              if (v60)
              {
                v61 = *(void (**)(uint64_t, double, double))(v60 + 16);
                if (v61)
                  v61(v58, v29, v30);
              }
            }
            v62 = v107;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 16);
              if (v64)
              {
                v65 = *(void (**)(const void *, uint64_t))(v64 + 320);
                if (v65)
                  v65(v38, v62);
              }
            }
            v35 = 1;
          }
        }
        v30 = v30 + *((double *)&v105 + 1);
        --v37;
      }
      while (v37 > 1);
      if (v35)
      {
        v109[0] = 0.0;
        v105 = v111;
        v106 = v112;
        v66 = *(_QWORD *)(DerivedStorage + 8);
        FigCaptionRendererNodeProtocolGetProtocolID();
        v67 = CMBaseObjectGetProtocolVTable();
        if (v67
          && (v68 = *(_QWORD *)(v67 + 16)) != 0
          && (v69 = *(void (**)(uint64_t, double *))(v68 + 16)) != 0)
        {
          v69(v66, v109);
          v70 = v109[0];
        }
        else
        {
          v70 = 0.0;
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        v96 = CMBaseObjectGetProtocolVTable();
        if (v96)
        {
          v97 = *(_QWORD *)(v96 + 16);
          if (v97)
          {
            v98 = *(void (**)(_QWORD, _BYTE *))(v97 + 312);
            if (v98)
            {
              *(_QWORD *)v113 = 0x1C200000000;
              *(_OWORD *)&v113[8] = v105;
              *(_OWORD *)&v113[24] = v106;
              v98(*(_QWORD *)&v70, v113);
            }
          }
        }
      }
    }
  }
  else if (Count >= 1)
  {
    v85 = Count + 1;
    v104 = *MEMORY[0x1E0C9D820];
    do
    {
      *(_OWORD *)v113 = v104;
      v86 = CFArrayGetValueAtIndex(theArray, v85 - 2);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v87 = CMBaseObjectGetProtocolVTable();
      if (v87)
      {
        v88 = *(_QWORD *)(v87 + 16);
        if (v88)
        {
          v89 = *(void (**)(const void *, double, double))(v88 + 128);
          if (v89)
            v89(v86, v29, v30);
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      v90 = CMBaseObjectGetProtocolVTable();
      if (v90)
      {
        v91 = *(_QWORD *)(v90 + 16);
        if (v91)
        {
          v92 = *(void (**)(const void *, uint64_t))(v91 + 232);
          if (v92)
            v92(v86, 1);
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      v93 = CMBaseObjectGetProtocolVTable();
      if (v93)
      {
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
        {
          v95 = *(void (**)(const void *, _BYTE *))(v94 + 120);
          if (v95)
            v95(v86, v113);
        }
      }
      v30 = v30 + *(double *)&v113[8];
      --v85;
    }
    while (v85 > 1);
  }
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions()
{
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __int16 *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
        v7(a1, (char *)&v25 + 1);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, __int16 *))(v9 + 240);
      if (v10)
        v10(a1, &v25);
    }
  }
  if (HIBYTE(v25))
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(void (**)(uint64_t, uint64_t))(v12 + 296);
        if (v13)
          v13(a1, a2);
      }
    }
  }
  if ((_BYTE)v25)
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
        if (v16)
          v16(a1, a2);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *(_QWORD *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t fcrStackLayout_TimeComparator(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double *);
  double FigBaseObject;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD *);
  _QWORD v14[2];
  double v15[2];

  v15[0] = FigBytePumpGetFigBaseObject(a1);
  v15[1] = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, double *))(v6 + 8);
      if (v7)
        ProtocolVTable = v7(a1, v15);
    }
  }
  FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  *(double *)v14 = FigBaseObject;
  v14[1] = v9;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, _QWORD *))(v11 + 8);
      if (v12)
      {
        v12(a2, v14);
        FigBaseObject = *(double *)v14;
      }
    }
  }
  if (v15[0] < FigBaseObject)
    return -1;
  else
    return v15[0] > FigBaseObject;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 56) = a1;
  *(double *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererStackLayoutRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_SetAnimationEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_SetLineHeightRatio(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 24) = a1;
  return 0;
}

uint64_t RegisterFigCaptionRendererStackLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererStackLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererStackLayoutRegion]"));
}

uint64_t FigSampleBufferProcessorCreateForCaptionConverter(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t DerivedStorage;

  if (!a5)
    return FigSignalErrorAt();
  FigSampleBufferProcessorGetClassID();
  v8 = CMDerivedObjectCreate();
  if (!(_DWORD)v8)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 20) = a2 == 0;
    *(_DWORD *)(DerivedStorage + 4) = 0;
    *(_DWORD *)(DerivedStorage + 8) = 0;
    *(_DWORD *)(DerivedStorage + 12) = a2;
    *(_DWORD *)(DerivedStorage + 16) = a3;
    *(_BYTE *)(DerivedStorage + 21) = a3 == 0;
    *(_BYTE *)(DerivedStorage + 22) = 0;
    *a5 = 0;
  }
  return v8;
}

uint64_t captionConverter_invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = 1;
  *(_QWORD *)(DerivedStorage + 24) = 0;
  *(_QWORD *)(DerivedStorage + 32) = 0;
  return 0;
}

void captionConverter_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
}

__CFString *captionConverter_copyDebugDesc()
{
  _DWORD *DerivedStorage;
  const __CFAllocator *v1;
  __CFString *Mutable;
  CFIndex v3;
  const char *v4;
  CFAllocatorRef v5;
  unsigned int v6;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v1 = CFGetAllocator(DerivedStorage);
  Mutable = CFStringCreateMutable(v1, 0);
  v3 = CFGetRetainCount(DerivedStorage);
  if (*(_BYTE *)DerivedStorage)
    v4 = " (invalidated)";
  else
    v4 = "";
  v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_CaptionConverter %p> retainCount: %d%s allocator: %p "), DerivedStorage, v3, v4, v5);
  v6 = DerivedStorage[3];
  CFStringAppendFormat(Mutable, 0, CFSTR("media type %c%c%c%c sub type %c%c%c%c"), HIBYTE(v6), BYTE2(v6), BYTE1(v6), v6, HIBYTE(v6), BYTE2(v6), BYTE1(v6), v6);
  return Mutable;
}

uint64_t captionConverter_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 24) = a3;
  *(_QWORD *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t captionConverter_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  FourCharCode MediaSubType;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  const void *v19;
  _QWORD *v20;
  int v21;
  uint64_t CMBaseObject;
  uint64_t (*v23)(uint64_t, __CFString *, _QWORD);
  uint64_t v24;
  const void *v25;
  CFTypeRef *v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t CaptionGroup;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, _BYTE *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, opaqueCMSampleBuffer *);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[32];
  _BYTE v42[32];
  __int128 v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 32) || !a2)
    return FigSignalErrorAt();
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (*(_DWORD *)(v5 + 4) == MediaType && *(_DWORD *)(v5 + 8) == MediaSubType)
    goto LABEL_51;
  *(_DWORD *)(v5 + 4) = MediaType;
  *(_DWORD *)(v5 + 8) = MediaSubType;
  if (*(_BYTE *)(v5 + 20))
    *(_DWORD *)(v5 + 12) = MediaType;
  if (*(_BYTE *)(v5 + 21))
    *(_DWORD *)(v5 + 16) = MediaSubType;
  v9 = *(_QWORD *)(v5 + 48);
  if (v9)
  {
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v10)
      return 4294954514;
    result = v10(v9);
    if ((_DWORD)result)
      return result;
  }
  v12 = *(_QWORD *)(v5 + 40);
  if (!v12)
    goto LABEL_16;
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v13)
  {
    result = v13(v12);
    if ((_DWORD)result)
      return result;
LABEL_16:
    if (!CMSampleBufferGetNumSamples(a2))
      goto LABEL_23;
    v14 = *(_DWORD *)(v5 + 4);
    v15 = *(_DWORD *)(v5 + 12);
    if (v14 == v15 && *(_DWORD *)(v5 + 8) == *(_DWORD *)(v5 + 16))
      goto LABEL_23;
    if (v14 == 1668310898)
    {
      v16 = *(_DWORD *)(v5 + 8);
      if (v15 == 1952807028 && v16 == 1668310898)
      {
        v17 = *(_DWORD *)(v5 + 16);
        if (v17 == 1634301044)
        {
LABEL_23:
          *(_BYTE *)(v5 + 22) = 1;
          goto LABEL_51;
        }
        *(_BYTE *)(v5 + 22) = v17 == 2004251764;
        if (v17 == 2004251764)
        {
LABEL_51:
          if (*(_BYTE *)(v5 + 22))
          {
            (*(void (**)(_QWORD, _QWORD, opaqueCMSampleBuffer *))(v5 + 32))(*(_QWORD *)(v5 + 24), 0, a2);
            return 0;
          }
          if (*(_QWORD *)(v5 + 48))
          {
            v28 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
            v40 = *MEMORY[0x1E0CA2E40];
            *(_OWORD *)v41 = v28;
            *(_OWORD *)&v41[16] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
            v29 = CMBaseObjectGetDerivedStorage();
            if (*(_QWORD *)(v29 + 48))
            {
              v30 = v29;
              CaptionGroup = FigSampleBufferGetCaptionGroup();
              if (CaptionGroup)
              {
                v32 = CaptionGroup;
                CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&v40, a2);
                CMSampleBufferGetOutputDuration((CMTime *)v42, a2);
                *(_QWORD *)&v41[24] = *(_QWORD *)&v42[16];
                *(_OWORD *)&v41[8] = *(_OWORD *)v42;
                v33 = *(_QWORD *)(v30 + 48);
                v37 = v40;
                v38 = *(_OWORD *)v41;
                v39 = *(_OWORD *)&v41[16];
                v34 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
                if (v34)
                {
                  *(_OWORD *)v42 = v37;
                  *(_OWORD *)&v42[16] = v38;
                  v43 = v39;
                  return v34(v33, v32, v42);
                }
                return 4294954514;
              }
            }
          }
          else
          {
            if (!*(_QWORD *)(v5 + 40))
              return 0;
            v35 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
            if (v35)
            {
              v36 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
              if (v36)
                return v36(v35, a2);
              return 4294954514;
            }
          }
          return FigSignalErrorAt();
        }
LABEL_38:
        v24 = CMBaseObjectGetDerivedStorage();
        v26 = (CFTypeRef *)(v24 + 48);
        v25 = *(const void **)(v24 + 48);
        if (v25)
        {
          CFRelease(v25);
          *v26 = 0;
        }
        if (*(_DWORD *)(v24 + 12) == 1668047728)
        {
          *(_QWORD *)v42 = captionConverter_ToSbufOutputCallback;
          *(_QWORD *)&v42[8] = a1;
          result = FigCLCPCaptionGroupConverterToSampleBufferCreate(v42, (const void *)*MEMORY[0x1E0C9AE00], v26);
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      *(_BYTE *)(v5 + 22) = 0;
      if (v16 == 1668310898)
        goto LABEL_38;
    }
    else
    {
      *(_BYTE *)(v5 + 22) = 0;
    }
    if (v15 == 1668310898 && *(_DWORD *)(v5 + 16) == 1668310898)
    {
      v18 = CMBaseObjectGetDerivedStorage();
      v20 = (_QWORD *)(v18 + 40);
      v19 = *(const void **)(v18 + 40);
      if (v19)
      {
        CFRelease(v19);
        *v20 = 0;
      }
      v21 = *(_DWORD *)(v18 + 4);
      if (v21 != 1952807028 && v21 != 1935832172)
      {
        if (v21 == 1668047728)
        {
          *(_QWORD *)v42 = captionConverter_FromSbufOutputCallback;
          *(_QWORD *)&v42[8] = a1;
          result = FigCLCPCaptionGroupConverterFromSampleBufferCreate(v42, (const void *)*MEMORY[0x1E0C9AE00], v20);
          if (!(_DWORD)result)
          {
            CMBaseObject = FigCaptionGroupConverterFromSampleBufferGetCMBaseObject(*v20);
            v23 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
            if (v23)
              result = v23(CMBaseObject, CFSTR("FCGCFS_ShouldGenerateSpacingAttributeSpaceCharacters"), *MEMORY[0x1E0C9AE40]);
            else
              result = 4294954514;
          }
LABEL_50:
          if ((_DWORD)result)
            return result;
          goto LABEL_51;
        }
LABEL_49:
        result = FigSignalErrorAt();
        goto LABEL_50;
      }
      v27 = *(_DWORD *)(v18 + 8);
      if (v27 > 2004251763)
      {
        if (v27 != 2021028980 && v27 != 2004251764)
          goto LABEL_49;
      }
      else if (v27 != 1937142900)
      {
        if (v27 == 1954034535)
        {
          *(_QWORD *)v42 = captionConverter_FromSbufOutputCallback;
          *(_QWORD *)&v42[8] = a1;
          result = FigTX3GCaptionGroupConverterFromSampleBufferCreate(v42, *MEMORY[0x1E0C9AE00], v20);
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      *(_QWORD *)v42 = captionConverter_FromSbufOutputCallback;
      *(_QWORD *)&v42[8] = a1;
      result = FigWebVTTCaptionGroupConverterFromSampleBufferCreate(v42, *MEMORY[0x1E0C9AE00], v20);
      goto LABEL_50;
    }
    return FigSignalErrorAt();
  }
  return 4294954514;
}

uint64_t captionConverter_finishPendingProcessing()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 32))
    return FigSignalErrorAt();
  if (*(_BYTE *)(DerivedStorage + 22))
    return 0;
  v2 = *(_QWORD *)(DerivedStorage + 48);
  if (!v2)
  {
    v2 = *(_QWORD *)(DerivedStorage + 40);
    if (!v2)
      return 0;
  }
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v3)
    return v3(v2);
  else
    return 4294954514;
}

uint64_t captionConverter_ToSbufOutputCallback(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(DerivedStorage + 32))(*(_QWORD *)(DerivedStorage + 24), 0, a1);
  return 0;
}

uint64_t captionConverter_FromSbufOutputCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  v4 = FigSampleBufferCreateForCaptionGroup();
  if (!(_DWORD)v4)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 32))(*(_QWORD *)(v3 + 24), 0, 0);
  return v4;
}

BOOL FigFormatReaderIsRemote(_BOOL8 result)
{
  if (result)
  {
    FigFormatReaderGetFigBaseObject(result);
    if (remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce != -1)
      dispatch_once(&remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce, &__block_literal_global_26);
    return CMBaseObjectIsMemberOfClass() != 0;
  }
  return result;
}

BOOL FigTrackReaderIsRemote(_BOOL8 result)
{
  if (result)
  {
    FigTrackReaderGetFigBaseObject(result);
    if (remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce != -1)
      dispatch_once(&remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce, &__block_literal_global_4);
    return CMBaseObjectIsMemberOfClass() != 0;
  }
  return result;
}

uint64_t FigFormatReaderRemoteCreateForURL(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  v8 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  v9 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v8, &cf);
  v10 = cf;
  if (!(_DWORD)v9)
  {
    v9 = remoteFormatReaderClient_CopyConnection((uint64_t)cf, 1, &v14);
    if (!(_DWORD)v9)
    {
      v11 = v14;
      if (!FigServer_IsServerProcess()
        || (v9 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), !(_DWORD)v9))
      {
        v9 = remoteFormatReader_CreateForURLAndConnection(a1, a2, v11, a3, a4);
      }
    }
  }
  v12 = v9;
  if (v10)
    CFRelease(v10);
  if (v14)
    CFRelease(v14);
  return v12;
}

uint64_t remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(unsigned int a1, _QWORD *a2)
{
  dispatch_once_t *v5;
  CFTypeRef v6;
  _QWORD block[4];
  unsigned int v9;

  v5 = (dispatch_once_t *)((char *)&gFormatReaderRemoteClients + 40 * a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient_block_invoke;
  block[3] = &__block_descriptor_tmp_12_0;
  v9 = a1;
  if (*v5 != -1)
    dispatch_once(v5, block);
  v6 = (CFTypeRef)*((_QWORD *)&gFormatReaderRemoteClients + 5 * a1 + 2);
  if (v6)
    v6 = CFRetain(v6);
  *a2 = v6;
  return *((unsigned int *)&gFormatReaderRemoteClients + 10 * a1 + 2);
}

uint64_t remoteFormatReaderClient_CopyConnection(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  if (a2 == 1)
    result = FigXPCRemoteClientCreateSecondaryConnection();
  else
    result = FigXPCRemoteClientCopyPrimaryConnection();
  if (!(_DWORD)result)
    *a3 = 0;
  return result;
}

uint64_t remoteFormatReader_CreateForURLAndConnection(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t uint64;
  const void *v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  const void *v15;
  xpc_object_t xdict;
  uint64_t v17;

  xdict = 0;
  v17 = 0;
  v15 = 0;
  if (!a2 || !a3 || !a5)
  {
    v8 = FigSignalErrorAt();
LABEL_18:
    v13 = v8;
    v10 = v15;
    goto LABEL_14;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
    goto LABEL_18;
  v8 = FigXPCMessageSetCFURL();
  if ((_DWORD)v8)
    goto LABEL_18;
  v8 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v8)
    goto LABEL_18;
  v8 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  if ((_DWORD)v8)
    goto LABEL_18;
  v8 = CreateRemoteFormatReader(a1, &v15);
  if ((_DWORD)v8)
    goto LABEL_18;
  v8 = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)v8)
    goto LABEL_18;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v10 = v15;
  v11 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v15, uint64, a3);
  if (!(_DWORD)v11)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 48) = 0;
    if (!xpc_dictionary_get_BOOL(xdict, "AllowsPropertyCaching")
      || (v8 = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24)), !(_DWORD)v8))
    {
      v13 = 0;
      *a5 = v10;
      v10 = 0;
      goto LABEL_14;
    }
    goto LABEL_18;
  }
  v13 = v11;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (v10)
    CFRelease(v10);
  return v13;
}

uint64_t FigFormatReaderRemoteWithLoopbackServerCreateForURL(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const void *v8;
  uint64_t started;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef cf;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  cf = 0;
  v23 = 0;
  v19 = xmmword_1E2F90450;
  v20 = *(_OWORD *)&off_1E2F90460;
  v21 = xmmword_1E2F90470;
  v22 = unk_1E2F90480;
  v8 = (const void *)remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient;
  if (remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient)
  {
    v11 = 0;
    v13 = 0;
    goto LABEL_7;
  }
  started = FigFormatReaderServerStartLoopbackServerAndCopyXPCEndpoint();
  if ((_DWORD)started)
  {
    v13 = started;
    v11 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("FormatReader_ServerConnectionDied"));
      v12 = FigXPCRemoteClientCreateWithXPCEndpoint();
    }
    else
    {
      v12 = FigSignalErrorAt();
    }
    v13 = v12;
  }
  v8 = (const void *)remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient;
  if (remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient)
  {
LABEL_7:
    v14 = CFRetain(v8);
    if (!v11)
      goto LABEL_9;
    goto LABEL_8;
  }
  v14 = 0;
  if (v11)
LABEL_8:
    CFRelease(v11);
LABEL_9:
  FigXPCRelease();
  if (!(_DWORD)v13)
  {
    v15 = remoteFormatReaderClient_CopyConnection((uint64_t)v14, 1, &cf);
    v16 = cf;
    if (!(_DWORD)v15)
    {
      if (!FigServer_IsServerProcess()
        || (v15 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), !(_DWORD)v15))
      {
        v15 = remoteFormatReader_CreateForURLAndConnection(a1, a2, v16, a3, a4);
      }
    }
    v13 = v15;
    if (v16)
      CFRelease(v16);
  }
  if (v14)
    CFRelease(v14);
  return v13;
}

uint64_t FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t AllocatorForMedia;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t DerivedStorage;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;

  v15 = 0;
  v16 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
  {
    v4 = FigSignalErrorAt();
    goto LABEL_36;
  }
  v4 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(0, &v15);
  if ((_DWORD)v4)
  {
LABEL_36:
    v5 = v4;
    goto LABEL_28;
  }
  v5 = FigXPCRemoteClientRetainCopiedObject();
  v6 = v16;
  if ((_DWORD)v5)
    goto LABEL_32;
  if (!v16)
  {
    v19 = 0;
    v20 = 0;
    cf = 0;
    v18 = 0;
    v7 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(0, &v19);
    if ((_DWORD)v7
      || (v7 = remoteFormatReaderClient_CopyConnection((uint64_t)v19, 0, &v18), (_DWORD)v7)
      || (v8 = v18, FigServer_IsServerProcess())
      && (v7 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), (_DWORD)v7)
      || (AllocatorForMedia = FigGetAllocatorForMedia(),
          v7 = CreateRemoteFormatReader(AllocatorForMedia, &v20),
          (_DWORD)v7)
      || (v10 = v20, v7 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v20, a1, v8), (_DWORD)v7))
    {
      v5 = v7;
    }
    else
    {
      FigBaseObject = FigFormatReaderGetFigBaseObject(v10);
      v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v12)
      {
        v12(FigBaseObject, CFSTR("CanMutate"), *MEMORY[0x1E0C9AE00], &cf);
        v12 = (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))cf;
      }
      if (v12 == (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))*MEMORY[0x1E0C9AE50]
        || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
            v5 = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24)),
            !(_DWORD)v5))
      {
        v5 = 0;
        v16 = v10;
        v20 = 0;
      }
    }
    if (cf)
      CFRelease(cf);
    if (v20)
      CFRelease(v20);
    if (v19)
      CFRelease(v19);
    if (v18)
      CFRelease(v18);
    v6 = v16;
    if (!(_DWORD)v5)
      goto LABEL_27;
LABEL_32:
    if (v6)
      CFRelease(v6);
    goto LABEL_28;
  }
  v20 = 0;
  FigFormatReaderXPCRemoteGetObjectID((uint64_t)v16, &v20);
  v6 = v16;
LABEL_27:
  v5 = 0;
  *a2 = v6;
  v16 = 0;
LABEL_28:
  if (v15)
    CFRelease(v15);
  return v5;
}

uint64_t FigFormatReaderXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return remoteFormatReader_GetObjectID(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64_t a1, int a2, CFTypeRef *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v14;

  cf = 0;
  v14 = 0;
  v6 = (a2 | FigRemote_ShouldConnectToMediaparserdForFileParsing()) != 0;
  if (!a1 || !a3)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v7 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v6, &cf);
  if ((_DWORD)v7)
  {
LABEL_13:
    v8 = v7;
    goto LABEL_9;
  }
  v8 = FigXPCRemoteClientRetainCopiedObject();
  v9 = v14;
  if (!(_DWORD)v8)
  {
    if (v14)
    {
      v12 = 0;
      FigFormatReaderXPCRemoteGetObjectID((uint64_t)v14, &v12);
LABEL_8:
      v8 = 0;
      *a3 = v14;
      v14 = 0;
      goto LABEL_9;
    }
    v10 = FigFormatReaderXPCRemoteCreateWithObjectID(a1, a2, &v14);
    if (!(_DWORD)v10)
      goto LABEL_8;
    v8 = v10;
    v9 = v14;
  }
  if (v9)
    CFRelease(v9);
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigFormatReaderXPCRemoteCreateWithObjectID(uint64_t a1, int a2, _QWORD *a3)
{
  unsigned int v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t AllocatorForMedia;
  CFTypeRef v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeRef cf;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;

  v17 = 0;
  v18 = 0;
  cf = 0;
  v16 = 0;
  v5 = (a2 | FigRemote_ShouldConnectToMediaparserdForFileParsing()) != 0;
  if (!a1 || !a3)
  {
    v6 = FigSignalErrorAt();
LABEL_24:
    v13 = v6;
    goto LABEL_14;
  }
  v6 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v5, &v17);
  if ((_DWORD)v6)
    goto LABEL_24;
  v6 = remoteFormatReaderClient_CopyConnection((uint64_t)v17, 0, &v16);
  if ((_DWORD)v6)
    goto LABEL_24;
  v7 = v16;
  if (FigServer_IsServerProcess())
  {
    v6 = FigXPCConnectionSetCustomServerTimeoutPerConnection();
    if ((_DWORD)v6)
      goto LABEL_24;
  }
  AllocatorForMedia = FigGetAllocatorForMedia();
  v6 = CreateRemoteFormatReader(AllocatorForMedia, &v18);
  if ((_DWORD)v6)
    goto LABEL_24;
  v9 = v18;
  v6 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v18, a1, v7);
  if ((_DWORD)v6)
    goto LABEL_24;
  FigBaseObject = FigFormatReaderGetFigBaseObject(v9);
  v11 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v11)
  {
    v11(FigBaseObject, CFSTR("CanMutate"), *MEMORY[0x1E0C9AE00], &cf);
    v11 = (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))cf;
  }
  if (v11 == (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))*MEMORY[0x1E0C9AE50]
    || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
        v13 = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24)),
        !(_DWORD)v13))
  {
    v13 = 0;
    *a3 = v9;
    v18 = 0;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v13;
}

uint64_t CreateRemoteFormatReader(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t inited;

  if (remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce != -1)
    dispatch_once(&remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce, &__block_literal_global_26);
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
    return v3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  inited = InitCommonFormatReaderPropertyCacheMutex(DerivedStorage + 24);
  if (!(_DWORD)inited)
    *a2 = 0;
  return inited;
}

uint64_t CommonFormatReaderObjectCompleteObjectSetup(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = a2;
  DerivedStorage[1] = CFRetain(a3);
  return FigXPCConnectionAssociateObject();
}

uint64_t SetupCommonFormatReaderPropertyCache(CFMutableDictionaryRef *a1)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a1 = Mutable;
  if (Mutable)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t remoteFormatReader_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t FigFormatReaderXPCRemoteObtainObjectIDForOtherProcess(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!a1 || !a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v7 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteFormatReader_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  xpc_dictionary_set_int64(0, "OtherProcessPID", a2);
  v7 = FigXPCConnectionSendSyncMessageCreatingReply();
  if (!(_DWORD)v7)
    *a3 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t FigFormatReaderXPCRemoteCopyTrackReaderForObjectIDFromOtherProcess(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  xpc_object_t v8;
  uint64_t uint64;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t ObjectID;
  CFTypeRef v15;
  uint64_t AllocatorForMedia;
  int int64;
  int v18;
  _BOOL4 v19;
  CFTypeRef v21;
  xpc_object_t v22;
  xpc_object_t xdict;
  uint64_t v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf;

  v22 = 0;
  xdict = 0;
  v21 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a2)
  {
    v5 = FigSignalErrorAt();
LABEL_31:
    ObjectID = v5;
    goto LABEL_24;
  }
  v4 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  v5 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v4, &v21);
  if ((_DWORD)v5)
    goto LABEL_31;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
    goto LABEL_31;
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a1);
  v6 = v21;
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v7)
  {
    ObjectID = v7;
    if (!v6)
      goto LABEL_26;
    goto LABEL_25;
  }
  v8 = v22;
  v26 = 0;
  cf = 0;
  v25 = 0;
  uint64 = xpc_dictionary_get_uint64(v22, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_28;
  }
  v10 = uint64;
  v11 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  v12 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v11, &v26);
  if ((_DWORD)v12)
    goto LABEL_28;
  v13 = v26;
  v12 = FigXPCRemoteClientRetainCopiedObject();
  if ((_DWORD)v12)
    goto LABEL_28;
  if (!cf)
  {
    v12 = remoteFormatReaderClient_CopyConnection((uint64_t)v13, 1, &v25);
    if (!(_DWORD)v12)
    {
      AllocatorForMedia = FigGetAllocatorForMedia();
      v12 = CreateRemoteTrackReader(AllocatorForMedia, 0, &cf);
      if (!(_DWORD)v12)
      {
        int64 = xpc_dictionary_get_int64(v8, "TrackID");
        v18 = xpc_dictionary_get_uint64(v8, "MediaType");
        v19 = xpc_dictionary_get_BOOL(v8, "AllowsPropertyCaching");
        v12 = CompleteTrackReaderCopy(v25, (uint64_t *)&cf, v19, v10, int64, v18);
        if (!(_DWORD)v12)
          goto LABEL_17;
      }
    }
LABEL_28:
    ObjectID = v12;
    goto LABEL_11;
  }
  ObjectID = remoteFormatReader_GetObjectID((uint64_t)cf, &v24);
  if ((_DWORD)ObjectID)
  {
LABEL_11:
    if (cf)
      CFRelease(cf);
    v15 = 0;
    goto LABEL_18;
  }
LABEL_17:
  ObjectID = 0;
  v15 = cf;
  cf = 0;
LABEL_18:
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if ((_DWORD)ObjectID)
  {
    if (v15)
      CFRelease(v15);
  }
  else
  {
    *a2 = v15;
  }
LABEL_24:
  v6 = v21;
  if (v21)
LABEL_25:
    CFRelease(v6);
LABEL_26:
  FigXPCRelease();
  FigXPCRelease();
  return ObjectID;
}

uint64_t FigFormatReaderXPCRemoteCopySampleCursorForObjectIDFromOtherProcess(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t ObjectID;
  xpc_object_t v10;
  const char *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t uint64;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t updated;
  uint64_t v20;
  CFTypeRef v21;
  int v22;
  uint64_t DerivedStorage;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t value;
  xpc_object_t v32;
  xpc_object_t xdict;
  CFTypeRef v34;
  CFTypeRef cf;
  __int128 v36;
  CFTypeRef v37[2];
  __int128 v38;
  const void *v39;
  CFTypeRef v40;

  v32 = 0;
  xdict = 0;
  v30 = 0;
  value = 0;
  v29 = 0;
  if (!a3)
  {
    v20 = FigSignalErrorAt();
    goto LABEL_39;
  }
  if (!a4 || !(a1 | a2))
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_41;
  }
  v8 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  ObjectID = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v8, &v29);
  if ((_DWORD)ObjectID)
    goto LABEL_41;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_41;
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a3);
  if (a2)
  {
    ObjectID = remoteFormatReader_GetObjectID(a2, &v30);
    if (!(_DWORD)ObjectID)
    {
      v10 = xdict;
      v11 = "TrackReaderObjectID";
      v12 = v30;
      goto LABEL_11;
    }
LABEL_41:
    v20 = ObjectID;
    goto LABEL_37;
  }
  ObjectID = remoteFormatReader_GetObjectID(a1, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_41;
  v10 = xdict;
  v11 = "FormatReaderObjectID";
  v12 = value;
LABEL_11:
  xpc_dictionary_set_uint64(v10, v11, v12);
  v13 = v29;
  v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v14)
  {
    v20 = v14;
    if (!v13)
      goto LABEL_39;
    goto LABEL_38;
  }
  uint64 = xpc_dictionary_get_uint64(v32, (const char *)*MEMORY[0x1E0CA36A0]);
  v16 = v32;
  v34 = 0;
  cf = 0;
  if (!uint64)
  {
    updated = FigSignalErrorAt();
    goto LABEL_43;
  }
  v17 = uint64;
  v18 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  updated = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v18, &v34);
  if ((_DWORD)updated)
    goto LABEL_43;
  updated = FigXPCRemoteClientRetainCopiedObject();
  if ((_DWORD)updated)
    goto LABEL_43;
  if (!cf)
  {
    v22 = xpc_dictionary_get_uint64(v16, "SampleCursorOptionalMethods");
    v39 = 0;
    v40 = 0;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v24 = *(const void **)(DerivedStorage + 8);
    if (v24)
    {
      v25 = DerivedStorage;
      v26 = *MEMORY[0x1E0C9AE00];
      v27 = FigServerSampleCursorSubscriptionCreate(*MEMORY[0x1E0C9AE00], v24, v17, 0, (uint64_t *)&v39);
      if (!(_DWORD)v27)
      {
        v27 = FigPartialSampleTableOutOfBandObjectRegistryCreate(v26, &v37[1]);
        if (!(_DWORD)v27)
        {
          v20 = CreateRemoteSampleCursor(v26, *(const void **)(v25 + 40), v22, (uint64_t)&v36, v39, 0, 0, &v40);
          if ((_DWORD)v20)
          {
            if (v40)
              CFRelease(v40);
          }
          else
          {
            cf = v40;
          }
LABEL_25:
          if (v39)
            CFRelease(v39);
          if (v37[1])
            CFRelease(v37[1]);
          if ((_DWORD)v20)
            goto LABEL_17;
          updated = remoteSampleCursor_updateSimpleCache((uint64_t)cf, v16);
          if (!(_DWORD)updated)
          {
            updated = remoteSampleCursor_updateUpcomingSamplesCache(cf, v16);
            if (!(_DWORD)updated)
              goto LABEL_32;
          }
LABEL_43:
          v20 = updated;
          goto LABEL_17;
        }
      }
    }
    else
    {
      v27 = FigSignalErrorAt();
    }
    v20 = v27;
    goto LABEL_25;
  }
  v20 = remoteSampleCursor_GetObjectID((uint64_t)cf, &v36);
  if ((_DWORD)v20)
  {
LABEL_17:
    if (cf)
      CFRelease(cf);
    v21 = 0;
    goto LABEL_33;
  }
LABEL_32:
  v20 = 0;
  v21 = cf;
  cf = 0;
LABEL_33:
  if (v34)
    CFRelease(v34);
  if ((_DWORD)v20)
  {
    if (v21)
      CFRelease(v21);
  }
  else
  {
    *a4 = v21;
  }
LABEL_37:
  v13 = v29;
  if (v29)
LABEL_38:
    CFRelease(v13);
LABEL_39:
  FigXPCRelease();
  FigXPCRelease();
  return v20;
}

uint64_t FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromOtherProcess(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t uint64;
  uint64_t v9;
  CFTypeRef cf;
  CFTypeRef v12;
  xpc_object_t v13;
  xpc_object_t xdict;

  v13 = 0;
  xdict = 0;
  cf = 0;
  v12 = 0;
  if (!a1)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!a2)
  {
    v5 = FigSignalErrorAt();
LABEL_13:
    v9 = v5;
    goto LABEL_8;
  }
  v4 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  v5 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v4, &cf);
  if ((_DWORD)v5)
    goto LABEL_13;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
    goto LABEL_13;
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a1);
  v6 = cf;
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v7)
  {
    v9 = v7;
    if (!v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  uint64 = xpc_dictionary_get_uint64(v13, (const char *)*MEMORY[0x1E0CA36A0]);
  v9 = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 0, &v12);
  if ((_DWORD)v9)
  {
    if (v12)
      CFRelease(v12);
  }
  else
  {
    *a2 = v12;
    v12 = 0;
  }
LABEL_8:
  v6 = cf;
  if (cf)
LABEL_9:
    CFRelease(v6);
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v9;
}

uint64_t FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromMediaserverd(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t uint64;
  uint64_t v8;
  CFTypeRef cf;
  CFTypeRef v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  cf = 0;
  v11 = 0;
  if (!a1)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!a2)
  {
    v4 = FigSignalErrorAt();
LABEL_13:
    v8 = v4;
    goto LABEL_8;
  }
  v4 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(0, &cf);
  if ((_DWORD)v4)
    goto LABEL_13;
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
    goto LABEL_13;
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a1);
  v5 = cf;
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v6)
  {
    v8 = v6;
    if (!v5)
      goto LABEL_10;
    goto LABEL_9;
  }
  uint64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E0CA36A0]);
  v8 = FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64, &v11);
  if ((_DWORD)v8)
  {
    if (v11)
      CFRelease(v11);
  }
  else
  {
    *a2 = v11;
    v11 = 0;
  }
LABEL_8:
  v5 = cf;
  if (cf)
LABEL_9:
    CFRelease(v5);
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigFormatReaderXPCRemoteEnsureEfficientIPCFromCurrentThread(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  unsigned int DefaultRemoteClientSelector_PrefersRemote;
  uint64_t v8;
  uint64_t AssociatedEventLink;
  uint64_t v10;
  const void *v12;
  const void *v13;
  const void *v14;

  if (a2)
  {
    v13 = 0;
    v14 = 0;
    v12 = 0;
    if (remoteSampleCursor_useEventLink_onceToken != -1)
      dispatch_once(&remoteSampleCursor_useEventLink_onceToken, &__block_literal_global_40);
    if (!remoteSampleCursor_useEventLink_prefersEventLink)
    {
      v4 = 0;
      goto LABEL_20;
    }
    if (remoteFigSampleCursor_prepareForEventLinkCallsFromConsistentThread_onceToken != -1)
      dispatch_once(&remoteFigSampleCursor_prepareForEventLinkCallsFromConsistentThread_onceToken, &__block_literal_global_121);
    v3 = MEMORY[0x19402F264](gFormatReaderEventLinkKey);
    if (v3)
    {
      v4 = (const void *)v3;
      v5 = 0;
      v6 = 0;
      goto LABEL_15;
    }
    DefaultRemoteClientSelector_PrefersRemote = remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote();
    v8 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(DefaultRemoteClientSelector_PrefersRemote, &v12);
    v5 = v12;
    if ((_DWORD)v8)
    {
      v10 = v8;
      v4 = 0;
    }
    else
    {
      AssociatedEventLink = remoteFormatReaderClient_CopyConnection((uint64_t)v12, 0, &v14);
      v6 = v14;
      if (!(_DWORD)AssociatedEventLink)
      {
        AssociatedEventLink = FigXPCConnectionCreateAssociatedEventLink();
        if (!(_DWORD)AssociatedEventLink)
        {
          AssociatedEventLink = MEMORY[0x19402F2AC](gFormatReaderEventLinkKey, v13);
          if (!(_DWORD)AssociatedEventLink)
          {
            v4 = v13;
LABEL_15:
            v10 = 0;
            v13 = 0;
            if (!v6)
              goto LABEL_17;
            goto LABEL_16;
          }
        }
      }
      v10 = AssociatedEventLink;
      v4 = 0;
      if (v6)
      {
LABEL_16:
        CFRelease(v6);
        v5 = v12;
      }
    }
LABEL_17:
    if (v5)
      CFRelease(v5);
    if ((_DWORD)v10)
    {
      if (v4)
        CFRelease(v4);
      return v10;
    }
LABEL_20:
    v10 = 0;
    *a2 = v4;
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t FigFormatReaderRemoteCreateForStreamReturningResults(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, CFTypeRef *a6, _DWORD *a7, CFTypeRef *a8)
{
  unsigned int DefaultRemoteClientSelector_PrefersRemote;
  uint64_t ServerPID;
  CFTypeRef v16;
  uint64_t uint64;
  CFTypeRef v18;
  uint64_t DerivedStorage;
  int v20;
  uint64_t v21;
  _DWORD *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  unsigned int v27;
  xpc_object_t value;
  CFTypeRef cf;
  CFTypeRef v30;
  CFTypeRef v31;
  xpc_object_t v32;
  xpc_object_t xdict;

  v32 = 0;
  xdict = 0;
  v30 = 0;
  v31 = 0;
  value = 0;
  cf = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (!a1 || !a5)
  {
    ServerPID = FigSignalErrorAt();
LABEL_41:
    v21 = ServerPID;
    goto LABEL_27;
  }
  DefaultRemoteClientSelector_PrefersRemote = remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote();
  ServerPID = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(DefaultRemoteClientSelector_PrefersRemote, &v25);
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = remoteFormatReaderClient_CopyConnection((uint64_t)v25, 1, &v24);
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  v23 = a7;
  v16 = v24;
  if (FigServer_IsServerProcess())
  {
    ServerPID = FigXPCConnectionSetCustomServerTimeoutPerConnection();
    if ((_DWORD)ServerPID)
      goto LABEL_41;
  }
  ServerPID = FigXPCCreateBasicMessage();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = FigXPCRemoteClientGetServerPID();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = FigXPCRemoteClientCopyMemoryOrigin();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = FigByteStreamServerCreateByteStreamDetails((uint64_t)v26, v27, (uint64_t)a1, &value);
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  xpc_dictionary_set_value(xdict, "ByteStreamDetails", value);
  ServerPID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = CreateRemoteFormatReader(a3, &v31);
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  ServerPID = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  uint64 = xpc_dictionary_get_uint64(v32, (const char *)*MEMORY[0x1E0CA36A0]);
  v18 = v31;
  ServerPID = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v31, uint64, v16);
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (xpc_dictionary_get_BOOL(v32, "AllowsPropertyCaching"))
  {
    ServerPID = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24));
    if ((_DWORD)ServerPID)
      goto LABEL_41;
  }
  ServerPID = FigXPCMessageCopyCFObject();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  v20 = xpc_dictionary_get_uint64(v32, "ContainerLabelType");
  ServerPID = FigXPCMessageCopyCFArray();
  if ((_DWORD)ServerPID)
    goto LABEL_41;
  if (a8)
  {
    *a8 = cf;
    cf = 0;
  }
  if (a6)
  {
    *a6 = v30;
    v30 = 0;
  }
  if (v23)
    *v23 = v20;
  v21 = 0;
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a1);
  *a5 = v18;
  v31 = 0;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  if (v25)
    CFRelease(v25);
  if (v24)
    CFRelease(v24);
  if (v31)
    CFRelease(v31);
  if (v26)
    CFRelease(v26);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v21;
}

uint64_t remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote()
{
  uint64_t result;

  if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
    return 1;
  result = FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t FigSampleCursorXPCRemoteGetObjectID(const void *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32))
    return remoteSampleCursor_GetObjectID((uint64_t)a1, a2);
  result = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0, 0, 0);
  if (!(_DWORD)result)
    return remoteSampleCursor_GetObjectID((uint64_t)a1, a2);
  return result;
}

uint64_t remoteSampleCursor_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!v3 || *(_BYTE *)(v3 + 24))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(v3 + 16);
  return 0;
}

void CommonFormatReaderObjectDeadConnectionCallback(char *cf)
{
  CFTypeID v2;
  _BYTE *v3;

  if (!cf)
    goto LABEL_6;
  v2 = CFGetTypeID(cf);
  if (FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce != -1)
    dispatch_once_f(&FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce, 0, (dispatch_function_t)registerFigServerSampleCursorSubscriptionType);
  if (v2 == sFigServerSampleCursorSubscriptionID)
    v3 = cf + 24;
  else
LABEL_6:
    v3 = (_BYTE *)(CMBaseObjectGetDerivedStorage() + 16);
  *v3 = 1;
}

uint64_t CommonFormatReaderObjectNotificationFilter(const void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  CFTypeID v8;
  uint64_t DerivedStorage;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  CFMutableDictionaryRef *v15;
  const void *ValueAtIndex;
  CFTypeID v17;
  uint64_t v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex v23;
  int v24;
  uint64_t v25;
  CFMutableDictionaryRef *v26;
  const void *v27;
  int v28;
  __CFString **v29;
  int v30;
  int v31;
  __CFString *v32;
  __CFDictionary *MutableCopy;
  __CFDictionary **v34;
  __CFDictionary *v36;
  const __CFArray *v37;
  __CFDictionary **v38;
  void *value;
  __CFDictionary *cf;

  if (a1)
  {
    v8 = CFGetTypeID(a1);
    if (v8 == FigFormatReaderGetTypeID())
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (FigCFEqual())
      {
        v10 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (v10)
        {
          v11 = v10;
          Count = CFArrayGetCount(v10);
          if (Count >= 1)
          {
            v13 = Count;
            v14 = 0;
            v15 = (CFMutableDictionaryRef *)(DerivedStorage + 24);
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
              CommonFormatReaderObjectRemovePropertyFromCache(v15, ValueAtIndex);
              ++v14;
            }
            while (v13 != v14);
          }
          CFRelease(v11);
        }
      }
      else if (FigCFEqual())
      {
        CommonFormatReaderObjectRemovePropertyFromCache((CFMutableDictionaryRef *)(DerivedStorage + 24), CFSTR("Cache_Tracks"));
      }
      return 0;
    }
    v17 = CFGetTypeID(a1);
    if (v17 == FigTrackReaderGetTypeID())
    {
      v18 = CMBaseObjectGetDerivedStorage();
      if (FigCFEqual())
      {
        v19 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (v19)
        {
          v20 = v19;
          v21 = CFArrayGetCount(v19);
          if (v21 < 1)
          {
            v25 = 0;
          }
          else
          {
            v22 = v21;
            v38 = a5;
            v23 = 0;
            cf = 0;
            v24 = 0;
            v25 = 0;
            v26 = (CFMutableDictionaryRef *)(v18 + 40);
            value = (void *)*MEMORY[0x1E0C9AE50];
            do
            {
              v27 = CFArrayGetValueAtIndex(v20, v23);
              CommonFormatReaderObjectRemovePropertyFromCache(v26, v27);
              v28 = CFEqual(v27, CFSTR("ISOUserDataReader"));
              v29 = kFigTrackProperty_ISOUserDataArray;
              if (v28
                || (v30 = CFEqual(v27, CFSTR("QuickTimeMetadataReader")),
                    v29 = kFigTrackProperty_QuickTimeMetadataArray,
                    v30)
                || (v31 = CFEqual(v27, CFSTR("QuickTimeUserDataReader")),
                    v29 = kFigTrackProperty_QuickTimeUserDataArray,
                    v31))
              {
                v32 = *v29;
                if (*v29 && !CFDictionaryContainsKey(a4, *v29))
                {
                  CommonFormatReaderObjectRemovePropertyFromCache(v26, v32);
                  MutableCopy = cf;
                  if (!cf)
                  {
                    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                    v25 = 4;
                  }
                  cf = MutableCopy;
                  CFDictionarySetValue(MutableCopy, v32, value);
                }
                v24 = 1;
              }
              ++v23;
            }
            while (v22 != v23);
            if (v24 && !CFDictionaryContainsKey(a4, CFSTR("CommonMetadataArray")))
            {
              CommonFormatReaderObjectRemovePropertyFromCache(v26, CFSTR("CommonMetadataArray"));
              v34 = v38;
              v36 = cf;
              if (!cf)
              {
                v36 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                v25 = 4;
              }
              cf = v36;
              CFDictionarySetValue(v36, CFSTR("CommonMetadataArray"), value);
            }
            else
            {
              v34 = v38;
            }
            if ((_DWORD)v25 != 4)
            {
              CFRelease(v20);
              v37 = cf;
              if (!cf)
                return v25;
LABEL_39:
              CFRelease(v37);
              return v25;
            }
            *v34 = cf;
          }
          v37 = v20;
          goto LABEL_39;
        }
      }
    }
  }
  return 0;
}

void remoteFormatReaderClient_PlaybackServerDeadServerConnectionCallback()
{
  MEMORY[0x19402EEEC](qword_1ECDC85A8);
  byte_1ECDC85B0 = 0;
  JUMPOUT(0x19402EF04);
}

void remoteFormatReaderClient_MediaParserDeadServerConnectionCallback()
{
  MEMORY[0x19402EEEC](qword_1ECDC85D0);
  byte_1ECDC85D8 = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t registerFigServerSampleCursorSubscriptionType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigServerSampleCursorSubscriptionID = result;
  return result;
}

double FigServerSampleCursorSubscription_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigServerSampleCursorSubscription_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

__CFString *FigServerSampleCursorSubscription_CopyFormattingDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  const char *v5;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  v5 = "-DEAD";
  if (!*(_BYTE *)(a1 + 24))
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("[%016llx]@%d%s"), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 40), v5);
  return v4;
}

__CFString *FigServerSampleCursorSubscription_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigServerSampleCursorSubscription %p - %@>"), a1, a1);
  return Mutable;
}

CFMutableDictionaryRef *CommonFormatReaderObjectRemovePropertyFromCache(CFMutableDictionaryRef *result, const void *a2)
{
  CFMutableDictionaryRef *v3;

  if (*result)
  {
    v3 = result;
    MEMORY[0x19402EEEC](result[1]);
    CFDictionaryRemoveValue(*v3, a2);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t InitCommonFormatReaderPropertyCacheMutex(uint64_t a1)
{
  uint64_t v2;

  v2 = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t remoteFormatReader_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
    CFRelease(v1);
  TeardownCommonFormatReaderPropertyCache(DerivedStorage + 24);
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendAsyncMessage();
  }
  v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
  return FigXPCRelease();
}

__CFString *remoteFormatReader_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v5 = " SERVER DIED";
  else
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReaderRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v4, *(_QWORD *)DerivedStorage, v5);
  return Mutable;
}

uint64_t remoteFormatReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t ObjectID;
  CFMutableDictionaryRef *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t uint64;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  xpc_object_t xdict;
  uint64_t v23;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v9 = DerivedStorage;
    *a4 = 0;
    ObjectID = remoteFormatReader_GetObjectID(a1, &v20);
    if ((_DWORD)ObjectID)
      return ObjectID;
    v11 = (CFMutableDictionaryRef *)(v9 + 24);
    if (CommonFormatReaderObjectTryCopyPropertyFromCache((uint64_t)v11, a2, a4))
      return 0;
    if (!CFEqual(a2, CFSTR("QuickTimeUserDataReader"))
      && !CFEqual(a2, CFSTR("ISOUserDataReader"))
      && !CFEqual(a2, CFSTR("FormatSpecificMetadataReader"))
      && !CFEqual(a2, CFSTR("QuickTimeMetadataReader"))
      && !CFEqual(a2, CFSTR("iTunesMetadataReader"))
      && !CFEqual(a2, CFSTR("ID3MetadataReader"))
      && !CFEqual(a2, CFSTR("MetadataReader")))
    {
      if (CFEqual(a2, CFSTR("MetadataReaders")))
        v19 = SendFormatReaderCopyMetadataReadersMessage(a1, v20, a3, a4);
      else
        v19 = SendFormatReaderCopyPropertyMessage();
      v12 = v19;
      if ((_DWORD)v19)
        return v12;
LABEL_23:
      CommonFormatReaderObjectStorePropertyInCache(v11, a2, *a4);
      return v12;
    }
    xdict = 0;
    v23 = 0;
    v21 = 0;
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = FigXPCCreateBasicMessage();
    if ((_DWORD)v14)
    {
      v12 = v14;
    }
    else
    {
      v15 = FigXPCMessageSetCFString();
      if ((_DWORD)v15
        || (v15 = CreateRemoteMetadataReader((uint64_t)a3, &v21), (_DWORD)v15)
        || (v15 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v15))
      {
        v12 = v15;
        v17 = v21;
LABEL_20:
        FigXPCRelease();
        FigXPCRelease();
        if (v17)
          CFRelease(v17);
        FigXPCConnectionKillServerOnTimeout();
        if ((_DWORD)v12)
          return v12;
        goto LABEL_23;
      }
      uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
      v17 = v21;
      v12 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v21, uint64, *(const void **)(v13 + 8));
      if ((_DWORD)v12)
        goto LABEL_20;
      *a4 = (__CFArray *)v17;
    }
    v17 = 0;
    goto LABEL_20;
  }
  return FigSignalErrorAt();
}

uint64_t TeardownCommonFormatReaderPropertyCache(uint64_t a1)
{
  const void *v2;
  uint64_t result;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t CommonFormatReaderObjectTryCopyPropertyFromCache(uint64_t a1, const void *a2, _QWORD *a3)
{
  const void *Value;
  CFTypeRef v7;
  uint64_t v8;

  if (!*(_QWORD *)a1)
    return 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, a2))
  {
    if (a3)
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
      v7 = 0;
      if (Value && Value != (const void *)*MEMORY[0x1E0C9B0D0])
        v7 = CFRetain(Value);
      *a3 = v7;
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  return v8;
}

uint64_t SendFormatReaderCopyMetadataReadersMessage(uint64_t a1, uint64_t a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  xpc_object_t value;
  void *v9;
  size_t count;
  uint64_t v11;
  __CFArray *Mutable;
  size_t v13;
  uint64_t uint64;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  const void *v19;
  xpc_object_t xdict;
  uint64_t v21;

  xdict = 0;
  v21 = 0;
  v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7 || (v7 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v7))
  {
    v17 = v7;
    v16 = 0;
    goto LABEL_16;
  }
  value = xpc_dictionary_get_value(xdict, "ObjectIDArray");
  if (!value)
  {
    Mutable = 0;
LABEL_15:
    v16 = 0;
    v17 = 0;
    *a4 = Mutable;
LABEL_16:
    Mutable = 0;
    goto LABEL_17;
  }
  v9 = value;
  count = xpc_array_get_count(value);
  if (!count)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_16;
  }
  v11 = count;
  Mutable = CFArrayCreateMutable(a3, count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v17 = FigSignalErrorAt();
    v16 = 0;
    goto LABEL_17;
  }
  if (v11 < 1)
    goto LABEL_15;
  v13 = 0;
  while (1)
  {
    uint64 = xpc_array_get_uint64(v9, v13);
    v15 = CreateRemoteMetadataReader((uint64_t)a3, &v19);
    v16 = v19;
    if ((_DWORD)v15)
      break;
    v15 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v19, uint64, *(const void **)(DerivedStorage + 8));
    if ((_DWORD)v15)
      break;
    CFArrayAppendValue(Mutable, v16);
    if (v16)
    {
      CFRelease(v16);
      v19 = 0;
    }
    if (v11 == ++v13)
      goto LABEL_15;
  }
  v17 = v15;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (v16)
    CFRelease(v16);
  if (Mutable)
    CFRelease(Mutable);
  FigXPCConnectionKillServerOnTimeout();
  return v17;
}

uint64_t SendFormatReaderCopyPropertyMessage()
{
  uint64_t v0;
  uint64_t v1;

  CMBaseObjectGetDerivedStorage();
  v0 = FigXPCCreateBasicMessage();
  if ((_DWORD)v0 || (v0 = FigXPCMessageSetCFString(), (_DWORD)v0))
  {
    v1 = v0;
  }
  else
  {
    v1 = FigXPCConnectionSendSyncMessageCreatingReply();
    if (!(_DWORD)v1)
      v1 = FigXPCMessageCopyCFObject();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v1;
}

CFMutableDictionaryRef *CommonFormatReaderObjectStorePropertyInCache(CFMutableDictionaryRef *result, const void *a2, const void *a3)
{
  CFMutableDictionaryRef *v4;
  const void *v5;

  if (*result)
  {
    v4 = result;
    if (a3)
      v5 = a3;
    else
      v5 = (const void *)*MEMORY[0x1E0C9B0D0];
    MEMORY[0x19402EEEC](result[1]);
    CFDictionarySetValue(*v4, a2, v5);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t CreateRemoteMetadataReader(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  FigMetadataReaderGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
    *a2 = 0;
  return v3;
}

uint64_t remoteMetadataReader_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendAsyncMessage();
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  return FigXPCRelease();
}

__CFString *remoteMetadataReader_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;
  const char *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v7 = " SERVER DIED";
  else
    v7 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigMetadataReaderRemote(XPC) %p retainCount: %ld allocator: %p ObjectID:%016llx%s>"), a1, v5, v6, *(_QWORD *)DerivedStorage, v7);
  return Mutable;
}

uint64_t remoteMetadataReader_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v8 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteFormatReader_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  CMBaseObjectGetDerivedStorage();
  v8 = FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply();
  if (!(_DWORD)v8)
    v8 = FigXPCMessageCopyCFObject();
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v8;
}

uint64_t remoteMetadataReader_CopyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t ObjectID;
  const void *data;
  uint64_t v14;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  xpc_object_t v19;
  xpc_object_t xdict;
  uint64_t v21;

  xdict = 0;
  v21 = 0;
  cf = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!((unint64_t)a6 | (unint64_t)a7))
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_20;
  }
  ObjectID = remoteFormatReader_GetObjectID(a1, &v21);
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  xpc_dictionary_set_uint64(xdict, "MetadataValueType", a4);
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  ObjectID = FigXPCMessageSetCFObject();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  xpc_dictionary_set_BOOL(xdict, "MetadataPropertiesDesired", a7 != 0);
  xpc_dictionary_set_BOOL(xdict, "MetadataValueDesired", a6 != 0);
  CMBaseObjectGetDerivedStorage();
  ObjectID = FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  if (!a6)
    goto LABEL_10;
  ObjectID = FigXPCMessageCopyCFObject();
  if ((_DWORD)ObjectID)
  {
LABEL_20:
    v14 = ObjectID;
    goto LABEL_14;
  }
  *a6 = cf;
  cf = 0;
LABEL_10:
  if (a7)
  {
    data = xpc_dictionary_get_data(v19, "MetadataProperties", (size_t *)&v16);
    v14 = FigRemote_CreateMetadataPropertiesFromBinaryPListData((uint64_t)data, v16, a5, &v17);
    if (!(_DWORD)v14)
    {
      *a7 = v17;
      v17 = 0;
    }
  }
  else
  {
    v14 = 0;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v14;
}

int64_t remoteMetadataReader_GetItemCount(uint64_t a1)
{
  int64_t int64;
  uint64_t v4;

  v4 = 0;
  CMBaseObjectGetDerivedStorage();
  if (remoteFormatReader_GetObjectID(a1, &v4)
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFString()
    || FigXPCMessageSetCFObject()
    || (CMBaseObjectGetDerivedStorage(), FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply()))
  {
    int64 = 0;
  }
  else
  {
    int64 = xpc_dictionary_get_int64(0, "MetadataItemCount");
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return int64;
}

uint64_t remoteMetadataReader_CopyItemWithKeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, const __CFAllocator *a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t ObjectID;
  const void *data;
  uint64_t v14;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  xpc_object_t v19;
  xpc_object_t xdict;
  uint64_t v21;

  xdict = 0;
  v21 = 0;
  cf = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!((unint64_t)a6 | (unint64_t)a7))
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_20;
  }
  ObjectID = remoteFormatReader_GetObjectID(a1, &v21);
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  xpc_dictionary_set_int64(xdict, "MetadataItemIndex", a4);
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  ObjectID = FigXPCMessageSetCFObject();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  xpc_dictionary_set_BOOL(xdict, "MetadataPropertiesDesired", a7 != 0);
  xpc_dictionary_set_BOOL(xdict, "MetadataValueDesired", a6 != 0);
  CMBaseObjectGetDerivedStorage();
  ObjectID = FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  if (!a6)
    goto LABEL_10;
  ObjectID = FigXPCMessageCopyCFObject();
  if ((_DWORD)ObjectID)
  {
LABEL_20:
    v14 = ObjectID;
    goto LABEL_14;
  }
  *a6 = cf;
  cf = 0;
LABEL_10:
  if (a7)
  {
    data = xpc_dictionary_get_data(v19, "MetadataProperties", (size_t *)&v16);
    v14 = FigRemote_CreateMetadataPropertiesFromBinaryPListData((uint64_t)data, v16, a5, &v17);
    if (!(_DWORD)v14)
    {
      *a7 = v17;
      v17 = 0;
    }
  }
  else
  {
    v14 = 0;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v14;
}

uint64_t remoteFormatReader_GetTrackCount(uint64_t a1, CFIndex *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  uint64_t ObjectID;
  uint64_t v7;
  CFArrayRef theArray;
  uint64_t v10;
  xpc_object_t xdict;
  uint64_t v12;

  xdict = 0;
  v12 = 0;
  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!a2)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (CommonFormatReaderObjectTryCopyPropertyFromCache(DerivedStorage + 24, CFSTR("Cache_Tracks"), &theArray))
  {
    Count = (CFIndex)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    goto LABEL_9;
  }
  ObjectID = remoteFormatReader_GetObjectID(a1, &v10);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
      {
        Count = xpc_dictionary_get_int64(xdict, "TrackCount");
LABEL_9:
        v7 = 0;
        *a2 = Count;
        goto LABEL_10;
      }
    }
  }
  v7 = ObjectID;
LABEL_10:
  if (theArray)
    CFRelease(theArray);
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v7;
}

uint64_t remoteFormatReader_CopyTrackByIndex(const void *a1, int64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  const void *ValueAtIndex;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DerivedStorage;
  CFTypeRef v16;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    v13 = remoteFormatReader_copyTrackByIndexFromServer(a1, a2, &cf);
    if ((_DWORD)v13)
    {
      v14 = v13;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  theArray = 0;
  v10 = remoteFormatReader_ensureAndCopyCachedTrackArray(a1, &theArray);
  if ((_DWORD)v10)
  {
    v14 = v10;
  }
  else if (CFArrayGetCount(theArray) <= a2)
  {
    v14 = 4294954453;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, a2);
    if (ValueAtIndex)
      v12 = CFRetain(ValueAtIndex);
    else
      v12 = 0;
    v14 = 0;
    cf = v12;
  }
  if (theArray)
    CFRelease(theArray);
  if (!(_DWORD)v14)
  {
LABEL_13:
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
    {
      v16 = cf;
      if (cf)
        v16 = CFRetain(cf);
      *a3 = v16;
    }
    if (a4)
      *a4 = *(_DWORD *)(DerivedStorage + 28);
    v14 = 0;
    if (a5)
      *a5 = *(_DWORD *)(DerivedStorage + 24);
  }
LABEL_21:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t remoteFormatReader_CopyTrackByID(const void *a1, int a2, CFTypeRef *a3, int *a4)
{
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v16;
  CFAllocatorRef v17;
  int uint64;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const void *ValueAtIndex;
  CFTypeRef cf;
  uint64_t v26;
  xpc_object_t xdict;
  CFArrayRef theArray;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    xdict = 0;
    theArray = 0;
    cf = 0;
    v26 = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v26);
    if ((_DWORD)ObjectID)
    {
      v13 = ObjectID;
LABEL_20:
      FigXPCRelease();
      FigXPCRelease();
      FigXPCConnectionKillServerOnTimeout();
      return v13;
    }
    v16 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v16)
    {
      xpc_dictionary_set_int64(theArray, "TrackID", a2);
      if (!a3
        || (xpc_dictionary_set_BOOL(theArray, "TrackReaderDesired", 1),
            v17 = CFGetAllocator(a1),
            v16 = CreateRemoteTrackReader((uint64_t)v17, *(const void **)(DerivedStorage + 40), &cf),
            !(_DWORD)v16))
      {
        v16 = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!(_DWORD)v16)
        {
          uint64 = xpc_dictionary_get_uint64(xdict, "MediaType");
          v19 = xpc_dictionary_get_BOOL(xdict, "AllowsPropertyCaching");
          if (!a3)
            goto LABEL_16;
          v20 = v19;
          v21 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
          v16 = CompleteTrackReaderCopy(*(const void **)(DerivedStorage + 8), (uint64_t *)&cf, v20, v21, a2, uint64);
          if (!(_DWORD)v16)
          {
            *a3 = cf;
            cf = 0;
LABEL_16:
            v13 = 0;
            if (a4)
              *a4 = uint64;
            goto LABEL_18;
          }
        }
      }
    }
    v13 = v16;
LABEL_18:
    if (cf)
      CFRelease(cf);
    goto LABEL_20;
  }
  theArray = 0;
  v8 = remoteFormatReader_ensureAndCopyCachedTrackArray(a1, &theArray);
  if ((_DWORD)v8)
  {
    v13 = v8;
  }
  else
  {
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
LABEL_7:
      v13 = 4294954453;
    }
    else
    {
      v10 = Count;
      v11 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(theArray, v11);
        v12 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v12 + 24) == a2)
          break;
        if (v10 == ++v11)
          goto LABEL_7;
      }
      v22 = v12;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
      if (a3)
      {
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
        *a3 = ValueAtIndex;
      }
      v13 = 0;
      if (a4)
        *a4 = *(_DWORD *)(v22 + 28);
    }
  }
  if (theArray)
    CFRelease(theArray);
  return v13;
}

uint64_t remoteFormatReader_CopyTrackByType(const void *a1, int64_t a2, unsigned int a3, CFTypeRef *a4, int *a5)
{
  uint64_t v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v20;
  CFAllocatorRef v21;
  int int64;
  _BOOL4 v23;
  int v24;
  uint64_t uint64;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef cf;
  uint64_t v30;
  xpc_object_t xdict;
  CFArrayRef theArray;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    xdict = 0;
    theArray = 0;
    cf = 0;
    v30 = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v30);
    if ((_DWORD)ObjectID)
    {
      v17 = ObjectID;
LABEL_24:
      FigXPCRelease();
      FigXPCRelease();
      FigXPCConnectionKillServerOnTimeout();
      return v17;
    }
    v20 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v20)
    {
      xpc_dictionary_set_int64(theArray, "TrackIndex", a2);
      xpc_dictionary_set_uint64(theArray, "MediaType", a3);
      if (!a4
        || (xpc_dictionary_set_BOOL(theArray, "TrackReaderDesired", 1),
            v21 = CFGetAllocator(a1),
            v20 = CreateRemoteTrackReader((uint64_t)v21, *(const void **)(DerivedStorage + 40), &cf),
            !(_DWORD)v20))
      {
        v20 = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!(_DWORD)v20)
        {
          int64 = xpc_dictionary_get_int64(xdict, "TrackID");
          v23 = xpc_dictionary_get_BOOL(xdict, "AllowsPropertyCaching");
          if (!a4)
            goto LABEL_20;
          v24 = v23;
          uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
          v20 = CompleteTrackReaderCopy(*(const void **)(DerivedStorage + 8), (uint64_t *)&cf, v24, uint64, int64, a3);
          if (!(_DWORD)v20)
          {
            *a4 = cf;
            cf = 0;
LABEL_20:
            v17 = 0;
            if (a5)
              *a5 = int64;
            goto LABEL_22;
          }
        }
      }
    }
    v17 = v20;
LABEL_22:
    if (cf)
      CFRelease(cf);
    goto LABEL_24;
  }
  theArray = 0;
  v10 = remoteFormatReader_ensureAndCopyCachedTrackArray(a1, &theArray);
  if ((_DWORD)v10)
  {
    v17 = v10;
    goto LABEL_10;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_9:
    v17 = 4294954453;
    goto LABEL_10;
  }
  v12 = Count;
  v13 = 0;
  v14 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
    v16 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v16 + 28) == a3)
      break;
LABEL_8:
    if (v12 == ++v13)
      goto LABEL_9;
  }
  if (v14 != a2)
  {
    ++v14;
    goto LABEL_8;
  }
  v27 = v16;
  if (a4)
  {
    if (ValueAtIndex)
      v28 = CFRetain(ValueAtIndex);
    else
      v28 = 0;
    *a4 = v28;
  }
  v17 = 0;
  if (a5)
    *a5 = *(_DWORD *)(v27 + 24);
LABEL_10:
  if (theArray)
    CFRelease(theArray);
  return v17;
}

uint64_t remoteFormatReader_EstablishCombinedDataRateProfileForTracks(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t ObjectID;
  const void *data;
  uint64_t v9;
  size_t length;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t xdict;
  char __dst[8];

  v13 = 0;
  xdict = 0;
  length = 0;
  v12 = 0;
  CMBaseObjectGetDerivedStorage();
  ObjectID = remoteFormatReader_GetObjectID(a1, &v12);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCMessageSetCFArray();
      if (!(_DWORD)ObjectID)
      {
        xpc_dictionary_set_uint64(xdict, "ProfileBucketCount", a4);
        ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          data = xpc_dictionary_get_data(v13, "DataRateProfile", &length);
          if (data && length == 8 * a4)
          {
            memcpy(a3, data, length);
            if (*MEMORY[0x1E0CA1FC0] == 1)
            {
              strncpy(__dst, "DataRateProfile", 8uLL);
              kdebug_trace();
            }
            ObjectID = FigXPCMessageGetCMTime();
          }
          else
          {
            ObjectID = FigSignalErrorAt();
          }
        }
      }
    }
  }
  v9 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v9;
}

uint64_t remoteFormatReader_CopyFormatReaderWithSecondaryConnection(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned int DefaultRemoteClientSelector_PrefersRemote;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t uint64;
  CFAllocatorRef v11;
  CFTypeRef v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef cf;
  const void *v18;
  CFTypeRef v19;
  xpc_object_t xdict;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  xdict = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 16))
  {
    v15 = FigSignalErrorAt();
  }
  else
  {
    v5 = DerivedStorage;
    DefaultRemoteClientSelector_PrefersRemote = remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote();
    v7 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(DefaultRemoteClientSelector_PrefersRemote, &v18);
    v8 = v18;
    if ((_DWORD)v7)
      goto LABEL_17;
    v7 = remoteFormatReaderClient_CopyConnection((uint64_t)v18, 1, &cf);
    if ((_DWORD)v7)
      goto LABEL_17;
    v7 = FigXPCCreateBasicMessage();
    if ((_DWORD)v7
      || (v9 = cf, v7 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v7)
      || (uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]),
          v11 = CFGetAllocator(a1),
          v7 = CreateRemoteFormatReader((uint64_t)v11, &v19),
          (_DWORD)v7)
      || (v12 = v19, v7 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v19, uint64, v9), (_DWORD)v7))
    {
LABEL_17:
      v15 = v7;
      if (v8)
LABEL_11:
        CFRelease(v8);
    }
    else
    {
      v13 = CMBaseObjectGetDerivedStorage();
      v14 = *(CFTypeRef *)(v5 + 40);
      if (v14)
        v14 = CFRetain(v14);
      v15 = 0;
      *(_QWORD *)(v13 + 40) = v14;
      *a2 = v12;
      v19 = 0;
      if (v8)
        goto LABEL_11;
    }
  }
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  FigXPCRelease();
  if (v19)
    CFRelease(v19);
  return v15;
}

uint64_t remoteFormatReader_copyTrackByIndexFromServer(const void *a1, int64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v8;
  CFAllocatorRef v9;
  int int64;
  int uint64;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t xdict;

  v19 = 0;
  xdict = 0;
  cf = 0;
  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v18);
  if ((_DWORD)ObjectID)
  {
    v15 = ObjectID;
    goto LABEL_12;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8
    || (xpc_dictionary_set_int64(xdict, "TrackIndex", a2), a3)
    && (xpc_dictionary_set_BOOL(xdict, "TrackReaderDesired", 1),
        v9 = CFGetAllocator(a1),
        v8 = CreateRemoteTrackReader((uint64_t)v9, *(const void **)(DerivedStorage + 40), &cf),
        (_DWORD)v8)
    || (v8 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v8))
  {
    v15 = v8;
  }
  else
  {
    int64 = xpc_dictionary_get_int64(v19, "TrackID");
    uint64 = xpc_dictionary_get_uint64(v19, "MediaType");
    v12 = xpc_dictionary_get_BOOL(v19, "AllowsPropertyCaching");
    if (a3)
    {
      v13 = v12;
      v14 = xpc_dictionary_get_uint64(v19, (const char *)*MEMORY[0x1E0CA36A0]);
      v15 = CompleteTrackReaderCopy(*(const void **)(DerivedStorage + 8), (uint64_t *)&cf, v13, v14, int64, uint64);
      if (!(_DWORD)v15)
      {
        *a3 = cf;
        goto LABEL_12;
      }
    }
    else
    {
      v15 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v15;
}

uint64_t remoteFormatReader_ensureAndCopyCachedTrackArray(const void *a1, __CFArray **a2)
{
  CFMutableDictionaryRef *v4;
  uint64_t (*v5)(const void *, CFIndex *);
  uint64_t v6;
  __CFArray *Mutable;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *value;
  CFIndex capacity;

  capacity = 0;
  v4 = (CFMutableDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 24);
  if (CommonFormatReaderObjectTryCopyPropertyFromCache((uint64_t)v4, CFSTR("Cache_Tracks"), a2))
    return 0;
  v5 = *(uint64_t (**)(const void *, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
    return 4294954514;
  v6 = v5(a1, &capacity);
  if ((_DWORD)v6)
    return v6;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B378]);
  if (capacity >= 1)
  {
    v8 = 0;
    while (1)
    {
      value = 0;
      v9 = remoteFormatReader_copyTrackByIndexFromServer(a1, v8, (CFTypeRef *)&value);
      if ((_DWORD)v9)
        break;
      CFArrayAppendValue(Mutable, value);
      if (value)
        CFRelease(value);
      if (++v8 >= capacity)
        goto LABEL_10;
    }
    v10 = v9;
    if (!Mutable)
      return v10;
LABEL_12:
    CFRelease(Mutable);
    return v10;
  }
LABEL_10:
  CommonFormatReaderObjectStorePropertyInCache(v4, CFSTR("Cache_Tracks"), Mutable);
  v10 = 0;
  if (a2)
  {
    *a2 = Mutable;
    return v10;
  }
  if (Mutable)
    goto LABEL_12;
  return v10;
}

uint64_t CreateRemoteTrackReader(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  uint64_t inited;

  if (remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce != -1)
    dispatch_once(&remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce, &__block_literal_global_4);
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)(DerivedStorage + 32) = v8;
  v6 = FigPartialSampleTableOutOfBandObjectRegistryCreate(a1, (_QWORD *)(DerivedStorage + 56));
  if ((_DWORD)v6)
    return v6;
  inited = InitCommonFormatReaderPropertyCacheMutex(DerivedStorage + 40);
  if (!(_DWORD)inited)
    *a3 = 0;
  return inited;
}

uint64_t CompleteTrackReaderCopy(const void *a1, uint64_t *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t DerivedStorage;

  v12 = *a2;
  result = FigXPCConnectionRetainCopiedObject();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 24) = a5;
    *(_DWORD *)(DerivedStorage + 28) = a6;
    if (!a3
      || (result = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 40)), !(_DWORD)result))
    {
      result = CommonFormatReaderObjectCompleteObjectSetup(v12, a4, a1);
      if (!(_DWORD)result)
      {
        result = 0;
        *a2 = v12;
      }
    }
  }
  return result;
}

uint64_t remoteTrackReader_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 56);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
    CFRelease(v2);
  TeardownCommonFormatReaderPropertyCache(DerivedStorage + 40);
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendAsyncMessage();
  }
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
  return FigXPCRelease();
}

__CFString *remoteTrackReader_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v5 = " SERVER DIED";
  else
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigTrackReaderRemote(XPC) %p retainCount: %ld trackID %d mediaType %c%c%c%c ObjectID: %016llx%s>"), a1, v4, *(unsigned int *)(DerivedStorage + 24), HIBYTE(*(_DWORD *)(DerivedStorage + 28)), BYTE2(*(_DWORD *)(DerivedStorage + 28)), BYTE1(*(_DWORD *)(DerivedStorage + 28)), *(_DWORD *)(DerivedStorage + 28), *(_QWORD *)DerivedStorage, v5);
  return Mutable;
}

uint64_t remoteTrackReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t ObjectID;
  CFMutableDictionaryRef *v11;
  uint64_t CursorServiceMessage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t uint64;
  void *v17;
  uint64_t MetadataItemArrayFromBinaryPListData;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef cf;
  uint64_t v24;
  void *v25;
  xpc_object_t xdict;
  uint64_t v27;

  cf = 0;
  v24 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_37;
  }
  v9 = DerivedStorage;
  *a4 = 0;
  ObjectID = remoteFormatReader_GetObjectID(a1, &v24);
  if ((_DWORD)ObjectID)
  {
LABEL_37:
    CursorServiceMessage = ObjectID;
    goto LABEL_20;
  }
  v11 = (CFMutableDictionaryRef *)(v9 + 40);
  if (!CommonFormatReaderObjectTryCopyPropertyFromCache((uint64_t)v11, a2, a4))
  {
    if (CFEqual(a2, CFSTR("QuickTimeUserDataReader"))
      || CFEqual(a2, CFSTR("ISOUserDataReader"))
      || CFEqual(a2, CFSTR("QuickTimeMetadataReader")))
    {
      xdict = 0;
      v27 = 0;
      v25 = 0;
      v13 = CMBaseObjectGetDerivedStorage();
      v14 = FigXPCCreateBasicMessage();
      if ((_DWORD)v14)
      {
        CursorServiceMessage = v14;
      }
      else
      {
        v15 = FigXPCMessageSetCFString();
        if ((_DWORD)v15
          || (v15 = CreateRemoteMetadataReader((uint64_t)a3, &v25), (_DWORD)v15)
          || (v15 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v15))
        {
          CursorServiceMessage = v15;
          v17 = v25;
          goto LABEL_16;
        }
        uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
        v17 = v25;
        CursorServiceMessage = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v25, uint64, *(const void **)(v13 + 8));
        if ((_DWORD)CursorServiceMessage)
        {
LABEL_16:
          FigXPCRelease();
          FigXPCRelease();
          if (v17)
            CFRelease(v17);
          FigXPCConnectionKillServerOnTimeout();
LABEL_19:
          if ((_DWORD)CursorServiceMessage)
            goto LABEL_20;
          goto LABEL_33;
        }
        *a4 = (__CFArray *)v17;
      }
      v17 = 0;
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("MetadataReaders")))
    {
      MetadataItemArrayFromBinaryPListData = SendTrackReaderCopyMetadataReadersMessage(a1, v24, a3, a4);
      goto LABEL_30;
    }
    if (CFEqual(a2, CFSTR("EditCursorService")))
    {
      v20 = v24;
      v21 = a1;
      v22 = 1415930673;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("SecondaryEditCursorService")))
      {
        if (CFEqual(a2, CFSTR("SupportsMetadataArrays")))
        {
          *a4 = (__CFArray *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
        }
        else
        {
          if (CFEqual(a2, CFSTR("QuickTimeUserDataArray"))
            || CFEqual(a2, CFSTR("ISOUserDataArray"))
            || CFEqual(a2, CFSTR("QuickTimeMetadataArray"))
            || CFEqual(a2, CFSTR("CommonMetadataArray")))
          {
            CursorServiceMessage = SendTrackReaderCopyPropertyMessage(a1, v24, a2, &cf);
            if ((_DWORD)CursorServiceMessage || !cf)
              goto LABEL_19;
            MetadataItemArrayFromBinaryPListData = FigRemote_CreateMetadataItemArrayFromBinaryPListData((CFDataRef)cf, a3, 0, a4);
LABEL_30:
            CursorServiceMessage = MetadataItemArrayFromBinaryPListData;
            goto LABEL_19;
          }
          if (!CFEqual(a2, CFSTR("CaptionSampleCursorService")))
          {
            MetadataItemArrayFromBinaryPListData = SendTrackReaderCopyPropertyMessage(a1, v24, a2, a4);
            goto LABEL_30;
          }
          CursorServiceMessage = SendTrackReaderCreateCursorServiceMessage(a1, v24, 1415799667, (uint64_t)a3, a4);
          if ((_DWORD)CursorServiceMessage)
            goto LABEL_20;
        }
LABEL_33:
        CommonFormatReaderObjectStorePropertyInCache(v11, a2, *a4);
        goto LABEL_5;
      }
      v20 = v24;
      v22 = 1415930674;
      v21 = a1;
    }
    MetadataItemArrayFromBinaryPListData = SendTrackReaderCreateEditCursorServiceMessage(v21, v20, v22, (uint64_t)a3, a4);
    goto LABEL_30;
  }
LABEL_5:
  CursorServiceMessage = 0;
LABEL_20:
  if (cf)
    CFRelease(cf);
  return CursorServiceMessage;
}

uint64_t SendTrackReaderCopyMetadataReadersMessage(uint64_t a1, uint64_t a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  xpc_object_t value;
  void *v9;
  size_t count;
  uint64_t v11;
  __CFArray *Mutable;
  size_t v13;
  uint64_t uint64;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  const void *v19;
  xpc_object_t xdict;
  uint64_t v21;

  xdict = 0;
  v21 = 0;
  v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7 || (v7 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v7))
  {
    v17 = v7;
    v16 = 0;
    goto LABEL_16;
  }
  value = xpc_dictionary_get_value(xdict, "ObjectIDArray");
  if (!value)
  {
    Mutable = 0;
LABEL_15:
    v16 = 0;
    v17 = 0;
    *a4 = Mutable;
LABEL_16:
    Mutable = 0;
    goto LABEL_17;
  }
  v9 = value;
  count = xpc_array_get_count(value);
  if (!count)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_16;
  }
  v11 = count;
  Mutable = CFArrayCreateMutable(a3, count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v17 = FigSignalErrorAt();
    v16 = 0;
    goto LABEL_17;
  }
  if (v11 < 1)
    goto LABEL_15;
  v13 = 0;
  while (1)
  {
    uint64 = xpc_array_get_uint64(v9, v13);
    v15 = CreateRemoteMetadataReader((uint64_t)a3, &v19);
    v16 = v19;
    if ((_DWORD)v15)
      break;
    v15 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v19, uint64, *(const void **)(DerivedStorage + 8));
    if ((_DWORD)v15)
      break;
    CFArrayAppendValue(Mutable, v16);
    if (v16)
    {
      CFRelease(v16);
      v19 = 0;
    }
    if (v11 == ++v13)
      goto LABEL_15;
  }
  v17 = v15;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (v16)
    CFRelease(v16);
  if (Mutable)
    CFRelease(Mutable);
  FigXPCConnectionKillServerOnTimeout();
  return v17;
}

uint64_t SendTrackReaderCreateEditCursorServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t uint64;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
  {
    v11 = v7;
  }
  else
  {
    FigEditCursorServiceGetClassID();
    v8 = CMDerivedObjectCreate();
    if ((_DWORD)v8)
    {
      v11 = v8;
    }
    else
    {
      v9 = FigXPCConnectionSendSyncMessageCreatingReply();
      if ((_DWORD)v9)
      {
        v11 = v9;
      }
      else
      {
        uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
        v11 = CommonFormatReaderObjectCompleteObjectSetup(0, uint64, *(const void **)(DerivedStorage + 8));
        if (!(_DWORD)v11)
          *a5 = 0;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v11;
}

uint64_t SendTrackReaderCopyPropertyMessage(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  v6 = FigXPCCreateBasicMessage();
  if ((_DWORD)v6)
    goto LABEL_8;
  v6 = FigXPCMessageSetCFString();
  if ((_DWORD)v6)
    goto LABEL_8;
  v6 = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)v6)
    goto LABEL_8;
  if (!CFEqual(a3, CFSTR("TrackFormatDescriptionArray")))
  {
    v6 = FigXPCMessageCopyCFObject();
LABEL_8:
    v7 = v6;
    goto LABEL_9;
  }
  v7 = FigXPCMessageCopyFormatDescriptionArray();
  if (!(_DWORD)v7)
    *a4 = 0;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v7;
}

uint64_t SendTrackReaderCreateCursorServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t uint64;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
  {
    v10 = v7;
  }
  else
  {
    v8 = *(const void **)(DerivedStorage + 32);
    v9 = *(const void **)(DerivedStorage + 56);
    FigSampleCursorServiceGetClassID();
    v10 = CMDerivedObjectCreate();
    if (!(_DWORD)v10)
    {
      v11 = CMBaseObjectGetDerivedStorage();
      if (v9)
        v12 = CFRetain(v9);
      else
        v12 = 0;
      *(_QWORD *)(v11 + 24) = v12;
      if (v8)
        v13 = CFRetain(v8);
      else
        v13 = 0;
      *(_QWORD *)(v11 + 32) = v13;
      v14 = FigXPCConnectionSendSyncMessageCreatingReply();
      if ((_DWORD)v14)
      {
        v10 = v14;
      }
      else
      {
        uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
        v10 = CommonFormatReaderObjectCompleteObjectSetup(0, uint64, *(const void **)(DerivedStorage + 8));
        if (!(_DWORD)v10)
          *a5 = 0;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v10;
}

uint64_t remoteEditCursorService_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendAsyncMessage();
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  return FigXPCRelease();
}

__CFString *remoteEditCursorService_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigEditCursorServiceRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteEditCursorService_CreateCursorAtTrackTime(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFAllocatorRef v7;
  uint64_t uint64;
  const void *v9;
  uint64_t v10;
  const void *v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_11;
  }
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16))
  {
    v10 = FigSignalErrorAt();
    if ((_DWORD)v10)
      goto LABEL_12;
  }
  v6 = FigXPCCreateBasicMessage();
  if ((_DWORD)v6
    || (v6 = FigXPCMessageSetCMTime(), (_DWORD)v6)
    || (v7 = CFGetAllocator(a1), v6 = CreateRemoteEditCursor((uint64_t)v7, &v12), (_DWORD)v6)
    || (v6 = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)v6))
  {
LABEL_11:
    v10 = v6;
LABEL_12:
    v9 = v12;
    goto LABEL_13;
  }
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  v9 = v12;
  v10 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v12, uint64, *(const void **)(DerivedStorage + 8));
  if (!(_DWORD)v10)
  {
    *a3 = v9;
    goto LABEL_9;
  }
LABEL_13:
  if (v9)
    CFRelease(v9);
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v10;
}

uint64_t CreateRemoteEditCursor(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  FigEditCursorGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
    *a2 = 0;
  return v3;
}

uint64_t remoteEditCursor_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendAsyncMessage();
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  return FigXPCRelease();
}

__CFString *remoteEditCursor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigEditCursorRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteEditCursor_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    *a4 = 0;
    ObjectID = remoteFormatReader_GetObjectID(a1, &v10);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCMessageSetCFString();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
          if (!(_DWORD)ObjectID)
            ObjectID = FigXPCMessageCopyCFObject();
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v8 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v8;
}

uint64_t remoteEditCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  CFAllocatorRef v6;
  uint64_t uint64;
  const void *v8;
  uint64_t v9;
  const void *v11;
  xpc_object_t xdict;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  v11 = 0;
  xdict = 0;
  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
  ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v14);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (v6 = CFGetAllocator(a1), ObjectID = CreateRemoteEditCursor((uint64_t)v6, &v11), (_DWORD)ObjectID)
    || (ObjectID = FigXPCConnectionSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v9 = ObjectID;
    v8 = v11;
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
    v8 = v11;
    v9 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v11, uint64, *(const void **)(DerivedStorage + 8));
    if (!(_DWORD)v9)
    {
      *a2 = v8;
      goto LABEL_8;
    }
  }
  if (v8)
    CFRelease(v8);
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v9;
}

uint64_t remoteEditCursor_Step(uint64_t a1, int a2)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  CMBaseObjectGetDerivedStorage();
  ObjectID = remoteFormatReader_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
    v5 = ObjectID;
  }
  else
  {
    v5 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v5)
    {
      xpc_dictionary_set_int64(0, "EditCursorStepCount", a2);
      v5 = FigXPCConnectionSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v5;
}

uint64_t remoteEditCursor_GetEditSegment(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t CMTimeMapping;
  uint64_t v5;

  v5 = 0;
  CMBaseObjectGetDerivedStorage();
  ObjectID = remoteFormatReader_GetObjectID(a1, &v5);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    CMTimeMapping = ObjectID;
  }
  else
  {
    CMTimeMapping = FigXPCConnectionSendSyncMessageCreatingReply();
    if (!(_DWORD)CMTimeMapping)
      CMTimeMapping = FigXPCMessageGetCMTimeMapping();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return CMTimeMapping;
}

uint64_t remoteSampleCursorService_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(_BYTE *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage())
      FigXPCConnectionSendAsyncMessage();
  }
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteSampleCursorService_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 16))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleCursorServiceRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteSampleCursorService_CreateCursorAtPresentationTimeStamp(const void *a1, uint64_t a2, _QWORD *a3, BOOL *a4, BOOL *a5)
{
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  return CreateCursorWithPresentationTimeStamp(a1, &v6, 1396732020, 0, a3, a4, a5);
}

uint64_t remoteSampleCursorService_CreateCursorNearPresentationTimeStamp(const void *a1, uint64_t a2, int a3, _QWORD *a4, BOOL *a5, BOOL *a6)
{
  __int128 v7;
  uint64_t v8;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  return CreateCursorWithPresentationTimeStamp(a1, &v7, 1400795252, a3, a4, a5, a6);
}

uint64_t remoteSampleCursorService_CreateCursorAtFirstSampleInDecodeOrder(const void *a1, _QWORD *a2)
{
  if (a2)
    return CreateCursorAtSampleInDecodeOrder(a1, 1399222900, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteSampleCursorService_CreateCursorAtLastSampleInDecodeOrder(const void *a1, _QWORD *a2)
{
  if (a2)
    return CreateCursorAtSampleInDecodeOrder(a1, 1399616372, a2);
  else
    return FigSignalErrorAt();
}

uint64_t CreateCursorWithPresentationTimeStamp(const void *a1, __int128 *a2, uint64_t a3, int a4, _QWORD *a5, BOOL *a6, BOOL *a7)
{
  const void **DerivedStorage;
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v16;
  int v17;
  CFAllocatorRef v18;
  CFAllocatorRef v19;
  CFTypeRef v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef cf;
  CFTypeRef v32;
  _QWORD *v33;
  xpc_object_t v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v33 = 0;
  v32 = 0;
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v30 = 0;
  cf = 0;
  v29 = 0;
  if (!a5)
    goto LABEL_27;
  ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v35);
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v28))
    xpc_dictionary_set_BOOL(v34, "UseSimpleCache", 1);
  v26 = *a2;
  v27 = *((_QWORD *)a2 + 2);
  ObjectID = FigXPCMessageSetCMTime();
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  xpc_dictionary_set_BOOL(v34, "SampleCursorAllowCreationAfterPTS", a4 != 0);
  ObjectID = FigXPCConnectionCopyMemoryOriginForConnectedProcess();
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  ObjectID = FigXPCConnectionCopyMemoryRecipientForConnectedProcess();
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  uint64 = xpc_dictionary_get_uint64(v33, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_27:
    ObjectID = FigSignalErrorAt();
LABEL_28:
    v21 = ObjectID;
    goto LABEL_18;
  }
  v16 = uint64;
  v17 = xpc_dictionary_get_uint64(v33, "SampleCursorOptionalMethods");
  v18 = CFGetAllocator(a1);
  ObjectID = FigServerSampleCursorSubscriptionCreate((uint64_t)v18, DerivedStorage[1], v16, DerivedStorage[3], (uint64_t *)&cf);
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  *((_QWORD *)&v24 + 1) = DerivedStorage[3];
  v19 = CFGetAllocator(a1);
  ObjectID = CreateRemoteSampleCursor((uint64_t)v19, DerivedStorage[4], v17, (uint64_t)&v23, cf, v30, v29, &v32);
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  v20 = v32;
  ObjectID = remoteSampleCursor_updateSimpleCache((uint64_t)v32, v33);
  if ((_DWORD)ObjectID)
    goto LABEL_28;
  remoteSampleCursor_updateUpcomingSamplesCache(v20, v33);
  *a5 = v20;
  v32 = 0;
  if (a6)
    *a6 = xpc_dictionary_get_BOOL(v33, "SampleCursorCreatedBeforeStart");
  v21 = 0;
  if (a7)
    *a7 = xpc_dictionary_get_BOOL(v33, "SampleCursorCreatedAfterEnd");
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  FigXPCRelease();
  FigXPCRelease();
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  FigXPCConnectionKillServerOnTimeout();
  return v21;
}

uint64_t remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  if (remoteSampleCursor_useEventLink_onceToken != -1)
    dispatch_once(&remoteSampleCursor_useEventLink_onceToken, &__block_literal_global_40);
  if (!remoteSampleCursor_useEventLink_prefersEventLink)
    return 0;
  result = gFormatReaderEventLinkKey;
  if (gFormatReaderEventLinkKey)
  {
    v3 = MEMORY[0x19402F264]();
    result = v3 != 0;
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t FigServerSampleCursorSubscriptionCreate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;

  if (!a5)
    return FigSignalErrorAt();
  if (FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce != -1)
    dispatch_once_f(&FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce, 0, (dispatch_function_t)registerFigServerSampleCursorSubscriptionType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = Instance;
  v11 = FigXPCConnectionAssociateObject();
  if ((_DWORD)v11)
  {
    v14 = v11;
    CFRelease((CFTypeRef)v10);
  }
  else
  {
    *(_QWORD *)(v10 + 16) = a3;
    *(_DWORD *)(v10 + 40) = 0;
    if (a2)
      v12 = CFRetain(a2);
    else
      v12 = 0;
    *(_QWORD *)(v10 + 32) = v12;
    if (a4)
      v13 = CFRetain(a4);
    else
      v13 = 0;
    v14 = 0;
    *(_QWORD *)(v10 + 48) = v13;
    *a5 = v10;
  }
  return v14;
}

uint64_t CreateRemoteSampleCursor(uint64_t a1, const void *a2, int a3, uint64_t a4, const void *a5, const void *a6, const void *a7, _QWORD *a8)
{
  int v12;
  const void *Value;
  const void *v14;
  _OWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t DerivedStorage;
  CFTypeRef v19;
  CFTypeRef v20;
  const void *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t v28;

  if (remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableSetupOnce != -1)
    dispatch_once(&remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableSetupOnce, &__block_literal_global_44_0);
  v12 = 0;
  while (1)
  {
    if (v12)
      pthread_rwlock_wrlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
    else
      pthread_rwlock_rdlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
    Value = CFDictionaryGetValue((CFDictionaryRef)remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableDictionary, (const void *)a3);
    v14 = Value;
    if (v12)
    {
      if (!Value)
        break;
    }
    if (!Value)
      v12 = 1;
    pthread_rwlock_unlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
    if (v14)
      goto LABEL_21;
  }
  v15 = malloc_type_malloc(0xF0uLL, 0x108004055DB6A7AuLL);
  v16 = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL);
  v15[12] = xmmword_1E2F909C8;
  v15[13] = *(_OWORD *)&off_1E2F909D8;
  v15[14] = xmmword_1E2F909E8;
  v15[8] = xmmword_1E2F90988;
  v15[9] = *(_OWORD *)&off_1E2F90998;
  v15[10] = xmmword_1E2F909A8;
  v15[11] = *(_OWORD *)&off_1E2F909B8;
  v15[4] = xmmword_1E2F90948;
  v15[5] = *(_OWORD *)&off_1E2F90958;
  v15[6] = xmmword_1E2F90968;
  v15[7] = *(_OWORD *)&off_1E2F90978;
  *v15 = kFigSampleCursorRemote_FigSampleCursorClass;
  v15[1] = unk_1E2F90918;
  v15[2] = xmmword_1E2F90928;
  v15[3] = *(_OWORD *)&off_1E2F90938;
  *(_OWORD *)v16 = kFigSampleCursorRemote_FigSampleCursorVTable;
  if ((a3 & 2) != 0)
  {
    if ((a3 & 4) != 0)
      goto LABEL_15;
  }
  else
  {
    *((_QWORD *)v15 + 8) = 0;
    if ((a3 & 4) != 0)
    {
LABEL_15:
      if ((a3 & 8) != 0)
        goto LABEL_16;
      goto LABEL_50;
    }
  }
  *((_QWORD *)v15 + 10) = 0;
  if ((a3 & 8) != 0)
  {
LABEL_16:
    if ((a3 & 0x10) != 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  *((_QWORD *)v15 + 18) = 0;
  if ((a3 & 0x10) != 0)
  {
LABEL_17:
    if ((a3 & 0x20) != 0)
      goto LABEL_18;
LABEL_52:
    *((_QWORD *)v15 + 14) = 0;
    if ((a3 & 0x40) != 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_51:
  *((_QWORD *)v15 + 19) = 0;
  if ((a3 & 0x20) == 0)
    goto LABEL_52;
LABEL_18:
  if ((a3 & 0x40) == 0)
LABEL_19:
    *((_QWORD *)v15 + 9) = 0;
LABEL_20:
  v16[2] = v15;
  CFDictionarySetValue((CFMutableDictionaryRef)remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableDictionary, (const void *)a3, v16);
  pthread_rwlock_unlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
LABEL_21:
  if (remoteSampleCursor_GetClassID_sRegisterRemoteSampleCursorClassOnce != -1)
    dispatch_once(&remoteSampleCursor_GetClassID_sRegisterRemoteSampleCursorClassOnce, &__block_literal_global_109);
  v17 = CMDerivedObjectCreate();
  if ((_DWORD)v17)
    return v17;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 8) = a3;
  *(_QWORD *)(DerivedStorage + 72) = FigSimpleMutexCreate();
  v19 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)(DerivedStorage + 64) = v19;
  v20 = a5 ? CFRetain(a5) : 0;
  *(_QWORD *)DerivedStorage = v20;
  v17 = FigServerSampleCursorSubscriptionSubscribe((uint64_t)a5);
  if ((_DWORD)v17)
    return v17;
  if (!a4)
    return FigSignalErrorAt();
  v21 = *(const void **)(a4 + 24);
  if (!v21)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(v21);
  v22 = *(CFTypeRef *)a4;
  if (*(_QWORD *)a4)
    v22 = CFRetain(v22);
  *(_QWORD *)(DerivedStorage + 16) = v22;
  v23 = *(CFTypeRef *)(a4 + 40);
  if (v23)
    v23 = CFRetain(v23);
  *(_QWORD *)(DerivedStorage + 56) = v23;
  v24 = *(_QWORD *)(a4 + 8);
  if (v24)
  {
    v17 = FigPartialSampleTableAccessorCopy(v24, (_QWORD *)(DerivedStorage + 24));
    if ((_DWORD)v17)
      return v17;
  }
  v25 = *(CFTypeRef *)(a4 + 32);
  if (v25)
    v25 = CFRetain(v25);
  *(_QWORD *)(DerivedStorage + 48) = v25;
  *(_QWORD *)(DerivedStorage + 32) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(DerivedStorage + 360) = FigCopyCommonMemoryPool();
  v26 = a6;
  if (a6)
    v26 = CFRetain(a6);
  *(_QWORD *)(DerivedStorage + 376) = v26;
  if (a7)
    v27 = CFRetain(a7);
  else
    v27 = 0;
  v28 = 0;
  *(_QWORD *)(DerivedStorage + 368) = v27;
  *a8 = 0;
  return v28;
}

uint64_t remoteSampleCursor_updateSimpleCache(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const void *data;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  size_t __n;
  size_t length;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18);
  if ((_DWORD)result)
  {
    if (a2)
    {
      length = 0;
      data = xpc_dictionary_get_data(a2, "SampleCursorSyncInfo", &length);
      if (data
        && length == 8
        && (v6 = data, __n = 0, (v7 = xpc_dictionary_get_data(a2, "SampleCursorSampleTimingInfo", &__n)) != 0)
        && __n == 72)
      {
        v8 = v7;
        v10 = *(_QWORD *)(DerivedStorage + 72);
        v9 = DerivedStorage + 72;
        MEMORY[0x19402EEEC](v10);
        memcpy((void *)(v9 + 80), v6, length);
        memcpy((void *)(v9 + 8), v8, __n);
        *(_OWORD *)(v9 + 88) = 0u;
        *(_OWORD *)(v9 + 104) = 0u;
        *(_OWORD *)(v9 + 120) = 0u;
        v11 = MEMORY[0x1E0CA2E40];
        v12 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)(v9 + 140) = *MEMORY[0x1E0CA2E40];
        *(_BYTE *)(v9 + 136) = 0;
        *(_OWORD *)(v9 + 156) = v12;
        *(_OWORD *)(v9 + 172) = *(_OWORD *)(v11 + 32);
        v13 = MEMORY[0x1E0CA2E18];
        v14 = *MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v9 + 188) = *MEMORY[0x1E0CA2E18];
        v15 = *(_QWORD *)(v13 + 16);
        *(_QWORD *)(v9 + 204) = v15;
        *(_QWORD *)(v9 + 228) = v15;
        *(_OWORD *)(v9 + 212) = v14;
        *(_BYTE *)(v9 + 236) = 0;
        *(_OWORD *)(v9 + 240) = v14;
        *(_QWORD *)(v9 + 256) = v15;
        *(_OWORD *)(v9 + 264) = v14;
        *(_QWORD *)(v9 + 280) = v15;
        MEMORY[0x19402EF04](*(_QWORD *)v9);
        return 0;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t remoteSampleCursor_updateUpcomingSamplesCache(const void *a1, _QWORD *Instance)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  xpc_object_t array;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t BlockBufferData;
  int64_t int64;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  CFTypeRef v22;
  uint64_t v23;
  CFTypeRef v24;
  void *v25;
  __int128 v27[2];
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD *);
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;
  CFTypeRef v34;
  CFTypeRef v35;
  uint64_t applier;
  uint64_t v37;
  BOOL (*v38)(uint64_t, int, xpc_object_t);
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  v35 = 0;
  v32 = 0;
  cf = 0;
  v30 = 0;
  v31 = 0;
  v5 = CFGetAllocator(a1);
  v29 = 0;
  FigPartialSampleTableAccessorDestroy(*(const void ***)(DerivedStorage + 24));
  v6 = *(const void **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = 0;
  v7 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = 0;
  *(_QWORD *)(DerivedStorage + 24) = 0;
  *(_QWORD *)(DerivedStorage + 32) = 0;
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
  if (!remoteSampleCursor_usePartialSampleTable_usePartialSampleTable
    || remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v29))
  {
    Instance = 0;
    v23 = 0;
    goto LABEL_36;
  }
  if (!Instance)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_56;
  }
  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v8 = CMBaseObjectGetDerivedStorage();
  array = xpc_dictionary_get_array(Instance, "SampleCursorFormatDescriptionArray");
  v10 = MEMORY[0x1E0C809B0];
  if (array)
  {
    applier = MEMORY[0x1E0C809B0];
    v37 = 0x40000000;
    v38 = __remoteSampleCursor_registerNewFormatDescriptionsFromMessage_block_invoke;
    v39 = &unk_1E2F911C8;
    v40 = &v42;
    v41 = v8;
    xpc_array_apply(array, &applier);
  }
  _Block_object_dispose(&v42, 8);
  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = xpc_dictionary_get_array(Instance, "SampleCursorDataSourceArray");
  if (v12)
  {
    applier = v10;
    v37 = 0x40000000;
    v38 = __remoteSampleCursor_registerNewDataSourcesFromMessage_block_invoke;
    v39 = &unk_1E2F911F0;
    v40 = &v42;
    v41 = v11;
    xpc_array_apply(v12, &applier);
  }
  _Block_object_dispose(&v42, 8);
  BlockBufferData = FigXPCMessageCreateBlockBufferData();
  if (!(_DWORD)BlockBufferData)
  {
    int64 = xpc_dictionary_get_int64(Instance, "SampleCursorSampleIndex");
    v27[0] = xmmword_1E2F91198;
    v27[1] = *(_OWORD *)off_1E2F911A8;
    v28 = remoteSampleCursor_copySampleDependencyAttributesFromOutOfBandID;
    BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if (!(_DWORD)BlockBufferData)
    {
      if (!v32
        || (BlockBufferData = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer(), !(_DWORD)BlockBufferData))
      {
        v15 = cf;
        v16 = *(const void **)(DerivedStorage + 40);
        if (RemoteSampleCursorOutOfBandStorageGetTypeID_sRegisterRemoteSampleCursorOutOfBandStorageTypeOnce != -1)
          dispatch_once_f(&RemoteSampleCursorOutOfBandStorageGetTypeID_sRegisterRemoteSampleCursorOutOfBandStorageTypeOnce, 0, (dispatch_function_t)registerRemoteSampleCursorOutOfBandStorageType);
        Instance = (_QWORD *)_CFRuntimeCreateInstance();
        if (Instance)
        {
          if (v15)
            v17 = CFRetain(v15);
          else
            v17 = 0;
          Instance[3] = v17;
          if (v16)
            v18 = CFRetain(v16);
          else
            v18 = 0;
          Instance[2] = v18;
LABEL_24:
          v19 = FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(v5, (OpaqueCMBlockBuffer *)v35, v27, Instance, (uint64_t *)&v34);
          if (!(_DWORD)v19)
          {
            v19 = FigPartialSampleTableCreateAccessorAtIndex(v34, int64, &v30);
            if (!(_DWORD)v19)
            {
              v21 = (uint64_t *)(DerivedStorage + 48);
              v20 = *(_QWORD *)(DerivedStorage + 48);
              if (v20)
              {
LABEL_32:
                v19 = (uint64_t)FigPartialSampleTableBrokerOfferNewPartialSampleTable(v20, v34);
                if (!(_DWORD)v19)
                {
                  v19 = FigPartialSampleTableBrokerCopyInterestTokenForAdjacentTables(*v21, (uint64_t)v34, (__CFArray **)&v31);
                  if (!(_DWORD)v19)
                  {
                    v22 = v31;
LABEL_35:
                    v23 = 0;
                    v24 = v34;
                    v34 = 0;
                    v25 = v30;
                    *(_QWORD *)(DerivedStorage + 16) = v24;
                    *(_QWORD *)(DerivedStorage + 24) = v25;
                    v30 = 0;
                    v31 = 0;
                    *(_QWORD *)(DerivedStorage + 56) = v22;
                    goto LABEL_36;
                  }
                }
                goto LABEL_56;
              }
              if (remoteSampleCursor_useSampleTableBroker_useSampleTableBrokerOnce != -1)
                dispatch_once(&remoteSampleCursor_useSampleTableBroker_useSampleTableBrokerOnce, &__block_literal_global_117);
              if (!remoteSampleCursor_useSampleTableBroker_useSampleTableBroker
                || (v19 = FigPartialSampleTableBrokerCreate(v5, (_QWORD *)(DerivedStorage + 48)), !(_DWORD)v19))
              {
                v20 = *v21;
                if (!*v21)
                {
                  v22 = 0;
                  goto LABEL_35;
                }
                goto LABEL_32;
              }
            }
          }
LABEL_56:
          v23 = v19;
          goto LABEL_36;
        }
        BlockBufferData = FigSignalErrorAt();
        if (!(_DWORD)BlockBufferData)
          goto LABEL_24;
      }
    }
  }
  v23 = BlockBufferData;
  Instance = 0;
LABEL_36:
  if (cf)
    CFRelease(cf);
  if (Instance)
    CFRelease(Instance);
  if (v34)
    CFRelease(v34);
  if (v35)
    CFRelease(v35);
  if (v31)
    CFRelease(v31);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v32)
    CFRelease(v32);
  FigPartialSampleTableAccessorDestroy((const void **)v30);
  return v23;
}

uint64_t __remoteSampleCursor_useEventLink_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  remoteSampleCursor_useEventLink_prefersEventLink = result;
  return result;
}

uint64_t FigServerSampleCursorSubscriptionSubscribe(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  FigAtomicIncrement32();
  if (remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce != -1)
    dispatch_once(&remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce, &__block_literal_global_49);
  return 0;
}

CFMutableDictionaryRef __remoteFigSampleCursor_getVTableWithOptionalMethods_block_invoke()
{
  CFMutableDictionaryRef result;

  pthread_rwlock_init(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock, 0);
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableDictionary = (uint64_t)result;
  return result;
}

uint64_t remoteSampleCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t uint64;
  CFAllocatorRef v8;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t updated;
  const void *v12;
  CFAllocatorRef v13;
  uint64_t v14;
  int EventLinkAssertionFromCurrentThread;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v21;
  xpc_object_t xdict;
  CFTypeRef cf;
  const void *v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v24 = 0;
  xdict = 0;
  if (!a1 || !a2)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v5 = DerivedStorage;
  if (remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce != -1)
    dispatch_once(&remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce, &__block_literal_global_49);
  if (remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscription)
  {
    v6 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73637073u, (uint64_t *)&xdict, (uint64_t)&__block_literal_global_47);
    if (!(_DWORD)v6)
    {
      uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
      v8 = CFGetAllocator(a1);
      v9 = FigServerSampleCursorSubscriptionCreate((uint64_t)v8, *(const void **)(*(_QWORD *)v5 + 32), uint64, *(const void **)(*(_QWORD *)v5 + 48), (uint64_t *)&cf);
      if (!(_DWORD)v9)
      {
        v10 = CFGetAllocator(a1);
        updated = CreateRemoteSampleCursor((uint64_t)v10, *(const void **)(v5 + 64), *(_DWORD *)(v5 + 8), v5 + 16, cf, *(const void **)(v5 + 376), *(const void **)(v5 + 368), &v24);
        v12 = v24;
        if ((_DWORD)updated || (updated = remoteSampleCursor_updateSimpleCache((uint64_t)v24, xdict), (_DWORD)updated))
        {
          v6 = updated;
          goto LABEL_22;
        }
LABEL_14:
        *a2 = v12;
        FigXPCRelease();
        v6 = 0;
        goto LABEL_15;
      }
      v6 = v9;
    }
LABEL_20:
    FigXPCRelease();
    goto LABEL_15;
  }
  v13 = CFGetAllocator(a1);
  v14 = CreateRemoteSampleCursor((uint64_t)v13, *(const void **)(v5 + 64), *(_DWORD *)(v5 + 8), v5 + 16, *(const void **)v5, *(const void **)(v5 + 376), *(const void **)(v5 + 368), &v24);
  if (!(_DWORD)v14)
  {
    EventLinkAssertionFromCurrentThread = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v21);
    v12 = v24;
    if (EventLinkAssertionFromCurrentThread)
    {
      v16 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 72));
      v18 = *(_OWORD *)(v5 + 112);
      v17 = *(_OWORD *)(v5 + 128);
      v19 = *(_QWORD *)(v5 + 144);
      *(_OWORD *)(v16 + 96) = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(v16 + 80) = *(_OWORD *)(v5 + 80);
      *(_QWORD *)(v16 + 144) = v19;
      *(_OWORD *)(v16 + 112) = v18;
      *(_OWORD *)(v16 + 128) = v17;
      *(_QWORD *)(v16 + 152) = *(_QWORD *)(v5 + 152);
      *(_OWORD *)(v16 + 192) = *(_OWORD *)(v5 + 192);
      *(_BYTE *)(v16 + 208) = 0;
      *(_OWORD *)(v16 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(v16 + 176) = *(_OWORD *)(v5 + 176);
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 72));
    }
    goto LABEL_14;
  }
  v6 = v14;
  v12 = v24;
LABEL_22:
  FigXPCRelease();
  if (v12)
    CFRelease(v12);
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v6;
}

int64_t remoteSampleCursor_CompareInDecodeOrder(const void *a1, int64_t int64)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CMTime *v7;
  int SampleTiming;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime time1[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CMTime v15;
  uint64_t v16;
  xpc_object_t v17;
  CMTime v18;
  CMTime time2;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    goto LABEL_19;
  }
  if (!int64)
  {
    FigSignalErrorAt();
    goto LABEL_17;
  }
  v6 = v5;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v16))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      memset(&v15, 0, sizeof(v15));
      v13 = 0u;
      v14 = 0u;
      v12 = 0u;
      memset(time1, 0, sizeof(time1));
      SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(DerivedStorage + 24), (uint64_t)&v12);
      if (!SampleTiming)
        SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v6 + 24), (uint64_t)time1);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming)
        {
          v18 = v15;
          time2 = time1[2];
          v7 = &v18;
          goto LABEL_5;
        }
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (!remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, (const void *)int64, 0x73636D70u, (uint64_t *)&v17, (uint64_t)&__block_literal_global_57))
    {
      int64 = xpc_dictionary_get_int64(v17, "SampleCursorComparisonResult");
      goto LABEL_17;
    }
LABEL_19:
    int64 = 0;
    goto LABEL_17;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  v18 = *(CMTime *)(DerivedStorage + 128);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 72));
  v12 = *(_OWORD *)(v6 + 128);
  *(_QWORD *)&v13 = *(_QWORD *)(v6 + 144);
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 72));
  time1[0] = v18;
  *(_OWORD *)&time2.value = v12;
  time2.epoch = v13;
  v7 = time1;
LABEL_5:
  int64 = CMTimeCompare(v7, &time2);
LABEL_17:
  FigXPCRelease();
  return int64;
}

uint64_t remoteSampleCursor_GetPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int SampleTiming;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&v15[16] = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  v16 = v5;
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  v14 = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)v15 = v6;
  if (!a1)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v7 + 24), (uint64_t)&v14);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming)
          goto LABEL_11;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    result = remoteSampleCursor_getSampleTimingInfoFromServer(a1, (uint64_t)&v14);
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 72));
  v8 = *(_OWORD *)(v7 + 128);
  *(_OWORD *)&v15[16] = *(_OWORD *)(v7 + 112);
  v16 = v8;
  v17 = *(_QWORD *)(v7 + 144);
  v9 = *(_OWORD *)(v7 + 96);
  v14 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)v15 = v9;
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 72));
LABEL_11:
  result = 0;
  *(_OWORD *)a2 = *(_OWORD *)&v15[8];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v15[24];
  return result;
}

uint64_t remoteSampleCursor_GetDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int SampleTiming;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&v16[16] = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  v17 = v5;
  v18 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  v15 = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)v16 = v6;
  if (!a1)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v14))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v7 + 24), (uint64_t)&v15);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming)
          goto LABEL_11;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    result = remoteSampleCursor_getSampleTimingInfoFromServer(a1, (uint64_t)&v15);
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 72));
  v8 = *(_OWORD *)(v7 + 128);
  *(_OWORD *)&v16[16] = *(_OWORD *)(v7 + 112);
  v17 = v8;
  v18 = *(_QWORD *)(v7 + 144);
  v9 = *(_OWORD *)(v7 + 96);
  v15 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)v16 = v9;
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 72));
LABEL_11:
  result = 0;
  if ((BYTE12(v17) & 1) != 0)
  {
    *(_OWORD *)a2 = v17;
    v13 = v18;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v16[8];
    v13 = *(_QWORD *)&v16[24];
  }
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

uint64_t remoteSampleCursor_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int SampleTiming;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  v16 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  v17 = v5;
  v18 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  v14 = *MEMORY[0x1E0CA2E90];
  v15 = v6;
  if (!a1)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v7 + 24), (uint64_t)&v14);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming)
          goto LABEL_11;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    result = remoteSampleCursor_getSampleTimingInfoFromServer(a1, (uint64_t)&v14);
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 72));
  v8 = *(_OWORD *)(v7 + 128);
  v16 = *(_OWORD *)(v7 + 112);
  v17 = v8;
  v18 = *(_QWORD *)(v7 + 144);
  v9 = *(_OWORD *)(v7 + 96);
  v14 = *(_OWORD *)(v7 + 80);
  v15 = v9;
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 72));
LABEL_11:
  result = 0;
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  return result;
}

uint64_t remoteSampleCursor_GetDependencyInfo(uint64_t a1, _BYTE *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  int SyncInfo;
  int v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v17;
  unsigned int v18;
  uint64_t ObjectID;
  uint64_t *data;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t length;
  xpc_object_t xdict;
  _BYTE v28[12];
  __int16 v29;
  int v30;
  _QWORD v31[18];

  v31[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v11 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v25))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 72));
      if (a2)
        *a2 = *(_BYTE *)(v11 + 156);
      if (a3)
        *a3 = *(_BYTE *)(v11 + 157);
      if (a4)
        *a4 = *(_DWORD *)(v11 + 152);
      if (a5)
        *a5 = *(_BYTE *)(v11 + 158);
      MEMORY[0x19402EF04](*(_QWORD *)(v11 + 72));
      return 0;
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      xdict = 0;
      SyncInfo = FigPartialSampleTableAccessorGetSyncInfo(*(uint64_t **)(v11 + 24), &xdict);
      if (SyncInfo != -17712)
      {
        v15 = SyncInfo;
        if (!SyncInfo)
        {
          if (a2)
            *a2 = (_BYTE)xdict;
          if (a3)
            *a3 = BYTE1(xdict);
          if (a4)
            *a4 = HIDWORD(xdict);
          if (a5)
            *a5 = BYTE2(xdict);
          return 0;
        }
        LODWORD(length) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v17 = length;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if (v18)
        {
          *(_DWORD *)v28 = 136315394;
          *(_QWORD *)&v28[4] = "remoteSampleCursor_GetDependencyInfo";
          v29 = 1024;
          v30 = v15;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CMBaseObjectGetDerivedStorage();
    v31[0] = 0;
    xdict = 0;
    *(_QWORD *)v28 = 0;
    length = 0;
    ObjectID = remoteSampleCursor_GetObjectID(a1, v31);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          data = (uint64_t *)xpc_dictionary_get_data(xdict, "SampleCursorSyncInfo", &length);
          if (data && length == 8)
          {
            v12 = 0;
            v21 = *data;
            v22 = HIDWORD(*data);
            v23 = (unint64_t)*data >> 40;
            v24 = HIWORD(*data);
LABEL_39:
            FigXPCRelease();
            FigXPCRelease();
            if ((_DWORD)v12)
              return v12;
            if (a2)
              *a2 = v22;
            if (a3)
              *a3 = v23;
            if (a4)
              *a4 = v21;
            if (a5)
            {
              v12 = 0;
              *a5 = v24;
              return v12;
            }
            return 0;
          }
          ObjectID = FigSignalErrorAt();
        }
      }
    }
    v12 = ObjectID;
    LOBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    LODWORD(v21) = 0;
    goto LABEL_39;
  }
  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_GetMPEG2FrameType()
{
  CMBaseObjectGetVTable();
  return 4294954514;
}

uint64_t remoteSampleCursor_TestReorderingBoundary(const void *a1, const void *a2, unsigned int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int DecodeToPresentationTimeDeltaRange;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  BOOL v20;
  BOOL v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v23;
  uint64_t v24;
  _QWORD v26[4];
  unsigned int v27;
  os_log_type_t type;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, CMBlockBufferRef);
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double (*v37)(uint64_t, CMBlockBufferRef);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  xpc_object_t v63[21];

  v63[20] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  v63[0] = 0;
  v59 = 0;
  v60 = &v59;
  v61 = 0x2000000000;
  v62 = 0;
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  v56 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  v57 = v8;
  v58 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  v54 = *MEMORY[0x1E0CA2E90];
  v55 = v9;
  v51 = v56;
  v52 = v8;
  v53 = v58;
  v49 = v54;
  v50 = v9;
  v47 = *MEMORY[0x1E0CA2E18];
  v48 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v45 = v47;
  v46 = v48;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  if (!a1 || !a2 || a3 >= 2)
  {
    FigSignalErrorAt();
    goto LABEL_38;
  }
  v10 = v7;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v42))
  {
    v12 = *(_QWORD *)(DerivedStorage + 72);
    v11 = DerivedStorage + 72;
    MEMORY[0x19402EEEC](v12);
    v13 = *(_OWORD *)(v11 + 24);
    v14 = *(_OWORD *)(v11 + 56);
    v56 = *(_OWORD *)(v11 + 40);
    v57 = v14;
    v58 = *(_QWORD *)(v11 + 72);
    v54 = *(_OWORD *)(v11 + 8);
    v55 = v13;
    v47 = *(_OWORD *)(v11 + 188);
    v48 = *(_QWORD *)(v11 + 204);
    v46 = *(_QWORD *)(v11 + 228);
    v45 = *(_OWORD *)(v11 + 212);
    MEMORY[0x19402EF04](*(_QWORD *)v11);
    if ((BYTE12(v47) & 1) == 0 || (BYTE12(v45) & 1) == 0)
    {
      if (remoteSampleCursor_GetObjectID((uint64_t)a1, &v44)
        || remoteSampleCursor_GetObjectID((uint64_t)a2, &v43))
      {
        goto LABEL_38;
      }
      v35 = MEMORY[0x1E0C809B0];
      v36 = 0x40000000;
      v37 = __remoteSampleCursor_TestReorderingBoundary_block_invoke;
      v38 = &__block_descriptor_tmp_62_0;
      v39 = v44;
      v40 = v43;
      v41 = a3;
      v30 = MEMORY[0x1E0C809B0];
      v31 = 0x40000000;
      v32 = __remoteSampleCursor_TestReorderingBoundary_block_invoke_2;
      v33 = &unk_1E2F90B98;
      v34 = &v59;
      v15 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      goto LABEL_30;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 72));
    v18 = *(_OWORD *)(v10 + 128);
    v51 = *(_OWORD *)(v10 + 112);
    v52 = v18;
    v53 = *(_QWORD *)(v10 + 144);
    v19 = *(_OWORD *)(v10 + 96);
    v49 = *(_OWORD *)(v10 + 80);
    v50 = v19;
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 72));
    if (DWORD2(v47) == DWORD2(v45) && DWORD2(v47) == DWORD2(v57) && DWORD2(v57) == (_DWORD)v51)
    {
      v15 = 0;
      if (a3)
        v20 = (_QWORD)v47 + (_QWORD)v57 >= *((_QWORD *)&v50 + 1);
      else
        v20 = (_QWORD)v45 + (_QWORD)v57 <= *((_QWORD *)&v50 + 1);
      *((_BYTE *)v60 + 24) = v20;
LABEL_30:
      v21 = v15 == 0;
LABEL_31:
      if (v15 != -17712 && v15)
      {
        v29 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v21)
          goto LABEL_38;
      }
      else if (v21)
      {
        goto LABEL_38;
      }
    }
LABEL_36:
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 0x40000000;
    v26[2] = __remoteSampleCursor_TestReorderingBoundary_block_invoke_64;
    v26[3] = &__block_descriptor_tmp_65_0;
    v27 = a3;
    if (!remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, a2, 0x73626E64u, (uint64_t *)v63, (uint64_t)v26))
    {
      v23 = xpc_dictionary_get_BOOL(v63[0], "SampleCursorTestReorderingBoundaryResult");
      *((_BYTE *)v60 + 24) = v23;
    }
    goto LABEL_38;
  }
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
  if (!remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    goto LABEL_36;
  DecodeToPresentationTimeDeltaRange = FigPartialSampleTableAccessorGetDecodeToPresentationTimeDeltaRange(*(uint64_t **)(DerivedStorage + 24), (uint64_t)&v47, (uint64_t)&v45);
  if (DecodeToPresentationTimeDeltaRange
    || (DecodeToPresentationTimeDeltaRange = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(DerivedStorage + 24), (uint64_t)&v54)) != 0|| (DecodeToPresentationTimeDeltaRange = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v10 + 24), (uint64_t)&v49)) != 0)
  {
    v15 = DecodeToPresentationTimeDeltaRange;
    v21 = 0;
    goto LABEL_31;
  }
  if (DWORD2(v47) != DWORD2(v45) || DWORD2(v47) != DWORD2(v57) || DWORD2(v57) != (_DWORD)v51)
    goto LABEL_36;
  if (a3)
    v17 = (_QWORD)v47 + (_QWORD)v57 >= *((_QWORD *)&v50 + 1);
  else
    v17 = (_QWORD)v45 + (_QWORD)v57 <= *((_QWORD *)&v50 + 1);
  *((_BYTE *)v60 + 24) = v17;
LABEL_38:
  FigXPCRelease();
  v24 = *((unsigned __int8 *)v60 + 24);
  _Block_object_dispose(&v59, 8);
  return v24;
}

uint64_t remoteSampleCursor_CreateSampleBuffer(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t BlockBufferData;
  const void *v8;
  uint64_t SampleBufferFromSerializedAtomDataBlockBuffer;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!a3)
    goto LABEL_12;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v11))
  {
    ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v15);
    if ((_DWORD)ObjectID)
      goto LABEL_15;
    if (a2)
    {
      ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a2, &v14);
      if ((_DWORD)ObjectID)
        goto LABEL_15;
    }
    if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply())
    {
LABEL_12:
      SampleBufferFromSerializedAtomDataBlockBuffer = 0;
      goto LABEL_13;
    }
  }
  ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, a2, 0x73736266u, &v13, (uint64_t)&__block_literal_global_69);
  if ((_DWORD)ObjectID)
  {
LABEL_15:
    SampleBufferFromSerializedAtomDataBlockBuffer = ObjectID;
    goto LABEL_13;
  }
  BlockBufferData = FigXPCMessageCreateBlockBufferData();
  v8 = v12;
  if ((_DWORD)BlockBufferData)
  {
    SampleBufferFromSerializedAtomDataBlockBuffer = BlockBufferData;
    if (!v12)
      goto LABEL_13;
    goto LABEL_11;
  }
  SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
  v8 = v12;
  if (v12)
LABEL_11:
    CFRelease(v8);
LABEL_13:
  FigXPCRelease();
  return SampleBufferFromSerializedAtomDataBlockBuffer;
}

uint64_t remoteSampleCursor_StepByDecodeTime(const void *a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned int ObjectID;
  int EventLinkAssertionFromCurrentThread;
  uint64_t v8;
  BOOL v9;
  const void *v10;
  uint64_t v11;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CMBlockBufferRef);
  void *v19;
  uint64_t *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, CMBlockBufferRef);
  void *v25;
  uint64_t v26;
  const void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  v30 = 0;
  if (a1)
  {
    v5 = DerivedStorage;
    ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v36);
    if (!ObjectID)
    {
      EventLinkAssertionFromCurrentThread = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v30);
      v8 = MEMORY[0x1E0C809B0];
      if (!EventLinkAssertionFromCurrentThread)
        goto LABEL_5;
      v22 = MEMORY[0x1E0C809B0];
      v23 = 0x40000000;
      v24 = __remoteSampleCursor_StepByDecodeTime_block_invoke;
      v25 = &__block_descriptor_tmp_70_0;
      v28 = *a2;
      v29 = *((_QWORD *)a2 + 2);
      v26 = v36;
      v27 = a1;
      v16 = MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = __remoteSampleCursor_StepByDecodeTime_block_invoke_2;
      v19 = &unk_1E2F90C80;
      v20 = &v31;
      v21 = a1;
      ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      if (ObjectID)
      {
LABEL_5:
        v13[0] = v8;
        v13[1] = 0x40000000;
        v13[2] = __remoteSampleCursor_StepByDecodeTime_block_invoke_3;
        v13[3] = &__block_descriptor_tmp_72;
        v14 = *a2;
        v15 = *((_QWORD *)a2 + 2);
        ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73736474u, (uint64_t *)&v35, (uint64_t)v13);
        if (!ObjectID)
        {
          v9 = xpc_dictionary_get_BOOL(v35, "SampleCursorPositionWasPinned");
          *((_BYTE *)v32 + 24) = v9;
          v10 = *(const void **)(v5 + 48);
          if (v10)
          {
            CFRelease(v10);
            *(_QWORD *)(v5 + 48) = 0;
          }
          remoteSampleCursor_updateUpcomingSamplesCache(a1, v35);
          ObjectID = 0;
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  if (*((_BYTE *)v32 + 24))
    v11 = 4294954456;
  else
    v11 = ObjectID;
  FigXPCRelease();
  _Block_object_dispose(&v31, 8);
  return v11;
}

uint64_t remoteSampleCursor_StepByPresentationTime(const void *a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int EventLinkAssertionFromCurrentThread;
  uint64_t v7;
  unsigned int ObjectID;
  BOOL v9;
  const void *v10;
  uint64_t v11;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CMBlockBufferRef);
  void *v19;
  uint64_t *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, CMBlockBufferRef);
  void *v25;
  uint64_t v26;
  const void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  v30 = 0;
  if (a1)
  {
    v5 = DerivedStorage;
    EventLinkAssertionFromCurrentThread = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v30);
    v7 = MEMORY[0x1E0C809B0];
    if (!EventLinkAssertionFromCurrentThread)
      goto LABEL_16;
    ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v36);
    if (!ObjectID)
    {
      v22 = v7;
      v23 = 0x40000000;
      v24 = __remoteSampleCursor_StepByPresentationTime_block_invoke;
      v25 = &__block_descriptor_tmp_73;
      v28 = *a2;
      v29 = *((_QWORD *)a2 + 2);
      v26 = v36;
      v27 = a1;
      v16 = v7;
      v17 = 0x40000000;
      v18 = __remoteSampleCursor_StepByPresentationTime_block_invoke_2;
      v19 = &unk_1E2F90CE8;
      v20 = &v31;
      v21 = a1;
      ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      if (ObjectID)
      {
LABEL_16:
        v13[0] = v7;
        v13[1] = 0x40000000;
        v13[2] = __remoteSampleCursor_StepByPresentationTime_block_invoke_3;
        v13[3] = &__block_descriptor_tmp_75;
        v14 = *a2;
        v15 = *((_QWORD *)a2 + 2);
        ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73737074u, (uint64_t *)&v35, (uint64_t)v13);
        if (!ObjectID)
        {
          v9 = xpc_dictionary_get_BOOL(v35, "SampleCursorPositionWasPinned");
          *((_BYTE *)v32 + 24) = v9;
          v10 = *(const void **)(v5 + 48);
          if (v10)
          {
            CFRelease(v10);
            *(_QWORD *)(v5 + 48) = 0;
          }
          remoteSampleCursor_updateUpcomingSamplesCache(a1, v35);
          ObjectID = 0;
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  if (*((_BYTE *)v32 + 24))
    v11 = 4294954456;
  else
    v11 = ObjectID;
  FigXPCRelease();
  _Block_object_dispose(&v31, 8);
  return v11;
}

uint64_t remoteSampleCursor_CopySampleLocation(void *a1, _QWORD *a2, _QWORD *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeID v14;
  uint64_t ObjectID;
  CFTypeID v16;
  int v17;
  int v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *data;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  CFTypeRef cf;
  uint64_t v33;
  xpc_object_t xdict[16];
  size_t length[8];

  length[5] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  cf = 0;
  if (!a1)
    goto LABEL_52;
  v11 = DerivedStorage;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v31))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 72));
    v30 = *(_OWORD *)(v11 + 160);
    v12 = *(_QWORD *)(v11 + 176);
    v13 = *(_QWORD *)(v11 + 184);
    v14 = MEMORY[0x19402EF04](*(_QWORD *)(v11 + 72));
    if (v13 | v12)
    {
      if (!a5 || !v13)
      {
LABEL_10:
        if (a4)
        {
          if (v12)
          {
            ObjectID = remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(v14, v12, a4);
            if ((_DWORD)ObjectID)
              goto LABEL_53;
          }
        }
        goto LABEL_24;
      }
      ObjectID = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(*(_QWORD *)v11 + 48), CFSTR("DataSourceURL"), v13, &cf);
      if ((_DWORD)ObjectID)
      {
LABEL_53:
        v22 = ObjectID;
        goto LABEL_45;
      }
      if (cf)
      {
        v16 = CFGetTypeID(cf);
        v14 = CFURLGetTypeID();
        if (v16 == v14)
        {
          *a5 = cf;
          cf = 0;
          goto LABEL_10;
        }
      }
LABEL_52:
      ObjectID = FigSignalErrorAt();
      goto LABEL_53;
    }
    v28 = 0;
    v33 = 0;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v33))
    {
      ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v28);
      if ((_DWORD)ObjectID)
        goto LABEL_53;
      length[0] = MEMORY[0x1E0C809B0];
      length[1] = 0x40000000;
      length[2] = (size_t)__remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke;
      length[3] = (size_t)&__block_descriptor_tmp_76;
      length[4] = v28;
      xdict[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
      xdict[1] = (xpc_object_t)0x40000000;
      xdict[2] = __remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke_2;
      xdict[3] = &__block_descriptor_tmp_77;
      xdict[4] = &v30;
      xdict[5] = a1;
      xdict[6] = a5;
      xdict[7] = a4;
      ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      if ((_DWORD)ObjectID)
        goto LABEL_53;
    }
LABEL_24:
    if (a2)
      *a2 = v30;
    if (a3)
      *a3 = *((_QWORD *)&v30 + 1);
LABEL_44:
    v22 = 0;
    goto LABEL_45;
  }
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
  {
    v30 = 0uLL;
    v28 = 0;
    v29 = 0;
    v17 = FigPartialSampleTableAccessorCopyUnrefinedSampleLocationInTranslatedByteStreamOrDataSourceURL(*(uint64_t **)(v11 + 24), (unint64_t)&v30, (unint64_t)&v28, a4, a5);
    if (v17 != -17712)
    {
      v18 = v17;
      if (!v17)
      {
        if (v29)
          goto LABEL_52;
        goto LABEL_24;
      }
      LODWORD(v33) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v20 = v33;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if (v21)
      {
        LODWORD(length[0]) = 136315394;
        *(size_t *)((char *)length + 4) = (size_t)"remoteSampleCursor_CopySampleLocation";
        WORD2(length[1]) = 1024;
        *(_DWORD *)((char *)&length[1] + 6) = v18;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  xdict[0] = 0;
  length[0] = 0;
  v22 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73736C63u, (uint64_t *)xdict, (uint64_t)&__block_literal_global_79);
  if (!(_DWORD)v22)
  {
    data = (uint64_t *)xpc_dictionary_get_data(xdict[0], "SampleCursorSampleStorageRange", length);
    if (data && length[0] == 16)
    {
      v24 = *data;
      v25 = data[1];
      if (!((unint64_t)a4 | (unint64_t)a5))
      {
        FigXPCRelease();
        if (a2)
LABEL_41:
          *a2 = v24;
LABEL_42:
        if (a3)
        {
          v22 = 0;
          *a3 = v25;
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      v26 = CMBaseObjectGetDerivedStorage();
      v22 = CopyByteStreamOrDataSource(v26, (uint64_t)xdict[0], a4, a5);
    }
    else
    {
      v22 = FigSignalErrorAt();
      v24 = 0;
      v25 = 0;
    }
    FigXPCRelease();
    if ((_DWORD)v22)
      goto LABEL_45;
    if (a2)
      goto LABEL_41;
    goto LABEL_42;
  }
  FigXPCRelease();
LABEL_45:
  if (cf)
    CFRelease(cf);
  return v22;
}

uint64_t remoteSampleCursor_CopyChunkDetails(void *a1, unint64_t a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, int64_t *a7, _BYTE *a8, _BYTE *a9, _BYTE *a10)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v23;
  unsigned int v24;
  _BYTE *data;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  os_log_type_t type[8];
  uint64_t v44;
  xpc_object_t xdict[16];
  _BYTE length[24];
  void *v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = 0;
  if (a1)
  {
    v17 = DerivedStorage;
    v35 = a6;
    v36 = a8;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v42))
    {
      v41 = 0uLL;
      v39 = 0;
      v40 = 0;
      *(_QWORD *)type = 0;
      v44 = 0;
      if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread((uint64_t *)type))
        goto LABEL_7;
      if (!remoteSampleCursor_GetObjectID((uint64_t)a1, &v44))
      {
        *(_QWORD *)length = MEMORY[0x1E0C809B0];
        *(_QWORD *)&length[8] = 0x40000000;
        *(_QWORD *)&length[16] = __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke;
        v47 = &__block_descriptor_tmp_80_0;
        v48 = v44;
        xdict[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
        xdict[1] = (xpc_object_t)0x40000000;
        xdict[2] = __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke_2;
        xdict[3] = &__block_descriptor_tmp_81;
        xdict[4] = &v39;
        xdict[5] = &v41;
        xdict[6] = a7;
        xdict[7] = a1;
        xdict[8] = (xpc_object_t)a3;
        xdict[9] = (xpc_object_t)a2;
        if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply())
        {
LABEL_7:
          if (a4)
            *a4 = v41;
          if (a5)
            *a5 = *((_QWORD *)&v41 + 1);
          if (a6)
            *a6 = v39;
          if (a8)
            *a8 = v40;
          if (a9)
            *a9 = BYTE1(v40);
          v18 = 0;
          if (a10)
            *a10 = BYTE2(v40);
          return v18;
        }
      }
    }
    else
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
      {
        v41 = 0uLL;
        v39 = 0;
        v40 = 0;
        v19 = FigPartialSampleTableAccessorCopyChunkDetailsInTranslatedByteStreamOrDataSourceURL(*(uint64_t **)(v17 + 24), &v41, (CFTypeRef *)a2, (CFTypeRef *)a3, (unint64_t)&v39, (unint64_t)a7);
        if (v19 == -17712)
        {
          v21 = 1;
        }
        else
        {
          v20 = v19;
          if (v19)
          {
            LODWORD(v44) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v23 = v44;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
              v24 = v23;
            else
              v24 = v23 & 0xFFFFFFFE;
            if (v24)
            {
              *(_DWORD *)length = 136315394;
              *(_QWORD *)&length[4] = "remoteSampleCursor_CopyChunkDetails";
              *(_WORD *)&length[12] = 1024;
              *(_DWORD *)&length[14] = v20;
              _os_log_send_and_compose_impl();
            }
            v21 = 1;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            if (a4)
              *a4 = v41;
            if (a5)
              *a5 = *((_QWORD *)&v41 + 1);
            if (a6)
              *a6 = v39;
            if (a8)
              *a8 = v40;
            if (a9)
              *a9 = BYTE1(v40);
            v21 = 0;
            if (a10)
              *a10 = BYTE2(v40);
          }
        }
        v18 = 0;
        if (!v21)
          return v18;
      }
    }
    xdict[0] = 0;
    *(_QWORD *)length = 0;
    v18 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x7363686Bu, (uint64_t *)xdict, (uint64_t)&__block_literal_global_83);
    if ((_DWORD)v18)
    {
      FigXPCRelease();
      return v18;
    }
    data = xpc_dictionary_get_data(xdict[0], "SampleCursorChunkInfo", (size_t *)length);
    if (data && *(_QWORD *)length == 16)
    {
      v26 = *(_QWORD *)data;
      v27 = data[8];
      v28 = data[9];
      v34 = data[10];
      v29 = (uint64_t *)xpc_dictionary_get_data(xdict[0], "SampleCursorSampleStorageRange", (size_t *)length);
      if (v29 && *(_QWORD *)length == 16)
      {
        v31 = *v29;
        v30 = v29[1];
        if (a7)
          *a7 = xpc_dictionary_get_int64(xdict[0], "SampleCursorSampleIndex");
        if (!(a2 | a3))
        {
          FigXPCRelease();
          goto LABEL_57;
        }
        v32 = CMBaseObjectGetDerivedStorage();
        v18 = CopyByteStreamOrDataSource(v32, (uint64_t)xdict[0], (_QWORD *)a2, (_QWORD *)a3);
      }
      else
      {
        v18 = FigSignalErrorAt();
        v31 = 0;
        v30 = 0;
      }
    }
    else
    {
      v18 = FigSignalErrorAt();
      v31 = 0;
      v30 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v34 = 0;
    }
    FigXPCRelease();
    if ((_DWORD)v18)
      return v18;
LABEL_57:
    if (a4)
      *a4 = v31;
    if (a5)
      *a5 = v30;
    if (v35)
      *v35 = v26;
    if (v36)
      *v36 = v27;
    if (a9)
      *a9 = v28;
    v18 = 0;
    if (a10)
      *a10 = v34;
    return v18;
  }
  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_CopyFormatDescription(const void *a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD *v6;
  int ObjectID;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t type[8];
  os_log_type_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[16];
  _BYTE v30[24];
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (!a2)
      return 0;
    v5 = DerivedStorage;
    if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18))
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
      if (!remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
        goto LABEL_22;
      v10 = FigPartialSampleTableAccessorCopyTranslatedFormatDescription(*(uint64_t **)(v5 + 24), a2);
      if ((_DWORD)v10 == -17712)
        goto LABEL_22;
      v11 = v10;
      if ((_DWORD)v10)
      {
        LODWORD(v24) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v13 = v24;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if (v14)
        {
          *(_DWORD *)v30 = 136315394;
          *(_QWORD *)&v30[4] = "remoteSampleCursor_CopyFormatDescription";
          *(_WORD *)&v30[12] = 1024;
          *(_DWORD *)&v30[14] = v11;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_22;
      }
      return v11;
    }
    v28 = 0;
    v6 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v24 = 0;
    v25 = &v24;
    v26 = 0x2000000000;
    v27 = 0;
    *(_QWORD *)type = 0;
    v21 = type;
    v22 = 0x2000000000;
    v23 = 0;
    v19 = 0;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v19))
    {
      ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v28);
      if (ObjectID)
      {
LABEL_8:
        v9 = ObjectID;
        goto LABEL_21;
      }
      MEMORY[0x19402EEEC](v6[9]);
      *((_QWORD *)v21 + 3) = v6[24];
      MEMORY[0x19402EF04](v6[9]);
      v8 = *((_QWORD *)v21 + 3);
      if (v8)
      {
        ObjectID = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(*v6 + 48), CFSTR("FormatDescription"), v8, v25 + 3);
        goto LABEL_8;
      }
      *(_QWORD *)v30 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v30[8] = 0x40000000;
      *(_QWORD *)&v30[16] = __remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke;
      v31 = &__block_descriptor_tmp_84;
      v32 = v28;
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 0x40000000;
      v29[2] = (uint64_t)__remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke_2;
      v29[3] = (uint64_t)&unk_1E2F90E50;
      v29[4] = (uint64_t)type;
      v29[5] = (uint64_t)&v24;
      v29[6] = (uint64_t)a1;
      v9 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      MEMORY[0x19402EEEC](v6[9]);
      v6[24] = *((_QWORD *)v21 + 3);
      MEMORY[0x19402EF04](v6[9]);
    }
    else
    {
      v9 = 0;
    }
LABEL_21:
    v15 = v25;
    *a2 = (CFTypeRef)v25[3];
    v15[3] = 0;
    _Block_object_dispose(type, 8);
    _Block_object_dispose(&v24, 8);
    if (v9)
    {
LABEL_22:
      v29[0] = 0;
      *(_QWORD *)v30 = 0;
      v16 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73647363u, v29, (uint64_t)&__block_literal_global_87);
      if ((_DWORD)v16)
      {
        v11 = v16;
      }
      else
      {
        v11 = FigXPCMessageCopyFormatDescription();
        if (!(_DWORD)v11)
        {
          *a2 = *(CFTypeRef *)v30;
          *(_QWORD *)v30 = 0;
        }
      }
      FigXPCRelease();
      if (*(_QWORD *)v30)
        CFRelease(*(CFTypeRef *)v30);
      return v11;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int EventLinkAssertionFromCurrentThread;
  uint64_t v9;
  uint64_t ObjectID;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[14];
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v17 = 0;
  v15 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (a2)
  {
    v7 = DerivedStorage;
    EventLinkAssertionFromCurrentThread = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v15);
    v9 = MEMORY[0x1E0C809B0];
    if (EventLinkAssertionFromCurrentThread)
    {
      ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v16);
      if ((_DWORD)ObjectID)
        goto LABEL_21;
      v14[7] = v9;
      v14[8] = 0x40000000;
      v14[9] = __remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken_block_invoke;
      v14[10] = &__block_descriptor_tmp_88_0;
      v14[11] = v16;
      v14[12] = a2;
      v14[13] = a1;
      v14[1] = v9;
      v14[2] = 0x40000000;
      v14[3] = __remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken_block_invoke_2;
      v14[4] = &__block_descriptor_tmp_89_0;
      v14[5] = a3;
      v14[6] = a1;
      if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply())
        goto LABEL_18;
    }
    else
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
      {
        v14[0] = 0;
        if (!remoteSampleCursor_stepInCacheAndReportStepsTaken((uint64_t)a1, 1, a2, v14) && v14[0] == a2)
        {
          if (a3)
            *a3 = a2;
          goto LABEL_18;
        }
      }
    }
    v13[0] = v9;
    v13[1] = 0x40000000;
    v13[2] = __remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken_block_invoke_3;
    v13[3] = &__block_descriptor_tmp_90_0;
    v13[4] = a2;
    v13[5] = v7;
    ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73642B78u, (uint64_t *)&v17, (uint64_t)v13);
    if (!(_DWORD)ObjectID)
    {
      if (a3)
        *a3 = xpc_dictionary_get_int64(v17, "SampleCursorStepsTaken");
      remoteSampleCursor_updateUpcomingSamplesCache(a1, v17);
      goto LABEL_18;
    }
LABEL_21:
    v11 = ObjectID;
    goto LABEL_19;
  }
LABEL_18:
  v11 = 0;
LABEL_19:
  FigXPCRelease();
  return v11;
}

uint64_t remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  int v7;
  int EventLinkAssertionFromCurrentThread;
  uint64_t v9;
  uint64_t ObjectID;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[14];
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
  v7 = remoteSampleCursor_usePartialSampleTable_usePartialSampleTable;
  v15 = 0;
  v16 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (a2)
  {
    EventLinkAssertionFromCurrentThread = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v15);
    v9 = MEMORY[0x1E0C809B0];
    if (EventLinkAssertionFromCurrentThread)
    {
      ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v16);
      if ((_DWORD)ObjectID)
        goto LABEL_21;
      v14[7] = v9;
      v14[8] = 0x40000000;
      v14[9] = __remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken_block_invoke;
      v14[10] = &__block_descriptor_tmp_91_0;
      v14[11] = v16;
      v14[12] = a2;
      v14[13] = a1;
      v14[1] = v9;
      v14[2] = 0x40000000;
      v14[3] = __remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken_block_invoke_2;
      v14[4] = &__block_descriptor_tmp_92_0;
      v14[5] = a3;
      v14[6] = a1;
      if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply())
        goto LABEL_18;
    }
    else if (v7)
    {
      v14[0] = 0;
      if (!remoteSampleCursor_stepInCacheAndReportStepsTaken((uint64_t)a1, 0, a2, v14) && v14[0] == a2)
      {
        if (a3)
          *a3 = a2;
        goto LABEL_18;
      }
    }
    v13[0] = v9;
    v13[1] = 0x40000000;
    v13[2] = __remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken_block_invoke_3;
    v13[3] = &__block_descriptor_tmp_93_0;
    v13[4] = a2;
    v13[5] = DerivedStorage;
    ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73702B78u, (uint64_t *)&v17, (uint64_t)v13);
    if (!(_DWORD)ObjectID)
    {
      if (a3)
        *a3 = xpc_dictionary_get_int64(v17, "SampleCursorStepsTaken");
      remoteSampleCursor_updateUpcomingSamplesCache(a1, v17);
      goto LABEL_18;
    }
LABEL_21:
    v11 = ObjectID;
    goto LABEL_19;
  }
LABEL_18:
  v11 = 0;
LABEL_19:
  FigXPCRelease();
  return v11;
}

uint64_t remoteSampleCursor_getMinimumUpcomingPresentationTime(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  uint64_t *v18;
  __int128 v19;
  CMTime time2;
  CMTime time1;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CMTime v25;
  uint64_t v26;
  CMTime v27;
  __int128 v28;
  CMTimeEpoch v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = *MEMORY[0x1E0CA2E18];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v29 = v9;
  *(_OWORD *)&v27.value = v28;
  v27.epoch = v9;
  if (!a1 || !a3 || !a4)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  v19 = v28;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v26))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      if (a2)
        v18 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 24);
      else
        v18 = 0;
      LODWORD(result) = FigPartialSampleTableAccessorGetMinimumUpcomingPresentationTime(*(uint64_t **)(v10 + 24), v18, (uint64_t)&v28, (uint64_t)&v27);
      if ((_DWORD)result == -17712)
        result = 4294954514;
      else
        result = result;
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v10 + 72);
  v11 = v10 + 72;
  MEMORY[0x19402EEEC](v12);
  v28 = *(_OWORD *)(v11 + 240);
  v29 = *(_QWORD *)(v11 + 256);
  v27 = *(CMTime *)(v11 + 264);
  v13 = *(unsigned __int8 *)(v11 + 236);
  MEMORY[0x19402EF04](*(_QWORD *)v11);
  if (v13)
  {
    if (a2)
    {
      if ((v27.flags & 1) != 0)
      {
        v14 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 72));
        v15 = *(_OWORD *)(v14 + 128);
        v24 = *(_OWORD *)(v14 + 112);
        *(_OWORD *)&v25.value = v15;
        v25.epoch = *(_QWORD *)(v14 + 144);
        v16 = *(_OWORD *)(v14 + 96);
        v22 = *(_OWORD *)(v14 + 80);
        v23 = v16;
        MEMORY[0x19402EF04](*(_QWORD *)(v14 + 72));
        time1 = v27;
        time2 = v25;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          v28 = *MEMORY[0x1E0CA2E30];
          v29 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
          *(_OWORD *)&v27.value = v19;
          v27.epoch = v9;
          result = 4294954513;
LABEL_20:
          *(_OWORD *)a3 = v28;
          *(_QWORD *)(a3 + 16) = v29;
          *a4 = v27;
          return result;
        }
      }
    }
LABEL_15:
    result = 0;
    goto LABEL_20;
  }
  return 4294954513;
}

uint64_t remoteSampleCursor_getBatchSampleTimingAndSizes(const void *a1, int64_t a2, const void *a3, int64_t *a4, int64_t *a5, void *a6, int64_t *a7, void *a8)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t ObjectID;
  uint64_t v19;
  int64_t int64;
  int64_t v21;
  size_t DataLength;
  size_t v23;
  uint64_t v24;
  _QWORD v26[26];
  uint64_t v27;
  OpaqueCMBlockBuffer *v28;
  OpaqueCMBlockBuffer *v29;
  xpc_object_t v30;
  uint64_t v31;
  uint64_t v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  if (!a1)
    goto LABEL_37;
  v17 = DerivedStorage;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v27))
  {
    ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v32);
    if (!(_DWORD)ObjectID)
    {
      if (!a3)
      {
        v19 = 0;
        goto LABEL_29;
      }
      ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a3, &v31);
      if (!(_DWORD)ObjectID)
      {
        v19 = v31;
LABEL_29:
        v26[17] = MEMORY[0x1E0C809B0];
        v26[18] = 0x40000000;
        v26[19] = __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke;
        v26[20] = &__block_descriptor_tmp_94_0;
        v26[21] = v32;
        v26[22] = v19;
        v26[23] = a2;
        v26[24] = a8;
        v26[25] = a6;
        v26[7] = MEMORY[0x1E0C809B0];
        v26[8] = 0x40000000;
        v26[9] = __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_2;
        v26[10] = &__block_descriptor_tmp_95;
        v26[11] = a8;
        v26[12] = v17;
        v26[13] = a7;
        v26[14] = a6;
        v26[15] = a5;
        v26[16] = a4;
        ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      }
    }
LABEL_30:
    v24 = ObjectID;
    goto LABEL_31;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v26[2] = __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_3;
  v26[3] = &__block_descriptor_tmp_96;
  v26[4] = a2;
  v26[5] = a8;
  v26[6] = a6;
  ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, a3, 0x73736267u, (uint64_t *)&v30, (uint64_t)v26);
  if ((_DWORD)ObjectID)
    goto LABEL_30;
  int64 = xpc_dictionary_get_int64(v30, "SampleCursorBatchNumSampleSizeEntries");
  v21 = xpc_dictionary_get_int64(v30, "SampleCursorBatchNumSampleTimingEntries");
  if (a8 && int64)
  {
    ObjectID = FigXPCMessageCreateBlockBufferData();
    if ((_DWORD)ObjectID)
      goto LABEL_30;
    if (v29)
    {
      DataLength = CMBlockBufferGetDataLength(v29);
      if (int64 > a2 || DataLength != 8 * int64)
        goto LABEL_37;
      ObjectID = CMBlockBufferCopyDataBytes(v29, 0, DataLength, a8);
      if ((_DWORD)ObjectID)
        goto LABEL_30;
      if (a7)
        *a7 = int64;
    }
  }
  if (a6 && v21)
  {
    ObjectID = FigXPCMessageCreateBlockBufferData();
    if ((_DWORD)ObjectID)
      goto LABEL_30;
    if (v28)
    {
      v23 = CMBlockBufferGetDataLength(v28);
      if (v21 <= a2 && v23 == 72 * v21)
      {
        ObjectID = CMBlockBufferCopyDataBytes(v28, 0, v23, a6);
        if ((_DWORD)ObjectID)
          goto LABEL_30;
        if (a5)
          *a5 = v21;
        goto LABEL_26;
      }
LABEL_37:
      ObjectID = FigSignalErrorAt();
      goto LABEL_30;
    }
  }
LABEL_26:
  v24 = 0;
  if (a4)
    *a4 = xpc_dictionary_get_int64(v30, "SampleCursorBatchNumSamplesIncluded");
LABEL_31:
  FigXPCRelease();
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  return v24;
}

uint64_t remoteSampleCursor_GetPresentationTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
    return 4294954451;
  MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 72));
  v15 = *(_QWORD *)(v5 + 212);
  v6 = *(_DWORD *)(v5 + 224);
  v16 = *(_DWORD *)(v5 + 220);
  v7 = *(_QWORD *)(v5 + 228);
  v8 = *(_QWORD *)(v5 + 236);
  v9 = *(_DWORD *)(v5 + 244);
  v10 = *(_DWORD *)(v5 + 248);
  v11 = *(_QWORD *)(v5 + 252);
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 72));
  if ((v6 & 1) == 0 || (v10 & 1) == 0 || v11 || v8 < 0)
  {
    result = remoteSampleCursor_GetObjectID(a1, &v14);
    if (!(_DWORD)result)
      return FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
  }
  else
  {
    result = 0;
    *(_QWORD *)a2 = v15;
    *(_DWORD *)(a2 + 8) = v16;
    *(_DWORD *)(a2 + 12) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v8;
    *(_DWORD *)(a2 + 32) = v9;
    *(_DWORD *)(a2 + 36) = v10;
    *(_QWORD *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t __remoteSampleCursor_alwaysEnsureIndependentSubscription_block_invoke()
{
  uint64_t result;

  if (!FigRemote_ShouldConnectToMediaparserdForFileParsing())
    FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  result = FigGetCFPreferenceBooleanWithDefault();
  remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscription = result;
  return result;
}

uint64_t remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(const void *a1, const void *a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  int64_t *DerivedStorage;
  uint64_t ObjectID;
  int v12;
  int64_t *v13;
  _BOOL4 v14;
  xpc_object_t empty;
  uint64_t OSStatus;
  uint64_t uint64;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t value;
  xpc_object_t v23;
  xpc_object_t xdict;
  uint64_t v25;

  DerivedStorage = (int64_t *)CMBaseObjectGetDerivedStorage();
  xdict = 0;
  v25 = 0;
  v23 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_29;
  }
  ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v25);
  if ((_DWORD)ObjectID)
    goto LABEL_29;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_29;
  v21 = a4;
  v12 = *(_DWORD *)(*DerivedStorage + 40);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorCursorMustCopy", v12 > 1);
  xpc_dictionary_set_int64(xdict, "SampleCursorMatchCacheSteps", DerivedStorage[4]);
  if (!a2)
  {
    v13 = 0;
    v14 = 0;
    if (a3)
      goto LABEL_7;
    goto LABEL_11;
  }
  v13 = (int64_t *)CMBaseObjectGetDerivedStorage();
  value = 0;
  ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a2, &value);
  if ((_DWORD)ObjectID)
  {
LABEL_29:
    v19 = ObjectID;
    goto LABEL_25;
  }
  v14 = *(_DWORD *)(*v13 + 40) > 1;
  xpc_dictionary_set_uint64(xdict, "SampleCursorSecondSampleCursorID", value);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorSecondCursorMustCopy", v14);
  xpc_dictionary_set_int64(xdict, "SampleCursorSecondCursorMatchCacheSteps", v13[4]);
  if (a3)
  {
LABEL_7:
    empty = xpc_dictionary_create_empty();
    if (!empty)
    {
LABEL_30:
      OSStatus = FigSignalErrorAt();
      goto LABEL_23;
    }
    OSStatus = (*(uint64_t (**)(uint64_t, xpc_object_t))(a5 + 16))(a5, empty);
    if ((_DWORD)OSStatus)
    {
LABEL_23:
      v19 = OSStatus;
      goto LABEL_25;
    }
    xpc_dictionary_set_uint64(empty, (const char *)*MEMORY[0x1E0CA36A8], a3);
    xpc_dictionary_set_value(xdict, "SampleCursorAdditionalOperation", empty);
  }
LABEL_11:
  OSStatus = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)OSStatus)
    goto LABEL_23;
  if (v12 >= 2)
  {
    uint64 = xpc_dictionary_get_uint64(v23, (const char *)*MEMORY[0x1E0CA36A0]);
    OSStatus = remoteSampleCursor_finishCopy(a1, uint64, *(const void **)(*DerivedStorage + 32));
    if ((_DWORD)OSStatus)
      goto LABEL_23;
  }
  DerivedStorage[4] = 0;
  if (v14)
  {
    v18 = xpc_dictionary_get_uint64(v23, "SampleCursorSecondSampleCursorID");
    OSStatus = remoteSampleCursor_finishCopy(a2, v18, *(const void **)(*v13 + 32));
    if ((_DWORD)OSStatus)
      goto LABEL_23;
  }
  if (a2)
    v13[4] = 0;
  if (a3)
  {
    if (xpc_dictionary_get_value(v23, "SampleCursorAdditionalReply"))
    {
      if (v21)
        *v21 = FigXPCRetain();
      OSStatus = FigXPCMessageGetOSStatus();
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  v19 = 0;
LABEL_25:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (DerivedStorage)
    FigXPCConnectionKillServerOnTimeout();
  return v19;
}

uint64_t remoteSampleCursor_finishCopy(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t *DerivedStorage;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  uint64_t v15;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v15 = 0;
  if (!a2)
  {
    v11 = FigSignalErrorAt();
LABEL_18:
    v9 = v11;
    goto LABEL_14;
  }
  v7 = DerivedStorage;
  if (*DerivedStorage)
  {
    v8 = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v15)
       ? FigServerSampleCursorSubscriptionUnsubscribeViaEventLink((uint64_t)a1, v15, *v7)
       : FigServerSampleCursorSubscriptionUnsubscribe(*v7);
    v9 = v8;
    if ((_DWORD)v8)
      goto LABEL_14;
  }
  v10 = CFGetAllocator(a1);
  v11 = FigServerSampleCursorSubscriptionCreate((uint64_t)v10, a3, a2, *(const void **)(*v7 + 48), (uint64_t *)&cf);
  if ((_DWORD)v11)
    goto LABEL_18;
  v11 = FigServerSampleCursorSubscriptionSubscribe((uint64_t)cf);
  if ((_DWORD)v11)
    goto LABEL_18;
  v12 = (const void *)*v7;
  v13 = cf;
  *v7 = (uint64_t)cf;
  if (v13)
    CFRetain(v13);
  if (v12)
    CFRelease(v12);
  v9 = 0;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t FigServerSampleCursorSubscriptionUnsubscribeViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  if (!a3)
    return 0;
  if (FigAtomicDecrement32())
    return 0;
  FigXPCConnectionDisassociateObject();
  if (*(_BYTE *)(a3 + 24))
    return 0;
  result = remoteSampleCursor_GetObjectID(a1, &v6);
  if (!(_DWORD)result)
    return FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
  return result;
}

uint64_t FigServerSampleCursorSubscriptionUnsubscribe(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if (!a1 || FigAtomicDecrement32() || (FigXPCConnectionDisassociateObject(), *(_BYTE *)(a1 + 24)))
  {
    v2 = 0;
  }
  else
  {
    v4 = FigXPCCreateBasicMessage();
    if ((_DWORD)v4)
    {
      v2 = v4;
    }
    else
    {
      v2 = FigXPCConnectionSendAsyncMessage();
      if (!(_DWORD)v2)
        *(_QWORD *)(a1 + 16) = 0;
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t __remoteSampleCursor_usePartialSampleTable_block_invoke()
{
  uint64_t result;

  if (!FigRemote_ShouldConnectToMediaparserdForFileParsing())
    FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  result = FigGetCFPreferenceNumberWithDefault();
  remoteSampleCursor_usePartialSampleTable_usePartialSampleTable = result;
  return result;
}

uint64_t remoteSampleCursor_getSampleTimingInfoFromServer(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  _OWORD *data;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  size_t v11;
  xpc_object_t xdict;
  uint64_t v13;
  uint64_t v14;

  CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  v11 = 0;
  xdict = 0;
  ObjectID = remoteSampleCursor_GetObjectID(a1, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  data = xpc_dictionary_get_data(xdict, "SampleCursorSampleTimingInfo", &v11);
  if (!data || v11 != 72)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v6 = ObjectID;
    goto LABEL_8;
  }
  v6 = 0;
  if (a2)
  {
    *(_OWORD *)a2 = *data;
    v7 = data[1];
    v8 = data[2];
    v9 = data[3];
    *(_QWORD *)(a2 + 64) = *((_QWORD *)data + 8);
    *(_OWORD *)(a2 + 32) = v8;
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 16) = v7;
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t remoteSampleCursor_updateSimpleCacheViaEventLink(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18);
  if ((_DWORD)result)
  {
    if (a2)
    {
      result = remoteSampleCursor_registerNewFormatDescriptionViaEventLink(a1, *(_QWORD *)(a2 + 104), a2, *(_QWORD *)(a2 + 144), 0);
      if (!(_DWORD)result)
      {
        result = remoteSampleCursor_registerNewSampleDependencyAttributesViaEventLink(a1, *(_QWORD *)(a2 + 112), a2, *(_QWORD *)(a2 + 152), *(_QWORD *)(a2 + 144), 0);
        if (!(_DWORD)result)
        {
          result = remoteSampleCursor_registerNewDataSourceViaEventLink(a1, *(_QWORD *)(a2 + 120), a2, *(_QWORD *)(a2 + 160), *(_QWORD *)(a2 + 152) + *(_QWORD *)(a2 + 144), 0);
          if (!(_DWORD)result)
          {
            v7 = *(_QWORD *)(DerivedStorage + 72);
            v6 = DerivedStorage + 72;
            MEMORY[0x19402EEEC](v7);
            *(_QWORD *)(v6 + 80) = *(_QWORD *)(a2 + 96);
            v8 = *(_OWORD *)(a2 + 40);
            v9 = *(_OWORD *)(a2 + 56);
            v10 = *(_OWORD *)(a2 + 72);
            *(_QWORD *)(v6 + 72) = *(_QWORD *)(a2 + 88);
            *(_OWORD *)(v6 + 56) = v10;
            *(_OWORD *)(v6 + 40) = v9;
            *(_OWORD *)(v6 + 24) = v8;
            *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 24);
            *(_OWORD *)(v6 + 120) = *(_OWORD *)(a2 + 104);
            v12 = *(_OWORD *)(a2 + 176);
            v11 = *(_OWORD *)(a2 + 192);
            *(_OWORD *)(v6 + 172) = *(_OWORD *)(a2 + 208);
            *(_OWORD *)(v6 + 140) = v12;
            *(_OWORD *)(v6 + 156) = v11;
            *(_OWORD *)(v6 + 88) = *(_OWORD *)(a2 + 128);
            v13 = *(_QWORD *)(a2 + 120);
            *(_QWORD *)(v6 + 104) = *(_QWORD *)(a2 + 168);
            *(_QWORD *)(v6 + 112) = v13;
            v14 = *(_QWORD *)(a2 + 240);
            *(_OWORD *)(v6 + 188) = *(_OWORD *)(a2 + 224);
            *(_QWORD *)(v6 + 204) = v14;
            v15 = *(_OWORD *)(a2 + 248);
            *(_QWORD *)(v6 + 228) = *(_QWORD *)(a2 + 264);
            *(_OWORD *)(v6 + 212) = v15;
            *(_BYTE *)(v6 + 236) = *(_BYTE *)(a2 + 272);
            v16 = *(_QWORD *)(a2 + 292);
            *(_OWORD *)(v6 + 240) = *(_OWORD *)(a2 + 276);
            *(_QWORD *)(v6 + 256) = v16;
            v17 = *(_QWORD *)(a2 + 316);
            *(_OWORD *)(v6 + 264) = *(_OWORD *)(a2 + 300);
            *(_QWORD *)(v6 + 280) = v17;
            MEMORY[0x19402EF04](*(_QWORD *)v6);
            return 0;
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t remoteSampleCursor_maybeCreateCopiedCursorViaEventLink(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(a2 + 328);
  if (v5)
    return remoteSampleCursor_finishCopy(a1, v5, *(const void **)(*(_QWORD *)DerivedStorage + 32));
  else
    return 0;
}

uint64_t remoteSampleCursor_registerNewFormatDescriptionViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeID v12;
  uint64_t v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v14))
    return 0;
  if (a3 && a2)
  {
    if (a4)
    {
      v10 = FigInMemoryDeserializerCopyCMFormatDescription();
      v11 = cf;
      if ((_DWORD)v10)
        goto LABEL_17;
      if (!cf || (v12 = CFGetTypeID(cf), v12 != CMFormatDescriptionGetTypeID()))
      {
        v10 = FigSignalErrorAt();
        v11 = cf;
        goto LABEL_17;
      }
      v10 = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(_QWORD *)(*(_QWORD *)DerivedStorage + 48), CFSTR("FormatDescription"), a2, cf);
      v11 = cf;
      if (!a5 || (_DWORD)v10)
        goto LABEL_17;
      if (cf)
      {
LABEL_14:
        v10 = 0;
        *a5 = v11;
        return v10;
      }
LABEL_13:
      v10 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(*(_QWORD *)DerivedStorage + 48), CFSTR("FormatDescription"), a2, &cf);
      v11 = cf;
      if (!(_DWORD)v10)
        goto LABEL_14;
LABEL_17:
      if (v11)
        CFRelease(v11);
      return v10;
    }
    if (a5)
      goto LABEL_13;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_registerNewSampleDependencyAttributesViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  CFTypeID v12;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v16))
    goto LABEL_23;
  if (!a3)
    goto LABEL_16;
  if (a2 == -1)
  {
    v14 = 0;
    cf = 0;
    goto LABEL_18;
  }
  if (!a2)
  {
LABEL_23:
    v14 = 0;
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_15:
    v11 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(*(_QWORD *)DerivedStorage + 48), CFSTR("SampleDependencyAttributes"), a2, &cf);
    goto LABEL_17;
  }
  v11 = FigInMemoryDeserializerCopyCFType();
  if ((_DWORD)v11)
  {
LABEL_17:
    v14 = v11;
    goto LABEL_18;
  }
  if (!cf
    || (v12 = CFGetTypeID(cf), v12 != CFNullGetTypeID())
    && (!cf || (v13 = CFGetTypeID(cf), v13 != CFDictionaryGetTypeID())))
  {
LABEL_16:
    v11 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v14 = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(_QWORD *)(*(_QWORD *)DerivedStorage + 48), CFSTR("SampleDependencyAttributes"), a2, cf);
  if (!(_DWORD)v14 && !cf)
    goto LABEL_15;
LABEL_18:
  if (a6)
  {
    *a6 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  return v14;
}

uint64_t remoteSampleCursor_registerNewDataSourceViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeID v13;
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v15))
    return 0;
  if (a3)
  {
    if (a2)
    {
      if (a4)
      {
        v11 = FigInMemoryDeserializerCopyCFURL();
        v12 = cf;
        if ((_DWORD)v11)
          goto LABEL_17;
        if (!cf || (v13 = CFGetTypeID(cf), v13 != CFURLGetTypeID()))
        {
          v11 = FigSignalErrorAt();
          v12 = cf;
          goto LABEL_17;
        }
        v11 = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(_QWORD *)(*(_QWORD *)DerivedStorage + 48), CFSTR("DataSourceURL"), a2, cf);
        v12 = cf;
        if (!a6 || (_DWORD)v11)
          goto LABEL_17;
        if (cf)
        {
LABEL_14:
          v11 = 0;
          *a6 = v12;
          return v11;
        }
LABEL_13:
        v11 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(*(_QWORD *)DerivedStorage + 48), CFSTR("DataSourceURL"), a2, &cf);
        v12 = cf;
        if (!(_DWORD)v11)
          goto LABEL_14;
LABEL_17:
        if (v12)
          CFRelease(v12);
        return v11;
      }
      if (a6)
        goto LABEL_13;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (FigServer_IsServerProcess())
  {
    v5 = FigByteStreamServerCopyByteStreamForID();
    if (!(_DWORD)v5)
      goto LABEL_3;
LABEL_6:
    v6 = v5;
    goto LABEL_7;
  }
  v5 = FigByteStreamRemoteCreateWithPlaybackProcessObjectID(a2, &cf);
  if ((_DWORD)v5)
    goto LABEL_6;
LABEL_3:
  v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v6;
}

double __remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  double result;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *dataPointerOut;

  v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((_QWORD *)dataPointerOut + 50) = 0;
      result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
      v5 = dataPointerOut;
      v6 = *(_QWORD *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1936944227;
      *(_QWORD *)v5 = v6;
      *((_QWORD *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char *v4;
  _OWORD *v5;
  uint64_t v6;
  size_t v7;
  char *dataPointerOut;

  v7 = 0;
  dataPointerOut = 0;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v4 = dataPointerOut;
    result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      v5 = *(_OWORD **)(a1 + 32);
      if (v5)
        *v5 = *((_OWORD *)dataPointerOut + 21);
      result = remoteSampleCursor_registerNewDataSourceViaEventLink(*(_QWORD *)(a1 + 40), *((_QWORD *)v4 + 45), (uint64_t)v4, *((_QWORD *)v4 + 46), 0, *(_QWORD **)(a1 + 48));
      if (!(_DWORD)result)
      {
        v6 = *((_QWORD *)v4 + 44);
        if (v6)
          return remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(result, v6, *(CFTypeRef **)(a1 + 56));
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleLocationFromServer_block_invoke()
{
  return 0;
}

uint64_t CopyByteStreamOrDataSource(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = FigXPCMessageCopyCFURL();
  if ((_DWORD)v6)
    return v6;
  v6 = FigXPCMessageCopyCFURL();
  if ((_DWORD)v6)
    return v6;
  if (a4)
  {
    *a4 = 0;
    if (!a3)
      return 0;
  }
  else if (!a3)
  {
    return 0;
  }
  v7 = 0;
  *a3 = 0;
  return v7;
}

double __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  double result;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *dataPointerOut;

  v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((_QWORD *)dataPointerOut + 50) = 0;
      result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
      v5 = dataPointerOut;
      v6 = *(_QWORD *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1935894635;
      *(_QWORD *)v5 = v6;
      *((_QWORD *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char *v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;
  char *dataPointerOut;

  v9 = 0;
  dataPointerOut = 0;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, &v9, 0, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v4 = dataPointerOut;
    result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v9 > 0x197)
    {
      v5 = *(_OWORD **)(a1 + 32);
      if (v5)
        *v5 = *((_OWORD *)dataPointerOut + 22);
      v6 = *(_OWORD **)(a1 + 40);
      if (v6)
        *v6 = *((_OWORD *)v4 + 21);
      v7 = *(_QWORD **)(a1 + 48);
      if (v7)
        *v7 = *((_QWORD *)v4 + 46);
      result = remoteSampleCursor_registerNewDataSourceViaEventLink(*(_QWORD *)(a1 + 56), *((_QWORD *)v4 + 48), (uint64_t)v4, *((_QWORD *)v4 + 49), 0, *(_QWORD **)(a1 + 64));
      if (!(_DWORD)result)
      {
        v8 = *((_QWORD *)v4 + 47);
        if (v8)
          return remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(result, v8, *(CFTypeRef **)(a1 + 72));
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleChunkInfoFromServer_block_invoke()
{
  return 0;
}

double __remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  double result;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *dataPointerOut;

  v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((_QWORD *)dataPointerOut + 50) = 0;
      result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
      v5 = dataPointerOut;
      v6 = *(_QWORD *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1935962979;
      *(_QWORD *)v5 = v6;
      *((_QWORD *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke_2(_QWORD *a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char *v4;
  size_t v5;
  char *dataPointerOut;

  v5 = 0;
  dataPointerOut = 0;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, &v5, 0, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v4 = dataPointerOut;
    result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v5 > 0x197)
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *((_QWORD *)dataPointerOut + 42);
      return remoteSampleCursor_registerNewFormatDescriptionViaEventLink(a1[6], *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), (uint64_t)v4, *((_QWORD *)v4 + 43), (_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyFormatDescriptionFromServer_block_invoke()
{
  return 0;
}

uint64_t remoteSampleCursor_stepInCacheAndReportStepsTaken(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  CMTimeEpoch v12;
  uint64_t DecodeTimeRange;
  __int128 v14;
  __int128 v15;
  CMTimeEpoch epoch;
  uint64_t v17;
  uint64_t v18;
  CMTimeFlags flags;
  CMTimeEpoch v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t SampleCount;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t SampleTiming;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  __CFArray *v36;
  const void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  CMTime v50;
  uint64_t v51;
  CMTime v52;
  CMTime rhs;
  CMTime lhs;
  _BYTE v55[72];
  CMTime start;
  CMTimeRange v57;
  CMTime time2;
  CMTime v59;
  CMTimeRange v60;
  CMTimeRange range;
  uint64_t v62;
  uint64_t *v63;
  __CFArray *v64;
  _QWORD *v65;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (uint64_t *)DerivedStorage;
  v7 = 0;
  v8 = 0;
  v9 = -1;
  if (a3 >= 1)
    v9 = 1;
  v44 = v9;
  v45 = (uint64_t *)DerivedStorage;
  while (1)
  {
    v10 = (uint64_t *)v6[3];
    if (!v10)
      break;
    v51 = 0;
    v11 = v10[18];
    v49 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v50.value = *MEMORY[0x1E0CA2E18];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v50.epoch = v12;
    if (a2)
    {
      DecodeTimeRange = FigPartialSampleTableAccessorStepInDecodeOrder(v10, a3, &v51);
      if ((_DWORD)DecodeTimeRange)
        return DecodeTimeRange;
      if (a3 != v51)
      {
        v14 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
        v15 = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&v55[16] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)&v55[32] = v14;
        *(_OWORD *)v55 = v15;
        DecodeTimeRange = FigPartialSampleTableGetDecodeTimeRange(v6[2], v55, 0);
        if ((_DWORD)DecodeTimeRange)
          return DecodeTimeRange;
        if (a3 < 1)
        {
          *(_OWORD *)&v50.value = *(_OWORD *)v55;
          epoch = *(_QWORD *)&v55[16];
        }
        else
        {
          range = *(CMTimeRange *)v55;
          CMTimeRangeGetEnd(&v60.start, &range);
          *(_OWORD *)&v50.value = *(_OWORD *)&v60.start.value;
          epoch = v60.start.epoch;
        }
        v50.epoch = epoch;
      }
    }
    else
    {
      DecodeTimeRange = FigPartialSampleTableAccessorStepInPresentationOrder(v10, a3, &v51, &v50);
      if ((_DWORD)DecodeTimeRange)
        return DecodeTimeRange;
    }
    v17 = v51;
    v18 = *(_QWORD *)(v6[3] + 144) - v11 + v7;
    if (a3 == v51)
    {
      v8 += a3;
      v6[4] += v18;
      break;
    }
    value = v50.value;
    flags = v50.flags;
    timescale = v50.timescale;
    v20 = v50.epoch;
    v21 = CMBaseObjectGetDerivedStorage();
    v64 = 0;
    v65 = 0;
    v62 = 0;
    v63 = 0;
    v22 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)&range.start.epoch = v22;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
    *(_OWORD *)&v60.start.value = *(_OWORD *)&range.start.value;
    *(_OWORD *)&v60.start.epoch = v22;
    *(_OWORD *)&v60.duration.timescale = *(_OWORD *)&range.duration.timescale;
    *(_OWORD *)&v59.value = v49;
    v59.epoch = v12;
    v47 = v18;
    if (!*(_QWORD *)(v21 + 48))
    {
LABEL_56:
      v41 = 0;
      v40 = 0;
      v39 = 0;
      goto LABEL_59;
    }
    v23 = v21;
    v24 = *(_QWORD *)(v21 + 16);
    if (!v24 || !*(_QWORD *)(v23 + 24))
      goto LABEL_54;
    if ((flags & 1) == 0)
      goto LABEL_56;
    SampleCount = FigPartialSampleTableGetDecodeTimeRange(v24, &range, 0);
    if (!(_DWORD)SampleCount)
    {
      v57 = range;
      CMTimeRangeGetEnd(&time2, &v57);
      v57.start.value = value;
      v57.start.timescale = timescale;
      v57.start.flags = flags;
      v57.start.epoch = v20;
      v48 = a3;
      if ((CMTimeCompare(&v57.start, &time2) & 0x80000000) == 0)
      {
        SampleCount = FigPartialSampleTableGetSampleCount(*(_QWORD *)(v23 + 16), &v62);
        if (!(_DWORD)SampleCount)
        {
          v57 = range;
          CMTimeRangeGetEnd(&start, &v57);
          v57.start.value = value;
          v57.start.timescale = timescale;
          v57.start.flags = flags;
          v57.start.epoch = v20;
          CMTimeRangeFromTimeToTime(&v60, &start, &v57.start);
          v57 = range;
          CMTimeRangeGetEnd(&v59, &v57);
LABEL_26:
          v26 = v62;
          v27 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 144);
          v28 = *(_QWORD *)(v23 + 48);
          v57 = v60;
          SampleTiming = FigPartialSampleTableBrokerFindAndRetainPartialSampleTableCoveringDecodeTime(v28, (uint64_t)&v57, &v65);
          if (!(_DWORD)SampleTiming)
          {
            if (!v65)
            {
              v41 = 0;
              v40 = 0;
              v39 = 0;
              a3 = v48;
              v6 = v45;
              goto LABEL_49;
            }
            memset(v55, 0, sizeof(v55));
            SampleTiming = FigPartialSampleTableCreateAccessorAtIndex(v65, 0, &v63);
            if (!(_DWORD)SampleTiming)
            {
              SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v63, (uint64_t)v55);
              if (!(_DWORD)SampleTiming)
              {
                v30 = v63;
                lhs = v59;
                rhs = *(CMTime *)&v55[48];
                CMTimeSubtract(&v57.start, &lhs, &rhs);
                SampleTiming = FigPartialSampleTableAccessorStepByDecodeTime(v30, &v57.start, 0);
                if (!(_DWORD)SampleTiming)
                {
                  SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v63, (uint64_t)v55);
                  if (!(_DWORD)SampleTiming)
                  {
                    lhs = *(CMTime *)&v55[48];
                    rhs = v59;
                    if (CMTimeCompare(&lhs, &rhs))
                      goto LABEL_57;
                    v31 = v63;
                    v32 = v63[18];
                    rhs.value = value;
                    rhs.timescale = timescale;
                    rhs.flags = flags;
                    rhs.epoch = v20;
                    v52 = *(CMTime *)&v55[48];
                    CMTimeSubtract(&lhs, &rhs, &v52);
                    SampleTiming = FigPartialSampleTableAccessorStepByDecodeTime(v31, &lhs, 0);
                    if (!(_DWORD)SampleTiming)
                    {
                      SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v63, (uint64_t)v55);
                      if (!(_DWORD)SampleTiming)
                      {
                        rhs = *(CMTime *)&v55[48];
                        v52.value = value;
                        v52.timescale = timescale;
                        v52.flags = flags;
                        v52.epoch = v20;
                        if (!CMTimeCompare(&rhs, &v52))
                        {
                          v33 = v63[18];
                          v34 = FigPartialSampleTableBrokerCopyInterestTokenForAdjacentTables(*(_QWORD *)(v23 + 48), (uint64_t)v65, &v64);
                          v6 = v45;
                          if ((_DWORD)v34)
                          {
                            v39 = v34;
                            v41 = 0;
                            v40 = 0;
                          }
                          else
                          {
                            v35 = *(const void **)(v23 + 56);
                            v36 = v64;
                            *(_QWORD *)(v23 + 56) = v64;
                            if (v36)
                              CFRetain(v36);
                            if (v35)
                              CFRelease(v35);
                            v37 = *(const void **)(v23 + 16);
                            v38 = v65;
                            *(_QWORD *)(v23 + 16) = v65;
                            if (v38)
                              CFRetain(v38);
                            if (v37)
                              CFRelease(v37);
                            FigPartialSampleTableAccessorDestroy(*(const void ***)(v23 + 24));
                            v39 = 0;
                            *(_QWORD *)(v23 + 24) = v63;
                            v63 = 0;
                            v40 = v26 - v32 - v27 + v33;
                            v41 = 1;
                          }
                          a3 = v48;
                          goto LABEL_47;
                        }
LABEL_57:
                        SampleTiming = FigSignalErrorAt();
                      }
                    }
                  }
                }
              }
            }
          }
          v39 = SampleTiming;
          v41 = 0;
          v40 = 0;
          a3 = v48;
          goto LABEL_59;
        }
        goto LABEL_55;
      }
      v57.start.value = value;
      v57.start.timescale = timescale;
      v57.start.flags = flags;
      v57.start.epoch = v20;
      start = range.start;
      if (CMTimeCompare(&v57.start, &start) < 0)
      {
        v62 = 0;
        v57.start.value = value;
        v57.start.timescale = timescale;
        v57.start.flags = flags;
        v57.start.epoch = v20;
        start = range.start;
        CMTimeRangeFromTimeToTime(&v60, &v57.start, &start);
        v59 = range.start;
        goto LABEL_26;
      }
LABEL_54:
      SampleCount = FigSignalErrorAt();
    }
LABEL_55:
    v39 = SampleCount;
    v41 = 0;
    v40 = 0;
LABEL_59:
    v6 = v45;
LABEL_47:
    if (v65)
      CFRelease(v65);
LABEL_49:
    if (v64)
      CFRelease(v64);
    FigPartialSampleTableAccessorDestroy((const void **)v63);
    if ((_DWORD)v39)
      return v39;
    v8 += v17;
    if (!v41)
      break;
    v7 = v40 + v47;
    a3 = a3 - v44 - v17;
    v8 += v44;
  }
  v39 = 0;
  if (a4)
    *a4 = v8;
  return v39;
}

uint64_t __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke(_QWORD *a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char *v4;
  char *v5;
  size_t v6;
  char *dataPointerOut;

  v6 = 0;
  dataPointerOut = 0;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, &v6, 0, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v4 = dataPointerOut;
    result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v6 > 0x197)
    {
      result = 0;
      *((_QWORD *)dataPointerOut + 50) = 0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
      v5 = dataPointerOut;
      *(_QWORD *)dataPointerOut = a1[4];
      *((_QWORD *)v5 + 1) = a1[5];
      *((_DWORD *)v5 + 4) = 1936941671;
      *((_QWORD *)v5 + 42) = a1[6];
      v5[345] = a1[7] != 0;
      v5[344] = a1[8] != 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t DataPointer;
  char *v5;
  uint64_t v6;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v9;
  _QWORD *v10;
  const UInt8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v5 = dataPointerOut;
  DataPointer = 4294949526;
  if ((dataPointerOut & 7) != 0 || lengthAtOffsetOut <= 0x197)
    return DataPointer;
  if (*(_QWORD *)(a1 + 32) && *((_QWORD *)dataPointerOut + 42) && *((_QWORD *)dataPointerOut + 44))
  {
    v6 = FigInMemoryDeserializerCopyCFType();
    if ((_DWORD)v6)
      return v6;
    BytePtr = CFDataGetBytePtr(0);
    Length = CFDataGetLength(0);
    v9 = *((_QWORD *)v5 + 44);
    if (Length < 8 * v9)
      return FigSignalErrorAt();
    memcpy(*(void **)(a1 + 32), BytePtr, 8 * v9);
    v10 = *(_QWORD **)(a1 + 48);
    if (v10)
      *v10 = *((_QWORD *)v5 + 44);
  }
  if (*(_QWORD *)(a1 + 56) && *((_QWORD *)v5 + 43) && *((_QWORD *)v5 + 45))
  {
    v6 = FigInMemoryDeserializerCopyCFType();
    if (!(_DWORD)v6)
    {
      v11 = CFDataGetBytePtr(0);
      if (CFDataGetLength(0) >= (unint64_t)(72 * *((_QWORD *)v5 + 45)))
      {
        memcpy(*(void **)(a1 + 56), v11, 72 * *((_QWORD *)v5 + 45));
        v12 = *(_QWORD **)(a1 + 64);
        if (v12)
          *v12 = *((_QWORD *)v5 + 45);
        goto LABEL_19;
      }
      return FigSignalErrorAt();
    }
    return v6;
  }
LABEL_19:
  v13 = *(_QWORD **)(a1 + 72);
  DataPointer = 0;
  if (v13)
    *v13 = *((_QWORD *)v5 + 46);
  return DataPointer;
}

uint64_t __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_3(int64_t *a1, xpc_object_t xdict)
{
  xpc_dictionary_set_int64(xdict, "SampleCursorBatchMaxSamplesToInclude", a1[4]);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorBatchRequiresSampleSizeEntries", a1[5] != 0);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorBatchRequiresSampleTimingEntries", a1[6] != 0);
  return 0;
}

void remoteSampleCursor_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  FigSimpleMutexDestroy();
  v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v11))
    FigServerSampleCursorSubscriptionUnsubscribeViaEventLink(a1, v11, *(_QWORD *)DerivedStorage);
  else
    FigServerSampleCursorSubscriptionUnsubscribe(*(_QWORD *)DerivedStorage);
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  FigPartialSampleTableAccessorDestroy(*(const void ***)(DerivedStorage + 24));
  *(_QWORD *)(DerivedStorage + 24) = 0;
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 56);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 360);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 368);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 376);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
}

__CFString *remoteSampleCursor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = (const void *)FigCFCopyCompactDescription();
  v6 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleCursorRemote %p ~> %@/+%lld\n\tcache=%@>"), a1, v5, *(_QWORD *)(DerivedStorage + 32), v6);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  return Mutable;
}

uint64_t remoteSampleCursor_CopyProperty(const void *a1, CMTimeEpoch a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectID;
  uint64_t v12;
  uint64_t PresentationTimeRange;
  _QWORD *v14;
  uint64_t v15;
  CMTimeValue value;
  CFTypeID v17;
  CFTypeID TypeID;
  CMTimeFlags v19;
  CMTimeEpoch v20;
  CMTimeValue v21;
  CMTimeScale v22;
  CMTimeFlags v23;
  uint64_t v24;
  const __CFAllocator *v25;
  CFDictionaryRef v26;
  uint64_t *v27;
  __int128 v28;
  const void *v29;
  CFTypeID v30;
  CFTypeID v31;
  uint64_t *v32;
  const void *v33;
  _QWORD v35[5];
  uint64_t v36;
  uint64_t v37;
  CMTimeRange cf;
  const void *v39;
  uint64_t v40;
  CMTimeRange v41;
  uint64_t v42;
  CMTimeRange range;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CMTimeValue v50;
  CMTimeScale v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v36 = 0;
  if (!a2 || !a4)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_58;
  }
  v9 = DerivedStorage;
  *a4 = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v36))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1)
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_59);
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      if (FigCFEqual())
      {
        v14 = *(_QWORD **)(v9 + 24);
        if (v14)
        {
          cf.start.value = 0;
          v15 = FigPartialSampleTableAccessorCopyTranslatedSampleDependencyAttributes(v14, &cf);
          if (!(_DWORD)v15)
          {
            value = cf.start.value;
            if (cf.start.value)
            {
              v17 = CFGetTypeID((CFTypeRef)cf.start.value);
              TypeID = CFNullGetTypeID();
              value = cf.start.value;
              if (v17 == TypeID)
              {
                if (cf.start.value)
                  CFRelease((CFTypeRef)cf.start.value);
                PresentationTimeRange = 4294954513;
                goto LABEL_55;
              }
            }
            PresentationTimeRange = 0;
            goto LABEL_54;
          }
LABEL_58:
          PresentationTimeRange = v15;
          goto LABEL_55;
        }
      }
      if (FigCFEqual())
      {
        v27 = *(uint64_t **)(v9 + 24);
        if (!v27)
        {
          PresentationTimeRange = 4294954512;
          goto LABEL_55;
        }
        v28 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)&cf.start.value = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&cf.start.epoch = v28;
        *(_OWORD *)&cf.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
        PresentationTimeRange = FigPartialSampleTableAccessorGetPresentationTimeRange(v27, &cf);
        if ((_DWORD)PresentationTimeRange
          || (cf.start.flags & 1) == 0
          || (cf.duration.flags & 1) == 0
          || cf.duration.epoch
          || cf.duration.value < 0)
        {
          goto LABEL_55;
        }
        v41 = cf;
        value = (CMTimeValue)CMTimeRangeCopyAsDictionary(&v41, a3);
LABEL_54:
        *a4 = value;
        goto LABEL_55;
      }
    }
LABEL_51:
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 0x40000000;
    v35[2] = __remoteSampleCursor_CopyProperty_block_invoke;
    v35[3] = &__block_descriptor_tmp_101;
    v35[4] = a2;
    PresentationTimeRange = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73637079u, &v37, (uint64_t)v35);
    if (!(_DWORD)PresentationTimeRange)
      PresentationTimeRange = FigXPCMessageCopyCFObject();
    goto LABEL_55;
  }
  v10 = CMBaseObjectGetDerivedStorage();
  v48 = 0;
  v49 = 0;
  v45 = 0;
  v46 = &v45;
  v47 = 0x2000000000;
  v44 = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v44))
  {
    PresentationTimeRange = 0;
    goto LABEL_39;
  }
  ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v49);
  if ((_DWORD)ObjectID)
    goto LABEL_38;
  if (FigCFEqual())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 72));
    v12 = *(_QWORD *)(v10 + 200);
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 72));
    if (v12)
    {
      if (v12 == -1)
      {
        PresentationTimeRange = 0;
        v46[3] = 0;
        goto LABEL_39;
      }
      ObjectID = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(*(_QWORD *)v10 + 48), CFSTR("SampleDependencyAttributes"), v12, v46 + 3);
      goto LABEL_38;
    }
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 72));
    v50 = *(_QWORD *)(v10 + 212);
    v19 = *(_DWORD *)(v10 + 224);
    v51 = *(_DWORD *)(v10 + 220);
    v20 = *(_QWORD *)(v10 + 228);
    v21 = *(_QWORD *)(v10 + 236);
    v22 = *(_DWORD *)(v10 + 244);
    v23 = *(_DWORD *)(v10 + 248);
    v24 = *(_QWORD *)(v10 + 252);
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 72));
    if ((v19 & 1) != 0 && (v23 & 1) != 0 && !v24 && (v21 & 0x8000000000000000) == 0)
    {
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      range.start.value = v50;
      range.start.timescale = v51;
      range.start.flags = v19;
      range.start.epoch = v20;
      range.duration.value = v21;
      range.duration.timescale = v22;
      range.duration.flags = v23;
      range.duration.epoch = 0;
      v26 = CMTimeRangeCopyAsDictionary(&range, v25);
      PresentationTimeRange = 0;
      v46[3] = (uint64_t)v26;
      goto LABEL_39;
    }
  }
  v41.start.value = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v41.start.timescale = 0x40000000;
  v41.start.epoch = (CMTimeEpoch)__remoteSampleCursor_copyPropertyViaEventLink_block_invoke;
  v41.duration.value = (CMTimeValue)&__block_descriptor_tmp_102;
  *(_QWORD *)&v41.duration.timescale = v49;
  v41.duration.epoch = a2;
  v42 = v10;
  cf.start.value = MEMORY[0x1E0C809B0];
  *(_QWORD *)&cf.start.timescale = 0x40000000;
  cf.start.epoch = (CMTimeEpoch)__remoteSampleCursor_copyPropertyViaEventLink_block_invoke_2;
  cf.duration.value = (CMTimeValue)&unk_1E2F910B8;
  *(_QWORD *)&cf.duration.timescale = &v45;
  cf.duration.epoch = a2;
  v39 = a1;
  v40 = v10;
  ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
LABEL_38:
  PresentationTimeRange = ObjectID;
LABEL_39:
  v29 = (const void *)v46[3];
  if (v29)
  {
    v30 = CFGetTypeID(v29);
    v31 = CFNullGetTypeID();
    v32 = v46;
    v33 = (const void *)v46[3];
    if (v30 == v31)
    {
      if ((_DWORD)PresentationTimeRange)
        PresentationTimeRange = PresentationTimeRange;
      else
        PresentationTimeRange = 4294954513;
      if (v33)
        CFRelease(v33);
    }
    else
    {
      *a4 = (CMTimeValue)v33;
      v32[3] = 0;
    }
  }
  else if (!(_DWORD)PresentationTimeRange)
  {
    _Block_object_dispose(&v45, 8);
    PresentationTimeRange = 4294954513;
    goto LABEL_55;
  }
  _Block_object_dispose(&v45, 8);
  if ((PresentationTimeRange + 12784) >= 2 && (_DWORD)PresentationTimeRange)
    goto LABEL_51;
LABEL_55:
  FigXPCRelease();
  return PresentationTimeRange;
}

uint64_t remoteSampleCursor_SetProperty(uint64_t a1, uint64_t a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeID v7;
  int Value;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  result = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v10);
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      if (a3 && (v7 = CFGetTypeID(a3), v7 == CFBooleanGetTypeID()))
      {
        Value = CFBooleanGetValue(a3);
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
        v9 = *(unsigned __int8 *)(DerivedStorage + 208);
        *(_BYTE *)(DerivedStorage + 208) = Value;
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
        if (v9 == Value)
        {
          return 0;
        }
        else
        {
          result = remoteSampleCursor_GetObjectID(a1, &v11);
          if (!(_DWORD)result)
            return FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyPropertyViaEventLink_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char *v4;
  char *v5;
  size_t v6;
  char *dataPointerOut;

  v6 = 0;
  dataPointerOut = 0;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, &v6, 0, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v4 = dataPointerOut;
    result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v6 > 0x197)
    {
      *((_QWORD *)dataPointerOut + 50) = 0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
      v5 = dataPointerOut;
      *(_QWORD *)dataPointerOut = *(_QWORD *)(a1 + 32);
      *((_QWORD *)v5 + 1) = 0;
      *((_DWORD *)v5 + 4) = 1935896697;
      return FigInMemorySerializerAppendCFString();
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyPropertyViaEventLink_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  CMTimeValue value;
  CMTimeFlags v5;
  CMTimeFlags v6;
  CMTimeValue v7;
  CMTimeEpoch v8;
  CMTimeScale v9;
  const __CFAllocator *v10;
  CFDictionaryRef v11;
  CMTimeRange dataPointerOut;
  size_t lengthAtOffsetOut;

  dataPointerOut.start.value = 0;
  lengthAtOffsetOut = 0;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, (char **)&dataPointerOut);
  if (!(_DWORD)result)
  {
    value = dataPointerOut.start.value;
    result = 4294949526;
    if ((dataPointerOut.start.value & 7) == 0 && lengthAtOffsetOut > 0x197)
    {
      if (FigCFEqual())
      {
        v5 = *(_DWORD *)(value + 188);
        if ((v5 & 1) == 0)
          return 0;
        result = 0;
        v6 = *(_DWORD *)(value + 212);
        if ((v6 & 1) != 0 && !*(_QWORD *)(value + 216))
        {
          v7 = *(_QWORD *)(value + 200);
          if ((v7 & 0x8000000000000000) == 0)
          {
            v8 = *(_QWORD *)(value + 192);
            v9 = *(_DWORD *)(value + 208);
            v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            dataPointerOut.start.value = *(_QWORD *)(value + 176);
            dataPointerOut.start.timescale = *(_DWORD *)(value + 184);
            dataPointerOut.start.flags = v5;
            dataPointerOut.start.epoch = v8;
            dataPointerOut.duration.value = v7;
            dataPointerOut.duration.timescale = v9;
            dataPointerOut.duration.flags = v6;
            dataPointerOut.duration.epoch = 0;
            v11 = CMTimeRangeCopyAsDictionary(&dataPointerOut, v10);
            result = 0;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
          }
        }
      }
      else if (FigCFEqual())
      {
        return remoteSampleCursor_registerNewSampleDependencyAttributesViaEventLink(*(_QWORD *)(a1 + 48), *(_QWORD *)(value + 336), value, *(_QWORD *)(value + 344), 0, (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      }
      else
      {
        if (!*(_QWORD *)(value + 344))
          return 0;
        return FigInMemoryDeserializerCopyCFType();
      }
    }
  }
  return result;
}

uint64_t remoteSampleCursor_copyDataSourceTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(a1 + 16), CFSTR("DataSourceURL"), a2, &cf);
  if ((_DWORD)v4)
    goto LABEL_7;
  if (!cf || (v5 = CFGetTypeID(cf), v5 != CFURLGetTypeID()))
  {
    v4 = FigSignalErrorAt();
LABEL_7:
    v6 = v4;
    goto LABEL_8;
  }
  v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t remoteSampleCursor_copyFormatDescriptionTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(_QWORD *)(a1 + 16), CFSTR("FormatDescription"), a2, &cf);
  if ((_DWORD)v4)
    goto LABEL_7;
  if (!cf || (v5 = CFGetTypeID(cf), v5 != CMFormatDescriptionGetTypeID()))
  {
    v4 = FigSignalErrorAt();
LABEL_7:
    v6 = v4;
    goto LABEL_8;
  }
  v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t remoteSampleCursor_copySampleDependencyAttributesFromOutOfBandID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *ValueAtIndex;

  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2 - 1);
  if (ValueAtIndex)
    ValueAtIndex = CFRetain(ValueAtIndex);
  *a3 = ValueAtIndex;
  return 0;
}

BOOL __remoteSampleCursor_registerNewFormatDescriptionsFromMessage_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t value;
  const __CFAllocator *v8;
  void *bytes_ptr;
  size_t length;
  const __CFAllocator *v11;
  size_t v12;
  CFTypeRef v13;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  uint64 = xpc_dictionary_get_uint64(xdict, "SampleCursorFormatDescriptionOutOfBandID");
  if (uint64)
  {
    v6 = uint64;
    value = xpc_dictionary_get_value(xdict, "SampleCursorFormatDescription");
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    bytes_ptr = (void *)xpc_data_get_bytes_ptr(value);
    length = xpc_data_get_length(value);
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v12 = xpc_data_get_length(value);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMBlockBufferCreateWithMemoryBlock(v8, bytes_ptr, length, v11, 0, 0, v12, 0, &blockBufferOut);
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer();
      v13 = cf;
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), CFSTR("FormatDescription"), v6, cf);
        v13 = cf;
      }
      if (v13)
        CFRelease(v13);
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

BOOL __remoteSampleCursor_registerNewDataSourcesFromMessage_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t uint64;
  uint64_t v6;
  const void *v7;
  const void *v8;

  uint64 = xpc_dictionary_get_uint64(xdict, "SampleCursorDataSourceOutOfBandID");
  if (uint64
    && (v6 = uint64, xpc_dictionary_get_value(xdict, "SampleCursorDataSourceURL"))
    && (v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject()) != 0)
  {
    v8 = v7;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), CFSTR("DataSourceURL"), v6, v7);
    CFRelease(v8);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t registerRemoteSampleCursorOutOfBandStorageType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sRemoteSampleCursorOutOfBandStorageID = result;
  return result;
}

uint64_t RemoteSampleCursorOutOfBandStorage_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void RemoteSampleCursorOutOfBandStorage_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

__CFString *RemoteSampleCursorOutOfBandStorage_CopyDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<RemoteSampleCursorOutOfBandStorage %p>"), a1);
  return Mutable;
}

uint64_t __remoteSampleCursor_useSampleTableBroker_block_invoke()
{
  uint64_t result;

  if (!FigRemote_ShouldConnectToMediaparserdForFileParsing())
    FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  result = FigGetCFPreferenceNumberWithDefault();
  remoteSampleCursor_useSampleTableBroker_useSampleTableBroker = result;
  return result;
}

uint64_t CreateCursorAtSampleInDecodeOrder(const void *a1, uint64_t a2, _QWORD *a3)
{
  const void **DerivedStorage;
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v8;
  int v9;
  CFAllocatorRef v10;
  CFAllocatorRef v11;
  CFTypeRef v12;
  uint64_t updated;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;
  CFTypeRef v22;
  _QWORD *v23;
  xpc_object_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v20 = 0;
  cf = 0;
  v19 = 0;
  ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v25);
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18))
    xpc_dictionary_set_BOOL(v24, "UseSimpleCache", 1);
  ObjectID = FigXPCConnectionCopyMemoryOriginForConnectedProcess();
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  ObjectID = FigXPCConnectionCopyMemoryRecipientForConnectedProcess();
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  uint64 = xpc_dictionary_get_uint64(v23, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    ObjectID = FigSignalErrorAt();
LABEL_25:
    updated = ObjectID;
    goto LABEL_13;
  }
  v8 = uint64;
  v9 = xpc_dictionary_get_uint64(v23, "SampleCursorOptionalMethods");
  v10 = CFGetAllocator(a1);
  ObjectID = FigServerSampleCursorSubscriptionCreate((uint64_t)v10, DerivedStorage[1], v8, DerivedStorage[3], (uint64_t *)&cf);
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  *((_QWORD *)&v16 + 1) = DerivedStorage[3];
  v11 = CFGetAllocator(a1);
  ObjectID = CreateRemoteSampleCursor((uint64_t)v11, DerivedStorage[4], v9, (uint64_t)&v15, cf, v20, v19, &v22);
  if ((_DWORD)ObjectID)
    goto LABEL_25;
  v12 = v22;
  updated = remoteSampleCursor_updateSimpleCache((uint64_t)v22, v23);
  if (!(_DWORD)updated)
  {
    remoteSampleCursor_updateUpcomingSamplesCache(v12, v23);
    *a3 = v12;
    v22 = 0;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  FigXPCRelease();
  FigXPCRelease();
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (DerivedStorage)
    FigXPCConnectionKillServerOnTimeout();
  return updated;
}

uint64_t remoteTrackReader_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = *(_DWORD *)(DerivedStorage + 24);
  if (a3)
    *a3 = *(_DWORD *)(DerivedStorage + 28);
  return 0;
}

uint64_t remoteTrackReader_CopySampleCursorService(const void *a1, CFTypeRef *a2)
{
  uint64_t ObjectID;
  uint64_t v5;
  CFAllocatorRef v6;
  uint64_t v7;
  CFTypeRef cf;
  uint64_t v10;

  cf = 0;
  v10 = 0;
  ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v10);
  if ((_DWORD)ObjectID)
    return ObjectID;
  v5 = v10;
  v6 = CFGetAllocator(a1);
  v7 = SendTrackReaderCreateCursorServiceMessage((uint64_t)a1, v5, 1416848243, (uint64_t)v6, &cf);
  if (!a2 || (_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v7;
}

uint64_t __remoteFigSampleCursor_prepareForEventLinkCallsFromConsistentThread_block_invoke()
{
  return FigThreadAllocKey();
}

uint64_t FigTTMLCaptionWriterCreateForDocument(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  _QWORD *DerivedStorage;
  uint64_t v9;

  if (a2)
  {
    if (a3)
    {
      FigTTMLCaptionWriterGetClassID();
      v5 = CMDerivedObjectCreate();
      if ((_DWORD)v5)
        return v5;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v7 = Mutable;
        FigBytePumpGetFigBaseObject(0);
        DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
        v9 = 0;
        *DerivedStorage = CFRetain(a2);
        DerivedStorage[2] = v7;
        *a3 = 0;
        return v9;
      }
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLCaptionWriterForDocument_Invalidate()
{
  return 0;
}

void figTTMLCaptionWriterForDocument_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
}

CFStringRef figTTMLCaptionWriterForDocument_CopyDebugDesc()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigTTMLDocumentWriterForDocument"));
}

uint64_t figTTMLCaptionWriterForDocument_AddCaption(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t *v8;
  uint64_t started;
  const __CFAllocator *v10;
  __CFArray *Mutable;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, const __CFAllocator *, CMTimeRange *);
  uint64_t matched;
  uint64_t v15;
  CFIndex Count;
  const __CFArray *v17;
  CFIndex v18;
  uint64_t v19;
  CFIndex v20;
  const void *ValueAtIndex;
  const void *v22;
  uint64_t v23;
  CFIndex v24;
  const void *v25;
  uint64_t v26;
  uint64_t *v27;
  CFDictionaryRef v28;
  CFDictionaryRef v29;
  uint64_t v30;
  CMTimeRange v32;
  CMTimeRange cf;
  CMTime time;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v7 = DerivedStorage;
    FigBytePumpGetFigBaseObject(a1);
    v8 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    started = FigTTMLDocumentWriterStartElement(*v8, 7);
    if ((_DWORD)started)
      return started;
    started = FigTTMLDocumentWriterStartElement(*v8, 2);
    if ((_DWORD)started)
      return started;
    started = FigTTMLDocumentWriterStartElement(*v8, 3);
    if ((_DWORD)started)
      return started;
    *(_BYTE *)(v7 + 8) = 1;
  }
  cf.start.value = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v13)
  {
    v13(CMBaseObject, *MEMORY[0x1E0CA3340], v10, &cf);
    if (cf.start.value)
    {
      matched = figTTMLCaptionWriterForDocument_addImplicitRegionIdentifierToArrayRecursively(cf.start.value, Mutable);
      if ((_DWORD)matched)
        goto LABEL_44;
    }
  }
  FigBytePumpGetFigBaseObject(a1);
  v15 = CMBaseObjectGetDerivedStorage();
  if (Mutable)
    Count = CFArrayGetCount(Mutable);
  else
    Count = 0;
  v17 = *(const __CFArray **)(v15 + 16);
  if (v17)
    v17 = (const __CFArray *)CFArrayGetCount(v17);
  v18 = 0;
  v19 = (uint64_t)v17 >= Count ? Count : (uint64_t)v17;
  v20 = v19 & ~(v19 >> 63);
  while (v20 != v18)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 16), v18);
    v22 = CFArrayGetValueAtIndex(Mutable, v18++);
    if (!CFEqual(ValueAtIndex, v22))
    {
      v20 = v18 - 1;
      break;
    }
  }
  matched = figTTMLCaptionWriterForDocument_closeDivElementsToMatchRegionHierarchy(a1, v20);
  if ((_DWORD)matched)
    goto LABEL_44;
  FigBytePumpGetFigBaseObject(a1);
  v23 = CMBaseObjectGetDerivedStorage();
  if (Mutable)
    v24 = CFArrayGetCount(Mutable);
  else
    v24 = 0;
  if (v24 > v20)
  {
    while (1)
    {
      v25 = CFArrayGetValueAtIndex(Mutable, v20);
      matched = FigTTMLDocumentWriterStartElement(*(_QWORD *)v23, 3);
      if ((_DWORD)matched)
        break;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v23 + 16), v25);
      if (v24 == ++v20)
        goto LABEL_28;
    }
LABEL_44:
    v26 = matched;
    goto LABEL_29;
  }
LABEL_28:
  v26 = 0;
LABEL_29:
  if (cf.start.value)
    CFRelease((CFTypeRef)cf.start.value);
  if (Mutable)
    CFRelease(Mutable);
  if (!(_DWORD)v26)
  {
    *(_OWORD *)&v32.start.value = *a3;
    *(_OWORD *)&v32.start.epoch = a3[1];
    *(_OWORD *)&v32.duration.timescale = a3[2];
    FigBytePumpGetFigBaseObject(a1);
    v27 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&cf.start.value = *(_OWORD *)&v32.start.value;
    cf.start.epoch = v32.start.epoch;
    v28 = CMTimeCopyAsDictionary(&cf.start, v10);
    cf = v32;
    CMTimeRangeGetEnd(&time, &cf);
    v29 = CMTimeCopyAsDictionary(&time, v10);
    v30 = FigTTMLDocumentWriterStartElement(*v27, 4);
    if (!(_DWORD)v30)
    {
      v30 = FigTTMLDocumentWriterSetAttribute(*v27, (uint64_t)CFSTR("begin"), (uint64_t)v28);
      if (!(_DWORD)v30)
      {
        v30 = FigTTMLDocumentWriterSetAttribute(*v27, (uint64_t)CFSTR("end"), (uint64_t)v29);
        if (!(_DWORD)v30)
        {
          v30 = FigTTMLDocumentWriterAddCaptionData(*v27, a2);
          if (!(_DWORD)v30)
            v30 = FigTTMLDocumentWriterEndElement(*v27);
        }
      }
    }
    v26 = v30;
    if (v29)
      CFRelease(v29);
    if (v28)
      CFRelease(v28);
  }
  return v26;
}

uint64_t figTTMLCaptionWriterForDocument_Finish(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t *v4;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = figTTMLCaptionWriterForDocument_closeDivElementsToMatchRegionHierarchy(a1, 0);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(DerivedStorage + 8))
    {
      FigBytePumpGetFigBaseObject(a1);
      v4 = (uint64_t *)CMBaseObjectGetDerivedStorage();
      result = FigTTMLDocumentWriterEndElement(*v4);
      if (!(_DWORD)result)
      {
        result = FigTTMLDocumentWriterEndElement(*v4);
        if (!(_DWORD)result)
        {
          result = FigTTMLDocumentWriterEndElement(*v4);
          if (!(_DWORD)result)
          {
            result = FigTTMLDocumentWriterFlush(*v4);
            if (!(_DWORD)result)
              *(_BYTE *)(DerivedStorage + 8) = 0;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t figTTMLCaptionWriterForDocument_addImplicitRegionIdentifierToArrayRecursively(uint64_t a1, __CFArray *a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, void **);
  void *v13;
  void *value;
  CFTypeRef cf1;
  CFTypeRef cf;

  cf1 = 0;
  cf = 0;
  value = 0;
  CMBaseObject = FigCaptionRegionGetCMBaseObject();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    goto LABEL_16;
  v5 = *MEMORY[0x1E0C9AE00];
  v6 = v4(CMBaseObject, *MEMORY[0x1E0CA3418], *MEMORY[0x1E0C9AE00], &cf1);
  if ((_DWORD)v6)
    goto LABEL_23;
  if (cf1 && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9AE40]))
  {
    v9 = 0;
    goto LABEL_17;
  }
  v7 = FigCaptionRegionGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
LABEL_16:
    v9 = 4294954514;
    goto LABEL_17;
  }
  v9 = v8(v7, *MEMORY[0x1E0CA3400], v5, &cf);
  if ((_DWORD)v9)
    v10 = 1;
  else
    v10 = cf == 0;
  if (v10)
    goto LABEL_17;
  v6 = figTTMLCaptionWriterForDocument_addImplicitRegionIdentifierToArrayRecursively();
  if ((_DWORD)v6)
  {
LABEL_23:
    v9 = v6;
    goto LABEL_17;
  }
  v11 = FigCaptionRegionGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v12)
    goto LABEL_16;
  v9 = v12(v11, *MEMORY[0x1E0CA3438], v5, &value);
  v13 = value;
  if (!(_DWORD)v9)
  {
    CFArrayAppendValue(a2, value);
    v13 = value;
  }
  if (v13)
    CFRelease(v13);
LABEL_17:
  if (cf1)
    CFRelease(cf1);
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t figTTMLCaptionWriterForDocument_closeDivElementsToMatchRegionHierarchy(uint64_t a1, CFIndex a2)
{
  uint64_t DerivedStorage;
  const __CFArray *Count;
  CFIndex v5;
  char *v6;
  uint64_t result;
  CFRange v8;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = *(const __CFArray **)(DerivedStorage + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  v5 = (CFIndex)Count - a2;
  if ((uint64_t)Count - a2 < 1)
  {
LABEL_7:
    v8.location = a2;
    v8.length = v5;
    CFArrayReplaceValues(*(CFMutableArrayRef *)(DerivedStorage + 16), v8, 0, 0);
    return 0;
  }
  else
  {
    v6 = (char *)Count - a2;
    while (1)
    {
      result = FigTTMLDocumentWriterEndElement(*(_QWORD *)DerivedStorage);
      if ((_DWORD)result)
        break;
      if (!--v6)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t FigMetadataReaderCreateForQuickTimeUserDataBlockBuffer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return FigMetadataReaderCreateForUserDataBlockBuffer(a1, 1, a2, a3);
}

uint64_t FigMetadataReaderCreateForUserDataBlockBuffer(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t DerivedStorage;

  if (!a3)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v6 = CMDerivedObjectCreate();
  if (!(_DWORD)v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFGetAllocator(0);
    v6 = CMByteStreamCreateForBlockBuffer();
    if (!(_DWORD)v6)
    {
      *(_QWORD *)DerivedStorage = CFRetain(0);
      *(_QWORD *)(DerivedStorage + 8) = 0;
      *(_BYTE *)(DerivedStorage + 16) = a2;
      *a4 = 0;
    }
  }
  return v6;
}

uint64_t FigMetadataReaderCreateForISOUserDataBlockBuffer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return FigMetadataReaderCreateForUserDataBlockBuffer(a1, 0, a2, a3);
}

uint64_t FigMetadataReaderCreateForQuickTimeUserData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FigMetadataReaderCreateForUserData(a1, 1, a2, a3, a4);
}

uint64_t FigMetadataReaderCreateForUserData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  if (a4 < 0)
    return FigSignalErrorAt();
  result = FigAtomStreamInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMetadataReaderCreateForISOUserData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FigMetadataReaderCreateForUserData(a1, 0, a2, a3, a4);
}

uint64_t FigMetadataReaderCreateForQuickTimeUserDataArray(uint64_t a1, const void *a2, _QWORD *a3)
{
  return FigMetadataReaderCreateForUserDataArray(a1, 1, a2, a3);
}

uint64_t FigMetadataReaderCreateForUserDataArray(uint64_t a1, char a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;

  if (!a3 || !a4)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = CFRetain(a3);
    *(_BYTE *)(DerivedStorage + 8) = a2;
    *a4 = 0;
  }
  return v7;
}

uint64_t FigMetadataReaderCreateForISOUserDataArray(uint64_t a1, const void *a2, _QWORD *a3)
{
  return FigMetadataReaderCreateForUserDataArray(a1, 0, a2, a3);
}

void FigUserDataFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigUserDataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  CFTypeRef *DerivedStorage;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int (*v11)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v12;
  CFStringRef v13;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigUserDataReader %p\n"), DerivedStorage);
  v5 = CFCopyDescription(*DerivedStorage);
  if (v5)
  {
    v6 = v5;
    CFStringAppendFormat(Mutable, 0, CFSTR("  ByteStream = %@\n"), v5);
    CFRelease(v6);
  }
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v7)
  {
    v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      v9 = v8;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v8);
      for (i = 0; i != v9; ++i)
      {
        theDict = 0;
        cf = 0;
        v11 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v11 || v11(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v12 = CFCopyDescription(cf);
          if (v12)
          {
            v13 = v12;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v12);
            CFRelease(v13);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)userdataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigUserDataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("complete")))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_7:
    v8 = CFRetain(*v7);
    result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    if (*(_BYTE *)(DerivedStorage + 16))
      v7 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeUserData;
    else
      v7 = (CFTypeRef *)&kFigMetadataFormat_ISOUserData;
    goto LABEL_7;
  }
  return 4294954512;
}

void userdataPropertiesCallback(const void *a1, const __CFNumber *a2, __CFString *a3)
{
  signed int valuePtr;
  char __str[4];
  char v8;

  if (CFEqual(a1, CFSTR("key")))
  {
    v8 = 0;
    valuePtr = 0;
    *(_DWORD *)__str = 0;
    if (CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr))
    {
      valuePtr = bswap32(valuePtr);
      snprintf(__str, 5uLL, "%c%c%c%c", (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      CFStringAppendFormat(a3, 0, CFSTR("     Key = %s\n"), __str);
    }
  }
  else if (CFEqual(a1, CFSTR("keyspace")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Keyspace = %@\n"), a2);
  }
  else if (CFEqual(a1, CFSTR("locale")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Locale = %@\n"), a2);
  }
  else if (CFEqual(a1, CFSTR("languageCode")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Language code = %@\n"), a2);
  }
}

uint64_t FigUserDataCopyValue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  int v14;

  v14 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 16);
  return UserDataCopyValueCommon(a1, v14, a2, a3, a4, a5, a6, a7);
}

uint64_t FigUserDataHasKey(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFRange v8;
  CFArrayRef v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8.location = 0;
  v8.length = 0;
  if (CMBaseObjectGetDerivedStorage() && a3 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!UserDataCopyKeysInfoCommon(*(unsigned __int8 *)(DerivedStorage + 16), a2, a3, &v10, &v9, &v8)
      && !FigAtomStreamInitWithByteStream()
      && !FigAtomStreamInitWithParent())
    {
      while (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
      {
        if (v9)
        {
          if (CFArrayContainsValue(v9, v8, (const void *)HIDWORD(v10)))
            goto LABEL_14;
        }
        else if (HIDWORD(v10) == (_DWORD)v10)
        {
LABEL_14:
          v6 = 1;
          goto LABEL_15;
        }
        if (FigAtomStreamAdvanceToNextAtom())
          break;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v6 = 0;
LABEL_15:
  if (v9)
    CFRelease(v9);
  return v6;
}

CFIndex FigUserDataGetKeyCount(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFIndex Count;
  __CFSet *Mutable;
  int CurrentAtomTypeAndDataLength;
  const __CFAllocator *v9;
  int Atom;
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_6;
  v5 = DerivedStorage;
  if (a2)
  {
    if (*(_BYTE *)(DerivedStorage + 16))
    {
      if (CFEqual(a2, CFSTR("udta")))
        goto LABEL_8;
      if (*(_BYTE *)(v5 + 16))
      {
LABEL_6:
        FigSignalErrorAt();
        return 0;
      }
    }
    if (!CFEqual(a2, CFSTR("uiso")))
      goto LABEL_6;
  }
LABEL_8:
  if (*(_BYTE *)(v5 + 32))
    return *(_QWORD *)(v5 + 24);
  if (FigAtomStreamInitWithByteStream() || FigAtomStreamInitWithParent())
    return 0;
  Mutable = 0;
  while (1)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength)
      break;
    if (!Mutable)
    {
      v9 = CFGetAllocator(a1);
      Mutable = CFSetCreateMutable(v9, 0, 0);
    }
    CFSetAddValue(Mutable, 0);
    Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom)
    {
      if (Atom == -12890)
        v11 = 0;
      else
        v11 = Atom;
      if (Atom == -12893)
        CurrentAtomTypeAndDataLength = 0;
      else
        CurrentAtomTypeAndDataLength = v11;
      break;
    }
  }
  if (!Mutable)
    return 0;
  if (CurrentAtomTypeAndDataLength)
  {
    Count = 0;
  }
  else
  {
    Count = CFSetGetCount(Mutable);
    *(_QWORD *)(v5 + 24) = Count;
    *(_BYTE *)(v5 + 32) = 1;
  }
  CFRelease(Mutable);
  return Count;
}

uint64_t FigUserDataCopyKeyAtIndex(const void *a1, const void *a2, uint64_t a3, uint64_t a4, CFNumberRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v12;
  CFMutableSetRef Mutable;
  uint64_t CurrentAtomTypeAndDataLength;
  const __CFAllocator *v15;
  unsigned int Atom;
  unsigned int v17;
  uint64_t v18;
  unsigned int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (a2)
  {
    if (!*(_BYTE *)(DerivedStorage + 16))
    {
LABEL_8:
      if (!CFEqual(a2, CFSTR("uiso")))
        return FigSignalErrorAt();
      goto LABEL_9;
    }
    if (!CFEqual(a2, CFSTR("udta")))
    {
      if (*(_BYTE *)(v10 + 16))
        return FigSignalErrorAt();
      goto LABEL_8;
    }
  }
LABEL_9:
  if (*(_BYTE *)(v10 + 32) && *(_QWORD *)(v10 + 24) <= a3)
    return FigSignalErrorAt();
  valuePtr = 0;
  v12 = FigAtomStreamInitWithByteStream();
  if ((_DWORD)v12)
    return v12;
  v12 = FigAtomStreamInitWithParent();
  if ((_DWORD)v12)
    return v12;
  Mutable = 0;
  do
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
    {
      v18 = CurrentAtomTypeAndDataLength;
      if (!Mutable)
        return v18;
LABEL_28:
      CFRelease(Mutable);
      return v18;
    }
    if (!Mutable)
    {
      v15 = CFGetAllocator(a1);
      Mutable = CFSetCreateMutable(v15, 0, 0);
    }
    CFSetAddValue(Mutable, (const void *)valuePtr);
    if (CFSetGetCount(Mutable) - 1 == a3)
    {
      v18 = 0;
      *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      if (!Mutable)
        return v18;
      goto LABEL_28;
    }
    Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  if (Atom == -12890)
    v17 = 0;
  else
    v17 = Atom;
  if (Atom == -12893)
    v18 = 0;
  else
    v18 = v17;
  if (Mutable)
    goto LABEL_28;
  return v18;
}

uint64_t FigUserDataGetItemCount(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v16;
  CMBlockBufferRef theBuffer;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  CFRange v33;
  CFArrayRef v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v33.location = 0;
  v33.length = 0;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0;
  theBuffer = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = DerivedStorage;
    v7 = CMBaseObjectGetDerivedStorage();
    if (!UserDataCopyKeysInfoCommon(*(unsigned __int8 *)(v7 + 16), a2, a3, &v35, &v34, &v33)
      && !FigAtomStreamInitWithByteStream()
      && !FigAtomStreamInitWithParent())
    {
      v8 = 0;
      while (1)
      {
        if (FigAtomStreamGetCurrentAtomTypeAndDataLength())
          goto LABEL_31;
        v9 = HIDWORD(v35);
        if (v34)
        {
          if (!CFArrayContainsValue(v34, v33, (const void *)HIDWORD(v35)))
            goto LABEL_30;
          v9 = HIDWORD(v35);
        }
        else if (a3 && (_DWORD)v35 != HIDWORD(v35))
        {
          goto LABEL_30;
        }
        if (*(_BYTE *)(v6 + 16) && (v9 & 0xFF000000) == 0xA9000000)
        {
          v10 = v32;
          if (v32 >= 4)
          {
            if (!FigAtomStreamReadCurrentAtomDataAndCreateBBuf())
            {
              v11 = 0;
              while (!CMBlockBufferGetDataPointer(theBuffer, v11, 0, 0, &v16))
              {
                v12 = bswap32(*(unsigned __int16 *)v16) >> 16;
                v13 = v12 + 4;
                if (v12 <= 0xFFFB && v13 <= (uint64_t)(v10 - v11))
                {
                  ++v8;
                  v11 += v13;
                  if (v11 + 4 <= v10)
                    continue;
                }
                if (theBuffer)
                  CFRelease(theBuffer);
                theBuffer = 0;
                goto LABEL_30;
              }
            }
            goto LABEL_31;
          }
        }
        else
        {
          ++v8;
        }
LABEL_30:
        if (FigAtomStreamAdvanceToNextAtom())
          goto LABEL_31;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v8 = 0;
LABEL_31:
  if (v34)
    CFRelease(v34);
  if (theBuffer)
    CFRelease(theBuffer);
  return v8;
}

uint64_t FigUserDataCopyItemWithKeyAndIndex(const void *a1, const void *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, unint64_t a6, __CFDictionary **a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t v15;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v17;
  int v18;
  unint64_t v19;
  size_t v20;
  CFIndex v21;
  CFIndex v22;
  __CFDictionary **v24;
  unsigned int v25;
  unsigned int v26;
  const UInt8 *v27;
  uint64_t v28;
  CFDataRef v29;
  CFMutableDictionaryRef v30;
  __CFDictionary *v31;
  const void *v32;
  const void *v33;
  CFLocaleIdentifier v34;
  CFLocaleIdentifier v35;
  CFNumberRef v36;
  CFNumberRef v37;
  int v38;
  unint64_t v39;
  int v40;
  CFNumberRef v41;
  CFNumberRef v42;
  __CFDictionary *v43;
  CFNumberRef v44;
  CFNumberRef v45;
  uint64_t Atom;
  uint64_t v47;
  const __CFData *v48;
  uint64_t v49;
  uint64_t BBuf;
  const UInt8 *BytePtr;
  unint64_t Length;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  unsigned __int8 *v59;
  const UInt8 *v60;
  CFIndex v61;
  CFStringEncoding v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t ItemFromRecordingYear;
  CFIndex v68;
  Boolean v69;
  CFStringRef v70;
  CFMutableDictionaryRef v71;
  __CFDictionary *v72;
  const void *v73;
  const void *v74;
  CFLocaleIdentifier v75;
  CFLocaleIdentifier v76;
  CFNumberRef v77;
  CFNumberRef v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  CFMutableDictionaryRef v82;
  __CFDictionary *v83;
  const void *v84;
  const void *v85;
  CFLocaleIdentifier v86;
  CFLocaleIdentifier v87;
  CFNumberRef v88;
  CFNumberRef v89;
  __CFDictionary *Mutable;
  const __CFAllocator *v91;
  CFNumberRef v92;
  CFNumberRef v93;
  const __CFString *v94;
  CFNumberRef v95;
  CFNumberRef v96;
  CFTypeRef cf;
  const __CFAllocator *v99;
  CFNumberRef *v101;
  int v102;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  CFRange v120;
  CFArrayRef v121;
  uint64_t v122;
  CFIndex valuePtr;
  char *v124;
  int v125;
  CMBlockBufferRef v126[3];

  v122 = 0;
  v120.length = 0;
  v121 = 0;
  v119 = 0;
  v120.location = 0;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v112 = 0u;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v105 = 0u;
  dataPointerOut = 0;
  theBuffer = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_204;
  if (!(a6 | (unint64_t)a7))
  {
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
    goto LABEL_206;
  }
  v14 = DerivedStorage;
  v15 = CMBaseObjectGetDerivedStorage();
  CurrentAtomTypeAndDataLength = UserDataCopyKeysInfoCommon(*(unsigned __int8 *)(v15 + 16), a2, a3, &v122, &v121, &v120);
  if ((_DWORD)CurrentAtomTypeAndDataLength
    || (CurrentAtomTypeAndDataLength = FigAtomStreamInitWithByteStream(), (_DWORD)CurrentAtomTypeAndDataLength)
    || (CurrentAtomTypeAndDataLength = FigAtomStreamInitWithParent(), (_DWORD)CurrentAtomTypeAndDataLength))
  {
LABEL_206:
    v28 = CurrentAtomTypeAndDataLength;
LABEL_207:
    v48 = 0;
    goto LABEL_186;
  }
  cf = a1;
  v101 = (CFNumberRef *)a6;
  v17 = 0;
  v99 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_206;
    v18 = HIDWORD(v122);
    if (v121)
    {
      if (!CFArrayContainsValue(v121, v120, (const void *)HIDWORD(v122)))
        goto LABEL_65;
      v18 = HIDWORD(v122);
    }
    else if (a3 && (_DWORD)v122 != HIDWORD(v122))
    {
      goto LABEL_65;
    }
    if (!*(_BYTE *)(v14 + 16) || (v18 & 0xFF000000) != 0xA9000000)
    {
      if (v17 != a4)
      {
        ++v17;
        goto LABEL_65;
      }
      v102 = 0;
      v126[0] = 0;
      v125 = 0;
      valuePtr = 0;
      v124 = 0;
      v49 = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if ((_DWORD)v49)
      {
        v47 = v49;
        v48 = 0;
        a6 = (unint64_t)v101;
      }
      else
      {
        BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
        a6 = (unint64_t)v101;
        if ((_DWORD)BBuf
          || (BBuf = CMBlockBufferGetDataPointer(v126[0], 0, (size_t *)&valuePtr, 0, &v124), (_DWORD)BBuf))
        {
          v47 = BBuf;
          v48 = 0;
        }
        else
        {
          v48 = CFDataCreate(a5, (const UInt8 *)v124, valuePtr);
          if (v48)
            v47 = 0;
          else
            v47 = FigSignalErrorAt();
        }
      }
      if (v126[0])
        CFRelease(v126[0]);
      if ((_DWORD)v47)
        goto LABEL_180;
      if (*(_BYTE *)(v14 + 16))
      {
        if (!FigUserDataWeKnowIsISOText(SHIDWORD(v122)))
        {
          if (!*(_BYTE *)(v14 + 16))
            goto LABEL_84;
LABEL_111:
          if (!a6)
            goto LABEL_167;
          v102 = 0;
          if (!*(_BYTE *)(v14 + 16) && HIDWORD(v122) == 2037543523)
          {
            ItemFromRecordingYear = FigISOUserDataCreateItemFromRecordingYear(v48, (CFNumberRef *)a6);
            if ((_DWORD)ItemFromRecordingYear)
              goto LABEL_217;
LABEL_167:
            if (v48)
LABEL_168:
              CFRelease(v48);
            goto LABEL_169;
          }
          if (!*(_BYTE *)(v14 + 16) && HIDWORD(v122) == 1684108389)
          {
            ItemFromRecordingYear = FigISOUserDataCreateItemFromDate(a5, v48, (CFStringRef *)a6);
            if ((_DWORD)ItemFromRecordingYear)
              goto LABEL_217;
            goto LABEL_167;
          }
          if (!*(_BYTE *)(v14 + 16) && HIDWORD(v122) == 1970430324)
          {
            ItemFromRecordingYear = FigISOUserDataCreateItemFromUserRating(v48, (CFNumberRef *)a6);
            if ((_DWORD)ItemFromRecordingYear)
              goto LABEL_217;
            goto LABEL_167;
          }
          if (!*(_BYTE *)(v14 + 16) && HIDWORD(v122) == 1953000802)
          {
            ItemFromRecordingYear = FigISOUserDataCreateItemFromThumbnailData(a5, v48, (CFDataRef *)a6, a7);
            if ((_DWORD)ItemFromRecordingYear)
              goto LABEL_217;
            goto LABEL_167;
          }
          if (HIDWORD(v122) == 1952540515)
          {
            if (CFDataGetLength(v48) > 0)
            {
              *(_QWORD *)a6 = CFStringCreateFromExternalRepresentation(a5, v48, 0x600u);
              goto LABEL_167;
            }
            ItemFromRecordingYear = FigSignalErrorAt();
LABEL_217:
            v47 = ItemFromRecordingYear;
            goto LABEL_180;
          }
          if (*(_BYTE *)(v14 + 16) && HIDWORD(v122) == 1851878757)
          {
            if (v48)
            {
              *(_QWORD *)a6 = CFStringCreateFromExternalRepresentation(a5, v48, 0);
              goto LABEL_168;
            }
          }
          else
          {
            *(_QWORD *)a6 = v48;
          }
LABEL_169:
          if (!a7)
          {
LABEL_179:
            v48 = 0;
            v47 = 0;
            goto LABEL_180;
          }
          Mutable = *a7;
          if (*a7
            || (v91 = CFGetAllocator(cf),
                Mutable = CFDictionaryCreateMutable(v91, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
                (*a7 = Mutable) != 0))
          {
            v92 = CFNumberCreate(v99, kCFNumberSInt32Type, (char *)&v122 + 4);
            if (v92)
            {
              v93 = v92;
              CFDictionaryAddValue(Mutable, CFSTR("key"), v92);
              CFRelease(v93);
            }
            if (*(_BYTE *)(v14 + 16))
              v94 = CFSTR("udta");
            else
              v94 = CFSTR("uiso");
            CFDictionaryAddValue(Mutable, CFSTR("keyspace"), v94);
            v95 = CFNumberCreate(v99, kCFNumberSInt32Type, &v102);
            if (v95)
            {
              v96 = v95;
              CFDictionaryAddValue(Mutable, CFSTR("dataType"), v95);
              CFDictionaryAddValue(Mutable, CFSTR("dataTypeNamespace"), CFSTR("com.apple.quicktime.udta"));
              CFRelease(v96);
            }
            goto LABEL_179;
          }
LABEL_204:
          v47 = FigSignalErrorAt();
          v48 = 0;
          goto LABEL_180;
        }
      }
      else
      {
LABEL_84:
        if (!FigISOUserDataWeKnowIsISOText(SHIDWORD(v122)))
          goto LABEL_111;
      }
      v102 = 2;
      if (!*(_BYTE *)(v14 + 16) && HIDWORD(v122) == 1819239273)
      {
        if (!v48)
          goto LABEL_153;
        BytePtr = CFDataGetBytePtr(v48);
        Length = CFDataGetLength(v48);
        if (!BytePtr)
          goto LABEL_153;
        if (Length < 0x14)
          goto LABEL_153;
        v53 = bswap32(*((unsigned __int16 *)BytePtr + 2));
        v54 = HIWORD(v53);
        LOWORD(v126[0]) = HIWORD(v53);
        if (HIWORD(v53) < 0x400u)
          goto LABEL_153;
        if (a6)
        {
          v55 = (unint64_t)&BytePtr[Length];
          v56 = (unsigned __int8 *)(BytePtr + 6);
          v57 = Length - 6;
          if (v57 < 2)
            goto LABEL_96;
          v58 = *v56;
          if (v58 == 255)
          {
            if (BytePtr[7] != 254)
              goto LABEL_96;
          }
          else if (v58 != 254 || BytePtr[7] != 255)
          {
LABEL_96:
            if ((unint64_t)v56 < v55)
            {
              v59 = (unsigned __int8 *)(BytePtr + 7);
              while (*(v59 - 1))
              {
                ++v59;
                if (!--v57)
                  goto LABEL_153;
              }
              goto LABEL_156;
            }
            goto LABEL_153;
          }
          if ((unint64_t)v56 >= v55 - 1)
            goto LABEL_153;
          while (*v56 || v56[1])
          {
            v56 += 2;
            if ((unint64_t)v56 >= v55 - 1)
              goto LABEL_153;
          }
          v59 = v56 + 2;
LABEL_156:
          if ((unint64_t)(v59 + 12) > v55)
          {
LABEL_153:
            ItemFromRecordingYear = FigSignalErrorAt();
            if ((_DWORD)ItemFromRecordingYear)
              goto LABEL_217;
            goto LABEL_167;
          }
          *(_QWORD *)a6 = CFStringCreateWithFormat(a5, 0, CFSTR("%+08.4f%+09.4f%+08.3f/"), (float)((float)(int)bswap32(*(_DWORD *)(v59 + 5)) * 0.000015259), (float)((float)(int)bswap32(*(_DWORD *)(v59 + 1)) * 0.000015259), (float)((float)(int)bswap32(*(_DWORD *)(v59 + 9)) * 0.000015259));
        }
        if (a7)
        {
          v82 = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v82)
          {
            v83 = v82;
            v84 = (const void *)FigCFLocaleCreateWithMovieLangCode();
            if (v84)
            {
              v85 = v84;
              CFDictionaryAddValue(v83, CFSTR("locale"), v84);
              CFRelease(v85);
            }
            v86 = FigUserDataExtendedLanguageTagCreateWithMovieLangCode(a5, v54);
            if (v86)
            {
              v87 = v86;
              CFDictionaryAddValue(v83, CFSTR("extendedLanguageTag"), v86);
              CFRelease(v87);
            }
            v88 = CFNumberCreate(v99, kCFNumberSInt16Type, v126);
            if (v88)
            {
              v89 = v88;
              CFDictionaryAddValue(v83, CFSTR("languageCode"), v88);
              CFRelease(v89);
            }
            *a7 = v83;
          }
        }
        goto LABEL_167;
      }
      if (!v48)
      {
        v62 = 0;
        goto LABEL_216;
      }
      v60 = CFDataGetBytePtr(v48);
      v61 = CFDataGetLength(v48);
      v62 = 0;
      if (!v60 || (v63 = v61 - 6, v61 < 6))
      {
LABEL_216:
        ItemFromRecordingYear = FigSignalErrorAt();
        if ((_DWORD)ItemFromRecordingYear)
          goto LABEL_217;
LABEL_130:
        HIDWORD(v80) = v62 - 256;
        LODWORD(v80) = v62 - 256;
        v79 = v80 >> 26;
        if (v79 > 5)
          v81 = 2;
        else
          v81 = dword_1932FB5C8[v79];
        v102 = v81;
        goto LABEL_167;
      }
      v64 = bswap32(*((unsigned __int16 *)v60 + 2));
      v65 = HIWORD(v64);
      LOWORD(v126[0]) = HIWORD(v64);
      if (HIWORD(v64) >= 0x400u)
      {
        if (v63 < 2)
        {
          if (v61 == 6)
            goto LABEL_210;
        }
        else
        {
          v66 = v60[6];
          if (v66 == 255)
          {
            if (v60[7] == 254)
              goto LABEL_139;
          }
          else if (v66 == 254 && v60[7] == 255)
          {
LABEL_139:
            if (v63 >= 4 && !v60[v61 - 1])
            {
              v68 = v61 - 8;
              if (!v60[v61 - 2])
              {
                v69 = 1;
                v62 = 256;
                if (!a6)
                {
LABEL_121:
                  if (a7)
                  {
                    v71 = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (v71)
                    {
                      v72 = v71;
                      v73 = (const void *)FigCFLocaleCreateWithMovieLangCode();
                      if (v73)
                      {
                        v74 = v73;
                        CFDictionaryAddValue(v72, CFSTR("locale"), v73);
                        CFRelease(v74);
                      }
                      v75 = FigUserDataExtendedLanguageTagCreateWithMovieLangCode(a5, v65);
                      if (v75)
                      {
                        v76 = v75;
                        CFDictionaryAddValue(v72, CFSTR("extendedLanguageTag"), v75);
                        CFRelease(v76);
                      }
                      v77 = CFNumberCreate(v99, kCFNumberSInt16Type, v126);
                      if (v77)
                      {
                        v78 = v77;
                        CFDictionaryAddValue(v72, CFSTR("languageCode"), v77);
                        CFRelease(v78);
                      }
                      *a7 = v72;
                    }
                  }
                  goto LABEL_130;
                }
LABEL_119:
                v70 = CFStringCreateWithBytes(a5, v60 + 6, v68, v62, v69);
                if (v70)
                {
                  *(_QWORD *)a6 = v70;
                  goto LABEL_121;
                }
                goto LABEL_216;
              }
            }
            goto LABEL_210;
          }
        }
        v68 = v61 - 7;
        if (!v60[v61 - 1])
        {
          v69 = 0;
          v62 = 134217984;
          if (!a6)
            goto LABEL_121;
          goto LABEL_119;
        }
      }
LABEL_210:
      v62 = 0;
      goto LABEL_216;
    }
    v19 = v119;
    if (v119 >= 4)
    {
      CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!(_DWORD)CurrentAtomTypeAndDataLength)
      {
        v20 = 0;
        while (1)
        {
          CurrentAtomTypeAndDataLength = CMBlockBufferGetDataPointer(theBuffer, v20, 0, 0, &dataPointerOut);
          if ((_DWORD)CurrentAtomTypeAndDataLength)
            goto LABEL_206;
          v21 = bswap32(*(unsigned __int16 *)dataPointerOut) >> 16;
          v22 = v21 + 4;
          if (v21 > 0xFFFB || v22 > (uint64_t)(v19 - v20))
          {
LABEL_24:
            LODWORD(v24) = 1;
            goto LABEL_62;
          }
          if (a4 == v17)
            break;
          v20 += v22;
          ++v17;
          if (v20 + 4 > v19)
            goto LABEL_24;
        }
        LODWORD(v126[0]) = 0;
        v25 = bswap32(*((unsigned __int16 *)dataPointerOut + 1));
        v26 = HIWORD(v25);
        LOWORD(valuePtr) = HIWORD(v25);
        if (v101)
        {
          v27 = (const UInt8 *)(dataPointerOut + 4);
          v28 = FigCFStringCreateWithBytesAndMovieLangCode();
          if ((_DWORD)v28 == -12993)
          {
            v29 = CFDataCreate(a5, v27, v21);
            if (v29)
            {
              v28 = 0;
              *v101 = v29;
              goto LABEL_34;
            }
            v28 = FigSignalErrorAt();
            v24 = a7;
            if ((_DWORD)v28)
              goto LABEL_207;
LABEL_55:
            if (v24)
            {
              v43 = *v24;
              if (*v24)
              {
                v44 = CFNumberCreate(v99, kCFNumberSInt32Type, (char *)&v122 + 4);
                if (v44)
                {
                  v45 = v44;
                  CFDictionaryAddValue(v43, CFSTR("key"), v44);
                  CFRelease(v45);
                }
                CFDictionaryAddValue(v43, CFSTR("keyspace"), CFSTR("udta"));
              }
              LODWORD(v24) = 0;
            }
            v17 = a4;
LABEL_62:
            if (theBuffer)
              CFRelease(theBuffer);
            theBuffer = 0;
            if (!(_DWORD)v24)
            {
              v48 = 0;
              v47 = 0;
              a6 = (unint64_t)v101;
              goto LABEL_180;
            }
            goto LABEL_65;
          }
LABEL_34:
          v24 = a7;
          if (!a7 || (_DWORD)v28)
          {
            if ((_DWORD)v28)
              goto LABEL_207;
            goto LABEL_55;
          }
        }
        else
        {
          v24 = a7;
          if (!a7)
            goto LABEL_55;
        }
        v30 = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v30)
          goto LABEL_55;
        v31 = v30;
        v32 = (const void *)FigCFLocaleCreateWithMovieLangCode();
        if (v32)
        {
          v33 = v32;
          CFDictionaryAddValue(v31, CFSTR("locale"), v32);
          CFRelease(v33);
        }
        v34 = FigUserDataExtendedLanguageTagCreateWithMovieLangCode(a5, v26);
        if (v34)
        {
          v35 = v34;
          CFDictionaryAddValue(v31, CFSTR("extendedLanguageTag"), v34);
          CFRelease(v35);
        }
        v36 = CFNumberCreate(v99, kCFNumberSInt16Type, &valuePtr);
        if (v36)
        {
          v37 = v36;
          CFDictionaryAddValue(v31, CFSTR("languageCode"), v36);
          CFRelease(v37);
        }
        HIDWORD(v39) = LODWORD(v126[0]) - 256;
        LODWORD(v39) = LODWORD(v126[0]) - 256;
        v38 = v39 >> 26;
        if ((v38 - 4) >= 2 && v38)
        {
          if (v38 != 2)
          {
            LODWORD(v124) = 1;
            goto LABEL_52;
          }
          v40 = 2;
        }
        else
        {
          v40 = 3;
        }
        LODWORD(v124) = v40;
LABEL_52:
        v41 = CFNumberCreate(v99, kCFNumberSInt32Type, &v124);
        if (v41)
        {
          v42 = v41;
          CFDictionaryAddValue(v31, CFSTR("dataType"), v41);
          CFDictionaryAddValue(v31, CFSTR("dataTypeNamespace"), CFSTR("com.apple.quicktime.udta"));
          CFRelease(v42);
        }
        v24 = a7;
        *a7 = v31;
        goto LABEL_55;
      }
      goto LABEL_206;
    }
LABEL_65:
    Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!(_DWORD)Atom);
  v28 = Atom;
  v47 = 0;
  v48 = 0;
  a6 = (unint64_t)v101;
  if ((_DWORD)Atom != -12890 && (_DWORD)Atom != -12893)
    goto LABEL_186;
LABEL_180:
  if (!a6 || (_DWORD)v47)
  {
    v28 = v47;
  }
  else if (*(_QWORD *)a6)
  {
    v28 = 0;
  }
  else
  {
    v28 = 4294954689;
  }
LABEL_186:
  if (v121)
    CFRelease(v121);
  if (v48)
    CFRelease(v48);
  if (theBuffer)
    CFRelease(theBuffer);
  return v28;
}

uint64_t UserDataCopyValueCommon(uint64_t a1, int a2, CFTypeRef cf1, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  const __CFString *v15;
  uint64_t (*v16)(uint64_t, CFTypeRef, uint64_t);
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *);
  unsigned int v20;
  const __CFDictionary *v21;
  const __CFLocale *v22;
  const __CFString *Value;
  unsigned int v24;
  const __CFString *v25;
  const __CFLocale *v26;
  const __CFString *v27;
  unsigned int v28;
  int v29;
  const void *v30;
  unsigned int v31;
  _QWORD *v33;
  _QWORD *v34;
  CFTypeRef v35;
  CFTypeRef v36;
  const __CFString *key;
  uint64_t v38;
  CFTypeRef v40;
  CFTypeRef cf;

  if (!a1
    || !a4
    || !cf1
    || !a7
    || !CFEqual(cf1, CFSTR("comn")) && (!a2 ? (v15 = CFSTR("uiso")) : (v15 = CFSTR("udta")), !CFEqual(cf1, v15)))
  {
    v28 = FigSignalErrorAt();
    v29 = 0;
    goto LABEL_50;
  }
  v16 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v16 || (v38 = v16(a1, cf1, a4), v38 < 1))
  {
    v29 = 0;
    v28 = 0;
    goto LABEL_50;
  }
  v33 = a7;
  v34 = a8;
  v17 = 0;
  v35 = 0;
  v36 = 0;
  key = (const __CFString *)*MEMORY[0x1E0C9B088];
  v18 = 1;
  while (1)
  {
    v40 = 0;
    cf = 0;
    v19 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v19)
    {
      v28 = -12782;
      goto LABEL_42;
    }
    v20 = v19(a1, cf1, a4, v18 - 1, a6, &cf, &v40);
    if (v20)
      break;
    if (!a5 || CFGetTypeID(cf) == a5)
    {
      v21 = (const __CFDictionary *)v40;
      v22 = CFLocaleCopyCurrent();
      Value = (const __CFString *)CFLocaleGetValue(v22, key);
      v24 = 0;
      if (v21)
      {
        v25 = Value;
        if (Value)
        {
          v26 = (const __CFLocale *)CFDictionaryGetValue(v21, CFSTR("locale"));
          v24 = v26
             && (v27 = (const __CFString *)CFLocaleGetValue(v26, key)) != 0
             && CFStringCompare(v27, v25, 0) == kCFCompareEqualTo;
        }
      }
      if (v22)
        CFRelease(v22);
      if (v24 >= v17)
      {
        if (v36)
          CFRelease(v36);
        if (v35)
          CFRelease(v35);
        v17 = v24 + 1;
        v36 = CFRetain(cf);
        v35 = CFRetain(v40);
      }
      else
      {
        v17 = 1;
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v40)
      CFRelease(v40);
    v28 = 0;
    if (v18 < v38)
    {
      ++v18;
      if (v17 < 2)
        continue;
    }
    goto LABEL_42;
  }
  v28 = v20;
LABEL_42:
  if (v36)
  {
    *v33 = v36;
    v30 = v35;
    if (v34)
    {
      *v34 = v35;
      v29 = 1;
      goto LABEL_50;
    }
    v29 = 1;
    if (v35)
      goto LABEL_49;
  }
  else
  {
    v29 = 0;
    v30 = v35;
    if (v35)
LABEL_49:
      CFRelease(v30);
  }
LABEL_50:
  if (a5)
    v31 = -12608;
  else
    v31 = -12607;
  if (v29 | v28)
    return v28;
  else
    return v31;
}

uint64_t UserDataCopyKeysInfoCommon(int a1, CFTypeRef cf1, uint64_t a3, _DWORD *a4, CFArrayRef *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v12;
  CFIndex Count;
  CFTypeID v14;
  CFTypeID v16;
  CFTypeID v17;
  CFArrayRef theArray;
  unsigned int valuePtr;

  v9 = a3;
  valuePtr = 0;
  theArray = 0;
  if (!cf1)
  {
    if (!a3)
      goto LABEL_7;
    goto LABEL_36;
  }
  if (!CFEqual(cf1, CFSTR("comn")))
  {
    if (a1)
    {
      if (!CFEqual(cf1, CFSTR("udta")))
        goto LABEL_36;
      if (!v9)
        goto LABEL_7;
      v14 = CFGetTypeID((CFTypeRef)v9);
      if (v14 == CFStringGetTypeID())
      {
        if (!FigUserDataStringKeyToOSTypeKey((const __CFString *)v9, &valuePtr))
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else
    {
      if (!CFEqual(cf1, CFSTR("uiso")))
        goto LABEL_36;
      if (!v9)
        goto LABEL_7;
      v16 = CFGetTypeID((CFTypeRef)v9);
      if (v16 == CFStringGetTypeID())
      {
        if (!FigISOUserDataStringKeyToOSTypeKey((const __CFString *)v9, &valuePtr))
          goto LABEL_36;
LABEL_35:
        v9 = 0;
        goto LABEL_7;
      }
    }
    v17 = CFGetTypeID((CFTypeRef)v9);
    if (v17 != CFNumberGetTypeID())
      goto LABEL_36;
    CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &valuePtr);
    goto LABEL_35;
  }
  if (!v9)
  {
LABEL_36:
    v9 = FigSignalErrorAt();
    if ((_DWORD)v9)
      goto LABEL_37;
LABEL_7:
    Count = 0;
    if (!a5)
      goto LABEL_20;
LABEL_19:
    *a5 = theArray;
    theArray = 0;
    goto LABEL_20;
  }
  if (a1)
    v12 = FigUserDataCopyOSTypeKeysFromCommonKey((void *)v9, &theArray);
  else
    v12 = FigISOUserDataCopyOSTypeKeysFromCommonKey((void *)v9, &theArray);
  v9 = v12;
  if ((_DWORD)v12)
  {
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
  }
  else
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v9 = 0;
      if (!a5)
        goto LABEL_20;
      goto LABEL_19;
    }
    v9 = 4294954691;
  }
LABEL_37:
  Count = 0;
  valuePtr = 0;
  if (a5)
    goto LABEL_19;
LABEL_20:
  if (a6)
  {
    *a6 = 0;
    a6[1] = Count;
  }
  if (a4)
    *a4 = valuePtr;
  if (theArray)
    CFRelease(theArray);
  return v9;
}

uint64_t FigISOUserDataCreateItemFromRecordingYear(const __CFData *a1, CFNumberRef *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  __int16 valuePtr;

  if (!a1)
    return FigSignalErrorAt();
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (!BytePtr || Length != 6)
    return FigSignalErrorAt();
  valuePtr = bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16;
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
  return 0;
}

uint64_t FigISOUserDataCreateItemFromDate(const __CFAllocator *a1, const __CFData *a2, CFStringRef *a3)
{
  CFStringRef v4;

  if (!a2)
    return FigSignalErrorAt();
  v4 = CFStringCreateFromExternalRepresentation(a1, a2, 0x8000100u);
  if (!v4)
    return FigSignalErrorAt();
  *a3 = v4;
  return 0;
}

uint64_t FigISOUserDataCreateItemFromUserRating(const __CFData *a1, CFNumberRef *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  __int16 valuePtr;

  if (!a1)
    return FigSignalErrorAt();
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (!BytePtr || Length != 8)
    return FigSignalErrorAt();
  valuePtr = BytePtr[7];
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
  return 0;
}

uint64_t FigISOUserDataCreateItemFromThumbnailData(const __CFAllocator *a1, CFDataRef theData, CFDataRef *a3, __CFDictionary **a4)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  __CFDictionary *Mutable;
  __CFDictionary *v11;

  if (!theData)
    return FigSignalErrorAt();
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  if (!BytePtr || Length <= 7 || *((_DWORD *)BytePtr + 1) != 1734701162 || (uint64_t)(Length - 8) <= 0)
    return FigSignalErrorAt();
  *a3 = CFDataCreate(a1, BytePtr + 8, Length - 8);
  if (a4)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      CFDictionaryAddValue(Mutable, CFSTR("dataType"), (const void *)*MEMORY[0x1E0CA5BA8]);
      CFDictionaryAddValue(v11, CFSTR("dataTypeNamespace"), CFSTR("com.apple.uti"));
      *a4 = v11;
    }
  }
  return 0;
}

CFLocaleIdentifier FigUserDataExtendedLanguageTagCreateWithMovieLangCode(const __CFAllocator *a1, unsigned int a2)
{
  const __CFDictionary *ISO639_1Mapping;
  const __CFDictionary *ISO639_1NonCanonicalMapping;
  UInt8 bytes[3];
  void *value;

  value = 0;
  if (a2 == 0x7FFF)
    return CFSTR("und");
  if (a2 <= 0x3FF)
    return CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(a1, a2, -1);
  ISO639_1Mapping = (const __CFDictionary *)FigMetadataGetISO639_1Mapping();
  if (!CFDictionaryGetValueIfPresent(ISO639_1Mapping, (const void *)a2, (const void **)&value))
  {
    ISO639_1NonCanonicalMapping = (const __CFDictionary *)FigMetadataGetISO639_1NonCanonicalMapping();
    if (!CFDictionaryGetValueIfPresent(ISO639_1NonCanonicalMapping, (const void *)a2, (const void **)&value))
    {
      bytes[0] = (a2 >> 10) | 0x60;
      bytes[1] = (a2 >> 5) & 0x1F | 0x60;
      bytes[2] = a2 & 0x1F | 0x60;
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 3, 0x600u, 0);
    }
  }
  return (CFLocaleIdentifier)value;
}

void ArrayUserDataFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *ArrayUserDataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v10;
  CFStringRef v11;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" Fig(Array)UserDataReader %p\n"), DerivedStorage);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
  {
    v6 = v5(a1, 0, 0);
    if (v6 >= 1)
    {
      v7 = v6;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v6);
      for (i = 0; i != v7; ++i)
      {
        theDict = 0;
        cf = 0;
        v9 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v9 || v9(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v10 = CFCopyDescription(cf);
          if (v10)
          {
            v11 = v10;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v10);
            CFRelease(v11);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)userdataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ArrayUserDataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("complete")))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_7:
    v8 = CFRetain(*v7);
    result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    if (*(_BYTE *)(DerivedStorage + 8))
      v7 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeUserData;
    else
      v7 = (CFTypeRef *)&kFigMetadataFormat_ISOUserData;
    goto LABEL_7;
  }
  return 4294954512;
}

uint64_t ArrayUserDataCopyValue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  int v14;

  v14 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 8);
  return UserDataCopyValueCommon(a1, v14, a2, a3, a4, a5, a6, a7);
}

const void *ArrayUserDataHasKey(uint64_t a1, const void *a2, const void *HasKey)
{
  uint64_t DerivedStorage;
  uint64_t *v6;
  unsigned int v7;
  CFTypeRef v8;
  CFTypeRef v10;
  __int128 v11;
  CFTypeRef cf;

  cf = 0;
  v10 = 0;
  v11 = 0uLL;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!HasKey)
  {
    FigSignalErrorAt();
    goto LABEL_9;
  }
  if (!a2)
  {
    FigSignalErrorAt();
    HasKey = 0;
    goto LABEL_9;
  }
  v6 = (uint64_t *)DerivedStorage;
  v7 = FigUserDataCopyKeysInfoAsCFNumber(a2, HasKey, *(unsigned __int8 *)(DerivedStorage + 8), &v10, (__CFArray **)&cf, &v11);
  v8 = cf;
  if (!v7)
  {
    HasKey = (const void *)FigMetadataArrayHasKey(*v6, (uint64_t)v10, 0, (const __CFArray *)cf, v11, *((CFIndex *)&v11 + 1));
    v8 = cf;
    if (!cf)
      goto LABEL_9;
    goto LABEL_8;
  }
  HasKey = 0;
  if (cf)
LABEL_8:
    CFRelease(v8);
LABEL_9:
  if (v10)
    CFRelease(v10);
  return HasKey;
}

CFIndex ArrayUserDataGetKeyCount(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFIndex result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_6;
  v4 = DerivedStorage;
  if (a2)
  {
    if (*(_BYTE *)(DerivedStorage + 8))
    {
      if (CFEqual(a2, CFSTR("udta")))
        goto LABEL_8;
      if (*(_BYTE *)(v4 + 8))
      {
LABEL_6:
        FigSignalErrorAt();
        return 0;
      }
    }
    if (!CFEqual(a2, CFSTR("uiso")))
      goto LABEL_6;
  }
LABEL_8:
  if (*(_BYTE *)(v4 + 24))
    return *(_QWORD *)(v4 + 16);
  result = FigMetadataArrayGetKeyCount(*(const __CFArray **)v4, 0);
  *(_QWORD *)(v4 + 16) = result;
  *(_BYTE *)(v4 + 24) = 1;
  return result;
}

uint64_t ArrayUserDataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (a2)
  {
    if (*(_BYTE *)(DerivedStorage + 8))
    {
      if (CFEqual(a2, CFSTR("udta")))
        goto LABEL_9;
      if (*(_BYTE *)(v9 + 8))
        return FigSignalErrorAt();
    }
    if (!CFEqual(a2, CFSTR("uiso")))
      return FigSignalErrorAt();
  }
LABEL_9:
  if (*(_BYTE *)(v9 + 24) && *(_QWORD *)(v9 + 16) <= a3)
    return FigSignalErrorAt();
  return FigMetadataArrayCopyKeyAtIndex(*(const __CFArray **)v9, a3, 0, a5);
}

uint64_t ArrayUserDataGetItemCount(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  const __CFArray **v6;
  unsigned int v7;
  CFTypeRef v8;
  uint64_t ItemCount;
  CFTypeRef v11;
  __int128 v12;
  CFTypeRef cf;

  cf = 0;
  v11 = 0;
  v12 = 0uLL;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  v6 = (const __CFArray **)DerivedStorage;
  v7 = FigUserDataCopyKeysInfoAsCFNumber(a2, a3, *(unsigned __int8 *)(DerivedStorage + 8), &v11, (__CFArray **)&cf, &v12);
  v8 = cf;
  if (v7)
  {
    ItemCount = 0;
    if (!cf)
      goto LABEL_5;
    goto LABEL_4;
  }
  ItemCount = FigMetadataArrayGetItemCount(*v6, (uint64_t)v11, 0, (const __CFArray *)cf, v12, *((CFIndex *)&v12 + 1));
  v8 = cf;
  if (cf)
LABEL_4:
    CFRelease(v8);
LABEL_5:
  if (v11)
    CFRelease(v11);
  return ItemCount;
}

uint64_t ArrayUserDataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, unint64_t a6, __CFDictionary **a7)
{
  uint64_t DerivedStorage;
  const __CFArray **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v18;
  __int128 v19;
  CFTypeRef cf;

  cf = 0;
  v18 = 0;
  v19 = 0uLL;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !(a6 | (unint64_t)a7))
  {
    v16 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v13 = (const __CFArray **)DerivedStorage;
  v14 = FigUserDataCopyKeysInfoAsCFNumber(a2, a3, *(unsigned __int8 *)(DerivedStorage + 8), &v18, (__CFArray **)&cf, &v19);
  if ((_DWORD)v14 == -12605)
  {
    v15 = 0;
    goto LABEL_8;
  }
  v15 = (uint64_t)v14;
  if (!(_DWORD)v14)
  {
    v16 = FigMetadataArrayCopyItemWithKeyAndIndex(*v13, (uint64_t)v18, a4, 0, (const __CFArray *)cf, v19, *((CFIndex *)&v19 + 1), (_QWORD *)a6, a7);
LABEL_7:
    v15 = v16;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v15;
}

const void *FigUserDataCopyKeysInfoAsCFNumber(CFTypeRef cf1, CFTypeRef cf, int a3, _QWORD *a4, __CFArray **a5, _OWORD *a6)
{
  CFTypeID v12;
  const void *v13;
  uint64_t v14;
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  unsigned int ValueAtIndex;
  CFNumberRef v19;
  __int128 v21;
  CFArrayRef theArray;
  unsigned int v23;

  v23 = 0;
  theArray = 0;
  v21 = 0uLL;
  if (cf && (v12 = CFGetTypeID(cf), v12 == CFNumberGetTypeID()))
  {
    v13 = CFRetain(cf);
  }
  else
  {
    v14 = UserDataCopyKeysInfoCommon(a3, cf1, (uint64_t)cf, &v23, &theArray, &v21);
    if ((_DWORD)v14)
    {
      v13 = (const void *)v14;
      goto LABEL_26;
    }
    if (v23)
      v13 = FigUserDataCopyKeyAsCFNumber(v23);
    else
      v13 = 0;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          v19 = FigUserDataCopyKeyAsCFNumber(ValueAtIndex);
          CFArrayAppendValue(Mutable, v19);
          if (v19)
            CFRelease(v19);
        }
      }
      goto LABEL_16;
    }
  }
  Mutable = 0;
LABEL_16:
  if (a4)
  {
    *a4 = v13;
    v13 = 0;
  }
  if (a5)
  {
    *a5 = Mutable;
    Mutable = 0;
  }
  if (a6)
    *a6 = v21;
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
  {
    CFRelease(v13);
    v13 = 0;
  }
LABEL_26:
  if (theArray)
    CFRelease(theArray);
  return v13;
}

CFNumberRef FigUserDataCopyKeyAsCFNumber(unsigned int a1)
{
  const __CFDictionary *OSTypeKeyToCFNumberMapping;
  const void *Value;
  const void *v4;
  unsigned int valuePtr;

  valuePtr = a1;
  OSTypeKeyToCFNumberMapping = (const __CFDictionary *)FigUserDataGetOSTypeKeyToCFNumberMapping();
  Value = CFDictionaryGetValue(OSTypeKeyToCFNumberMapping, (const void *)a1);
  if (!Value)
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v4 = Value;
  CFRetain(Value);
  return (CFNumberRef)v4;
}

uint64_t FAIGCommon_createRenderPipelineOptions(const __CFAllocator *a1, CFTypeRef cf, int a3, CMTime *a4, CMTime *a5, CFDictionaryRef *a6)
{
  unsigned int v11;
  CFIndex v12;
  CFDictionaryRef v13;
  void **v14;
  const void *v15;
  CMTime v17;
  int valuePtr;
  void *values[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *keys[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)keys = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)values = 0u;
  v20 = 0u;
  if (cf)
  {
    keys[0] = CFSTR("FormatDescription");
    values[0] = (void *)CFRetain(cf);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  if ((a4->flags & 0x1D) == 1)
  {
    *(_QWORD *)((unint64_t)keys | (8 * v11)) = CFSTR("PreparedQueueLowWaterLevel");
    v17 = *a4;
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v11++ & 1))) = CMTimeCopyAsDictionary(&v17, a1);
  }
  if ((a5->flags & 0x1D) == 1)
  {
    keys[v11] = CFSTR("PreparedQueueHighWaterLevel");
    v17 = *a5;
    values[v11++] = CMTimeCopyAsDictionary(&v17, a1);
  }
  if (a3)
  {
    keys[v11] = CFSTR("EarlyDumpStage");
    values[v11] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    v12 = v11 + 1;
    v13 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, v12, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    v12 = v11;
    v13 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v11)
      goto LABEL_13;
  }
  v14 = values;
  do
  {
    v15 = *v14++;
    CFRelease(v15);
    --v12;
  }
  while (v12);
LABEL_13:
  *a6 = v13;
  return 0;
}

uint64_t FAIGCommon_createRotatedCVImageBuffer(void *a1, uint64_t a2, int a3, int a4, int a5, int a6, const __CFAllocator *a7, CFTypeRef *a8)
{
  CFTypeID v15;
  uint64_t v16;
  __CFDictionary *MutableCopy;
  CFMutableDictionaryRef Mutable;
  size_t Height;
  size_t Width;
  size_t v22;
  uint64_t v23;
  CFTypeRef *v24;
  OSType pixelFormatType;
  CFTypeRef v26;

  v26 = 0;
  if (!a1 || !a8 || (v15 = CFGetTypeID(a1), v15 != CVPixelBufferGetTypeID()))
  {
    v16 = FigSignalErrorAt();
LABEL_9:
    MutableCopy = 0;
    Mutable = 0;
    goto LABEL_10;
  }
  if (a3 > 179)
  {
    if (a3 != 180 && a3 != 270)
      goto LABEL_26;
  }
  else
  {
    if (!a3)
    {
      if (!(a5 | a4))
      {
LABEL_26:
        FigSignalErrorAt();
        v16 = 0;
        goto LABEL_9;
      }
      pixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a1);
      goto LABEL_23;
    }
    if (a3 != 90)
      goto LABEL_26;
  }
  pixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a1);
  if (a3 != 180)
  {
    Height = CVPixelBufferGetHeight((CVPixelBufferRef)a1);
    Width = CVPixelBufferGetWidth((CVPixelBufferRef)a1);
    goto LABEL_24;
  }
LABEL_23:
  Height = CVPixelBufferGetWidth((CVPixelBufferRef)a1);
  Width = CVPixelBufferGetHeight((CVPixelBufferRef)a1);
LABEL_24:
  v22 = Width;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA90E0]);
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FD8]);
  if (a6)
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v16 = 0;
      goto LABEL_10;
    }
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0], Mutable);
  }
  v23 = CVPixelBufferCreate(a7, Height, v22, pixelFormatType, MutableCopy, (CVPixelBufferRef *)&v26);
  if ((_DWORD)v23
    || (v23 = VTImageRotationSessionCreate(), (_DWORD)v23)
    || (v24 = (CFTypeRef *)MEMORY[0x1E0C9AE50], a5)
    && (v23 = VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E0CED6D8], (CFTypeRef)*MEMORY[0x1E0C9AE50]), (_DWORD)v23)
    || a4 && (v23 = VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E0CED6E0], *v24), (_DWORD)v23))
  {
    v16 = v23;
  }
  else
  {
    v16 = MEMORY[0x1940303EC](0, a1, v26);
    if (!(_DWORD)v16)
    {
      *a8 = v26;
      v26 = 0;
    }
  }
LABEL_10:
  if (Mutable)
    CFRelease(Mutable);
  if (v26)
    CFRelease(v26);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v16;
}

uint64_t FAIGCommon_createImageRequest(__int128 *a1, const void *a2, const void *a3, int a4, _QWORD *a5)
{
  char *v10;
  char *v11;
  __int128 v12;
  CFTypeRef v13;
  CFTypeRef v14;

  v10 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x1060040DCD8CE1AuLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v12 = *a1;
  *(_QWORD *)(v10 + 28) = *((_QWORD *)a1 + 2);
  *(_OWORD *)(v10 + 12) = v12;
  if (a2)
    v13 = CFRetain(a2);
  else
    v13 = 0;
  *((_QWORD *)v11 + 5) = v13;
  if (a3)
    v14 = CFRetain(a3);
  else
    v14 = 0;
  *((_QWORD *)v11 + 6) = v14;
  *((_DWORD *)v11 + 14) = a4;
  *a5 = v11;
  return 0;
}

void FAIGCommon_releaseImageRequest(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[5];
    if (v2)
    {
      CFRelease(v2);
      a1[5] = 0;
    }
    v3 = (const void *)a1[6];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

__n128 FAIGCommon_decodedImageBecameAvailable(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *a2;
  *(_QWORD *)(a4 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 32) = 0;
  return result;
}

void FAIGCommon_handleRenderPipelineDecodeErrorNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  void *v5;
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;

  *(_DWORD *)(a2 + 32) = -12911;
  v5 = (void *)(a2 + 32);
  if (a5)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a5))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("OSStatus"));
      if (Value)
      {
        v9 = Value;
        v10 = CFNumberGetTypeID();
        if (v10 == CFGetTypeID(v9))
          CFNumberGetValue(v9, kCFNumberSInt32Type, v5);
      }
    }
  }
}

uint64_t FAIGCommon_handleBufferConsumedNotification(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      *(_DWORD *)(a2 + 32) = -12911;
    return FigSemaphoreSignal();
  }
  return result;
}

uint64_t FAIGCommon_getOutputImagePropertiesForImageRetrieval(CMVideoFormatDescriptionRef videoDesc, CFDictionaryRef theDict, int a3, _DWORD *a4, CFDictionaryRef *a5)
{
  const void *Value;
  const void *v11;
  int v12;
  _BOOL4 v13;
  double width;
  double height;
  CGSize PresentationDimensions;
  CGSize v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  double *p_valuePtr;
  float v22;
  float v23;
  void *v24;
  double valuePtr;
  double v27;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (!theDict)
  {
    v13 = 1;
    PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(videoDesc, 1u, 1u);
    height = PresentationDimensions.height;
    width = PresentationDimensions.width;
    valuePtr = PresentationDimensions.height;
    v27 = PresentationDimensions.width;
    v12 = 1;
    if (!a4)
      goto LABEL_28;
    goto LABEL_27;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("ApertureMode"));
  if (Value)
  {
    v11 = Value;
    v12 = CFEqual(Value, CFSTR("CleanAperture"));
    if (!v12)
    {
      v13 = CFEqual(v11, CFSTR("ProductionAperture")) != 0;
      goto LABEL_9;
    }
  }
  else
  {
    v12 = 1;
  }
  v13 = 1;
LABEL_9:
  v17 = CMVideoFormatDescriptionGetPresentationDimensions(videoDesc, v13, v12);
  valuePtr = v17.height;
  v27 = v17.width;
  v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MaxWidth"));
  if (v18)
  {
    if (!a3)
    {
      CFNumberGetValue(v18, kCFNumberCGFloatType, &v27);
      v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MaxHeight"));
      if (!v19)
        goto LABEL_18;
      goto LABEL_16;
    }
    CFNumberGetValue(v18, kCFNumberCGFloatType, &valuePtr);
  }
  v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MaxHeight"));
  if (!v19)
    goto LABEL_18;
  if (!a3)
  {
LABEL_16:
    p_valuePtr = &valuePtr;
    goto LABEL_17;
  }
  p_valuePtr = &v27;
LABEL_17:
  CFNumberGetValue(v19, kCFNumberCGFloatType, p_valuePtr);
LABEL_18:
  height = valuePtr;
  width = v27;
  if (v27 < v17.width || valuePtr < v17.height)
  {
    v22 = v27 / v17.width;
    v23 = valuePtr / v17.height;
    if (v22 >= v23)
    {
      width = v17.width * v23;
      v27 = width;
      if (!a4)
        goto LABEL_28;
    }
    else
    {
      height = v17.height * v22;
      valuePtr = height;
      if (!a4)
        goto LABEL_28;
    }
    goto LABEL_27;
  }
  valuePtr = v17.height;
  v27 = v17.width;
  height = v17.height;
  width = v17.width;
  if (a4)
  {
LABEL_27:
    *a4 = (int)width;
    a4[1] = (int)height;
  }
LABEL_28:
  if (v13 && a5 && v12)
  {
    v24 = (void *)*MEMORY[0x1E0CED848];
    values = (void *)*MEMORY[0x1E0CEDB30];
    keys[0] = v24;
    *a5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  return 0;
}

void FAIGCommon_checkAndUpdateOutputImagePropertiesForImageRetrieval(_DWORD *a1, uint64_t a2, CFDictionaryRef *a3, CFTypeRef cf, _BYTE *a5)
{
  BOOL v8;
  CFDictionaryRef v9;
  unint64_t v10;
  const void *v11;

  if (a1)
  {
    v8 = *a1 != (_DWORD)a2 || a1[1] != HIDWORD(a2);
    *(_QWORD *)a1 = a2;
  }
  else
  {
    v8 = 1;
  }
  v9 = *a3;
  v10 = (unint64_t)cf | (unint64_t)*a3;
  if (v10)
  {
    if (cf && v9)
    {
      v11 = (const void *)*MEMORY[0x1E0CED848];
      CFDictionaryGetValue(*a3, (const void *)*MEMORY[0x1E0CED848]);
      CFDictionaryGetValue((CFDictionaryRef)cf, v11);
      if (FigCFEqual())
      {
        LOBYTE(v10) = 0;
        goto LABEL_16;
      }
      v9 = *a3;
      *a3 = (CFDictionaryRef)cf;
    }
    else
    {
      *a3 = (CFDictionaryRef)cf;
      if (!cf)
      {
        if (!v9)
        {
LABEL_15:
          LOBYTE(v10) = 1;
          goto LABEL_16;
        }
LABEL_14:
        CFRelease(v9);
        goto LABEL_15;
      }
    }
    CFRetain(cf);
    if (!v9)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_16:
  if (a5)
    *a5 = v8 | v10;
}

BOOL FAIGCommon_standardDynamicRangeIsPreferred(uint64_t a1)
{
  if (!a1)
    return 1;
  FigCFDictionaryGetStringValue();
  return FigCFEqual() == 0;
}

uint64_t FigAssetImageGeneratorGetClassID()
{
  MEMORY[0x19402F294](&FigAssetImageGeneratorGetClassID_sRegisterFigAssetImageGeneratorBaseTypeOnce, RegisterFigAssetImageGeneratorBaseType);
  return sFigAssetImageGeneratorClassID;
}

uint64_t RegisterFigAssetImageGeneratorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetImageGeneratorGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetImageGeneratorGetClassID_sRegisterFigAssetImageGeneratorBaseTypeOnce, RegisterFigAssetImageGeneratorBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigAssetImageGeneratorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetImageGenerator %p]"), a1);
}

uint64_t FigActivitySchedulerCreateForCFRunLoop(const __CFAllocator *a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  __CFRunLoopSource *v9;
  CFRunLoopSourceContext v11;
  CFTypeRef v12;

  v12 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  memset(&v11, 0, sizeof(v11));
  FigActivitySchedulerGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    goto LABEL_9;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  CFRetain(a2);
  v8 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 40) = v8;
  if (!v8
    || (v11.version = 0,
        v11.info = (void *)DerivedStorage,
        memset(&v11.retain, 0, 56),
        v11.perform = (void (__cdecl *)(void *))activityOnRunLoop_perform,
        v9 = CFRunLoopSourceCreate(a1, 0, &v11),
        (*(_QWORD *)(DerivedStorage + 16) = v9) == 0))
  {
    v6 = FigSignalErrorAt();
LABEL_9:
    if (v12)
      CFRelease(v12);
    return v6;
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)(DerivedStorage + 8), v9, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  CFRunLoopAddSource(*(CFRunLoopRef *)(DerivedStorage + 8), *(CFRunLoopSourceRef *)(DerivedStorage + 16), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v6 = 0;
  *a3 = v12;
  return v6;
}

uint64_t activityOnRunLoop_perform(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD);

  if (result)
  {
    v1 = result;
    if (!*(_BYTE *)result)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 40));
      v2 = *(void (**)(_QWORD))(v1 + 32);
      if (v2)
        v2(*(_QWORD *)(v1 + 24));
      JUMPOUT(0x19402EF04);
    }
  }
  return result;
}

uint64_t activityOnRunLoop_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  __CFRunLoopSource *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  *(_BYTE *)DerivedStorage = 1;
  v2 = *(__CFRunLoopSource **)(DerivedStorage + 16);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)(DerivedStorage + 8), v2, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    CFRunLoopRemoveSource(*(CFRunLoopRef *)(v1 + 8), *(CFRunLoopSourceRef *)(v1 + 16), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(v1 + 16));
    CFRelease(*(CFTypeRef *)(v1 + 16));
    *(_QWORD *)(v1 + 16) = 0;
  }
  if (*(_QWORD *)(v1 + 40))
  {
    MEMORY[0x19402EEEC]();
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 40));
    FigSimpleMutexDestroy();
    *(_QWORD *)(v1 + 40) = 0;
  }
  v3 = *(const void **)(v1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v1 + 8) = 0;
  }
  return 0;
}

uint64_t activityOnRunLoop_finalize(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  if (result)
  {
    v1 = result;
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v2)
      return v2(v1);
  }
  return result;
}

__CFString *activityOnRunLoop_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigActivityScheduler_OnRunLoop %p>"), a1);
  return Mutable;
}

uint64_t activityOnRunLoop_setProcessingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = (_QWORD *)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  v7[3] = a3;
  v7[4] = a2;
  MEMORY[0x19402EF04](v7[5]);
  return 0;
}

uint64_t activityOnRunLoop_triggerScheduling()
{
  uint64_t DerivedStorage;
  __CFRunLoopSource *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v2 = *(__CFRunLoopSource **)(DerivedStorage + 16);
  if (v2)
    CFRunLoopSourceSignal(v2);
  return 0;
}

uint64_t FigMetadataReaderCreateForGenericMetadataArray(uint64_t a1, const void *a2, const void *a3, const void *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;

  if (!a2 || !a3 || !a4 || !a5)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  v9 = CMDerivedObjectCreate();
  if (!(_DWORD)v9)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[2] = CFRetain(a2);
    DerivedStorage[1] = CFRetain(a3);
    *DerivedStorage = CFRetain(a4);
    *a5 = 0;
  }
  return v9;
}

void GenericMetadataArrayFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *GenericMetadataArrayCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v10;
  CFStringRef v11;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigGenericMetadataArrayReader %p\n"), DerivedStorage);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
  {
    v6 = v5(a1, 0, 0);
    if (v6 >= 1)
    {
      v7 = v6;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v6);
      for (i = 0; i != v7; ++i)
      {
        theDict = 0;
        cf = 0;
        v9 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v9 || v9(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v10 = CFCopyDescription(cf);
          if (v10)
          {
            v11 = v10;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v10);
            CFRelease(v11);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_1, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t GenericMetadataArrayCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  void *Copy;
  void *v10;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || !a2)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("complete")))
  {
    Copy = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
LABEL_7:
    v10 = Copy;
    result = 0;
    *a4 = v10;
    return result;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    Copy = (void *)CFStringCreateCopy(a3, *(CFStringRef *)(v8 + 8));
    goto LABEL_7;
  }
  return 4294954512;
}

void metadataPropertiesCallback_1(const void *a1, const void *a2, __CFString *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  signed int valuePtr;

  if (CFEqual(a1, CFSTR("key")))
  {
    v6 = CFGetTypeID(a2);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr))
      {
        valuePtr = bswap32(valuePtr);
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %c%c%c%c\n"), (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      }
    }
    else
    {
      v7 = CFGetTypeID(a2);
      if (v7 == CFStringGetTypeID())
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %@\n"), a2);
    }
  }
  else if (CFEqual(a1, CFSTR("locale")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     Locale = %@\n"), a2);
  }
  else if (CFEqual(a1, CFSTR("dataType")))
  {
    CFStringAppendFormat(a3, 0, CFSTR("     DataType = %@ (basic type)\n"), a2);
  }
}

uint64_t GenericMetadataArrayCopyValue(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v8;
  CFStringRef v9;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CFStringRef, uint64_t);
  unsigned int v14;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *);
  unsigned int v19;
  CFTypeRef v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  const __CFLocale *v25;
  const __CFString *Value;
  const __CFString *v27;
  const __CFString *v28;
  const __CFLocale *v29;
  const __CFLocale *v30;
  const __CFString *v31;
  unsigned int v32;
  const __CFString *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  const __CFString *v40;
  const __CFString *key;
  uint64_t v42;
  unsigned int v44;
  CFTypeRef v45;
  CFTypeRef v46;
  CFTypeRef cf;

  if (!a1 || (v8 = a3) == 0 || (v9 = theString) == 0 || !a6 || (v12 = a1, CFStringGetLength(theString) != 4))
  {
    v34 = FigSignalErrorAt();
    LODWORD(v16) = 0;
    goto LABEL_50;
  }
  v13 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v13 || (v42 = v13(v12, v9, v8), v42 < 1))
  {
    LODWORD(v16) = 0;
    v34 = 0;
    goto LABEL_50;
  }
  v37 = a6;
  v38 = a7;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v40 = (const __CFString *)*MEMORY[0x1E0C9B060];
  key = (const __CFString *)*MEMORY[0x1E0C9B088];
  v39 = v12;
  v17 = 1;
  while (1)
  {
    v46 = 0;
    cf = 0;
    v18 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v18)
      break;
    v19 = v18(v12, v9, v8, v17 - 1, a5, &cf, &v46);
    if (v19)
    {
      v34 = v19;
      if (v16)
        goto LABEL_46;
LABEL_43:
      if (!v15)
        goto LABEL_50;
      goto LABEL_49;
    }
    if (!a4 || CFGetTypeID(cf) == a4)
    {
      v44 = v14;
      v45 = v16;
      v20 = v15;
      v21 = v9;
      v22 = v8;
      v23 = a4;
      v24 = (const __CFDictionary *)v46;
      v25 = CFLocaleCopyCurrent();
      Value = (const __CFString *)CFLocaleGetValue(v25, key);
      v27 = (const __CFString *)CFLocaleGetValue(v25, v40);
      if (v24 && (v28 = v27, (v29 = (const __CFLocale *)CFDictionaryGetValue(v24, CFSTR("locale"))) != 0))
      {
        v30 = v29;
        v31 = (const __CFString *)CFLocaleGetValue(v29, key);
        v32 = 0;
        if (v31 && Value)
          v32 = CFStringCompare(v31, Value, 0) == kCFCompareEqualTo;
        v33 = (const __CFString *)CFLocaleGetValue(v30, v40);
        if (v33)
        {
          v8 = v22;
          v15 = v20;
          if (v28 && CFStringCompare(v33, v28, 0) == kCFCompareEqualTo)
            ++v32;
          a4 = v23;
          v9 = v21;
          goto LABEL_25;
        }
      }
      else
      {
        v32 = 0;
      }
      a4 = v23;
      v8 = v22;
      v9 = v21;
      v15 = v20;
LABEL_25:
      v12 = v39;
      v16 = v45;
      v14 = v44;
      if (v25)
        CFRelease(v25);
      if (v32 >= v44)
      {
        if (v45)
          CFRelease(v45);
        if (v15)
          CFRelease(v15);
        v14 = v32 + 1;
        v16 = CFRetain(cf);
        v15 = CFRetain(v46);
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v46)
      CFRelease(v46);
    v34 = 0;
    if (v17 < v42)
    {
      ++v17;
      if (v14 < 3)
        continue;
    }
    goto LABEL_42;
  }
  v34 = -12782;
LABEL_42:
  if (!v16)
    goto LABEL_43;
LABEL_46:
  *v37 = v16;
  if (v38)
  {
    *v38 = v15;
    LODWORD(v16) = 1;
    goto LABEL_50;
  }
  LODWORD(v16) = 1;
  if (v15)
LABEL_49:
    CFRelease(v15);
LABEL_50:
  if (a4)
    v35 = -12608;
  else
    v35 = -12607;
  if (v16 | v34)
    return v34;
  else
    return v35;
}

uint64_t GenericMetadataArrayHasKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
    return FigMetadataArrayHasKey(*(_QWORD *)(DerivedStorage + 16), a3, a2, 0, 0, 0);
  FigSignalErrorAt();
  return 0;
}

CFIndex GenericMetadataArrayGetKeyCount(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || CFStringGetLength(a2) == 4 && CFEqual(a2, *(CFTypeRef *)DerivedStorage))
    return FigMetadataArrayGetKeyCount(*(const __CFArray **)(DerivedStorage + 16), (uint64_t)a2);
  FigSignalErrorAt();
  return 0;
}

uint64_t GenericMetadataArrayCopyKeyAtIndex(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && ((v9 = DerivedStorage, !a2) || CFStringGetLength(a2) == 4 && CFEqual(a2, *(CFTypeRef *)v9)))
    return FigMetadataArrayCopyKeyAtIndex(*(const __CFArray **)(v9 + 16), a3, (uint64_t)a2, a5);
  else
    return FigSignalErrorAt();
}

uint64_t GenericMetadataArrayGetItemCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 || !a3)
    return FigMetadataArrayGetItemCount(*(const __CFArray **)(DerivedStorage + 16), a3, a2, 0, 0, 0);
  FigSignalErrorAt();
  return 0;
}

uint64_t GenericMetadataArrayCopyItemWithKeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeRef v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  cf = 0;
  if (!((unint64_t)a6 | (unint64_t)a7) || !a2 && a3)
    goto LABEL_15;
  v13 = FigMetadataArrayCopyItemWithKeyAndIndex(*(const __CFArray **)(DerivedStorage + 16), a3, a4, a2, 0, 0, 0, &cf, (__CFDictionary **)&v15);
  if (a6)
  {
    if (!cf)
      goto LABEL_15;
    *a6 = CFRetain(cf);
  }
  if (!a7)
    goto LABEL_10;
  if (v15)
  {
    *a7 = CFRetain(v15);
    goto LABEL_10;
  }
LABEL_15:
  v13 = FigSignalErrorAt();
LABEL_10:
  if (v15)
    CFRelease(v15);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t playeroverlap_activeSubPlayerTest()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
}

CFArrayRef playeroverlap_copyPendingArray()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(DerivedStorage + 40));
}

BOOL itemoverlap_isPlayerIndexInvalid()
{
  return *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48) == -1;
}

CFIndex playeroverlap_playQueueCountTest()
{
  CFArrayRef *DerivedStorage;
  CFIndex Count;
  CFIndex v2;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(DerivedStorage[3]);
  v2 = CFArrayGetCount(DerivedStorage[4]) + Count;
  return v2 + CFArrayGetCount(DerivedStorage[5]);
}

uint64_t FigPlayerOverlapCreate(const __CFAllocator *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  return FigPlayerOverlapCreateWithOptions(a1, a2, a3, 0, a4);
}

uint64_t FigPlayerOverlapCreateWithOptions(const __CFAllocator *a1, const void *a2, const void *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;
  void *value;
  CFTypeRef cf;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3 || !a5)
    return FigSignalErrorAt();
  cf = 0;
  FigPlayerGetClassID();
  if (CMDerivedObjectCreate())
  {
    v11 = FigSignalErrorAt();
LABEL_17:
    v15 = v11;
    if (cf)
      CFRelease(cf);
    return v15;
  }
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = 0;
  *(_BYTE *)(DerivedStorage + 108) = 0;
  value = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 108), 20, 0x600u);
  v11 = playeroverlap_setTheSameDispatchQueueOnSubPlayers((uint64_t)a2, (uint64_t)a3);
  if ((_DWORD)v11)
    goto LABEL_17;
  *(_DWORD *)(DerivedStorage + 4) = 0;
  *(_QWORD *)(DerivedStorage + 8) = a2;
  CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 16) = a3;
  CFRetain(a3);
  v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  *(_QWORD *)(DerivedStorage + 24) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 32) = CFArrayCreateMutable(a1, 0, v12);
  *(_QWORD *)(DerivedStorage + 40) = CFArrayCreateMutable(a1, 0, v12);
  *(_QWORD *)(DerivedStorage + 48) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 88) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 96) = FigSimpleMutexCreate();
  CMNotificationCenterGetDefaultLocalCenter();
  v11 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v11)
    goto LABEL_17;
  CMNotificationCenterGetDefaultLocalCenter();
  v11 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v11)
    goto LABEL_17;
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v15 = 0;
  *a5 = cf;
  return v15;
}

uint64_t playeroverlap_setTheSameDispatchQueueOnSubPlayers(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = playeroverlap_setDispatchQueueFromFirstSubPlayerOnSecond(a1, a2, 0x1E2FE2D78);
  if (!(_DWORD)result)
    return playeroverlap_setDispatchQueueFromFirstSubPlayerOnSecond(a1, a2, 0x1E2FE2D98);
  return result;
}

uint64_t playeroverlap_setDispatchQueueFromFirstSubPlayerOnSecond(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CFTypeRef);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v7 = v6(FigBaseObject, a3, *MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v7)
    {
LABEL_5:
      v11 = v7;
      goto LABEL_7;
    }
    v8 = cf;
    v9 = FigPlayerGetFigBaseObject(a2);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v10)
    {
      v7 = v10(v9, a3, v8);
      goto LABEL_5;
    }
  }
  v11 = 4294954514;
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t playeroverlap_subPlayerNotificationWeakCallback(uint64_t a1, void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result;
  unsigned __int8 v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  int v13;
  BOOL v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, float);
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;

  result = CMBaseObjectGetDerivedStorage();
  v10 = atomic_load((unsigned __int8 *)result);
  if ((v10 & 1) != 0)
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return result;
  }
  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 8 * *(int *)(result + 4) + 8) != a4)
    return result;
  if (CFEqual(a3, CFSTR("CurrentItemDidChange")))
  {
    CFDictionaryGetValue(a5, CFSTR("ReasonForCurrentItemDidChange"));
    if (FigCFEqual() || FigCFEqual())
    {
      if (!playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a2) || !dword_1EE2A2E18)
        goto LABEL_20;
    }
    else
    {
      if (!FigCFEqual())
        goto LABEL_20;
      playeroverlap_removeAdvanceTimer();
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v13 = *(_DWORD *)(DerivedStorage + 4);
      v14 = __OFADD__(v13++, 1);
      v15 = (v13 < 0) ^ v14;
      v16 = v13 & 1;
      if (v15)
        v16 = -v16;
      v17 = *(_QWORD *)(DerivedStorage + 8 * v16 + 8);
      v18 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      v19 = v18 ? v18(v17, 0.0) : -12782;
      if (!v19 || !dword_1EE2A2E18)
        goto LABEL_20;
    }
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_20:
  if (CFEqual(a3, CFSTR("PlaybackStateDidChange")))
    FigCFDictionaryGetInt32IfPresent();
  if (FigCFEqual())
  {
    CFDictionaryGetValue(a5, CFSTR("ReasonForCurrentItemDidChange"));
    v21 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v21 + 80) && (v22 = v21, FigCFEqual()))
    {
      *(_QWORD *)(v22 + 80) = 0;
    }
    else
    {
      result = FigCFEqual();
      if ((_DWORD)result)
        return result;
    }
  }
  return playeroverlap_dispatchAsyncPostNotification((uint64_t)a2);
}

uint64_t playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(void *a1)
{
  const void *v2;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CMTime *);
  uint64_t v8;
  CMTime *v9;
  CMTimeEpoch v10;
  CMTimeEpoch epoch;
  uint64_t (*v12)(CMTimeEpoch, CMTime *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, CMTime *);
  uint64_t v15;
  float Rate;
  const void *v17;
  const void *v18;
  NSObject *v19;
  unsigned int value;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  CMTimeFlags v28;
  CMTimeFlags v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  Float64 v42;
  Float64 v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  const char *v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  Float64 Seconds;
  Float64 v53;
  __int128 v54;
  CMTime timebase;
  os_log_type_t v56;
  os_log_type_t type[4];
  CMTime time2;
  uint64_t v59;
  __int16 v60;
  Float64 v61;
  __int16 v62;
  Float64 v63;
  __int16 v64;
  const void *v65;
  __int16 v66;
  const char *v67;
  CMTime time1;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  if (!v2)
  {
    if (dword_1EE2A2E18)
      goto LABEL_15;
    return 0;
  }
  v3 = (uint64_t)v2;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
  {
    if (dword_1EE2A2E18)
      goto LABEL_15;
    return 0;
  }
  if (playeroverlap_playQueueCount() <= 1)
  {
    if (dword_1EE2A2E18)
      goto LABEL_15;
    return 0;
  }
  if (!itemoverlap_hasAdvanceTime(v3))
  {
    if (dword_1EE2A2E18)
    {
LABEL_15:
      LODWORD(timebase.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
  {
    if (dword_1EE2A2E18)
      goto LABEL_15;
    return 0;
  }
  LODWORD(timebase.value) = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
  v7 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7)
  {
    v23 = 4294954514;
    goto LABEL_52;
  }
  v8 = v7(v6, &timebase);
  if ((_DWORD)v8)
  {
    v23 = v8;
    goto LABEL_52;
  }
  if (*(float *)&timebase.value <= 0.0)
  {
    if (dword_1EE2A2E18)
    {
      *(_DWORD *)type = 0;
      v56 = OS_LOG_TYPE_DEFAULT;
      v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v36 = *(_DWORD *)type;
      if (os_log_type_enabled(v35, v56))
        v37 = v36;
      else
        v37 = v36 & 0xFFFFFFFE;
      if (!v37)
        goto LABEL_101;
      if (!a1)
      {
        v47 = "";
        goto LABEL_99;
      }
LABEL_88:
      v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 108);
LABEL_99:
      LODWORD(time2.value) = 136315650;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      v59 = (uint64_t)v47;
LABEL_100:
      _os_log_send_and_compose_impl();
LABEL_101:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_102:
    v23 = 0;
    goto LABEL_52;
  }
  if (!playeroverlap_isActionAtEnd())
    return 0;
  v9 = (CMTime *)CMBaseObjectGetDerivedStorage();
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  timebase.epoch = v10;
  v54 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&timebase.value = *MEMORY[0x1E0CA2E18];
  epoch = v9->epoch;
  v12 = *(uint64_t (**)(CMTimeEpoch, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v12)
  {
    v23 = 4294954514;
LABEL_44:
    *(_DWORD *)type = 0;
    v56 = OS_LOG_TYPE_DEFAULT;
    v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v26 = *(_DWORD *)type;
    if (os_log_type_enabled(v25, v56))
      v27 = v26;
    else
      v27 = v26 & 0xFFFFFFFE;
    if (v27)
    {
      LODWORD(time2.value) = 136315138;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_52:
    if (!(_DWORD)v23)
      return v23;
    goto LABEL_53;
  }
  v13 = v12(epoch, &timebase);
  if ((_DWORD)v13)
  {
    v23 = v13;
    goto LABEL_44;
  }
  if ((timebase.flags & 0x1D) == 1)
  {
    time1 = timebase;
    time2 = v9[1];
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      if (dword_1EE2A2E18)
      {
        *(_DWORD *)type = 0;
        v56 = OS_LOG_TYPE_DEFAULT;
        v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v49 = *(_DWORD *)type;
        if (os_log_type_enabled(v48, v56))
          v50 = v49;
        else
          v50 = v49 & 0xFFFFFFFE;
        if (!v50)
          goto LABEL_101;
        v51 = CMBaseObjectGetDerivedStorage() + 104;
        time1 = timebase;
        Seconds = CMTimeGetSeconds(&time1);
        time1 = v9[1];
        v53 = CMTimeGetSeconds(&time1);
        LODWORD(time2.value) = 136316162;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v3;
        HIWORD(time2.epoch) = 2082;
        v59 = v51;
        v60 = 2048;
        v61 = Seconds;
        v62 = 2048;
        v63 = v53;
        goto LABEL_100;
      }
      goto LABEL_102;
    }
  }
  *(_OWORD *)&timebase.value = v54;
  timebase.epoch = v10;
  v14 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v14)
  {
    v23 = 4294954514;
LABEL_50:
    FigSignalErrorAt();
    goto LABEL_52;
  }
  v15 = v14(v3, &timebase);
  if ((_DWORD)v15)
    goto LABEL_76;
  time1 = v9[1];
  time2 = timebase;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    *(_DWORD *)type = 0;
    v56 = OS_LOG_TYPE_DEFAULT;
    v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v39 = *(_DWORD *)type;
    if (os_log_type_enabled(v38, v56))
      v40 = v39;
    else
      v40 = v39 & 0xFFFFFFFE;
    if (v40)
    {
      v41 = CMBaseObjectGetDerivedStorage() + 104;
      time1 = v9[1];
      v42 = CMTimeGetSeconds(&time1);
      time1 = timebase;
      v43 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316162;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v3;
      HIWORD(time2.epoch) = 2082;
      v59 = v41;
      v60 = 2048;
      v61 = v42;
      v62 = 2048;
      v63 = v43;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_101;
  }
  timebase.value = 0;
  v15 = FigPlaybackItemCopyProperty(v3, (uint64_t)CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], (uint64_t)&timebase);
  if ((_DWORD)v15)
    goto LABEL_76;
  Rate = CMTimebaseGetRate((CMTimebaseRef)timebase.value);
  if (timebase.value)
  {
    CFRelease((CFTypeRef)timebase.value);
    timebase.value = 0;
  }
  if (Rate == 0.0)
  {
    v15 = itemoverlap_addTimebaseListener(v3);
    if ((_DWORD)v15)
    {
LABEL_76:
      v23 = v15;
      goto LABEL_50;
    }
  }
  if (Rate <= 0.0)
  {
    if (dword_1EE2A2E18)
    {
      *(_DWORD *)type = 0;
      v56 = OS_LOG_TYPE_DEFAULT;
      v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v45 = *(_DWORD *)type;
      if (os_log_type_enabled(v44, v56))
        v46 = v45;
      else
        v46 = v45 & 0xFFFFFFFE;
      if (!v46)
        goto LABEL_101;
      if (!a1)
      {
        v47 = "";
        goto LABEL_99;
      }
      goto LABEL_88;
    }
    goto LABEL_102;
  }
  v17 = playeroverlap_itemAtIndex((uint64_t)a1, 1);
  if (dword_1EE2A2E18)
  {
    v18 = v17;
    LODWORD(timebase.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = timebase.value;
    if (os_log_type_enabled(v19, type[0]))
      v21 = value;
    else
      v21 = value & 0xFFFFFFFE;
    if (v21)
    {
      if (a1)
        v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 108);
      else
        v22 = "";
      v33 = CMBaseObjectGetDerivedStorage() + 104;
      if (v18)
        v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 104);
      else
        v34 = "";
      LODWORD(time2.value) = 136316674;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      v59 = (uint64_t)v22;
      v60 = 2048;
      v61 = *(double *)&v3;
      v62 = 2082;
      v63 = *(double *)&v33;
      v64 = 2048;
      v65 = v18;
      v66 = 2082;
      v67 = v34;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v23 = playeroverlap_scheduleAdvanceTimerAndAnchorTime(a1);
  if ((_DWORD)v23)
  {
    FigSignalErrorAt();
LABEL_53:
    v28 = itemoverlap_removeTimebaseListener();
    if (v28)
    {
      v29 = v28;
      LODWORD(timebase.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v31 = timebase.value;
      if (os_log_type_enabled(v30, type[0]))
        v32 = v31;
      else
        v32 = v31 & 0xFFFFFFFE;
      if (v32)
      {
        LODWORD(time2.value) = 136315394;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
        LOWORD(time2.flags) = 1024;
        *(CMTimeFlags *)((char *)&time2.flags + 2) = v29;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v23;
}

void playeroverlap_removeAdvanceTimer()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
  {
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 64), *(dispatch_source_t *)(DerivedStorage + 56));
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 56));
    *(_QWORD *)(DerivedStorage + 56) = 0;
    CFRelease(*(CFTypeRef *)(DerivedStorage + 64));
    *(_QWORD *)(DerivedStorage + 64) = 0;
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t playeroverlap_dispatchAsyncPostNotification(uint64_t a1)
{
  if (!a1)
    CMBaseObjectGetDerivedStorage();
  if (playeroverlap_dispatchAsyncPostNotification_sFigPlayerOverlapOutboundNotificationInitOnce != -1)
    dispatch_once_f(&playeroverlap_dispatchAsyncPostNotification_sFigPlayerOverlapOutboundNotificationInitOnce, &playeroverlap_dispatchAsyncPostNotification_sFigPlayerOverlapOutboundNotification, (dispatch_function_t)playeroverlap_initNotificationQueueOnce);
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

const void *playeroverlap_itemAtIndex(uint64_t a1, CFIndex a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v5;
  uint64_t v6;
  CFArrayRef *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  char v11;
  int v12;
  CFIndex v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 24));
  v5 = a2 - Count;
  if (a2 < Count)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = (CFArrayRef *)(v6 + 8 * *(int *)(v6 + 4) + 24);
    return CFArrayGetValueAtIndex(*v7, a2);
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(_DWORD *)(v8 + 4);
  v10 = __OFADD__(v9++, 1);
  v11 = (v9 < 0) ^ v10;
  v12 = v9 & 1;
  if (v11)
    v12 = -v12;
  v13 = CFArrayGetCount(*(CFArrayRef *)(v8 + 8 * v12 + 24));
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
  {
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = *(_DWORD *)(v14 + 4);
    v10 = __OFADD__(v15++, 1);
    v11 = (v15 < 0) ^ v10;
    v16 = v15 & 1;
    if (v11)
      v16 = -v16;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 8 * v16 + 24), 0);
    playeroverlap_assertInOutro();
    v13 = 0;
  }
  else if (v5 < v13)
  {
    v17 = CMBaseObjectGetDerivedStorage();
    v18 = *(_DWORD *)(v17 + 4);
    v10 = __OFADD__(v18++, 1);
    v11 = (v18 < 0) ^ v10;
    v19 = v18 & 1;
    if (v11)
      v19 = -v19;
    v7 = (CFArrayRef *)(v17 + 8 * v19 + 24);
    a2 = v5;
    return CFArrayGetValueAtIndex(*v7, a2);
  }
  a2 = v5 - v13;
  v7 = (CFArrayRef *)(CMBaseObjectGetDerivedStorage() + 40);
  if (a2 < CFArrayGetCount(*v7))
    return CFArrayGetValueAtIndex(*v7, a2);
  return 0;
}

CFIndex playeroverlap_playQueueCount()
{
  CFIndex Count;
  uint64_t DerivedStorage;
  int v2;
  BOOL v3;
  char v4;
  int v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
  {
    Count = 0;
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v2 = *(_DWORD *)(DerivedStorage + 4);
    v3 = __OFADD__(v2++, 1);
    v4 = (v2 < 0) ^ v3;
    v5 = v2 & 1;
    if (v4)
      v5 = -v5;
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * v5 + 24));
  }
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = CFArrayGetCount(*(CFArrayRef *)(v6 + 8 * *(int *)(v6 + 4) + 24));
  v8 = CMBaseObjectGetDerivedStorage();
  return v7 + Count + CFArrayGetCount(*(CFArrayRef *)(v8 + 40));
}

BOOL itemoverlap_hasAdvanceTime(_BOOL8 result)
{
  CMTime *DerivedStorage;
  CMTime v2;
  CMTime time1;

  if (result)
  {
    DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
    if ((DerivedStorage[1].flags & 0x1D) == 1)
    {
      time1 = DerivedStorage[1];
      v2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      return CMTimeCompare(&time1, &v2) > 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t itemoverlap_addTimebaseListener(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFTypeRef *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 72);
  v3 = (CFTypeRef *)(DerivedStorage + 72);
  if (v4)
    return 0;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v7)
  {
    v5 = v7(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], v3);
    if (!(_DWORD)v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v8 = FigNotificationCenterAddWeakListener();
      if (!(_DWORD)v8)
        return v5;
      v5 = v8;
    }
  }
  else
  {
    v5 = 4294954514;
  }
  FigSignalErrorAt();
  if (*v3)
  {
    CFRelease(*v3);
    *v3 = 0;
  }
  return v5;
}

uint64_t playeroverlap_scheduleAdvanceTimerAndAnchorTime(void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CMTime *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, float *);
  uint64_t v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, _QWORD, uint64_t);
  NSObject *v11;
  OpaqueCMTimebase *v12;
  NSObject *v13;
  const void *v14;
  CMClockRef HostTimeClock;
  OpaqueCMClock *v16;
  int32_t v17;
  CMTime *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  int v23;
  uint64_t v24;
  float v25;
  uint64_t (*v26)(uint64_t, CMTime *, CMTime *, _QWORD, float);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, float);
  NSObject *v34;
  os_log_type_t type;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  float v40;
  CMTime time2;
  CMTime fireTime;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  v4 = (CMTime *)CMBaseObjectGetDerivedStorage();
  v40 = 0.0;
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(v5 + 8 * *(int *)(v5 + 4) + 8);
  v7 = *(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7)
    goto LABEL_17;
  v8 = v7(v6, &v40);
  if ((_DWORD)v8)
    goto LABEL_27;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v3);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v10)
    goto LABEL_17;
  v8 = v10(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], DerivedStorage + 64);
  if ((_DWORD)v8)
    goto LABEL_27;
  v11 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 48));
  *(_QWORD *)(DerivedStorage + 56) = v11;
  if (!v11)
    goto LABEL_28;
  dispatch_set_context(v11, a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 56), (dispatch_function_t)playeroverlap_advanceTimeReached);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 56));
  v8 = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 64), *(dispatch_source_t *)(DerivedStorage + 56));
  if ((_DWORD)v8
    || (v13 = *(NSObject **)(DerivedStorage + 56),
        v12 = *(OpaqueCMTimebase **)(DerivedStorage + 64),
        fireTime = v4[1],
        v8 = CMTimebaseSetTimerDispatchSourceNextFireTime(v12, v13, &fireTime, 1u),
        (_DWORD)v8))
  {
LABEL_27:
    v28 = v8;
    goto LABEL_18;
  }
  memset(&v39, 0, sizeof(v39));
  v14 = *(const void **)(DerivedStorage + 64);
  HostTimeClock = CMClockGetHostTimeClock();
  fireTime = v4[1];
  CMSyncConvertTime(&v39, &fireTime, v14, HostTimeClock);
  if ((v39.flags & 0x1D) != 1)
  {
LABEL_28:
    v28 = FigSignalErrorAt();
    if (!(_DWORD)v28)
      return v28;
    goto LABEL_19;
  }
  memset(&v38, 0, sizeof(v38));
  v16 = CMClockGetHostTimeClock();
  CMClockGetTime(&v38, v16);
  fireTime = v39;
  time2 = v38;
  v17 = CMTimeCompare(&fireTime, &time2);
  v18 = (CMTime *)MEMORY[0x1E0CA2E18];
  if (v17 < 0)
    v39 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v19 = CMBaseObjectGetDerivedStorage();
  v20 = *(_DWORD *)(v19 + 4);
  v21 = __OFADD__(v20++, 1);
  v22 = (v20 < 0) ^ v21;
  v23 = v20 & 1;
  if (v22)
    v23 = -v23;
  v24 = *(_QWORD *)(v19 + 8 * v23 + 8);
  v25 = v40;
  v37 = v39;
  v26 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, _QWORD, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 88);
  if (v26)
  {
    fireTime = *v18;
    time2 = v37;
    v8 = v26(v24, &fireTime, &time2, 0, v25);
    if (!(_DWORD)v8)
    {
      if (dword_1EE2A2E18)
      {
        LODWORD(v37.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    goto LABEL_27;
  }
LABEL_17:
  v28 = 4294954514;
LABEL_18:
  FigSignalErrorAt();
LABEL_19:
  playeroverlap_removeAdvanceTimer();
  v29 = CMBaseObjectGetDerivedStorage();
  v30 = *(_DWORD *)(v29 + 4);
  v21 = __OFADD__(v30++, 1);
  v22 = (v30 < 0) ^ v21;
  v31 = v30 & 1;
  if (v22)
    v31 = -v31;
  v32 = *(_QWORD *)(v29 + 8 * v31 + 8);
  v33 = *(unsigned int (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if ((!v33 || v33(v32, 0.0)) && dword_1EE2A2E18)
  {
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v28;
}

uint64_t itemoverlap_removeTimebaseListener()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 72))
    return 0;
  v1 = DerivedStorage;
  CMNotificationCenterGetDefaultLocalCenter();
  v2 = FigNotificationCenterRemoveWeakListener();
  if ((_DWORD)v2)
  {
    v4 = v2;
    FigSignalErrorAt();
    return v4;
  }
  v3 = *(const void **)(v1 + 72);
  if (!v3)
    return 0;
  CFRelease(v3);
  v4 = 0;
  *(_QWORD *)(v1 + 72) = 0;
  return v4;
}

uint64_t playeroverlap_assertInOutro()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t, int *);
  uint64_t v3;
  int v4;
  BOOL v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t, int *);
  int v11;
  int v12;

  CMBaseObjectGetDerivedStorage();
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
  v2 = *(void (**)(uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v2)
    v2(v1, &v12);
  v11 = 0;
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(v3 + 4);
  v5 = __OFADD__(v4++, 1);
  v6 = (v4 < 0) ^ v5;
  v7 = v4 & 1;
  if (v6)
    v7 = -v7;
  v8 = *(_QWORD *)(v3 + 8 * v7 + 8);
  result = CMBaseObjectGetVTable();
  v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(result + 16) + 48);
  if (v10)
    return v10(v8, &v11);
  return result;
}

uint64_t playeroverlap_isActionAtEnd()
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  unsigned int (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
  v2 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v2 || v2(FigBaseObject, CFSTR("ActionAtEnd"), *MEMORY[0x1E0C9AE00], &cf))
    return 0;
  v3 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v3;
}

void playeroverlap_timebaseNotificationWeakCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMTimebase *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  v7 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMTimebaseGetRate(a4) != 0.0 && *(_DWORD *)(DerivedStorage + 48) == *(_DWORD *)(v7 + 4))
  {
    if (playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v6))
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void playeroverlap_advanceTimeReached(uint64_t a1)
{
  const void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const __CFAllocator *v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  OpaqueCMTimebase *v10;
  NSObject *v11;
  uint64_t DerivedStorage;
  NSObject *v13;
  CFMutableDictionaryRef Mutable;
  uint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  int v19;
  __CFDictionary *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void (*v25)(uint64_t, float);
  CMTime type;
  CMTime v27;
  CFTypeRef cf;
  CMTime rhs;
  CMTime lhs;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  playeroverlap_removeAdvanceTimer();
  v2 = playeroverlap_itemAtIndex(a1, 0);
  if (dword_1EE2A2E18)
  {
    LODWORD(v27.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (itemoverlap_removeTimebaseListener())
  {
    LODWORD(v27.value) = 0;
    LOBYTE(type.value) = 0;
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
  {
    CMBaseObjectGetDerivedStorage();
    LODWORD(v27.value) = 0;
    LOBYTE(type.value) = 0;
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  if (!itemoverlap_hasAdvanceTime((_BOOL8)v2))
  {
    if (!dword_1EE2A2E18)
      goto LABEL_34;
LABEL_17:
    LODWORD(v27.value) = 0;
    LOBYTE(type.value) = 0;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_34;
  }
  if (!playeroverlap_itemAtIndex(a1, 1))
  {
    if (!dword_1EE2A2E18)
      goto LABEL_34;
    goto LABEL_17;
  }
  if (playeroverlap_isActionAtEnd())
  {
    v6 = playeroverlap_itemAtIndex(a1, 1);
    cf = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v6);
    v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v9)
    {
      v9(FigBaseObject, CFSTR("Timebase"), v7, &cf);
      v10 = (OpaqueCMTimebase *)cf;
    }
    else
    {
      v10 = 0;
    }
    memset(&v27, 0, sizeof(v27));
    CMTimebaseGetTime(&v27, v10);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    memset(&type, 0, sizeof(type));
    if ((*(_DWORD *)(DerivedStorage + 92) & 0x1D) == 1)
    {
      lhs = v27;
      rhs = *(CMTime *)(DerivedStorage + 80);
      CMTimeSubtract(&type, &lhs, &rhs);
    }
    else
    {
      type = v27;
    }
    if (dword_1EE2A2E18)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    playeroverlap_dispatchAsyncPostNotification(0);
    if (Mutable)
      CFRelease(Mutable);
    v15 = CMBaseObjectGetDerivedStorage();
    v16 = *(_DWORD *)(v15 + 4);
    v17 = __OFADD__(v16++, 1);
    v18 = (v16 < 0) ^ v17;
    v19 = v16 & 1;
    if (v18)
      v19 = -v19;
    *(_DWORD *)(v15 + 4) = v19;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72) = v2;
    if (v2)
      CFRetain(v2);
    playeroverlap_dispatchAsyncPostNotification(0);
    itemoverlap_addToBlockNextNotifications((uint64_t)v2, CFSTR("ItemStoppedBeingCurrent"));
    playeroverlap_dispatchAsyncPostNotification(0);
    playeroverlap_dispatchAsyncPostNotification(0);
    itemoverlap_addToBlockNextNotifications((uint64_t)v2, CFSTR("ItemWasRemovedFromPlayQueue"));
    v20 = playeroverlap_createCurrentItemDidChangePayload(CFSTR("ReasonAdvanceForOverlappedPlayback"));
    playeroverlap_dispatchAsyncPostNotification(a1);
    if (v20)
      CFRelease(v20);
    return;
  }
  if (dword_1EE2A2E18)
    goto LABEL_17;
LABEL_34:
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = *(_DWORD *)(v21 + 4);
  v17 = __OFADD__(v22++, 1);
  v18 = (v22 < 0) ^ v17;
  v23 = v22 & 1;
  if (v18)
    v23 = -v23;
  v24 = *(_QWORD *)(v21 + 8 * v23 + 8);
  v25 = *(void (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v25)
    v25(v24, 0.0);
}

void itemoverlap_addToBlockNextNotifications(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2E18 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 56), a2);
}

__CFDictionary *playeroverlap_createCurrentItemDidChangePayload(const void *a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (Mutable)
  {
    if (a1)
      CFDictionarySetValue(Mutable, CFSTR("ReasonForCurrentItemDidChange"), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
  return v3;
}

dispatch_queue_t playeroverlap_initNotificationQueueOnce(dispatch_queue_t *a1)
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.overlapPlayer.outboundNotification", 0);
  *a1 = result;
  return result;
}

const void *playeroverlap_Invalidate(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  const void *result;

  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return (const void *)FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)playeroverlap_cancelOverlap_fun);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 88), (CFSetApplierFunction)itemoverlap_forEachItemInvalidate, 0);
  CFSetRemoveAllValues(*(CFMutableSetRef *)(DerivedStorage + 88));
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)playeroverlap_flipInvalid);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (v5)
  {
    FigBaseObject = FigPlayerGetFigBaseObject(v5);
    if (FigBaseObject)
    {
      v7 = FigBaseObject;
      v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v8)
        v8(v7);
    }
  }
  v9 = *(_QWORD *)(DerivedStorage + 16);
  if (v9)
  {
    v10 = FigPlayerGetFigBaseObject(v9);
    if (v10)
    {
      v11 = v10;
      v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v12)
        v12(v11);
    }
  }
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), 0, (dispatch_function_t)playeroverlap_noopToFlushTheQueue);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 40));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 24));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 32));
  *(_DWORD *)(DerivedStorage + 4) = -1;
  result = *(const void **)(DerivedStorage + 72);
  if (result)
  {
    CFRelease(result);
    result = 0;
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  return result;
}

uint64_t playeroverlap_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = atomic_load((unsigned __int8 *)DerivedStorage);
  if ((v4 & 1) == 0)
    playeroverlap_Invalidate(a1);
  v5 = *(NSObject **)(DerivedStorage + 48);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 16);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 24);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  v11 = *(const void **)(DerivedStorage + 88);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
  return FigSimpleMutexDestroy();
}

__CFString *playeroverlap_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const __CFAllocator *v5;
  __CFString *Mutable;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  v4 = playeroverlap_itemAtIndex((uint64_t)a1, 1);
  v5 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v5, 0);
  if (a1)
    v7 = (const char *)(CMBaseObjectGetDerivedStorage() + 108);
  else
    v7 = "";
  v16 = v7;
  v8 = *(_QWORD *)(DerivedStorage + 8);
  v9 = *(_QWORD *)(DerivedStorage + 16);
  v10 = *(unsigned int *)(DerivedStorage + 4);
  if (v3)
  {
    v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 104);
    if (v4)
    {
LABEL_6:
      v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 104);
      goto LABEL_9;
    }
  }
  else
  {
    v11 = "";
    if (v4)
      goto LABEL_6;
  }
  v12 = "";
LABEL_9:
  v13 = *(_QWORD *)(DerivedStorage + 72);
  if (v13)
    v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 104);
  else
    v14 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlayerOverlap %p %s sub-players: [%p, %p] active index: %d, current item %p %s, next item %p %s, outro item %p %s>"), a1, v16, v8, v9, v10, v3, v11, v4, v12, v13, v14);
  return Mutable;
}

uint64_t playeroverlap_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  unsigned __int8 v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v12;
  OpaqueFigPlayer *v13;
  _QWORD context[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v12 & 1) == 0)
    {
      context[3] = a4;
      v15 = 0;
      context[0] = a1;
      context[1] = a3;
      context[2] = a2;
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_copyPropertyFromActiveSubPlayer_fun);
      return v15;
    }
    return FigSignalErrorAt();
  }
  if (FigCFEqual())
    return playeroverlap_copyPerformanceHistoryArray(a1, a3, a4);
  if (CFEqual(a2, CFSTR("FigAudioSession2")))
    return 4294954436;
  v13 = *(OpaqueFigPlayer **)(CMBaseObjectGetDerivedStorage() + 8);
  return FigPlayerCopyProperty(v13, a2, a3, a4);
}

uint64_t playeroverlap_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned __int8 v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  v7 = (const void *)FigCFCopyCompactDescription();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
    CFRelease(v7);
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playeroverlap_handleSetProperty, 0, 0, 0);
}

void playeroverlap_cancelOverlap_fun()
{
  uint64_t DerivedStorage;
  int v1;
  BOOL v2;
  char v3;
  int v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, float);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v1 = *(_DWORD *)(DerivedStorage + 4);
    v2 = __OFADD__(v1++, 1);
    v3 = (v1 < 0) ^ v2;
    v4 = v1 & 1;
    if (v3)
      v4 = -v4;
    v5 = *(_QWORD *)(DerivedStorage + 8 * v4 + 8);
    v6 = *(unsigned int (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v6 || v6(v5, 0.0))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playeroverlap_removeAdvanceTimer();
  }
}

unsigned __int8 *playeroverlap_flipInvalid()
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  atomic_store(1u, result);
  return result;
}

uint64_t itemoverlap_invalidateDispatchSync(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  unsigned __int8 v5;
  uint64_t context;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
    return FigSignalErrorAt();
  context = a1;
  v8 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_invalidateDispatchSync_fun);
  return v8;
}

uint64_t itemoverlap_invalidateDispatchSync_fun(uint64_t a1)
{
  const void *v2;
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  void *v5;
  uint64_t v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  NSObject *v10;
  uint64_t FigBaseObject;
  uint64_t v12;
  void (*v13)(uint64_t);

  v2 = *(const void **)a1;
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = *(void **)(DerivedStorage + 8);
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = playeroverlap_itemAtIndex((uint64_t)v5, 0);
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72) && (v7 == v2 || *(const void **)(v6 + 72) == v2))
      playeroverlap_removeOutroItem(v5, 1);
    atomic_store(1u, (unsigned __int8 *)DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    if (FigNotificationCenterRemoveWeakListener())
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (itemoverlap_removeTimebaseListener())
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
    if (FigBaseObject)
    {
      v12 = FigBaseObject;
      v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v13)
        v13(v12);
    }
    CFSetRemoveAllValues(*(CFMutableSetRef *)(DerivedStorage + 56));
    result = 0;
  }
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

uint64_t playeroverlap_removeOutroItem(void *a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  char v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t FirstIndexOfValue;
  CFIndex v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  const void *value;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void (*v37)(uint64_t, _QWORD, CMTime *);
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, float);
  uint64_t v43;
  const void *v44;
  uint64_t inserted;
  const __CFAllocator *v46;
  CFMutableDictionaryRef Mutable;
  CFDictionaryRef v48;
  const void *v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v56;
  uint64_t v57;
  CMTime time;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 72);
  if (v5)
    CFRetain(*(CFTypeRef *)(DerivedStorage + 72));
  playeroverlap_assertInOutro();
  v57 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  playeroverlap_assertInOutro();
  if (dword_1EE2A2E18)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(_DWORD *)(v8 + 48);
  v10 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 4);
  v11 = __OFADD__(v10++, 1);
  v12 = (v10 < 0) ^ v11;
  v13 = v10 & 1;
  if (v12)
    v13 = -v13;
  if (v9 != v13)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v15 = CMBaseObjectGetDerivedStorage();
  v16 = *(_DWORD *)(v15 + 4);
  v11 = __OFADD__(v16++, 1);
  v12 = (v16 < 0) ^ v11;
  v17 = v16 & 1;
  if (v12)
    v17 = -v17;
  if (CFArrayGetCount(*(CFArrayRef *)(v15 + 8 * v17 + 24)) != 1)
  {
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  if (FirstIndexOfValue == -1)
  {
    v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v50 = 4294954436;
LABEL_51:
    v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    goto LABEL_52;
  }
  v20 = FirstIndexOfValue;
  if (!a2)
    goto LABEL_21;
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = *(_DWORD *)(v21 + 4);
  v11 = __OFADD__(v22++, 1);
  v12 = (v22 < 0) ^ v11;
  v23 = v22 & 1;
  if (v12)
    v23 = -v23;
  v24 = *(_QWORD *)(v21 + 8 * v23 + 8);
  v25 = *(_QWORD *)(v8 + 16);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v26)
  {
    v50 = 4294954514;
LABEL_49:
    v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_51;
  }
  v27 = v26(v24, v25);
  if ((_DWORD)v27)
  {
    v50 = v27;
    goto LABEL_49;
  }
LABEL_21:
  v28 = CMBaseObjectGetDerivedStorage();
  v29 = *(_DWORD *)(v28 + 4);
  v11 = __OFADD__(v29++, 1);
  v12 = (v29 < 0) ^ v11;
  v30 = v29 & 1;
  if (v12)
    v30 = -v30;
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v28 + 8 * v30 + 24), v20);
  v31 = CMBaseObjectGetDerivedStorage();
  value = 0;
  *(_DWORD *)(v31 + 64) = 0;
  *(_DWORD *)(v31 + 48) = -1;
  time.value = 0;
  do
  {
    if (value)
    {
      CFRelease(value);
      time.value = 0;
    }
    v33 = CMBaseObjectGetDerivedStorage();
    v34 = *(_DWORD *)(v33 + 4);
    v11 = __OFADD__(v34++, 1);
    v12 = (v34 < 0) ^ v11;
    v35 = v34 & 1;
    if (v12)
      v35 = -v35;
    v36 = *(_QWORD *)(v33 + 8 * v35 + 8);
    v37 = *(void (**)(uint64_t, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v37)
      v37(v36, 0, &time);
    if (!time.value)
      break;
    usleep(0x3E8u);
    value = (const void *)time.value;
  }
  while (time.value);
  v38 = CMBaseObjectGetDerivedStorage();
  v39 = *(_DWORD *)(v38 + 4);
  v11 = __OFADD__(v39++, 1);
  v12 = (v39 < 0) ^ v11;
  v40 = v39 & 1;
  if (v12)
    v40 = -v40;
  v41 = *(_QWORD *)(v38 + 8 * v40 + 8);
  v42 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v42)
  {
    v50 = 4294954514;
LABEL_47:
    v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
LABEL_52:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_53;
  }
  v43 = v42(v41, 0.0);
  if ((_DWORD)v43)
  {
    v50 = v43;
    goto LABEL_47;
  }
  v44 = *(const void **)(v57 + 72);
  if (v44)
  {
    CFRelease(v44);
    *(_QWORD *)(v57 + 72) = 0;
  }
  inserted = playeroverlap_reInsertPendingQueue(a1);
  if ((_DWORD)inserted)
  {
    v50 = inserted;
    v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
    goto LABEL_52;
  }
  playeroverlap_dispatchAsyncPostNotification(0);
  v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v48 = CMTimeCopyAsDictionary(&time, v46);
  FigCFDictionarySetValue();
  if (v48)
    CFRelease(v48);
  FigCFDictionarySetInt32();
  playeroverlap_dispatchAsyncPostNotification((uint64_t)a1);
  if (Mutable)
    CFRelease(Mutable);
  v49 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  if (itemoverlap_hasAdvanceTime((_BOOL8)v49))
    v50 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  else
    v50 = 0;
LABEL_53:
  if (v5)
    CFRelease(v5);
  return v50;
}

unsigned __int8 *itemoverlap_subItemNotificationWeakCallback(uint64_t a1, const void *a2, const void *a3)
{
  unsigned __int8 *result;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t DerivedStorage;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, _QWORD *);
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  result = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  v6 = atomic_load(result);
  if ((v6 & 1) != 0)
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return (unsigned __int8 *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v7 = result;
    if (dword_1EE2A2E18)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v10 = (void *)*((_QWORD *)v7 + 1);
    if (playeroverlap_indexForItem() == -1)
    {
      v11 = 0;
    }
    else if (FigCFEqual())
    {
      v11 = 1;
    }
    else
    {
      v11 = FigCFEqual() != 0;
    }
    if (FigCFEqual())
      v12 = 0;
    else
      v12 = !v11;
    if (!v12)
    {
      if (playeroverlap_isActionAtEnd()
        || playeroverlap_isActionAtEnd() && !playeroverlap_isLastItem((uint64_t)v10, a2))
      {
        if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56) && playeroverlap_itemAtIndex((uint64_t)v10, 0) == a2)
          playeroverlap_advanceTimeReached((uint64_t)v10);
        playeroverlap_removeFinishedItem(v10, (uint64_t)a2);
      }
      else if (!*((_DWORD *)v7 + 16))
      {
        *((_DWORD *)v7 + 16) = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 104);
        CMBaseObjectGetDerivedStorage();
        CMBaseObjectGetDerivedStorage();
        v16[0] = 0;
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v14 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
        v15 = *(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v15)
          v15(v14, 0, v16);
      }
    }
    if (FigCFEqual() && *((_DWORD *)v7 + 16))
    {
      playeroverlap_removeFinishedItem(v10, (uint64_t)a2);
      *((_DWORD *)v7 + 16) = 0;
    }
    if (FigCFEqual()
      && playeroverlap_itemAtIndex((uint64_t)v10, 0) == a2
      && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
    {
      playeroverlap_rescheduleAdvanceTimerAndAnchorTime(v10);
    }
    result = (unsigned __int8 *)itemoverlap_findAndDiscardFromBlockNextNotifications((uint64_t)a2, a3);
    if (!(_DWORD)result)
      return (unsigned __int8 *)playeroverlap_dispatchAsyncPostNotification(0);
  }
  return result;
}

uint64_t playeroverlap_reInsertPendingQueue(void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFArrayRef Copy;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Copy = CFArrayCreateCopy(v3, *(CFArrayRef *)(DerivedStorage + 40));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 40));
  if (CFArrayGetCount(Copy) < 1)
  {
LABEL_5:
    v8 = 0;
    if (!Copy)
      return v8;
LABEL_6:
    CFRelease(Copy);
    return v8;
  }
  v5 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(Copy, v5);
    v7 = playeroverlap_AddToPlayQueueInPlayerQueue(a1, ValueAtIndex, 0);
    if ((_DWORD)v7)
      break;
    if (CFArrayGetCount(Copy) <= ++v5)
      goto LABEL_5;
  }
  v8 = v7;
  if (Copy)
    goto LABEL_6;
  return v8;
}

uint64_t playeroverlap_AddToPlayQueueInPlayerQueue(void *a1, const void *a2, const void *a3)
{
  unsigned __int8 v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  unsigned __int8 v9;
  CFIndex v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  __CFArray *v32;
  uint64_t v33;
  NSObject *v34;
  __CFArray *v35;
  uint64_t FirstIndexOfValue;
  NSObject *v37;
  uint64_t v38;
  _BOOL4 hasAdvanceTime;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, float);

  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
    return FigSignalErrorAt();
  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  if (a3 && !playeroverlap_isLastItem((uint64_t)a1, a3))
  {
    if (dword_1EE2A2E18)
    {
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (playeroverlap_indexForItem() == -1)
      return 4294954516;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = CMBaseObjectGetDerivedStorage();
    v18 = *(int *)(v17 + 48);
    if ((_DWORD)v18 == -1)
    {
      v35 = *(__CFArray **)(DerivedStorage + 40);
      FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
      CFArrayInsertValueAtIndex(v35, FirstIndexOfValue + 1, a2);
      *(_DWORD *)(v16 + 48) = -1;
      if (dword_1EE2A2E18)
      {
        v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      v19 = v17;
      v20 = *(_QWORD *)(DerivedStorage + 8 + 8 * v18);
      v21 = *(_QWORD *)(v16 + 16);
      v22 = __OFADD__((_DWORD)v18, 1);
      v24 = v18 + 1;
      v23 = (v24 < 0) ^ v22;
      v25 = v24 & 1;
      if (v23)
        v25 = -v25;
      v26 = *(_QWORD *)(DerivedStorage + 8 + 8 * v25);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
      if (v27)
        v27(v20, v21, v26);
      v28 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(v19 + 48) + 8);
      v29 = *(_QWORD *)(v16 + 16);
      v30 = *(_QWORD *)(v19 + 16);
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v31)
        return 4294954514;
      result = v31(v28, v29, v30);
      if ((_DWORD)result)
        return result;
      v32 = *(__CFArray **)(DerivedStorage + 8 * *(int *)(v19 + 48) + 24);
      v33 = FigCFArrayGetFirstIndexOfValue();
      CFArrayInsertValueAtIndex(v32, v33 + 1, a2);
      *(_DWORD *)(v16 + 48) = *(_DWORD *)(v19 + 48);
      if (dword_1EE2A2E18)
      {
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (itemoverlap_hasAdvanceTime((_BOOL8)a2) || itemoverlap_hasAdvanceTime((_BOOL8)a3))
      {
        v38 = playeroverlap_indexForItem();
        hasAdvanceTime = itemoverlap_hasAdvanceTime((_BOOL8)a3);
        v40 = 1;
        if (!hasAdvanceTime)
          v40 = 2;
        result = playeroverlap_refreshPlayQueueFromIndex(a1, v40 + v38);
        if ((_DWORD)result)
          return result;
      }
    }
  }
  else
  {
    result = playeroverlap_AppendToPlayQueueInPlayerQueue(a1, a2, 1);
    if ((_DWORD)result)
      return result;
    v10 = playeroverlap_playQueueCount();
    if (v10 > 1)
    {
      v11 = playeroverlap_itemAtIndex((uint64_t)a1, v10 - 2);
      v12 = CMBaseObjectGetDerivedStorage();
      if (v11)
      {
        v13 = v12;
        if (*(_DWORD *)(v12 + 64))
        {
          if (playeroverlap_isActionAtEnd())
          {
            playeroverlap_removeFinishedItem(a1, (uint64_t)v11);
            *(_DWORD *)(v13 + 64) = 0;
          }
        }
      }
    }
    else
    {
      CMBaseObjectGetDerivedStorage();
    }
  }
  if (playeroverlap_itemAtIndex((uint64_t)a1, 0) != a2 && playeroverlap_itemAtIndex((uint64_t)a1, 1) != a2)
    return 0;
  v41 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  result = itemoverlap_hasAdvanceTime((_BOOL8)v41);
  if (!(_DWORD)result)
    return result;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
    return playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  v42 = CMBaseObjectGetDerivedStorage();
  v43 = *(_DWORD *)(v42 + 4);
  v22 = __OFADD__(v43++, 1);
  v23 = (v43 < 0) ^ v22;
  v44 = v43 & 1;
  if (v23)
    v44 = -v44;
  v45 = *(_QWORD *)(v42 + 8 * v44 + 8);
  v46 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v46)
    return 4294954514;
  result = v46(v45, 0.0);
  if (!(_DWORD)result)
  {
    playeroverlap_removeAdvanceTimer();
    return playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  }
  return result;
}

BOOL playeroverlap_isLastItem(uint64_t a1, const void *a2)
{
  CFIndex v4;
  const void *v5;

  v4 = playeroverlap_playQueueCount();
  if (v4 < 1)
    v5 = 0;
  else
    v5 = playeroverlap_itemAtIndex(a1, v4 - 1);
  return v5 == a2;
}

uint64_t playeroverlap_AppendToPlayQueueInPlayerQueue(void *a1, const void *a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v7;
  uint64_t DerivedStorage;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 isPlayQueueFull;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  int v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD);
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  int v44;
  int v45;
  CFIndex Count;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, _QWORD);
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  NSObject *v58;

  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = CMBaseObjectGetDerivedStorage();
  isPlayQueueFull = playeroverlap_isPlayQueueFull(*(const __CFArray **)(v11 + 8 * *(int *)(v11 + 4) + 24));
  v13 = CMBaseObjectGetDerivedStorage();
  v14 = *(int *)(v13 + 4);
  if (!isPlayQueueFull)
  {
    v22 = *(_QWORD *)(v13 + 8 * v14 + 8);
    v23 = *(_QWORD *)(v10 + 16);
    v24 = CMBaseObjectGetDerivedStorage();
    v25 = *(_DWORD *)(v24 + 4);
    v15 = __OFADD__(v25++, 1);
    v16 = (v25 < 0) ^ v15;
    v26 = v25 & 1;
    if (v16)
      v26 = -v26;
    v27 = *(_QWORD *)(v24 + 8 * v26 + 8);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
    if (v28)
      v28(v22, v23, v27);
    v29 = CMBaseObjectGetDerivedStorage();
    v30 = *(_QWORD *)(v29 + 8 * *(int *)(v29 + 4) + 8);
    v31 = *(_QWORD *)(v10 + 16);
    v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v32)
      return 4294954514;
    v20 = v32(v30, v31, 0);
    if (!(_DWORD)v20)
    {
      *(_DWORD *)(v10 + 48) = *(_DWORD *)(DerivedStorage + 4);
      v33 = CMBaseObjectGetDerivedStorage();
      CFArrayAppendValue(*(CFMutableArrayRef *)(v33 + 8 * *(int *)(v33 + 4) + 24), a2);
      if (dword_1EE2A2E18)
      {
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!a3 || playeroverlap_playQueueCount() != 1)
        return 0;
      v21 = 0;
      *(_QWORD *)(DerivedStorage + 80) = CFSTR("ReasonAddToPlayQueue");
      return v21;
    }
    return v20;
  }
  v15 = __OFADD__((_DWORD)v14, 1);
  v17 = v14 + 1;
  v16 = (v17 < 0) ^ v15;
  v18 = v17 & 1;
  if (v16)
    v18 = -v18;
  if (playeroverlap_isPlayQueueFull(*(const __CFArray **)(v13 + 8 * v18 + 24)))
  {
    *(_DWORD *)(v10 + 48) = -1;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 40), a2);
    if (dword_1EE2A2E18)
    {
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  v35 = CMBaseObjectGetDerivedStorage();
  v36 = *(_DWORD *)(v35 + 4);
  v15 = __OFADD__(v36++, 1);
  v16 = (v36 < 0) ^ v15;
  v37 = v36 & 1;
  if (v16)
    v37 = -v37;
  v38 = *(_QWORD *)(v35 + 8 * v37 + 8);
  v39 = *(_QWORD *)(v10 + 16);
  v40 = CMBaseObjectGetDerivedStorage();
  v41 = *(_QWORD *)(v40 + 8 * *(int *)(v40 + 4) + 8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (v42)
    v42(v38, v39, v41);
  v43 = CMBaseObjectGetDerivedStorage();
  v44 = *(_DWORD *)(v43 + 4);
  v15 = __OFADD__(v44++, 1);
  v16 = (v44 < 0) ^ v15;
  v45 = v44 & 1;
  if (v16)
    v45 = -v45;
  Count = CFArrayGetCount(*(CFArrayRef *)(v43 + 8 * v45 + 24));
  if (!Count)
    itemoverlap_addToBlockNextNotifications((uint64_t)a2, CFSTR("ItemBecameCurrent"));
  v47 = CMBaseObjectGetDerivedStorage();
  v48 = *(_DWORD *)(v47 + 4);
  v15 = __OFADD__(v48++, 1);
  v16 = (v48 < 0) ^ v15;
  v49 = v48 & 1;
  if (v16)
    v49 = -v49;
  v50 = *(_QWORD *)(v47 + 8 * v49 + 8);
  v51 = *(_QWORD *)(v10 + 16);
  v52 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v52)
  {
    v21 = v52(v50, v51, 0);
    if (!(_DWORD)v21)
    {
      v53 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 4);
      v15 = __OFADD__(v53++, 1);
      v16 = (v53 < 0) ^ v15;
      v54 = v53 & 1;
      if (v16)
        v54 = -v54;
      *(_DWORD *)(v10 + 48) = v54;
      v55 = CMBaseObjectGetDerivedStorage();
      v56 = *(_DWORD *)(v55 + 4);
      v15 = __OFADD__(v56++, 1);
      v16 = (v56 < 0) ^ v15;
      v57 = v56 & 1;
      if (v16)
        v57 = -v57;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v55 + 8 * v57 + 24), a2);
      if (dword_1EE2A2E18)
      {
        v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!Count && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
        playeroverlap_rescheduleAdvanceTimerAndAnchorTime(a1);
      return 0;
    }
  }
  else
  {
    v21 = 4294954514;
  }
  if (!Count)
    itemoverlap_findAndDiscardFromBlockNextNotifications((uint64_t)a2, CFSTR("ItemBecameCurrent"));
  return v21;
}

uint64_t playeroverlap_removeFinishedItem(void *a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72) == a2)
  {
    if (playeroverlap_removeOutroItem(a1, 0))
      goto LABEL_8;
  }
  else if (playeroverlap_removeItemAndRefreshPlayQueue(a1, a2, 0))
  {
LABEL_8:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = itemoverlap_removeTimebaseListener();
  if ((_DWORD)result)
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1EE2A2E18)
    goto LABEL_8;
  return result;
}

uint64_t playeroverlap_indexForItem()
{
  uint64_t result;
  CFIndex Count;
  uint64_t v2;
  uint64_t v3;
  uint64_t FirstIndexOfValue;
  uint64_t DerivedStorage;
  uint64_t v6;
  BOOL v7;
  char v8;
  int v9;
  int v10;

  CMBaseObjectGetDerivedStorage();
  result = FigCFArrayGetFirstIndexOfValue();
  if (result == -1)
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
    {
      Count = 0;
    }
    else
    {
      CMBaseObjectGetDerivedStorage();
      FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v6 = *(int *)(DerivedStorage + 4);
      if (FirstIndexOfValue != -1)
        return CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * v6 + 24)) + FirstIndexOfValue;
      v7 = __OFADD__((_DWORD)v6, 1);
      v9 = v6 + 1;
      v8 = (v9 < 0) ^ v7;
      v10 = v9 & 1;
      if (v8)
        v10 = -v10;
      Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * v10 + 24));
    }
    CMBaseObjectGetDerivedStorage();
    result = FigCFArrayGetFirstIndexOfValue();
    if (result != -1)
    {
      v2 = result;
      v3 = CMBaseObjectGetDerivedStorage();
      return v2 + Count + CFArrayGetCount(*(CFArrayRef *)(v3 + 8 * *(int *)(v3 + 4) + 24));
    }
  }
  return result;
}

uint64_t playeroverlap_refreshPlayQueueFromIndex(void *a1, CFIndex a2)
{
  CFIndex v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *v6;
  __CFArray *Mutable;
  const void *v8;
  uint64_t v9;
  CFIndex v10;
  const void *ValueAtIndex;
  uint64_t v12;

  v4 = playeroverlap_playQueueCount();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v4 <= a2)
    return 0;
  v6 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  while (1)
  {
    v8 = playeroverlap_itemAtIndex((uint64_t)a1, --v4);
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48) != -1)
      itemoverlap_addToBlockNextNotifications((uint64_t)v8, CFSTR("ItemWasRemovedFromPlayQueue"));
    v9 = playeroverlap_removeFromInternalPlayQueue(a1, (uint64_t)v8, 1);
    if ((_DWORD)v9)
      break;
    CFArrayInsertValueAtIndex(Mutable, 0, v8);
    if (v4 <= a2)
    {
      if (CFArrayGetCount(Mutable) < 1)
      {
LABEL_13:
        v12 = 0;
        if (!Mutable)
          return v12;
        goto LABEL_17;
      }
      v10 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v10);
        v9 = playeroverlap_AppendToPlayQueueInPlayerQueue(a1, ValueAtIndex, 0);
        if ((_DWORD)v9)
          goto LABEL_16;
        if (++v10 >= CFArrayGetCount(Mutable))
          goto LABEL_13;
      }
    }
  }
LABEL_16:
  v12 = v9;
  if (!Mutable)
    return v12;
LABEL_17:
  CFRelease(Mutable);
  return v12;
}

uint64_t playeroverlap_removeFromInternalPlayQueue(void *a1, uint64_t a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  const void *ValueAtIndex;
  CFIndex FirstIndexOfValue;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  const void *v37;

  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(int *)(v8 + 48);
  if ((_DWORD)v9 == -1)
  {
    FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 40), FirstIndexOfValue);
    return 0;
  }
  v10 = v8;
  v11 = FigCFArrayGetFirstIndexOfValue();
  v12 = v11;
  v13 = 0;
  if (!a3)
  {
LABEL_17:
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 8 * v9 + 24), v12);
    v28 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v28 + 64) = 0;
    *(_DWORD *)(v28 + 48) = -1;
    if (v13 && *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
    {
      v27 = playeroverlap_rescheduleAdvanceTimerAndAnchorTime(a1);
      if ((_DWORD)v27)
      {
        v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return v27;
    }
    return 0;
  }
  if ((_DWORD)v9 != *(_DWORD *)(DerivedStorage + 4) && !v11)
  {
    itemoverlap_addToBlockNextNotifications(a2, CFSTR("ItemStoppedBeingCurrent"));
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = *(_DWORD *)(v14 + 4);
    v16 = __OFADD__(v15++, 1);
    v17 = (v15 < 0) ^ v16;
    v18 = v15 & 1;
    if (v17)
      v18 = -v18;
    if (CFArrayGetCount(*(CFArrayRef *)(v14 + 8 * v18 + 24)) < 2)
    {
      v13 = 0;
    }
    else
    {
      v19 = CMBaseObjectGetDerivedStorage();
      v20 = *(_DWORD *)(v19 + 4);
      v16 = __OFADD__(v20++, 1);
      v17 = (v20 < 0) ^ v16;
      v21 = v20 & 1;
      if (v17)
        v21 = -v21;
      v13 = 1;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 8 * v21 + 24), 1);
      itemoverlap_addToBlockNextNotifications((uint64_t)ValueAtIndex, CFSTR("ItemBecameCurrent"));
    }
  }
  v24 = *(_QWORD *)(DerivedStorage + 8 * v9 + 8);
  v25 = *(_QWORD *)(v10 + 16);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v26)
  {
    v27 = v26(v24, v25);
    if (!(_DWORD)v27)
      goto LABEL_17;
  }
  else
  {
    v27 = 4294954514;
  }
  if ((_DWORD)v9 != *(_DWORD *)(DerivedStorage + 4) && !v12)
  {
    itemoverlap_findAndDiscardFromBlockNextNotifications(a2, CFSTR("ItemStoppedBeingCurrent"));
    v31 = CMBaseObjectGetDerivedStorage();
    v32 = *(_DWORD *)(v31 + 4);
    v16 = __OFADD__(v32++, 1);
    v17 = (v32 < 0) ^ v16;
    v33 = v32 & 1;
    if (v17)
      v33 = -v33;
    if (CFArrayGetCount(*(CFArrayRef *)(v31 + 8 * v33 + 24)) >= 2)
    {
      v34 = CMBaseObjectGetDerivedStorage();
      v35 = *(_DWORD *)(v34 + 4);
      v16 = __OFADD__(v35++, 1);
      v17 = (v35 < 0) ^ v16;
      v36 = v35 & 1;
      if (v17)
        v36 = -v36;
      v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 8 * v36 + 24), 1);
      itemoverlap_findAndDiscardFromBlockNextNotifications((uint64_t)v37, CFSTR("ItemBecameCurrent"));
    }
  }
  return v27;
}

uint64_t itemoverlap_findAndDiscardFromBlockNextNotifications(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 56), a2);
  if ((_DWORD)result)
  {
    if (dword_1EE2A2E18 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 56), a2);
    return 1;
  }
  return result;
}

uint64_t playeroverlap_rescheduleAdvanceTimerAndAnchorTime(void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  BOOL v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, float);
  uint64_t v9;
  uint64_t v10;

  playeroverlap_assertHasAdvanceTimer((uint64_t)a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(DerivedStorage + 4);
  v4 = __OFADD__(v3++, 1);
  v5 = (v3 < 0) ^ v4;
  v6 = v3 & 1;
  if (v5)
    v6 = -v6;
  v7 = *(_QWORD *)(DerivedStorage + 8 * v6 + 8);
  v8 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v8)
  {
    v10 = 4294954514;
LABEL_8:
    FigSignalErrorAt();
    return v10;
  }
  v9 = v8(v7, 0.0);
  if ((_DWORD)v9)
  {
    v10 = v9;
    goto LABEL_8;
  }
  playeroverlap_removeAdvanceTimer();
  v10 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  if ((_DWORD)v10)
    goto LABEL_8;
  return v10;
}

uint64_t playeroverlap_assertHasAdvanceTimer(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v2;
  BOOL v3;
  char v4;
  int v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, int *);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, int *);
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  playeroverlap_itemAtIndex(a1, 1);
  CMBaseObjectGetDerivedStorage();
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(_DWORD *)(DerivedStorage + 4);
  v3 = __OFADD__(v2++, 1);
  v4 = (v2 < 0) ^ v3;
  v5 = v2 & 1;
  if (v4)
    v5 = -v5;
  v6 = *(_QWORD *)(DerivedStorage + 8 * v5 + 8);
  v7 = *(unsigned int (**)(uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7
    || v7(v6, &v13)
    || (v8 = CMBaseObjectGetDerivedStorage(),
        v9 = *(_QWORD *)(v8 + 8 * *(int *)(v8 + 4) + 8),
        (v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48)) == 0)
    || (result = v10(v9, &v13), (_DWORD)result))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

BOOL playeroverlap_isPlayQueueFull(const __CFArray *a1)
{
  CFIndex Count;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  ValueAtIndex = CFArrayGetValueAtIndex(a1, Count - 1);
  return itemoverlap_hasAdvanceTime((_BOOL8)ValueAtIndex);
}

uint64_t playeroverlap_removeItemAndRefreshPlayQueue(void *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  CFIndex v7;
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  int v14;
  __CFString **v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, float);
  uint64_t v22;
  int v23;
  int v24;
  __CFString *v25;
  __CFDictionary *v26;
  uint64_t v27;
  NSObject *v28;
  float v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = playeroverlap_indexForItem();
  if (v6 == -1)
    return FigSignalErrorAt();
  v7 = v6;
  result = playeroverlap_removeFromInternalPlayQueue(a1, a2, a3);
  if (!(_DWORD)result)
  {
    result = itemoverlap_hasAdvanceTime(a2);
    if ((_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 24)))
        return playeroverlap_refreshPlayQueueFromIndex(a1, v7);
      v10 = CMBaseObjectGetDerivedStorage();
      v11 = *(_DWORD *)(v10 + 4);
      v12 = __OFADD__(v11++, 1);
      v13 = (v11 < 0) ^ v12;
      v14 = v11 & 1;
      if (v13)
        v14 = -v14;
      if (!CFArrayGetCount(*(CFArrayRef *)(v10 + 8 * v14 + 24)))
        return playeroverlap_refreshPlayQueueFromIndex(a1, v7);
      if (a3)
        v15 = kFigPlayerCurrentItemDidChangeReason_RemoveFromPlayQueue;
      else
        v15 = kFigPlayerCurrentItemDidChangeReason_AdvanceAtEnd;
      playeroverlap_itemAtIndex((uint64_t)a1, 0);
      if (dword_1EE2A2E18)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v29 = 0.0;
      result = playeroverlap_GetRateInPlayerQueue((uint64_t)a1, (uint64_t)&v29);
      if (!(_DWORD)result)
      {
        if (v29 == 0.0)
          goto LABEL_23;
        result = playeroverlap_SetRateInPlayerQueue((uint64_t)a1, 0.0);
        if ((_DWORD)result)
          return result;
        if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
          goto LABEL_23;
        v17 = CMBaseObjectGetDerivedStorage();
        v18 = *(_DWORD *)(v17 + 4);
        v12 = __OFADD__(v18++, 1);
        v13 = (v18 < 0) ^ v12;
        v19 = v18 & 1;
        if (v13)
          v19 = -v19;
        v20 = *(_QWORD *)(v17 + 8 * v19 + 8);
        v21 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v21)
          return 4294954514;
        result = v21(v20, 0.0);
        if (!(_DWORD)result)
        {
          playeroverlap_removeAdvanceTimer();
LABEL_23:
          v22 = CMBaseObjectGetDerivedStorage();
          v23 = *(_DWORD *)(v22 + 4);
          v12 = __OFADD__(v23++, 1);
          v13 = (v23 < 0) ^ v12;
          v24 = v23 & 1;
          if (v13)
            v24 = -v24;
          *(_DWORD *)(v22 + 4) = v24;
          if (v29 == 0.0 || (result = playeroverlap_SetRateInPlayerQueue((uint64_t)a1, v29), !(_DWORD)result))
          {
            v25 = *v15;
            playeroverlap_dispatchAsyncPostNotification(0);
            v26 = playeroverlap_createCurrentItemDidChangePayload(v25);
            playeroverlap_dispatchAsyncPostNotification((uint64_t)a1);
            if (v26)
              CFRelease(v26);
            result = playeroverlap_reInsertPendingQueue(a1);
            if ((_DWORD)result)
            {
              v27 = result;
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              return v27;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t playeroverlap_GetRateInPlayerQueue(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  NSObject *v11;

  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v6)
  {
    v7 = v6(v5, a2);
    if (!(_DWORD)v7)
    {
      if (dword_1EE2A2E18)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    v10 = v7;
  }
  else
  {
    v10 = 4294954514;
  }
  v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v10;
}

uint64_t playeroverlap_SetRateInPlayerQueue(uint64_t a1, float a2)
{
  unsigned __int8 v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __n128 *v7[17];

  v7[16] = *(__n128 **)MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  memset(v7, 0, 24);
  return playeroverlap_SetRateCommon(a1, v7, a2);
}

uint64_t playeroverlap_SetRateCommon(uint64_t a1, __n128 **a2, float a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  int v9;
  BOOL v10;
  char v11;
  int v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, float);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t (*v20)(uint64_t, __n128 *, __n128);
  __n128 *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t result;
  __n128 *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, __n128 *, __n128 *, uint64_t, float);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, __n128 *);
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  void (*v35)(uint64_t, __n128 *);
  int v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  __n128 *v40;
  uint64_t (*v41)(uint64_t, float);
  os_log_type_t type[16];
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
    playeroverlap_removeOutroItem(a1, 1);
  v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  if (a3 == 0.0 && v6 != 0)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = *(_DWORD *)(DerivedStorage + 4);
    v10 = __OFADD__(v9++, 1);
    v11 = (v9 < 0) ^ v10;
    v12 = v9 & 1;
    if (v11)
      v12 = -v12;
    v13 = *(_QWORD *)(DerivedStorage + 8 * v12 + 8);
    v14 = *(unsigned int (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v14 || v14(v13, 0.0))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playeroverlap_removeAdvanceTimer();
  }
  if (dword_1EE2A2E18)
  {
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v17 = CMBaseObjectGetDerivedStorage();
  v18 = *(_QWORD *)(v17 + 8 * *(int *)(v17 + 4) + 8);
  v19 = *a2;
  if (*a2)
  {
    v46 = *v19;
    v47 = v19[1].n128_i64[0];
    v20 = *(uint64_t (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v20)
    {
      v23 = v46;
      v48 = v46;
      v49 = v47;
      v21 = &v48;
      v22 = v18;
      v23.n128_f32[0] = a3;
      goto LABEL_18;
    }
    return 4294954514;
  }
  v25 = a2[1];
  if (v25)
  {
    v26 = v25[3].n128_u32[0];
    v44 = *v25;
    v45 = v25[1].n128_i64[0];
    *(__n128 *)type = *(__n128 *)((char *)v25 + 24);
    v43 = v25[2].n128_i64[1];
    v27 = *(uint64_t (**)(uint64_t, __n128 *, __n128 *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 88);
    if (v27)
    {
      v48 = v44;
      v49 = v45;
      v46 = *(__n128 *)type;
      v47 = v43;
      result = v27(v18, &v48, &v46, v26, a3);
      if ((_DWORD)result)
        return result;
      goto LABEL_25;
    }
    return 4294954514;
  }
  v39 = a2[2];
  if (!v39)
  {
    v41 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v41)
    {
      result = v41(v18, a3);
      if ((_DWORD)result)
        return result;
      goto LABEL_25;
    }
    return 4294954514;
  }
  v40 = (__n128 *)v39->n128_u64[0];
  v20 = *(uint64_t (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (!v20)
    return 4294954514;
  v22 = v18;
  v23.n128_f32[0] = a3;
  v21 = v40;
LABEL_18:
  result = v20(v22, v21, v23);
  if ((_DWORD)result)
    return result;
LABEL_25:
  if (a3 == 0.0)
  {
    v48.n128_u32[0] = 0;
    v28 = CMBaseObjectGetDerivedStorage();
    v29 = *(_QWORD *)(v28 + 8 * *(int *)(v28 + 4) + 8);
    v30 = *(void (**)(uint64_t, __n128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v30)
      v30(v29, &v48);
    v31 = CMBaseObjectGetDerivedStorage();
    v32 = *(_DWORD *)(v31 + 4);
    v10 = __OFADD__(v32++, 1);
    v11 = (v32 < 0) ^ v10;
    v33 = v32 & 1;
    if (v11)
      v33 = -v33;
    v34 = *(_QWORD *)(v31 + 8 * v33 + 8);
    v35 = *(void (**)(uint64_t, __n128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v35)
      v35(v34, &v48);
  }
  if (a3 != 0.0)
  {
    if (a3 > 0.0)
      v36 = 1;
    else
      v36 = 2;
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 104) = v36;
  }
  result = (uint64_t)playeroverlap_itemAtIndex(a1, 0);
  if (result)
  {
    v37 = CMBaseObjectGetDerivedStorage();
    v38 = v37;
    if (a3 > 0.0 && *(_DWORD *)(v37 + 64) == 2 || a3 < 0.0 && *(_DWORD *)(v37 + 64) == 1)
    {
      result = 0;
      *(_DWORD *)(v38 + 64) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t playeroverlap_copyPerformanceHistoryArray(uint64_t a1, const __CFAllocator *a2, CFArrayRef *a3)
{
  unsigned __int8 v5;
  uint64_t DerivedStorage;
  const __CFArray *Mutable;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v13;
  CFTypeRef v15;
  CFTypeRef cf;

  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  cf = 0;
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (v9)
  {
    v10 = v9(FigBaseObject, CFSTR("PerformanceHistoryArray"), a2, &cf);
    if ((_DWORD)v10)
    {
      v13 = v10;
      goto LABEL_9;
    }
    v11 = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
    {
      v13 = v12(v11, CFSTR("PerformanceHistoryArray"), a2, &v15);
      if (!(_DWORD)v13)
      {
        FigCFArrayAppendArray();
        FigCFArrayAppendArray();
        *a3 = CFArrayCreateCopy(a2, Mutable);
      }
      goto LABEL_9;
    }
  }
  v13 = 4294954514;
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (Mutable)
    CFRelease(Mutable);
  return v13;
}

uint64_t playeroverlap_copyPropertyFromActiveSubPlayer_fun(uint64_t a1)
{
  uint64_t result;

  result = playeroverlap_copyPropertyFromActiveSubPlayerInPlayerQueue(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t playeroverlap_copyPropertyFromActiveSubPlayerInPlayerQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    return v12(FigBaseObject, a3, a2, a4);
  else
    return 4294954514;
}

uint64_t playeroverlap_handleSetProperty(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, _BYTE *a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  uint64_t DerivedStorage;
  unsigned __int8 v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t context;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *a5 = 1;
  if (FigCFEqual())
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v11 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v11 & 1) == 0)
    {
      v21 = a4;
      v22 = 0;
      context = a1;
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_setActionAtEnd_fun);
      return v22;
    }
    return FigSignalErrorAt();
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (dword_1EE2A2E18)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v14 & 1) == 0)
    {
      context = a1;
      v21 = (uint64_t)a3;
      v22 = a4;
      v23 = 0;
      dispatch_sync_f(*(dispatch_queue_t *)(v13 + 48), &context, (dispatch_function_t)playeroverlap_setPropertyToActiveSubPlayer_fun);
      return v23;
    }
    return FigSignalErrorAt();
  }
  v15 = CFEqual(a3, CFSTR("FigAudioSession"));
  if (v15)
  {
    v16 = 0;
  }
  else
  {
    v17 = CFEqual(a3, CFSTR("FigAudioSession2"));
    v16 = v17 != 0;
    if (v17)
      a3 = CFSTR("FigAudioSession");
  }
  v18 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v19 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v16)
  {
    if (v15)
      return 0;
    return FigPlayerSetProperty(v19, (uint64_t)a3, a4);
  }
  result = FigPlayerSetProperty(v18, (uint64_t)a3, a4);
  if (!v15 && !(_DWORD)result)
    return FigPlayerSetProperty(v19, (uint64_t)a3, a4);
  return result;
}

void playeroverlap_setActionAtEnd_fun(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v6;
  int active;
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, uint64_t);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cf[0] = 0;
  active = playeroverlap_copyPropertyFromActiveSubPlayerInPlayerQueue((uint64_t)v2, *MEMORY[0x1E0C9AE00], (uint64_t)CFSTR("ActionAtEnd"), (uint64_t)cf);
  if (active)
    goto LABEL_21;
  if (FigCFEqual())
    goto LABEL_22;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v10)
    goto LABEL_18;
  active = v10(FigBaseObject, CFSTR("ActionAtEnd"), v3);
  if (active)
    goto LABEL_21;
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = *(_DWORD *)(v11 + 4);
  v13 = __OFADD__(v12++, 1);
  v14 = (v12 < 0) ^ v13;
  v15 = v12 & 1;
  if (v14)
    v15 = -v15;
  v16 = FigPlayerGetFigBaseObject(*(_QWORD *)(v11 + 8 * v15 + 8));
  v17 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v17)
  {
LABEL_18:
    v6 = -12782;
    goto LABEL_23;
  }
  active = v17(v16, CFSTR("ActionAtEnd"), v3);
  if (active)
    goto LABEL_21;
  if (!FigCFEqual())
  {
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
      goto LABEL_22;
    active = playeroverlap_removeOutroItem(v2, 1);
LABEL_21:
    v6 = active;
    goto LABEL_23;
  }
  v18 = playeroverlap_itemAtIndex((uint64_t)v2, 0);
  if (v18)
  {
    v19 = (uint64_t)v18;
    v20 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v20 + 64))
    {
      v21 = v20;
      playeroverlap_removeFinishedItem(v2, v19);
      *(_DWORD *)(v21 + 64) = 0;
    }
    active = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v2);
    goto LABEL_21;
  }
LABEL_22:
  v6 = 0;
LABEL_23:
  if (cf[0])
    CFRelease(cf[0]);
LABEL_25:
  *(_DWORD *)(a1 + 16) = v6;
}

uint64_t playeroverlap_setPropertyToActiveSubPlayer_fun(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
  {
    FigSignalErrorAt();
    result = 0;
  }
  else
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v8)
      result = v8(FigBaseObject, v2, v3);
    else
      result = 4294954514;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_AddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v8;
  _QWORD context[3];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  v11 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_AddToPlayQueue_fun);
  return v11;
}

uint64_t playeroverlap_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v6;
  _QWORD context[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  context[1] = a2;
  v9 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_RemoveFromPlayQueue_fun);
  return v9;
}

uint64_t playeroverlap_CopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v8;
  _QWORD context[3];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  v11 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_CopyPlayQueueItem_fun);
  return v11;
}

uint64_t playeroverlap_SetRate(uint64_t a1, float a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v6;
  uint64_t context;
  float v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  context = a1;
  v9 = a2;
  v10 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_SetRate_fun);
  return v10;
}

uint64_t playeroverlap_GetRate(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v6;
  _QWORD context[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  context[1] = a2;
  v9 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_GetRate_fun);
  return v9;
}

uint64_t playeroverlap_SetRateWithFade(uint64_t a1, __int128 *a2, float a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v8;
  uint64_t context;
  float v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  context = a1;
  v11 = a3;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_SetRateWithFade_fun);
  return v14;
}

uint64_t playeroverlap_StartPreroll(uint64_t a1, int a2, float a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v8;
  uint64_t context;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  v13 = 0;
  context = a1;
  v11 = a3;
  v12 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_StartPreroll_fun);
  return v13;
}

uint64_t playeroverlap_StepByCount(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v6;
  uint64_t context;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  context = a1;
  v9 = a2;
  v10 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_StepByCount_fun);
  return v10;
}

uint64_t playeroverlap_SetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, int a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v12;
  uint64_t context;
  float v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v12 & 1) != 0)
    return FigSignalErrorAt();
  v21 = 0;
  context = a1;
  v15 = a5;
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  v20 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_SetRateAndAnchorTime_fun);
  return v21;
}

uint64_t playeroverlap_CreatePlaybackItemFromAsset(const void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *value;
  CFTypeRef cf;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v10 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v10 & 1) != 0)
    return FigSignalErrorAt();
  cf = 0;
  if (!a5)
    return FigSignalErrorAt();
  if (!a2)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_15;
  }
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  v11 = CMDerivedObjectCreate();
  if (FigSignalErrorAt())
    goto LABEL_17;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 104) = 0;
  value = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 104), 20, 0x600u);
  *(_BYTE *)DerivedStorage = 0;
  *(_DWORD *)(DerivedStorage + 48) = -1;
  *(_QWORD *)(DerivedStorage + 8) = a1;
  *(_QWORD *)(DerivedStorage + 56) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v13 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 40) = *(_QWORD *)(v13 + 16);
  v14 = CMBaseObjectGetDerivedStorage();
  v15 = *(_QWORD *)(v14 + 8 * *(int *)(v14 + 4) + 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 96);
  if (!v16)
  {
    v11 = 4294954514;
    goto LABEL_17;
  }
  v17 = v16(v15, a2, a3, a4, DerivedStorage + 16);
  if ((_DWORD)v17)
  {
LABEL_15:
    v11 = v17;
    goto LABEL_17;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v18 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v18)
  {
    v11 = v18;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_17:
    if (cf)
    {
      CFRelease(cf);
      *a5 = 0;
    }
    return v11;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 96));
  CFSetAddValue(*(CFMutableSetRef *)(v14 + 88), cf);
  MEMORY[0x19402EF04](*(_QWORD *)(v14 + 96));
  if (dword_1EE2A2E18)
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = 0;
  *a5 = cf;
  return v11;
}

uint64_t playeroverlap_SetRateWithOptions(uint64_t a1, uint64_t a2, float a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v8;
  _QWORD context[3];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = LODWORD(a3);
  context[2] = a2;
  v11 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_SetRateWithOptions_fun);
  return v11;
}

uint64_t playeroverlap_SetProperties(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  unsigned __int8 v6;

  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  else
    return FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playeroverlap_handleSetProperty, 0, 0, a3);
}

uint64_t playeroverlap_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (!v8)
    return 4294954514;
  result = v8(v7, a2);
  if ((_DWORD)result)
    return result;
  v9 = *(_QWORD *)(DerivedStorage + 16);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v10)
    return v10(v9, a2);
  else
    return 4294954514;
}

uint64_t playeroverlap_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v6;
  _QWORD context[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  context[1] = a2;
  v9 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_AddExternalStartupTask_fun);
  return v9;
}

uint64_t playeroverlap_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  unsigned __int8 v6;
  _QWORD context[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  context[1] = a2;
  v9 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_RemoveExternalStartupTask_fun);
  return v9;
}

uint64_t playeroverlap_AddToPlayQueue_fun(uint64_t a1)
{
  uint64_t result;

  result = playeroverlap_AddToPlayQueueInPlayerQueue(*(void **)a1, *(const void **)(a1 + 8), *(const void **)(a1 + 16));
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_RemoveFromPlayQueue_fun(uint64_t a1)
{
  void *v2;
  const void *v3;
  unsigned __int8 v4;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD);
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;

  v2 = *(void **)a1;
  v3 = *(const void **)(a1 + 8);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
    goto LABEL_4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
  {
    if (*(const void **)(DerivedStorage + 72) != v3)
    {
      if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72) || playeroverlap_itemAtIndex((uint64_t)v2, 0) != v3)
        goto LABEL_13;
      goto LABEL_11;
    }
    playeroverlap_assertInOutro();
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_4:
    result = FigSignalErrorAt();
    goto LABEL_27;
  }
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
    goto LABEL_14;
LABEL_11:
  playeroverlap_assertInOutro();
  result = playeroverlap_removeOutroItem(v2, 1);
  if (!(_DWORD)result)
  {
    if (v3)
    {
LABEL_13:
      result = playeroverlap_removeItemAndRefreshPlayQueue(v2, (uint64_t)v3, 1);
      goto LABEL_27;
    }
LABEL_14:
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 40));
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = *(_QWORD *)(v8 + 8 * *(int *)(v8 + 4) + 8);
    v10 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v10)
    {
      result = v10(v9, 0);
      if ((_DWORD)result)
        goto LABEL_27;
      CMBaseObjectGetDerivedStorage();
      FigCFArrayApplyFunction();
      v11 = CMBaseObjectGetDerivedStorage();
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v11 + 8 * *(int *)(v11 + 4) + 24));
      if (playeroverlap_playQueueCount() < 1)
      {
LABEL_24:
        result = 0;
        goto LABEL_27;
      }
      v12 = CMBaseObjectGetDerivedStorage();
      v13 = *(_DWORD *)(v12 + 4);
      v14 = __OFADD__(v13++, 1);
      v15 = (v13 < 0) ^ v14;
      v16 = v13 & 1;
      if (v15)
        v16 = -v16;
      v17 = *(_QWORD *)(v12 + 8 * v16 + 8);
      v18 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v18)
      {
        result = v18(v17, 0);
        if ((_DWORD)result)
          goto LABEL_27;
        CMBaseObjectGetDerivedStorage();
        FigCFArrayApplyFunction();
        v19 = CMBaseObjectGetDerivedStorage();
        v20 = *(_DWORD *)(v19 + 4);
        v14 = __OFADD__(v20++, 1);
        v15 = (v20 < 0) ^ v14;
        v21 = v20 & 1;
        if (v15)
          v21 = -v21;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v19 + 8 * v21 + 24));
        goto LABEL_24;
      }
    }
    result = 4294954514;
  }
LABEL_27:
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t itemoverlap_resetPlayerIndex()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 48) = -1;
  return result;
}

const void *playeroverlap_CopyPlayQueueItem_fun(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  const void *result;
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(const void ***)(a1 + 16);
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0 || !v4)
  {
    result = (const void *)FigSignalErrorAt();
    v10 = (int)result;
    goto LABEL_13;
  }
  *v4 = 0;
  v6 = v3;
  if (v2)
  {
    v7 = playeroverlap_indexForItem();
    if (v7 == -1)
    {
      v10 = FigSignalErrorAt();
      goto LABEL_9;
    }
    v8 = v7 + 1;
    v6 = v3;
  }
  else
  {
    v8 = 0;
  }
  v10 = 0;
  *v4 = playeroverlap_itemAtIndex(v6, v8);
LABEL_9:
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = *v4;
  if (*v4)
    result = CFRetain(result);
LABEL_13:
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t playeroverlap_SetRate_fun(uint64_t a1)
{
  uint64_t result;

  result = playeroverlap_SetRateInPlayerQueue(*(_QWORD *)a1, *(float *)(a1 + 8));
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t playeroverlap_GetRate_fun(uint64_t a1)
{
  uint64_t result;

  result = playeroverlap_GetRateInPlayerQueue(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t playeroverlap_SetRateWithFade_fun(uint64_t a1)
{
  uint64_t v2;
  float v3;
  unsigned __int8 v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  CMTime v7;
  CMTime *p_time;
  __int128 v9;
  CMTime time;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(float *)(a1 + 8);
  *(_OWORD *)&v7.value = *(_OWORD *)(a1 + 12);
  v7.epoch = *(_QWORD *)(a1 + 28);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time = v7;
    v9 = 0uLL;
    p_time = &time;
    result = playeroverlap_SetRateCommon(v2, (__n128 **)&p_time, v3);
  }
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

uint64_t playeroverlap_StartPreroll_fun(float *a1)
{
  float v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, float);
  uint64_t result;

  v2 = a1[2];
  v3 = *((unsigned int *)a1 + 3);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v7)
      result = v7(v6, v3, v2);
    else
      result = 4294954514;
  }
  *((_DWORD *)a1 + 4) = result;
  return result;
}

uint64_t playeroverlap_StepByCount_fun(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v6)
      result = v6(v5, v2);
    else
      result = 4294954514;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t playeroverlap_SetRateAndAnchorTime_fun(uint64_t a1)
{
  uint64_t v2;
  float v3;
  int v4;
  unsigned __int8 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  CMTime v10;
  __n128 *v11;
  __int128 p_time;
  CMTime time;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 60);
  *(_OWORD *)&v10.value = *(_OWORD *)(a1 + 12);
  v10.epoch = *(_QWORD *)(a1 + 28);
  v8 = *(_OWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 52);
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time = v10;
    v14 = v8;
    v15 = v9;
    v16 = v4;
    v11 = 0;
    p_time = (unint64_t)&time;
    result = playeroverlap_SetRateCommon(v2, &v11, v3);
  }
  *(_DWORD *)(a1 + 64) = result;
  return result;
}

uint64_t itemoverlap_Invalidate(const void *a1)
{
  unsigned __int8 v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t DerivedStorage;

  v2 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v2 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = itemoverlap_invalidateDispatchSync((uint64_t)a1);
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 88), a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
  return v5;
}

void itemoverlap_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = atomic_load((unsigned __int8 *)DerivedStorage);
  if ((v4 & 1) == 0)
    itemoverlap_Invalidate(a1);
  *(_QWORD *)(DerivedStorage + 8) = 0;
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
}

__CFString *itemoverlap_CopyDebugDescription(const void *a1)
{
  CMTime *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const char *v5;
  CMTimeEpoch epoch;
  Float64 Seconds;
  CMTime time;

  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (a1)
    v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 104);
  else
    v5 = "";
  epoch = DerivedStorage->epoch;
  time = DerivedStorage[1];
  Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackItemOverlap %p %s sub-item %p advanceTime %1.3f>"), a1, v5, epoch, *(_QWORD *)&Seconds);
  return Mutable;
}

uint64_t itemoverlap_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const void *, uint64_t, uint64_t);
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD context[3];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v8 & 1) != 0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("AdvanceTimeForOverlappedPlayback")))
  {
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v14 & 1) == 0)
    {
      CMBaseObjectGetDerivedStorage();
      v15 = CMBaseObjectGetDerivedStorage();
      v16 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
      if ((v16 & 1) == 0)
      {
        context[0] = a1;
        context[1] = a3;
        context[2] = a4;
        v18 = 0;
        dispatch_sync_f(*(dispatch_queue_t *)(v15 + 48), context, (dispatch_function_t)playeroverlap_copyAdvanceTimeForOverlappedPlayback_fun);
        return v18;
      }
    }
    return FigSignalErrorAt();
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v12 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v12)
    return v12(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemoverlap_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned __int8 v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  v7 = (const void *)FigCFCopyCompactDescription();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
    CFRelease(v7);
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemoverlap_handleSetProperty, 0, 0, 0);
}

uint64_t playeroverlap_copyAdvanceTimeForOverlappedPlayback_fun(uint64_t a1)
{
  const __CFAllocator *v2;
  CFDictionaryRef *v3;
  unsigned __int8 v4;
  uint64_t DerivedStorage;
  CFDictionaryRef v6;
  uint64_t result;
  CMTime v8;

  v2 = *(const __CFAllocator **)(a1 + 8);
  v3 = *(CFDictionaryRef **)(a1 + 16);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1)
    {
      v8 = *(CMTime *)(DerivedStorage + 24);
      v6 = CMTimeCopyAsDictionary(&v8, v2);
    }
    else
    {
      v6 = 0;
    }
    result = 0;
    *v3 = v6;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t itemoverlap_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _BYTE *a5)
{
  unsigned __int8 v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, const void *, uint64_t);
  _QWORD context[3];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  if (CFEqual(a3, CFSTR("AdvanceTimeForOverlappedPlayback")))
  {
    v11 = *(_QWORD *)(DerivedStorage + 8);
    if (dword_1EE2A2E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v15 = CMBaseObjectGetDerivedStorage();
    v16 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v16 & 1) == 0)
    {
      context[0] = v11;
      context[1] = a1;
      context[2] = a4;
      v20 = 0;
      dispatch_sync_f(*(dispatch_queue_t *)(v15 + 48), context, (dispatch_function_t)playeroverlap_setAdvanceTimeForOverlappedPlayback_fun);
      return v20;
    }
    return FigSignalErrorAt();
  }
  if (dword_1EE2A2E18)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v18 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v18)
    return v18(FigBaseObject, a3, a4);
  else
    return 4294954514;
}

uint64_t playeroverlap_setAdvanceTimeForOverlappedPlayback_fun(uint64_t a1)
{
  const void *v2;
  void *v3;
  const __CFDictionary *v4;
  unsigned __int8 v5;
  uint64_t DerivedStorage;
  _BOOL4 hasAdvanceTime;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, float);
  CMTime time2;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTime time;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)a1;
  v2 = *(const void **)(a1 + 8);
  v4 = *(const __CFDictionary **)(a1 + 16);
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
    goto LABEL_23;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(const void **)(CMBaseObjectGetDerivedStorage() + 72) == v2)
  {
    LODWORD(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_23:
    result = FigSignalErrorAt();
    goto LABEL_24;
  }
  hasAdvanceTime = itemoverlap_hasAdvanceTime((_BOOL8)v2);
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (v4)
  {
    CMTimeMakeFromDictionary(&time, v4);
    value = time.value;
    flags = time.flags;
    timescale = time.timescale;
    epoch = time.epoch;
  }
  else
  {
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  if (dword_1EE2A2E18)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((flags & 0x1D) != 1 && (flags & 1) != 0)
    goto LABEL_23;
  if ((flags & 0x1D) == 1)
  {
    time.value = value;
    time.timescale = timescale;
    time.flags = flags;
    time.epoch = epoch;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time, &time2) <= 0)
      goto LABEL_23;
  }
  time = *(CMTime *)(DerivedStorage + 24);
  time2.value = value;
  time2.timescale = timescale;
  time2.flags = flags;
  time2.epoch = epoch;
  result = CMTimeCompare(&time, &time2);
  if ((_DWORD)result)
  {
    *(_QWORD *)(DerivedStorage + 24) = value;
    *(_DWORD *)(DerivedStorage + 32) = timescale;
    *(_DWORD *)(DerivedStorage + 36) = flags;
    *(_QWORD *)(DerivedStorage + 40) = epoch;
    if (*(_DWORD *)(DerivedStorage + 48) == -1)
    {
LABEL_22:
      result = 0;
      goto LABEL_24;
    }
    if (hasAdvanceTime == itemoverlap_hasAdvanceTime((_BOOL8)v2)
      || (v14 = playeroverlap_indexForItem(),
          result = playeroverlap_refreshPlayQueueFromIndex(v3, v14 + 1),
          !(_DWORD)result))
    {
      if (playeroverlap_itemAtIndex((uint64_t)v3, 0) != v2)
        goto LABEL_22;
      if (!hasAdvanceTime || !*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
      {
LABEL_32:
        result = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v3);
        goto LABEL_24;
      }
      v15 = CMBaseObjectGetDerivedStorage();
      v16 = *(_DWORD *)(v15 + 4);
      v17 = __OFADD__(v16++, 1);
      v18 = (v16 < 0) ^ v17;
      v19 = v16 & 1;
      if (v18)
        v19 = -v19;
      v20 = *(_QWORD *)(v15 + 8 * v19 + 8);
      v21 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v21)
      {
        result = 4294954514;
        goto LABEL_24;
      }
      result = v21(v20, 0.0);
      if (!(_DWORD)result)
      {
        playeroverlap_removeAdvanceTimer();
        goto LABEL_32;
      }
    }
  }
LABEL_24:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t itemoverlap_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v9)
    return v9(v8, a2, a3);
  else
    return 4294954514;
}

uint64_t itemoverlap_GetDuration(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v5)
  {
    v6 = v5(v4, a2);
    if (!(_DWORD)v6)
    {
      if (dword_1EE2A2E18)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    v9 = v6;
  }
  else
  {
    v9 = 4294954514;
  }
  v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v9;
}

uint64_t itemoverlap_SetCurrentTime(uint64_t a1, __int128 *a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v7;
  uint64_t DerivedStorage;
  unsigned __int8 v9;
  uint64_t context;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
    return FigSignalErrorAt();
  context = a1;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = a3;
  v15 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_SetCurrentTime_fun);
  return v15;
}

uint64_t itemoverlap_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v5;
  uint64_t DerivedStorage;
  unsigned __int8 v7;
  _QWORD context[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  context[1] = a2;
  v10 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)itemoverlap_GetCurrentTime_fun);
  return v10;
}

uint64_t itemoverlap_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
  if (v13)
    return v13(v12, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t itemoverlap_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v9)
    return v9(v8, a2, a3);
  else
    return 4294954514;
}

uint64_t itemoverlap_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v11)
    return v11(v10, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemoverlap_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v11)
    return v11(v10, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemoverlap_GetNextThumbnailTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v11 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 80);
  if (!v11)
    return 4294954514;
  v14 = v12;
  v15 = v13;
  return v11(v10, &v14, a3, a4);
}

uint64_t itemoverlap_SetCurrentTimeWithRange(uint64_t a1, __int128 *a2, int a3, __int128 *a4, __int128 *a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v11;
  uint64_t DerivedStorage;
  unsigned __int8 v13;
  uint64_t context;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v11 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v13 & 1) != 0)
    return FigSignalErrorAt();
  context = a1;
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = a3;
  v19 = *a4;
  v20 = *((_QWORD *)a4 + 2);
  v21 = *a5;
  v22 = *((_QWORD *)a5 + 2);
  v23 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_SetCurrentTimeWithRange_fun);
  return v23;
}

uint64_t itemoverlap_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v11)
    return v11(v10, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemoverlap_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v7)
    return v7(v6, a2);
  else
    return 4294954514;
}

uint64_t itemoverlap_SeekToDateWithID(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v7;
  uint64_t DerivedStorage;
  unsigned __int8 v9;
  _QWORD context[2];
  int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  v12 = a3;
  v13 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)itemoverlap_SeekToDateWithID_fun);
  return v13;
}

uint64_t itemoverlap_SetCurrentTimeWithRangeAndID(uint64_t a1, __int128 *a2, int a3, __int128 *a4, __int128 *a5, int a6)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v12;
  uint64_t DerivedStorage;
  unsigned __int8 v14;
  uint64_t context;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v12 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v14 & 1) != 0)
    return FigSignalErrorAt();
  v26 = 0;
  context = a1;
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  v20 = a3;
  v21 = *a4;
  v22 = *((_QWORD *)a4 + 2);
  v23 = *a5;
  v24 = *((_QWORD *)a5 + 2);
  v25 = a6;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_SetCurrentTimeWithRangeAndID_fun);
  return v26;
}

uint64_t itemoverlap_CopyAsset(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
    return FigSignalErrorAt();
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v7)
    return v7(v6, a2);
  else
    return 4294954514;
}

uint64_t itemoverlap_SetProperties(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  unsigned __int8 v6;

  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
    return FigSignalErrorAt();
  else
    return FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemoverlap_handleSetProperty, 0, 0, a3);
}

uint64_t itemoverlap_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v9)
    return v9(v8, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemoverlap_SetCurrentTimeWithOptions(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v7;
  uint64_t DerivedStorage;
  unsigned __int8 v9;
  uint64_t context;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v7 & 1) != 0)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v9 & 1) != 0)
    return FigSignalErrorAt();
  v14 = a3;
  v15 = 0;
  context = a1;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_SetCurrentTimeWithOptions_fun);
  return v15;
}

uint64_t itemoverlap_SetCurrentTime_fun(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD time[18];

  time[17] = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  v3 = *(_DWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    memset(time, 0, 40);
    LODWORD(time[0]) = v3;
    v9 = v7;
    v10 = v8;
    result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v9, time);
  }
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeCommon(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, float);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(void **)(DerivedStorage + 8);
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56) || playeroverlap_itemAtIndex((uint64_t)v7, 1) != a1)
  {
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
      goto LABEL_19;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = playeroverlap_itemAtIndex((uint64_t)v7, 0);
    v10 = *(const void **)(v8 + 72);
    if (v9 == a1)
    {
      if (v10 != a1)
      {
LABEL_18:
        playeroverlap_removeOutroItem(v7, 1);
LABEL_19:
        v25 = *(_QWORD *)(DerivedStorage + 16);
        v28 = *(_OWORD *)a2;
        v29 = *(_QWORD *)(a2 + 16);
        v20 = itemoverlap_SetCurrentTimeSpecific(v25, &v28, a3);
        if (!(_DWORD)v20)
        {
          v28 = *(_OWORD *)a2;
          v29 = *(_QWORD *)(a2 + 16);
          v26 = CMBaseObjectGetDerivedStorage();
          *(_DWORD *)(v26 + 64) = 0;
          *(_OWORD *)(v26 + 80) = v28;
          *(_QWORD *)(v26 + 96) = v29;
          return v20;
        }
        goto LABEL_17;
      }
    }
    else if (v10 != a1)
    {
      goto LABEL_19;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_18;
  }
  playeroverlap_assertHasAdvanceTimer((uint64_t)v7);
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = *(_DWORD *)(v11 + 4);
  v13 = __OFADD__(v12++, 1);
  v14 = (v12 < 0) ^ v13;
  v15 = v12 & 1;
  if (v14)
    v15 = -v15;
  v16 = *(_QWORD *)(v11 + 8 * v15 + 8);
  v17 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v17)
  {
    v20 = 4294954514;
    goto LABEL_17;
  }
  v18 = v17(v16, 0.0);
  if ((_DWORD)v18)
  {
    v20 = v18;
    goto LABEL_17;
  }
  playeroverlap_removeAdvanceTimer();
  v19 = *(_QWORD *)(DerivedStorage + 16);
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  v20 = itemoverlap_SetCurrentTimeSpecific(v19, &v28, a3);
  if ((_DWORD)v20)
  {
LABEL_17:
    FigSignalErrorAt();
    return v20;
  }
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  v21 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v21 + 64) = 0;
  *(_OWORD *)(v21 + 80) = v28;
  *(_QWORD *)(v21 + 96) = v29;
  v22 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v7);
  if ((_DWORD)v22)
  {
    v23 = v22;
    FigSignalErrorAt();
    return v23;
  }
  return v20;
}

uint64_t itemoverlap_SetCurrentTimeSpecific(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *);
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __int128 *, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v4 = (__int128 *)a3[1];
  if (v4)
  {
    v5 = *(unsigned int *)a3;
    v27 = *a2;
    v29 = *((_QWORD *)a2 + 2);
    v23 = *v4;
    v25 = *((_QWORD *)v4 + 2);
    v19 = *(__int128 *)((char *)v4 + 24);
    v21 = *((_QWORD *)v4 + 5);
    v6 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 104);
    if (v6)
    {
      v35 = v27;
      v36 = v29;
      v33 = v23;
      v34 = v25;
      v31 = v19;
      v32 = v21;
      return v6(a1, &v35, v5, &v33, &v31);
    }
    return 4294954514;
  }
  v8 = (__int128 *)a3[2];
  if (v8)
  {
    v9 = *(unsigned int *)a3;
    v10 = *((unsigned int *)v8 + 12);
    v28 = *a2;
    v30 = *((_QWORD *)a2 + 2);
    v24 = *v8;
    v26 = *((_QWORD *)v8 + 2);
    v20 = *(__int128 *)((char *)v8 + 24);
    v22 = *((_QWORD *)v8 + 5);
    v11 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 144);
    if (v11)
    {
      v35 = v28;
      v36 = v30;
      v33 = v24;
      v34 = v26;
      v31 = v20;
      v32 = v22;
      return v11(a1, &v35, v9, &v33, &v31, v10);
    }
    return 4294954514;
  }
  v12 = (uint64_t *)a3[3];
  if (v12)
  {
    v13 = *v12;
    v33 = *a2;
    v34 = *((_QWORD *)a2 + 2);
    v14 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (v14)
    {
LABEL_9:
      v35 = v33;
      v36 = v34;
      return v14(a1, &v35, v13);
    }
  }
  else
  {
    v15 = (uint64_t *)a3[4];
    if (v15)
    {
      v16 = *v15;
      v17 = *((unsigned int *)v15 + 2);
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v18)
        return v18(a1, v16, v17);
    }
    else
    {
      v13 = *(unsigned int *)a3;
      v33 = *a2;
      v34 = *((_QWORD *)a2 + 2);
      v14 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v14)
        goto LABEL_9;
    }
  }
  return 4294954514;
}

uint64_t itemoverlap_GetCurrentTime_fun(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t result;
  NSObject *v7;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
  {
    result = FigSignalErrorAt();
    v8 = result;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v5)
  {
    v8 = -12782;
LABEL_8:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_10;
  }
  result = v5(v4, v2);
  if ((_DWORD)result)
  {
    v8 = result;
    goto LABEL_8;
  }
  if (dword_1EE2A2E18)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = 0;
LABEL_10:
  *(_DWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeWithRange_fun(uint64_t a1)
{
  const void *v2;
  unsigned int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  CMTime v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  os_log_type_t type;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  CMTime time;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  v3 = *(_DWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)&v9.value = *(_OWORD *)(a1 + 36);
  v9.epoch = *(_QWORD *)(a1 + 52);
  v7 = *(_OWORD *)(a1 + 60);
  v8 = *(_QWORD *)(a1 + 76);
  if (dword_1EE2A2E18)
  {
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    time = v9;
    v19 = v7;
    v20 = v8;
    v16 = 0u;
    v15[0] = v3;
    v17 = 0;
    v15[1] = &time;
    v12 = v10;
    v13 = v11;
    result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v12, v15);
  }
  *(_DWORD *)(a1 + 84) = result;
  return result;
}

uint64_t itemoverlap_SeekToDateWithID_fun(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  _OWORD v11[2];
  uint64_t *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    v8 = v3;
    v10 = 0;
    v9 = v4;
    memset(v11, 0, sizeof(v11));
    v12 = &v8;
    result = itemoverlap_SetCurrentTimeCommon(v2, MEMORY[0x1E0CA2E68], v11);
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeWithRangeAndID_fun(uint64_t a1)
{
  const void *v2;
  int v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int8 v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  CMTime v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  os_log_type_t type;
  __int128 v16;
  CMTime *p_time;
  uint64_t v18;
  uint64_t v19;
  CMTime time;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)a1;
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 84);
  v11 = *(_OWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)&v10.value = *(_OWORD *)(a1 + 36);
  v10.epoch = *(_QWORD *)(a1 + 52);
  v8 = *(_OWORD *)(a1 + 60);
  v9 = *(_QWORD *)(a1 + 76);
  if (dword_1EE2A2E18)
  {
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    time = v10;
    v21 = v8;
    v22 = v9;
    v23 = v4;
    v16 = 0u;
    v18 = 0;
    LODWORD(v16) = v3;
    v19 = 0;
    p_time = &time;
    v13 = v11;
    v14 = v12;
    result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v13, &v16);
  }
  *(_DWORD *)(a1 + 88) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeWithOptions_fun(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(const void **)a1;
  v6 = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    v14 = v3;
    v10 = 0u;
    v11 = 0;
    v12 = &v14;
    v13 = 0;
    v8 = v6;
    v9 = v7;
    result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v8, &v10);
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

uint64_t playeroverlap_SetRateWithOptions_fun(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t result;
  __n128 *v7[3];
  uint64_t v8;

  v2 = *(_QWORD *)a1;
  v3 = *(float *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    v7[2] = (__n128 *)&v8;
    v8 = v4;
    result = playeroverlap_SetRateCommon(v2, v7, v3);
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_AddExternalStartupTask_fun(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
    if (v6)
      result = v6(v5, v2);
    else
      result = 4294954514;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t playeroverlap_RemoveExternalStartupTask_fun(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) != 0)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = *(_QWORD *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
    if (v6)
      result = v6(v5, v2);
    else
      result = 4294954514;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t playeroverlap_SetConnectionActive(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (!v6)
    return 4294954514;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
  if (!v7)
    return 4294954514;
  result = v7(v5, a2);
  if ((_DWORD)result)
    return result;
  v9 = *(_QWORD *)(DerivedStorage + 16);
  v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v10 && (v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24)) != 0)
    return v11(v9, a2);
  else
    return 4294954514;
}

uint64_t playeroverlap_DuckVolume(float a1, float a2, uint64_t a3, uint64_t a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, float, float);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, float, float);

  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (!v10)
    return 4294954514;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v10 + 8);
  if (!v11)
    return 4294954514;
  result = v11(v9, a4, a1, a2);
  if ((_DWORD)result)
    return result;
  v13 = *(_QWORD *)(DerivedStorage + 16);
  v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v14 && (v15 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v14 + 8)) != 0)
    return v15(v13, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t playeroverlap_SilentMute(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  if (dword_1EE2A2E18)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (!v6)
    return 4294954514;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  if (!v7)
    return 4294954514;
  result = v7(v5, a2);
  if ((_DWORD)result)
    return result;
  v9 = *(_QWORD *)(DerivedStorage + 16);
  v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v10 && (v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16)) != 0)
    return v11(v9, a2);
  else
    return 4294954514;
}

__CFString *activityOnThread_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigActivityScheduler_OnNewThread %p>"), a1);
  return Mutable;
}

uint64_t activityOnThread_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(CFSTR("ThreadPriority"), a2))
    return 4294954509;
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 16));
  *a4 = FigCFNumberCreateUInt32();
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 16));
  return 0;
}

uint64_t activityOnThread_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  uint64_t v7;
  CFTypeID TypeID;
  int v9;
  CFTypeID v10;
  CFTypeID v11;
  CFNumberRef v13;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(CFSTR("ClientPID"), a2))
  {
    if (CFEqual(CFSTR("ThrottleForBackground"), a2))
    {
      if (a3)
      {
        TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          if (CFBooleanGetValue(a3))
            v9 = 16;
          else
            v9 = *(_DWORD *)(DerivedStorage + 60);
          valuePtr = v9;
          v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
          if (!*(_QWORD *)(DerivedStorage + 8) || (v7 = FigThreadSetProperty(), !(_DWORD)v7))
          {
            v7 = 0;
            *(_DWORD *)(DerivedStorage + 60) = valuePtr;
          }
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
          if (v13)
            CFRelease(v13);
          return v7;
        }
      }
    }
    else if (CFEqual(CFSTR("ThreadPriority"), a2))
    {
      if (a3)
      {
        v10 = CFNumberGetTypeID();
        if (v10 == CFGetTypeID(a3))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
          if (!*(_QWORD *)(DerivedStorage + 8) || (v7 = FigThreadSetProperty(), !(_DWORD)v7))
          {
            v7 = 0;
            *(_DWORD *)(DerivedStorage + 60) = FigCFNumberGetUInt32();
          }
          goto LABEL_25;
        }
      }
    }
    else
    {
      if (!CFEqual(CFSTR("MachTimeSharePolicy"), a2))
        return 4294954509;
      if (a3)
      {
        v11 = CFBooleanGetTypeID();
        if (v11 == CFGetTypeID(a3))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
          if (*(_QWORD *)(DerivedStorage + 8))
            goto LABEL_5;
          goto LABEL_24;
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    v6 = CFNumberGetTypeID();
    if (v6 == CFGetTypeID(a3))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
      if (*(_QWORD *)(DerivedStorage + 8))
      {
LABEL_5:
        v7 = FigThreadSetProperty();
LABEL_25:
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
        return v7;
      }
LABEL_24:
      v7 = 0;
      goto LABEL_25;
    }
  }
  return 0;
}

uint64_t activityOnThread_isProcessingCallbackCalledOnConsistentThread()
{
  return 1;
}

uint64_t FigRateMinderGetClock()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
}

void FigRateMinderUpdateRateWithTimestamps(const void *a1, uint64_t a2, CMTime *a3, Float64 a4)
{
  NSObject **DerivedStorage;
  dispatch_queue_t *v9;
  NSObject *v10;
  void *v11;
  Float64 *v12;
  Float64 *v13;
  CFTypeRef v14;
  CMTime v15;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v12 = (Float64 *)malloc_type_malloc(0x20uLL, 0x1020040A5B76CDFuLL);
    if (v12)
    {
      v13 = v12;
      v15 = *(CMTime *)a2;
      *v12 = CMTimeGetSeconds(&v15);
      v15 = *a3;
      v13[1] = CMTimeGetSeconds(&v15);
      v13[2] = a4;
      if (a1)
        v14 = CFRetain(a1);
      else
        v14 = 0;
      *((_QWORD *)v13 + 3) = v14;
      dispatch_async_f(*v9, v13, (dispatch_function_t)frm_processDeltaUpdateNotification);
    }
  }
  else
  {
    v10 = *DerivedStorage;
    if (a1)
      v11 = (void *)CFRetain(a1);
    else
      v11 = 0;
    dispatch_async_f(v10, v11, (dispatch_function_t)frm_resetInternalState);
  }
}

void frm_processDeltaUpdateNotification(double *a1)
{
  uint64_t DerivedStorage;
  double v3;
  double v4;
  double v5;
  const void *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = (const void *)*((_QWORD *)a1 + 3);
  free(a1);
  v7 = *(_QWORD *)(DerivedStorage + 16);
  if (v7)
    (*(void (**)(const void *, double, double, double))(v7 + 8))(v6, v3, v4, v5);
  if (v6)
    CFRelease(v6);
}

void frm_resetInternalState(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 8);
  v4 = *(uint64_t **)(DerivedStorage + 16);
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(DerivedStorage + 28) = 0;
  *(_QWORD *)(DerivedStorage + 56) = 0x3FF0000000000000;
  if (v4)
  {
    v5 = **(_QWORD **)(CMBaseObjectGetDerivedStorage() + 16);
    if (v5)
      *(_DWORD *)(v5 + 48) = 0;
    v6 = *v4;
    if (*v4)
    {
      *(_DWORD *)(v6 + 4) = 0;
      *(_DWORD *)(v6 + 48) = 0;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
    }
  }
  if (a1)
    CFRelease(a1);
}

uint64_t FigRateMinderCreate(uint64_t a1, const __CFDictionary *a2, uint64_t a3, const void *a4, int a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeRef v14;
  const __CFString *v15;
  unsigned int **v16;
  unsigned int **v17;
  uint64_t (*v18)(double, double);
  CFTypeRef v19;
  uint64_t v20;
  const __CFString *v22;
  CFTypeRef cf;

  v22 = CFSTR("FigRateMinderPrefilterType_None");
  cf = 0;
  MEMORY[0x19402F294](&FigRateMinderGetClassID_sRegisterFigRateMinderBaseTypeOnce, RegisterFigRateMinderBaseType);
  v11 = CMDerivedObjectCreate();
  if ((_DWORD)v11)
    goto LABEL_28;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)DerivedStorage = v13;
  if (a4)
  {
    v14 = CFRetain(a4);
    v13 = *(_QWORD *)DerivedStorage;
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(DerivedStorage + 48) = v14;
  if (!v13)
  {
LABEL_27:
    v11 = FigSignalErrorAt();
LABEL_28:
    v20 = v11;
LABEL_29:
    if (cf)
      CFRelease(cf);
    return v20;
  }
  *(_QWORD *)(DerivedStorage + 8) = frm_createAndInitializeRegressionModule();
  *(_DWORD *)(DerivedStorage + 24) = 5;
  *(_QWORD *)(DerivedStorage + 32) = malloc_type_calloc(5uLL, 8uLL, 0x100004000313F17uLL);
  *(_DWORD *)(DerivedStorage + 28) = 0;
  *(_QWORD *)(DerivedStorage + 56) = 0x3FF0000000000000;
  if (a2)
  {
    CFDictionaryGetValueIfPresent(a2, CFSTR("FigRateMinderPrefilterTypes"), (const void **)&v22);
    v15 = v22;
  }
  else
  {
    v15 = CFSTR("FigRateMinderPrefilterType_None");
  }
  v16 = (unsigned int **)malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  if (!v16)
  {
LABEL_26:
    *(_QWORD *)(DerivedStorage + 16) = 0;
    goto LABEL_27;
  }
  v17 = v16;
  if (CFEqual(v15, CFSTR("FigRateMinderPrefilterType_None")))
  {
    v17[1] = (unsigned int *)frm_processDeltaUpdate;
    goto LABEL_21;
  }
  if (!CFEqual(v15, CFSTR("FigRateMinderPrefilterType_Mean")))
  {
    if (CFEqual(v15, CFSTR("FigRateMinderPrefilterType_Median")))
    {
      v18 = frm_preFilterFnMedian;
      goto LABEL_20;
    }
    if (CFEqual(v15, CFSTR("FigRateMinderPrefilterType_RemoveOutliersLocal")))
    {
      v18 = frm_preFilterFnRemoveOutliersLocal;
      goto LABEL_20;
    }
    if (CFEqual(v15, CFSTR("FigRateMinderPrefilterType_RemoveOutliersGlobal")))
    {
      v18 = frm_preFilterFnRemoveOutliersGlobal;
      goto LABEL_20;
    }
    free(v17);
    goto LABEL_26;
  }
  v18 = frm_preFilterFnMean;
LABEL_20:
  v17[1] = (unsigned int *)v18;
  *v17 = frm_createAndInitializeRegressionModule();
LABEL_21:
  *(_QWORD *)(DerivedStorage + 16) = v17;
  v19 = cf;
  *a6 = cf;
  if (!a5)
    return 0;
  v20 = FigStreamingLiveServerClockCreate(a1, (uint64_t)v19, (_QWORD *)(DerivedStorage + 40));
  if ((_DWORD)v20)
    goto LABEL_29;
  return v20;
}

unsigned int *frm_createAndInitializeRegressionModule()
{
  unsigned int *v0;

  v0 = (unsigned int *)malloc_type_calloc(1uLL, 0x58uLL, 0x108004019F10DC7uLL);
  *v0 = 100;
  *((_QWORD *)v0 + 1) = malloc_type_calloc(0x64uLL, 8uLL, 0x100004000313F17uLL);
  *((_QWORD *)v0 + 2) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  *((_QWORD *)v0 + 3) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  *((_QWORD *)v0 + 4) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  *((_QWORD *)v0 + 5) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  v0[1] = 0;
  v0[12] = 0;
  *(_OWORD *)(v0 + 14) = 0u;
  *(_OWORD *)(v0 + 18) = 0u;
  return v0;
}

uint64_t frm_invalidate(void *a1)
{
  dispatch_queue_t *DerivedStorage;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, a1, (dispatch_function_t)frm_invalidateGuts);
  return 0;
}

void frm_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  frm_invalidateGuts();
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
    CFRelease(v2);
}

void frm_invalidateGuts()
{
  _QWORD *DerivedStorage;
  void **v1;
  void ***v2;
  void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (void **)DerivedStorage[1];
  if (v1)
  {
    frm_cleanupRegressionModule(v1);
    DerivedStorage[1] = 0;
  }
  v2 = (void ***)DerivedStorage[2];
  if (v2)
  {
    if (*v2)
    {
      frm_cleanupRegressionModule(*v2);
      v2 = (void ***)DerivedStorage[2];
    }
    free(v2);
    DerivedStorage[2] = 0;
  }
  v3 = (void *)DerivedStorage[4];
  if (v3)
  {
    free(v3);
    DerivedStorage[4] = 0;
  }
}

void frm_cleanupRegressionModule(void **a1)
{
  free(a1[1]);
  free(a1[2]);
  free(a1[3]);
  free(a1[4]);
  free(a1[5]);
  free(a1);
}

uint64_t RegisterFigRateMinderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigRateMinderCopyFormattingDesc()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRateMinder %@, Calculated Drift : %f]"), *(_QWORD *)(DerivedStorage + 48), *(_QWORD *)(DerivedStorage + 56));
}

void frm_processDeltaUpdate(double a1, double a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  unsigned int v36;
  double v37;
  double v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  double *v54;
  uint64_t v55;
  double v56;
  double *v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(int *)(v5 + 48);
  v7 = *(double **)(v5 + 8);
  v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if ((_DWORD)v9 == *(_DWORD *)v5)
  {
    v10 = DerivedStorage;
    v11 = 0.0;
    if ((_DWORD)v9)
    {
      v12 = v7;
      v13 = v9;
      do
      {
        v14 = *v12++;
        v11 = v11 + v14;
        --v13;
      }
      while (v13);
      v15 = 0.0;
      v16 = v8;
      v17 = v9;
      do
      {
        v18 = *v16++;
        v15 = v15 + v18;
        --v17;
      }
      while (v17);
      v19 = *(double **)(v5 + 24);
      v20 = v7;
      v21 = v19;
      v22 = v9;
      do
      {
        v23 = *v20++;
        *v21++ = v23 * v23;
        --v22;
      }
      while (v22);
      v24 = 0.0;
      v25 = v9;
      do
      {
        v26 = *v19++;
        v24 = v24 + v26;
        --v25;
      }
      while (v25);
      v27 = *(double **)(v5 + 32);
      v28 = v27;
      v29 = v9;
      do
      {
        v30 = *v7++;
        v31 = v30;
        v32 = *v8++;
        *v28++ = v31 * v32;
        --v29;
      }
      while (v29);
      v33 = 0.0;
      v34 = v9;
      do
      {
        v35 = *v27++;
        v33 = v33 + v35;
        --v34;
      }
      while (v34);
    }
    else
    {
      v15 = 0.0;
      v24 = 0.0;
      v33 = 0.0;
    }
    v36 = *(_DWORD *)(v5 + 4);
    v37 = (double)v36;
    v38 = v11 + *(double *)(v5 + 56) * (double)v36 * (double)v9;
    v39 = v36 + 1;
    v40 = *(double *)(v5 + 72);
    v41 = v24 + *(double *)(v5 + 80) * v37 * (double)v9;
    v42 = (double)(v39 * v9);
    v43 = v38 / v42;
    v44 = (v15 + *(double *)(v5 + 64) * v37 * (double)v9) / v42;
    *(double *)(v5 + 56) = v43;
    *(double *)(v5 + 64) = v44;
    v45 = v41 / v42;
    v46 = (v33 + v40 * v37 * (double)v9) / v42;
    *(double *)(v5 + 72) = v46;
    *(double *)(v5 + 80) = v45;
    v47 = -(v45 - v43 * v43);
    if (v47 == 0.0)
    {
      v51 = *(_DWORD *)(DerivedStorage + 24);
      v53 = *(_DWORD *)(DerivedStorage + 28);
      v49 = 1.79769313e308;
      v48 = 1.79769313e308;
    }
    else
    {
      v48 = -(v46 - v43 * v44) / v47;
      v49 = v48 + -1.0;
      v50 = *(_QWORD *)(DerivedStorage + 32);
      v51 = *(_DWORD *)(DerivedStorage + 24);
      v52 = *(_DWORD *)(DerivedStorage + 28);
      v53 = v52 + 1;
      *(_DWORD *)(DerivedStorage + 28) = v52 + 1;
      *(double *)(v50 + 8 * (v52 % v51)) = v48 + -1.0;
    }
    if (v53 >= v51)
    {
      if (v51)
      {
        v54 = *(double **)(DerivedStorage + 32);
        v55 = v51;
        v56 = 0.0;
        v57 = v54;
        v58 = v51;
        do
        {
          v59 = *v57++;
          v56 = v56 + v59;
          --v58;
        }
        while (v58);
        v60 = v56 / (double)v51;
        v61 = 0.0;
        do
        {
          v62 = *v54++;
          v61 = v61 + (v62 - v60) * (v62 - v60);
          --v55;
        }
        while (v55);
        v63 = v61 / (double)v51;
      }
      else
      {
        v60 = NAN;
        v63 = NAN;
      }
      if (fabs(sqrt(v63) / v60) < 0.02 && fabs(v49) < 0.0002)
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetDouble();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(Mutable);
        *(_DWORD *)(v10 + 28) = 0;
        *(double *)(v10 + 56) = v48;
        v39 = *(_DWORD *)(v5 + 4) + 1;
      }
    }
    *(_DWORD *)(v5 + 4) = v39;
    *(_DWORD *)(v5 + 48) = 0;
  }
}

uint64_t frm_preFilterFnMean(double a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  result = CMBaseObjectGetDerivedStorage();
  v5 = **(_QWORD **)(result + 16);
  v6 = *(int *)(v5 + 48);
  v8 = *(double **)(v5 + 8);
  v7 = *(double **)(v5 + 16);
  v8[v6] = a2;
  v7[v6] = a1;
  v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if ((_DWORD)v9 == *(_DWORD *)v5)
  {
    if ((_DWORD)v9)
    {
      v10 = 0.0;
      v11 = v9;
      do
      {
        v12 = *v8++;
        v10 = v10 + v12;
        --v11;
      }
      while (v11);
      v13 = (double)v9;
      v14 = 0.0;
      do
      {
        v15 = *v7++;
        v14 = v14 + v15;
        --v9;
      }
      while (v9);
      v16 = v10 / v13;
      v17 = v14 / v13;
    }
    else
    {
      v16 = NAN;
      v17 = NAN;
    }
    frm_processDeltaUpdate(v17, v16);
    result = CMBaseObjectGetDerivedStorage();
    v18 = **(_QWORD **)(result + 16);
    if (v18)
      *(_DWORD *)(v18 + 48) = 0;
  }
  return result;
}

uint64_t frm_preFilterFnMedian(double a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  double v12;
  size_t v13;
  double v14;
  unsigned int v15;
  double v16;
  uint64_t v17;

  result = CMBaseObjectGetDerivedStorage();
  v5 = **(_QWORD **)(result + 16);
  v6 = *(int *)(v5 + 48);
  v7 = *(double **)(v5 + 8);
  v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  v9 = v6 + 1;
  *(_DWORD *)(v5 + 48) = v6 + 1;
  if ((_DWORD)v6 + 1 == *(_DWORD *)v5)
  {
    if ((_DWORD)v6 == -1)
    {
      v13 = 0;
      v10 = 0.0;
    }
    else
    {
      v10 = 0.0;
      v11 = (v6 + 1);
      do
      {
        v12 = *v7++;
        v10 = v10 + v12;
        --v11;
      }
      while (v11);
      v13 = (v6 + 1);
    }
    v14 = v10 / (double)v9;
    qsort(v8, v13, 8uLL, (int (__cdecl *)(const void *, const void *))compare);
    v15 = v9 >> 1;
    if ((v9 & 1) != 0)
      v16 = v8[v15];
    else
      v16 = v8[v15 - 1] + v8[v15];
    frm_processDeltaUpdate(v16, v14);
    result = CMBaseObjectGetDerivedStorage();
    v17 = **(_QWORD **)(result + 16);
    if (v17)
      *(_DWORD *)(v17 + 48) = 0;
  }
  return result;
}

uint64_t frm_preFilterFnRemoveOutliersLocal(double a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;
  double *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double *v28;
  double *v29;
  double *v30;
  double *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  double *v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double *v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  unint64_t v56;
  double v57;
  double v58;
  uint64_t v59;

  result = CMBaseObjectGetDerivedStorage();
  v5 = **(_QWORD **)(result + 16);
  v6 = *(int *)(v5 + 48);
  v7 = *(double **)(v5 + 8);
  v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if ((_DWORD)v9 == *(_DWORD *)v5)
  {
    if ((_DWORD)v9)
    {
      v10 = 0.0;
      v11 = v7;
      v12 = v9;
      do
      {
        v13 = *v11++;
        v10 = v10 + v13;
        --v12;
      }
      while (v12);
      v14 = (double)v9;
      v15 = 0.0;
      v16 = v8;
      v17 = v9;
      do
      {
        v18 = *v16++;
        v15 = v15 + v18;
        --v17;
      }
      while (v17);
      v19 = *(double **)(v5 + 24);
      v20 = v7;
      v21 = v19;
      v22 = v9;
      v23 = v10 / v14;
      do
      {
        v24 = *v20++;
        *v21++ = v24 * v24;
        --v22;
      }
      while (v22);
      v25 = 0.0;
      v26 = v9;
      do
      {
        v27 = *v19++;
        v25 = v25 + v27;
        --v26;
      }
      while (v26);
      v28 = *(double **)(v5 + 32);
      v29 = v7;
      v30 = v8;
      v31 = v28;
      v32 = v9;
      do
      {
        v33 = *v29++;
        v34 = v33;
        v35 = *v30++;
        *v31++ = v34 * v35;
        --v32;
      }
      while (v32);
      v36 = 0.0;
      v37 = v9;
      do
      {
        v38 = *v28++;
        v36 = v36 + v38;
        --v37;
      }
      while (v37);
      v39 = v15 / v14;
      v40 = (-v36 / v14 + v23 * (v15 / v14)) / (-v25 / v14 + v23 * v23);
      v41 = v39 - v40 * v23;
      v42 = *(double **)(v5 + 40);
      v43 = v42;
      v44 = v9;
      do
      {
        v45 = *v8++;
        v46 = v45;
        v47 = *v7++;
        *v43++ = vabdd_f64(v46, v41 + v40 * v47);
        --v44;
      }
      while (v44);
      v48 = 0.0;
      v49 = v42;
      v50 = v9;
      do
      {
        v51 = *v49++;
        v48 = v48 + v51;
        --v50;
      }
      while (v50);
      v52 = 0.0;
      v53 = v9;
      v54 = v48 / v14;
      do
      {
        v55 = *v42++;
        v52 = v52 + (v55 - v54) * (v55 - v54);
        --v53;
      }
      while (v53);
      v56 = 0;
      v57 = sqrt(v52 / v14);
      v58 = v57 + v57;
      do
      {
        if (*(double *)(*(_QWORD *)(v5 + 40) + 8 * v56) <= v58)
        {
          frm_processDeltaUpdate(*(double *)(*(_QWORD *)(v5 + 16) + 8 * v56), *(double *)(*(_QWORD *)(v5 + 8) + 8 * v56));
          LODWORD(v9) = *(_DWORD *)v5;
        }
        ++v56;
      }
      while (v56 < v9);
    }
    result = CMBaseObjectGetDerivedStorage();
    v59 = **(_QWORD **)(result + 16);
    if (v59)
      *(_DWORD *)(v59 + 48) = 0;
  }
  return result;
}

uint64_t frm_preFilterFnRemoveOutliersGlobal(double a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;
  double *v11;
  uint64_t v12;
  double v13;
  double v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double *v48;
  double *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double *v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  unint64_t v62;
  double v63;
  double v64;
  uint64_t v65;

  result = CMBaseObjectGetDerivedStorage();
  v5 = **(_QWORD **)(result + 16);
  v6 = *(int *)(v5 + 48);
  v7 = *(double **)(v5 + 8);
  v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if ((_DWORD)v9 == *(_DWORD *)v5)
  {
    v10 = 0.0;
    if ((_DWORD)v9)
    {
      v11 = v7;
      v12 = v9;
      do
      {
        v13 = *v11++;
        v10 = v10 + v13;
        --v12;
      }
      while (v12);
      v14 = 0.0;
      v15 = v8;
      v16 = v9;
      do
      {
        v17 = *v15++;
        v14 = v14 + v17;
        --v16;
      }
      while (v16);
      v18 = *(double **)(v5 + 24);
      v19 = v7;
      v20 = v18;
      v21 = v9;
      do
      {
        v22 = *v19++;
        *v20++ = v22 * v22;
        --v21;
      }
      while (v21);
      v23 = 0.0;
      v24 = v9;
      do
      {
        v25 = *v18++;
        v23 = v23 + v25;
        --v24;
      }
      while (v24);
      v26 = *(double **)(v5 + 32);
      v27 = v7;
      v28 = v8;
      v29 = v26;
      v30 = v9;
      do
      {
        v31 = *v27++;
        v32 = v31;
        v33 = *v28++;
        *v29++ = v32 * v33;
        --v30;
      }
      while (v30);
      v34 = 0.0;
      v35 = v9;
      do
      {
        v36 = *v26++;
        v34 = v34 + v36;
        --v35;
      }
      while (v35);
    }
    else
    {
      v14 = 0.0;
      v23 = 0.0;
      v34 = 0.0;
    }
    v37 = *(_DWORD *)(v5 + 4);
    v38 = (double)v9;
    v39 = v14 + *(double *)(v5 + 64) * (double)v37 * (double)v9;
    v40 = *(double *)(v5 + 72);
    v41 = v23 + *(double *)(v5 + 80) * (double)v37 * (double)v9;
    v42 = (double)(v9 + (_DWORD)v9 * v37);
    v43 = (v10 + *(double *)(v5 + 56) * (double)v37 * (double)v9) / v42;
    v44 = v39 / v42;
    *(double *)(v5 + 56) = v43;
    *(double *)(v5 + 64) = v39 / v42;
    v45 = (v34 + v40 * (double)v37 * (double)v9) / v42;
    *(double *)(v5 + 72) = v45;
    *(double *)(v5 + 80) = v41 / v42;
    if ((_DWORD)v9)
    {
      v46 = -(v45 - v43 * v44) / -(v41 / v42 - v43 * v43);
      v47 = v44 - v46 * v43;
      v48 = *(double **)(v5 + 40);
      v49 = v48;
      v50 = v9;
      do
      {
        v51 = *v8++;
        v52 = v51;
        v53 = *v7++;
        *v49++ = vabdd_f64(v52, v47 + v46 * v53);
        --v50;
      }
      while (v50);
      v54 = 0.0;
      v55 = v48;
      v56 = v9;
      do
      {
        v57 = *v55++;
        v54 = v54 + v57;
        --v56;
      }
      while (v56);
      v58 = 0.0;
      v59 = v9;
      v60 = v54 / v38;
      do
      {
        v61 = *v48++;
        v58 = v58 + (v61 - v60) * (v61 - v60);
        --v59;
      }
      while (v59);
      v62 = 0;
      v63 = sqrt(v58 / v38);
      v64 = v63 + v63;
      do
      {
        if (*(double *)(*(_QWORD *)(v5 + 40) + 8 * v62) <= v64)
        {
          frm_processDeltaUpdate(*(double *)(*(_QWORD *)(v5 + 16) + 8 * v62), *(double *)(*(_QWORD *)(v5 + 8) + 8 * v62));
          LODWORD(v9) = *(_DWORD *)v5;
        }
        ++v62;
      }
      while (v62 < v9);
    }
    result = CMBaseObjectGetDerivedStorage();
    v65 = **(_QWORD **)(result + 16);
    if (v65)
      *(_DWORD *)(v65 + 48) = 0;
  }
  return result;
}

uint64_t compare(double *a1, double *a2)
{
  return (int)(*a1 - *a2);
}

uint64_t FigActivitySchedulerGetTypeID()
{
  MEMORY[0x19402F294](&FigActivitySchedulerGetClassID_sRegisterFigActivitySchedulerTypeOnce, RegisterFigActivitySchedulerType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigActivitySchedulerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigActivityScheduler %p]"), a1);
}

MACaptionAppearanceDisplayType FigMediaAccessibilityCaptionsDisplayType()
{
  return MACaptionAppearanceGetDisplayType(kMACaptionAppearanceDomainUser);
}

CFArrayRef FigMediaAccessibilityCopyPreferredLegibleCharacteristics()
{
  return MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(kMACaptionAppearanceDomainUser);
}

CFArrayRef FigMediaAccessibilityCopyPreferredLanguages()
{
  return MACaptionAppearanceCopySelectedLanguages(kMACaptionAppearanceDomainUser);
}

const __CFString *FigGetNotifyingObjectForMediaAccessibilityChanged()
{
  if (FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce != -1)
    dispatch_once_f(&FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce, 0, (dispatch_function_t)_initFigMediaAccessibiltySupport);
  return CFSTR("FigMediaAccessibilityNotification_MediaAccessibilityChanged");
}

uint64_t _initFigMediaAccessibiltySupport()
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRegisterForBarrierSupport();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t _mediaAccessibilityDidChangeNotificationCallback()
{
  dispatch_get_global_queue(0, 0);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t _deferredMediaAccessibilityDidChangeNotificationCallback()
{
  if (FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce != -1)
    dispatch_once_f(&FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce, 0, (dispatch_function_t)_initFigMediaAccessibiltySupport);
  return CMNotificationCenterPostNotification();
}

uint64_t FigPictureCollectionWriterGetClassID()
{
  MEMORY[0x19402F294](&FigPictureCollectionWriterGetClassID_sRegisterFigPictureCollectionWriterBaseTypeOnce, RegisterFigPictureCollectionWriterBaseType);
  return sFigPictureCollectionWriterClassID;
}

uint64_t RegisterFigPictureCollectionWriterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPictureCollectionWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigPictureCollectionWriterGetClassID_sRegisterFigPictureCollectionWriterBaseTypeOnce, RegisterFigPictureCollectionWriterBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureCollectionWriterCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPictureCollectionWriter %p]"), a1);
}

uint64_t FigCaptionRendererTestingSimple()
{
  uint64_t v0;
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  v0 = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)&cf);
  if ((_DWORD)v0
    || (v0 = (uint64_t)FigCaptionRendererSessionSetMasterClock(cf, 0), (_DWORD)v0)
    || (v0 = FigCaptionRendererSessionSetRate((uint64_t)cf, 2.5), (_DWORD)v0))
  {
    v1 = v0;
  }
  else if (FigCaptionRendererSessionGetRate((uint64_t)cf) == 2.5)
  {
    v1 = 0;
  }
  else
  {
    v1 = 4294954516;
  }
  if (cf)
    CFRelease(cf);
  return v1;
}

NSObject *FigCaptionRendererTestingSetupLegible(NSObject **a1, double a2, double a3, double a4, double a5)
{
  NSObject *result;

  result = fcrTestingSetup(a1, a2, a3, a4, a5);
  if (!(_DWORD)result)
    return FigCaptionRendererSessionSetLegibleOutputDevice(*a1, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
  return result;
}

uint64_t fcrTestingSetup(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  NSObject *v14;

  v14 = 0;
  result = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)&v14);
  if (!(_DWORD)result)
  {
    if (FigCaptionRendererSessionGetIsMACacheReady((uint64_t)v14))
      goto LABEL_10;
    v11 = 0;
    do
    {
      v12 = v11;
      usleep(0x186A0u);
      ++v11;
      if (FigCaptionRendererSessionGetIsMACacheReady((uint64_t)v14))
        v13 = 1;
      else
        v13 = v12 >= 0x1D;
    }
    while (!v13);
    if (v12 < 0x1D)
    {
LABEL_10:
      result = (uint64_t)FigCaptionRendererSessionClear(v14, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
      if (!(_DWORD)result)
      {
        result = FigCaptionRendererSessionSetLayoutContext_Viewport((uint64_t)v14, a2, a3, a4, a5);
        if (!(_DWORD)result)
        {
          result = (uint64_t)FigCaptionRendererSessionSetLayoutContext_VideoSize(v14, a4, a5);
          if (!(_DWORD)result)
          {
            result = (uint64_t)FigCaptionRendererSessionSetLayoutContext_Gravity(v14, 0);
            if (!(_DWORD)result)
            {
              result = (uint64_t)FigCaptionRendererSessionSetLayoutContext_Overscan(v14, 0);
              if (!(_DWORD)result)
                *a1 = v14;
            }
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

NSObject *FigCaptionRendererTestingSetupCGContext(NSObject **a1, double a2, double a3, double a4, double a5)
{
  NSObject *result;

  result = fcrTestingSetup(a1, a2, a3, a4, a5);
  if (!(_DWORD)result)
    return FigCaptionRendererSessionSetCGContextDevice(*a1, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
  return result;
}

NSObject *FigCaptionRendererTestingSetupCALayer(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  NSObject *result;

  result = fcrTestingSetup(a2, a3, a4, a5, a6);
  if (!(_DWORD)result)
  {
    result = FigCaptionRendererSessionSetCALayerDevice(*a2, a1);
    if (!(_DWORD)result)
    {
      result = FigCaptionRendererSessionSetMasterClock(*a2, 0);
      if (!(_DWORD)result)
        return FigCaptionRendererSessionStart(*a2);
    }
  }
  return result;
}

uint64_t FigCaptionRendererTestingGetSampleWithLayout(NSObject *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t updated;
  uint64_t SubtitleSample;
  uint64_t v9;
  CFTypeRef cf;

  v9 = 0;
  cf = 0;
  updated = FigCaptionRendererLayoutContextCreate(&cf);
  if ((_DWORD)updated
    || (updated = (uint64_t)FigCaptionRendererSessionSetCaptionSample(a1, a2, (uint64_t)cf), (_DWORD)updated)
    || (updated = FigCaptionRendererSessionUpdateLegibleOutputContext(a1, (uint64_t)cf), (_DWORD)updated))
  {
    SubtitleSample = updated;
  }
  else
  {
    SubtitleSample = FigCaptionRendererLayoutContextGetSubtitleSample((uint64_t)cf, &v9);
    if (!(_DWORD)SubtitleSample)
      *a3 = v9;
  }
  if (cf)
    CFRelease(cf);
  return SubtitleSample;
}

NSObject *FigCaptionRendererTestingUpdateCGContext(NSObject *a1, uint64_t a2, uint64_t a3)
{
  NSObject *result;

  result = FigCaptionRendererSessionSetCaptionSample(a1, a2, 0);
  if (!(_DWORD)result)
    return FigCaptionRendererSessionUpdateCGContext((uint64_t)a1, a3);
  return result;
}

uint64_t FigCaptionRendererTestingSetPlayer(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = FigPlayerFileCreate(*MEMORY[0x1E0C9AE00], a2);
  if (!(_DWORD)result)
    return FigCaptionRendererSessionSetPlayer(a1, *a2);
  return result;
}

double FigCaptionRendererTestingGetDefaultFontSize(double a1, double a2, double a3, double a4)
{
  double v4;

  FCRGetOverscanSafeRect(a1, a2, a3, a4);
  return v4 * 0.15 / 3.0;
}

uint64_t setupFCR(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD block[5];

  v2 = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)(a1 + 200));
  if ((_DWORD)v2)
  {
    v3 = v2;
    goto LABEL_6;
  }
  v3 = FigCaptionRendererSessionSetHiddenCallback(*(_QWORD *)(a1 + 200), (uint64_t)setHiddenFCR);
  if ((_DWORD)v3)
  {
LABEL_6:
    FigSignalErrorAt();
    return v3;
  }
  objc_msgSend(*(id *)(a1 + 8), "setHidden:", 1);
  v4 = *(id *)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __setupFCR_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  return v3;
}

uint64_t setupCoreTextRenderer(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  uint64_t v8;

  v2 = *MEMORY[0x1E0C9D648];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 288) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(a1 + 304) = v3;
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 256) = v2;
  *(_OWORD *)(a1 + 272) = v3;
  *(_QWORD *)(a1 + 216) = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(a1 + 232) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 240) = v6;
  if (!v6)
    return FigSignalErrorAt();
  v7 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 248) = v7;
  if (!v7)
    return FigSignalErrorAt();
  v8 = FigCoreTextSubtitleRendererCreate((uint64_t)v4, (const void **)(a1 + 208));
  if ((_DWORD)v8)
    FigSignalErrorAt();
  return v8;
}

uint64_t subtitleRenderingNeedsLayoutNotification_0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handleNeedsLayoutNotification");
}

void releaseFCR(uint64_t a1)
{
  const void *v2;

  FigCaptionRendererSessionStop(*(_QWORD *)(a1 + 200));
  v2 = *(const void **)(a1 + 200);
  if (v2)
    CFRelease(v2);
}

void releaseCoreTextRenderer(uint64_t a1)
{
  const void *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  void *ValueAtIndex;
  const void *v8;
  const __CFArray *v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex j;
  void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  if (!*(_BYTE *)(a1 + 170))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  if (*(_QWORD *)(a1 + 208))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(const void **)(a1 + 208);
    if (v2)
      CFRelease(v2);
  }
  v3 = *(const __CFArray **)(a1 + 240);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), i);
        objc_msgSend(ValueAtIndex, "removeFromSuperlayer");

      }
    }
    v8 = *(const void **)(a1 + 240);
    if (v8)
      CFRelease(v8);
  }
  v9 = *(const __CFArray **)(a1 + 248);
  if (v9)
  {
    v10 = CFArrayGetCount(v9);
    if (v10 >= 1)
    {
      v11 = v10;
      for (j = 0; j != v11; ++j)
      {
        v13 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 248), j);
        objc_msgSend(v13, "removeFromSuperlayer");

      }
    }
    v14 = *(const void **)(a1 + 248);
    if (v14)
      CFRelease(v14);
  }
  v15 = *(const void **)(a1 + 232);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 216);
  if (v16)
    CFRelease(v16);
}

void sub_192C029F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void getLayoutForAnimation(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  NSObject *v7;
  _QWORD v8[10];

  v7 = *(NSObject **)(a1 + 176);
  if (v7)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __getLayoutForAnimation_block_invoke;
    v8[3] = &__block_descriptor_80_e5_v8__0l;
    v8[4] = a1;
    *(double *)&v8[5] = a3;
    *(double *)&v8[6] = a4;
    *(double *)&v8[7] = a5;
    *(double *)&v8[8] = a6;
    v8[9] = a2;
    dispatch_sync(v7, v8);
  }
}

void sub_192C03050(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void updateSubtitleDisplay(uint64_t a1, char a2)
{
  id v4;
  _QWORD v5[5];
  char v6;

  v4 = *(id *)(a1 + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __updateSubtitleDisplay_block_invoke;
  v5[3] = &__block_descriptor_41_e5_v8__0l;
  v5[4] = a1;
  v6 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v5);
}

unsigned __int8 *updateNonForcedSubtitleDisplayEnabledDo(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned __int8 *)(*(_QWORD *)result + 168);
  v3 = result[8];
  if (v2 != v3)
  {
    *(_BYTE *)(v1 + 168) = v3;
    v2 = v3;
  }
  if (*(_DWORD *)(v1 + 184) == 1)
    *(_BYTE *)(v1 + 171) = (*(unsigned __int8 *)(v1 + 224) | v2) == 0;
  return result;
}

void setHiddenFCR(char a1, uint64_t a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __setHiddenFCR_block_invoke;
  v2[3] = &unk_1E2F8B030;
  v2[4] = a2;
  v3 = a1;
  dispatch_async(MEMORY[0x1E0C80D38], v2);
}

void __setupFCR_block_invoke(uint64_t a1)
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  FigCaptionRendererSessionSetCALayerDevice(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");

}

uint64_t __setHiddenFCR_block_invoke(uint64_t a1)
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  objc_msgSend(*(id *)(a1 + 32), "setHidden:", *(unsigned __int8 *)(a1 + 40));
  return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
}

void subtitleChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5)
    digestSubtitleSample(0, a2, a5);
}

void digestSubtitleSample(int a1, uint64_t a2, CFTypeRef cf)
{
  NSObject *v6;
  uint64_t v7[2];

  if (cf)
    CFRetain(cf);
  v7[0] = a2;
  v7[1] = (uint64_t)cf;
  if (a1)
  {
    digestSubtitleSampleDo_0(v7);
  }
  else
  {
    v6 = *(NSObject **)(a2 + 176);
    if (v6)
      dispatch_sync_f(v6, v7, (dispatch_function_t)digestSubtitleSampleDo_0);
  }
  updateSubtitleDisplay(a2, 1);
}

void digestSubtitleSampleDo_0(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  CGFloat v3;
  CGFloat v4;
  const __CFDictionary *v5;
  int ValueIfPresent;
  uint64_t v7;
  BOOL v8;
  char v9;
  const __CFDictionary *v10;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex i;
  void *ValueAtIndex;
  const void *v17;
  const void *v18;
  size_t v19;
  int64_t v20;
  const void **v21;
  const void **v22;
  const void **v23;
  FigSubtitleWebVTTRegionCALayer *v24;
  FigSubtitleWebVTTRegionCALayer *v25;
  uint64_t v26;
  CFIndex v27;
  unint64_t v28;
  void *v29;
  _QWORD block[5];
  char v31;
  CFTypeRef cf;
  __int16 v33;
  CFDictionaryRef theDict;
  void *value;
  uint64_t v36;
  CFDictionaryRef v37;
  uint64_t v38;

  v2 = *a1;
  v1 = (const void *)a1[1];
  theDict = 0;
  v33 = 0;
  v3 = *(double *)(v2 + 48);
  v4 = *(double *)(v2 + 56) * 0.15;
  cf = 0;
  if (!FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v1, &theDict, (_BYTE *)&v33 + 1, 0.0, 0.0, v3, v4))
  {
    v5 = theDict;
    if (theDict)
    {
      value = 0;
      ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, CFSTR("SubtitleOverHDRVideo"), (const void **)&value);
      v7 = *(_QWORD *)(v2 + 8);
      if (ValueIfPresent)
        v8 = value == (void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = 0;
      v9 = v8;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __digestSubtitleSampleDo_block_invoke;
      block[3] = &unk_1E2F8B030;
      block[4] = v7;
      v31 = v9;
      dispatch_async(MEMORY[0x1E0C80D38], block);
      v5 = theDict;
    }
    FigSubtitleRendererDetachRegionInfo(v5, (CFDictionaryRef *)&cf, (BOOL *)&v33);
    if (cf)
    {
      FigSubtitleRendererPatchRegionInfo(*(const __CFDictionary **)(v2 + 232), (CFDictionaryRef)cf);
      v10 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 232), (const void *)*MEMORY[0x1E0CA2C38]);
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v10);
      if (MutableCopy)
      {
        v12 = MutableCopy;
        Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
        if (Count >= 1)
        {
          v14 = Count;
          for (i = 0; i < v14; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 240), i);
            v17 = (const void *)objc_msgSend(ValueAtIndex, "getContentID");
            v18 = CFDictionaryGetValue(v12, v17);
            if (v18)
            {
              objc_msgSend(ValueAtIndex, "setContent:", v18);
              CFDictionaryRemoveValue(v12, v17);
            }
            else
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 240), i);
              CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 248), ValueAtIndex);
              objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
              if (!pthread_main_np())
                objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
              objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
              objc_msgSend(ValueAtIndex, "setHidden:", 1);
              objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
              --v14;
              --i;
            }
          }
        }
        v19 = CFDictionaryGetCount(v12);
        if (v19)
        {
          v20 = v19;
          v21 = (const void **)malloc_type_calloc(v19, 8uLL, 0xC0040B8AA526DuLL);
          v22 = (const void **)malloc_type_calloc(v20, 8uLL, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(v10, v21, v22);
          if (v20 < 1)
          {
LABEL_25:
            free(v21);
            free(v22);
          }
          else
          {
            v23 = v22;
            while (1)
            {
              v24 = objc_alloc_init(FigSubtitleWebVTTRegionCALayer);
              if (!v24)
                break;
              v25 = v24;
              objc_msgSend(*(id *)(v2 + 8), "addSublayer:", v24);
              CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 240), v25);
              -[FigSubtitleWebVTTRegionCALayer setRenderer:](v25, "setRenderer:", *(_QWORD *)(v2 + 208));
              -[FigSubtitleWebVTTRegionCALayer setViewport:](v25, "setViewport:", FCRGetVideoPresentationBounds(*(double *)(v2 + 48), *(double *)(v2 + 56), *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40)));
              v26 = (uint64_t)*v23++;
              -[FigSubtitleWebVTTRegionCALayer setContent:](v25, "setContent:", v26);
              if (!--v20)
                goto LABEL_25;
            }
          }
        }
        CFRelease(v12);
      }
    }
    else
    {
      v27 = CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
      if (v27 >= 1)
      {
        v28 = v27 + 1;
        do
        {
          v29 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 240), 0);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 240), 0);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 248), v29);
          objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
          if (!pthread_main_np())
            objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
          objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
          objc_msgSend(v29, "setHidden:", 1);
          objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
          --v28;
        }
        while (v28 > 1);
      }
    }
    if (cf)
      CFRelease(cf);
    if ((_BYTE)v33)
    {
      value = (void *)v2;
      v36 = 1;
      BYTE1(v36) = HIBYTE(v33);
      v37 = theDict;
      v38 = 0;
    }
    else
    {
      v37 = 0;
      v38 = 0;
      value = (void *)v2;
      v36 = 1;
      BYTE1(v36) = HIBYTE(v33);
    }
    updateSubtitleDo((uint64_t *)&value);
    if (theDict)
      CFRelease(theDict);
  }
  if (v1)
    CFRelease(v1);
}

uint64_t __digestSubtitleSampleDo_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateHDRContentState:", *(unsigned __int8 *)(a1 + 40));
}

void updateSubtitleDo(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  __int128 v5;
  BOOL v6;

  v2 = *a1;
  *(_BYTE *)(v2 + 224) = *((_BYTE *)a1 + 9);
  v3 = *(const void **)(v2 + 216);
  v4 = (const void *)a1[2];
  *(_QWORD *)(v2 + 216) = v4;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  if (*((_BYTE *)a1 + 8))
  {
    v5 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_OWORD *)(v2 + 256) = *MEMORY[0x1E0C9D648];
    *(_OWORD *)(v2 + 272) = v5;
  }
  v6 = !*(_BYTE *)(v2 + 224) && !*(_BYTE *)(v2 + 168);
  *(_BYTE *)(v2 + 171) = v6;
}

double __getLayoutForAnimation_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13[5];
  int v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(v2 + 32);
  v11 = *(_OWORD *)(v2 + 16);
  v12 = v3;
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 32) = v4;
  v10 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 72);
  v14 = 0;
  v13[0] = v5;
  v13[1] = 0;
  v13[2] = v6;
  v13[3] = (unint64_t)&v10;
  v13[4] = (unint64_t)&v14;
  getSuggestedLayoutDo(v13);
  v7 = *(_QWORD *)(a1 + 32);
  result = *(double *)&v11;
  v9 = v12;
  *(_OWORD *)(v7 + 16) = v11;
  *(_OWORD *)(v7 + 32) = v9;
  return result;
}

void getSuggestedLayout(int a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, unint64_t a5)
{
  NSObject *v5;
  unint64_t v6[5];
  int v7;

  v7 = 0;
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  v6[4] = (unint64_t)&v7;
  if (a1)
  {
    getSuggestedLayoutDo(v6);
  }
  else
  {
    v5 = *(NSObject **)(a2 + 176);
    if (v5)
      dispatch_sync_f(v5, v6, (dispatch_function_t)getSuggestedLayoutDo);
  }
}

void getSuggestedLayoutDo(unint64_t *a1)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  char v5;
  double v6;
  void *v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  double v13;
  double v14;
  __int128 v15;
  char v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int16 v26;
  char v27;
  double v28;
  int v29;
  CFTypeRef cf;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = *a1;
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v37 = *MEMORY[0x1E0C9D648];
  v38 = v3;
  v4 = *(_OWORD *)(v2 + 32);
  v31 = *(_OWORD *)(v2 + 16);
  v32 = v4;
  v33 = *(_OWORD *)(v2 + 48);
  FCRGetTransform((uint64_t)&v19, *(double *)(v2 + 48), *(double *)(v2 + 56), *(double *)(v2 + 32), *(double *)(v2 + 40));
  v34 = v19;
  v35 = v20;
  v36 = v21;
  v5 = *(_BYTE *)(v2 + 64);
  v6 = 1.0;
  if (*(_BYTE *)(v2 + 169))
  {
    v7 = (void *)objc_msgSend(*(id *)(v2 + 8), "getLayerDisplay");
    if (objc_msgSend(v7, "isOverscanned"))
    {
      objc_msgSend(v7, "overscanAmount");
      v6 = v8;
    }
  }
  v9 = objc_msgSend(*(id *)(v2 + 8), "contentsAreFlipped");
  cf = 0;
  v11 = *(_QWORD *)(v2 + 208);
  v10 = *(_QWORD *)(v2 + 216);
  v21 = v33;
  v22 = v34;
  v23 = v35;
  v24 = v36;
  v19 = v31;
  v20 = v32;
  v25 = v5;
  v26 = 0;
  v27 = 0;
  v28 = v6;
  v29 = v9;
  *(_DWORD *)a1[4] = FigSubtitleRendererLayout(v11, v10, &v19, (uint64_t)&v37, (uint64_t)&cf);
  if (*((_BYTE *)a1 + 8))
  {
    v12 = v38;
    *(_OWORD *)(v2 + 288) = v37;
    *(_OWORD *)(v2 + 304) = v12;
  }
  v13 = *(double *)(v2 + 280);
  if (v13 <= 0.0
    || (v14 = *(double *)(v2 + 272), v14 <= 0.0)
    || fabs((*(double *)(v2 + 304) - v14) / v14) >= 0.02
    || fabs((*(double *)(v2 + 312) - v13) / v13) >= 0.02)
  {
    *(_BYTE *)a1[3] = 1;
    if (*((_BYTE *)a1 + 8))
    {
      v15 = v38;
      *(_OWORD *)(v2 + 256) = v37;
      *(_OWORD *)(v2 + 272) = v15;
      v16 = *(_BYTE *)(v2 + 224);
      v19 = v2;
      BYTE9(v19) = v16;
      v20 = (unint64_t)cf;
      updateSubtitleDo((uint64_t *)&v19);
    }
  }
  else
  {
    *(_BYTE *)a1[3] = 0;
  }
  v17 = (_OWORD *)a1[2];
  v18 = v38;
  *v17 = v37;
  v17[1] = v18;
  if (cf)
    CFRelease(cf);
}

void __updateSubtitleDisplay_block_invoke(uint64_t a1)
{
  unint64_t v2;
  int v3;
  __int128 v4;
  int v5;
  NSObject *v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  unsigned __int8 v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v13 = 0;
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v12[0] = *MEMORY[0x1E0C9D648];
  v12[1] = v4;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v5 = 1;
  v11 = 1;
  v6 = *(NSObject **)(v2 + 176);
  if (v6)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __updateSubtitleDisplayDoAsync_block_invoke;
    v7[3] = &unk_1E2F87F08;
    v7[4] = &v8;
    v7[5] = v2;
    dispatch_sync(v6, v7);
    v5 = *((unsigned __int8 *)v9 + 24);
  }
  if (v5 != objc_msgSend(*(id *)(v2 + 8), "isHidden"))
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(*(id *)(v2 + 8), "setHidden:", *((_BYTE *)v9 + 24) != 0);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  if ((objc_msgSend(*(id *)(v2 + 8), "isHidden") & 1) == 0)
  {
    getSuggestedLayout(0, v2, 1u, (unint64_t)v12, (unint64_t)&v13);
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*(id *)(v2 + 8), "setNeedsLayout");
    if (v13 | v3)
      objc_msgSend(*(id *)(v2 + 8), "setNeedsDisplay");
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  _Block_object_dispose(&v8, 8);

}

void sub_192C047B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __updateSubtitleDisplayDoAsync_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 171);
  return result;
}

uint64_t FigMetadataWriterGetClassID()
{
  MEMORY[0x19402F294](&FigMetadataWriterGetClassID_sRegisterFigMetadataWriterBaseTypeOnce, RegisterFigMetadataWriterBaseType);
  return sFigMetadataWriterClassID;
}

uint64_t RegisterFigMetadataWriterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigMetadataWriterGetCFTypeID()
{
  MEMORY[0x19402F294](&FigMetadataWriterGetClassID_sRegisterFigMetadataWriterBaseTypeOnce, RegisterFigMetadataWriterBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigMetadataWriterRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void FigMetadataWriterRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFStringRef FigMetadataWriterBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMetadataWriter %p]"), a1);
}

uint64_t FigCreateCGImageFromPixelBufferWithDynamicRangeConversion(CVPixelBufferRef pixelBuffer, int a2, int a3, CGImageRef *imageOut)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v9;
  uint64_t v10;

  if (!a2 || !a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v9 = Mutable;
      if (a2)
      {
        if (a3)
        {
LABEL_6:
          v10 = VTCreateCGImageFromCVPixelBuffer(pixelBuffer, v9, imageOut);
          CFRelease(v9);
          return v10;
        }
      }
      else
      {
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CECE90], (const void *)*MEMORY[0x1E0C9AE40]);
        if (a3)
          goto LABEL_6;
      }
      CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E0CECEA0], (const void *)*MEMORY[0x1E0C9AE40]);
      goto LABEL_6;
    }
  }
  return VTCreateCGImageFromCVPixelBuffer(pixelBuffer, 0, imageOut);
}

uint64_t FigShareAndAirPlayHelperLocalGetShared()
{
  if (FigShareAndAirPlayHelperLocalGetShared_onceToken != -1)
    dispatch_once(&FigShareAndAirPlayHelperLocalGetShared_onceToken, &__block_literal_global_27);
  return FigShareAndAirPlayHelperLocalGetShared_sSharedHelper;
}

void sub_192C04BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t localHelper_SetEnableEchoMitigation(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  _QWORD block[6];
  char v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v6 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __localHelper_SetEnableEchoMitigation_block_invoke;
  block[3] = &__block_descriptor_49_e5_v8__0l;
  v9 = a2;
  block[4] = DerivedStorage;
  block[5] = a3;
  dispatch_async(v6, block);
  return 0;
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class __getTUCallCenterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E2F91F78;
    v5 = 0;
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
    __getTUCallCenterClass_block_invoke_cold_1(&v3);
  result = objc_getClass("TUCallCenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getTUCallCenterClass_block_invoke_cold_2();
  getTUCallCenterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigMetadataSerializerGetCFTypeID()
{
  MEMORY[0x19402F294](&FigMetadataSerializerGetClassID_sRegisterFigMetadataSerializerBaseTypeOnce, RegisterFigMetadataSerializerBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigMetadataSerializerRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

CFStringRef FigMetadataSerializerBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMetadataSerializer %p]"), a1);
}

uint64_t FigMetadataSerializerCreateUserDataCommon(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v5;

  if (!a3)
    return FigSignalErrorAt();
  FigMetadataSerializerGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigMetadataSerializerCreateForISOUserData(uint64_t a1, _QWORD *a2)
{
  return FigMetadataSerializerCreateUserDataCommon(a1, 0, a2);
}

uint64_t FigISOUserDataCreateItemDataFromText(const __CFAllocator *a1, uint64_t a2, int a3, const __CFLocale *a4, __CFData **a5)
{
  uint64_t BytesFromCFString;
  UInt8 *v9;
  __CFData *Mutable;
  UInt8 v12[2];
  UInt8 bytes[4];
  __int16 v14;
  CFIndex length;

  length = 0;
  *(_DWORD *)bytes = 0;
  if (!a2 || !a5 || a3 != 134217984 && a3 != 268435712)
    return FigSignalErrorAt();
  v14 = __rev16(FigMetadataGetPackedISO639_2TFromLocale(a4));
  BytesFromCFString = FigCreateBytesFromCFString();
  if (!BytesFromCFString)
    return FigSignalErrorAt();
  v9 = (UInt8 *)BytesFromCFString;
  Mutable = CFDataCreateMutable(a1, 0);
  CFDataAppendBytes(Mutable, bytes, 6);
  if (a3 == 268435712)
  {
    *(_WORD *)v12 = -2;
    CFDataAppendBytes(Mutable, v12, 2);
  }
  CFDataAppendBytes(Mutable, v9, length);
  *a5 = Mutable;
  CFAllocatorDeallocate(a1, v9);
  return 0;
}

__CFString *FigUserDataSerializerCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v2 = DerivedStorage;
    CFStringAppendFormat(Mutable, 0, CFSTR(" FigUserDataSerializer %p\n"), DerivedStorage);
    CFStringAppendFormat(Mutable, 0, CFSTR("  - free atom size: %d\n"), *(unsigned int *)(v2 + 8));
    CFStringAppendFormat(Mutable, 0, CFSTR("  - minimum container size: %d\n"), *(unsigned int *)(v2 + 12));
    CFStringAppendFormat(Mutable, 0, CFSTR("%@"), *(_QWORD *)v2);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigUserDataSerializerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFAllocator *v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("freeAtomSize")))
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = (const void *)(v7 + 8);
LABEL_6:
    v10 = CFNumberCreate(v8, kCFNumberSInt32Type, v9);
LABEL_7:
    v11 = v10;
    result = 0;
    *a4 = v11;
    return result;
  }
  if (CFEqual(a2, CFSTR("minimumSize")))
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = (const void *)(v7 + 12);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    v10 = (void *)CFRetain(CFSTR("com.apple.quicktime.udta"));
    goto LABEL_7;
  }
  return 4294954512;
}

uint64_t FigUserDataSerializerAddItem(const void *a1, const void *a2, __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t ActualKey;
  CFTypeID v13;
  CFTypeID TypeID;
  CFTypeID v15;
  int IsISOText;
  const __CFDictionary *Mutable;
  const __CFAllocator *v18;
  CFTypeID v19;
  const __CFDictionary *v20;
  const __CFAllocator *v21;
  __CFArray *v22;
  __CFArray *v23;
  CFTypeRef v24;
  uint64_t NewItem;
  CFTypeRef v26;
  CFIndex v28;
  const __CFDictionary *ValueAtIndex;
  void *key;
  CFTypeRef cf;
  void *value;
  unsigned int v33;

  v33 = 0;
  cf = 0;
  value = 0;
  key = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3 || !a4)
    goto LABEL_38;
  v11 = DerivedStorage;
  ActualKey = FigUserDataCreateActualKey(a1, a2, a3, (unint64_t)&v33, (unint64_t)&key);
  if ((_DWORD)ActualKey)
  {
LABEL_39:
    NewItem = ActualKey;
    goto LABEL_40;
  }
  if (!*(_BYTE *)(v11 + 16))
  {
    if ((int)v33 > 1970430323)
    {
      if (v33 == 2037543523 || v33 == 1970430324)
      {
        v13 = CFGetTypeID(a4);
        TypeID = CFNumberGetTypeID();
        goto LABEL_25;
      }
    }
    else
    {
      if (v33 == 1684108389)
        goto LABEL_18;
      if (v33 == 1952540515)
      {
LABEL_16:
        v13 = CFGetTypeID(a4);
        goto LABEL_17;
      }
    }
    IsISOText = FigISOUserDataWeKnowIsISOText(v33);
    v13 = CFGetTypeID(a4);
    if (!IsISOText)
      goto LABEL_24;
LABEL_17:
    TypeID = CFStringGetTypeID();
    goto LABEL_25;
  }
  if (v33 == 1952540515 || v33 == 1851878757)
    goto LABEL_16;
  if (v33 != -1453039239)
  {
    if (HIBYTE(v33) != 169 && !FigUserDataWeKnowIsISOText(v33))
    {
      v13 = CFGetTypeID(a4);
LABEL_24:
      TypeID = CFDataGetTypeID();
      goto LABEL_25;
    }
    goto LABEL_16;
  }
LABEL_18:
  v15 = CFGetTypeID(a4);
  if (v15 == CFStringGetTypeID())
    goto LABEL_26;
  v13 = CFGetTypeID(a4);
  TypeID = CFDateGetTypeID();
LABEL_25:
  if (v13 != TypeID)
  {
LABEL_38:
    ActualKey = FigSignalErrorAt();
    goto LABEL_39;
  }
LABEL_26:
  Mutable = *(const __CFDictionary **)v11;
  if (!*(_QWORD *)v11)
  {
    v18 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)v11 = Mutable;
    if (!Mutable)
      goto LABEL_38;
  }
  if (!CFDictionaryGetValueIfPresent(Mutable, key, (const void **)&value))
  {
    NewItem = FigUserDataCreateNewItem(a1, a4, a5, (__CFDictionary **)&cf);
    if (!(_DWORD)NewItem)
    {
      v26 = cf;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v11, key, cf);
      if (!v26)
        goto LABEL_42;
LABEL_41:
      CFRelease(v26);
      goto LABEL_42;
    }
LABEL_40:
    v26 = cf;
    if (!cf)
      goto LABEL_42;
    goto LABEL_41;
  }
  v19 = CFGetTypeID(value);
  if (v19 == CFDictionaryGetTypeID())
  {
    v20 = (const __CFDictionary *)value;
    if (FigCFEqual() && FigQTUserDataPropertiesIndicateSameLanguageCode(v20, a5))
    {
LABEL_37:
      NewItem = 0;
      goto LABEL_40;
    }
    ActualKey = FigUserDataCreateNewItem(a1, a4, a5, (__CFDictionary **)&cf);
    if ((_DWORD)ActualKey)
      goto LABEL_39;
    v21 = CFGetAllocator(a1);
    v22 = CFArrayCreateMutable(v21, 0, MEMORY[0x1E0C9B378]);
    if (v22)
    {
      v23 = v22;
      CFArrayAppendValue(v22, v20);
      v24 = cf;
      CFArrayAppendValue(v23, cf);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v11, key, v23);
      if (v24)
      {
        CFRelease(v24);
        cf = 0;
      }
      CFRelease(v23);
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (FigCFEqual() && CFArrayGetCount((CFArrayRef)value) >= 1)
  {
    v28 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, v28);
      if (FigQTUserDataPropertiesIndicateSameLanguageCode(ValueAtIndex, a5))
        goto LABEL_37;
    }
    while (++v28 < CFArrayGetCount((CFArrayRef)value));
  }
  NewItem = FigUserDataCreateNewItem(a1, a4, a5, (__CFDictionary **)&cf);
  if ((_DWORD)NewItem)
    goto LABEL_40;
  v26 = cf;
  CFArrayAppendValue((CFMutableArrayRef)value, cf);
  if (v26)
    goto LABEL_41;
LABEL_42:
  if (key)
    CFRelease(key);
  return NewItem;
}

uint64_t FigUserDataSerializerContainsKey(const void *a1, const void *a2, __CFString *a3)
{
  CFDictionaryRef *DerivedStorage;
  CFDictionaryRef *v7;
  int ActualKey;
  void *v9;
  uint64_t v10;
  void *key;

  key = 0;
  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  v7 = DerivedStorage;
  if (!*DerivedStorage)
    return 0;
  ActualKey = FigUserDataCreateActualKey(a1, a2, a3, 0, (unint64_t)&key);
  v9 = key;
  if (ActualKey)
  {
    v10 = 0;
    if (!key)
      return v10;
    goto LABEL_7;
  }
  v10 = CFDictionaryContainsKey(*v7, key);
  v9 = key;
  if (key)
LABEL_7:
    CFRelease(v9);
  return v10;
}

uint64_t FigUserDataCreateActualKey(const void *a1, const void *a2, __CFString *a3, unint64_t a4, unint64_t a5)
{
  const __CFAllocator *v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  CFTypeID v12;
  uint64_t v13;
  CFTypeID v14;
  uint64_t v15;
  unsigned int ValueAtIndex;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  CFTypeID v21;
  CFTypeID v22;
  CFTypeID v23;
  CFArrayRef theArray;
  unsigned int valuePtr;

  valuePtr = 0;
  theArray = 0;
  v9 = CFGetAllocator(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!(a4 | a5))
    goto LABEL_32;
  v11 = DerivedStorage;
  if (CFEqual(a2, CFSTR("comn")))
  {
    v12 = CFGetTypeID(a3);
    if (v12 == CFStringGetTypeID())
    {
      if (*(_BYTE *)(v11 + 16))
        v13 = FigUserDataCopyOSTypeKeysFromCommonKey(a3, &theArray);
      else
        v13 = FigISOUserDataCopyOSTypeKeysFromCommonKey(a3, &theArray);
      v15 = v13;
      if ((_DWORD)v13)
        goto LABEL_33;
      if (theArray)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        v17 = bswap32(ValueAtIndex);
        v18 = HIBYTE(v17);
        valuePtr = ValueAtIndex;
LABEL_15:
        v19 = (void *)CFStringCreateWithFormat(v9, 0, CFSTR("%c%c%c%c"), v17, BYTE1(v17), BYTE2(v17), v18);
        goto LABEL_16;
      }
    }
    goto LABEL_32;
  }
  if (*(_BYTE *)(v11 + 16))
  {
    if (CFEqual(a2, CFSTR("udta")))
    {
      v14 = CFGetTypeID(a3);
      if (v14 != CFStringGetTypeID())
      {
        v22 = CFGetTypeID(a3);
        if (v22 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
        {
          v17 = bswap32(valuePtr);
          v18 = HIBYTE(v17);
          goto LABEL_15;
        }
LABEL_32:
        v15 = FigSignalErrorAt();
        goto LABEL_33;
      }
      if (!FigUserDataStringKeyToOSTypeKey(a3, &valuePtr))
        goto LABEL_32;
      goto LABEL_24;
    }
    if (*(_BYTE *)(v11 + 16))
      goto LABEL_32;
  }
  if (!CFEqual(a2, CFSTR("uiso")))
    goto LABEL_32;
  v21 = CFGetTypeID(a3);
  if (v21 == CFStringGetTypeID())
  {
    if (!FigISOUserDataStringKeyToOSTypeKey(a3, &valuePtr))
      goto LABEL_32;
LABEL_24:
    v19 = (void *)CFRetain(a3);
    goto LABEL_16;
  }
  v23 = CFGetTypeID(a3);
  if (v23 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
    goto LABEL_32;
  v19 = (void *)FigUserDataCFStringCreateFromOSType(v9, valuePtr);
LABEL_16:
  v20 = v19;
  if (a4)
    *(_DWORD *)a4 = valuePtr;
  v15 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = v19;
LABEL_33:
    v20 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  if (v20)
    CFRelease(v20);
  return v15;
}

BOOL FigQTUserDataPropertiesIndicateSameLanguageCode(const __CFDictionary *a1, const __CFDictionary *a2)
{
  _BOOL4 PackedLanguageCodeFromProperties;
  _BOOL4 v4;
  _BOOL8 result;
  __int16 v6;
  __int16 v7;

  v7 = 0;
  PackedLanguageCodeFromProperties = FigQTUserDataGetPackedLanguageCodeFromProperties(a1, &v7);
  v6 = 0;
  v4 = FigQTUserDataGetPackedLanguageCodeFromProperties(a2, &v6);
  result = 0;
  if (PackedLanguageCodeFromProperties && v4)
    return v7 == v6;
  return result;
}

uint64_t FigUserDataCreateNewItem(const void *a1, const void *a2, const __CFDictionary *a3, __CFDictionary **a4)
{
  const __CFAllocator *v7;
  __CFDictionary *MutableCopy;
  __CFDictionary *v9;

  v7 = CFGetAllocator(a1);
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(v7, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = MutableCopy;
  if (!MutableCopy)
    return FigSignalErrorAt();
  CFDictionarySetValue(MutableCopy, CFSTR("value"), a2);
  *a4 = v9;
  return 0;
}

CFStringRef FigUserDataCFStringCreateFromOSType(const __CFAllocator *a1, unsigned int a2)
{
  unsigned int v2;

  v2 = bswap32(a2);
  return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), v2, BYTE1(v2), BYTE2(v2), HIBYTE(v2));
}

BOOL FigQTUserDataGetPackedLanguageCodeFromProperties(const __CFDictionary *a1, _WORD *a2)
{
  const __CFLocale *Value;
  const __CFLocale *v5;
  CFTypeID v6;
  __int16 PackedISO639_2TFromLocale;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  BOOL v11;
  CFTypeID v12;
  unsigned __int16 valuePtr;

  Value = (const __CFLocale *)CFDictionaryGetValue(a1, CFSTR("locale"));
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == CFLocaleGetTypeID())
    {
      PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2TFromLocale(v5);
      goto LABEL_13;
    }
  }
  v8 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("languageCode"));
  if (!v8)
    return 0;
  v9 = v8;
  v10 = CFGetTypeID(v8);
  if (v10 != CFNumberGetTypeID())
  {
    v12 = CFGetTypeID(v9);
    if (v12 == CFStringGetTypeID())
    {
      PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2T(v9);
LABEL_13:
      v11 = 1;
      if (!a2)
        return v11;
      goto LABEL_14;
    }
    return 0;
  }
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt16Type, &valuePtr);
  v11 = valuePtr > 0x3FFu && valuePtr != 0x7FFF;
  if (v11)
    PackedISO639_2TFromLocale = valuePtr;
  else
    PackedISO639_2TFromLocale = 0;
  if (a2)
  {
LABEL_14:
    if (v11)
    {
      *a2 = PackedISO639_2TFromLocale;
      return 1;
    }
  }
  return v11;
}

uint64_t FigUserDataSerializerCreateCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  CFMutableDictionaryRef MutableCopy;
  const void *v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v7 = FigSignalErrorAt();
    v8 = 0;
    if (!a3)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (a3)
  {
    v6 = DerivedStorage;
    v7 = FigMetadataSerializerCreateUserDataCommon((uint64_t)a1, 1, &v12);
    v8 = v12;
    if ((_DWORD)v7)
      goto LABEL_11;
    v9 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)v6)
      MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)v6);
    else
      MutableCopy = 0;
    v7 = 0;
    *(_QWORD *)v9 = MutableCopy;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v6 + 8);
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v6 + 16);
    v8 = v12;
LABEL_8:
    if (!(_DWORD)v7)
    {
      *a3 = v8;
      return v7;
    }
LABEL_11:
    if (v8)
      CFRelease(v8);
    return v7;
  }
  return FigSignalErrorAt();
}

void FigUserDataWriteItemAtom(const __CFString *a1, const void *a2, _BYTE *a3)
{
  int v6;
  CFTypeID v7;
  int v8;
  __CFArray *Mutable;
  CFIndex v10;
  const __CFAllocator *v11;
  const CFArrayCallBacks *v12;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  CFIndex v15;
  const void *v16;
  int v17;

  v17 = 0;
  v6 = (_DWORD)a3 + 8;
  if (a3[64])
    FigUserDataStringKeyToOSTypeKey(a1, (unsigned int *)&v17);
  else
    FigISOUserDataStringKeyToOSTypeKey(a1, (unsigned int *)&v17);
  v7 = CFGetTypeID(a2);
  if (v7 == CFDictionaryGetTypeID())
  {
    if (FigAtomWriterBeginAtom())
      return;
    if (a3[64])
    {
      if (FigQTUserDataWriteItemData(v6, v17, (CFDictionaryRef)a2))
        return;
    }
    else if (FigISOUserDataWriteItemData(v6, v17, (CFDictionaryRef)a2))
    {
      return;
    }
    if (!FigAtomWriterEndAtom())
      *a3 = 1;
  }
  else if (CFArrayGetCount((CFArrayRef)a2) >= 1)
  {
    v8 = 0;
    Mutable = 0;
    v10 = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a2, v10);
      if (ValueAtIndex)
      {
        v14 = ValueAtIndex;
        if (HIBYTE(v17) == 169)
        {
          if (!v8 && FigAtomWriterBeginAtom())
            goto LABEL_35;
          if (a3[64])
          {
            if (FigQTUserDataWriteItemData(v6, v17, v14))
              goto LABEL_35;
          }
          else if (FigISOUserDataWriteItemData(v6, v17, v14))
          {
            goto LABEL_35;
          }
          v8 = 1;
          *a3 = 1;
        }
        else
        {
          if (!Mutable)
            Mutable = CFArrayCreateMutable(v11, 0, v12);
          CFArrayAppendValue(Mutable, v14);
        }
      }
      ++v10;
    }
    while (v10 < CFArrayGetCount((CFArrayRef)a2));
    if (v8 && FigAtomWriterEndAtom())
    {
LABEL_35:
      if (!Mutable)
        return;
    }
    else
    {
      if (!Mutable)
        return;
      if (CFArrayGetCount(Mutable) >= 1)
      {
        v15 = 0;
        do
        {
          v16 = CFArrayGetValueAtIndex(Mutable, v15);
          FigUserDataWriteItemAtom(a1, v16, a3);
          ++v15;
        }
        while (v15 < CFArrayGetCount(Mutable));
      }
    }
    CFRelease(Mutable);
  }
}

uint64_t FigQTUserDataWriteItemData(int a1, unsigned int a2, CFDictionaryRef theDict)
{
  const void *Value;
  const __CFString *v6;
  const void *v7;
  const __CFString *v8;
  CFTypeID v9;
  uint64_t appended;
  CFTypeRef v11;
  const __CFLocale *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  CFTypeID v15;
  BOOL v16;
  BOOL v17;
  int v18;
  uint64_t BytesFromCFStringAndMovieLangCode;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const __CFLocale *v23;
  int v24;
  const __CFAllocator *v25;
  const __CFString *v26;
  CFStringEncoding v27;
  const __CFData *ExternalRepresentation;
  CFTypeID TypeID;
  CFTypeRef cf;
  CFDataRef theData;
  unsigned __int16 valuePtr;

  valuePtr = 0x7FFF;
  cf = 0;
  theData = 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("value"));
  if (Value)
    v6 = (const __CFString *)CFRetain(Value);
  else
    v6 = 0;
  v7 = CFDictionaryGetValue(theDict, CFSTR("dataTypeNamespace"));
  v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("dataType"));
  FigMetadataGetCoreMediaDataType((uint64_t)v7, v8, 0);
  if (a2 != -1453039239 || !v6)
  {
    if (HIBYTE(a2) == 169)
      goto LABEL_12;
    if (FigUserDataWeKnowIsISOText(a2))
    {
      v23 = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("locale"));
      if (FigCFEqual())
        v24 = 268435712;
      else
        v24 = 134217984;
      appended = FigISOUserDataCreateItemDataFromText((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t)v6, v24, v23, &theData);
      if ((_DWORD)appended)
        goto LABEL_41;
      ExternalRepresentation = theData;
      if (!theData)
      {
LABEL_56:
        v22 = 0;
        goto LABEL_57;
      }
      goto LABEL_54;
    }
    if (a2 == 1851878757)
    {
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v26 = v6;
      v27 = 0;
    }
    else
    {
      if (a2 != 1952540515)
      {
        TypeID = CFDataGetTypeID();
        if (TypeID != CFGetTypeID(v6))
        {
          appended = FigSignalErrorAt();
          goto LABEL_41;
        }
        if (v6)
          ExternalRepresentation = (const __CFData *)CFRetain(v6);
        else
          ExternalRepresentation = 0;
        goto LABEL_53;
      }
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v26 = v6;
      v27 = 1536;
    }
    ExternalRepresentation = CFStringCreateExternalRepresentation(v25, v26, v27, 0);
LABEL_53:
    theData = ExternalRepresentation;
    if (!ExternalRepresentation)
      goto LABEL_56;
LABEL_54:
    CFDataGetLength(ExternalRepresentation);
    if (!CFDataGetBytePtr(theData))
      goto LABEL_56;
    appended = FigAtomWriterAppendData();
    if (!(_DWORD)appended)
      goto LABEL_56;
LABEL_41:
    v22 = appended;
LABEL_57:
    v20 = 0;
    v11 = v6;
    goto LABEL_58;
  }
  v9 = CFGetTypeID(v6);
  if (v9 == CFDateGetTypeID())
  {
    appended = FigMetadataCopyISO8601GMTStringFromDate((const __CFDate *)v6, (CFStringRef *)&cf);
    if (!(_DWORD)appended)
    {
      v11 = cf;
      if (cf)
        CFRetain(cf);
      CFRelease(v6);
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_12:
  v11 = v6;
LABEL_13:
  v12 = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("locale"));
  v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("languageCode"));
  if (v11 && (v14 = v13, v15 = CFGetTypeID(v11), v15 == CFStringGetTypeID()))
  {
    if ((!v14 || !CFNumberGetValue(v14, kCFNumberSInt16Type, &valuePtr)) && v12)
      valuePtr = FigMetadataGetPackedISO639_2TFromLocale(v12);
    if (FigCFEqual())
      v16 = valuePtr > 0x3FFu;
    else
      v16 = 0;
    v17 = !v16 || valuePtr == 0x7FFF;
    v18 = !v17;
    if (v17)
      BytesFromCFStringAndMovieLangCode = FigCreateBytesFromCFStringAndMovieLangCode();
    else
      BytesFromCFStringAndMovieLangCode = FigCreateBytesFromCFString();
    v20 = (void *)BytesFromCFStringAndMovieLangCode;
    v21 = FigAtomWriterAppendData();
    if (!(_DWORD)v21)
    {
      if (!v18 || (v21 = FigAtomWriterAppendData(), !(_DWORD)v21))
        v21 = FigAtomWriterAppendData();
    }
    v22 = v21;
  }
  else
  {
    v22 = FigSignalErrorAt();
    v20 = 0;
  }
LABEL_58:
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  if (v20)
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20);
  if (v11)
    CFRelease(v11);
  return v22;
}

uint64_t FigISOUserDataWriteItemData(int a1, int a2, CFDictionaryRef theDict)
{
  const void *Value;
  const __CFDate *v6;
  const __CFDate *v7;
  CFTypeID v8;
  uint64_t v9;
  const __CFData *v10;
  const __CFLocale *v11;
  const __CFLocale *v12;
  const __CFAllocator *v13;
  CFIndex v14;
  const char *BytesFromCFString;
  char *v16;
  __CFData *v17;
  uint64_t ItemDataFromText;
  const __CFAllocator *v19;
  __CFData *v20;
  __CFData *Mutable;
  UInt8 *v22;
  CFIndex v23;
  const void *v24;
  const __CFString *v25;
  int v26;
  CFAllocatorRef *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  __CFData *ExternalRepresentation;
  CFLocaleRef v32;
  CFLocaleRef v33;
  uint64_t appended;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const UInt8 *BytePtr;
  const __CFAllocator *v40;
  CFTypeID v41;
  uint64_t v42;
  const UInt8 *v43;
  CFIndex Length;
  uint64_t v45;
  CFTypeRef cf;
  _BYTE theData[23];
  UInt8 v48;
  UInt8 bytes[8];
  int8x8_t v50;
  unsigned int v51;
  uint64_t valuePtr;

  cf = 0;
  *(_QWORD *)theData = 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("value"));
  if (Value && (v6 = (const __CFDate *)CFRetain(Value)) != 0)
  {
    v7 = v6;
    v8 = CFGetTypeID(v6);
    if (v8 == CFDateGetTypeID())
    {
      v9 = FigMetadataCopyISO8601GMTStringFromDate(v7, (CFStringRef *)&cf);
      if ((_DWORD)v9)
      {
        ItemDataFromText = v9;
        v10 = v7;
        goto LABEL_62;
      }
      v10 = (const __CFData *)cf;
      if (cf)
        CFRetain(cf);
      CFRelease(v7);
    }
    else
    {
      v10 = v7;
    }
  }
  else
  {
    v10 = 0;
  }
  if (!FigISOUserDataWeKnowIsISOText(a2))
  {
    if (a2 > 1953000801)
    {
      switch(a2)
      {
        case 1953000802:
          *(_QWORD *)bytes = 0x6765706A00000000;
          if (v10)
          {
            if (theDict)
            {
              v36 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("dataType"));
              if (v36)
              {
                v37 = v36;
                v38 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("dataTypeNamespace"));
                if (!v38)
                  v38 = CFSTR("com.apple.quicktime.udta");
                FigMetadataGetCoreMediaDataType((uint64_t)v38, v37, 0);
                if (FigCFEqual())
                {
                  BytePtr = CFDataGetBytePtr(v10);
                  if (CFDataGetLength(v10) < 4 || *BytePtr != 255 || BytePtr[1] != 216 || BytePtr[2] != 255)
                    goto LABEL_88;
                }
                else if (!FigCFEqual())
                {
                  goto LABEL_88;
                }
                v43 = CFDataGetBytePtr(v10);
                Length = CFDataGetLength(v10);
                if (v43 && Length >= 1)
                {
                  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
                  CFDataAppendBytes(Mutable, bytes, 8);
                  v20 = Mutable;
                  v22 = (UInt8 *)v43;
                  v23 = Length;
                  goto LABEL_94;
                }
              }
            }
          }
LABEL_88:
          v42 = FigSignalErrorAt();
          if (!(_DWORD)v42)
            goto LABEL_89;
LABEL_87:
          ItemDataFromText = v42;
          goto LABEL_62;
        case 1970430324:
          *(_QWORD *)bytes = 0;
          LOWORD(valuePtr) = 0;
          if (v10)
          {
            v40 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            CFNumberGetValue(v10, kCFNumberSInt16Type, &valuePtr);
            bytes[7] = valuePtr;
            v20 = CFDataCreateMutable(v40, 0);
            Mutable = v20;
            v22 = bytes;
            v23 = 8;
            goto LABEL_94;
          }
          v45 = FigSignalErrorAt();
          if ((_DWORD)v45)
          {
            ItemDataFromText = v45;
            v10 = 0;
            goto LABEL_62;
          }
LABEL_89:
          ItemDataFromText = 0;
          goto LABEL_62;
        case 2037543523:
          *(_WORD *)&bytes[4] = 0;
          *(_DWORD *)bytes = 0;
          if (v10 && CFNumberGetValue(v10, kCFNumberSInt16Type, &bytes[4]))
          {
            v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            *(_WORD *)&bytes[4] = bswap32(*(unsigned __int16 *)&bytes[4]) >> 16;
            v20 = CFDataCreateMutable(v19, 0);
            Mutable = v20;
            v22 = bytes;
            v23 = 6;
LABEL_94:
            CFDataAppendBytes(v20, v22, v23);
            v12 = 0;
            v29 = 0;
            *(_QWORD *)theData = Mutable;
            goto LABEL_54;
          }
          goto LABEL_88;
      }
LABEL_36:
      if (v10)
      {
        v30 = CFGetTypeID(v10);
        if (v30 == CFDataGetTypeID())
        {
          ExternalRepresentation = (__CFData *)CFRetain(v10);
LABEL_85:
          Mutable = ExternalRepresentation;
          v12 = 0;
          v29 = 0;
          *(_QWORD *)theData = ExternalRepresentation;
          goto LABEL_54;
        }
      }
LABEL_86:
      v42 = FigSignalErrorAt();
      goto LABEL_87;
    }
    if (a2 == 1684108389)
    {
      if (!v10)
        goto LABEL_86;
      v41 = CFGetTypeID(v10);
      if (v41 != CFStringGetTypeID())
        goto LABEL_86;
    }
    else if (a2 != 1952540515)
    {
      goto LABEL_36;
    }
    ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)v10, 0x600u, 0);
    goto LABEL_85;
  }
  v11 = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("locale"));
  v12 = v11;
  if (v11)
    CFRetain(v11);
  if (a2 == 1819239273)
  {
    valuePtr = 0;
    *(_QWORD *)bytes = 0;
    v50 = 0;
    v51 = 0;
    v48 = 0;
    if (v10
      && (v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
          v14 = CFStringGetLength((CFStringRef)v10),
          (BytesFromCFString = (const char *)FigCreateBytesFromCFString()) != 0))
    {
      v16 = (char *)BytesFromCFString;
      if (v14 + 1 == valuePtr)
      {
        memset(&theData[8], 0, 12);
        sscanf(BytesFromCFString, "%f%f%f", &theData[16], &theData[12], &theData[8]);
        v50 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32(*(float32x2_t *)&theData[12]), 0x10uLL)));
        v51 = bswap32(vcvtd_n_s64_f64(*(float *)&theData[8], 0x10uLL));
        *(_WORD *)&bytes[4] = __rev16(FigMetadataGetPackedISO639_2TFromLocale(v12));
        v17 = CFDataCreateMutable(v13, 0);
        CFDataAppendBytes(v17, bytes, 20);
        CFDataAppendBytes(v17, (const UInt8 *)"earth", 6);
        CFDataAppendBytes(v17, &v48, 1);
        ItemDataFromText = 0;
        *(_QWORD *)theData = v17;
      }
      else
      {
        ItemDataFromText = FigSignalErrorAt();
      }
      CFAllocatorDeallocate(v13, v16);
    }
    else
    {
      ItemDataFromText = FigSignalErrorAt();
    }
    v29 = 0;
    goto LABEL_52;
  }
  v24 = CFDictionaryGetValue(theDict, CFSTR("dataTypeNamespace"));
  v25 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("dataType"));
  FigMetadataGetCoreMediaDataType((uint64_t)v24, v25, 0);
  if (FigCFEqual())
    v26 = 268435712;
  else
    v26 = 134217984;
  v27 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a2 == 1668313716)
  {
    if (v12 && (v28 = FigMetadataCopyLangCodeFromLocale(v12), *(_DWORD *)bytes = 0, v28))
    {
      v29 = v28;
      CFNumberGetValue(v28, kCFNumberSInt32Type, bytes);
      if (*(_DWORD *)bytes != 0x7FFF && *(_DWORD *)bytes != 138)
        goto LABEL_40;
    }
    else
    {
      v29 = 0;
    }
    v33 = CFLocaleCreate(*v27, CFSTR("en"));
    v32 = v33;
    if (v33)
      CFRetain(v33);
    if (v12)
      CFRelease(v12);
    if (v32)
      CFRelease(v32);
    goto LABEL_51;
  }
  v29 = 0;
LABEL_40:
  v32 = v12;
LABEL_51:
  ItemDataFromText = FigISOUserDataCreateItemDataFromText(*v27, (uint64_t)v10, v26, v32, (__CFData **)theData);
  v12 = v32;
LABEL_52:
  if ((_DWORD)ItemDataFromText)
    goto LABEL_58;
  Mutable = *(__CFData **)theData;
LABEL_54:
  if (!Mutable
    || (CFDataGetLength(Mutable), !CFDataGetBytePtr(*(CFDataRef *)theData))
    || (appended = FigAtomWriterAppendData(), !(_DWORD)appended))
  {
    ItemDataFromText = 0;
LABEL_58:
    if (!v29)
      goto LABEL_60;
    goto LABEL_59;
  }
  ItemDataFromText = appended;
  if (v29)
LABEL_59:
    CFRelease(v29);
LABEL_60:
  if (v12)
    CFRelease(v12);
LABEL_62:
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)theData)
    CFRelease(*(CFTypeRef *)theData);
  if (v10)
    CFRelease(v10);
  return ItemDataFromText;
}

uint64_t FigVTTNoteBlockCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef *DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
    v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
    if (!(_DWORD)v3)
      *a2 = 0;
  }
  return v3;
}

void figVTTNoteBlock_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTNoteBlock_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("note: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figVTTNoteBlock_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 3;
  return 0;
}

uint64_t figVTTNoteBlock_copyNodeDocumentSerialization(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 0;
  v4 = *(const void **)(DerivedStorage + 8);
  if (!v4)
    return FigSignalErrorAt();
  v5 = CFRetain(v4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@\n%@\n"), CFSTR("NOTE"), v5);
  CFRelease(v6);
  return 0;
}

uint64_t frlo_registerFigRenderedLegibleOutputManager()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigRenderedLegibleOutputManagerID = result;
  return result;
}

uint64_t FigRenderedLegibleOutputManagerCreate(uint64_t a1, NSObject *a2, NSObject *a3, uint64_t a4, CFTypeRef *a5)
{
  unint64_t v9;
  uint64_t Instance;
  NSObject **v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v15;
  NSObject **v16;
  uint64_t v17;
  dispatch_queue_t v18;
  dispatch_queue_t v19;
  uint64_t v20;
  char __str[256];
  char label[256];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)a2 | (unint64_t)a3;
  if (a4)
  {
    if (!v9)
      return FigSignalErrorAt();
  }
  else if (v9)
  {
    return FigSignalErrorAt();
  }
  if (!a5)
    return FigSignalErrorAt();
  *a5 = 0;
  MEMORY[0x19402F294](&FigRenderedLegibleOutputManagerGetTypeID_sRegisterFigRenderedLegibleOutputManagerOnce, frlo_registerFigRenderedLegibleOutputManager);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v12 = (NSObject **)Instance;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v12[9] = Mutable;
  if (!Mutable
    || (v15 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], 0), (v12[8] = v15) == 0))
  {
LABEL_19:
    v17 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v16 = v12 + 12;
  v17 = FigCaptionRendererSessionCreate(0, 0, (uint64_t)v12, (uint64_t *)v12 + 12);
  if (!(_DWORD)v17)
  {
    if (!*v16)
    {
      v20 = 0;
      goto LABEL_18;
    }
    v17 = (uint64_t)FigCaptionRendererSessionSetLegibleOutputDevice(*v16, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
    if (!(_DWORD)v17)
    {
      snprintf(__str, 0x100uLL, "com.apple.coremedia.renderedlegibleoutput.notificationqueue<%p>", v12);
      v18 = dispatch_queue_create(__str, 0);
      v12[3] = v18;
      if (v18)
      {
        snprintf(label, 0x100uLL, "com.apple.coremedia.renderedlegibleoutput.messagequeue<%p>", v12);
        v19 = dispatch_queue_create(label, 0);
        v12[2] = v19;
        if (v19)
        {
          if (a4)
          {
            if ((unint64_t)a2 | (unint64_t)a3)
            {
              v12[4] = a2;
              v12[5] = a3;
              v12[6] = FigCFWeakReferenceHolderCreateWithReferencedObject();
            }
          }
          v20 = 0;
          *a5 = CFRetain(v12);
          goto LABEL_18;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  v20 = v17;
LABEL_18:
  CFRelease(v12);
  return v20;
}

uint64_t FigRenderedLegibleOutputManagerSetRenderedLegibleOutputsDict(dispatch_queue_t *cf, CFTypeRef a2)
{
  dispatch_queue_t *v3;
  CFTypeRef v4;
  _QWORD v6[2];

  v3 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  v6[0] = cf;
  if (a2)
    v4 = CFRetain(a2);
  else
    v4 = 0;
  v6[1] = v4;
  dispatch_sync_f(v3[2], v6, (dispatch_function_t)frlo_setLegibleOutputsDictDo);
  return 0;
}

void frlo_setLegibleOutputsDictDo(const __CFDictionary ***a1)
{
  const __CFDictionary *v2;
  const __CFDictionary **v3;
  const __CFDictionary *v4;
  const __CFDictionary **v5;
  const __CFDictionary *v6;
  const __CFDictionary **v7;

  v3 = *a1;
  v2 = (const __CFDictionary *)a1[1];
  v4 = v3[7];
  v3[7] = v2;
  if (v2)
    CFRetain(v2);
  if (v4)
    CFRelease(v4);
  v5 = *a1;
  CFDictionaryApplyFunction((*a1)[9], (CFDictionaryApplierFunction)frlo_finalizeFigRenderedLegibleOutputApplier, 0);
  CFDictionaryRemoveAllValues(v5[9]);
  CFDictionaryRemoveAllValues(v5[8]);
  v6 = v5[7];
  if (v6)
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)frlo_rebuildFigRenderedLegibleOutputs_applier, v5);
  if (*a1)
    CFRelease(*a1);
  v7 = a1[1];
  if (v7)
    CFRelease(v7);
}

uint64_t FigRenderedLegibleOutputManagerSetNonForcedEnabledForMediaType(dispatch_queue_t *cf, int a2, unsigned __int8 a3)
{
  dispatch_queue_t *v5;
  dispatch_queue_t *v7;
  int v8;
  int v9;

  v5 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  v7 = cf;
  v8 = a2;
  v9 = a3;
  dispatch_sync_f(v5[2], &v7, (dispatch_function_t)frlo_setNonForcedEnabledForMediaTypeDo);
  return 0;
}

void frlo_setNonForcedEnabledForMediaTypeDo(uint64_t a1)
{
  int v2;
  int v3;
  CFDictionaryRef *v4;
  void (__cdecl *v5)(const void *, const void *, void *);
  int v6;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1935832172)
  {
    v6 = *(unsigned __int8 *)(a1 + 12);
    v4 = *(CFDictionaryRef **)a1;
    *(_BYTE *)(*(_QWORD *)a1 + 81) = v6;
    if (!v6)
    {
      v5 = (void (__cdecl *)(const void *, const void *, void *))frlo_clearPreviousSubtitles;
      goto LABEL_7;
    }
  }
  else
  {
    if (v2 != 1668047728)
      goto LABEL_8;
    v3 = *(unsigned __int8 *)(a1 + 12);
    v4 = *(CFDictionaryRef **)a1;
    *(_BYTE *)(*(_QWORD *)a1 + 80) = v3;
    if (!v3)
    {
      v5 = (void (__cdecl *)(const void *, const void *, void *))frlo_clearPreviousClosedCaptions;
LABEL_7:
      CFDictionaryApplyFunction(v4[9], v5, 0);
LABEL_8:
      v4 = *(CFDictionaryRef **)a1;
      if (!*(_QWORD *)a1)
        return;
    }
  }
  CFRelease(v4);
}

CFMutableArrayRef FigRenderedLegibleOutputManagerEnsureRenderPipelinesForFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  _QWORD v11[6];

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = Mutable;
  if (Mutable)
  {
    v11[0] = a1;
    v11[1] = a2;
    v11[2] = a3;
    v11[3] = a4;
    v11[4] = Mutable;
    v11[5] = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v11, (dispatch_function_t)frlo_ensureRenderPipelinesForFormatDo);
  }
  else
  {
    FigSignalErrorAt();
  }
  return v9;
}

void frlo_ensureRenderPipelinesForFormatDo(_QWORD *a1)
{
  const __CFDictionary *v2;

  v2 = *(const __CFDictionary **)(*a1 + 56);
  if (v2 && CFDictionaryGetCount(v2) >= 1)
  {
    if (a1[4])
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(*a1 + 56), (CFDictionaryApplierFunction)frlo_ensureRenderPipelinesForFormatDo_applier, a1);
  }
}

uint64_t FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipelines(uint64_t a1)
{
  uint64_t context;

  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)frlo_forgetAboutRenderedLegibleOutputRenderPipelinesDo);
  return 0;
}

void frlo_forgetAboutRenderedLegibleOutputRenderPipelinesDo(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(_QWORD *)a1 + 64));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(_QWORD *)a1 + 72), (CFDictionaryApplierFunction)frlo_forgetAboutRenderPipelines, 0);
}

uint64_t FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipeline(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v3, (dispatch_function_t)frlo_forgetAboutRenderedLegibleOutputRenderPipelineDo);
  return 0;
}

void frlo_forgetAboutRenderedLegibleOutputRenderPipelineDo(const void **a1)
{
  CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)*a1 + 8), a1[1]);
  CFDictionaryApplyFunction(*((CFDictionaryRef *)*a1 + 9), (CFDictionaryApplierFunction)frlo_forgetAboutRenderPipeline, a1);
}

uint64_t FigRenderedLegibleOutputManagerIsSupported()
{
  return 1;
}

double frlo_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void frlo_finalize(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  a1[4] = 0;
  a1[5] = 0;
  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  v4 = a1[3];
  if (v4)
  {
    dispatch_release(v4);
    a1[3] = 0;
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  v6 = (const __CFDictionary *)a1[9];
  if (v6)
  {
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)frlo_finalizeFigRenderedLegibleOutputApplier, 0);
    v7 = (const void *)a1[9];
    if (v7)
    {
      CFRelease(v7);
      a1[9] = 0;
    }
  }
  v8 = (const void *)a1[7];
  if (v8)
  {
    CFRelease(v8);
    a1[7] = 0;
  }
  v9 = (const void *)a1[11];
  if (v9)
  {
    CFRelease(v9);
    a1[11] = 0;
  }
  v10 = (const void *)a1[12];
  if (v10)
    CFRelease(v10);
}

__CFString *frlo_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRenderedLegibleOutputManager %p>"), a1);
  return Mutable;
}

void frlo_finalizeFigRenderedLegibleOutputApplier(int a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  if (a2)
  {
    v3 = a2[6];
    if (v3)
    {
      CFRelease(v3);
      a2[6] = 0;
    }
    v4 = a2[7];
    if (v4)
    {
      CFRelease(v4);
      a2[7] = 0;
    }
    if (*a2)
      CFRelease(*a2);
    free(a2);
  }
}

void frlo_rebuildFigRenderedLegibleOutputs_applier(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  const __CFNumber *Value;
  const __CFDictionary *v7;
  CMTimeValue v8;
  uint64_t v9;
  char *v10;
  CFTypeRef v11;
  CMTime seconds;
  CMTime v13;

  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RenderedLegibleOutputKey_AdvanceInterval"));
  if (Value)
  {
    seconds.value = 0;
    CFNumberGetValue(Value, kCFNumberDoubleType, &seconds);
    CMTimeMakeWithSeconds(&v13, *(Float64 *)&seconds.value, 1000);
  }
  *(_OWORD *)&seconds.value = *MEMORY[0x1E0C9D820];
  v7 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("RenderedLegibleOutputKey_VideoDisplaySize"));
  CGSizeMakeWithDictionaryRepresentation(v7, (CGSize *)&seconds);
  v8 = seconds.value;
  v9 = *(_QWORD *)&seconds.timescale;
  seconds = v13;
  v10 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10600404838DB4AuLL);
  if (v10)
  {
    if (a1)
      v11 = CFRetain(a1);
    else
      v11 = 0;
    *(_QWORD *)v10 = v11;
    *(CMTime *)(v10 + 8) = seconds;
    *((_QWORD *)v10 + 4) = v8;
    *((_QWORD *)v10 + 5) = v9;
    goto LABEL_8;
  }
  if (!FigSignalErrorAt())
LABEL_8:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 72), a1, v10);
}

void frlo_ensureRenderPipelinesForFormatDo_applier(void *key, uint64_t a2, CFMutableArrayRef *a3)
{
  char *Value;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, uint64_t);
  uint64_t v12;
  CFMutableArrayRef v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, __CFString *, CFMutableArrayRef);
  CFMutableArrayRef v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, __CFString *, CFMutableArrayRef);
  const void *v19;
  __int128 v20;
  uint64_t v21;

  Value = (char *)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 9), key);
  if (CMFormatDescriptionGetMediaType(a3[1]) == 1935832172 || CMFormatDescriptionGetMediaType(a3[1]) == 1952807028)
  {
    v5 = (const void *)*((_QWORD *)Value + 7);
    if (!v5)
      goto LABEL_6;
    if (*((_BYTE *)a3 + 40))
    {
      CFRelease(v5);
      *((_QWORD *)Value + 7) = 0;
LABEL_6:
      v7 = (uint64_t)*a3;
      v6 = (uint64_t)a3[1];
      v8 = *(_OWORD *)(Value + 8);
      v21 = *((_QWORD *)Value + 3);
      v20 = v8;
      if (FigCreateCaptionRenderPipeline(v6, (uint64_t)frlo_newSubtitleSampleArrivedCallback, v7, 0, 0, (uint64_t)frlo_renderPipelineDidFlush, v7, 0, &v20, 0, (CFTypeRef *)Value + 7))return;
    }
  }
  v9 = *((unsigned __int8 *)*a3 + 81);
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)Value + 7));
  v11 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v11)
  {
    if (v9)
      v12 = *MEMORY[0x1E0C9AE50];
    else
      v12 = *MEMORY[0x1E0C9AE40];
    v11(FigBaseObject, CFSTR("DisplayNonForcedSubtitles"), v12);
  }
  v13 = a3[3];
  if (!v13
    || (v14 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)Value + 7)),
        (v15 = *(unsigned int (**)(uint64_t, __CFString *, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56)) != 0)
    && !v15(v14, CFSTR("CRPP_ExtendedLanguageTagString"), v13))
  {
    v16 = a3[2];
    if (!v16
      || (v17 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)Value + 7)),
          (v18 = *(unsigned int (**)(uint64_t, __CFString *, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56)) != 0)
      && !v18(v17, CFSTR("CRPP_TextMarkupArray"), v16))
    {
      v19 = (const void *)*((_QWORD *)Value + 7);
      if (v19)
      {
        CFDictionaryAddValue(*((CFMutableDictionaryRef *)*a3 + 8), *((const void **)Value + 7), Value);
        CFArrayAppendValue(a3[4], v19);
      }
    }
  }
}

void frlo_newSubtitleSampleArrivedCallback(const void *a1, const void *a2, __int128 *a3, char a4, char a5, dispatch_queue_t *a6, double a7, double a8, double a9, double a10)
{
  char *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  __int128 v23;
  CFTypeRef v24;

  v20 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0x10E004010A499B0uLL);
  if (a6)
    v21 = CFRetain(a6);
  else
    v21 = 0;
  *(_QWORD *)v20 = v21;
  if (a2)
    v22 = CFRetain(a2);
  else
    v22 = 0;
  *((_QWORD *)v20 + 2) = v22;
  v23 = *a3;
  *((_QWORD *)v20 + 5) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v20 + 24) = v23;
  v20[48] = a4;
  v20[49] = a5;
  *((double *)v20 + 7) = a7;
  *((double *)v20 + 8) = a8;
  *((double *)v20 + 9) = a9;
  *((double *)v20 + 10) = a10;
  if (a1)
    v24 = CFRetain(a1);
  else
    v24 = 0;
  *((_QWORD *)v20 + 1) = v24;
  dispatch_async_f(a6[2], v20, (dispatch_function_t)frlo_convertSubtitleSampleIntoPixelBuffersDo);
}

void frlo_renderPipelineDidFlush(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;
  CFTypeRef v6;

  v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *v4 = v5;
  if (a1)
    v6 = CFRetain(a1);
  else
    v6 = 0;
  v4[1] = v6;
  dispatch_async_f(a2[2], v4, (dispatch_function_t)frlo_renderPipelineDidFlushDo);
}

void frlo_convertSubtitleSampleIntoPixelBuffersDo(_QWORD *a1)
{
  _QWORD *v1;
  const void *v2;
  double *Value;
  CFIndex Count;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  CFIndex v8;
  const CFDictionaryValueCallBacks *v9;
  CGImage *ValueAtIndex;
  unint64_t Width;
  unint64_t Height;
  CGColorSpace *DeviceRGB;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  CVReturn v16;
  void *BaseAddress;
  size_t BytesPerRow;
  CGContext *v19;
  CVReturn v20;
  void *v21;
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  uint64_t v24;
  const void *v25;
  _QWORD *v26;
  CFTypeRef v27;
  const void *v28;
  double *v29;
  _QWORD *v30;
  __CFArray *v31;
  CFIndex v32;
  uint64_t v33;
  CFTypeRef v34;
  __CFArray *v35;
  CFArrayRef theArray;
  CFTypeRef cf[4];
  CMTime pixelBufferOut;
  const __CFString *v39;
  uint64_t v40;
  CGRect v41;

  v1 = a1;
  v40 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  theArray = 0;
  v34 = 0;
  v2 = (const void *)a1[1];
  if (!v2)
    goto LABEL_62;
  Value = (double *)CFDictionaryGetValue(*(CFDictionaryRef *)(*a1 + 64), v2);
  if (!v1[2])
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
      goto LABEL_42;
LABEL_63:
    v22 = 0;
    v23 = 0;
    goto LABEL_47;
  }
  if (!*(_BYTE *)(*v1 + 81) && !*((_BYTE *)v1 + 48))
    goto LABEL_62;
  if (FigCaptionRendererSessionClearForRLO(*(NSObject **)(*v1 + 96)))
    goto LABEL_62;
  if (FigCaptionRendererSessionSetLayoutContext_Viewport(*(_QWORD *)(*v1 + 96), 0.0, 0.0, Value[4], Value[5]))goto LABEL_62;
  if (FigCaptionRendererSessionSetLayoutContext_VideoSize(*(NSObject **)(*v1 + 96), Value[4], Value[5]))
    goto LABEL_62;
  if (FigCaptionRendererSessionSetLayoutContext_Gravity(*(NSObject **)(*v1 + 96), 0))
    goto LABEL_62;
  if (FigCaptionRendererSessionSetLayoutContext_Overscan(*(NSObject **)(*v1 + 96), 0))
    goto LABEL_62;
  if (FigSubtitleSampleCreatePropertyList((const __CFDictionary *)v1[2], *((unsigned __int8 *)v1 + 48), *((unsigned __int8 *)v1 + 49), (CFDictionaryRef *)&v34, *((CGFloat *)v1 + 7), *((CGFloat *)v1 + 8), *((CGFloat *)v1 + 9), *((CGFloat *)v1 + 10)))goto LABEL_62;
  cf[0] = 0;
  FigCaptionRendererLayoutContextCreate(cf);
  if (!cf[0])
    goto LABEL_62;
  if (FigCaptionRendererSessionSetCaptionSample(*(NSObject **)(*v1 + 96), (uint64_t)v34, (uint64_t)cf[0]))
    goto LABEL_62;
  if (FigCaptionRendererSessionUpdateLegibleOutputContext(*(_QWORD **)(*v1 + 96), (uint64_t)cf[0]))
    goto LABEL_62;
  v33 = 0;
  if (FigCaptionRendererLayoutContextGetSubtitleSample((uint64_t)cf[0], &v33))
    goto LABEL_62;
  if (cf[0])
    CFRelease(cf[0]);
  if (FigCaptionRendererSessionCopyOutputNodeImagesAndPositions(*(_QWORD *)(*v1 + 96), &theArray, &v35))
  {
LABEL_62:
    Mutable = 0;
    goto LABEL_63;
  }
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  Mutable = v7;
  if (!v7)
    goto LABEL_63;
  if (Count)
  {
    v30 = v1;
    v31 = v7;
    v29 = Value;
    v8 = 0;
    v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v32 = Count;
    while (1)
    {
      ValueAtIndex = (CGImage *)CFArrayGetValueAtIndex(theArray, v8);
      pixelBufferOut.value = 0;
      Width = CGImageGetWidth(ValueAtIndex);
      Height = CGImageGetHeight(ValueAtIndex);
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      v14 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9AEB8], v9);
      if (v14)
      {
        v9 = (const CFDictionaryValueCallBacks *)CFDictionaryCreate(v5, 0, 0, 0, MEMORY[0x1E0C9B390], v9);
        FigCFDictionarySetValue();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        v15 = v5;
        v16 = CVPixelBufferCreate(v5, Width, Height, 0x42475241u, v14, (CVPixelBufferRef *)&pixelBufferOut);
        if (v16)
        {
          v20 = v16;
          v21 = 0;
          v19 = 0;
        }
        else if (pixelBufferOut.value)
        {
          CVPixelBufferLockBaseAddress((CVPixelBufferRef)pixelBufferOut.value, 0);
          BaseAddress = CVPixelBufferGetBaseAddress((CVPixelBufferRef)pixelBufferOut.value);
          BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)pixelBufferOut.value);
          v19 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, 1u);
          v41.size.width = (double)Width;
          v41.size.height = (double)Height;
          v41.origin.x = 0.0;
          v41.origin.y = 0.0;
          CGContextDrawImage(v19, v41, ValueAtIndex);
          CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)pixelBufferOut.value, 0);
          v20 = 0;
          v21 = (void *)pixelBufferOut.value;
          pixelBufferOut.value = 0;
        }
        else
        {
          v21 = 0;
          v19 = 0;
          v20 = 0;
        }
      }
      else
      {
        v15 = v5;
        v21 = 0;
        v19 = 0;
        v20 = 0;
      }
      CGColorSpaceRelease(DeviceRGB);
      CGContextRelease(v19);
      CVPixelBufferRelease((CVPixelBufferRef)pixelBufferOut.value);
      if (v14)
        CFRelease(v14);
      if (v9)
        CFRelease(v9);
      if (v20)
        break;
      if (v21)
      {
        CFArrayAppendValue(v31, v21);
        CVPixelBufferRelease((CVPixelBufferRef)v21);
      }
      ++v8;
      v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      v5 = v15;
      if (v32 == v8)
      {
        Value = v29;
        v1 = v30;
        Mutable = v31;
        goto LABEL_42;
      }
    }
    v1 = v30;
    Mutable = v31;
    goto LABEL_63;
  }
LABEL_42:
  pixelBufferOut = *(CMTime *)((_BYTE *)v1 + 1);
  v22 = CMTimeCopyAsDictionary(&pixelBufferOut, v5);
  pixelBufferOut.value = (CMTimeValue)CFSTR("RenderedLegibleOutputKey");
  cf[0] = *(CFTypeRef *)Value;
  cf[1] = Mutable;
  *(_QWORD *)&pixelBufferOut.timescale = CFSTR("RenderedLegibleOutputPixelBuffers");
  pixelBufferOut.epoch = (CMTimeEpoch)CFSTR("RenderedLegibleOutputPositions");
  v39 = CFSTR("FigTime");
  cf[2] = v35;
  cf[3] = v22;
  v23 = CFDictionaryCreate(v5, (const void **)&pixelBufferOut, cf, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v23)
  {
    v24 = *(_QWORD *)(*v1 + 32);
    v25 = *(const void **)(*v1 + 48);
    v26 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
    *v26 = CFRetain(v23);
    v26[1] = v24;
    if (v25)
      v27 = CFRetain(v25);
    else
      v27 = 0;
    v26[2] = v27;
    dispatch_async_f(*(dispatch_queue_t *)(*v1 + 24), v26, (dispatch_function_t)frlo_invokeCallbackAndDisposeContext);
  }
LABEL_47:
  if (*v1)
    CFRelease((CFTypeRef)*v1);
  if (theArray)
    CFRelease(theArray);
  if (Mutable)
    CFRelease(Mutable);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  v28 = (const void *)v1[2];
  if (v28)
    CFRelease(v28);
  if (v34)
    CFRelease(v34);
  free(v1);
}

void frlo_invokeCallbackAndDisposeContext(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (a1[1])
  {
    if (a1[2])
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        ((void (*)(_QWORD, uint64_t))a1[1])(*a1, v2);
        CFRelease(v3);
      }
    }
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void frlo_renderPipelineDidFlushDo(_QWORD *a1)
{
  const void *v2;
  const void **Value;
  const void *v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  const void *v10;

  v2 = (const void *)a1[1];
  if (v2)
  {
    Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(*a1 + 64), v2);
    if (Value)
    {
      v4 = *Value;
      v6 = *(_QWORD *)(*a1 + 40);
      v5 = *(const void **)(*a1 + 48);
      v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
      if (v4)
        v8 = CFRetain(v4);
      else
        v8 = 0;
      *v7 = v8;
      v7[1] = v6;
      if (v5)
        v9 = CFRetain(v5);
      else
        v9 = 0;
      v7[2] = v9;
      dispatch_async_f(*(dispatch_queue_t *)(*a1 + 24), v7, (dispatch_function_t)frlo_invokeFlushCallbackAndDisposeContext);
    }
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v10 = (const void *)a1[1];
  if (v10)
    CFRelease(v10);
  free(a1);
}

void frlo_invokeFlushCallbackAndDisposeContext(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (a1[1])
  {
    if (a1[2])
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        ((void (*)(_QWORD, uint64_t))a1[1])(*a1, v2);
        CFRelease(v3);
      }
    }
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void frlo_forgetAboutRenderPipelines(uint64_t a1, uint64_t a2)
{
  const void *v2;

  v2 = *(const void **)(a2 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a2 + 56) = 0;
  }
}

void frlo_forgetAboutRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  _QWORD *v4;
  const void *v5;
  _QWORD *v6;
  const void *v7;
  const void *v8;

  v4 = (_QWORD *)(a2 + 48);
  v3 = *(const void **)(a2 + 48);
  v5 = *(const void **)(a3 + 8);
  if (v3 == v5)
  {
    if (!v3)
      return;
    goto LABEL_8;
  }
  v8 = *(const void **)(a2 + 56);
  v6 = (_QWORD *)(a2 + 56);
  v7 = v8;
  if (v8 == v5 && v7 != 0)
  {
    v3 = *(const void **)(a3 + 8);
    v4 = v6;
LABEL_8:
    CFRelease(v3);
    *v4 = 0;
  }
}

uint64_t FigMetadataSerializerCreateForiTunes(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  if (!a2)
    return FigSignalErrorAt();
  FigMetadataSerializerGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    CMBaseObjectGetDerivedStorage();
    *a2 = 0;
  }
  return v3;
}

void FigiTunesMetadataSerializerFinalize()
{
  const void **DerivedStorage;
  const void **v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *v1 = 0;
    }
    v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

__CFString *FigiTunesMetadataSerializerCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v2 = DerivedStorage;
    CFStringAppendFormat(Mutable, 0, CFSTR(" FigiTunesMetadataSerializer %p\n"), DerivedStorage);
    CFStringAppendFormat(Mutable, 0, CFSTR("  - handle name: %@\n"), *(_QWORD *)(v2 + 8));
    CFStringAppendFormat(Mutable, 0, CFSTR("  - free atom size: %d\n"), *(unsigned int *)(v2 + 16));
    CFStringAppendFormat(Mutable, 0, CFSTR("  - minimum container size: %d\n"), *(unsigned int *)(v2 + 20));
    CFStringAppendFormat(Mutable, 0, CFSTR("%@"), *(_QWORD *)v2);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigiTunesMetadataSerializerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFString **v7;
  const __CFString *v8;
  void *v9;
  const __CFAllocator *v10;
  const void *v11;
  uint64_t result;
  void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = (const __CFString **)DerivedStorage;
  if (CFEqual(a2, CFSTR("handlerName")))
  {
    v8 = v7[1];
    if (!v8)
      return 4294954513;
    goto LABEL_4;
  }
  if (CFEqual(a2, CFSTR("freeAtomSize")))
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = v7 + 2;
LABEL_10:
    v9 = CFNumberCreate(v10, kCFNumberSInt32Type, v11);
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("minimumSize")))
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (char *)v7 + 20;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    v8 = CFSTR("com.apple.itunes");
LABEL_4:
    v9 = (void *)CFRetain(v8);
LABEL_11:
    v13 = v9;
    result = 0;
    *a4 = v13;
    return result;
  }
  return 4294954512;
}

uint64_t FigiTunesMetadataSerializerSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const void *v8;
  uint64_t result;
  CFTypeID TypeID;
  CFTypeID v11;
  int v12;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(CFSTR("handlerName"), a2))
  {
    if (CFEqual(CFSTR("freeAtomSize"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(a3))
        return FigSignalErrorAt();
      valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      {
        result = 0;
        *(_DWORD *)(v6 + 16) = valuePtr;
        return result;
      }
    }
    else
    {
      if (!CFEqual(CFSTR("minimumSize"), a2))
        return 4294954710;
      if (!a3)
        return FigSignalErrorAt();
      v11 = CFNumberGetTypeID();
      if (v11 != CFGetTypeID(a3))
        return FigSignalErrorAt();
      v12 = 0;
      if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v12))
      {
        result = 0;
        *(_DWORD *)(v6 + 20) = v12;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFStringGetTypeID();
  if (v7 != CFGetTypeID(a3))
    return FigSignalErrorAt();
  v8 = *(const void **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = CFRetain(a3);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t FigiTunesMetadataSerializerAddItem(const void *a1, const __CFString *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef *v11;
  const __CFAllocator *v12;
  uint64_t ActualKey;
  const __CFDictionary *Mutable;
  const __CFAllocator *v15;
  CFTypeID v16;
  void *v17;
  const __CFAllocator *v18;
  __CFArray *v19;
  __CFArray *v20;
  CFTypeRef v21;
  uint64_t NewItem;
  CFTypeRef v24;
  void *key;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  v24 = 0;
  key = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3 || !a4)
    goto LABEL_31;
  v11 = (CFMutableDictionaryRef *)DerivedStorage;
  v12 = CFGetAllocator(a1);
  ActualKey = FigiTunesMetadataCreateActualKey(v12, a2, a3, (unint64_t)&v24, (unint64_t)&key);
  if ((_DWORD)ActualKey)
  {
LABEL_32:
    NewItem = ActualKey;
    goto LABEL_16;
  }
  Mutable = *v11;
  if (!*v11)
  {
    v15 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *v11 = Mutable;
    if (!Mutable)
    {
LABEL_31:
      ActualKey = FigSignalErrorAt();
      goto LABEL_32;
    }
  }
  if (!CFDictionaryGetValueIfPresent(Mutable, key, (const void **)&value))
  {
    NewItem = FigiTunesMetadataCreateNewItem(a1, v24, a4, a5, (__CFDictionary **)&cf);
    if (!(_DWORD)NewItem)
    {
      v20 = (__CFArray *)cf;
      CFDictionarySetValue(*v11, key, cf);
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  v16 = CFGetTypeID(value);
  if (v16 != CFDictionaryGetTypeID())
  {
    NewItem = FigiTunesMetadataCreateNewItem(a1, v24, a4, a5, (__CFDictionary **)&cf);
    if (!(_DWORD)NewItem)
    {
      v20 = (__CFArray *)cf;
      CFArrayAppendValue((CFMutableArrayRef)value, cf);
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  v17 = value;
  ActualKey = FigiTunesMetadataCreateNewItem(a1, v24, a4, a5, (__CFDictionary **)&cf);
  if ((_DWORD)ActualKey)
    goto LABEL_32;
  v18 = CFGetAllocator(a1);
  v19 = CFArrayCreateMutable(v18, 0, MEMORY[0x1E0C9B378]);
  v20 = v19;
  if (value)
  {
    CFArrayAppendValue(v19, v17);
    v21 = cf;
    CFArrayAppendValue(v20, cf);
    CFDictionarySetValue(*v11, key, v20);
    if (v21)
    {
      CFRelease(v21);
      cf = 0;
    }
    if (v20)
    {
      CFRelease(v20);
      NewItem = 0;
LABEL_16:
      v20 = 0;
      goto LABEL_22;
    }
    NewItem = 0;
  }
  else
  {
    NewItem = FigSignalErrorAt();
  }
LABEL_22:
  if (cf)
    CFRelease(cf);
LABEL_24:
  if (v20)
    CFRelease(v20);
  if (key)
    CFRelease(key);
  if (v24)
    CFRelease(v24);
  return NewItem;
}

uint64_t FigiTunesMetadataSerializerContainsKey(const void *a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  CFDictionaryRef *v7;
  const __CFAllocator *v8;
  uint64_t v9;
  void *key;

  key = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2 && a3)
  {
    v7 = (CFDictionaryRef *)DerivedStorage;
    v8 = CFGetAllocator(a1);
    if (!FigiTunesMetadataCreateActualKey(v8, a2, a3, 0, (unint64_t)&key) && *v7)
    {
      v9 = CFDictionaryContainsKey(*v7, key);
      goto LABEL_10;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v9 = 0;
LABEL_10:
  if (key)
    CFRelease(key);
  return v9;
}

uint64_t FigiTunesMetadataCreateActualKey(const __CFAllocator *a1, const __CFString *a2, const __CFString *a3, unint64_t a4, unint64_t a5)
{
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v11;
  CFTypeID v12;
  unsigned int Value;
  unsigned int v14;
  const void *v15;
  CFTypeID v16;
  void *v17;
  CFTypeID v18;
  CFTypeID v19;
  unsigned int v20;
  CFTypeRef v21;
  uint64_t v22;
  unsigned int valuePtr;

  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!(a4 | a5))
    return FigSignalErrorAt();
  v11 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  valuePtr = 0;
  if (!CFEqual(a2, CFSTR("comn")))
  {
    if (!CFEqual(a2, CFSTR("itsk")))
    {
      if (!CFEqual(a2, CFSTR("itlk")))
        return FigSignalErrorAt();
      v18 = CFGetTypeID(a3);
      if (v18 != CFStringGetTypeID())
        return FigSignalErrorAt();
      v15 = CFRetain(a3);
LABEL_17:
      if (a5)
      {
        *(_QWORD *)a5 = v15;
        v15 = 0;
      }
      if (a4)
      {
        if (a2)
          v21 = CFRetain(a2);
        else
          v21 = 0;
        v22 = 0;
        *(_QWORD *)a4 = v21;
        if (!v15)
          return v22;
      }
      else
      {
        v22 = 0;
        if (!v15)
          return v22;
      }
      goto LABEL_26;
    }
    v16 = CFGetTypeID(a3);
    if (v16 == CFStringGetTypeID())
    {
      if (FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr))
      {
        v17 = (void *)CFRetain(a3);
        goto LABEL_16;
      }
    }
    else
    {
      v19 = CFGetTypeID(a3);
      if (v19 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      {
        v20 = bswap32(valuePtr);
        v17 = (void *)CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), v20, BYTE1(v20), BYTE2(v20), HIBYTE(v20));
LABEL_16:
        v15 = v17;
        if (valuePtr == 757935405)
        {
          v22 = FigSignalErrorAt();
          if (!v15)
            return v22;
LABEL_26:
          CFRelease(v15);
          return v22;
        }
        goto LABEL_17;
      }
    }
    return FigSignalErrorAt();
  }
  v12 = CFGetTypeID(a3);
  if (v12 == CFStringGetTypeID())
  {
    Value = CFDictionaryGetValue(v11, a3);
    valuePtr = Value;
    if (Value)
    {
      v14 = bswap32(Value);
      v15 = CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), v14, BYTE1(v14), BYTE2(v14), HIBYTE(v14));
      a2 = CFSTR("itsk");
      goto LABEL_17;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigiTunesMetadataCreateNewItem(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  const __CFAllocator *v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;

  v9 = CFGetAllocator(a1);
  if (a4)
    MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, a4);
  else
    MutableCopy = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = MutableCopy;
  if (!MutableCopy)
    return FigSignalErrorAt();
  CFDictionarySetValue(MutableCopy, CFSTR("value"), a3);
  CFDictionarySetValue(v11, CFSTR("keyspace"), a2);
  *a5 = v11;
  return 0;
}

uint64_t FigiTunesMetadataSerializerCreateBBuf(const void *a1, CMBlockBufferRef *a2)
{
  const __CFDictionary **DerivedStorage;
  const __CFDictionary **v5;
  const __CFDictionary *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  CMBlockBufferRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t appended;
  uint64_t v13;
  CFAllocatorRef *v14;
  uint64_t BytesFromCFString;
  void *v16;
  uint64_t v17;
  CFDictionaryRef *v18;
  _OWORD v20[3];
  uint64_t v21;
  CMBlockBufferRef blockBufferOut;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  __int128 context;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v21 = 0;
  blockBufferOut = 0;
  memset(v20, 0, sizeof(v20));
  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v8 = FigSignalErrorAt();
    v9 = 0;
    goto LABEL_34;
  }
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = *DerivedStorage;
  if ((!v6 || !CFDictionaryGetCount(v6)) && !v5[1] && !*((_DWORD *)v5 + 4) && !*((_DWORD *)v5 + 5))
  {
    v9 = 0;
    v8 = 0;
    goto LABEL_34;
  }
  v7 = CFGetAllocator(a1);
  v8 = CMBlockBufferCreateEmpty(v7, 8u, 0, &blockBufferOut);
  v9 = blockBufferOut;
  if ((_DWORD)v8)
  {
LABEL_41:
    if (v9)
      CFRelease(v9);
    return v8;
  }
  v10 = FigAtomWriterInitWithBlockBuffer();
  if ((_DWORD)v10)
  {
    v8 = v10;
    v9 = blockBufferOut;
    goto LABEL_41;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  appended = FigAtomWriterBeginAtom();
  if (!(_DWORD)appended)
  {
    appended = FigAtomWriterAppendVersionAndFlags();
    if (!(_DWORD)appended)
    {
      v24 = 0;
      memset(v23, 0, sizeof(v23));
      appended = FigAtomWriterInitWithParent();
      if (!(_DWORD)appended)
      {
        v25 = 0;
        context = 0uLL;
        *(_QWORD *)&v27 = 0;
        WORD4(v27) = 0;
        v13 = CMBaseObjectGetDerivedStorage();
        DWORD2(context) = 1919509613;
        appended = FigAtomWriterBeginAtom();
        if (!(_DWORD)appended)
        {
          v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
          if (*(_QWORD *)(v13 + 8))
          {
            BytesFromCFString = FigCreateBytesFromCFString();
            if (!BytesFromCFString)
            {
              v8 = FigSignalErrorAt();
              if ((_DWORD)v8)
                goto LABEL_33;
              goto LABEL_25;
            }
            v16 = (void *)BytesFromCFString;
          }
          else
          {
            v16 = 0;
          }
          v17 = FigAtomWriterAppendData();
          if (!(_DWORD)v17)
          {
            if (v25 < 1 || (v17 = FigAtomWriterAppendData(), !(_DWORD)v17))
              v17 = FigAtomWriterEndAtom();
          }
          v8 = v17;
          if (v16)
            CFAllocatorDeallocate(*v14, v16);
          if ((_DWORD)v8)
            goto LABEL_33;
LABEL_25:
          v18 = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
          appended = FigAtomWriterBeginAtom();
          if (!(_DWORD)appended)
          {
            v29 = 0;
            v27 = 0u;
            v28 = 0u;
            context = 0u;
            appended = FigAtomWriterInitWithParent();
            if (!(_DWORD)appended)
            {
              if (*v18)
                CFDictionaryApplyFunction(*v18, (CFDictionaryApplierFunction)FigiTunesMetadataWriteItemAtom, &context);
              appended = FigAtomWriterEndAtom();
              if (!(_DWORD)appended)
              {
                appended = FigMetadataWriteFreeAtom((uint64_t)v20, (uint64_t)v23, *(unsigned int *)(v11 + 16), *(unsigned int *)(v11 + 20));
                if (!(_DWORD)appended)
                  appended = FigAtomWriterEndAtom();
              }
            }
          }
        }
      }
    }
  }
  v8 = appended;
LABEL_33:
  v9 = blockBufferOut;
LABEL_34:
  if (!a2 || (_DWORD)v8)
    goto LABEL_41;
  *a2 = v9;
  return v8;
}

uint64_t FigiTunesMetadataSerializerCreateCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  _QWORD *v9;
  CFMutableDictionaryRef MutableCopy;
  CFTypeRef v11;
  const void *v13;

  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v7 = FigSignalErrorAt();
    v8 = 0;
    if (!a3)
      goto LABEL_13;
    goto LABEL_10;
  }
  if (a3)
  {
    v6 = DerivedStorage;
    v7 = FigMetadataSerializerCreateForiTunes((uint64_t)a1, &v13);
    v8 = v13;
    if ((_DWORD)v7)
      goto LABEL_13;
    v9 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)v6)
      MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)v6);
    else
      MutableCopy = 0;
    *v9 = MutableCopy;
    v11 = *(CFTypeRef *)(v6 + 8);
    if (v11)
      v11 = CFRetain(v11);
    v7 = 0;
    v9[1] = v11;
    v9[2] = *(_QWORD *)(v6 + 16);
    v8 = v13;
LABEL_10:
    if (!(_DWORD)v7)
    {
      *a3 = v8;
      return v7;
    }
LABEL_13:
    if (v8)
      CFRelease(v8);
    return v7;
  }
  return FigSignalErrorAt();
}

void FigiTunesMetadataWriteItemAtom(const __CFString *a1, CFTypeRef cf)
{
  CFTypeID v4;
  CFTypeID TypeID;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFIndex v8;
  const __CFDictionary *v9;
  CFIndex Length;
  int appended;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  uint64_t BytesFromCFString;
  void *v16;
  int v17;
  int v18;
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  CFRange result;
  CFRange v23;
  CFRange v24;

  v4 = CFGetTypeID(cf);
  TypeID = CFDictionaryGetTypeID();
  ValueAtIndex = (const __CFDictionary *)cf;
  if (v4 != TypeID)
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
  if (CFEqual(Value, CFSTR("itsk")))
  {
    LODWORD(result.location) = 0;
    FigiTunesMetadataShortStringKeyToOSTypeKey(a1, (unsigned int *)&result);
    if (FigAtomWriterBeginAtom() || FigAtomWriterInitWithParent())
      return;
    goto LABEL_6;
  }
  if (!CFEqual(Value, CFSTR("itlk")))
  {
    FigSignalErrorAt();
    return;
  }
  if (FigAtomWriterBeginAtom() || FigAtomWriterInitWithParent())
    return;
  if (CFStringHasPrefix(a1, CFSTR("com.apple.iTunes.")))
  {
    result.location = 0;
    result.length = 0;
    Length = CFStringGetLength(a1);
    v21 = 0;
    v23.location = 0;
    v23.length = Length;
    if (CFStringFindWithOptions(a1, CFSTR("."), v23, 4uLL, &result))
    {
      appended = FigAtomWriterBeginAtom();
      if (!appended)
      {
        appended = FigAtomWriterAppendVersionAndFlags();
        if (!appended)
        {
          strlen(FigiTunesMetadataWriteMeaningAndNameAtoms_longMeaning);
          appended = FigAtomWriterAppendData();
          if (!appended)
          {
            appended = FigAtomWriterEndAtom();
            if (!appended)
            {
              appended = FigAtomWriterBeginAtom();
              if (!appended)
              {
                appended = FigAtomWriterAppendVersionAndFlags();
                if (!appended)
                {
                  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  v24.location = result.location + 1;
                  v24.length = Length + ~result.location;
                  v13 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v24);
                  if (v13)
                  {
                    v14 = v13;
                    BytesFromCFString = FigCreateBytesFromCFString();
                    if (BytesFromCFString)
                    {
                      v16 = (void *)BytesFromCFString;
                      v17 = FigAtomWriterAppendData();
                      CFAllocatorDeallocate(v12, v16);
                      if (v17)
                        goto LABEL_32;
                      v18 = FigAtomWriterEndAtom();
                    }
                    else
                    {
                      v18 = FigSignalErrorAt();
                    }
                    v17 = v18;
LABEL_32:
                    CFRelease(v14);
                    if (v17)
                      return;
                    goto LABEL_6;
                  }
                  appended = FigSignalErrorAt();
                }
              }
            }
          }
        }
      }
      if (appended)
        return;
    }
  }
LABEL_6:
  if (v4 == TypeID)
  {
    if (FigiTunesMetadataWriteItemDataAtom((uint64_t)v19, ValueAtIndex))
      return;
    goto LABEL_14;
  }
  if (CFArrayGetCount((CFArrayRef)cf) < 1)
  {
LABEL_14:
    FigAtomWriterEndAtom();
    return;
  }
  v8 = 0;
  while (1)
  {
    v9 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v8);
    if (v9)
    {
      if (FigiTunesMetadataWriteItemDataAtom((uint64_t)v19, v9))
        break;
    }
    if (++v8 >= CFArrayGetCount((CFArrayRef)cf))
      goto LABEL_14;
  }
}

uint64_t FigiTunesMetadataWriteItemDataAtom(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t appended;
  const void *Value;
  CFTypeID v5;
  int v6;
  CFTypeID v7;
  char v8;
  CFTypeID v9;
  CFTypeID TypeID;
  CFTypeID v12;
  const __CFAllocator *v13;
  uint64_t BytesFromCFString;
  void *v15;
  uint64_t v16;
  CFTypeID v18;
  CFTypeID v19;
  CFIndex ByteSize;
  CFTypeID v21;
  unint64_t v22;
  int v23[2];
  unsigned int v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0;
  *(_QWORD *)v23 = 0;
  appended = FigAtomWriterBeginAtom();
  if ((_DWORD)appended)
    return appended;
  Value = CFDictionaryGetValue(a2, CFSTR("value"));
  if (!FigMetadataGetNumericalDataTypeForMetadataProperties((uint64_t)CFSTR("com.apple.itunes"), a2, (uint64_t)CFSTR("com.apple.itunes"), &v24, (uint64_t *)v23))
  {
    if (v24 != 21 || !Value)
      goto LABEL_20;
    v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      v8 = v23[0];
      if (!*(_QWORD *)v23)
        goto LABEL_20;
    }
    else
    {
      v9 = CFGetTypeID(Value);
      TypeID = CFBooleanGetTypeID();
      v8 = v23[0];
      if (v9 != TypeID || *(_QWORD *)v23 == 0)
        goto LABEL_20;
    }
    if (!FigMetadataDataLengthCanHoldValue(v8, 1, (CFNumberRef)Value))
      *(_QWORD *)v23 = 0;
    goto LABEL_20;
  }
  v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID())
  {
    if (v5 == CFNumberGetTypeID() || v5 == CFBooleanGetTypeID())
    {
      v6 = 21;
      goto LABEL_13;
    }
LABEL_20:
    LOBYTE(v6) = v24;
    goto LABEL_21;
  }
  v6 = 1;
LABEL_13:
  v24 = v6;
LABEL_21:
  HIBYTE(v25) = v6;
  appended = FigAtomWriterAppendData();
  if ((_DWORD)appended)
    return appended;
  appended = FigAtomWriterAppendData();
  if ((_DWORD)appended)
    return appended;
  if (v24 > 0x19)
    goto LABEL_39;
  if (((1 << v24) & 0x2008606) == 0)
  {
    if (v24 == 21)
    {
      v18 = CFGetTypeID(Value);
      if (v18 == CFNumberGetTypeID() || (v19 = CFGetTypeID(Value), v19 == CFBooleanGetTypeID()))
      {
        ByteSize = *(_QWORD *)v23;
        if (!*(_QWORD *)v23)
          ByteSize = CFNumberGetByteSize((CFNumberRef)Value);
        v16 = 4294954709;
        switch(ByteSize)
        {
          case 1:
            LOBYTE(v22) = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt8Type, &v22))
              return FigAtomWriterEndAtom();
            goto LABEL_48;
          case 2:
            LOWORD(v22) = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt16Type, &v22))
              return FigAtomWriterEndAtom();
            LOWORD(v22) = bswap32((unsigned __int16)v22) >> 16;
            goto LABEL_48;
          case 4:
            LODWORD(v22) = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &v22))
              return FigAtomWriterEndAtom();
            LODWORD(v22) = bswap32(v22);
            goto LABEL_48;
          case 8:
            v22 = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &v22))
              return FigAtomWriterEndAtom();
            v22 = bswap64(v22);
LABEL_48:
            appended = FigAtomWriterAppendData();
            if ((_DWORD)appended)
              return appended;
            return FigAtomWriterEndAtom();
          default:
            return v16;
        }
      }
      return FigAtomWriterEndAtom();
    }
LABEL_39:
    v21 = CFGetTypeID(Value);
    if (v21 != CFDataGetTypeID())
      return FigAtomWriterEndAtom();
    CFDataGetLength((CFDataRef)Value);
    CFDataGetBytePtr((CFDataRef)Value);
    v16 = FigAtomWriterAppendData();
    if (!(_DWORD)v16)
      return FigAtomWriterEndAtom();
    return v16;
  }
  v12 = CFGetTypeID(Value);
  if (v12 != CFStringGetTypeID())
    return FigAtomWriterEndAtom();
  v22 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BytesFromCFString = FigCreateBytesFromCFString();
  if (!BytesFromCFString)
    return FigSignalErrorAt();
  v15 = (void *)BytesFromCFString;
  v16 = FigAtomWriterAppendData();
  CFAllocatorDeallocate(v13, v15);
  if (!(_DWORD)v16)
    return FigAtomWriterEndAtom();
  return v16;
}

uint64_t FigPhotoSurfacePoolCreateImageSurface()
{
  return CMPhotoSurfacePoolCreateImageSurface();
}

uint64_t FigPhotoSurfacePoolCreatePixelBuffer()
{
  return CMPhotoSurfacePoolCreatePixelBuffer();
}

uint64_t FigEndpointManagerForNeroGetShared()
{
  uint64_t v1;

  if (LoadOctaviaPlugin_sCreateOnce != -1)
    dispatch_once(&LoadOctaviaPlugin_sCreateOnce, &__block_literal_global_28);
  v1 = 0;
  if (!sFigNeroEndpointManagerGetShared)
    return 0;
  sFigNeroEndpointManagerGetShared(&v1);
  return v1;
}

uint64_t FigEndpointManagerForCameraPreviewGetShared()
{
  uint64_t v1;

  if (LoadOctaviaPlugin_sCreateOnce != -1)
    dispatch_once(&LoadOctaviaPlugin_sCreateOnce, &__block_literal_global_28);
  v1 = 0;
  if (!sFigNeroEndpointManagerForCameraPreviewGetShared)
    return 0;
  sFigNeroEndpointManagerForCameraPreviewGetShared(&v1);
  return v1;
}

uint64_t FigAssetReaderCreateWithURLAndFormatReader(const __CFAllocator *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v15;

  cf = 0;
  v15 = 0;
  FigKTraceInit();
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (!(a2 | a3) || !a6 || a2 && !FigCFURLIsLocalResource())
  {
    v12 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (a3)
  {
    v11 = FigAssetCreateWithFormatReader((uint64_t)a1, (const void *)a3, 1, 0, &cf);
    if (!(_DWORD)v11)
      goto LABEL_13;
LABEL_21:
    v12 = v11;
    goto LABEL_15;
  }
  if (a2)
  {
    v11 = FigAssetCreateWithURL((uint64_t)a1, a2, 1, 0, &cf);
    if ((_DWORD)v11)
      goto LABEL_21;
  }
LABEL_13:
  v12 = FigAssetReaderCreateWithAsset(a1, cf, a5, &v15);
  if ((_DWORD)v12)
  {
    if (v15)
      CFRelease(v15);
  }
  else
  {
    *a6 = v15;
    v15 = 0;
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t FigAssetReaderCreateWithAsset(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  int IsServerProcess;
  void *v8;
  uint64_t LoggingIdentifier;
  uint64_t Storage;
  CFMutableArrayRef Mutable;
  uint64_t v12;

  IsServerProcess = FigServer_IsServerProcess();
  FigKTraceInit();
  if (!a2 || !a4)
  {
    v12 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_17;
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (IsServerProcess)
  {
    v8 = (void *)FigOSTransactionCreate();
    if (!v8)
    {
LABEL_23:
      LoggingIdentifier = FigSignalErrorAt();
      goto LABEL_24;
    }
  }
  else
  {
    v8 = 0;
  }
  FigAssetReaderGetClassID();
  LoggingIdentifier = CMDerivedObjectCreate();
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_24;
  Storage = remakerFamily_getStorage(0);
  LoggingIdentifier = remakerFamily_generateLoggingIdentifier(82, (char *)(Storage + 41));
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_24;
  *(_DWORD *)(Storage + 456) = -1;
  *(_QWORD *)(Storage + 72) = CFRetain(a2);
  FigCFDictionaryGetBooleanIfPresent();
  if (!*(_BYTE *)(Storage + 32))
  {
    *(_QWORD *)(Storage + 56) = 0;
    if (!IsServerProcess)
    {
LABEL_15:
      Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(Storage + 80) = Mutable;
      if (Mutable)
      {
        *(_QWORD *)(Storage + 8) = FigReentrantMutexCreate();
        *(_QWORD *)(Storage + 64) = FigReentrantMutexCreate();
        remakerFamily_initializePowerLog(0);
        remakerFamily_SetRemakerState(0, 1, 0);
        v12 = 0;
        *a4 = 0;
        goto LABEL_17;
      }
      goto LABEL_23;
    }
LABEL_14:
    *(_QWORD *)(Storage + 448) = v8;
    v8 = 0;
    goto LABEL_15;
  }
  LoggingIdentifier = assetReader_ensureRemakerQueue();
  if (!(_DWORD)LoggingIdentifier)
  {
    if (!IsServerProcess)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_24:
  v12 = LoggingIdentifier;
LABEL_17:
  if (v8)
    os_release(v8);
  return v12;
}

uint64_t assetReader_ensureRemakerQueue()
{
  uint64_t Storage;
  uint64_t v1;
  uint64_t v2;

  Storage = remakerFamily_getStorage();
  if (*(_QWORD *)(Storage + 56))
    return 0;
  v1 = Storage;
  v2 = FigDispatchQueueCreateWithPriorityAndClientPID();
  *(_QWORD *)(v1 + 56) = v2;
  if (v2)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t assetReader_SetProperty(const void *a1, const void *a2, const void *a3)
{
  _DWORD *Storage;
  _DWORD *v7;
  CFTypeID v8;
  const void *v9;
  uint64_t result;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  Boolean Value;

  Storage = (_DWORD *)remakerFamily_getStorage();
  if (*Storage != 1)
    return FigSignalErrorAt();
  v7 = Storage;
  if (!CFEqual(a2, CFSTR("AssetReader_ClientSecTask")))
  {
    if (CFEqual(a2, CFSTR("AssetReader_ClientPID")))
    {
      if (a3)
      {
        v11 = CFGetTypeID(a3);
        if (v11 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 9);
          return remakerfamily_updateClientPID();
        }
      }
    }
    else if (CFEqual(a2, CFSTR("AssetReader_ThrottleForBackground")))
    {
      if (a3)
      {
        v12 = CFGetTypeID(a3);
        if (v12 == CFBooleanGetTypeID())
        {
          *((_BYTE *)v7 + 40) = CFBooleanGetValue((CFBooleanRef)a3);
          return remakerfamily_updateThrottleForBackground(a1);
        }
      }
    }
    else if (CFEqual(a2, CFSTR("AssetReader_IOPolicy")))
    {
      if (a3)
      {
        v13 = CFGetTypeID(a3);
        if (v13 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, v7 + 114);
          return remakerfamily_updateIOPolicy();
        }
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AssetReader_RealTime")))
        return 4294954512;
      if (a3)
      {
        v14 = CFGetTypeID(a3);
        if (v14 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          result = 0;
          *((_BYTE *)v7 + 32) = Value;
          return result;
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    v8 = CFGetTypeID(a3);
    if (v8 == SecTaskGetTypeID())
    {
      v9 = (const void *)*((_QWORD *)v7 + 55);
      *((_QWORD *)v7 + 55) = a3;
      CFRetain(a3);
      if (v9)
        CFRelease(v9);
      return 0;
    }
    return FigSignalErrorAt();
  }
  result = *((_QWORD *)v7 + 55);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    result = 0;
    *((_QWORD *)v7 + 55) = 0;
  }
  return result;
}

uint64_t assetReader_EnableOriginalSampleExtractionFromTrack(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return assetReader_enableOriginalSampleExtractionFromTrackCommon(a1, a2, a3, 0, a4);
}

uint64_t assetReader_EnableOriginalSampleReferenceExtractionFromTrack(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return assetReader_enableOriginalSampleExtractionFromTrackCommon(a1, a2, a3, 1, a4);
}

uint64_t assetReader_EnableDecodedAudioExtractionFromTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);

  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v14)
    return v14(a1, a2, a3, a4, a5, 0, 0, a6, a7);
  else
    return 4294954514;
}

uint64_t assetReader_EnableDecodedVideoExtractionFromTrack(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  const void *v13;
  uint64_t Storage;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v18;
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, int *);
  CFTypeID v21;
  CFTypeID v22;
  uint64_t v23;
  CMTimeEpoch epoch;
  uint64_t Count;
  uint64_t v26;
  const __CFAllocator *v27;
  __CFArray *Mutable;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  CFMutableArrayRef v32;
  CFMutableArrayRef v33;
  CFIndex v34;
  const OpaqueCMTagCollection *ValueAtIndex;
  uint64_t TagsWithCategory;
  uint64_t i;
  const __CFArray *v38;
  CFTypeID v39;
  CFTypeID v40;
  CFTypeID v41;
  __CFArray *v42;
  uint64_t v43;
  CFIndex v44;
  uint64_t v45;
  uint64_t v46;
  __CFArray *v47;
  CFTypeRef v48;
  __CFArray *v49;
  __CFArray *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  CFAllocatorRef v55;
  uint64_t j;
  CFAllocatorRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef v60;
  const __CFAllocator *v61;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v63;
  const opaqueCMFormatDescription *v64;
  const void *v65;
  const void *v66;
  BOOL v67;
  const void *v68;
  _BOOL4 v69;
  CFMutableDictionaryRef v70;
  CFMutableDictionaryRef v71;
  CFMutableDictionaryRef MutableCopy;
  const __CFAllocator *v73;
  int v74;
  int v75;
  void *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  CFIndex v81;
  uint64_t v82;
  const __CFAllocator *v83;
  const __CFAllocator *v84;
  CFMutableArrayRef v85;
  CFIndex v86;
  const __CFAllocator *v87;
  const CMBufferCallbacks *v88;
  uint64_t v89;
  const __CFAllocator *v90;
  int v91;
  int v92;
  void *v93;
  CFTypeRef v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  CFTypeRef v98;
  CFTypeRef v99;
  uint64_t SampleBufferProcessor;
  CFAllocatorRef v101;
  uint64_t FigBaseObject;
  uint64_t (*v103)(uint64_t, const __CFString *, CFAllocatorRef, const void **);
  uint64_t v104;
  CFAllocatorRef v105;
  const opaqueCMFormatDescription *v106;
  int v107;
  uint64_t v108;
  const __CFAllocator *v109;
  const __CFAllocator *v110;
  int v111;
  const void *v112;
  _QWORD *v113;
  int v114;
  int v115;
  __CFDictionary *v116;
  __CFDictionary *v117;
  const void **v118;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _DWORD *v132;
  const __CFDictionary *v133;
  unsigned int v134;
  __CFArray *v135;
  const __CFDictionary *v136;
  const __CFDictionary *v137;
  uint64_t v138;
  CFIndex v139;
  __CFDictionary *v140;
  const __CFArray *v141;
  CMTime *v142;
  const __CFDictionary *v143;
  __CFArray *v144;
  CFTypeRef v145;
  CFTypeRef v146;
  CFTypeRef v147;
  uint64_t v148;
  int TrackRotationAngle;
  __CFArray *v150;
  CFMutableArrayRef v151[2];
  __CFArray *v152;
  _BYTE v153[24];
  _BYTE v154[24];
  CMTime v155;
  CMTime v156;
  CMTimeRange v157;
  CMTime v158;
  CMTime v159;
  CMTime v160;
  CMTimeRange v161;
  CFArrayRef theArray;
  CFTypeRef cf;
  void *value;
  CFTypeRef v165;
  const void *v166;
  CFTypeRef v167;
  CFArrayRef tagCollectionsOut;
  unsigned __int8 v169;
  unsigned __int8 v170;
  const void *v171;
  __CFDictionary *theDict;
  __CFDictionary *v173;
  __CFDictionary *v174;
  const opaqueCMFormatDescription *v175;
  CFTypeRef v176;
  __int16 v177;
  int v178;
  CFTypeRef v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  CMItemCount numberOfTagsCopied;
  _BYTE tagBuffer[32];
  uint64_t v185;

  v13 = a1;
  v185 = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  v179 = 0;
  v180 = 0;
  v178 = 0;
  v177 = 0;
  v175 = 0;
  v176 = 0;
  v173 = 0;
  v174 = 0;
  v171 = 0;
  theDict = 0;
  v170 = 1;
  v169 = 0;
  v167 = 0;
  tagCollectionsOut = 0;
  v166 = 0;
  v165 = 0;
  if (*(_DWORD *)Storage != 1)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_230;
  }
  v15 = Storage;
  v16 = *(_QWORD *)(Storage + 72);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v17)
    goto LABEL_64;
  v18 = v17(v16, a2, &v179);
  if ((_DWORD)v18)
    goto LABEL_230;
  v19 = v179;
  v20 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v20)
  {
LABEL_64:
    v47 = 0;
    v48 = 0;
    v32 = 0;
    v33 = 0;
    Mutable = 0;
    v49 = 0;
    v50 = 0;
    v51 = 4294954514;
    goto LABEL_65;
  }
  v18 = v20(v19, 0, &v178);
  if ((_DWORD)v18)
    goto LABEL_230;
  if (v178 != 1635088502 && v178 != 1986618469)
    return FigSignalErrorAt();
  v21 = CFGetTypeID(v13);
  v18 = remakerFamily_copyFormatDescription(v21, (uint64_t)v179, &v175);
  if ((_DWORD)v18 || (v18 = remakerFamily_createChannel(v13, a2, v178, &v180), (_DWORD)v18))
  {
LABEL_230:
    v51 = v18;
    v47 = 0;
    v48 = 0;
    v32 = 0;
    v33 = 0;
LABEL_231:
    Mutable = 0;
    goto LABEL_153;
  }
  TrackRotationAngle = remakerFamily_getTrackRotationAngle((uint64_t)v179, (_BYTE *)&v177 + 1, &v177);
  v147 = v13;
  v148 = v15;
  v142 = a5;
  if (!a6)
  {
    v145 = a3;
    v134 = a2;
    v132 = a7;
    v133 = a4;
    v152 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    Mutable = 0;
    goto LABEL_106;
  }
  cf = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a6, CFSTR("AssetReader_MatrixHandling"), (const void **)&value)
    && CFEqual(value, CFSTR("AssetReader_PreserveMatrix")))
  {
    TrackRotationAngle = 0;
    v177 = 0;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (CFDictionaryGetValueIfPresent(a6, CFSTR("RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm"), &cf))
  {
    if (cf)
    {
      v22 = CFGetTypeID(cf);
      if (v22 == CFStringGetTypeID() && FigCFEqual() && (a5->flags & 0x1D) == 1)
      {
        v23 = v180;
        *(_BYTE *)(v180 + 49) = 1;
        epoch = a5->epoch;
        *(_OWORD *)(v23 + 328) = *(_OWORD *)&a5->value;
        *(_QWORD *)(v23 + 344) = epoch;
      }
    }
  }
  if (FigCFDictionaryGetInt32IfPresent() && *(_DWORD *)(v180 + 68))
  {
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (FigCFDictionaryGetBooleanIfPresent() && *(_BYTE *)(v180 + 121))
    FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  theArray = 0;
  if (!CFDictionaryGetValueIfPresent(a6, (const void *)*MEMORY[0x1E0CED398], (const void **)&theArray))
  {
    v145 = a3;
    v134 = a2;
    v132 = a7;
    v133 = a4;
    v152 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    Mutable = 0;
    goto LABEL_105;
  }
  if (!theArray || (Count = CFArrayGetCount(theArray), Count <= 0))
  {
    v51 = FigSignalErrorAt();
    v32 = 0;
    v33 = 0;
    Mutable = 0;
LABEL_152:
    v47 = 0;
    v48 = 0;
LABEL_153:
    v49 = 0;
    v50 = 0;
    goto LABEL_65;
  }
  v26 = Count;
  v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (!Mutable
    || CMVideoFormatDescriptionCopyTagCollectionArray(v175, &tagCollectionsOut)
    || !tagCollectionsOut
    || (v29 = CFArrayGetCount(tagCollectionsOut), v26 > v29))
  {
    v51 = FigSignalErrorAt();
    v32 = 0;
LABEL_150:
    v33 = 0;
LABEL_151:
    v13 = v147;
    goto LABEL_152;
  }
  v30 = v29;
  v145 = a3;
  v31 = v26;
  v134 = a2;
  v132 = a7;
  v133 = a4;
  v32 = CFArrayCreateMutable(v27, v29, MEMORY[0x1E0C9B378]);
  if (!v32)
  {
    v51 = FigSignalErrorAt();
    goto LABEL_150;
  }
  v136 = a6;
  v33 = CFArrayCreateMutable(v27, v30, MEMORY[0x1E0C9B378]);
  if (!v33)
  {
LABEL_224:
    TagsWithCategory = FigSignalErrorAt();
LABEL_225:
    v51 = TagsWithCategory;
    goto LABEL_151;
  }
  v34 = 0;
  *(_OWORD *)v151 = *MEMORY[0x1E0CA27F8];
  do
  {
    ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(tagCollectionsOut, v34);
    *(_OWORD *)tagBuffer = *(_OWORD *)v151;
    *(_OWORD *)&v160.value = *(_OWORD *)v151;
    numberOfTagsCopied = 0;
    TagsWithCategory = CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_VideoLayerID, (CMTag *)tagBuffer, 1, &numberOfTagsCopied);
    if ((_DWORD)TagsWithCategory)
      goto LABEL_225;
    TagsWithCategory = CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_StereoView, (CMTag *)&v160, 1, &numberOfTagsCopied);
    if ((_DWORD)TagsWithCategory)
      goto LABEL_225;
    FigTagGetSInt64Value();
    FigCFArrayAppendInt64();
    FigTagGetFlagsValue();
    FigCFArrayAppendInt64();
    ++v34;
  }
  while (v30 != v34);
  for (i = 0; i != v31; ++i)
  {
    *(_QWORD *)tagBuffer = 0;
    if (!FigCFArrayGetInt64AtIndex() || !FigCFArrayContainsInt64())
      goto LABEL_224;
  }
  v38 = theArray;
  v160.value = 0;
  if (!theArray
    || (v39 = CFGetTypeID(theArray), v39 != CFArrayGetTypeID())
    || (v40 = CFGetTypeID(v32), v40 != CFArrayGetTypeID())
    || (v41 = CFGetTypeID(v33), v41 != CFArrayGetTypeID())
    || (v42 = v33,
        v43 = CFArrayGetCount(v38),
        v44 = CFArrayGetCount(v32),
        (v152 = CFArrayCreateMutable(v27, v43, MEMORY[0x1E0C9B378])) == 0))
  {
    v13 = v147;
    v15 = v148;
    a6 = v136;
    if (!FigSignalErrorAt())
    {
LABEL_223:
      v152 = 0;
      goto LABEL_63;
    }
    goto LABEL_238;
  }
  if (v43 >= 1)
  {
    v45 = 0;
    while (1)
    {
      v182 = 0;
      numberOfTagsCopied = 0;
      if (!FigCFArrayGetInt64AtIndex())
        break;
      if (v44 >= 1)
      {
        v46 = 0;
        while (1)
        {
          v181 = 0;
          if (!FigCFArrayGetInt64AtIndex())
            goto LABEL_220;
          if (numberOfTagsCopied == v181)
            break;
          if (v44 == ++v46)
            goto LABEL_58;
        }
        FigCFArrayGetInt64AtIndex();
      }
LABEL_58:
      *(CMTag *)tagBuffer = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, numberOfTagsCopied);
      *(CMTag *)&tagBuffer[16] = CMTagMakeWithFlagsValue(kCMTagCategory_StereoView, v182);
      if (CMTagCollectionCreate(v27, (const CMTag *)tagBuffer, 2, (CMTagCollectionRef *)&v160))
        break;
      CFArrayAppendValue(v152, (const void *)v160.value);
      if (v160.value)
      {
        CFRelease((CFTypeRef)v160.value);
        v160.value = 0;
      }
      if (++v45 == v43)
        goto LABEL_62;
    }
LABEL_220:
    v130 = FigSignalErrorAt();
    v13 = v147;
    v15 = v148;
    v33 = v42;
    a6 = v136;
    if (v160.value)
      CFRelease((CFTypeRef)v160.value);
    CFRelease(v152);
    if (!v130)
      goto LABEL_223;
LABEL_238:
    v51 = FigSignalErrorAt();
    goto LABEL_152;
  }
LABEL_62:
  v13 = v147;
  v15 = v148;
  v33 = v42;
  a6 = v136;
LABEL_63:
  *(_BYTE *)(*(_QWORD *)(v180 + 152) + 160) = 1;
LABEL_105:
  FigCFDictionaryGetBooleanIfPresent();
LABEL_106:
  if (FigRemakerIsFormatDescriptionProtected(v175))
  {
    v54 = FigSignalErrorAt();
LABEL_236:
    v51 = v54;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    goto LABEL_148;
  }
  v53 = v180;
  *(_BYTE *)(v180 + 50) = 1;
  *(_BYTE *)(*(_QWORD *)(v53 + 152) + 28) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  v54 = remakerFamily_setupMultiPassTrackIfNecessary(v13, v180);
  if ((_DWORD)v54)
    goto LABEL_236;
  v55 = CFGetAllocator(v13);
  v54 = FigVisualContextCreateBasic((uint64_t)v55, 0, &v176);
  if ((_DWORD)v54)
    goto LABEL_236;
  if (*(_BYTE *)(*(_QWORD *)(v180 + 152) + 160) && v31 >= 1)
  {
    for (j = 0; j != v31; ++j)
    {
      if (j)
      {
        v57 = CFGetAllocator(v13);
        v54 = FigVisualContextCreateBasic((uint64_t)v57, 0, &v167);
        if ((_DWORD)v54)
          goto LABEL_236;
        v58 = v167;
      }
      else
      {
        if (v176)
          v58 = CFRetain(v176);
        else
          v58 = 0;
        v167 = v58;
      }
      CFArrayAppendValue(Mutable, v58);
      if (v167)
      {
        CFRelease(v167);
        v167 = 0;
      }
    }
  }
  v135 = v33;
  v137 = a6;
  if (!TrackRotationAngle && !v177)
  {
    v59 = v176;
    if (v176)
      v59 = CFRetain(v176);
    *(_QWORD *)(*(_QWORD *)(v180 + 152) + 112) = v59;
    if (v145)
      v60 = CFRetain(v145);
    else
      v60 = 0;
    v144 = 0;
    v146 = 0;
    v49 = 0;
    v171 = v60;
    goto LABEL_190;
  }
  v141 = Mutable;
  v61 = CFGetAllocator(v13);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v63 = CMBufferQueueCreate(v61, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(_QWORD *)(v180 + 152) + 72));
  if ((_DWORD)v63)
    goto LABEL_147;
  v64 = v175;
  if (!v145)
  {
    v70 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v70)
    {
      v71 = v70;
      v69 = 0;
      v67 = 0;
LABEL_142:
      FigCFDictionarySetInt32();
LABEL_143:
      if (!v69 || !v67)
      {
        CMVideoFormatDescriptionGetDimensions(v64);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
      }
      v48 = v71;
      goto LABEL_155;
    }
LABEL_146:
    v63 = FigSignalErrorAt();
LABEL_147:
    v51 = v63;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v13 = v147;
    Mutable = v141;
LABEL_148:
    v47 = v152;
    goto LABEL_65;
  }
  v65 = CFDictionaryGetValue((CFDictionaryRef)v145, (const void *)*MEMORY[0x1E0CA9040]);
  v66 = CFDictionaryGetValue((CFDictionaryRef)v145, (const void *)*MEMORY[0x1E0CA90E0]);
  v67 = v66 != 0;
  v68 = CFDictionaryGetValue((CFDictionaryRef)v145, (const void *)*MEMORY[0x1E0CA8FD8]);
  v69 = v68 != 0;
  if (!v65 || !v66 || !v68)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)v145);
    if (MutableCopy)
    {
      v71 = MutableCopy;
      if (v65)
        goto LABEL_143;
      goto LABEL_142;
    }
    goto LABEL_146;
  }
  v48 = CFRetain(v145);
  if (!v48)
    goto LABEL_146;
LABEL_155:
  v139 = v31;
  v13 = v147;
  v73 = CFGetAllocator(v147);
  v74 = HIBYTE(v177);
  v75 = v177;
  v76 = (void *)v176;
  *(CMTime *)tagBuffer = *(CMTime *)(v148 + 88);
  v160 = *(CMTime *)(v148 + 112);
  CMTimeRangeFromTimeToTime(&v161, (CMTime *)tagBuffer, &v160);
  v77 = *(_QWORD *)(*(_QWORD *)(v180 + 152) + 72);
  CMTimeMake(&v159, 1, 10);
  CMTimeMake(&v158, 1, 30);
  if (*(_BYTE *)(v148 + 32))
    v78 = 30;
  else
    v78 = 31;
  *(CMTime *)tagBuffer = *v142;
  v79 = FigMediaProcessorCreateForVideoRotation(v73, TrackRotationAngle, v74, v75, v48, 0, v76, (uint64_t)tagBuffer, (__int128 *)&v161.start.value, v77, (uint64_t)&v159, (uint64_t)&v158, 0, v78, (uint64_t *)(v180 + 232));
  if ((_DWORD)v79)
  {
    v51 = v79;
    v49 = 0;
    v50 = 0;
    Mutable = v141;
    v33 = v135;
    goto LABEL_148;
  }
  v146 = v48;
  v80 = assetReader_ensureRemakerQueue();
  v81 = v31;
  if ((_DWORD)v80)
  {
    v51 = v80;
    v49 = 0;
    v50 = 0;
LABEL_227:
    Mutable = v141;
LABEL_228:
    v33 = v135;
    goto LABEL_250;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v15 = v148;
  v82 = FigNotificationCenterAddWeakListeners();
  Mutable = v141;
  v33 = v135;
  if ((_DWORD)v82)
  {
    v51 = v82;
    v49 = 0;
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(v180 + 152) + 160))
    {
      v49 = 0;
      v144 = 0;
LABEL_187:
      SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(v180 + 232));
      v101 = CFGetAllocator(v13);
      FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
      v103 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (!v103)
      {
        v51 = 4294954514;
LABEL_204:
        v47 = v152;
        goto LABEL_205;
      }
      v104 = v103(FigBaseObject, CFSTR("SampleBufferProcessor_SourcePixelBufferAttributes"), v101, &v171);
      if ((_DWORD)v104)
      {
LABEL_234:
        v51 = v104;
        goto LABEL_204;
      }
      a6 = v137;
LABEL_190:
      v105 = CFGetAllocator(v13);
      v106 = v175;
      remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(v15 + 32), (uint64_t)v154);
      remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(v15 + 32), (uint64_t)v153);
      v104 = remakerFamily_createRenderPipelineOptions((uint64_t)v105, v106, (uint64_t)v154, (uint64_t)v153, 0, 0, *(unsigned __int8 *)(v15 + 424), 0, 0, *(_BYTE *)(v15 + 32), 0, *(_BYTE *)(v15 + 425), v15 + 41, v134, &v174);
      if (!(_DWORD)v104)
      {
        v104 = remakerFamily_createRemakerVideoDecoderSpecification(v13, (uint64_t)a6, &v173);
        if (!(_DWORD)v104)
        {
          v150 = v49;
          if (v133
            && (v107 = CFGetAllocator(v13),
                v108 = remakerFamily_createVideoPixelTransferProperties(v107, v133, 0, &theDict),
                (_DWORD)v108))
          {
            v51 = v108;
          }
          else
          {
            v109 = CFGetAllocator(v13);
            v110 = v109;
            v111 = (int)v173;
            v112 = v171;
            v113 = (_QWORD *)(v180 + 56);
            if (Mutable)
            {
              v51 = FigVideoRenderPipelineCreateWithVisualContextGroup(v109, (int)v173, v171, theDict, 1, Mutable, v152, 0, v174, (_QWORD *)(v180 + 56));
              goto LABEL_208;
            }
            v140 = theDict;
            v143 = v174;
            v138 = (uint64_t)v176;
            v114 = v169;
            v115 = *(unsigned __int8 *)(v180 + 120);
            v116 = CFDictionaryCreateMutable(v109, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v116)
            {
              v117 = v116;
              v118 = (const void **)MEMORY[0x1E0C9AE50];
              if (v114)
                CFDictionarySetValue(v116, CFSTR("EnsureModifiableImageBuffers"), (const void *)*MEMORY[0x1E0C9AE50]);
              if (v115)
                CFDictionarySetValue(v117, CFSTR("LimitImageQueueCapacityToOneFrame"), *v118);
              if (CFDictionaryGetCount(v117))
              {
                v51 = FigVideoRenderPipelineCreateWithVisualContext(v110, v111, v112, v140, 1, v138, v117, v143, v113);
                CFRelease(v117);
              }
              else
              {
                CFRelease(v117);
                v51 = FigVideoRenderPipelineCreateWithVisualContext(v110, v111, v112, v140, 1, v138, 0, v143, v113);
              }
              goto LABEL_207;
            }
            v131 = FigSignalErrorAt();
            if (!(_DWORD)v131)
            {
              v51 = FigVideoRenderPipelineCreateWithVisualContext(v110, v111, v112, v140, 1, v138, 0, v143, v113);
              v13 = v147;
LABEL_207:
              Mutable = 0;
              v15 = v148;
LABEL_208:
              v33 = v135;
              v49 = v150;
              v50 = v144;
              if (!(_DWORD)v51)
              {
                if (v137)
                  v119 = CFDictionaryGetValue(v137, CFSTR("AssetReader_FieldMode"));
                else
                  v119 = 0;
                v120 = remakerFamily_setVideoRenderPipelineProperties((int)v13, v180, v170, 0, v175, v119, *(unsigned __int8 *)(v15 + 32), *(unsigned __int8 *)(v15 + 425), theDict);
                if (!(_DWORD)v120)
                {
                  v120 = assetReader_ensureRemakerQueue();
                  if (!(_DWORD)v120)
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    v120 = FigNotificationCenterAddWeakListeners();
                    if (!(_DWORD)v120)
                    {
                      v121 = v180;
                      v122 = remakerFamily_getStorage(v13);
                      v123 = *(_DWORD *)(v122 + 152) + 1;
                      *(_DWORD *)(v122 + 152) = v123;
                      *(_DWORD *)(v121 + 300) = v123;
                      v124 = v180;
                      v125 = *(_QWORD *)(v180 + 152);
                      *(_QWORD *)(v125 + 152) = v152;
                      *(_QWORD *)(v125 + 120) = Mutable;
                      v126 = MEMORY[0x1E0CA2E18];
                      *(_OWORD *)(v125 + 164) = *MEMORY[0x1E0CA2E18];
                      *(_QWORD *)(v125 + 180) = *(_QWORD *)(v126 + 16);
                      *(_QWORD *)(v124 + 240) = v150;
                      v127 = *(_QWORD *)(v124 + 152);
                      *(_QWORD *)(v127 + 128) = v144;
                      v48 = v146;
                      if (*(_QWORD *)(v127 + 72))
                      {
                        v128 = assetReaderTrack_setUpOutputBufferQueueSemaphore(v127);
                        if (!(_DWORD)v128)
                        {
LABEL_217:
                          v129 = v180;
                          *v132 = *(_DWORD *)(v180 + 300);
                          remakerFamily_commitChannel((uint64_t)v13, v129);
                          v47 = 0;
                          v51 = 0;
                          Mutable = 0;
                          v49 = 0;
                          v50 = 0;
                          v180 = 0;
                          goto LABEL_65;
                        }
                      }
                      else
                      {
                        v128 = assetReaderTrack_setUpOutputVisualContextSemaphore(v127);
                        if (!(_DWORD)v128)
                          goto LABEL_217;
                      }
                      v51 = v128;
                      v47 = 0;
                      goto LABEL_231;
                    }
                  }
                }
                v51 = v120;
              }
              goto LABEL_250;
            }
            v51 = v131;
            Mutable = 0;
            v13 = v147;
          }
          v33 = v135;
          v49 = v150;
          v47 = v152;
LABEL_205:
          v50 = v144;
          v48 = v146;
          goto LABEL_65;
        }
      }
      goto LABEL_234;
    }
    v83 = CFGetAllocator(v147);
    v49 = CFArrayCreateMutable(v83, v31, MEMORY[0x1E0C9B378]);
    if (v49)
    {
      v84 = CFGetAllocator(v147);
      v85 = CFArrayCreateMutable(v84, v139, MEMORY[0x1E0C9B378]);
      v50 = v85;
      if (v85)
      {
        v144 = v85;
        if (v139 >= 1)
        {
          v86 = 0;
          while (1)
          {
            if (v86)
            {
              v87 = CFGetAllocator(v13);
              v88 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              v89 = CMBufferQueueCreate(v87, 0, v88, (CMBufferQueueRef *)&v165);
              if ((_DWORD)v89)
                goto LABEL_226;
              v90 = CFGetAllocator(v13);
              v91 = HIBYTE(v177);
              v92 = v177;
              v93 = (void *)CFArrayGetValueAtIndex(v141, v86);
              *(CMTime *)tagBuffer = *(CMTime *)(v148 + 88);
              v160 = *(CMTime *)(v148 + 112);
              CMTimeRangeFromTimeToTime(&v157, (CMTime *)tagBuffer, &v160);
              v94 = v165;
              CMTimeMake(&v156, 1, 10);
              CMTimeMake(&v155, 1, 30);
              if (*(_BYTE *)(v148 + 32))
                v95 = 30;
              else
                v95 = 31;
              *(CMTime *)tagBuffer = *v142;
              v96 = FigMediaProcessorCreateForVideoRotation(v90, TrackRotationAngle, v91, v92, v146, 0, v93, (uint64_t)tagBuffer, (__int128 *)&v157.start.value, (uint64_t)v94, (uint64_t)&v156, (uint64_t)&v155, 0, v95, (uint64_t *)&v166);
              if ((_DWORD)v96)
              {
                v51 = v96;
                v48 = v146;
                v13 = v147;
                v33 = v135;
                v47 = v152;
                Mutable = v141;
                v50 = v144;
                goto LABEL_65;
              }
              CMNotificationCenterGetDefaultLocalCenter();
              v89 = FigNotificationCenterAddWeakListeners();
              v13 = v147;
              v81 = v139;
              v50 = v144;
              if ((_DWORD)v89)
              {
LABEL_226:
                v51 = v89;
                goto LABEL_227;
              }
            }
            else
            {
              v97 = v180;
              v98 = *(CFTypeRef *)(v180 + 232);
              if (v98)
              {
                v98 = CFRetain(v98);
                v97 = v180;
              }
              v166 = v98;
              v99 = *(CFTypeRef *)(*(_QWORD *)(v97 + 152) + 72);
              if (v99)
                v99 = CFRetain(v99);
              v165 = v99;
            }
            CFArrayAppendValue(v49, v166);
            if (v166)
            {
              CFRelease(v166);
              v166 = 0;
            }
            CFArrayAppendValue(v50, v165);
            if (v165)
            {
              CFRelease(v165);
              v165 = 0;
            }
            if (v81 == ++v86)
            {
              Mutable = v141;
              v33 = v135;
              v15 = v148;
              goto LABEL_187;
            }
          }
        }
        v33 = v135;
        goto LABEL_187;
      }
      v51 = FigSignalErrorAt();
      goto LABEL_228;
    }
    v51 = FigSignalErrorAt();
  }
  v50 = 0;
LABEL_250:
  v47 = v152;
  v48 = v146;
LABEL_65:
  remakerFamily_discardChannel((uint64_t)v13, v180);
  if (v179)
    CFRelease(v179);
  if (v176)
    CFRelease(v176);
  if (v175)
    CFRelease(v175);
  if (v174)
    CFRelease(v174);
  if (v173)
    CFRelease(v173);
  if (theDict)
    CFRelease(theDict);
  if (v171)
    CFRelease(v171);
  if (v48)
    CFRelease(v48);
  if (v167)
    CFRelease(v167);
  if (v166)
    CFRelease(v166);
  if (v165)
    CFRelease(v165);
  if (v47)
    CFRelease(v47);
  if (tagCollectionsOut)
    CFRelease(tagCollectionsOut);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (Mutable)
    CFRelease(Mutable);
  if (v49)
    CFRelease(v49);
  if (v50)
    CFRelease(v50);
  return v51;
}

uint64_t assetReader_EnableReencodedAudioExtractionFromTrack()
{
  return 0;
}

uint64_t assetReader_EnableReencodedAudioExtractionWithPresetFromTrack()
{
  return 0;
}

uint64_t assetReader_EnableReencodedVideoExtractionFromTrack()
{
  return 0;
}

uint64_t assetReader_EnableVideoCompositionExtraction(const void *a1, const __CFArray *a2, const __CFString *a3, const void *a4, const void *a5, int a6, const __CFArray *a7, uint64_t a8, const void *a9, __int128 *a10, __int128 a11, int32_t a12, void *a13, const __CFDictionary *a14, CMVideoCodecType a15, const __CFDictionary *a16, const __CFDictionary *a17, uint64_t a18, uint64_t a19, const __CFDictionary *a20,_DWORD *a21)
{
  __int128 v22;
  uint64_t v23;

  v22 = *a10;
  v23 = *((_QWORD *)a10 + 2);
  return assetReader_EnableVideoCompositionExtraction3(a1, a2, 0, 0, 0, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&v22, a11, SDWORD1(a11), SDWORD2(a11), SHIDWORD(a11), a12, a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a17,
           a20,
           a21);
}

uint64_t assetReader_EnableAudioMixdownExtraction(const void *a1, const __CFArray *a2, AudioStreamBasicDescription *a3, size_t a4, const AudioChannelLayout *a5, uint64_t a6, const __CFDictionary *a7, uint64_t a8, _DWORD *a9)
{
  _DWORD *Storage;
  _DWORD *v16;
  int64_t Count;
  intptr_t *v18;
  const __CFAllocator *v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const __CFAllocator *v31;
  CFIndex v32;
  intptr_t *v33;
  const __CFDictionary *ValueAtIndex;
  const void *v35;
  const void *v36;
  const __CFAllocator *v37;
  const void *v38;
  const __CFString *v39;
  const void *v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t FigBaseObject;
  uint64_t (*v44)(uint64_t, const __CFString *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  intptr_t *v48;
  intptr_t v49;
  uint64_t AudioMixdownSourceTrack;
  uint64_t v52;
  const __CFString *Value;
  void *values;
  unsigned int v56;
  CMTime v57;
  CMTime v58;
  const void *v59;
  const void *v60;
  CMAudioFormatDescriptionRef formatDescriptionOut;
  uint64_t v62;

  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  formatDescriptionOut = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  if (*Storage != 1 || !a2 || !a3 || !a3->mChannelsPerFrame || a3->mSampleRate == 0.0 || a3->mFormatID != 1819304813)
  {
    AudioMixdownSourceTrack = FigSignalErrorAt();
    remakerFamily_discardChannel((uint64_t)a1, 0);
    goto LABEL_55;
  }
  v16 = Storage;
  Count = CFArrayGetCount(a2);
  v18 = (intptr_t *)malloc_type_calloc(8uLL, Count, 0x6F266690uLL);
  if (a7)
    Value = (const __CFString *)CFDictionaryGetValue(a7, CFSTR("RemakerFamilyAudioProcessingOption_TimePitchAlgorithm"));
  else
    Value = 0;
  v19 = CFGetAllocator(a1);
  v20 = CMAudioFormatDescriptionCreate(v19, a3, a4, a5, 0, 0, 0, &formatDescriptionOut);
  if ((_DWORD)v20)
    goto LABEL_48;
  v20 = remakerFamily_createChannel(a1, 0, 1936684398, &v62);
  if ((_DWORD)v20)
    goto LABEL_48;
  v21 = v62;
  *(_BYTE *)(v62 + 48) = 0;
  *(_BYTE *)(v21 + 50) = 1;
  v22 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v20 = CMBufferQueueCreate(v22, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v62 + 208));
  if ((_DWORD)v20)
    goto LABEL_48;
  v24 = CFRetain(*(CFTypeRef *)(v62 + 208));
  v25 = v62;
  *(_QWORD *)(*(_QWORD *)(v62 + 152) + 72) = v24;
  v26 = *(_QWORD *)(v25 + 208);
  CMTimeMake(&v58, 2, 1);
  CMTimeMake(&v57, 1, 1);
  v20 = FigSampleBufferConsumerCreateForBufferQueue(v26, (uint64_t)&v58, (uint64_t)&v57, &v60);
  if ((_DWORD)v20)
    goto LABEL_48;
  v27 = *((_BYTE *)v16 + 32) ? 30 : 0;
  v20 = FigActivitySchedulerCreateForNewThread(*MEMORY[0x1E0C9AE00], v27, CFSTR("com.apple.coremedia.readerOfflineMixer"), &v59);
  if ((_DWORD)v20)
    goto LABEL_48;
  v20 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v62);
  if ((_DWORD)v20)
    goto LABEL_48;
  v28 = v62;
  v29 = remakerFamily_getStorage(a1);
  v30 = *(_DWORD *)(v29 + 152) + 1;
  *(_DWORD *)(v29 + 152) = v30;
  *(_DWORD *)(v28 + 300) = v30;
  v31 = CFGetAllocator(a1);
  v20 = FigAudioQueueOfflineMixerCreate(v31, (__int128 *)a3, a4, a5, 0, v60, v59, (uint64_t *)(v62 + 200));
  if ((_DWORD)v20)
    goto LABEL_48;
  v20 = assetReader_ensureRemakerQueue();
  if ((_DWORD)v20)
    goto LABEL_48;
  CMNotificationCenterGetDefaultLocalCenter();
  v20 = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)v20)
    goto LABEL_48;
  if (Count < 1)
  {
LABEL_47:
    v20 = FigSignalErrorAt();
LABEL_48:
    AudioMixdownSourceTrack = v20;
    goto LABEL_50;
  }
  v52 = 0;
  v32 = 0;
  v33 = v18;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v32);
    v56 = 0;
    values = 0;
    if (!FigCFDictionaryGetInt32IfPresent())
    {
      v45 = FigSignalErrorAt();
LABEL_63:
      AudioMixdownSourceTrack = v45;
      goto LABEL_50;
    }
    v35 = CFDictionaryGetValue(ValueAtIndex, CFSTR("AssetReaderSource_AudioCurves"));
    if (!v35 || (v36 = CFRetain(v35)) == 0)
    {
      values = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("AssetReaderSource_AudioVolumeCurve"));
      if (values)
      {
        v37 = CFGetAllocator(a1);
        v36 = CFDictionaryCreate(v37, (const void **)kFigAudioCurvesKey_Volume, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v36)
        {
          AudioMixdownSourceTrack = 4294954510;
          goto LABEL_50;
        }
      }
      else
      {
        v36 = 0;
      }
    }
    v38 = CFDictionaryGetValue(ValueAtIndex, CFSTR("AssetReaderSource_AudioProcessingTap"));
    v39 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("RemakerFamilyAudioProcessingOption_TimePitchAlgorithmSourceTrack"));
    v40 = CFDictionaryGetValue(ValueAtIndex, CFSTR("AssetReaderSource_CinematicAudioParameters"));
    if (v39)
      v41 = v39;
    else
      v41 = Value;
    AudioMixdownSourceTrack = remakerFamily_createAudioMixdownSourceTrack(a1, v56, v36, v38, v40, v41, a8, formatDescriptionOut, v33);
    if (v36)
      CFRelease(v36);
    if ((_DWORD)AudioMixdownSourceTrack != -12138)
    {
      if ((_DWORD)AudioMixdownSourceTrack)
        goto LABEL_50;
      v42 = *(_QWORD *)(v62 + 200);
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*v33 + 56));
      v44 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (!v44)
      {
        AudioMixdownSourceTrack = 4294954514;
        goto LABEL_50;
      }
      v45 = v44(FigBaseObject, CFSTR("OfflineMixer"), v42);
      if ((_DWORD)v45)
        goto LABEL_63;
      *(_DWORD *)(*v33 + 304) = *(_DWORD *)(v62 + 300);
      ++v52;
    }
    ++v32;
    ++v33;
  }
  while (Count != v32);
  if (v52 <= 0)
    goto LABEL_47;
  v20 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(_QWORD *)(v62 + 152));
  if ((_DWORD)v20)
    goto LABEL_48;
  *a9 = *(_DWORD *)(v62 + 300);
  v46 = v18;
  v47 = Count;
  do
  {
    remakerFamily_commitChannel((uint64_t)a1, *v46);
    *v46++ = 0;
    --v47;
  }
  while (v47);
  remakerFamily_commitChannel((uint64_t)a1, v62);
  AudioMixdownSourceTrack = 0;
  v62 = 0;
LABEL_50:
  remakerFamily_discardChannel((uint64_t)a1, v62);
  if (v18)
  {
    if (Count >= 1)
    {
      v48 = v18;
      do
      {
        v49 = *v48++;
        remakerFamily_discardChannel((uint64_t)a1, v49);
        --Count;
      }
      while (Count);
    }
    free(v18);
  }
LABEL_55:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (v60)
    CFRelease(v60);
  if (v59)
    CFRelease(v59);
  return AudioMixdownSourceTrack;
}

uint64_t assetReader_StartExtractionForTimeRange(const void *a1, __int128 *a2, uint64_t a3)
{
  uint64_t Storage;
  __int128 v7;
  uint64_t v8;

  Storage = remakerFamily_getStorage(a1);
  v7 = *a2;
  *(_QWORD *)(Storage + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(Storage + 88) = v7;
  v8 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(Storage + 112) = *(_OWORD *)a3;
  *(_QWORD *)(Storage + 128) = v8;
  *(_BYTE *)(Storage + 136) = 0;
  return assetReader_startExtractionForTimeRangeCommon(a1);
}

uint64_t assetReader_ExtractAndRetainNextSampleBuffer(const void *a1, int a2, int a3, _BYTE *a4, CFTypeRef *a5)
{
  _DWORD *Storage;
  uint64_t TaggedBufferGroupSampleBuffer;
  uint64_t EarliestSequentialImageTime;
  const void *v13;
  uint64_t ChannelByExtractionID;
  uint64_t v15;
  opaqueCMBufferQueue *v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  opaqueCMSampleBuffer *Head;
  uint64_t v22;
  CMTimeEpoch v23;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFIndex v27;
  const void *ValueAtIndex;
  uint64_t v29;
  Boolean v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, const __CFAllocator *, CMTime *, uint64_t, __CVBuffer **, _QWORD, _QWORD);
  const __CFAllocator *v33;
  __CVBuffer *v34;
  const opaqueCMFormatDescription *v35;
  CFTypeRef *v36;
  opaqueCMSampleBuffer *v37;
  CMTimeEpoch v38;
  CMItemCount v39;
  uint64_t SampleTimingInfoArray;
  CMSampleTimingInfo *v41;
  uint64_t v42;
  CVPixelBufferRef CVPixelBufferAtIndex;
  CMBlockBufferRef DataBuffer;
  uint64_t v45;
  const void *v46;
  VTPixelTransferSessionRef *v47;
  const __CFAllocator *v48;
  uint64_t PixelBuffer;
  const __CFAllocator *v50;
  uint64_t v51;
  const opaqueCMFormatDescription *v52;
  CMVideoFormatDescriptionRef *v53;
  const __CFArray *v54;
  uint64_t v55;
  CMBlockBufferRef v56;
  const __CFAllocator *v57;
  const __CFAllocator *v58;
  size_t DataLength;
  uint64_t v60;
  size_t *sampleSizeArray;
  uint64_t v62;
  __CFArray *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t SampleBufferProcessor;
  CFAllocatorRef v67;
  uint64_t FigBaseObject;
  void (*v69)(uint64_t, const __CFString *, CFAllocatorRef, CVPixelBufferPoolRef *);
  uint64_t v70;
  CFAllocatorRef v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v76;
  const __CFArray *Value;
  const __CFArray *v78;
  CFTypeID v79;
  CFIndex v80;
  CFIndex v81;
  uint64_t v82;
  const __CFAllocator *v83;
  uint64_t v84;
  uint64_t v85;
  const __CFAllocator *v86;
  CMBlockBufferRef v87;
  const opaqueCMFormatDescription *FormatDescription;
  OpaqueCMBlockBuffer *v89;
  uint64_t v90;
  __CFArray *Mutable;
  CFIndex v92;
  CVPixelBufferRef v93;
  const __CFAllocator *v94;
  uint64_t v95;
  uint64_t v96;
  opaqueCMSampleBuffer *v97;
  CFArrayRef SampleAttachmentsArray;
  const __CFArray *v99;
  CFArrayRef v100;
  const __CFArray *v101;
  CFIndex v102;
  const __CFDictionary *v103;
  void *v104;
  const __CFDictionary *v106;
  const __CFAllocator *v107;
  const __CFDictionary *v108;
  IOSurfaceRef IOSurface;
  OSType PixelFormatType;
  uint64_t v111;
  CMSampleBufferRef sbuf;
  opaqueCMSampleBuffer *sbufa;
  CMTimeEpoch v114;
  _BYTE *v115;
  _QWORD *v116;
  __int128 v117;
  CMSampleTimingInfo *sampleTimingArray;
  OpaqueCMTaggedBufferGroup *group;
  CVPixelBufferPoolRef *poolOut;
  CVPixelBufferPoolRef *poolOuta;
  CMItemCount numSamples[2];
  CMItemCount numSamplesa;
  CMSampleTimingInfo sampleTiming;
  CFTypeRef cf;
  __CVBuffer *v126;
  CMTime time2;
  CMTime v128;
  CMTime time1;
  CFTypeRef v130;
  CMSampleBufferRef sampleBufferOut;
  CMItemCount sizeArrayEntriesNeededOut;
  CMItemCount timingArrayEntriesNeededOut;
  CMBlockBufferRef blockBufferOut;
  CVPixelBufferRef pixelBufferOut[2];

  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  v126 = 0;
  cf = 0;
  if (*Storage != 3 || (ChannelByExtractionID = assetReader_getChannelByExtractionID((uint64_t)a1, a2)) == 0)
  {
LABEL_2:
    TaggedBufferGroupSampleBuffer = FigSignalErrorAt();
LABEL_3:
    EarliestSequentialImageTime = TaggedBufferGroupSampleBuffer;
    goto LABEL_4;
  }
  v15 = ChannelByExtractionID;
  v16 = *(opaqueCMBufferQueue **)(ChannelByExtractionID + 72);
  if (!v16)
  {
    *(_OWORD *)numSamples = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v128.value = *MEMORY[0x1E0CA2E18];
    v23 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v128.epoch = v23;
    LOBYTE(pixelBufferOut[0]) = 0;
    EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
    if ((_DWORD)EarliestSequentialImageTime)
    {
LABEL_52:
      *(_DWORD *)(v15 + 64) = 0;
      goto LABEL_4;
    }
    while (1)
    {
      EarliestSequentialImageTime = Storage[5];
      if ((_DWORD)EarliestSequentialImageTime)
        goto LABEL_4;
      EarliestSequentialImageTime = FigVisualContextGetEarliestSequentialImageTime(*(_QWORD *)(v15 + 112), 0, (uint64_t)&v128, (uint64_t)pixelBufferOut);
      if (!(_DWORD)EarliestSequentialImageTime)
        break;
LABEL_48:
      if ((_DWORD)EarliestSequentialImageTime != -12813)
        goto LABEL_4;
      v19 = (char)pixelBufferOut[0];
      if (!a3 || LOBYTE(pixelBufferOut[0]))
        goto LABEL_87;
      FigSemaphoreWaitRelative();
      EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
      if ((_DWORD)EarliestSequentialImageTime)
        goto LABEL_52;
    }
    if (*(_BYTE *)(v15 + 160))
    {
      *(_OWORD *)&sampleTiming.duration.value = *(_OWORD *)numSamples;
      sampleTiming.duration.epoch = v23;
      v24 = *(const __CFArray **)(v15 + 120);
      if (v24)
      {
        Count = CFArrayGetCount(v24);
        if (Count >= 2)
        {
          v26 = Count;
          v27 = 1;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 120), v27);
            if (!ValueAtIndex)
              goto LABEL_2;
            v29 = FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, (uint64_t)&sampleTiming, (uint64_t)pixelBufferOut);
            if ((_DWORD)v29)
            {
              EarliestSequentialImageTime = v29;
              goto LABEL_48;
            }
            time1 = v128;
            time2 = sampleTiming.duration;
            if (CMTimeCompare(&time1, &time2))
            {
              FigSignalErrorAt();
              EarliestSequentialImageTime = 0;
              goto LABEL_4;
            }
          }
          while (v26 != ++v27);
        }
      }
    }
    v19 = (char)pixelBufferOut[0];
    if (!a5)
      goto LABEL_87;
    memset(&sampleTiming, 0, sizeof(sampleTiming));
    if (*(_BYTE *)(v15 + 160))
    {
      time1 = v128;
      TaggedBufferGroupSampleBuffer = assetReader_createTaggedBufferGroupSampleBuffer(v15, (uint64_t)&time1);
      if (!(_DWORD)TaggedBufferGroupSampleBuffer)
        goto LABEL_87;
      goto LABEL_3;
    }
    v31 = *(_QWORD *)(v15 + 112);
    time2 = v128;
    v32 = *(uint64_t (**)(uint64_t, const __CFAllocator *, CMTime *, uint64_t, __CVBuffer **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v32)
    {
      EarliestSequentialImageTime = 4294954514;
      goto LABEL_4;
    }
    v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time1 = time2;
    TaggedBufferGroupSampleBuffer = v32(v31, v33, &time1, 3, &v126, 0, 0);
    if ((_DWORD)TaggedBufferGroupSampleBuffer)
      goto LABEL_3;
    v34 = v126;
    if (!v126)
    {
LABEL_74:
      sampleTiming.presentationTimeStamp = v128;
      *(_OWORD *)&sampleTiming.decodeTimeStamp.value = *(_OWORD *)numSamples;
      sampleTiming.decodeTimeStamp.epoch = v23;
      *(_OWORD *)&sampleTiming.duration.value = *(_OWORD *)numSamples;
      sampleTiming.duration.epoch = v23;
      if (v34)
      {
        TaggedBufferGroupSampleBuffer = CMSampleBufferCreateForImageBuffer(v33, v34, 1u, 0, 0, *(CMVideoFormatDescriptionRef *)(v15 + 192), &sampleTiming, (CMSampleBufferRef *)&cf);
        if (!(_DWORD)TaggedBufferGroupSampleBuffer)
          goto LABEL_87;
        goto LABEL_3;
      }
      TaggedBufferGroupSampleBuffer = CMSampleBufferCreate(v33, 0, 1u, 0, 0, 0, 0, 1, &sampleTiming, 0, 0, (CMSampleBufferRef *)&cf);
      if ((_DWORD)TaggedBufferGroupSampleBuffer)
        goto LABEL_3;
      CMSetAttachment(cf, (CFStringRef)*MEMORY[0x1E0CA2678], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      goto LABEL_87;
    }
    v36 = (CFTypeRef *)(v15 + 192);
    v35 = *(const opaqueCMFormatDescription **)(v15 + 192);
    if (v35)
    {
      if (CMVideoFormatDescriptionMatchesImageBuffer(v35, v126))
      {
LABEL_73:
        v34 = v126;
        goto LABEL_74;
      }
      if (*v36)
      {
        CFRelease(*v36);
        *v36 = 0;
      }
    }
    TaggedBufferGroupSampleBuffer = CMVideoFormatDescriptionCreateForImageBuffer(v33, v126, (CMVideoFormatDescriptionRef *)(v15 + 192));
    if ((_DWORD)TaggedBufferGroupSampleBuffer)
      goto LABEL_3;
    goto LABEL_73;
  }
  EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
  if (a3)
  {
    v13 = 0;
    if (!(_DWORD)EarliestSequentialImageTime)
    {
      v17 = MEMORY[0x1E0CA2E18];
      while (1)
      {
        EarliestSequentialImageTime = Storage[5];
        if ((_DWORD)EarliestSequentialImageTime)
          goto LABEL_188;
        if (*(_BYTE *)(v15 + 160))
          v18 = assetReader_outputBufferQueuesAtEndOfData(*(const __CFArray **)(v15 + 128));
        else
          v18 = CMBufferQueueIsAtEndOfData(*(CMBufferQueueRef *)(v15 + 72));
        v19 = v18;
        if (v18)
          goto LABEL_88;
        if (!a5)
        {
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v15 + 72));
          if (Head && CMSampleBufferDataIsReady(Head))
            goto LABEL_62;
          goto LABEL_33;
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (!*(_BYTE *)(v15 + 160))
          break;
        if (assetReader_outputBufferQueuesIfDataReady(*(const __CFArray **)(v15 + 128), (CMTime *)(v15 + 164)))
        {
          *(_OWORD *)&sampleTiming.duration.value = *(_OWORD *)v17;
          sampleTiming.duration.epoch = *(_QWORD *)(v17 + 16);
          v20 = assetReader_createTaggedBufferGroupSampleBuffer(v15, (uint64_t)&sampleTiming);
          if ((_DWORD)v20)
          {
            EarliestSequentialImageTime = v20;
            goto LABEL_188;
          }
        }
        if (cf)
          goto LABEL_27;
LABEL_33:
        FigSemaphoreWaitRelative();
        EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
        if ((_DWORD)EarliestSequentialImageTime)
          goto LABEL_34;
      }
      cf = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(v15 + 72));
      if (!cf)
        goto LABEL_33;
LABEL_27:
      if (v13)
        CFRelease(v13);
      if (!*(_QWORD *)(v15 + 16))
        goto LABEL_2;
      v22 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v22)
        goto LABEL_2;
      v13 = (const void *)v22;
      if (CMSampleBufferGetNumSamples((CMSampleBufferRef)cf) > 0
        || remakerFamily_keepMarkerSbuf(a1, (uint64_t)v13, cf))
      {
LABEL_62:
        v19 = 0;
        goto LABEL_88;
      }
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  if ((_DWORD)EarliestSequentialImageTime)
  {
    v13 = 0;
LABEL_34:
    *(_DWORD *)(v15 + 64) = 0;
    goto LABEL_188;
  }
  EarliestSequentialImageTime = Storage[5];
  if ((_DWORD)EarliestSequentialImageTime)
  {
LABEL_4:
    v13 = 0;
    goto LABEL_188;
  }
  if (!a4)
  {
    v19 = 0;
    if (a5)
      goto LABEL_80;
LABEL_87:
    v13 = 0;
    goto LABEL_88;
  }
  if (*(_BYTE *)(v15 + 160))
    v30 = assetReader_outputBufferQueuesAtEndOfData(*(const __CFArray **)(v15 + 128));
  else
    v30 = CMBufferQueueIsAtEndOfData(v16);
  v19 = v30;
  if (!a5)
    goto LABEL_87;
LABEL_80:
  if (*(_BYTE *)(v15 + 160))
  {
    if (assetReader_outputBufferQueuesIfDataReady(*(const __CFArray **)(v15 + 128), (CMTime *)(v15 + 164)))
    {
      *(_OWORD *)&sampleTiming.duration.value = *MEMORY[0x1E0CA2E18];
      sampleTiming.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      assetReader_createTaggedBufferGroupSampleBuffer(v15, (uint64_t)&sampleTiming);
    }
    goto LABEL_87;
  }
  v13 = 0;
  cf = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(v15 + 72));
LABEL_88:
  if (!a5 || !*(_BYTE *)(v15 + 28) || (v37 = (opaqueCMSampleBuffer *)cf) == 0)
  {
LABEL_184:
    if (a5)
    {
      *a5 = cf;
      cf = 0;
    }
    EarliestSequentialImageTime = 0;
    if (a4)
      *a4 = v19;
    goto LABEL_188;
  }
  cf = 0;
  blockBufferOut = 0;
  pixelBufferOut[0] = 0;
  sizeArrayEntriesNeededOut = 0;
  timingArrayEntriesNeededOut = 0;
  v130 = 0;
  sampleBufferOut = 0;
  v117 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&sampleTiming.duration.value = *MEMORY[0x1E0CA2E18];
  v38 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  sampleTiming.duration.epoch = v38;
  v39 = CMSampleBufferGetNumSamples(v37);
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(v37, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)SampleTimingInfoArray)
  {
    EarliestSequentialImageTime = SampleTimingInfoArray;
    if ((_DWORD)SampleTimingInfoArray != -12736)
    {
      v41 = 0;
LABEL_128:
      sampleSizeArray = 0;
LABEL_129:
      v46 = 0;
      v63 = 0;
      goto LABEL_171;
    }
  }
  numSamplesa = v39;
  if (timingArrayEntriesNeededOut < 1)
  {
    v41 = 0;
  }
  else
  {
    v41 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut, 0x1000040FF89C88EuLL);
    if (!v41)
      goto LABEL_126;
    v42 = CMSampleBufferGetSampleTimingInfoArray(v37, timingArrayEntriesNeededOut, v41, 0);
    if ((_DWORD)v42)
      goto LABEL_127;
  }
  v114 = v38;
  if (*(_BYTE *)(v15 + 160))
  {
    group = CMSampleBufferGetTaggedBufferGroup(v37);
    CVPixelBufferAtIndex = CMTaggedBufferGroupGetCVPixelBufferAtIndex(group, 0);
  }
  else
  {
    CVPixelBufferAtIndex = CMSampleBufferGetImageBuffer(v37);
    group = 0;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(v37);
  if (CVPixelBufferAtIndex)
  {
    if (*(_QWORD *)(v15 + 16))
    {
      v45 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v45)
      {
        v46 = (const void *)v45;
        sampleTimingArray = v41;
        poolOut = (CVPixelBufferPoolRef *)(v15 + 32);
        v115 = a4;
        v116 = (_QWORD *)v45;
        if (*(_QWORD *)(v15 + 32))
        {
LABEL_106:
          v47 = (VTPixelTransferSessionRef *)(v15 + 40);
          if (*(_QWORD *)(v15 + 40)
            || (v48 = CFGetAllocator(v46),
                PixelBuffer = VTPixelTransferSessionCreate(v48, (VTPixelTransferSessionRef *)(v15 + 40)),
                !(_DWORD)PixelBuffer))
          {
            v50 = CFGetAllocator(CVPixelBufferAtIndex);
            PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v50, *poolOut, pixelBufferOut);
            if (!(_DWORD)PixelBuffer)
            {
              CVBufferPropagateAttachments(CVPixelBufferAtIndex, pixelBufferOut[0]);
              v51 = VTPixelTransferSessionTransferImage(*v47, CVPixelBufferAtIndex, pixelBufferOut[0]);
              v41 = sampleTimingArray;
              if (!(_DWORD)v51)
              {
                v53 = (CMVideoFormatDescriptionRef *)(v15 + 48);
                v52 = *(const opaqueCMFormatDescription **)(v15 + 48);
                if (v52)
                {
                  if (CMVideoFormatDescriptionMatchesImageBuffer(v52, pixelBufferOut[0]))
                  {
LABEL_115:
                    if (*(_BYTE *)(v15 + 160))
                    {
                      v54 = *(const __CFArray **)(v15 + 152);
                      if (v54)
                        v55 = CFArrayGetCount(v54);
                      else
                        v55 = 0;
                      sbufa = v37;
                      v111 = *MEMORY[0x1E0C9AE00];
                      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v55, MEMORY[0x1E0C9B378]);
                      v63 = Mutable;
                      if (Mutable)
                      {
                        CFArrayAppendValue(Mutable, pixelBufferOut[0]);
                        if (v55 >= 2)
                        {
                          v92 = 1;
                          do
                          {
                            if (pixelBufferOut[0])
                            {
                              CFRelease(pixelBufferOut[0]);
                              pixelBufferOut[0] = 0;
                            }
                            v93 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(group, v92);
                            v94 = CFGetAllocator(v93);
                            v95 = CVPixelBufferPoolCreatePixelBuffer(v94, *poolOut, pixelBufferOut);
                            if ((_DWORD)v95)
                              goto LABEL_218;
                            CVBufferPropagateAttachments(v93, pixelBufferOut[0]);
                            v95 = VTPixelTransferSessionTransferImage(*v47, v93, pixelBufferOut[0]);
                            if ((_DWORD)v95)
                              goto LABEL_218;
                            CFArrayAppendValue(v63, pixelBufferOut[0]);
                          }
                          while (v55 != ++v92);
                        }
                        v95 = MEMORY[0x19402F0D8](v111, *(_QWORD *)(v15 + 152), v63, &v130);
                        if (!(_DWORD)v95)
                        {
                          memset(&time1, 0, sizeof(time1));
                          v37 = sbufa;
                          CMSampleBufferGetOutputPresentationTimeStamp(&time1, sbufa);
                          v128 = time1;
                          *(_OWORD *)&time2.value = v117;
                          time2.epoch = v114;
                          v96 = FigSampleBufferCreateForTaggedBufferGroup();
                          sampleSizeArray = 0;
                          v85 = numSamplesa;
                          if ((_DWORD)v96)
                          {
                            EarliestSequentialImageTime = v96;
                            a4 = v115;
                            goto LABEL_219;
                          }
                          poolOuta = 0;
                          goto LABEL_166;
                        }
                      }
                      else
                      {
                        v95 = FigSignalErrorAt();
                      }
LABEL_218:
                      EarliestSequentialImageTime = v95;
                      sampleSizeArray = 0;
                      a4 = v115;
                      v37 = sbufa;
LABEL_219:
                      v41 = sampleTimingArray;
                      v46 = v116;
                      goto LABEL_171;
                    }
                    v83 = CFGetAllocator(v37);
                    v84 = CMSampleBufferCreateForImageBuffer(v83, pixelBufferOut[0], 1u, 0, 0, *v53, sampleTimingArray, &sampleBufferOut);
                    sampleSizeArray = 0;
                    if (!(_DWORD)v84)
                    {
                      poolOuta = 0;
                      v63 = 0;
                      v85 = numSamplesa;
                      goto LABEL_166;
                    }
                    EarliestSequentialImageTime = v84;
                    v63 = 0;
                    goto LABEL_224;
                  }
                  if (*v53)
                  {
                    CFRelease(*v53);
                    *v53 = 0;
                  }
                }
                v51 = CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelBufferOut[0], (CMVideoFormatDescriptionRef *)(v15 + 48));
                if (!(_DWORD)v51)
                  goto LABEL_115;
              }
              EarliestSequentialImageTime = v51;
              sampleSizeArray = 0;
              v63 = 0;
              a4 = v115;
              goto LABEL_171;
            }
          }
          EarliestSequentialImageTime = PixelBuffer;
          sampleSizeArray = 0;
          v63 = 0;
LABEL_224:
          a4 = v115;
          goto LABEL_225;
        }
        v64 = *(_QWORD *)(v45 + 232);
        v65 = v46;
        if (v64)
        {
          SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(v64);
          v67 = CFGetAllocator(v65);
          FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
          v69 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CVPixelBufferPoolRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v69)
            v69(FigBaseObject, CFSTR("SampleBufferProcessor_OutputPixelBufferPool"), v67, poolOut);
        }
        v70 = v65[7];
        if (v70)
        {
          v46 = v116;
          if (*poolOut)
            goto LABEL_106;
          v71 = CFGetAllocator(v116);
          v72 = v116[19];
          v73 = FigRenderPipelineGetFigBaseObject(v70);
          v74 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v74)
            v74(v73, CFSTR("OutputPixelBufferPool"), v71, v72 + 32);
        }
        v46 = v116;
        if (*poolOut)
          goto LABEL_106;
        PixelFormatType = CVPixelBufferGetPixelFormatType(CVPixelBufferAtIndex);
        CVPixelBufferGetWidth(CVPixelBufferAtIndex);
        CVPixelBufferGetHeight(CVPixelBufferAtIndex);
        IOSurface = CVPixelBufferGetIOSurface(CVPixelBufferAtIndex);
        if (!*(_QWORD *)(v15 + 56))
          CVPixelBufferGetAttributes();
        sbuf = v37;
        MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          FigSignalErrorAt();
          goto LABEL_228;
        }
        v76 = MutableCopy;
        Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9040]);
        if (Value)
        {
          v78 = Value;
          v79 = CFGetTypeID(Value);
          if (v79 != CFArrayGetTypeID())
            goto LABEL_197;
          v80 = CFArrayGetCount(v78);
          if (v80 < 1)
            goto LABEL_197;
          v81 = v80;
          v82 = 0;
          while (1)
          {
            LODWORD(time1.value) = 0;
            if (FigCFArrayGetInt32AtIndex())
            {
              if (LODWORD(time1.value) == PixelFormatType)
                break;
            }
            if (v81 == ++v82)
              goto LABEL_197;
          }
        }
        if (FigCFDictionarySetInt32())
        {
          v106 = 0;
          a4 = v115;
          v37 = sbuf;
          goto LABEL_204;
        }
LABEL_197:
        v37 = sbuf;
        if ((!CFDictionaryGetValue(v76, (const void *)*MEMORY[0x1E0CA90E0])
           || !CFDictionaryGetValue(v76, (const void *)*MEMORY[0x1E0CA8FD8]))
          && (FigCFDictionarySetInt32() || FigCFDictionarySetInt32()))
        {
          v106 = 0;
          a4 = v115;
        }
        else
        {
          a4 = v115;
          if (!IOSurface)
          {
            v106 = v76;
            goto LABEL_208;
          }
          time1.value = 0;
          if (FigCreatePixelBufferAttributesWithIOSurfaceSupport())
          {
            v106 = 0;
          }
          else
          {
            CFRelease(v76);
            v76 = 0;
            v106 = (const __CFDictionary *)time1.value;
          }
        }
LABEL_204:
        if (v76)
          CFRelease(v76);
LABEL_208:
        if (v106)
        {
          v107 = CFGetAllocator(v116);
          EarliestSequentialImageTime = CVPixelBufferPoolCreate(v107, 0, v106, poolOut);
          v108 = v106;
          v46 = v116;
          CFRelease(v108);
          if ((_DWORD)EarliestSequentialImageTime)
          {
            sampleSizeArray = 0;
            v63 = 0;
LABEL_225:
            v41 = sampleTimingArray;
            goto LABEL_171;
          }
          goto LABEL_106;
        }
LABEL_228:
        EarliestSequentialImageTime = FigSignalErrorAt();
        sampleSizeArray = 0;
        v63 = 0;
        goto LABEL_219;
      }
    }
LABEL_126:
    v42 = FigSignalErrorAt();
LABEL_127:
    EarliestSequentialImageTime = v42;
    goto LABEL_128;
  }
  v56 = DataBuffer;
  if (DataBuffer)
  {
    v57 = CFGetAllocator(DataBuffer);
    v58 = CFGetAllocator(v56);
    DataLength = CMBlockBufferGetDataLength(v56);
    v42 = CMBlockBufferCreateContiguous(v57, v56, v58, 0, 0, DataLength, 2u, &blockBufferOut);
    if ((_DWORD)v42)
      goto LABEL_127;
  }
  v60 = CMSampleBufferGetSampleSizeArray(v37, 0, 0, &sizeArrayEntriesNeededOut);
  if ((_DWORD)v60)
  {
    EarliestSequentialImageTime = v60;
    if ((_DWORD)v60 != -12735)
      goto LABEL_128;
  }
  sampleTimingArray = v41;
  if (sizeArrayEntriesNeededOut < 1)
  {
    sampleSizeArray = 0;
  }
  else
  {
    sampleSizeArray = (size_t *)malloc_type_malloc(8 * sizeArrayEntriesNeededOut, 0x100004000313F17uLL);
    if (!sampleSizeArray)
    {
      v62 = FigSignalErrorAt();
LABEL_222:
      EarliestSequentialImageTime = v62;
      goto LABEL_129;
    }
    v62 = CMSampleBufferGetSampleSizeArray(v37, sizeArrayEntriesNeededOut, sampleSizeArray, 0);
    if ((_DWORD)v62)
      goto LABEL_222;
  }
  v115 = a4;
  v86 = CFGetAllocator(v37);
  v87 = blockBufferOut;
  FormatDescription = CMSampleBufferGetFormatDescription(v37);
  v89 = v87;
  v85 = numSamplesa;
  v90 = CMSampleBufferCreate(v86, v89, 1u, 0, 0, FormatDescription, numSamplesa, timingArrayEntriesNeededOut, sampleTimingArray, sizeArrayEntriesNeededOut, sampleSizeArray, &sampleBufferOut);
  v46 = 0;
  if ((_DWORD)v90)
  {
    EarliestSequentialImageTime = v90;
    v63 = 0;
    goto LABEL_224;
  }
  poolOuta = (CVPixelBufferPoolRef *)sampleSizeArray;
  v116 = 0;
  v63 = 0;
LABEL_166:
  v97 = v37;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v37, 0);
  if (SampleAttachmentsArray)
  {
    v99 = SampleAttachmentsArray;
    v100 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
    if (v85 >= 1)
    {
      v101 = v100;
      v102 = 0;
      do
      {
        v103 = (const __CFDictionary *)CFArrayGetValueAtIndex(v99, v102);
        v104 = (void *)CFArrayGetValueAtIndex(v101, v102);
        CFDictionaryApplyFunction(v103, (CFDictionaryApplierFunction)assetReader_addValueToDictionary, v104);
        ++v102;
      }
      while (numSamplesa != v102);
    }
  }
  v37 = v97;
  CMPropagateAttachments(v97, sampleBufferOut);
  CMSampleBufferGetOutputPresentationTimeStamp(&sampleTiming.duration, v97);
  time1 = sampleTiming.duration;
  CMSampleBufferSetOutputPresentationTimeStamp(sampleBufferOut, &time1);
  EarliestSequentialImageTime = 0;
  cf = sampleBufferOut;
  sampleBufferOut = 0;
  a4 = v115;
  v46 = v116;
  v41 = sampleTimingArray;
  sampleSizeArray = (size_t *)poolOuta;
LABEL_171:
  if (pixelBufferOut[0])
    CFRelease(pixelBufferOut[0]);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  free(v41);
  free(sampleSizeArray);
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (v46)
    CFRelease(v46);
  if (v63)
    CFRelease(v63);
  if (v130)
    CFRelease(v130);
  CFRelease(v37);
  if (!(_DWORD)EarliestSequentialImageTime)
    goto LABEL_184;
LABEL_188:
  if (cf)
    CFRelease(cf);
  if (v126)
    CFRelease(v126);
  if (v13)
    CFRelease(v13);
  return EarliestSequentialImageTime;
}

uint64_t assetReader_EnableDecodedAudioExtractionFromTrackWithAudioOptions(const void *a1, unsigned int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *Storage;
  const __CFAllocator *v17;
  CFArrayRef v18;
  __int128 v19;
  uint64_t SourceASBDForTrackID;
  uint64_t (*v21)(const void *, CFArrayRef, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  CFTypeRef cf;
  void *values;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int valuePtr;

  valuePtr = a2;
  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  cf = CFDictionaryCreate(v17, (const void **)kFigAssetReaderSourceTrackArrayKey_TrackID, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v18 = CFArrayCreate(v17, &cf, 1, MEMORY[0x1E0C9B378]);
  if (*Storage != 1)
  {
    SourceASBDForTrackID = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (!a3)
  {
    SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, valuePtr, (uint64_t)&v29);
    if (!(_DWORD)SourceASBDForTrackID)
    {
      *((_QWORD *)&v29 + 1) = 0x96C70636DLL;
      LODWORD(v31) = 32;
      DWORD1(v30) = 1;
      DWORD2(v30) = 4 * HIDWORD(v30);
      LODWORD(v30) = 4 * HIDWORD(v30);
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  v19 = a3[1];
  v29 = *a3;
  v30 = v19;
  v31 = *((_QWORD *)a3 + 4);
  if (*(double *)&v29 != 0.0 && HIDWORD(v30))
    goto LABEL_12;
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, valuePtr, (uint64_t)&v24);
  if ((_DWORD)SourceASBDForTrackID)
  {
LABEL_14:
    v22 = SourceASBDForTrackID;
    goto LABEL_16;
  }
  if (*(double *)&v29 == 0.0)
    *(_QWORD *)&v29 = v24;
  if (!HIDWORD(v30))
    HIDWORD(v30) = HIDWORD(v25);
LABEL_12:
  v21 = *(uint64_t (**)(const void *, CFArrayRef, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v21)
  {
    SourceASBDForTrackID = v21(a1, v18, &v29, a4, a5, a6, a7, a8, a9);
    goto LABEL_14;
  }
  v22 = 4294954514;
LABEL_16:
  if (values)
    CFRelease(values);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v22;
}

uint64_t assetReader_StartExtractionForTimeRanges(uint64_t a1, __int128 *a2, CFIndex a3)
{
  uint64_t Storage;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  _BYTE *ValueAtIndex;
  uint64_t v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t, CMTimeRange *, CMTime *);
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  CMTimeEpoch v19;
  CMTimeRange range;
  CMTime v21;
  CMTime v22;

  Storage = remakerFamily_getStorage(a1);
  if (*(_DWORD *)Storage >= 4u || a3 <= 0 || !a2)
  {
LABEL_16:
    v15 = FigSignalErrorAt();
LABEL_11:
    v16 = v15;
    if (!(_DWORD)v15)
      return v16;
    goto LABEL_14;
  }
  v7 = Storage;
  Count = CFArrayGetCount(*(CFArrayRef *)(Storage + 80));
  if (Count >= 1)
  {
    v9 = Count;
    v10 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 80), v10);
      if (!ValueAtIndex[360])
        goto LABEL_16;
      v12 = remakerFamily_resetTrackMultiPassTimeRanges((uint64_t)ValueAtIndex, a2, a3);
      if ((_DWORD)v12)
      {
        v16 = v12;
        goto LABEL_14;
      }
    }
    while (v9 != ++v10);
  }
  v13 = a2[1];
  *(_OWORD *)&range.start.value = *a2;
  *(_OWORD *)&range.start.epoch = v13;
  *(_OWORD *)&range.duration.timescale = a2[2];
  CMTimeRangeGetEnd(&v21, &range);
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  v14 = *(uint64_t (**)(uint64_t, CMTimeRange *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v14)
  {
    *(_OWORD *)&range.start.value = v18;
    range.start.epoch = v19;
    v22 = v21;
    v15 = v14(a1, &range, &v22);
    goto LABEL_11;
  }
  v16 = 4294954514;
LABEL_14:
  remakerfamily_setFailureStatusIfError(a1, v16);
  remakerFamily_invalidateAllMediaProcessors();
  return v16;
}

uint64_t assetReader_StartExtractionForTimeRangesFromTrack(const void *a1, int a2, uint64_t a3, CFIndex a4)
{
  _DWORD *Storage;
  uint64_t ChannelByExtractionID;
  uint64_t v10;
  uint64_t v11;
  uint64_t Segment;
  __int128 v13;
  uint64_t updated;
  uint64_t v15;
  char v16;
  uint64_t v18;
  __int128 v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  const void *ValueAtIndex;
  __int128 v24;
  CMTime v25;
  CMTimeRange range;
  CMTime v27;
  __CFArray *v28;

  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  ChannelByExtractionID = assetReader_getChannelByExtractionID((uint64_t)a1, a2);
  if (!ChannelByExtractionID || !*(_QWORD *)(ChannelByExtractionID + 16))
  {
    v28 = 0;
    goto LABEL_17;
  }
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  v28 = 0;
  if (!v10)
  {
LABEL_17:
    v15 = FigSignalErrorAt();
    if (!(_DWORD)v15)
      goto LABEL_21;
    v11 = 0;
    v16 = 1;
LABEL_19:
    remakerfamily_setFailureStatusIfError((uint64_t)a1, v15);
    remakerFamily_invalidateAllMediaProcessors();
    if ((v16 & 1) != 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v11 = v10;
  if (*Storage < 7u && *(_BYTE *)(v10 + 360) && a4 > 0 && a3)
  {
    Segment = assetReader_ensureRemakerQueue();
    if ((_DWORD)Segment)
      goto LABEL_32;
    Segment = remakerFamily_resetTrackMultiPassTimeRanges(v11, (_QWORD *)a3, a4);
    if ((_DWORD)Segment)
      goto LABEL_32;
    if (*(_QWORD *)(v11 + 424))
    {
      v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&range.start.value = *(_OWORD *)a3;
      *(_OWORD *)&range.start.epoch = v13;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a3 + 32);
      Segment = remakerFamily_resetSourceRenderersForNextSegment(v11, (uint64_t)&range, 1);
      if ((_DWORD)Segment)
        goto LABEL_32;
    }
    else
    {
      Segment = remakerFamily_createMultiPassPlaybackBossForTrack(v11, (_QWORD *)(v11 + 424));
      if ((_DWORD)Segment)
        goto LABEL_32;
      *(_BYTE *)(v11 + 432) = 0;
      v18 = *(_QWORD *)(v11 + 424);
      v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&range.start.value = *(_OWORD *)a3;
      *(_OWORD *)&range.start.epoch = v19;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a3 + 32);
      CMTimeRangeGetEnd(&v27, &range);
      *(_OWORD *)&range.start.value = *(_OWORD *)a3;
      range.start.epoch = *(_QWORD *)(a3 + 16);
      Segment = FigPlaybackBossSendSamplesForTimeRange(v18, &range.start, (uint64_t)&v27, 4);
      if ((_DWORD)Segment)
        goto LABEL_32;
      Segment = remakerFamily_createRelatedTrackArray((_DWORD *)v11, &v28);
      if ((_DWORD)Segment)
        goto LABEL_32;
      Count = CFArrayGetCount(v28);
      if (Count >= 1)
      {
        v21 = Count;
        v22 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v28, v22);
          v24 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&range.start.value = *(_OWORD *)a3;
          *(_OWORD *)&range.start.epoch = v24;
          *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a3 + 32);
          CMTimeRangeGetEnd(&v25, &range);
          *(_OWORD *)&range.start.value = *(_OWORD *)a3;
          range.start.epoch = *(_QWORD *)(a3 + 16);
          Segment = remakerFamily_startTrack((uint64_t)ValueAtIndex, &range.start, &v25);
          if ((_DWORD)Segment)
            goto LABEL_32;
        }
        while (v21 != ++v22);
      }
    }
    remakerFamily_SetRemakerState((uint64_t)a1, 3, 0);
    Segment = remakerfamily_updateClientPID();
    if (!(_DWORD)Segment)
    {
      updated = remakerfamily_updateThrottleForBackground(a1);
      goto LABEL_14;
    }
LABEL_32:
    v15 = Segment;
    goto LABEL_15;
  }
  updated = FigSignalErrorAt();
LABEL_14:
  v15 = updated;
  if ((_DWORD)updated)
  {
LABEL_15:
    v16 = 0;
    goto LABEL_19;
  }
LABEL_20:
  CFRelease((CFTypeRef)v11);
LABEL_21:
  if (v28)
    CFRelease(v28);
  return v15;
}

uint64_t assetReader_EnableCaptionExtraction(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t Storage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, _QWORD, int *);
  uint64_t v14;
  const __CFAllocator *v15;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const __CFAllocator *v17;
  const CMBufferCallbacks *v18;
  CFAllocatorRef v19;
  CFAllocatorRef v20;
  const void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  CMTime v30;
  CMTime v31;
  CFTypeRef cf;
  int v33;
  uint64_t v34;

  Storage = remakerFamily_getStorage(a1);
  v34 = 0;
  v33 = 0;
  cf = 0;
  if (*(_DWORD *)Storage != 1)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_27;
  }
  v8 = Storage;
  v9 = *(_QWORD *)(Storage + 72);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v10)
  {
LABEL_22:
    v28 = 4294954514;
    goto LABEL_23;
  }
  v11 = v10(v9, a2, &cf);
  if ((_DWORD)v11)
  {
LABEL_27:
    v28 = v11;
    goto LABEL_23;
  }
  v12 = cf;
  v13 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v13)
    goto LABEL_22;
  v11 = v13(v12, 0, &v33);
  if ((_DWORD)v11)
    goto LABEL_27;
  v11 = remakerFamily_createChannel(a1, a2, v33, &v34);
  if ((_DWORD)v11)
    goto LABEL_27;
  v11 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v34);
  if ((_DWORD)v11)
    goto LABEL_27;
  v14 = v34;
  *(_BYTE *)(v34 + 50) = 1;
  *(_BYTE *)(*(_QWORD *)(v14 + 152) + 28) = 0;
  v15 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v11 = CMBufferQueueCreate(v15, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v34 + 248));
  if ((_DWORD)v11)
    goto LABEL_27;
  v17 = CFGetAllocator(a1);
  v18 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v11 = CMBufferQueueCreate(v17, 0, v18, (CMBufferQueueRef *)(*(_QWORD *)(v34 + 152) + 72));
  if ((_DWORD)v11)
    goto LABEL_27;
  v19 = CFGetAllocator(a1);
  v11 = FigRenderPipelineCreateForBufferQueue((uint64_t)v19, *(const void **)(v34 + 248), 0, (CFTypeRef *)(v34 + 56));
  if ((_DWORD)v11)
    goto LABEL_27;
  v11 = assetReader_ensureRemakerQueue();
  if ((_DWORD)v11)
    goto LABEL_27;
  CMNotificationCenterGetDefaultLocalCenter();
  v11 = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)v11)
    goto LABEL_27;
  v20 = CFGetAllocator(a1);
  v21 = *(const void **)(v34 + 248);
  v22 = *(_QWORD *)(*(_QWORD *)(v34 + 152) + 72);
  CMTimeMake(&v31, 2, 1);
  CMTimeMake(&v30, 1, 1);
  v23 = *(_BYTE *)(v8 + 32) ? 0 : 31;
  v11 = FigMediaProcessorCreateForCaptionConversionWithBufferQueue((uint64_t)v20, 1668310898, 1668310898, v21, v22, 0, (__int128 *)&v31.value, (__int128 *)&v30.value, v23, (uint64_t *)(v34 + 232));
  if ((_DWORD)v11)
    goto LABEL_27;
  CMNotificationCenterGetDefaultLocalCenter();
  v11 = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)v11)
    goto LABEL_27;
  v24 = v34;
  v25 = remakerFamily_getStorage(a1);
  v26 = *(_DWORD *)(v25 + 152) + 1;
  *(_DWORD *)(v25 + 152) = v26;
  *(_DWORD *)(v24 + 300) = v26;
  v11 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(_QWORD *)(v34 + 152));
  if ((_DWORD)v11)
    goto LABEL_27;
  v27 = v34;
  *(_BYTE *)(v34 + 52) = 1;
  if (a4)
    *a4 = *(_DWORD *)(v27 + 300);
  remakerFamily_commitChannel((uint64_t)a1, v27);
  v28 = 0;
  v34 = 0;
LABEL_23:
  remakerFamily_discardChannel((uint64_t)a1, v34);
  if (cf)
    CFRelease(cf);
  return v28;
}

uint64_t assetReader_StartExtractionForTime(const void *a1, __int128 *a2)
{
  uint64_t Storage;
  __int128 v5;
  uint64_t v6;

  Storage = remakerFamily_getStorage(a1);
  v5 = *a2;
  *(_QWORD *)(Storage + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(Storage + 88) = v5;
  v6 = *((_QWORD *)a2 + 2);
  *(_OWORD *)(Storage + 112) = *a2;
  *(_QWORD *)(Storage + 128) = v6;
  *(_BYTE *)(Storage + 136) = 1;
  return assetReader_startExtractionForTimeRangeCommon(a1);
}

uint64_t assetReader_EnableVideoCompositionExtraction2(const void *a1, const __CFArray *a2, const __CFArray *a3, const __CFString *a4, const void *a5, const void *a6, int a7, const __CFArray *a8, uint64_t a9, const void *a10, __int128 *a11, __int128 a12, int32_t a13, void *a14, const __CFDictionary *a15, CMVideoCodecType a16, const __CFDictionary *a17, const __CFDictionary *a18, uint64_t a19, uint64_t a20,const __CFDictionary *a21,_DWORD *a22)
{
  __int128 v23;
  uint64_t v24;

  v23 = *a11;
  v24 = *((_QWORD *)a11 + 2);
  return assetReader_EnableVideoCompositionExtraction3(a1, a2, a3, 0, 0, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v23, a12, SDWORD1(a12), SDWORD2(a12), SHIDWORD(a12), a13, a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a18,
           a21,
           a22);
}

uint64_t assetReader_EnableVideoCompositionExtraction3(const void *a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5, const __CFString *a6, const void *a7, const void *a8, int a9, const __CFArray *a10, uint64_t a11, const void *a12, uint64_t a13, int a14, int a15, int a16, int32_t a17, int32_t a18, void *a19, const __CFDictionary *a20,CMVideoCodecType a21,const __CFDictionary *a22,const __CFDictionary *a23,uint64_t a24,const __CFDictionary *cf,const __CFDictionary *a26,_DWORD *a27)
{
  const void *v34;
  _DWORD *Storage;
  _DWORD *v36;
  const __CFDictionary *v37;
  CFTypeID v38;
  const void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  CFAllocatorRef v46;
  const __CFAllocator *v47;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const void *v49;
  const __CFAllocator *v50;
  void *v51;
  const __CFDictionary *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  const void *VTCompressionSession;
  uint64_t SampleBufferProcessor;
  const void *v58;
  uint64_t FigBaseObject;
  void (*v60)(uint64_t, const __CFString *, const void *);
  const void *v61;
  const __CFString *v62;
  const __CFAllocator *v63;
  const void *v64;
  const void *v65;
  CFTypeRef v66;
  int v67;
  const void *Value;
  CFTypeRef v69;
  uint64_t v70;
  uint64_t v71;
  void *v73;
  const void *v74;
  const void *v75;
  const __CFString *v76;
  const __CFArray *v77;
  CMTime v78;
  CMTime v79;
  CMTime end;
  CMTime start;
  CMTimeRange v82;
  CFTypeRef propertyValueOut;
  __CFDictionary *v84;
  CFTypeRef v85;
  uint64_t v86;

  v34 = a1;
  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  v85 = 0;
  v86 = 0;
  propertyValueOut = 0;
  v84 = 0;
  if (*Storage != 1
    || !a2
    || !a7
    || (v77 = a3, a17 < 1)
    || a18 <= 0
    || (*(_DWORD *)(a13 + 12) & 0x1D) != 1
    || (v36 = Storage, v76 = a6, (v37 = cf) != 0) && (v38 = CFGetTypeID(cf), v38 != CFDictionaryGetTypeID()))
  {
    v41 = FigSignalErrorAt();
    goto LABEL_56;
  }
  v39 = (const void *)*((_QWORD *)v36 + 59);
  *((_QWORD *)v36 + 59) = a4;
  if (a4)
    CFRetain(a4);
  if (v39)
    CFRelease(v39);
  v40 = (const void *)*((_QWORD *)v36 + 60);
  *((_QWORD *)v36 + 60) = a5;
  if (a5)
    CFRetain(a5);
  if (v40)
    CFRelease(v40);
  v41 = remakerFamily_createChannel(v34, 0, 1986618469, &v86);
  if ((_DWORD)v41)
    goto LABEL_56;
  v75 = a7;
  v42 = v86;
  *(_BYTE *)(v86 + 48) = 0;
  *(_BYTE *)(v42 + 50) = 1;
  *(_BYTE *)(*(_QWORD *)(v42 + 152) + 28) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  v43 = v86;
  v44 = remakerFamily_getStorage(v34);
  v45 = *(_DWORD *)(v44 + 152) + 1;
  *(_DWORD *)(v44 + 152) = v45;
  *(_DWORD *)(v43 + 300) = v45;
  v46 = CFGetAllocator(v34);
  v41 = FigVisualContextCreateBasic((uint64_t)v46, 0, &v85);
  if ((_DWORD)v41)
    goto LABEL_56;
  v74 = a8;
  if (!a21)
  {
    v66 = v85;
    *(_QWORD *)(*(_QWORD *)(v86 + 152) + 112) = v85;
    CFRetain(v66);
    v41 = assetReaderTrack_setUpOutputVisualContextSemaphore(*(_QWORD *)(v86 + 152));
    if (!(_DWORD)v41)
    {
      v73 = a19;
      goto LABEL_39;
    }
LABEL_56:
    v70 = v41;
    goto LABEL_48;
  }
  v47 = CFGetAllocator(v34);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v41 = CMBufferQueueCreate(v47, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(_QWORD *)(v86 + 152) + 72));
  if ((_DWORD)v41)
    goto LABEL_56;
  v41 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(_QWORD *)(v86 + 152));
  if ((_DWORD)v41)
    goto LABEL_56;
  v41 = remakerFamily_createRemakerVideoEncoderSpecification(v34, a22, &v84);
  if ((_DWORD)v41)
    goto LABEL_56;
  v49 = v34;
  v50 = CFGetAllocator(v34);
  v52 = v84;
  v51 = (void *)v85;
  start = *(CMTime *)(v36 + 22);
  end = *(CMTime *)(v36 + 28);
  CMTimeRangeFromTimeToTime(&v82, &start, &end);
  v53 = *(_QWORD *)(*(_QWORD *)(v86 + 152) + 72);
  CMTimeMake(&v79, 2, 1);
  CMTimeMake(&v78, 1, 1);
  if (*((_BYTE *)v36 + 32))
    v54 = 30;
  else
    v54 = 31;
  *(_OWORD *)&start.value = *(_OWORD *)a13;
  start.epoch = *(_QWORD *)(a13 + 16);
  v55 = FigMediaProcessorCreateForVideoCompression(v50, a17, a18, a21, v52, 0, 0, v51, (uint64_t)&start, (__int128 *)&v82.start.value, v53, (__int128 *)&v79.value, (__int128 *)&v78.value, 0, v54, (uint64_t *)(v86 + 288));
  if ((_DWORD)v55)
  {
    v70 = v55;
    v34 = v49;
    goto LABEL_48;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v41 = FigNotificationCenterAddWeakListeners();
  v34 = v49;
  if ((_DWORD)v41)
    goto LABEL_56;
  if (a23)
  {
    FigCFDictionaryGetDoubleIfPresent();
    VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v86 + 288));
    VTSessionSetProperties(VTCompressionSession, a23);
  }
  SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(v86 + 288));
  v58 = (const void *)*MEMORY[0x1E0C9AE50];
  FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
  v60 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  v37 = cf;
  if (v60)
    v60(FigBaseObject, CFSTR("SampleBufferProcessor_InheritOutputColorSpaceFromInput"), v58);
  v61 = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v86 + 288));
  v62 = (const __CFString *)*MEMORY[0x1E0CED268];
  v63 = CFGetAllocator(v34);
  v41 = VTSessionCopyProperty(v61, v62, v63, &propertyValueOut);
  if ((_DWORD)v41)
    goto LABEL_56;
  if (*((_BYTE *)v36 + 424) == 1)
  {
    v64 = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v86 + 288));
    v41 = VTSessionSetProperty(v64, (CFStringRef)*MEMORY[0x1E0CED0B8], v58);
    if ((_DWORD)v41)
      goto LABEL_56;
  }
  v73 = (void *)propertyValueOut;
  if (*((_QWORD *)v36 + 58))
  {
    v65 = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v86 + 288));
    VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E0CED150], *((CFTypeRef *)v36 + 58));
  }
LABEL_39:
  v41 = remakerFamily_setupMultiPassTrackIfNecessary(v34, v86);
  if ((_DWORD)v41)
    goto LABEL_56;
  v67 = a9;
  if (a26)
  {
    Value = CFDictionaryGetValue(a26, CFSTR("AssetReader_FieldMode"));
    v67 = a9;
  }
  else
  {
    Value = 0;
  }
  *(_OWORD *)&start.value = *(_OWORD *)a13;
  start.epoch = *(_QWORD *)(a13 + 16);
  v41 = remakerFamily_finishVideoCompositionChannel(v34, v86, a2, v77, v76, v75, v74, v67, a10, a11, a12, (__int128 *)&start.value, a14, a15, a16, Value, a20, v37, (uint64_t)v85,
          v73);
  if ((_DWORD)v41)
    goto LABEL_56;
  if (v73)
    v69 = CFRetain(v73);
  else
    v69 = 0;
  v70 = 0;
  v71 = v86;
  *(_QWORD *)(*(_QWORD *)(v86 + 152) + 56) = v69;
  *a27 = *(_DWORD *)(v71 + 300);
  v86 = 0;
LABEL_48:
  remakerFamily_discardChannel((uint64_t)v34, v86);
  if (v85)
    CFRelease(v85);
  if (v84)
    CFRelease(v84);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  return v70;
}

uint64_t assetReader_enableOriginalSampleExtractionFromTrackCommon(const void *a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, _QWORD, int *);
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFAllocator *v19;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  CFAllocatorRef v21;
  uint64_t v22;
  uint64_t Storage;
  int v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  CFTypeRef cf;
  int v30;
  uint64_t v31;

  v9 = ((uint64_t (*)(void))remakerFamily_getStorage)();
  v31 = 0;
  v30 = 0;
  cf = 0;
  if (*(_DWORD *)v9 != 1)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_29;
  }
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v11)
  {
LABEL_15:
    v18 = 4294954514;
    goto LABEL_25;
  }
  v12 = v11(v10, a2, &cf);
  if ((_DWORD)v12)
  {
LABEL_29:
    v18 = v12;
    goto LABEL_25;
  }
  v13 = cf;
  v14 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v14)
    goto LABEL_15;
  v12 = v14(v13, 0, &v30);
  if ((_DWORD)v12)
    goto LABEL_29;
  v12 = remakerFamily_createChannel(a1, a2, v30, &v31);
  if ((_DWORD)v12)
    goto LABEL_29;
  if (v30 == 1936684398)
  {
    v15 = CFGetTypeID(a1);
    v12 = remakerFamily_copyFormatDescription(v15, (uint64_t)cf, (_QWORD *)(v31 + 40));
    if ((_DWORD)v12)
      goto LABEL_29;
  }
  v12 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v31);
  if ((_DWORD)v12)
    goto LABEL_29;
  v16 = v31;
  *(_BYTE *)(v31 + 50) = 1;
  v16 += 50;
  *(_BYTE *)(*(_QWORD *)(v16 + 102) + 28) = 0;
  *(_BYTE *)(v16 - 2) = 1;
  FigCFDictionaryGetBooleanIfPresent();
  if (!a4)
    FigCFDictionaryGetBooleanIfPresent();
  v27 = *MEMORY[0x1E0CA2E18];
  v28 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    v17 = v31;
    if ((BYTE12(v27) & 0x1D) == 1)
    {
      *(_QWORD *)(v31 + 344) = v28;
      *(_OWORD *)(v17 + 328) = v27;
      *(_BYTE *)(v17 + 49) = 1;
    }
  }
  if (FigCFDictionaryGetBooleanIfPresent() && *(_BYTE *)(v31 + 121))
    FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  *(_BYTE *)(v31 + 51) = a4;
  v19 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v12 = CMBufferQueueCreate(v19, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(_QWORD *)(v31 + 152) + 72));
  if ((_DWORD)v12)
    goto LABEL_29;
  v21 = CFGetAllocator(a1);
  v12 = FigRenderPipelineCreateForBufferQueue((uint64_t)v21, *(const void **)(*(_QWORD *)(v31 + 152) + 72), 0, (CFTypeRef *)(v31 + 56));
  if ((_DWORD)v12)
    goto LABEL_29;
  v12 = assetReader_ensureRemakerQueue();
  if ((_DWORD)v12)
    goto LABEL_29;
  CMNotificationCenterGetDefaultLocalCenter();
  v12 = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)v12)
    goto LABEL_29;
  v22 = v31;
  Storage = remakerFamily_getStorage(a1);
  v24 = *(_DWORD *)(Storage + 152) + 1;
  *(_DWORD *)(Storage + 152) = v24;
  *(_DWORD *)(v22 + 300) = v24;
  v18 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(_QWORD *)(v31 + 152));
  if (!(_DWORD)v18)
  {
    v25 = v31;
    *a5 = *(_DWORD *)(v31 + 300);
    remakerFamily_commitChannel((uint64_t)a1, v25);
    v31 = 0;
  }
LABEL_25:
  remakerFamily_discardChannel((uint64_t)a1, v31);
  if (cf)
    CFRelease(cf);
  return v18;
}

uint64_t assetReaderTrack_setUpOutputBufferQueueSemaphore(uint64_t a1)
{
  opaqueCMBufferQueue *v2;
  CMTimeEpoch v3;
  uint64_t result;
  opaqueCMBufferQueue *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  CFIndex v13;
  opaqueCMBufferQueue *ValueAtIndex;
  opaqueCMBufferQueue *v15;
  CMBufferQueueTriggerToken *v16;
  CMBufferQueueTriggerToken *v17;
  __int128 v18;
  CMTime time;

  *(_QWORD *)(a1 + 80) = FigSemaphoreCreate();
  v2 = *(opaqueCMBufferQueue **)(a1 + 72);
  v18 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  time.epoch = v3;
  result = CMBufferQueueInstallTrigger(v2, (CMBufferQueueTriggerCallback)assetReaderTrack_dataBecameReady, (void *)a1, 7, &time, (CMBufferQueueTriggerToken *)(a1 + 88));
  if (!(_DWORD)result)
  {
    v5 = *(opaqueCMBufferQueue **)(a1 + 72);
    *(_OWORD *)&time.value = v18;
    time.epoch = v3;
    result = CMBufferQueueInstallTrigger(v5, (CMBufferQueueTriggerCallback)assetReaderTrack_endOfDataReached, (void *)a1, 8, &time, (CMBufferQueueTriggerToken *)(a1 + 96));
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 160))
      {
        v6 = *(const __CFArray **)(a1 + 128);
        if (v6)
        {
          Count = CFArrayGetCount(v6);
          if (Count > 0)
          {
            v8 = Count;
            v9 = 8 * Count;
            v10 = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
            *(_QWORD *)(a1 + 136) = v10;
            if (v10)
            {
              v11 = malloc_type_malloc(v9, 0x2004093837F09uLL);
              *(_QWORD *)(a1 + 144) = v11;
              if (v11)
              {
                v12 = 0;
                v13 = 0;
                while (1)
                {
                  if (v13)
                  {
                    ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), v13);
                    if (!ValueAtIndex)
                      return FigSignalErrorAt();
                    v15 = ValueAtIndex;
                    v16 = (CMBufferQueueTriggerToken *)(*(_QWORD *)(a1 + 136) + v12);
                    *(_OWORD *)&time.value = v18;
                    time.epoch = v3;
                    result = CMBufferQueueInstallTrigger(ValueAtIndex, (CMBufferQueueTriggerCallback)assetReaderTrack_dataBecameReady, (void *)a1, 7, &time, v16);
                    if ((_DWORD)result)
                      return result;
                    v17 = (CMBufferQueueTriggerToken *)(*(_QWORD *)(a1 + 144) + v12);
                    *(_OWORD *)&time.value = v18;
                    time.epoch = v3;
                    result = CMBufferQueueInstallTrigger(v15, (CMBufferQueueTriggerCallback)assetReaderTrack_endOfDataReached, (void *)a1, 8, &time, v17);
                    if ((_DWORD)result)
                      return result;
                  }
                  else
                  {
                    **(_QWORD **)(a1 + 136) = *(_QWORD *)(a1 + 88);
                    **(_QWORD **)(a1 + 144) = *(_QWORD *)(a1 + 96);
                  }
                  ++v13;
                  v12 += 8;
                  if (v8 == v13)
                    return CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(a1 + 72), (CMBufferQueueTriggerCallback)assetReaderTrack_defer_outputQueueBecameEmpty, (void *)a1, 10, 1, (CMBufferQueueTriggerToken *)(a1 + 104));
                }
              }
            }
          }
        }
        return FigSignalErrorAt();
      }
      else
      {
        return CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(a1 + 72), (CMBufferQueueTriggerCallback)assetReaderTrack_defer_outputQueueBecameEmpty, (void *)a1, 10, 1, (CMBufferQueueTriggerToken *)(a1 + 104));
      }
    }
  }
  return result;
}

void assetReaderTrack_dataBecameReady(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (a1 && *(_QWORD *)(a1 + 16) && (v2 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v3 = (const void *)v2;
    assetReaderTrack_safelyPostNotificationWithExtractionID(a1, (uint64_t)CFSTR("AssetReader_SampleBufferNowAvailable"));
    FigSemaphoreSignal();
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void assetReaderTrack_endOfDataReached(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (a1 && *(_QWORD *)(a1 + 16) && (v2 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v3 = (const void *)v2;
    assetReaderTrack_safelyPostNotificationWithExtractionID(a1, (uint64_t)CFSTR("AssetReader_SampleBufferNowAvailable"));
    assetReaderTrack_safelyPostNotificationWithExtractionID(a1, (uint64_t)CFSTR("AssetReader_EndOfDataReached"));
    FigSemaphoreSignal();
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void assetReaderTrack_defer_outputQueueBecameEmpty(void *a1)
{
  const void *v2;
  dispatch_queue_t *Storage;
  dispatch_queue_t *v4;

  v2 = (const void *)assetReaderTrack_copyRemaker((uint64_t)a1);
  Storage = (dispatch_queue_t *)remakerFamily_getStorage();
  if (v2)
  {
    v4 = Storage;
    if ((*(_DWORD *)Storage - 7) >= 0xFFFFFFFC && !assetReader_ensureRemakerQueue())
      remakerFamily_safeDispatchAsync(v4[7], a1, (dispatch_function_t)assetReaderTrack_outputQueueBecameEmpty);
    CFRelease(v2);
  }
}

void assetReaderTrack_safelyPostNotificationWithExtractionID(uint64_t a1, uint64_t a2)
{
  const void *v4;
  _DWORD *Storage;
  uint64_t v6;
  const void *v7;
  CFMutableDictionaryRef Mutable;

  v4 = (const void *)assetReaderTrack_copyRemaker(a1);
  Storage = (_DWORD *)remakerFamily_getStorage();
  if (!v4)
    return;
  if (*Storage > 6u)
  {
LABEL_10:
    CFRelease(v4);
    return;
  }
  if (!a1 || !*(_QWORD *)(a1 + 16) || (v6 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    FigSignalErrorAt();
    goto LABEL_10;
  }
  v7 = (const void *)v6;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE10], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  remakerFamily_safelyPostNotification(v4, 1, a2, (uint64_t)Mutable, v4);
  CFRelease(v4);
  if (Mutable)
    CFRelease(Mutable);
  CFRelease(v7);
}

uint64_t assetReaderTrack_copyRemaker(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v1)
    return 0;
  v2 = (const void *)v1;
  if (*(_QWORD *)(v1 + 16))
    v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v3 = 0;
  CFRelease(v2);
  return v3;
}

void assetReaderTrack_outputQueueBecameEmpty(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  const void *v5;

  if (a1 && *(_QWORD *)(a1 + 16) && (v2 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v3 = (_BYTE *)v2;
    v4 = assetReaderTrack_copyRemaker(a1);
    if (v4)
    {
      v5 = (const void *)v4;
      if (v3[360])
        remakerFamily_startNextSegmentIfMultiPassComplete((uint64_t)v3);
      CFRelease(v5);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t assetReaderTrack_setUpOutputVisualContextSemaphore(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *v7;
  uint64_t (*v8)(const void *, void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void (*)(uint64_t, void *), uint64_t);

  *(_QWORD *)(a1 + 80) = FigSemaphoreCreate();
  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(const __CFArray **)(a1 + 120);
    if (v2)
    {
      Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        v4 = Count;
        v5 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), v5);
          if (!ValueAtIndex)
            break;
          v7 = ValueAtIndex;
          v8 = *(uint64_t (**)(const void *, void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (!v8)
            return 4294954514;
          result = v8(v7, assetReaderTrack_sourceImageAvailable, a1);
          if ((_DWORD)result)
            return result;
          if (v4 == ++v5)
            goto LABEL_12;
        }
      }
    }
    return FigSignalErrorAt();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 112);
    v11 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v11)
    {
      result = v11(v10, assetReaderTrack_sourceImageAvailable, a1);
      if ((_DWORD)result)
        return result;
LABEL_12:
      v12 = *(_QWORD *)(a1 + 112);
      v13 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 24);
      if (v13)
      {
        result = v13(v12, assetReaderTrack_sourceNoMoreImages, a1);
        if ((_DWORD)result)
          return result;
        v14 = *(_QWORD *)(a1 + 112);
        v15 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, void *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 32);
        if (v15)
          return v15(v14, assetReaderTrack_defer_visualContextBecameEmpty, a1);
      }
    }
    return 4294954514;
  }
}

void assetReaderTrack_sourceImageAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const void *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  const void *ValueAtIndex;
  CMTime v11;
  CMTime time1;
  CMTime v13;
  CMTime v14;

  if (!a4 || !*(_QWORD *)(a4 + 16) || (v5 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    FigSignalErrorAt();
    return;
  }
  v6 = (const void *)v5;
  if (!*(_BYTE *)(a4 + 160))
    goto LABEL_19;
  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v7 = *(const __CFArray **)(a4 + 120);
  if (v7)
  {
    Count = CFArrayGetCount(v7);
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), 0);
    if (Count >= 1)
    {
      v9 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), v9);
        if (FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, (uint64_t)&v14, 0))goto LABEL_20;
        if (v9)
        {
          time1 = v13;
          v11 = v14;
          if (CMTimeCompare(&time1, &v11))
            goto LABEL_20;
        }
        else
        {
          v13 = v14;
        }
      }
      while (Count != ++v9);
    }
  }
  else
  {
    CFArrayGetValueAtIndex(0, 0);
  }
  time1 = v13;
  v11 = *(CMTime *)(a4 + 164);
  if (CMTimeCompare(&time1, &v11))
  {
    *(CMTime *)(a4 + 164) = v13;
LABEL_19:
    assetReaderTrack_safelyPostNotificationWithExtractionID(a4, (uint64_t)CFSTR("AssetReader_SampleBufferNowAvailable"));
    FigSemaphoreSignal();
  }
LABEL_20:
  CFRelease(v6);
}

void assetReaderTrack_sourceNoMoreImages(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  if (a2 && *(_QWORD *)(a2 + 16) && (v3 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v4 = (const void *)v3;
    assetReaderTrack_safelyPostNotificationWithExtractionID(a2, (uint64_t)CFSTR("AssetReader_SampleBufferNowAvailable"));
    assetReaderTrack_safelyPostNotificationWithExtractionID(a2, (uint64_t)CFSTR("AssetReader_EndOfDataReached"));
    FigSemaphoreSignal();
    CFRelease(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void assetReaderTrack_defer_visualContextBecameEmpty(uint64_t a1, void *a2)
{
  const void *v3;
  dispatch_queue_t *Storage;
  dispatch_queue_t *v5;

  v3 = (const void *)assetReaderTrack_copyRemaker((uint64_t)a2);
  Storage = (dispatch_queue_t *)remakerFamily_getStorage(v3);
  if (v3)
  {
    v5 = Storage;
    if (*(_DWORD *)Storage <= 6u && !assetReader_ensureRemakerQueue())
      remakerFamily_safeDispatchAsync(v5[7], a2, (dispatch_function_t)assetReaderTrack_visualContextBecameEmpty);
    CFRelease(v3);
  }
}

void assetReaderTrack_visualContextBecameEmpty(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  _DWORD *Storage;

  if (a1 && *(_QWORD *)(a1 + 16))
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v2 = 0;
  v3 = (const void *)assetReaderTrack_copyRemaker(a1);
  Storage = (_DWORD *)remakerFamily_getStorage(v3);
  if (v3)
  {
    if (v2)
    {
      if (*Storage <= 6u)
      {
        *(_BYTE *)(*(_QWORD *)(v2 + 152) + 200) = 1;
        if (*(_BYTE *)(v2 + 360))
          remakerFamily_startNextSegmentIfMultiPassComplete(v2);
      }
      CFRelease((CFTypeRef)v2);
    }
    else
    {
      FigSignalErrorAt();
    }
    goto LABEL_11;
  }
  v3 = (const void *)v2;
  if (v2)
LABEL_11:
    CFRelease(v3);
}

uint64_t assetReader_startExtractionForTimeRangeCommon(const void *a1)
{
  _DWORD *Storage;
  _DWORD *v3;
  uint64_t SinglePassPlaybackBoss;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _OWORD *v8;
  _OWORD *v9;
  char *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  uint64_t started;
  uint64_t v22;
  CMTimeRange v24;
  CMTime end;
  CMTime start;
  CMTimeRange v27;

  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage >= 7u)
    goto LABEL_41;
  v3 = Storage;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  SinglePassPlaybackBoss = assetReader_ensureRemakerQueue();
  if ((_DWORD)SinglePassPlaybackBoss)
  {
LABEL_38:
    v22 = SinglePassPlaybackBoss;
    goto LABEL_39;
  }
  Count = CFArrayGetCount(*((CFArrayRef *)v3 + 10));
  if (Count < 1)
  {
LABEL_28:
    if (*v3 != 1)
      goto LABEL_45;
    v20 = (const void *)*((_QWORD *)v3 + 47);
    if (v20)
    {
      CFRelease(v20);
      *((_QWORD *)v3 + 47) = 0;
    }
    SinglePassPlaybackBoss = remakerFamily_createSinglePassPlaybackBoss(a1, (_QWORD *)v3 + 47);
    if (!(_DWORD)SinglePassPlaybackBoss)
    {
LABEL_45:
      remakerFamily_SetRemakerState((uint64_t)a1, 3, 0);
      SinglePassPlaybackBoss = remakerfamily_updateClientPID();
      if (!(_DWORD)SinglePassPlaybackBoss)
      {
        SinglePassPlaybackBoss = remakerfamily_updateThrottleForBackground(a1);
        if (!(_DWORD)SinglePassPlaybackBoss)
        {
          SinglePassPlaybackBoss = remakerFamily_startAllSinglePassTracks((uint64_t)a1);
          if (!(_DWORD)SinglePassPlaybackBoss)
          {
            started = remakerFamily_startAllMultiPassTracks((uint64_t)a1, 0);
            goto LABEL_36;
          }
        }
      }
    }
    goto LABEL_38;
  }
  v6 = Count;
  v7 = 0;
  v8 = v3 + 22;
  v9 = v3 + 28;
  while (1)
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*((CFArrayRef *)v3 + 10), v7);
    v11 = (uint64_t)ValueAtIndex;
    if (!ValueAtIndex[360])
      break;
    if (*((_DWORD *)ValueAtIndex + 75))
    {
      if (*v3 == 3)
      {
        *(_OWORD *)&start.value = *v8;
        start.epoch = *((_QWORD *)v3 + 13);
        *(_OWORD *)&end.value = *v9;
        end.epoch = *((_QWORD *)v3 + 16);
        CMTimeRangeFromTimeToTime(&v27, &start, &end);
        SinglePassPlaybackBoss = remakerFamily_resetSourceRenderersForNextSegment(v11, (uint64_t)&v27, 1);
        if ((_DWORD)SinglePassPlaybackBoss)
          goto LABEL_38;
      }
      else
      {
        v18 = ValueAtIndex + 424;
        v19 = (const void *)*((_QWORD *)ValueAtIndex + 53);
        if (v19)
        {
          CFRelease(v19);
          *v18 = 0;
        }
        SinglePassPlaybackBoss = remakerFamily_createMultiPassPlaybackBossForTrack(v11, (_QWORD *)(v11 + 424));
        if ((_DWORD)SinglePassPlaybackBoss)
          goto LABEL_38;
      }
    }
LABEL_27:
    if (++v7 == v6)
      goto LABEL_28;
  }
  if ((*v3 - 3) > 2)
    goto LABEL_27;
  *(_OWORD *)&start.value = *v8;
  start.epoch = *((_QWORD *)v3 + 13);
  *(_OWORD *)&end.value = *v9;
  end.epoch = *((_QWORD *)v3 + 16);
  CMTimeRangeFromTimeToTime(&v24, &start, &end);
  SinglePassPlaybackBoss = remakerFamily_resetSourceRenderersForNextSegment(v11, (uint64_t)&v24, 1);
  if ((_DWORD)SinglePassPlaybackBoss)
    goto LABEL_38;
  v12 = *(_QWORD *)(v11 + 232);
  if (!v12)
    goto LABEL_27;
  *(_BYTE *)(v11 + 256) = 0;
  SinglePassPlaybackBoss = FigMediaProcessorReset(v12, 1);
  if ((_DWORD)SinglePassPlaybackBoss)
    goto LABEL_38;
  if (!*(_BYTE *)(*(_QWORD *)(v11 + 152) + 160))
    goto LABEL_27;
  v13 = *(const __CFArray **)(v11 + 240);
  if (!v13)
    goto LABEL_27;
  v14 = CFArrayGetCount(v13);
  if (v14 < 2)
    goto LABEL_27;
  v15 = v14;
  v16 = 1;
  while (1)
  {
    v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 240), v16);
    if (!v17)
      break;
    SinglePassPlaybackBoss = FigMediaProcessorReset((uint64_t)v17, 1);
    if ((_DWORD)SinglePassPlaybackBoss)
      goto LABEL_38;
    if (v15 == ++v16)
      goto LABEL_27;
  }
LABEL_41:
  started = FigSignalErrorAt();
LABEL_36:
  v22 = started;
  if ((_DWORD)started)
  {
LABEL_39:
    remakerfamily_setFailureStatusIfError((uint64_t)a1, v22);
    remakerFamily_invalidateAllMediaProcessors();
  }
  return v22;
}

uint64_t assetReader_getChannelByExtractionID(uint64_t a1, int a2)
{
  uint64_t Storage;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _DWORD *ValueAtIndex;

  Storage = remakerFamily_getStorage(a1);
  Count = CFArrayGetCount(*(CFArrayRef *)(Storage + 80));
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(Storage + 80), v6);
    if (ValueAtIndex[75] == a2)
      break;
    if (v5 == ++v6)
      return 0;
  }
  return *((_QWORD *)ValueAtIndex + 19);
}

const __CFArray *assetReader_outputBufferQueuesAtEndOfData(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  opaqueCMBufferQueue *ValueAtIndex;

  if (result)
  {
    v1 = result;
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v3 = Count;
      for (i = 0; i != v3; ++i)
      {
        ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(v1, i);
        result = (const __CFArray *)CMBufferQueueIsAtEndOfData(ValueAtIndex);
        if (!(_DWORD)result)
          break;
      }
    }
  }
  return result;
}

const __CFArray *assetReader_outputBufferQueuesIfDataReady(const __CFArray *result, CMTime *a2)
{
  const __CFArray *v3;
  CMTimeEpoch v4;
  CMTimeFlags v5;
  CFIndex Count;
  CFIndex v7;
  opaqueCMBufferQueue *ValueAtIndex;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int32_t v11;
  CMTime v12;
  CMTime time1;
  CMTimeValue v14;
  CMTimeScale v15;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = *MEMORY[0x1E0CA2E30];
  v15 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    v5 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(v3, v7);
        CMBufferQueueGetFirstPresentationTimeStamp(&time1, ValueAtIndex);
        value = time1.value;
        flags = time1.flags;
        timescale = time1.timescale;
        epoch = time1.epoch;
        if (CMBufferQueueIsEmpty(ValueAtIndex) || (flags & 1) == 0)
          break;
        if (v7)
        {
          time1.value = v14;
          time1.timescale = v15;
          time1.flags = v5;
          time1.epoch = v4;
          v12.value = value;
          v12.timescale = timescale;
          v12.flags = flags;
          v12.epoch = epoch;
          if (CMTimeCompare(&time1, &v12))
            break;
        }
        else
        {
          v14 = value;
          v15 = timescale;
          v5 = flags;
          v4 = epoch;
        }
        if (Count == ++v7)
        {
          v7 = Count;
          break;
        }
      }
    }
    time1.value = v14;
    time1.timescale = v15;
    time1.flags = v5;
    time1.epoch = v4;
    v12 = *a2;
    v11 = CMTimeCompare(&time1, &v12);
    result = 0;
    if (v7 == Count)
    {
      if (v11)
      {
        a2->value = v14;
        a2->timescale = v15;
        a2->flags = v5;
        a2->epoch = v4;
        return (const __CFArray *)1;
      }
    }
  }
  return result;
}

uint64_t assetReader_createTaggedBufferGroupSampleBuffer(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  uint64_t Count;
  uint64_t v6;
  __CFArray *Mutable;
  CFIndex v8;
  opaqueCMBufferQueue *ValueAtIndex;
  opaqueCMSampleBuffer *v10;
  uint64_t v11;
  CVImageBufferRef ImageBuffer;
  CFIndex v13;
  const void *v14;
  uint64_t (*v15)(const void *, uint64_t, CMTime *, uint64_t, void **, _QWORD, _QWORD);
  uint64_t v16;
  CMTime v18;
  CFTypeRef cf;
  void *value;
  CMTime v21;

  cf = 0;
  value = 0;
  v4 = *(const __CFArray **)(a1 + 152);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  v6 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_35:
    v16 = FigSignalErrorAt();
LABEL_24:
    v11 = v16;
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 72))
  {
    if (Count >= 1)
    {
      v8 = 0;
      do
      {
        ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), v8);
        if (!ValueAtIndex)
          goto LABEL_35;
        v10 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueIfDataReadyAndRetain(ValueAtIndex);
        v11 = (uint64_t)v10;
        if (!v10)
          goto LABEL_25;
        CMSampleBufferGetPresentationTimeStamp(&v21, v10);
        *(CMTime *)a2 = v21;
        if ((*(_BYTE *)(a2 + 12) & 1) == 0)
        {
          v11 = 0;
          goto LABEL_25;
        }
        ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v11);
        value = ImageBuffer;
        if (!ImageBuffer)
          goto LABEL_35;
        CFArrayAppendValue(Mutable, ImageBuffer);
        value = 0;
        CFRelease((CFTypeRef)v11);
      }
      while (Count != ++v8);
    }
LABEL_22:
    v16 = MEMORY[0x19402F0D8](v6, *(_QWORD *)(a1 + 152), Mutable, &cf);
    if (!(_DWORD)v16)
    {
      v21 = *(CMTime *)a2;
      v16 = FigSampleBufferCreateForTaggedBufferGroup();
    }
    goto LABEL_24;
  }
  if (Count < 1)
    goto LABEL_22;
  v13 = 0;
  while (1)
  {
    v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), v13);
    *(_OWORD *)&v18.value = *(_OWORD *)a2;
    v18.epoch = *(_QWORD *)(a2 + 16);
    v15 = *(uint64_t (**)(const void *, uint64_t, CMTime *, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v15)
      break;
    v21 = v18;
    v16 = v15(v14, v6, &v21, 3, &value, 0, 0);
    if ((_DWORD)v16)
      goto LABEL_24;
    if (!value)
      goto LABEL_35;
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    if (Count == ++v13)
      goto LABEL_22;
  }
  v11 = 4294954514;
LABEL_25:
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  return v11;
}

void assetReader_addValueToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t FigCaptionRendererStackLayoutRegionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererStackLayoutRegionProtocolGetProtocolID_sRegisterFigCaptionRendererStackLayoutRegionProtocolTypeOnce, RegisterFigCaptionRendererStackLayoutRegionProtocolType);
  return sFigCaptionRendererStackLayoutRegionProtocolID;
}

uint64_t RegisterFigCaptionRendererStackLayoutRegionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigBufferedAirPlayAudioChainSubPipeGetClassID()
{
  MEMORY[0x19402F294](&FigBufferedAirPlayAudioChainSubPipeGetClassID_sRegisterFigBufferedAirPlayAudioChainSubPipeTypeOnce, RegisterFigBufferedAirPlayAudioChainSubPipeType);
  return sFigBufferedAirPlayAudioChainSubPipeClassID;
}

uint64_t RegisterFigBufferedAirPlayAudioChainSubPipeType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigBufferedAirPlayAudioChainSubPipeGetTypeID()
{
  MEMORY[0x19402F294](&FigBufferedAirPlayAudioChainSubPipeGetClassID_sRegisterFigBufferedAirPlayAudioChainSubPipeTypeOnce, RegisterFigBufferedAirPlayAudioChainSubPipeType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigBufferedAirPlayAudioChainSubPipeCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBufferedAirPlayAudioChainSubPipe %p]"), a1);
}

uint64_t FigMetadataSerializerCreateForQuickTimeMetadata(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  if (!a2)
    return FigSignalErrorAt();
  FigMetadataSerializerGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    CMBaseObjectGetDerivedStorage();
    *a2 = 0;
  }
  return v3;
}

void FigQuickTimeMetadataSerializerFinalize()
{
  const void **DerivedStorage;
  const void **v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *v1 = 0;
    }
    v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    v4 = v1[2];
    if (v4)
    {
      CFRelease(v4);
      v1[2] = 0;
    }
    v5 = v1[3];
    if (v5)
    {
      CFRelease(v5);
      v1[3] = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

__CFString *FigQuickTimeMetadataSerializerCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v2 = DerivedStorage;
    CFStringAppendFormat(Mutable, 0, CFSTR(" FigQuickTimeMetadataSerializer %p\n"), DerivedStorage);
    CFStringAppendFormat(Mutable, 0, CFSTR("  - handle name: %@\n"), *(_QWORD *)(v2 + 24));
    CFStringAppendFormat(Mutable, 0, CFSTR("  - free atom size: %d\n"), *(unsigned int *)(v2 + 32));
    CFStringAppendFormat(Mutable, 0, CFSTR("  - minimum container size: %d\n"), *(unsigned int *)(v2 + 36));
    CFStringAppendFormat(Mutable, 0, CFSTR("%@"), *(_QWORD *)v2);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigQuickTimeMetadataSerializerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFString **v7;
  const __CFString *v8;
  void *v9;
  const __CFAllocator *v10;
  const void *v11;
  uint64_t result;
  void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = (const __CFString **)DerivedStorage;
  if (CFEqual(a2, CFSTR("handlerName")))
  {
    v8 = v7[3];
    if (!v8)
      return 4294954513;
    goto LABEL_4;
  }
  if (CFEqual(a2, CFSTR("freeAtomSize")))
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = v7 + 4;
LABEL_10:
    v9 = CFNumberCreate(v10, kCFNumberSInt32Type, v11);
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("minimumSize")))
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (char *)v7 + 36;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("format")))
  {
    v8 = CFSTR("com.apple.quicktime.mdta");
LABEL_4:
    v9 = (void *)CFRetain(v8);
LABEL_11:
    v13 = v9;
    result = 0;
    *a4 = v13;
    return result;
  }
  return 4294954512;
}

uint64_t FigQuickTimeMetadataSerializerSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const void *v8;
  uint64_t result;
  CFTypeID TypeID;
  CFTypeID v11;
  int v12;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(CFSTR("handlerName"), a2))
  {
    if (CFEqual(CFSTR("freeAtomSize"), a2))
    {
      if (a3)
      {
        TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          valuePtr = 0;
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          result = 0;
          *(_DWORD *)(v6 + 32) = valuePtr;
          return result;
        }
      }
    }
    else
    {
      if (!CFEqual(CFSTR("minimumSize"), a2))
        return 4294954710;
      if (a3)
      {
        v11 = CFNumberGetTypeID();
        if (v11 == CFGetTypeID(a3))
        {
          v12 = 0;
          CFNumberGetValue(a3, kCFNumberSInt32Type, &v12);
          result = 0;
          *(_DWORD *)(v6 + 36) = v12;
          return result;
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFStringGetTypeID();
  if (v7 != CFGetTypeID(a3))
    return FigSignalErrorAt();
  v8 = *(const void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = CFRetain(a3);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t FigQuickTimeMetadataSerializerAddItem(const void *a1, const __CFString *a2, const void *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef *v11;
  const __CFAllocator *v12;
  uint64_t ActualKey;
  CFTypeID v14;
  CFIndex v15;
  const void *ValueAtIndex;
  CFTypeID v17;
  CFTypeID v18;
  const void *TypeID;
  CFTypeID v20;
  const __CFAllocator *v21;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v23;
  CFMutableArrayRef v24;
  const __CFAllocator *v25;
  CFMutableArrayRef v26;
  CFTypeID v27;
  void *v28;
  const void *v29;
  const __CFAllocator *v30;
  __CFArray *v31;
  CFMutableDictionaryRef v32;
  CFMutableDictionaryRef v33;
  uint64_t v34;
  CFNumberRef v35;
  CFMutableDictionaryRef v36;
  const __CFDictionary *v37;
  const void *v38;
  CFMutableDictionaryRef v39;
  CFTypeID v41;
  int v42;
  CFIndex v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  CFTypeID v46;
  CFTypeID v47;
  uint64_t v48;
  CFTypeID v49;
  CFTypeID v50;
  CFTypeID v51;
  CFTypeID v52;
  void *key;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  void *value;
  int v57;
  CGRect valuePtr;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  theDict = 0;
  value = 0;
  key = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_80;
  if (!a2)
    goto LABEL_80;
  if (!a3)
    goto LABEL_80;
  if (!a4)
    goto LABEL_80;
  v11 = (CFMutableDictionaryRef *)DerivedStorage;
  if (CFStringGetLength(a2) != 4)
    goto LABEL_80;
  v12 = CFGetAllocator(a1);
  ActualKey = FigQuickTimeMetadataCreateActualKey(v12, a2, a3, (unint64_t)&cf, (__CFDictionary **)&key);
  if ((_DWORD)ActualKey)
    goto LABEL_81;
  v57 = 0;
  if (!a5
    || FigMetadataGetNumericalDataTypeForMetadataProperties((uint64_t)CFSTR("com.apple.quicktime.mdta"), a5, (uint64_t)CFSTR("com.apple.quicktime.mdta"), &v57, 0))
  {
    goto LABEL_26;
  }
  if (v57 > 64)
  {
    switch(v57)
    {
      case 'A':
      case 'B':
      case 'C':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
        goto LABEL_21;
      case 'F':
        v50 = CFGetTypeID(a4);
        if (v50 != CFDictionaryGetTypeID())
          goto LABEL_80;
        valuePtr.origin = 0uLL;
        LODWORD(TypeID) = CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr.origin);
        goto LABEL_25;
      case 'G':
        v51 = CFGetTypeID(a4);
        if (v51 != CFDictionaryGetTypeID())
          goto LABEL_80;
        valuePtr.origin = 0uLL;
        LODWORD(TypeID) = CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr);
        goto LABEL_25;
      case 'H':
        v52 = CFGetTypeID(a4);
        if (v52 != CFDictionaryGetTypeID())
          goto LABEL_80;
        memset(&valuePtr, 0, sizeof(valuePtr));
        LODWORD(TypeID) = CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr);
        goto LABEL_25;
      case 'O':
      case 'S':
        v14 = CFGetTypeID(a4);
        if (v14 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)a4) != 9)
          goto LABEL_80;
        v15 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, v15);
          if (!ValueAtIndex)
            goto LABEL_80;
          v17 = CFGetTypeID(ValueAtIndex);
          if (v17 != CFNumberGetTypeID())
            goto LABEL_80;
          if (++v15 == 9)
            goto LABEL_26;
        }
      case 'P':
      case 'Q':
        v41 = CFGetTypeID(a4);
        if (v41 != CFArrayGetTypeID())
          goto LABEL_80;
        v42 = v57;
        if (v57 != 80)
          goto LABEL_57;
        if (CFArrayGetCount((CFArrayRef)a4) < 3)
          goto LABEL_80;
        v42 = v57;
LABEL_57:
        if (v42 == 81 && CFArrayGetCount((CFArrayRef)a4) < 2)
          goto LABEL_80;
        if (CFArrayGetCount((CFArrayRef)a4) < 1)
          goto LABEL_26;
        v43 = 0;
        break;
      default:
        goto LABEL_82;
    }
    while (1)
    {
      v44 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a4, v43);
      valuePtr.origin = 0uLL;
      if (!v44)
        goto LABEL_80;
      v45 = v44;
      v46 = CFGetTypeID(v44);
      if (v46 != CFDictionaryGetTypeID() || !CGPointMakeWithDictionaryRepresentation(v45, &valuePtr.origin))
        goto LABEL_80;
      if (++v43 >= CFArrayGetCount((CFArrayRef)a4))
        goto LABEL_26;
    }
  }
  if ((v57 - 21) < 4)
  {
LABEL_21:
    v20 = CFGetTypeID(a4);
    if (v20 == CFNumberGetTypeID())
    {
LABEL_22:
      LODWORD(TypeID) = 1;
      goto LABEL_25;
    }
    v18 = CFGetTypeID(a4);
    TypeID = (const void *)CFBooleanGetTypeID();
    goto LABEL_24;
  }
  if ((v57 - 1) < 3)
  {
    v18 = CFGetTypeID(a4);
    TypeID = (const void *)CFStringGetTypeID();
LABEL_24:
    LODWORD(TypeID) = v18 == (_QWORD)TypeID;
    goto LABEL_25;
  }
  if (v57 != 30)
  {
LABEL_82:
    v18 = CFGetTypeID(a4);
    TypeID = (const void *)CFDataGetTypeID();
    goto LABEL_24;
  }
  v47 = CFGetTypeID(a4);
  if (v47 != CFDictionaryGetTypeID() || CFDictionaryGetCount((CFDictionaryRef)a4) != 4)
    goto LABEL_80;
  v48 = 0;
  *(_QWORD *)&valuePtr.origin.x = CFSTR("widthPixels");
  *(_QWORD *)&valuePtr.origin.y = CFSTR("heightPixels");
  *(_QWORD *)&valuePtr.size.width = CFSTR("widthPoints");
  *(_QWORD *)&valuePtr.size.height = CFSTR("heightPoints");
  while (1)
  {
    TypeID = CFDictionaryGetValue((CFDictionaryRef)a4, *(const void **)((char *)&valuePtr.origin.x + v48));
    if (!TypeID)
      break;
    v49 = CFGetTypeID(TypeID);
    if (v49 != CFNumberGetTypeID())
    {
      LODWORD(TypeID) = 0;
      break;
    }
    v48 += 8;
    if (v48 == 32)
      goto LABEL_22;
  }
LABEL_25:
  if (!(_DWORD)TypeID)
    goto LABEL_80;
LABEL_26:
  if (!*v11)
  {
    v21 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *v11 = Mutable;
    if (!Mutable)
      goto LABEL_80;
  }
  if (!v11[1])
  {
    v23 = CFGetAllocator(a1);
    v24 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
    v11[1] = v24;
    if (!v24)
      goto LABEL_80;
  }
  if (!v11[2])
  {
    v25 = CFGetAllocator(a1);
    v26 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]);
    v11[2] = v26;
    if (!v26)
      goto LABEL_80;
  }
  if (!CFDictionaryGetValueIfPresent(*v11, key, (const void **)&value))
  {
    v34 = FigQuickTimeMetadataCreateNewItem(a1, cf, a4, a5, &theDict);
    if (!(_DWORD)v34)
    {
      CFArrayAppendValue(v11[1], key);
      *(_QWORD *)&valuePtr.origin.x = CFArrayGetCount(v11[1]);
      v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
      v36 = theDict;
      CFDictionarySetValue(theDict, CFSTR("keyIndex"), v35);
      CFRelease(v35);
      CFDictionarySetValue(*v11, key, v36);
      CFArrayAppendValue(v11[2], v36);
      CFRelease(v36);
      theDict = 0;
    }
    goto LABEL_39;
  }
  v27 = CFGetTypeID(value);
  if (v27 != CFDictionaryGetTypeID())
  {
    ActualKey = FigQuickTimeMetadataCreateNewItem(a1, cf, a4, a5, &theDict);
    if ((_DWORD)ActualKey)
      goto LABEL_81;
    v37 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
    if (v37)
    {
      v38 = CFDictionaryGetValue(v37, CFSTR("keyIndex"));
      v39 = theDict;
      CFDictionarySetValue(theDict, CFSTR("keyIndex"), v38);
      CFArrayAppendValue((CFMutableArrayRef)value, v39);
      CFArrayAppendValue(v11[2], v39);
      v33 = v39;
      goto LABEL_47;
    }
LABEL_80:
    ActualKey = FigSignalErrorAt();
    goto LABEL_81;
  }
  v28 = value;
  v29 = CFDictionaryGetValue((CFDictionaryRef)value, CFSTR("keyIndex"));
  ActualKey = FigQuickTimeMetadataCreateNewItem(a1, cf, a4, a5, &theDict);
  if (!(_DWORD)ActualKey)
  {
    v30 = CFGetAllocator(a1);
    v31 = CFArrayCreateMutable(v30, 0, MEMORY[0x1E0C9B378]);
    if (!value)
    {
      v34 = FigSignalErrorAt();
      goto LABEL_40;
    }
    v32 = theDict;
    CFDictionarySetValue(theDict, CFSTR("keyIndex"), v29);
    CFArrayAppendValue(v31, v28);
    CFArrayAppendValue(v31, v32);
    CFDictionarySetValue(*v11, key, v31);
    CFArrayAppendValue(v11[2], v32);
    CFRelease(v32);
    v33 = v31;
LABEL_47:
    CFRelease(v33);
    v34 = 0;
    goto LABEL_48;
  }
LABEL_81:
  v34 = ActualKey;
LABEL_39:
  v31 = 0;
LABEL_40:
  if (theDict)
    CFRelease(theDict);
  if (v31)
    CFRelease(v31);
LABEL_48:
  if (cf)
    CFRelease(cf);
  if (key)
    CFRelease(key);
  return v34;
}

uint64_t FigQuickTimeMetadataSerializerContainsKey(const void *a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFDictionaryRef *v7;
  const __CFAllocator *v8;
  int ActualKey;
  void *v10;
  uint64_t v11;
  void *key;

  key = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3 || (v7 = (CFDictionaryRef *)DerivedStorage, CFStringGetLength(a2) != 4))
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!*v7)
    return 0;
  v8 = CFGetAllocator(a1);
  ActualKey = FigQuickTimeMetadataCreateActualKey(v8, a2, a3, 0, (__CFDictionary **)&key);
  v10 = key;
  if (ActualKey)
  {
    v11 = 0;
    if (!key)
      return v11;
    goto LABEL_8;
  }
  v11 = CFDictionaryContainsKey(*v7, key);
  v10 = key;
  if (key)
LABEL_8:
    CFRelease(v10);
  return v11;
}

uint64_t FigQuickTimeMetadataCreateActualKey(const __CFAllocator *a1, const __CFString *cf1, const void *ValueAtIndex, unint64_t a4, __CFDictionary **a5)
{
  const __CFString *v8;
  CFTypeID v10;
  uint64_t v11;
  CFTypeID v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  CFTypeRef v15;
  uint64_t v16;
  CFArrayRef theArray;

  theArray = 0;
  if (!(a4 | (unint64_t)a5))
    goto LABEL_17;
  v8 = cf1;
  if (!CFEqual(cf1, CFSTR("comn")))
  {
    if (!CFEqual(v8, CFSTR("mdta")))
      goto LABEL_10;
    v12 = CFGetTypeID(ValueAtIndex);
    if (v12 == CFStringGetTypeID())
      goto LABEL_10;
    goto LABEL_17;
  }
  v10 = CFGetTypeID(ValueAtIndex);
  if (v10 != CFStringGetTypeID())
    goto LABEL_17;
  v11 = FigQuickTimeMetadataCopyNativeKeysFromCommonKey(ValueAtIndex, &theArray);
  if (!(_DWORD)v11)
  {
    if (theArray && CFArrayGetCount(theArray))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      v8 = CFSTR("mdta");
LABEL_10:
      if (!a5)
        goto LABEL_13;
      Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v14 = Mutable;
        CFDictionaryAddValue(Mutable, CFSTR("key"), ValueAtIndex);
        CFDictionaryAddValue(v14, CFSTR("keyspace"), v8);
        *a5 = v14;
LABEL_13:
        if (a4)
        {
          if (ValueAtIndex)
            v15 = CFRetain(ValueAtIndex);
          else
            v15 = 0;
          v16 = 0;
          *(_QWORD *)a4 = v15;
        }
        else
        {
          v16 = 0;
        }
        goto LABEL_21;
      }
    }
LABEL_17:
    v11 = FigSignalErrorAt();
  }
  v16 = v11;
LABEL_21:
  if (theArray)
    CFRelease(theArray);
  return v16;
}

uint64_t FigQuickTimeMetadataCreateNewItem(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  const __CFAllocator *v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;

  v9 = CFGetAllocator(a1);
  if (a4)
    MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, a4);
  else
    MutableCopy = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = MutableCopy;
  if (!MutableCopy)
    return FigSignalErrorAt();
  CFDictionarySetValue(MutableCopy, CFSTR("value"), a3);
  CFDictionarySetValue(v11, CFSTR("key"), a2);
  *a5 = v11;
  return 0;
}

uint64_t FigQuickTimeMetadataSerializerCreateBBuf(const void *a1, CMBlockBufferRef *a2)
{
  const __CFDictionary **DerivedStorage;
  const __CFDictionary **v5;
  const __CFDictionary *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  CMBlockBufferRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFAllocatorRef *v14;
  uint64_t BytesFromCFString;
  void *v16;
  uint64_t appended;
  const __CFArray *v18;
  unint64_t Count;
  unint64_t v20;
  CFIndex v21;
  const __CFAllocator *v22;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFString *v25;
  CFTypeID v26;
  CFTypeID TypeID;
  void *BytePtr;
  uint64_t v29;
  CFIndex v30;
  CFIndex Bytes;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  const __CFArray *v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  const __CFDictionary *v39;
  const __CFNumber *v40;
  unint64_t UInt64;
  const __CFData *DataValue;
  CFIndex Length;
  const void *v44;
  const __CFString *v45;
  CFTypeID v46;
  uint64_t v47;
  const __CFLocale *v48;
  const __CFLocale *v49;
  unsigned int PackedISO639_2TFromLocale;
  const __CFString *v51;
  int CString;
  unsigned int v53;
  CFTypeID v54;
  CFTypeID v55;
  CFTypeID v56;
  CFTypeID v57;
  CFIndex ByteSize;
  int8x8_t *v59;
  int v60;
  CFTypeID v61;
  CFStringRef v62;
  CFTypeID v63;
  uint64_t v64;
  void *v65;
  const __CFNumber *v66;
  CFNumberType v67;
  const __CFNumber *v68;
  CFNumberType v69;
  CFTypeID v70;
  int v71;
  CFIndex v72;
  const __CFDictionary *v73;
  const __CFDictionary *v74;
  CFTypeID v75;
  uint64_t v76;
  CFTypeID v77;
  CFTypeID v78;
  CFTypeID v79;
  CFTypeID v80;
  CFTypeID v81;
  CFTypeID v82;
  uint64_t v83;
  int8x16_t *v84;
  const __CFNumber *v85;
  const __CFNumber *v86;
  CFTypeID v87;
  CFTypeID v88;
  CFTypeID v89;
  CFTypeID v90;
  uint64_t v91;
  CFTypeID v92;
  uint64_t v93;
  CGRect *v94;
  const __CFNumber *v95;
  const __CFNumber *v96;
  CFTypeID v97;
  uint64_t v99;
  uint64_t v101;
  size_t v103;
  const __CFAllocator *v104;
  CMBlockBufferRef *v105;
  CMBlockBufferRef *v106;
  uint64_t v107;
  const __CFString *v108;
  uint64_t v109;
  _OWORD v110[3];
  uint64_t v111;
  CMBlockBufferRef blockBufferOut;
  _OWORD v113[3];
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  UInt8 buffer[16];
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  int valuePtr;
  CFStringRef v124;
  CFIndex v125;
  uint64_t v126;
  unsigned int v127;
  CGRect point[2];
  int8x16_t v129;
  uint64_t v130;
  CFRange v131;

  v130 = *MEMORY[0x1E0C80C00];
  v111 = 0;
  blockBufferOut = 0;
  memset(v110, 0, sizeof(v110));
  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v8 = FigSignalErrorAt();
    v9 = 0;
    goto LABEL_211;
  }
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = *DerivedStorage;
  if ((!v6 || !CFDictionaryGetCount(v6)) && !v5[3] && !*((_DWORD *)v5 + 8) && !*((_DWORD *)v5 + 9))
  {
    v9 = 0;
    v8 = 0;
    goto LABEL_211;
  }
  v7 = CFGetAllocator(a1);
  v8 = CMBlockBufferCreateEmpty(v7, 8u, 0, &blockBufferOut);
  v9 = blockBufferOut;
  if ((_DWORD)v8)
  {
LABEL_223:
    if (v9)
      CFRelease(v9);
    return v8;
  }
  v10 = FigAtomWriterInitWithBlockBuffer();
  if ((_DWORD)v10)
  {
    v8 = v10;
    v9 = blockBufferOut;
    goto LABEL_223;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = FigAtomWriterBeginAtom();
  if ((_DWORD)v12)
    goto LABEL_209;
  v114 = 0;
  memset(v113, 0, sizeof(v113));
  v12 = FigAtomWriterInitWithParent();
  if ((_DWORD)v12)
    goto LABEL_209;
  *(_QWORD *)buffer = 0;
  memset(point, 0, 26);
  v13 = CMBaseObjectGetDerivedStorage();
  LODWORD(point[0].origin.y) = 1635017837;
  v12 = FigAtomWriterBeginAtom();
  if ((_DWORD)v12)
    goto LABEL_209;
  v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v107 = v11;
  if (*(_QWORD *)(v13 + 24))
  {
    BytesFromCFString = FigCreateBytesFromCFString();
    if (!BytesFromCFString)
    {
      v8 = FigSignalErrorAt();
      if ((_DWORD)v8)
        goto LABEL_210;
      goto LABEL_24;
    }
    v16 = (void *)BytesFromCFString;
  }
  else
  {
    v16 = 0;
  }
  appended = FigAtomWriterAppendData();
  if (!(_DWORD)appended)
  {
    if (*(uint64_t *)buffer < 1 || (appended = FigAtomWriterAppendData(), !(_DWORD)appended))
      appended = FigAtomWriterEndAtom();
  }
  v8 = appended;
  if (v16)
    CFAllocatorDeallocate(*v14, v16);
  if (!(_DWORD)v8)
  {
LABEL_24:
    v129.i32[0] = 0;
    point[0].origin.x = 0.0;
    LODWORD(v125) = 0;
    v109 = CMBaseObjectGetDerivedStorage();
    v18 = *(const __CFArray **)(v109 + 8);
    if (!v18)
      goto LABEL_45;
    Count = CFArrayGetCount(v18);
    if (!Count)
      goto LABEL_45;
    v20 = Count;
    if (HIDWORD(Count))
    {
      v8 = FigSignalErrorAt();
      if ((_DWORD)v8)
        goto LABEL_210;
      goto LABEL_45;
    }
    v12 = FigAtomWriterBeginAtom();
    if ((_DWORD)v12)
      goto LABEL_209;
    v12 = FigAtomWriterAppendVersionAndFlags();
    if ((_DWORD)v12)
      goto LABEL_209;
    LODWORD(v115) = bswap32(v20);
    v12 = FigAtomWriterAppendData();
    if ((_DWORD)v12)
      goto LABEL_209;
    v21 = 0;
    v22 = *v14;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v109 + 8), v21);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
      v25 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
      point[0].origin.x = 0.0;
      v26 = CFGetTypeID(Value);
      TypeID = CFStringGetTypeID();
      if (v26 == TypeID)
      {
        BytePtr = (void *)FigCreateBytesFromCFString();
        if (!BytePtr)
        {
          v101 = FigSignalErrorAt();
LABEL_44:
          v8 = v101;
          v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
          if ((_DWORD)v101)
            break;
LABEL_45:
          v34 = CMBaseObjectGetDerivedStorage();
          v12 = FigAtomWriterBeginAtom();
          if (!(_DWORD)v12)
          {
            v118 = 0;
            v116 = 0u;
            v117 = 0u;
            v115 = 0u;
            v12 = FigAtomWriterInitWithParent();
            if (!(_DWORD)v12)
            {
              v35 = *(const __CFArray **)(v34 + 16);
              if (v35)
              {
                v36 = CFArrayGetCount(v35);
                if (v36 >= 1)
                {
                  v37 = v36;
                  v38 = 0;
                  v108 = (const __CFString *)*MEMORY[0x1E0C9B060];
                  v104 = *v14;
                  while (1)
                  {
                    v39 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 16), v38);
                    valuePtr = 0;
                    v122 = 0;
                    v120 = 0u;
                    v121 = 0u;
                    *(_OWORD *)buffer = 0u;
                    v40 = (const __CFNumber *)CFDictionaryGetValue(v39, CFSTR("keyIndex"));
                    CFNumberGetValue(v40, kCFNumberSInt32Type, &valuePtr);
                    v12 = FigAtomWriterBeginAtom();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterInitWithParent();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    if (!CFDictionaryContainsKey(v39, CFSTR("storageLocation")))
                      break;
                    if (!FigCFDictionaryGetDictionaryValue()
                      || !FigCFDictionaryGetNumberValue()
                      || (UInt64 = FigCFNumberGetUInt64(),
                          (DataValue = (const __CFData *)FigCFDictionaryGetDataValue()) == 0))
                    {
                      v91 = FigSignalErrorAt();
                      goto LABEL_178;
                    }
                    Length = CFDataGetLength(DataValue);
                    LODWORD(v125) = 0;
                    LODWORD(v124) = 0;
                    BYTE4(v126) = -120;
                    LOWORD(v127) = 0;
                    *(_QWORD *)&point[0].origin.x = bswap64(UInt64);
                    v129.i64[0] = bswap64(Length);
                    v12 = FigAtomWriterBeginAtom();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterAppendData();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterAppendData();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterAppendData();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterAppendData();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterAppendData();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterAppendData();
                    if ((_DWORD)v12)
                      goto LABEL_209;
                    v12 = FigAtomWriterEndAtom();
                    if ((_DWORD)v12)
                      goto LABEL_209;
LABEL_177:
                    v91 = FigAtomWriterEndAtom();
LABEL_178:
                    v8 = v91;
                    if ((_DWORD)v91)
                      goto LABEL_210;
                    if (++v38 == v37)
                      goto LABEL_206;
                  }
                  v126 = 0;
                  v124 = 0;
                  v125 = 0;
                  v12 = FigAtomWriterBeginAtom();
                  if ((_DWORD)v12)
                    goto LABEL_209;
                  v44 = CFDictionaryGetValue(v39, CFSTR("value"));
                  if (v44)
                    v45 = (const __CFString *)CFRetain(v44);
                  else
                    v45 = 0;
                  v127 = 0;
                  if (FigMetadataGetNumericalDataTypeForMetadataProperties((uint64_t)CFSTR("com.apple.quicktime.mdta"), v39, (uint64_t)CFSTR("com.apple.quicktime.mdta"), &v126, &v125))
                  {
                    v46 = CFGetTypeID(v45);
                    if (v46 == CFStringGetTypeID() || v46 == CFDateGetTypeID())
                    {
                      LODWORD(v126) = 1;
                      goto LABEL_73;
                    }
                    if (v46 == CFNumberGetTypeID() || v46 == CFBooleanGetTypeID())
                    {
                      if (CFNumberIsFloatType((CFNumberRef)v45))
                      {
                        if (CFNumberGetByteSize((CFNumberRef)v45) == 4)
                          v60 = 23;
                        else
                          v60 = 24;
LABEL_197:
                        LODWORD(v126) = v60;
                      }
                      else
                      {
                        LODWORD(v126) = 21;
                        if (CFNumberGetByteSize((CFNumberRef)v45) == 8)
                        {
                          point[0].origin.x = 0.0;
                          point[0].origin.y = 0.0;
                          CFNumberGetValue((CFNumberRef)v45, kCFNumberMaxType|kCFNumberSInt8Type, point);
                          if (!*(_QWORD *)&point[0].origin.x
                            && (*(_QWORD *)&point[0].origin.y & 0x8000000000000000) != 0)
                          {
                            v60 = 22;
                            goto LABEL_197;
                          }
                        }
                      }
                    }
                  }
                  else if ((v126 - 23) >= 0xFFFFFFFE)
                  {
                    if (v45)
                    {
                      v54 = CFGetTypeID(v45);
                      if (v54 == CFNumberGetTypeID() || (v55 = CFGetTypeID(v45), v55 == CFBooleanGetTypeID()))
                      {
                        if (v125 && !FigMetadataDataLengthCanHoldValue(v125, v126 == 21, (CFNumberRef)v45))
                          v125 = 0;
                      }
                    }
                  }
LABEL_73:
                  v127 = bswap32(v126 & 0xFFFFFF);
                  v47 = FigAtomWriterAppendData();
                  if ((_DWORD)v47)
                    goto LABEL_202;
                  v48 = (const __CFLocale *)CFDictionaryGetValue(v39, CFSTR("locale"));
                  if (v48)
                  {
                    v49 = v48;
                    PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2TFromLocale(v48);
                    v51 = (const __CFString *)CFLocaleGetValue(v49, v108);
                    if (v51)
                    {
                      BYTE2(point[0].origin.x) = 0;
                      LOWORD(point[0].origin.x) = 0;
                      CString = CFStringGetCString(v51, (char *)point, 3, 0x600u);
                      v53 = bswap32(LOWORD(point[0].origin.x)) >> 16;
                      if (!CString)
                        v53 = 0;
LABEL_88:
                      HIWORD(v126) = __rev16(PackedISO639_2TFromLocale);
                      WORD2(v126) = __rev16(v53);
                      v47 = FigAtomWriterAppendData();
                      if (!(_DWORD)v47)
                      {
                        switch((int)v126)
                        {
                          case 'A':
                          case 'K':
LABEL_90:
                            LOBYTE(point[0].origin.x) = 0;
                            CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt8Type, point);
                            goto LABEL_118;
                          case 'B':
                          case 'L':
LABEL_97:
                            LOWORD(point[0].origin.x) = 0;
                            CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt16Type, point);
                            LOWORD(point[0].origin.x) = bswap32(LOWORD(point[0].origin.x)) >> 16;
                            goto LABEL_118;
                          case 'C':
                          case 'M':
LABEL_114:
                            LODWORD(point[0].origin.x) = 0;
                            v66 = (const __CFNumber *)v45;
                            v67 = kCFNumberSInt32Type;
LABEL_115:
                            CFNumberGetValue(v66, v67, point);
                            LODWORD(point[0].origin.x) = bswap32(LODWORD(point[0].origin.x));
                            goto LABEL_118;
                          case 'D':
                          case 'E':
                          case 'I':
LABEL_136:
                            if (!v45)
                              goto LABEL_169;
                            v77 = CFGetTypeID(v45);
                            if (v77 != CFDataGetTypeID())
                              goto LABEL_169;
                            CFDataGetLength((CFDataRef)v45);
                            CFDataGetBytePtr((CFDataRef)v45);
                            goto LABEL_118;
                          case 'F':
                            if (!v45)
                              goto LABEL_169;
                            v88 = CFGetTypeID(v45);
                            if (v88 != CFDictionaryGetTypeID())
                              goto LABEL_169;
                            point[0].origin.x = 0.0;
                            point[0].origin.y = 0.0;
                            if (!CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)v45, &point[0].origin))
                              goto LABEL_169;
                            goto LABEL_163;
                          case 'G':
                            if (!v45)
                              goto LABEL_169;
                            v89 = CFGetTypeID(v45);
                            if (v89 != CFDictionaryGetTypeID())
                              goto LABEL_169;
                            point[0].origin.x = 0.0;
                            point[0].origin.y = 0.0;
                            if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v45, (CGSize *)point))
                              goto LABEL_169;
LABEL_163:
                            *(int8x8_t *)v129.i8 = vrev32_s8((int8x8_t)vcvt_f32_f64((float64x2_t)point[0].origin));
                            goto LABEL_168;
                          case 'H':
                            if (!v45)
                              goto LABEL_169;
                            v90 = CFGetTypeID(v45);
                            if (v90 != CFDictionaryGetTypeID())
                              goto LABEL_169;
                            memset(point, 0, 32);
                            if (!CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v45, point))
                              goto LABEL_169;
                            v129 = vrev32q_s8((int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)point[0].origin), (float64x2_t)point[0].size));
LABEL_168:
                            v47 = FigAtomWriterAppendData();
                            if (!(_DWORD)v47)
                              goto LABEL_169;
                            goto LABEL_202;
                          case 'J':
                          case 'N':
LABEL_116:
                            point[0].origin.x = 0.0;
                            v68 = (const __CFNumber *)v45;
                            v69 = kCFNumberSInt64Type;
LABEL_117:
                            CFNumberGetValue(v68, v69, point);
                            *(_QWORD *)&point[0].origin.x = bswap64(*(unint64_t *)&point[0].origin.x);
LABEL_118:
                            v8 = FigAtomWriterAppendData();
                            v59 = 0;
                            if (!(_DWORD)v8)
                              goto LABEL_170;
                            goto LABEL_172;
                          case 'O':
                            v105 = a2;
                            if (!v45)
                              goto LABEL_190;
                            v92 = CFGetTypeID(v45);
                            if (v92 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v45) != 9)
                              goto LABEL_190;
                            v93 = -9;
                            v94 = point;
                            do
                            {
                              v95 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v45, v93 + 9);
                              if (!v95)
                                goto LABEL_190;
                              v96 = v95;
                              v97 = CFGetTypeID(v95);
                              if (v97 != CFNumberGetTypeID())
                                goto LABEL_190;
                              CFNumberGetValue(v96, kCFNumberDoubleType, v94);
                              *(_QWORD *)&v94->origin.x = bswap64(*(_QWORD *)&v94->origin.x);
                              v94 = (CGRect *)((char *)v94 + 8);
                            }
                            while (!__CFADD__(v93++, 1));
                            v99 = FigAtomWriterAppendData();
                            if (!(_DWORD)v99)
                            {
LABEL_190:
                              v59 = 0;
                              goto LABEL_191;
                            }
                            v8 = v99;
                            v59 = 0;
LABEL_204:
                            a2 = v105;
                            goto LABEL_172;
                          case 'P':
                          case 'Q':
                            if (!v45)
                              goto LABEL_169;
                            v70 = CFGetTypeID(v45);
                            if (v70 != CFArrayGetTypeID())
                              goto LABEL_169;
                            v71 = v126;
                            if ((_DWORD)v126 != 80)
                              goto LABEL_125;
                            if (CFArrayGetCount((CFArrayRef)v45) < 3)
                              goto LABEL_169;
                            v71 = v126;
LABEL_125:
                            if (v71 == 81 && CFArrayGetCount((CFArrayRef)v45) < 2)
                              goto LABEL_169;
                            v105 = a2;
                            point[0].origin.x = 0.0;
                            point[0].origin.y = 0.0;
                            v103 = 8 * CFArrayGetCount((CFArrayRef)v45);
                            v59 = (int8x8_t *)malloc_type_calloc(1uLL, v103, 0xF2F7A319uLL);
                            if (!v59)
                            {
                              v8 = FigSignalErrorAt();
                              goto LABEL_204;
                            }
                            if (CFArrayGetCount((CFArrayRef)v45) < 1)
                              goto LABEL_134;
                            v72 = 0;
                            do
                            {
                              v73 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v45, v72);
                              if (!v73
                                || (v74 = v73, v75 = CFGetTypeID(v73), v75 != CFDictionaryGetTypeID())
                                || !CGPointMakeWithDictionaryRepresentation(v74, &point[0].origin))
                              {
LABEL_191:
                                a2 = v105;
                                goto LABEL_170;
                              }
                              v59[v72++] = vrev32_s8((int8x8_t)vcvt_f32_f64((float64x2_t)point[0].origin));
                            }
                            while (v72 < CFArrayGetCount((CFArrayRef)v45));
LABEL_134:
                            v76 = FigAtomWriterAppendData();
                            a2 = v105;
                            if (!(_DWORD)v76)
                              goto LABEL_170;
                            goto LABEL_171;
                          default:
                            switch((int)v126)
                            {
                              case 21:
                              case 22:
                                v56 = CFGetTypeID(v45);
                                if (v56 != CFNumberGetTypeID())
                                {
                                  v57 = CFGetTypeID(v45);
                                  if (v57 != CFBooleanGetTypeID())
                                    goto LABEL_169;
                                }
                                ByteSize = v125;
                                if (!v125)
                                  ByteSize = CFNumberGetByteSize((CFNumberRef)v45);
                                v59 = 0;
                                v8 = 4294954709;
                                switch(ByteSize)
                                {
                                  case 1:
                                    goto LABEL_90;
                                  case 2:
                                    goto LABEL_97;
                                  case 4:
                                    goto LABEL_114;
                                  case 8:
                                    goto LABEL_116;
                                  default:
                                    goto LABEL_172;
                                }
                                goto LABEL_172;
                              case 23:
                                if (!v45)
                                  goto LABEL_169;
                                v78 = CFGetTypeID(v45);
                                if (v78 != CFNumberGetTypeID())
                                {
                                  v79 = CFGetTypeID(v45);
                                  if (v79 != CFBooleanGetTypeID())
                                    goto LABEL_169;
                                }
                                LODWORD(point[0].origin.x) = 0;
                                v66 = (const __CFNumber *)v45;
                                v67 = kCFNumberFloat32Type;
                                goto LABEL_115;
                              case 24:
                                if (!v45)
                                  goto LABEL_169;
                                v80 = CFGetTypeID(v45);
                                if (v80 != CFNumberGetTypeID())
                                {
                                  v81 = CFGetTypeID(v45);
                                  if (v81 != CFBooleanGetTypeID())
                                    goto LABEL_169;
                                }
                                point[0].origin.x = 0.0;
                                v68 = (const __CFNumber *)v45;
                                v69 = kCFNumberFloat64Type;
                                goto LABEL_117;
                              case 25:
                              case 26:
                              case 27:
                              case 28:
                              case 29:
                                goto LABEL_136;
                              case 30:
                                if (!v45)
                                  goto LABEL_169;
                                v82 = CFGetTypeID(v45);
                                if (v82 != CFDictionaryGetTypeID() || CFDictionaryGetCount((CFDictionaryRef)v45) != 4)
                                  goto LABEL_169;
                                v106 = a2;
                                v83 = 0;
                                *(_QWORD *)&point[0].origin.x = CFSTR("widthPixels");
                                *(_QWORD *)&point[0].origin.y = CFSTR("heightPixels");
                                v84 = &v129;
                                *(_QWORD *)&point[0].size.width = CFSTR("widthPoints");
                                *(_QWORD *)&point[0].size.height = CFSTR("heightPoints");
                                break;
                              default:
                                if ((v126 - 1) >= 3)
                                  goto LABEL_136;
                                if (!v45)
                                  goto LABEL_169;
                                v61 = CFGetTypeID(v45);
                                if (v61 != CFDateGetTypeID())
                                  goto LABEL_109;
                                v47 = FigMetadataCopyISO8601GMTStringFromDate((const __CFDate *)v45, &v124);
                                if ((_DWORD)v47)
                                  goto LABEL_202;
                                v62 = v124;
                                if (!v124)
                                {
                                  CFRelease(v45);
                                  v59 = 0;
                                  v45 = 0;
                                  goto LABEL_170;
                                }
                                CFRetain(v124);
                                CFRelease(v45);
                                v45 = v62;
LABEL_109:
                                v63 = CFGetTypeID(v45);
                                if (v63 != CFStringGetTypeID())
                                  goto LABEL_169;
                                point[0].origin.x = 0.0;
                                if (!CFStringGetLength(v45))
                                  goto LABEL_169;
                                v64 = FigCreateBytesFromCFString();
                                if (!v64)
                                {
                                  v47 = FigSignalErrorAt();
                                  goto LABEL_202;
                                }
                                v65 = (void *)v64;
                                v8 = FigAtomWriterAppendData();
                                CFAllocatorDeallocate(v104, v65);
                                if (!(_DWORD)v8)
                                  goto LABEL_169;
                                goto LABEL_113;
                            }
                            break;
                        }
                        do
                        {
                          v85 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v45, *(const void **)((char *)&point[0].origin.x + v83));
                          if (!v85 || (v86 = v85, v87 = CFGetTypeID(v85), v87 != CFNumberGetTypeID()))
                          {
                            a2 = v106;
                            goto LABEL_169;
                          }
                          CFNumberGetValue(v86, kCFNumberSInt32Type, v84);
                          v84->i32[0] = bswap32(v84->i32[0]);
                          v84 = (int8x16_t *)((char *)v84 + 4);
                          v83 += 8;
                        }
                        while (v83 != 32);
                        v47 = FigAtomWriterAppendData();
                        a2 = v106;
                        if ((_DWORD)v47)
                          goto LABEL_202;
LABEL_169:
                        v59 = 0;
LABEL_170:
                        v76 = FigAtomWriterEndAtom();
LABEL_171:
                        v8 = v76;
LABEL_172:
                        if (v124)
                          CFRelease(v124);
                        free(v59);
                        if (v45)
                          CFRelease(v45);
                        if ((_DWORD)v8)
                          break;
                        goto LABEL_177;
                      }
LABEL_202:
                      v8 = v47;
LABEL_113:
                      v59 = 0;
                      goto LABEL_172;
                    }
                  }
                  else
                  {
                    PackedISO639_2TFromLocale = 0;
                  }
                  v53 = 0;
                  goto LABEL_88;
                }
              }
LABEL_206:
              v12 = FigAtomWriterEndAtom();
              if (!(_DWORD)v12)
              {
                v12 = FigMetadataWriteFreeAtom((uint64_t)v110, (uint64_t)v113, *(unsigned int *)(v107 + 32), *(unsigned int *)(v107 + 36));
                if (!(_DWORD)v12)
                  v12 = FigAtomWriterEndAtom();
              }
            }
          }
LABEL_209:
          v8 = v12;
          break;
        }
      }
      else
      {
        *(_QWORD *)&point[0].origin.x = CFDataGetLength((CFDataRef)Value);
        BytePtr = (void *)CFDataGetBytePtr((CFDataRef)Value);
      }
      v129.i32[0] = bswap32(LODWORD(point[0].origin.x) + 8);
      v29 = FigAtomWriterAppendData();
      if ((_DWORD)v29)
        goto LABEL_215;
      *(_DWORD *)buffer = 0;
      v30 = CFStringGetLength(v25);
      v131.location = 0;
      v131.length = v30;
      Bytes = CFStringGetBytes(v25, v131, 0, 0, 0, buffer, 4, 0);
      v32 = *(_DWORD *)buffer;
      v33 = bswap32(*(unsigned int *)buffer);
      if (v30 == Bytes)
        v32 = v33;
      LODWORD(v125) = bswap32(v32);
      v29 = FigAtomWriterAppendData();
      if ((_DWORD)v29 || (v29 = FigAtomWriterAppendData(), (_DWORD)v29))
      {
LABEL_215:
        v8 = v29;
        if (v26 == TypeID && BytePtr != 0)
          CFAllocatorDeallocate(v22, BytePtr);
        break;
      }
      if (v26 == TypeID)
        CFAllocatorDeallocate(v22, BytePtr);
      if (v20 == ++v21)
      {
        v101 = FigAtomWriterEndAtom();
        goto LABEL_44;
      }
    }
  }
LABEL_210:
  v9 = blockBufferOut;
LABEL_211:
  if (!a2 || (_DWORD)v8)
    goto LABEL_223;
  *a2 = v9;
  return v8;
}

uint64_t FigQuickTimeMetadataSerializerCreateCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  _QWORD *v9;
  CFMutableDictionaryRef MutableCopy;
  const __CFArray *v11;
  CFMutableArrayRef v12;
  const __CFArray *v13;
  CFMutableArrayRef v14;
  CFTypeRef v15;
  const void *v17;

  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v7 = FigSignalErrorAt();
    v8 = 0;
    if (!a3)
      goto LABEL_19;
    goto LABEL_16;
  }
  if (a3)
  {
    v6 = DerivedStorage;
    v7 = FigMetadataSerializerCreateForQuickTimeMetadata((uint64_t)a1, &v17);
    v8 = v17;
    if ((_DWORD)v7)
      goto LABEL_19;
    v9 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)v6)
      MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)v6);
    else
      MutableCopy = 0;
    *v9 = MutableCopy;
    v11 = *(const __CFArray **)(v6 + 8);
    if (v11)
      v12 = CFArrayCreateMutableCopy(a1, 0, v11);
    else
      v12 = 0;
    v9[1] = v12;
    v13 = *(const __CFArray **)(v6 + 16);
    if (v13)
      v14 = CFArrayCreateMutableCopy(a1, 0, v13);
    else
      v14 = 0;
    v9[2] = v14;
    v15 = *(CFTypeRef *)(v6 + 24);
    if (v15)
      v15 = CFRetain(v15);
    v7 = 0;
    v9[3] = v15;
    v9[4] = *(_QWORD *)(v6 + 32);
    v8 = v17;
LABEL_16:
    if (!(_DWORD)v7)
    {
      *a3 = v8;
      return v7;
    }
LABEL_19:
    if (v8)
      CFRelease(v8);
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t piqca_createRegistrationDictionaryMutex()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  sPIQCARegistrationDictionaryMutex = result;
  return result;
}

void *piqca_loadCAImageQueueSetEDRDeadline()
{
  void *result;

  result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
  if (result)
  {
    result = dlsym(result, "CAImageQueueSetEDRDeadline");
    sCAImageQueueSetEDRDeadline = result;
    if (!result)
      return (void *)FigSignalErrorAt();
  }
  return result;
}

uint64_t piqca_WakeupSharedPollingThread()
{
  uint64_t result;

  if (piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce != -1)
    dispatch_once_f(&piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce, &piqca_getSharedPollingThreadContext_sharedPollingContext, (dispatch_function_t)piqca_initSharedPollingThread);
  result = qword_1EE2A0178;
  if (qword_1EE2A0178)
    return FigSemaphoreSignal();
  return result;
}

uint64_t piqca_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  void *DictionaryRepresentation;
  uint64_t v11;
  const void **v13;
  int v14;
  double v15;
  double Seconds;
  float Rate;
  double v18;
  CMTime *p_valuePtr;
  const __CFAllocator *v20;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v22;
  uint64_t v23;
  CFMutableDictionaryRef v24;
  const void **v25;
  uint64_t AllocatorForMedia;
  const void *v27;
  void (*v28)(CMTime *__return_ptr, uint64_t);
  uint64_t (*v29)(const void *, CMTime *);
  CMTime v30;
  CMTime v31;
  CMTime time;
  CMTime valuePtr;
  double v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(CFSTR("CAImageQueue"), a2))
  {
    v9 = *(const void **)DerivedStorage;
LABEL_3:
    DictionaryRepresentation = (void *)CFRetain(v9);
LABEL_6:
    v11 = 0;
    goto LABEL_7;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_CurrentFrameRate"), a2))
  {
    LODWORD(valuePtr.value) = FigImageQueueFrameRateGetCurrent((_QWORD *)(DerivedStorage + 2776));
    DictionaryRepresentation = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
    goto LABEL_6;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_EnqueueResetsSystemSleepTimer"), a2))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(unsigned __int8 *)(DerivedStorage + 134);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_NextNonJerkyStopTime"), a2))
  {
    if (!*(_QWORD *)DerivedStorage || (unint64_t)CAImageQueueGetTimes() < 2)
      return 4294954513;
    v15 = v34;
    memset(&valuePtr, 0, sizeof(valuePtr));
    CMTimebaseGetTime(&time, *(CMTimebaseRef *)(DerivedStorage + 144));
    Seconds = CMTimeGetSeconds(&time);
    Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 144));
    v18 = Rate;
    if (Rate >= 0.0)
    {
      if (v15 < Seconds || v15 - Seconds >= v18 * 0.1)
        return 4294954513;
    }
    else if (v15 > Seconds || v15 - Seconds <= v18 * 0.1)
    {
      return 4294954513;
    }
    CMTimeMakeWithSeconds(&valuePtr, v15, 90000);
    v31 = valuePtr;
    p_valuePtr = &v31;
    v20 = a3;
LABEL_28:
    DictionaryRepresentation = CMTimeCopyAsDictionary(p_valuePtr, v20);
    goto LABEL_6;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_FirstImageEnqueued"), a2))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(unsigned __int8 *)(DerivedStorage + 135);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_DisplaySize"), a2))
  {
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 1528));
    goto LABEL_6;
  }
  if (CFEqual(CFSTR("CAImageQueueAlwaysSync"), a2))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(unsigned __int8 *)(DerivedStorage + 137);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("UseLowLatencyModeForImmediateFrames"), a2))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(unsigned __int8 *)(DerivedStorage + 138);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("ForScrubbingOnly"), a2))
  {
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    v14 = *(unsigned __int8 *)(DerivedStorage + 221);
LABEL_11:
    if (!v14)
      v13 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_13;
  }
  if (CFEqual(CFSTR("OriginToPresentationLatencyStatistics"), a2))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v22 = Mutable;
      MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(DerivedStorage + 16) + 8));
      if (*(int *)(DerivedStorage + 2888) >= 1)
      {
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
      }
      FigCFDictionarySetInt32();
      *(_QWORD *)(DerivedStorage + 2896) = 0x41CDCD6500000000;
      *(_DWORD *)(DerivedStorage + 2888) = 0;
      *(_QWORD *)(DerivedStorage + 2912) = 0;
      *(_QWORD *)(DerivedStorage + 2904) = 0;
      v23 = *(_QWORD *)(*(_QWORD *)(DerivedStorage + 16) + 8);
      goto LABEL_41;
    }
  }
  else
  {
    if (CFEqual(CFSTR("Duration"), a2))
    {
      v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      valuePtr = *(CMTime *)(DerivedStorage + 2984);
      p_valuePtr = &valuePtr;
      goto LABEL_28;
    }
    if (CFEqual(CFSTR("CanSupportAV1FilmGrainDeferMode"), a2))
    {
      v13 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_13:
      v9 = *v13;
      goto LABEL_3;
    }
    if (!CFEqual(CFSTR("RendererPreparationInfo"), a2))
    {
      if (!CFEqual(CFSTR("ImageQueueGauge"), a2))
        return 4294954512;
      DictionaryRepresentation = *(void **)(DerivedStorage + 3080);
      if (DictionaryRepresentation)
      {
        v11 = 0;
      }
      else
      {
        v25 = (const void **)(DerivedStorage + 3080);
        AllocatorForMedia = FigGetAllocatorForMedia();
        v11 = FigImageQueueGaugeCreate(AllocatorForMedia, 0, (_QWORD *)(DerivedStorage + 3080));
        if (!(_DWORD)v11)
        {
          v27 = *v25;
          v28 = *(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
          if (v28)
            v28(&v30, a1);
          else
            v30 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v29 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v29)
          {
            valuePtr = v30;
            v11 = v29(v27, &valuePtr);
          }
          else
          {
            v11 = 4294954514;
          }
        }
        DictionaryRepresentation = (void *)*v25;
        if (!*v25)
          goto LABEL_7;
      }
      DictionaryRepresentation = (void *)CFRetain(DictionaryRepresentation);
LABEL_7:
      *a4 = (CFMutableDictionaryRef)DictionaryRepresentation;
      return v11;
    }
    v24 = CFDictionaryCreateMutable(a3, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v24)
    {
      v22 = v24;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 3048));
      FigCFDictionarySetBoolean();
      FigCFDictionarySetValue();
      v23 = *(_QWORD *)(DerivedStorage + 3048);
LABEL_41:
      MEMORY[0x19402EF04](v23);
      v11 = 0;
      *a4 = v22;
      return v11;
    }
  }
  return FigSignalErrorAt();
}

void piqca_gmstats_dump()
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v1;
  int v2;
  CFAllocatorRef *v3;
  __CFString *Mutable;
  __CFString *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __CFString *v10;
  int v11;
  int v12;
  int v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  CMTime time;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(OpaqueCMTimebase **)(DerivedStorage + 144);
  if (v1)
  {
    CMTimebaseGetRate(v1);
    CMTimebaseGetTime(&time, *(CMTimebaseRef *)(DerivedStorage + 144));
    CMTimeGetSeconds(&time);
    CACurrentMediaTime();
    CAImageQueueGetUnconsumedImageCount();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 2464));
    v2 = *(unsigned __int8 *)(DerivedStorage + 2500);
    v3 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_BYTE *)(DerivedStorage + 2500))
    {
      *(_DWORD *)(DerivedStorage + 2752) = 0;
      Mutable = CFStringCreateMutable(*v3, 0);
      v5 = Mutable;
      v6 = *(_DWORD *)(DerivedStorage + 2508);
      v7 = *(_DWORD *)(DerivedStorage + 2504);
      if (*(_DWORD *)(DerivedStorage + 2496))
        CFStringAppendFormat(Mutable, 0, CFSTR("Enqueued Pixel Buffer:%c%c%c%c, %u x %u "), HIBYTE(*(_DWORD *)(DerivedStorage + 2496)), BYTE2(*(_DWORD *)(DerivedStorage + 2496)), BYTE1(*(_DWORD *)(DerivedStorage + 2496)), *(_DWORD *)(DerivedStorage + 2496), *(_QWORD *)(DerivedStorage + 1504), *(_QWORD *)(DerivedStorage + 1512));
      CFStringAppendCString(v5, "[\n", 0x600u);
      if (v6 >= 1)
      {
        do
        {
          if (v7 <= 0)
            v8 = -(-v7 & 3);
          else
            v8 = v7 & 3;
          CFStringAppendFormat(v5, 0, CFSTR("{PTS: %.3f s, enqueued at: host %.3f s (media %.3f s)},\n"), *(_QWORD *)(DerivedStorage + 24 * v8 + 2512), *(_QWORD *)(DerivedStorage + 24 * v8 + 2520), *(_QWORD *)(DerivedStorage + 24 * v8 + 2528));
          ++v7;
          --v6;
        }
        while (v6);
      }
      CFStringAppendCString(v5, "]\n", 0x600u);
      *(_OWORD *)(DerivedStorage + 2576) = 0u;
      *(_OWORD *)(DerivedStorage + 2592) = 0u;
      *(_OWORD *)(DerivedStorage + 2544) = 0u;
      *(_OWORD *)(DerivedStorage + 2560) = 0u;
      *(_OWORD *)(DerivedStorage + 2512) = 0u;
      *(_OWORD *)(DerivedStorage + 2528) = 0u;
      *(_OWORD *)(DerivedStorage + 2496) = 0u;
    }
    else
    {
      v5 = 0;
    }
    v9 = *(unsigned __int8 *)(DerivedStorage + 2608);
    if (*(_BYTE *)(DerivedStorage + 2608))
    {
      *(_DWORD *)(DerivedStorage + 2772) = 0;
      *(_QWORD *)(DerivedStorage + 2756) = 0;
      *(_QWORD *)(DerivedStorage + 2764) = 0;
      v10 = CFStringCreateMutable(*v3, 0);
      v11 = *(_DWORD *)(DerivedStorage + 2616);
      v12 = *(_DWORD *)(DerivedStorage + 2612);
      CFStringAppendFormat(v10, 0, CFSTR("DisplaySize: %f x %f "), *(_QWORD *)(DerivedStorage + 1528), *(_QWORD *)(DerivedStorage + 1536));
      CFStringAppendCString(v10, "[\n", 0x600u);
      if (v11 >= 1)
      {
        do
        {
          if (v12 <= 0)
            v13 = -(-v12 & 3);
          else
            v13 = v12 & 3;
          CFStringAppendFormat(v10, 0, CFSTR("{PTS: %.3f s, sampled at: %.3f s, displayed at: %.3f s, on glass for: %.3f ms},\n"), *(_QWORD *)(DerivedStorage + 32 * v13 + 2624), *(_QWORD *)(DerivedStorage + 32 * v13 + 2632), *(_QWORD *)(DerivedStorage + 32 * v13 + 2640), *(double *)(DerivedStorage + 32 * v13 + 2648) * 1000.0);
          ++v12;
          --v11;
        }
        while (v11);
      }
      CFStringAppendCString(v10, "]\n", 0x600u);
      *(_OWORD *)(DerivedStorage + 2720) = 0u;
      *(_OWORD *)(DerivedStorage + 2736) = 0u;
      *(_OWORD *)(DerivedStorage + 2688) = 0u;
      *(_OWORD *)(DerivedStorage + 2704) = 0u;
      *(_OWORD *)(DerivedStorage + 2656) = 0u;
      *(_OWORD *)(DerivedStorage + 2672) = 0u;
      *(_OWORD *)(DerivedStorage + 2624) = 0u;
      *(_OWORD *)(DerivedStorage + 2640) = 0u;
      *(_OWORD *)(DerivedStorage + 2608) = 0u;
    }
    else
    {
      v10 = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 2464));
    if (v9 | v2)
    {
      if (dword_1EE2A0160)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1EE2A0160)
        {
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (dword_1EE2A0160)
          {
            v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (dword_1EE2A0160)
            {
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
    }
    if (v5)
      CFRelease(v5);
    if (v10)
      CFRelease(v10);
  }
}

void piqca_initSharedPollingThread(_QWORD *a1)
{
  const __CFAllocator *v2;
  const CFDictionaryValueCallBacks *v3;
  __CFDictionary *Mutable;

  a1[2] = FigSimpleMutexCreate();
  a1[1] = FigSemaphoreCreate();
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  a1[3] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v2, 2, MEMORY[0x1E0C9B390], v3);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA52C8], CFSTR("com.apple.coremedia.imagequeue.coreanimation.common"));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA52C0], (const void *)*MEMORY[0x1E0C9AE40]);
  FigThreadCreate();
  if (Mutable)
    CFRelease(Mutable);
}

void piqca_SharedPollingThread(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFArrayCallBacks *v3;
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  const void *v6;
  CFRange v7;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  while (1)
  {
    *(_BYTE *)(a1 + 40) = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    Mutable = CFArrayCreateMutable(v2, 0, v3);
    *(_QWORD *)(a1 + 32) = Mutable;
    if (Mutable)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)piqca_RetainRegisteredImageQueuesStillAliveApplier, (void *)a1);
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
      v5 = *(const __CFArray **)(a1 + 32);
      v7.length = CFArrayGetCount(v5);
      v7.location = 0;
      CFArrayApplyFunction(v5, v7, (CFArrayApplierFunction)piqca_SharedDoMonitorImageQueueApplier, (void *)a1);
      v6 = *(const void **)(a1 + 32);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 32) = 0;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 40) = 1;
    }
    FigSemaphoreWaitRelative();
  }
}

void piqca_RetainRegisteredImageQueuesStillAliveApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 32), v4);
    CFRelease(v5);
  }
}

uint64_t piqca_SharedDoMonitorImageQueueApplier(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  _BOOL4 v6;
  double v7;
  double v8;
  int v9;
  int v10;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 49))
    return result;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = piqca_evictExpiredFramesFromCAImageQueue() != 0;
  CAImageQueueGetUnconsumedImageCount();
  if (*(int *)(DerivedStorage + 216) < 1)
  {
    v7 = -INFINITY;
    v8 = *(double *)(DerivedStorage + 112);
  }
  else
  {
    v7 = -1.0;
    v8 = *(double *)(DerivedStorage + 104);
  }
  if (v7 != v8)
    v6 = 1;
  v9 = FigAtomicBitAnd32Orig();
  if (*(int *)(DerivedStorage + 76) >= 1)
  {
    FigAtomicDecrement32();
LABEL_13:
    *(_QWORD *)(DerivedStorage + 104) = 0xBFF0000000000000;
    *(_QWORD *)(DerivedStorage + 112) = 0xFFF0000000000000;
    piqca_postOccupancyChanged(a1);
    goto LABEL_14;
  }
  if (v9)
    v10 = 1;
  else
    v10 = v6;
  if (v10 == 1)
    goto LABEL_13;
LABEL_14:
  result = DerivedStorage + 72;
  if (*(int *)(DerivedStorage + 72) >= 1)
  {
    result = FigAtomicDecrement32();
    if (!(_DWORD)result)
    {
      *(_BYTE *)(DerivedStorage + 49) = 0;
      result = CAImageQueueSetFlags();
    }
  }
  if (*(_BYTE *)(DerivedStorage + 49))
    *(_BYTE *)(a2 + 40) = 1;
  return result;
}

uint64_t piqca_evictExpiredFramesFromCAImageQueue()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  OpaqueCMTimebase *v2;
  OpaqueCMTimebase *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CMTime v9;
  CMTime v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  if (!*DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  v2 = (OpaqueCMTimebase *)DerivedStorage[18];
  if (v2
    && (CMTimebaseGetTime(&v10, v2), v9 = v10, CMTimeGetSeconds(&v9), (v3 = (OpaqueCMTimebase *)v1[18]) != 0)
    && (CMTimebaseGetRate(v3) == 0.0 || (v4 = *((_DWORD *)v1 + 54), v4 >= 1) || v4 < 0))
  {
    v6 = CAImageQueueConsumeUnconsumedInRange();
    v5 = v6;
    if (v6)
    {
      *((_DWORD *)v1 + 392) += v6;
      MEMORY[0x19402EEEC](v1[308]);
      *((_DWORD *)v1 + 693) += v5;
      *((_BYTE *)v1 + 2608) = 1;
      MEMORY[0x19402EF04](v1[308]);
    }
  }
  else
  {
    v5 = 0;
  }
  v7 = mach_absolute_time();
  if ((unint64_t)FigHostTimeToNanoseconds() >= 0x165A0BC00)
  {
    v1[309] = v7;
    piqca_gmstats_dump();
  }
  v1[8] = CAImageQueueCollect();
  v1[10] = mach_absolute_time();
  CACurrentMediaTime();
  return v5;
}

void __piqca_setProperty_block_invoke()
{
  piqca_updateImageQueueTimingFields();
}

void piqca_updateImageQueueTimingFields()
{
  uint64_t DerivedStorage;
  uint64_t *v1;
  const void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  CMClockRef HostTimeClock;
  double Seconds;
  double v8;
  CMTime v9;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime outOfClockOrTimebaseAnchorTime;
  Float64 outRelativeRate;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (uint64_t *)(DerivedStorage + 2936);
  v2 = *(const void **)(DerivedStorage + 2936);
  if (v2)
  {
    FigSyncMomentSourceDestroy(v2);
    *v1 = 0;
  }
  *(_QWORD *)(DerivedStorage + 2952) = 0;
  *(_QWORD *)(DerivedStorage + 2944) = 0;
  *(_BYTE *)(DerivedStorage + 2968) = 0;
  *(_QWORD *)(DerivedStorage + 2960) = 0;
  if (*(_BYTE *)(DerivedStorage + 2920))
  {
    if (*(_QWORD *)(DerivedStorage + 144))
    {
      v3 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v3)
      {
        v4 = (const void *)v3;
        if (FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)piqca_syncMomentSourceCallback, v3, (void (*)(uint64_t))piqca_ReleaseFIQWeakReference, *(const void **)(DerivedStorage + 144), *(NSObject **)(DerivedStorage + 2928), v1))
        {
          CFRelease(v4);
        }
        else
        {
          outRelativeRate = 0.0;
          memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
          memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
          CMClockGetHostTimeClock();
          v5 = *(const void **)(DerivedStorage + 144);
          HostTimeClock = CMClockGetHostTimeClock();
          if (!CMSyncGetRelativeRateAndAnchorTime(v5, HostTimeClock, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime))
          {
            v9 = outRelativeToClockOrTimebaseAnchorTime;
            Seconds = CMTimeGetSeconds(&v9);
            v9 = outOfClockOrTimebaseAnchorTime;
            v8 = CMTimeGetSeconds(&v9);
            piqca_setImageQueueTiming(Seconds, v8, outRelativeRate);
          }
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
  else
  {
    piqca_setImageQueueTiming(0.0, 0.0, 1.0);
  }
}

void piqca_setTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 144) != a2)
  {
    v5 = *(NSObject **)(DerivedStorage + 2928);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __piqca_setTimebase_block_invoke;
    block[3] = &__block_descriptor_tmp_34_0;
    block[4] = DerivedStorage;
    block[5] = a2;
    block[6] = a1;
    dispatch_sync(v5, block);
  }
}

uint64_t piqca_setEnhancementMode(uint64_t result, const __CFString *cf)
{
  uint64_t v3;
  CFTypeID v4;
  uint64_t v5;
  const char **i;
  char buffer[100];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(result + 2884))
  {
    if (cf)
    {
      v3 = result;
      v4 = CFGetTypeID(cf);
      result = CFStringGetTypeID();
      if (v4 == result)
      {
        result = CFStringGetCString(cf, buffer, 100, 0x600u);
        if ((_DWORD)result)
        {
          v5 = 0;
          for (i = (const char **)&off_1E2F92700; ; i += 2)
          {
            result = strcmp(*i, buffer);
            if (!(_DWORD)result)
              break;
            if (++v5 == 5)
              return result;
          }
          *(_DWORD *)(v3 + 2880) = v5;
          return CAImageQueueSetEnhancementMode();
        }
      }
    }
  }
  return result;
}

void piqca_postRendererPreparationCompletedIfPreviouslyRequestedAndRecordNewRequest(uint64_t a1, char a2, const void *a3)
{
  uint64_t DerivedStorage;
  int v6;
  const void *v7;
  CFTypeRef v8;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 3024));
  v6 = *(unsigned __int8 *)(DerivedStorage + 3032);
  v7 = *(const void **)(DerivedStorage + 3040);
  *(_BYTE *)(DerivedStorage + 3032) = a2;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  *(_QWORD *)(DerivedStorage + 3040) = v8;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 3024));
  if (v6)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable)
      CFRelease(Mutable);
  }
  if (v7)
    CFRelease(v7);
}

void piqca_syncMomentSourceCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double Seconds;
  double v12;
  CMTime v13;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = CACurrentMediaTime();
    v7 = *(double *)(DerivedStorage + 2944);
    v8 = *(double *)(DerivedStorage + 2952);
    v9 = *(double *)(DerivedStorage + 2960);
    v10 = *(_DWORD *)(a2 + 4);
    if ((v10 & 1) != 0)
    {
      *(_QWORD *)(DerivedStorage + 2472) = mach_absolute_time();
      piqca_gmstats_dump();
      v10 = *(_DWORD *)(a2 + 4);
    }
    if ((v10 & 3) != 0 || (v13 = *(CMTime *)(a2 + 16), vabdd_f64(CMTimeGetSeconds(&v13), v9 + (v6 - v7) * v8) >= 0.005))
    {
      v13 = *(CMTime *)(a2 + 40);
      Seconds = CMTimeGetSeconds(&v13);
      v13 = *(CMTime *)(a2 + 16);
      v12 = CMTimeGetSeconds(&v13);
      piqca_setImageQueueTiming(Seconds, v12, *(double *)(a2 + 8));
    }
    CFRelease(v4);
  }
}

void piqca_ReleaseFIQWeakReference(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t piqca_setImageQueueTiming(double a1, double a2, double a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  double Seconds;
  char v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  double v12;
  double v13;
  NSObject *v14;
  CMTime time;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  if (a3 >= 0.0)
  {
    if (!*(_BYTE *)(DerivedStorage + 2968))
      goto LABEL_9;
    v9 = 0;
    Seconds = INFINITY;
  }
  else
  {
    if (*(_BYTE *)(DerivedStorage + 2968))
      goto LABEL_9;
    time = *(CMTime *)(DerivedStorage + 2984);
    Seconds = CMTimeGetSeconds(&time);
    if (fabs(Seconds) == INFINITY)
      Seconds = a2 + 0.1;
    v9 = 1;
  }
  *(double *)(v7 + 2976) = Seconds;
  *(_BYTE *)(v7 + 2968) = v9;
LABEL_9:
  if (a3 == 0.0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = 0.0;
  }
  else if (a3 <= 0.0)
  {
    v13 = *(double *)(v7 + 2976);
    v12 = a1 + (a2 - v13) * (-1.0 / a3);
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = v13;
  }
  else
  {
    v12 = a1 + a2 * (-1.0 / a3);
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = 0.0;
  }
  *(double *)(v7 + 2944) = v12;
  *(double *)(v7 + 2952) = a3;
  *(double *)(v7 + 2960) = a2;
  return CAImageQueueSetMediaTimingClamped();
}

void __piqca_setTimebase_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  v3 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
  piqca_updateImageQueueTimingFields();
}

uint64_t piqca_copyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 2392) = 0;
  if (*(_QWORD *)DerivedStorage)
    *(_DWORD *)(DerivedStorage + 2392) = CAImageQueueGetUnconsumedImageCount() + 1;
  return PIQCopyPerformanceDictionaryForInstanceStatistics((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (int *)(DerivedStorage + 1556), a2);
}

uint64_t piqca_enqueueImageWithRotation(uint64_t a1, __CVBuffer *a2, const void *a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t DerivedStorage;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 IsNullPixelBuffer;
  _BOOL4 v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD);
  CFTypeID v18;
  uint64_t v19;
  CFTypeRef v20;
  OSType v21;
  int AppBooleanValue;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  void *BufferBacking;
  IOSurfaceRef IOSurface;
  const __CFDictionary *v27;
  const __CFNumber *v28;
  char v29;
  CFTypeRef v30;
  uint64_t v31;
  OSType v32;
  const void *v33;
  const __CFAllocator *v34;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  __CFNotificationCenter *LocalCenter;
  _BYTE *v40;
  CFTypeRef v41;
  const void *v42;
  CFTypeID v43;
  CFTypeID v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  size_t Width;
  size_t Height;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int DisplayedPixelCount;
  float v56;
  int UnconsumedImageCount;
  int v58;
  Float64 Seconds;
  Float64 v60;
  CFTimeInterval v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  Float64 *v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  CFMutableDictionaryRef v71;
  char v73;
  void *key;
  IOSurfaceRef v75;
  CFDataRef value;
  OSType PixelFormatType;
  unsigned int v78;
  uint64_t v79;
  CMTime v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE time[32];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t valuePtr;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v93 = *a4;
  v11 = *((_DWORD *)a4 + 3);
  v94 = *((_DWORD *)a4 + 2);
  v12 = a4[2];
  v13 = CMBaseObjectGetDerivedStorage();
  IsNullPixelBuffer = FigIsNullPixelBuffer(a2);
  if (!a2)
    goto LABEL_7;
  v15 = IsNullPixelBuffer;
  v16 = *(_QWORD *)(v13 + 3080);
  if (v16)
  {
    v17 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v17)
      v17(v16, 0);
  }
  v18 = CFGetTypeID(a2);
  if (CVPixelBufferGetTypeID() == v18)
    PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  else
    PixelFormatType = 1061109567;
  piqca_evictExpiredFramesFromCAImageQueueIfEvictionNotDoneRecently();
  if ((a6 & 2) == 0 || (v11 & 1) != 0)
  {
    *(_QWORD *)time = v93;
    *(_QWORD *)&time[8] = __PAIR64__(v11, v94);
    *(_QWORD *)&time[16] = v12;
    CMTimeGetSeconds((CMTime *)time);
  }
  if (CVPixelBufferGetTypeID() != v18)
  {
    v19 = 4294948064;
    goto LABEL_103;
  }
  v79 = v12;
  v78 = v11;
  if (v15)
  {
LABEL_68:
    if ((a6 & 4) == 0 && ((a6 & 1) != 0 || *(_BYTE *)(v13 + 50)))
    {
      *(_BYTE *)(v13 + 50) = 0;
      *(_BYTE *)(v13 + 52) = 0;
      FigImageQueueDisplayCountHistory_TraceFlush(*(_QWORD *)(v13 + 2848));
      bzero((void *)(v13 + 296), 0x4B0uLL);
    }
    CVBufferRetain(a2);
    v40 = malloc_type_calloc(0x48uLL, 1uLL, 0x3F170C10uLL);
    *(_QWORD *)v40 = a2;
    *((_QWORD *)v40 + 1) = v93;
    *((_DWORD *)v40 + 4) = v94;
    *((_DWORD *)v40 + 5) = v11;
    *((_QWORD *)v40 + 3) = v79;
    *((_DWORD *)v40 + 10) = *(_DWORD *)(v13 + 24);
    v41 = CMGetAttachment(a2, CFSTR("FigImageBufferOriginHostTime"), 0);
    v42 = v41;
    if (a3 && !v41)
    {
      v43 = CFGetTypeID(a3);
      if (v43 != CFDictionaryGetTypeID())
      {
LABEL_79:
        *((_QWORD *)v40 + 4) = *(_QWORD *)(v13 + 16);
        FigAtomicIncrement32();
        v45 = v13 + 24 * *(_QWORD *)(v13 + 1496);
        v46 = *(_OWORD *)(v40 + 8);
        *(_QWORD *)(v45 + 312) = *((_QWORD *)v40 + 3);
        *(_OWORD *)(v45 + 296) = v46;
        v47 = *(_QWORD *)(v13 + 1496);
        if (v47 == 49)
          v48 = 0;
        else
          v48 = v47 + 1;
        *(_QWORD *)(v13 + 1496) = v48;
        v49 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        if (!v15)
        {
          Width = CVPixelBufferGetWidth(a2);
          Height = CVPixelBufferGetHeight(a2);
          v52 = Height;
          if (*(_QWORD *)(v13 + 1504) != Width || *(_QWORD *)(v13 + 1512) != Height)
          {
            if (*v49 == 1)
              kdebug_trace();
            CAImageQueueSetSize();
            *(_QWORD *)(v13 + 1504) = Width;
            *(_QWORD *)(v13 + 1512) = v52;
          }
        }
        v53 = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(v53 + 1504))
        {
          v54 = v53;
          if (*(_QWORD *)(v53 + 1512))
          {
            DisplayedPixelCount = CAImageQueueGetDisplayedPixelCount();
            if (DisplayedPixelCount)
            {
              if (*(_DWORD *)(v54 + 1520) != DisplayedPixelCount)
              {
                v56 = sqrtf((float)((float)DisplayedPixelCount * (float)*(unint64_t *)(v54 + 1512))/ (float)*(unint64_t *)(v54 + 1504));
                *(_DWORD *)(v54 + 1520) = DisplayedPixelCount;
                *(double *)(v54 + 1528) = (float)((float)DisplayedPixelCount / v56);
                *(double *)(v54 + 1536) = v56;
                *(_BYTE *)(v54 + 1544) = 1;
              }
            }
          }
        }
        v82 = 0;
        v83 = 0;
        UnconsumedImageCount = CAImageQueueGetUnconsumedImageCount();
        v58 = *(_DWORD *)(v13 + 252);
        *(_DWORD *)(v13 + 252) = v58 + 1;
        *((_DWORD *)v40 + 11) = v58;
        *((_DWORD *)v40 + 12) = UnconsumedImageCount;
        if (*v49 == 1)
        {
          *(_QWORD *)time = v93;
          *(_QWORD *)&time[8] = __PAIR64__(v78, v94);
          *(_QWORD *)&time[16] = v79;
          CMTimeGetSeconds((CMTime *)time);
          kdebug_trace();
        }
        if (CAImageQueueInsertImageWithRotation())
        {
          --*(_QWORD *)(v13 + 64);
          MEMORY[0x19402EEEC](*(_QWORD *)(v13 + 2464));
          *(_DWORD *)(v13 + 2496) = PixelFormatType;
          if (*(_QWORD *)(v13 + 144))
          {
            *(_QWORD *)time = v93;
            *(_QWORD *)&time[8] = __PAIR64__(v78, v94);
            *(_QWORD *)&time[16] = v79;
            Seconds = CMTimeGetSeconds((CMTime *)time);
            CMTimebaseGetTime(&v81, *(CMTimebaseRef *)(v13 + 144));
            v60 = CMTimeGetSeconds(&v81);
            v61 = CACurrentMediaTime();
            v62 = CMBaseObjectGetDerivedStorage();
            v63 = *(_DWORD *)(v62 + 2504);
            v64 = *(_DWORD *)(v62 + 2508);
            if (v64 + v63 <= 0)
              v65 = -(-(v64 + v63) & 3);
            else
              v65 = (v64 + v63) & 3;
            v66 = (Float64 *)(v62 + 24 * v65);
            v66[314] = Seconds;
            v66[316] = v60;
            v66[315] = v61;
            if ((v64 + 1) > 4)
            {
              v67 = v63 + 1;
              v68 = -v67 < 0;
              v69 = -v67 & 3;
              v70 = v67 & 3;
              if (!v68)
                v70 = -v69;
              *(_DWORD *)(v62 + 2504) = v70;
            }
            else
            {
              *(_DWORD *)(v62 + 2508) = v64 + 1;
            }
          }
          ++*(_DWORD *)(v13 + 2752);
          *(_BYTE *)(v13 + 2500) = 1;
          MEMORY[0x19402EF04](*(_QWORD *)(v13 + 2464));
          FPSupport_IsDisplayModeSwitchInProgress();
          if (*(_BYTE *)(v13 + 132) && *(_BYTE *)(v13 + 134))
            FigResetDisplaySleepTimer(*(const __CFString **)(v13 + 3008));
          if (*v49 == 1)
            kdebug_trace();
          *(_BYTE *)(v13 + 51) = 1;
          if ((a6 & 4) != 0)
            *(_BYTE *)(v13 + 52) = 1;
          *(_DWORD *)(v13 + 56) = 1;
          goto LABEL_115;
        }
        ++*(_DWORD *)(v13 + 2396);
        CVBufferRelease(a2);
        piqca_decrementSnapLatchCount((void **)v40 + 4);
        free(v40);
        v19 = 4294954482;
LABEL_103:
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
        return v19;
      }
      v42 = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("FigImageBufferOriginHostTime"));
    }
    if (v42)
    {
      v44 = CFGetTypeID(v42);
      if (v44 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v42, kCFNumberDoubleType, v40 + 56);
        v40[64] = 1;
      }
    }
    goto LABEL_79;
  }
  v20 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CA8], 0);
  v21 = CVPixelBufferGetPixelFormatType(a2);
  *(_QWORD *)time = 0;
  if (containsAlpha_sDidCheck == 1)
  {
    AppBooleanValue = containsAlpha_sForceOptimization;
  }
  else
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("force_opaque_caiq_optimization"), CFSTR("com.apple.coremedia"), 0);
    containsAlpha_sForceOptimization = AppBooleanValue;
    containsAlpha_sDidCheck = 1;
  }
  if (*(_DWORD *)(v13 + 1548) != v21 && !AppBooleanValue)
  {
    v23 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v21);
    if (v23)
    {
      v24 = v23;
      if (CFDictionaryGetValueIfPresent(v23, (const void *)*MEMORY[0x1E0CA9168], (const void **)time)
        && *(_QWORD *)time == *MEMORY[0x1E0C9AE50])
      {
        *(_BYTE *)(v13 + 1552) = 1;
      }
      *(_DWORD *)(v13 + 1548) = v21;
      CFRelease(v24);
    }
    else
    {
      *(_DWORD *)(v13 + 1548) = v21;
    }
  }
  v11 = v78;
  if (*(_BYTE *)(v13 + 1552))
    FigCFEqual();
  if (v20)
    CFRelease(v20);
  valuePtr = 0;
  BufferBacking = (void *)CVPixelBufferGetBufferBacking();
  IOSurface = CVPixelBufferGetIOSurface(a2);
  v91 = 0;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v86 = 0u;
  memset(time, 0, sizeof(time));
  v84 = 116;
  v75 = IOSurface;
  if (IOSurface && !IOSurfaceGetBulkAttachments())
    value = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], time, 116);
  else
    value = 0;
  MEMORY[0x19402EEEC](sPIQCARegistrationDictionaryMutex);
  key = BufferBacking;
  if (!BufferBacking)
  {
    MEMORY[0x19402EF04](sPIQCARegistrationDictionaryMutex);
    goto LABEL_42;
  }
  v27 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v13 + 120), BufferBacking);
  MEMORY[0x19402EF04](sPIQCARegistrationDictionaryMutex);
  if (!v27)
  {
LABEL_42:
    v29 = 0;
    goto LABEL_43;
  }
  v28 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("PixelBufferId"));
  CFDictionaryGetValue(v27, CFSTR("IOSurfaceBulkAttachments"));
  if (v28)
  {
    CFNumberGetValue(v28, kCFNumberSInt64Type, &valuePtr);
    v11 = v78;
    if (FigCFEqual())
      goto LABEL_65;
    MEMORY[0x1940295F4](*(_QWORD *)v13, valuePtr);
    v29 = 1;
  }
  else
  {
    v29 = 0;
    v11 = v78;
  }
LABEL_43:
  v73 = v29;
  if (v75)
  {
    v30 = CVBufferCopyAttachment(a2, CFSTR("SceneReferredExtendedLinear"), 0);
    FigCFEqual();
    if (v30)
      CFRelease(v30);
    v31 = CAImageQueueRegisterIOSurfaceBuffer();
    valuePtr = v31;
  }
  else
  {
    v32 = CVPixelBufferGetPixelFormatType(a2);
    if (v32 != 32 && v32 != 846624121 && v32 != 1111970369 && FigSignalErrorAt())
    {
      valuePtr = 0;
      goto LABEL_65;
    }
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferGetBaseAddress(a2);
    CVPixelBufferGetBytesPerRow(a2);
    CVPixelBufferGetWidth(a2);
    CVPixelBufferGetHeight(a2);
    v31 = CAImageQueueRegisterBuffer();
    valuePtr = v31;
    v11 = v78;
  }
  v33 = key;
  if (v31)
  {
    MEMORY[0x19402EEEC](sPIQCARegistrationDictionaryMutex);
    v34 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v36 = Mutable;
      v37 = CFNumberCreate(v34, kCFNumberSInt64Type, &valuePtr);
      if (v37)
      {
        v38 = v37;
        CFDictionarySetValue(v36, CFSTR("PixelBufferId"), v37);
        CFRelease(v38);
      }
      if (value)
        CFDictionarySetValue(v36, CFSTR("IOSurfaceBulkAttachments"), value);
      v33 = key;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 120), key, v36);
      CFRelease(v36);
    }
    MEMORY[0x19402EF04](sPIQCARegistrationDictionaryMutex);
    v11 = v78;
    if ((v73 & 1) == 0)
    {
      CFRetain(*(CFTypeRef *)(v13 + 120));
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, *(const void **)(v13 + 120), (CFNotificationCallback)piqca_DeregisterPixelBufferBackingThatWillBeDeleted, (CFStringRef)*MEMORY[0x1E0CA8C50], v33, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
LABEL_65:
  if (value)
    CFRelease(value);
  if (valuePtr)
    goto LABEL_68;
LABEL_7:
  v19 = FigSignalErrorAt();
  if ((_DWORD)v19)
    goto LABEL_103;
LABEL_115:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  piqca_postOccupancyChanged(a1);
  if (!*(_BYTE *)(DerivedStorage + 49))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (!*(_BYTE *)(DerivedStorage + 135))
  {
    *(_BYTE *)(DerivedStorage + 135) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (!*(_BYTE *)(DerivedStorage + 1544))
    return 0;
  v71 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetCGSize();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v71)
    CFRelease(v71);
  v19 = 0;
  *(_BYTE *)(DerivedStorage + 1544) = 0;
  return v19;
}

uint64_t piqca_requestRendererPreparationForPreroll(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 3048));
  v5 = *(unsigned __int8 *)(DerivedStorage + 3056);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 3048));
  if (!v5)
    return 4294951395;
  piqca_postRendererPreparationCompletedIfPreviouslyRequestedAndRecordNewRequest(a1, 1, a2);
  return 0;
}

uint64_t piqca_flushFramesFollowingCurrentFrame(uint64_t a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  OpaqueCMTimebase *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  CMTime v12;
  CMTime v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  if (*DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = (OpaqueCMTimebase *)DerivedStorage[18];
    if (v4)
    {
      CMTimebaseGetTime(&v13, v4);
      v12 = v13;
      CMTimeGetSeconds(&v12);
      if (v3[18])
      {
        v5 = *((_DWORD *)v3 + 54);
        if (v5 >= 1 || v5 < 0)
        {
          v6 = CAImageQueueConsumeUnconsumedInRange();
          v7 = v6;
          if (v6)
          {
            *((_DWORD *)v3 + 392) += v6;
            MEMORY[0x19402EEEC](v3[308]);
            *((_DWORD *)v3 + 693) += v7;
            *((_BYTE *)v3 + 2608) = 1;
            MEMORY[0x19402EF04](v3[308]);
          }
        }
      }
    }
    v8 = mach_absolute_time();
    if ((unint64_t)FigHostTimeToNanoseconds() >= 0x165A0BC00)
    {
      v3[309] = v8;
      piqca_gmstats_dump();
    }
    v3[8] = CAImageQueueCollect();
    v3[10] = mach_absolute_time();
    CACurrentMediaTime();
    piqca_postOccupancyChanged(a1);
    v9 = v3[385];
    if (v9)
    {
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v10)
        v10(v9, 1);
    }
  }
  return 0;
}

uint64_t piqca_evictExpiredFramesFromCAImageQueueIfEvictionNotDoneRecently()
{
  uint64_t DerivedStorage;
  uint64_t result;
  BOOL v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  mach_absolute_time();
  result = FigHostTimeToNanoseconds();
  if (*(_BYTE *)(DerivedStorage + 49))
    v2 = result < 100000000;
  else
    v2 = 0;
  if (!v2)
    return piqca_evictExpiredFramesFromCAImageQueue();
  return result;
}

uint64_t piqca_updateEDRDeadline(_QWORD *a1, int a2)
{
  uint64_t result;
  CFTimeInterval v5;
  char v6;

  result = CelestialShouldManageEDRDeadline();
  if ((_DWORD)result && sCAImageQueueSetEDRDeadline)
  {
    if (a2)
    {
      if (*((_BYTE *)a1 + 88))
        return result;
      v5 = CACurrentMediaTime();
      result = sCAImageQueueSetEDRDeadline(*a1, v5 + *((double *)a1 + 12));
      v6 = 1;
    }
    else
    {
      if (!*((_BYTE *)a1 + 88))
        return result;
      result = sCAImageQueueSetEDRDeadline(*a1, INFINITY);
      v6 = 0;
    }
    *((_BYTE *)a1 + 88) = v6;
  }
  return result;
}

uint64_t piqca_updateReducedPollingTimeRange(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  OpaqueCMTimebase *v5;
  double Seconds;
  CMTime *v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, __int128 *);
  OpaqueCMTimebase *v9;
  __int128 v11;
  uint64_t v12;
  CMTime v13;
  __int128 v14;
  uint64_t v15;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_DWORD *)(DerivedStorage + 160);
  if (v4 != 1)
  {
    if (v4 != 2)
      return CAImageQueueSetFlags();
    if (*(int *)(DerivedStorage + 212) < 1)
      return CAImageQueueSetFlags();
    v5 = *(OpaqueCMTimebase **)(DerivedStorage + 144);
    if (!v5)
      return CAImageQueueSetFlags();
    CMTimebaseGetTime(&time, v5);
    Seconds = CMTimeGetSeconds(&time);
    v14 = *(_OWORD *)(v3 + 164);
    v15 = *(_QWORD *)(v3 + 180);
    v7 = (CMTime *)&v14;
    goto LABEL_12;
  }
  if (*(int *)(DerivedStorage + 212) >= 1)
  {
    v14 = *MEMORY[0x1E0CA2E18];
    v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v8 = *(void (**)(uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v8)
      v8(a1, 0, 0, &v14);
    v9 = *(OpaqueCMTimebase **)(v3 + 144);
    if (v9)
    {
      if ((BYTE12(v14) & 0x1D) == 1)
      {
        CMTimebaseGetTime(&v13, v9);
        Seconds = CMTimeGetSeconds(&v13);
        v11 = v14;
        v12 = v15;
        v7 = (CMTime *)&v11;
LABEL_12:
        if (Seconds < CMTimeGetSeconds(v7))
          CAImageQueueSetReducedPollingTimeRange();
      }
    }
  }
  return CAImageQueueSetFlags();
}

void piqca_releaseBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CMTime *a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, CMTime *a14, uint64_t a15, CMTime *time1, uint64_t a17, __int128 a18)
{
  void **v19;
  uint64_t DerivedStorage;
  uint64_t ReleasedImageInfo;
  uint64_t v22;
  _OWORD *v23;
  Float64 Seconds;
  unint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t i;
  __int128 v38;
  _OWORD *v39;
  __int128 v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  _DWORD *v46;
  double v47;
  uint64_t v48;
  int v49;
  CMTime v50;
  CMTime v51;
  CMTime lhs;
  CMTime v53;
  CMTime time2;
  CMTime time;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v19 = (void **)(a3 + 32);
    MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
    if (!*(_QWORD *)*v19)
      goto LABEL_42;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    ReleasedImageInfo = CAImageQueueGetReleasedImageInfo();
    if (!ReleasedImageInfo)
      goto LABEL_42;
    v22 = ReleasedImageInfo;
    if (*(_DWORD *)ReleasedImageInfo)
    {
      v23 = (_OWORD *)(a3 + 8);
      time = *(CMTime *)(a3 + 8);
      Seconds = CMTimeGetSeconds(&time);
      *(double *)&v25 = (double)FigHostTimeToNanoseconds();
      v26 = *(double *)&v25 * 0.000000001;
      v27 = *(_QWORD *)(v22 + 8);
      LODWORD(v25) = *(_DWORD *)v22;
      v28 = *(double *)(v22 + 32) * (double)v25;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 2464));
      v29 = CMBaseObjectGetDerivedStorage();
      v30 = *(_DWORD *)(v29 + 2612);
      v31 = *(_DWORD *)(v29 + 2616);
      if (v31 + v30 <= 0)
        v32 = -(-(v31 + v30) & 3);
      else
        v32 = (v31 + v30) & 3;
      v33 = v29 + 32 * v32;
      *(Float64 *)(v33 + 2624) = Seconds;
      *(double *)(v33 + 2632) = v26;
      *(_QWORD *)(v33 + 2640) = v27;
      *(double *)(v33 + 2648) = v28;
      v34 = v31 + 1;
      if (v34 > 4)
      {
        v42 = v30 + 1;
        v43 = -v42 < 0;
        v44 = -v42 & 3;
        v45 = v42 & 3;
        if (!v43)
          v45 = -v44;
        *(_DWORD *)(v29 + 2612) = v45;
      }
      else
      {
        *(_DWORD *)(v29 + 2616) = v34;
      }
      ++*(_DWORD *)(DerivedStorage + 2764);
      *(_BYTE *)(DerivedStorage + 2608) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 2464));
      memset(&v53, 0, sizeof(v53));
      CMTimeMakeWithSeconds(&lhs, *(Float64 *)(v22 + 8), 60000);
      *(_OWORD *)&time.value = *v23;
      time.epoch = *(_QWORD *)(a3 + 24);
      CMTimeSubtract(&v53, &lhs, &time);
      CMTimebaseGetEffectiveRate(*(CMTimebaseRef *)(DerivedStorage + 144));
      v46 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        *(_OWORD *)&time.value = *v23;
        time.epoch = *(_QWORD *)(a3 + 24);
        CMTimeGetSeconds(&time);
        kdebug_trace();
        if (*v46 == 1)
          kdebug_trace();
      }
      ++*(_DWORD *)(DerivedStorage + 2384);
      if (*(_BYTE *)(a3 + 64))
      {
        if (*(_QWORD *)(v22 + 48))
        {
          v47 = (double)FigHostTimeToNanoseconds() * 0.000000001 - *(double *)(a3 + 56);
          if (v47 >= 0.0)
          {
            *(double *)(DerivedStorage + 2896) = fmin(*(double *)(DerivedStorage + 2896), v47);
            *(double *)(DerivedStorage + 2904) = fmax(*(double *)(DerivedStorage + 2904), v47);
            *(double *)(DerivedStorage + 2912) = v47 + *(double *)(DerivedStorage + 2912);
            ++*(_DWORD *)(DerivedStorage + 2888);
          }
        }
      }
      v48 = 2408;
      if ((*(_QWORD *)(v22 + 40) & 0xFFFFFFFFFFFFLL) == 0)
        v48 = 2404;
      ++*(_DWORD *)(DerivedStorage + v48);
      FigImageQueueFrameRateIncrementCounter(DerivedStorage + 2776);
    }
    if (*(_BYTE *)(ReleasedImageInfo + 17))
      goto LABEL_42;
    if (*(_BYTE *)(ReleasedImageInfo + 16) || *(_DWORD *)(a3 + 40) != *(_DWORD *)(DerivedStorage + 24))
    {
      ++*(_DWORD *)(DerivedStorage + 2388);
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 2464));
      ++*(_DWORD *)(DerivedStorage + 2760);
    }
    else
    {
      if (*(_BYTE *)(DerivedStorage + 221))
      {
LABEL_42:
        MEMORY[0x19402EF04](*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
        piqca_decrementSnapLatchCount(v19);
        CVBufferRelease(*(CVBufferRef *)a3);
        free((void *)a3);
        return;
      }
      v35 = 0;
      v36 = (_OWORD *)(a3 + 8);
      for (i = 296; i != 1496; i += 24)
      {
        *(_OWORD *)&time.value = *v36;
        time.epoch = *(_QWORD *)(a3 + 24);
        v38 = *(_OWORD *)(DerivedStorage + i);
        time2.epoch = *(_QWORD *)(DerivedStorage + i + 16);
        *(_OWORD *)&time2.value = v38;
        if (!CMTimeCompare(&time, &time2))
        {
          if (v35)
            goto LABEL_42;
          v35 = 1;
        }
      }
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        *(_OWORD *)&time.value = *v36;
        time.epoch = *(_QWORD *)(a3 + 24);
        CMTimeGetSeconds(&time);
        kdebug_trace();
      }
      v39 = (_OWORD *)(DerivedStorage + 256);
      if ((*(_BYTE *)(DerivedStorage + 268) & 1) != 0
        && (*(_OWORD *)&time.value = *v39,
            time.epoch = *(_QWORD *)(DerivedStorage + 272),
            time2 = *(CMTime *)(DerivedStorage + 224),
            CMTimeAdd(&v51, &time, &time2),
            *(_OWORD *)&time.value = *v36,
            time.epoch = *(_QWORD *)(a3 + 24),
            CMTimeCompare(&time, &v51) < 1))
      {
        v49 = *(_DWORD *)(DerivedStorage + 280) + 1;
        *(_DWORD *)(DerivedStorage + 280) = v49;
        if (v49 == *(_DWORD *)(DerivedStorage + 248))
          ++*(_DWORD *)(DerivedStorage + 1564);
      }
      else
      {
        v40 = *v36;
        *(_QWORD *)(DerivedStorage + 272) = *(_QWORD *)(a3 + 24);
        *v39 = v40;
        *(_DWORD *)(DerivedStorage + 280) = 1;
      }
      v41 = *(_DWORD *)(DerivedStorage + 1556);
      if (v41 <= 0x63)
      {
        *(_OWORD *)&time.value = *v36;
        time.epoch = *(_QWORD *)(a3 + 24);
        CMTimeConvertScale(&v50, &time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        *(_DWORD *)(DerivedStorage + 1556 + 4 * *(int *)(DerivedStorage + 1556) + 24) = v50.value;
        v41 = *(_DWORD *)(DerivedStorage + 1556);
      }
      *(_DWORD *)(DerivedStorage + 1556) = v41 + 1;
      if (*(_QWORD *)(v22 + 24))
        ++*(_DWORD *)(DerivedStorage + 1560);
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 2464));
      ++*(_DWORD *)(DerivedStorage + 2756);
    }
    *(_BYTE *)(DerivedStorage + 2608) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 2464));
    goto LABEL_42;
  }
}

void piqca_DeregisterPixelBufferBackingThatWillBeDeleted(uint64_t a1, const __CFDictionary *a2, const __CFString *a3, const void *a4)
{
  uint64_t v7;
  const void *v8;
  const __CFDictionary *Value;
  const __CFNumber *v10;
  char v11;
  __CFNotificationCenter *LocalCenter;
  uint64_t valuePtr;

  valuePtr = 0;
  MEMORY[0x19402EEEC](sPIQCARegistrationDictionaryMutex);
  if (CFDictionaryGetValue(a2, 0) && (v7 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    v8 = (const void *)v7;
    Value = (const __CFDictionary *)CFDictionaryGetValue(a2, a4);
    if (Value)
    {
      v10 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("PixelBufferId"));
      if (v10)
      {
        CFNumberGetValue(v10, kCFNumberSInt64Type, &valuePtr);
        MEMORY[0x1940295F4](v8, valuePtr);
      }
      CFDictionaryRemoveValue(a2, a4);
    }
    v11 = 0;
  }
  else
  {
    CFDictionaryRemoveAllValues(a2);
    v8 = 0;
    v11 = 1;
  }
  MEMORY[0x19402EF04](sPIQCARegistrationDictionaryMutex);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a2, a3, a4);
  CFRelease(a2);
  if ((v11 & 1) == 0)
    CFRelease(v8);
}

uint64_t FigTrialGetTypeID()
{
  if (FigTrialGetTypeID_sRegisterFigTrialTypeOnce != -1)
    dispatch_once_f(&FigTrialGetTypeID_sRegisterFigTrialTypeOnce, 0, (dispatch_function_t)registerFigTrialType);
  return sFigTrialID;
}

uint64_t registerFigTrialType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigTrialID = result;
  return result;
}

uint64_t FigTrialCopyCFType(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  CFTypeRef *v8;
  CFTypeRef v9;
  const void *v10;
  uint64_t SInt64;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  v4 = (void *)MEMORY[0x19403137C]();
  if (a1 && *(_QWORD *)(a1 + 64))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 32));
    if (FigCFDictionaryGetValueIfPresent() == 1)
    {
      v5 = 0;
    }
    else
    {
      v6 = FigTrialCopyTrialValueForFactor(a1, a2);
      v5 = v6;
      if (v6)
      {
        switch(objc_msgSend(v6, "levelOneOfCase"))
        {
          case 0xAu:
            v7 = objc_msgSend(v5, "BOOLeanValue");
            v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
            if (!v7)
              v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
            v9 = *v8;
            goto LABEL_16;
          case 0xBu:
            v10 = (const void *)objc_msgSend(v5, "stringValue");
            if (v10)
              v9 = CFRetain(v10);
            else
              v9 = 0;
LABEL_16:
            v14 = (uint64_t)v9;
            break;
          case 0xDu:
            objc_msgSend(v5, "longValue");
            SInt64 = FigCFNumberCreateSInt64();
            goto LABEL_14;
          case 0xFu:
            objc_msgSend(v5, "doubleValue");
            SInt64 = FigCFNumberCreateFloat64();
LABEL_14:
            v14 = SInt64;
            break;
          default:
            break;
        }
        FigCFDictionarySetValue();
      }
    }

    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 32));
    v12 = v14;
  }
  else
  {
    v12 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return v12;
}

id FigTrialCopyTrialValueForFactor(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v9;
  void *v10;
  const __CFString *v11;
  const void *v12;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v14;
  int v15;
  CFRange v16;

  v4 = (void *)MEMORY[0x19403137C]();
  if (!a1 || !objc_msgSend(*(id *)(a1 + 72), "count"))
  {
LABEL_6:
    v6 = 0;
    goto LABEL_7;
  }
  v5 = 0;
  while (!objc_msgSend(a2, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 72), "objectAtIndex:", v5), "factor"), "name")))
  {
    if (objc_msgSend(*(id *)(a1 + 72), "count") <= (unint64_t)++v5)
      goto LABEL_6;
  }
  v9 = (void *)objc_msgSend(*(id *)(a1 + 40), "levelForFactor:withNamespaceName:", a2, *(_QWORD *)(a1 + 48));
  v6 = v9;
  if (v9)
  {
    v10 = (void *)objc_msgSend(v9, "metadata");
    if (v10)
    {
      v11 = (const __CFString *)objc_msgSend(v10, "valueForKey:", CFSTR("clientNameMetaData"));
      if (v11)
      {
        v12 = *(const void **)(a1 + 24);
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, CFSTR(","));
        if (ArrayBySeparatingStrings)
        {
          v14 = ArrayBySeparatingStrings;
          v16.length = CFArrayGetCount(ArrayBySeparatingStrings);
          v16.location = 0;
          if (CFArrayContainsValue(v14, v16, v12))
          {
            CFRelease(v14);
            goto LABEL_7;
          }
          v15 = FigCFEqual();
          CFRelease(v14);
          if (v15)
            goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  v7 = v6;
  objc_autoreleasePoolPop(v4);
  return v7;
}

uint64_t FigTrialGetInt(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;

  v4 = (void *)MEMORY[0x19403137C]();
  if (a1)
  {
    v5 = FigTrialCopyTrialValueForFactor(a1, a2);
    v6 = v5;
    if (v5 && objc_msgSend(v5, "levelOneOfCase") == 13)
      a1 = objc_msgSend(v6, "longValue");
    else
      a1 = 0;
  }
  else
  {
    v6 = 0;
  }

  objc_autoreleasePoolPop(v4);
  return a1;
}

double FigTrialGetDouble(uint64_t a1, void *a2)
{
  void *v4;
  double v5;
  id v6;
  void *v7;
  double v8;

  v4 = (void *)MEMORY[0x19403137C]();
  v5 = 0.0;
  if (a1)
  {
    v6 = FigTrialCopyTrialValueForFactor(a1, a2);
    v7 = v6;
    if (v6 && objc_msgSend(v6, "levelOneOfCase") == 15)
    {
      objc_msgSend(v7, "doubleValue");
      v5 = v8;
    }
  }
  else
  {
    v7 = 0;
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

const __CFString *FigTrialCopyExperimentId(const __CFString *a1)
{
  void *v2;
  void *isa;

  v2 = (void *)MEMORY[0x19403137C]();
  if (a1)
  {
    isa = a1[2].isa;
    if (isa)
      a1 = isa;
    else
      a1 = CFSTR("Empty");
  }
  objc_autoreleasePoolPop(v2);
  return a1;
}

uint64_t FigTrialCreate(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  const __CFAllocator *v7;
  uint64_t Instance;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  const void *v13;
  CFTypeRef v14;
  const void *Value;
  const void *v16;
  const void *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a3)
    return 4294948235;
  if (a1)
  {
    if (fstc_ensure_sOnceToken != -1)
      dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
    v6 = fstc_ensure_err;
    if (fstc_ensure_err)
      return v6;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (FigTrialGetTypeID_sRegisterFigTrialTypeOnce != -1)
      dispatch_once_f(&FigTrialGetTypeID_sRegisterFigTrialTypeOnce, 0, (dispatch_function_t)registerFigTrialType);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v9 = Instance;
      Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(v9 + 80) = Mutable;
      if (Mutable
        && (*(_QWORD *)(v9 + 24) = CFRetain(a1), v11 = FigSimpleMutexCreate(), (*(_QWORD *)(v9 + 32) = v11) != 0))
      {
        *(_DWORD *)(v9 + 56) = 221;
        if (fstc_ensure_sOnceToken != -1)
          dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
        if (fstc_ensure_err
          || (MEMORY[0x19402EEEC](fstc_ensure_sSharedTrialClient),
              v13 = (const void *)qword_1EE2A01F8,
              ++qword_1EE2A0200,
              MEMORY[0x19402EF04](fstc_ensure_sSharedTrialClient),
              !v13))
        {
          *(_QWORD *)(v9 + 40) = 0;
        }
        else
        {
          v14 = CFRetain(v13);
          *(_QWORD *)(v9 + 40) = v14;
          if (v14)
          {
            if (fstc_ensure_sOnceToken != -1)
              dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
            v6 = fstc_ensure_err;
            if (!fstc_ensure_err)
            {
              Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2A0210, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
              if (Value)
                Value = CFRetain(Value);
              *(_QWORD *)(v9 + 48) = Value;
              v16 = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2A0218, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
              if (v16)
                v16 = CFRetain(v16);
              *(_QWORD *)(v9 + 64) = v16;
              v17 = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2A0220, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
              if (v17)
                v17 = CFRetain(v17);
              *(_QWORD *)(v9 + 72) = v17;
              if (dword_1EE2A2E58)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v6 = 0;
              *a3 = v9;
              return v6;
            }
            goto LABEL_16;
          }
        }
        v6 = 4294948236;
      }
      else
      {
        FigSignalErrorAt();
        v6 = 0;
      }
LABEL_16:
      CFRelease((CFTypeRef)v9);
      return v6;
    }
  }
  return FigSignalErrorAt();
}

double FigTrial_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigTrial_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  BOOL v5;

  v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  FigSimpleMutexDestroy();
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);

  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    if (fstc_ensure_sOnceToken != -1)
      dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
    if (!fstc_ensure_err)
    {
      MEMORY[0x19402EEEC](fstc_ensure_sSharedTrialClient);
      v5 = qword_1EE2A0200 == 1;
      if (qword_1EE2A0200 >= 1)
      {
        --qword_1EE2A0200;
        if (v5)
        {
          if (byte_1EE2A0208)
          {
            byte_1EE2A0208 = 0;
            objc_msgSend((id)qword_1EE2A01F8, "refresh");
            fstc_populateCachesWithMutex((uint64_t)&fstc_ensure_sSharedTrialClient);
          }
        }
      }
      MEMORY[0x19402EF04](fstc_ensure_sSharedTrialClient);
    }
    CFRelease(v4);
  }
}

CFStringRef FigTrial_CopyFormattingDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigTrialRef %p>"), a1);
}

CFStringRef FigTrial_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigTrialRef %p>"), a1);
}

uint64_t fstc_populateCachesWithMutex(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  CFMutableDictionaryRef v7;
  __CFDictionary *v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  uint64_t v28;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = CFDictionaryCreateMutable(v2, 0, v3, v4);
  v7 = CFDictionaryCreateMutable(v2, 0, v3, v4);
  v8 = v7;
  if (Mutable)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9 && v7 != 0)
  {
    v11 = 0;
    while (v11 <= 2)
    {
      v23 = 0;
      v24 = &v23;
      v25 = 0x3052000000;
      v26 = __Block_byref_object_copy__5;
      v27 = __Block_byref_object_dispose__5;
      v12 = (void *)getTRINamespaceClass_softClass;
      v28 = getTRINamespaceClass_softClass;
      if (!getTRINamespaceClass_softClass)
      {
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3221225472;
        v22[2] = __getTRINamespaceClass_block_invoke;
        v22[3] = &unk_1E2F91F58;
        v22[4] = &v23;
        __getTRINamespaceClass_block_invoke((uint64_t)v22);
        v12 = (void *)v24[5];
      }
      _Block_object_dispose(&v23, 8);
      v13 = objc_msgSend(v12, "namespaceNameFromId:", (v11 + 311));
      if (!v13)
        break;
      v14 = (const void *)v13;
      v15 = (const void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "experimentIdentifiersWithNamespaceName:", v13), "experimentId");
      v16 = (const void *)objc_msgSend(*(id *)(a1 + 8), "factorLevelsWithNamespaceName:", v14);
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11), v14);
      if (v15)
        CFDictionarySetValue(v6, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11), v15);
      if (v16)
        CFDictionarySetValue(v8, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11), v16);
      v11 = (v11 + 1);
      if ((_DWORD)v11 == 3)
      {
        v17 = *(const void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = Mutable;
        CFRetain(Mutable);
        if (v17)
          CFRelease(v17);
        v18 = *(const void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v6;
        CFRetain(v6);
        if (v18)
          CFRelease(v18);
        v19 = *(const void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v8;
        CFRetain(v8);
        if (v19)
          CFRelease(v19);
        v20 = 0;
        if (v8)
          goto LABEL_27;
        goto LABEL_28;
      }
    }
  }
  v20 = FigSignalErrorAt();
  if (v8)
LABEL_27:
    CFRelease(v8);
LABEL_28:
  if (v6)
    CFRelease(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v20;
}

void sub_192C16448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class __getTRINamespaceClass_block_invoke(uint64_t a1)
{
  Class result;

  TrialLibrary();
  result = objc_getClass("TRINamespace");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getTRINamespaceClass_block_invoke_cold_1();
  getTRINamespaceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void TrialLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!TrialLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E2F928D0;
    v2 = 0;
    TrialLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TrialLibraryCore_frameworkLibrary)
    TrialLibrary_cold_1(&v0);
}

void __fstc_ensure_block_invoke()
{
  void *v0;
  void *v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;

  v0 = (void *)MEMORY[0x19403137C]();
  fstc_ensure_sSharedTrialClient = FigSimpleMutexCreate();
  v8 = 0;
  v9 = (uint64_t)&v8;
  v10 = 0x3052000000;
  v11 = __Block_byref_object_copy__5;
  v12 = __Block_byref_object_dispose__5;
  v1 = (void *)getTRIClientClass_softClass;
  v13 = getTRIClientClass_softClass;
  if (!getTRIClientClass_softClass)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __getTRIClientClass_block_invoke;
    v7[3] = &unk_1E2F91F58;
    v7[4] = &v8;
    __getTRIClientClass_block_invoke((uint64_t)v7);
    v1 = *(void **)(v9 + 40);
  }
  _Block_object_dispose(&v8, 8);
  qword_1EE2A01F8 = (uint64_t)(id)objc_msgSend(v1, "clientWithIdentifier:", 221);
  MEMORY[0x19402EEEC](fstc_ensure_sSharedTrialClient);
  fstc_ensure_err = fstc_populateCachesWithMutex((uint64_t)&fstc_ensure_sSharedTrialClient);
  v2 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      v4 = 0;
      v5 = MEMORY[0x1E0C809B0];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
        v8 = v5;
        v9 = 3221225472;
        v10 = (uint64_t)__fstc_installUpdateHandlerWithMutex_block_invoke;
        v11 = (void (*)(uint64_t, uint64_t))&__block_descriptor_40_e8_v16__0_8l;
        v12 = (void (*)(uint64_t))&fstc_ensure_sSharedTrialClient;
        objc_msgSend((id)qword_1EE2A01F8, "addUpdateHandlerForNamespaceName:usingBlock:", ValueAtIndex, &v8);
        ++v4;
      }
      while (v4 < CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](fstc_ensure_sSharedTrialClient);
  objc_autoreleasePoolPop(v0);
}

void sub_192C16744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTRIClientClass_block_invoke(uint64_t a1)
{
  Class result;

  TrialLibrary();
  result = objc_getClass("TRIClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getTRIClientClass_block_invoke_cold_1();
  getTRIClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void __fstc_installUpdateHandlerWithMutex_block_invoke(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](**(_QWORD **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 24) = 1;
  if (!*(_QWORD *)(v2 + 16))
  {
    *(_BYTE *)(v2 + 24) = 0;
    objc_msgSend(*(id *)(v2 + 8), "refresh");
    fstc_populateCachesWithMutex(v2);
  }
  JUMPOUT(0x19402EF04);
}

uint64_t FigImageQueueGetTypeID()
{
  MEMORY[0x19402F294](&FigImageQueueGetClassID_sRegisterFigImageQueueTypeOnce, RegisterFigImageQueueType);
  return CMBaseClassGetCFTypeID();
}

float FigImageQueueFrameRateGetCurrent(_QWORD *a1)
{
  uint64_t UpTimeNanoseconds;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  MEMORY[0x19402EEEC](*a1);
  v3 = 0.0;
  if (a1[5] + 1000000000 >= UpTimeNanoseconds)
  {
    v4 = a1[1];
    if (v4 + 2000000000 <= UpTimeNanoseconds)
    {
      v7 = UpTimeNanoseconds - a1[3];
      if (v7 <= 1000000000)
        v7 = 1000000000;
      v5 = (float)(1000000000 * *((_DWORD *)a1 + 8));
      v6 = (float)v7;
    }
    else
    {
      v5 = (float)(1000000000 * (*((_DWORD *)a1 + 8) + (uint64_t)*((int *)a1 + 4)));
      v6 = (float)(UpTimeNanoseconds - v4);
    }
    v3 = v5 / v6;
  }
  MEMORY[0x19402EF04](*a1);
  return v3;
}

uint64_t FigImageQueueArraySetProperty()
{
  return FigCFArrayApplyFunction();
}

uint64_t FigImageQueueSetPropertyApply(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  if (!a1)
    return FigSignalErrorAt();
  if (*MEMORY[0x1E0C9B0D0] == a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v3 = *a2;
  if (!*a2)
    return FigSignalErrorAt();
  v4 = a2[1];
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v6)
    return v6(a1, v3, v4);
  return result;
}

uint64_t FigImageQueueArraySetPropertyValuesFromArray()
{
  return FigCFArrayForEach2();
}

uint64_t FigImageQueueSetPropertyApply2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  if (!a1 || *MEMORY[0x1E0C9B0D0] == a1)
    return FigSignalErrorAt();
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(a1, a3, a2);
  return result;
}

uint64_t FigImageQueueArrayCreateImageQueueConfigurationArray(CFArrayRef theArray, const __CFAllocator *a2, const __CFArray *a3, __CFArray **a4)
{
  CFIndex Count;
  CFIndex v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  CFIndex v12;
  const __CFAllocator *v13;
  const void *ValueAtIndex;
  const void *v15;
  __CFDictionary *v16;
  __CFArray **v18;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (!a4)
      return FigSignalErrorAt();
  }
  else
  {
    Count = 0;
    if (!a4)
      return FigSignalErrorAt();
  }
  if (a3)
    v9 = CFArrayGetCount(a3);
  else
    v9 = 0;
  if (Count != v9)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v11 = Mutable;
  v18 = a4;
  if (Count >= 1)
  {
    v12 = 0;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
      v15 = CFArrayGetValueAtIndex(a3, v12);
      v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v16, CFSTR("FigImageQueueConfigurationKey_ImageQueue"), ValueAtIndex);
      if (!FigCFEqual())
        CFDictionarySetValue(v16, CFSTR("FigImageQueueConfigurationKey_Options"), v15);
      CFArrayAppendValue(v11, v16);
      if (v16)
        CFRelease(v16);
      ++v12;
    }
    while (Count != v12);
  }
  *v18 = v11;
  return 0;
}

CFStringRef FigImageQueueCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigImageQueue %p]"), a1);
}

uint64_t FigCDSBasicInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCDSInputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCDSBasicInputAddSample(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(_QWORD *)v4[0])
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)digestSubtitleSampleDo_1);
  return 0;
}

void digestSubtitleSampleDo_1(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const __CFDictionary *v3;
  uint64_t v4;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  int64_t Count;
  size_t v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  CFTypeID v15;
  const void *v16;
  const __CFDictionary *v17;
  const void *v18;
  uint64_t ProtocolVTable;
  uint64_t v20;
  void (*v21)(const void *, const void *);
  const void *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(const void *, _QWORD);
  const __CFNumber *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(const void *, uint64_t);
  const void *v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(const void *, double, double);
  const void *v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(const void *, double, double);
  uint64_t v45;
  const __CFNumber *v46;
  uint64_t v47;
  const void *v48;
  const void *v49;
  const __CFArray *v50;
  const __CFArray *v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex i;
  const __CFAttributedString *ValueAtIndex;
  const __CFAttributedString *v56;
  void *v57;
  void *v58;
  void *key;
  int v60;
  char v61;
  CFDictionaryRef theDict;
  double v63;
  double v64;
  double v65;
  double v66;
  unsigned int valuePtr;
  double v68;
  const void *v69;

  v2 = *a1;
  v1 = (const void *)a1[1];
  theDict = 0;
  v61 = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v1, &theDict, &v61, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24)))goto LABEL_58;
  v3 = theDict;
  if (!theDict)
    goto LABEL_57;
  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
  {
    FigCDSLayoutContextSetSubtitleSample(v4, theDict);
    v3 = theDict;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("SubtitleContentMetadata"));
  if (Value)
  {
    v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA2C38]);
    Count = CFDictionaryGetCount(v6);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      v10 = (const void **)malloc_type_calloc(v8, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v6, v9, v10);
      v11 = 0;
      v58 = (void *)*MEMORY[0x1E0CA2CC0];
      key = (void *)*MEMORY[0x1E0CA2CA8];
      v57 = (void *)*MEMORY[0x1E0CA2CB0];
      do
      {
        v12 = v10[v11];
        if (v12)
        {
          v13 = CFGetTypeID(v12);
          if (v13 == CFDictionaryGetTypeID())
          {
            v14 = v9[v11];
            if (v14)
            {
              v15 = CFGetTypeID(v14);
              if (v15 == CFStringGetTypeID())
              {
                v16 = v9[v11];
                v17 = (const __CFDictionary *)v10[v11];
                v69 = 0;
                FigCDSStackLayoutRegionCreate(&v69);
                v68 = 0.0;
                valuePtr = 0;
                v65 = 0.0;
                v66 = 0.0;
                v63 = 0.0;
                v64 = 0.0;
                v18 = v69;
                FigCDSRegionProtocolGetProtocolID();
                ProtocolVTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable)
                {
                  v20 = *(_QWORD *)(ProtocolVTable + 16);
                  if (v20)
                  {
                    v21 = *(void (**)(const void *, const void *))(v20 + 8);
                    if (v21)
                      v21(v18, v16);
                  }
                }
                if (FigCFDictionaryGetCGFloatIfPresent())
                {
                  v22 = v69;
                  v23 = v68;
                  FigCDSRegionProtocolGetProtocolID();
                  v24 = CMBaseObjectGetProtocolVTable();
                  if (v24)
                  {
                    v25 = *(_QWORD *)(v24 + 16);
                    if (v25)
                    {
                      v26 = *(void (**)(const void *, _QWORD))(v25 + 24);
                      if (v26)
                        v26(v22, (int)v23);
                    }
                  }
                  v27 = (const __CFNumber *)CFDictionaryGetValue(v17, key);
                  if (v27)
                  {
                    CFNumberGetValue(v27, kCFNumberIntType, &valuePtr);
                    v28 = v69;
                    v29 = valuePtr;
                    FigCDSRegionProtocolGetProtocolID();
                    v30 = CMBaseObjectGetProtocolVTable();
                    if (v30)
                    {
                      v31 = *(_QWORD *)(v30 + 16);
                      if (v31)
                      {
                        v32 = *(void (**)(const void *, uint64_t))(v31 + 40);
                        if (v32)
                          v32(v28, v29);
                      }
                    }
                    if (CFDictionaryGetValue(v17, v58)
                      && FigCFDictionaryGetCGFloatIfPresent()
                      && FigCFDictionaryGetCGFloatIfPresent())
                    {
                      v33 = v69;
                      v35 = v65;
                      v34 = v66;
                      FigCDSRegionProtocolGetProtocolID();
                      v36 = CMBaseObjectGetProtocolVTable();
                      if (v36)
                      {
                        v37 = *(_QWORD *)(v36 + 16);
                        if (v37)
                        {
                          v38 = *(void (**)(const void *, double, double))(v37 + 72);
                          if (v38)
                            v38(v33, v34, 100.0 - v35);
                        }
                      }
                      if (CFDictionaryGetValue(v17, v57)
                        && FigCFDictionaryGetCGFloatIfPresent()
                        && FigCFDictionaryGetCGFloatIfPresent())
                      {
                        v39 = v69;
                        v41 = v63;
                        v40 = v64;
                        FigCDSRegionProtocolGetProtocolID();
                        v42 = CMBaseObjectGetProtocolVTable();
                        if (v42)
                        {
                          v43 = *(_QWORD *)(v42 + 16);
                          if (v43)
                          {
                            v44 = *(void (**)(const void *, double, double))(v43 + 56);
                            if (v44)
                              v44(v39, v40, v41);
                          }
                        }
                        v45 = *(_QWORD *)(v2 + 48);
                        if (v45)
                          FigCDSLayoutContextSetMapping(v45, v69, v17);
                        (*(void (**)(const void *, _QWORD))(v2 + 24))(v69, *(_QWORD *)(v2 + 32));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v11;
      }
      while (v8 != v11);
      free(v9);
      free(v10);
    }
  }
  v60 = 0;
  v46 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("SubtitleFormat"));
  CFNumberGetValue(v46, kCFNumberSInt32Type, &v60);
  if (((v60 - 2004251764) & 0xFEFFFFFF) != 0)
    v47 = 3;
  else
    v47 = 4;
  CFDictionaryGetValue(theDict, CFSTR("SubtitleTimeRange"));
  v48 = CFDictionaryGetValue(theDict, CFSTR("kFigSubtitleRenderer_TextBox"));
  v49 = CFDictionaryGetValue(theDict, CFSTR("SubtitleExtendedLanguageTag"));
  v50 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
  if (v50)
  {
    v51 = v50;
    v52 = CFArrayGetCount(v50);
    if (v52)
    {
      v53 = v52;
      if (v52 >= 1)
      {
        for (i = 0; i != v53; ++i)
        {
          ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v51, i);
          if (ValueAtIndex)
          {
            v56 = ValueAtIndex;
            if (CFAttributedStringGetLength(ValueAtIndex))
              outputCueAsFigCDSCaption(v2, v47, (uint64_t)v49, v48, v56);
          }
        }
      }
      goto LABEL_58;
    }
LABEL_57:
    outputCueAsFigCDSCaption(v2, 5, 0, 0, 0);
  }
LABEL_58:
  if (theDict)
    CFRelease(theDict);
}

uint64_t FigCDSBasicInputSetLayoutContext(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(_QWORD *)v4[0])
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setLayoutContextDo_0);
  return 0;
}

void setLayoutContextDo_0(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  v1 = (const void *)a1[1];
  v3 = *(const void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

void figCDSBasicInput_Finalize()
{
  dispatch_object_t *DerivedStorage;

  DerivedStorage = (dispatch_object_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    dispatch_release(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *figCDSBasicInput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSBasicInput %p>"), a1);
  return Mutable;
}

uint64_t start_0()
{
  return 0;
}

uint64_t stop_0()
{
  return 0;
}

void outputCueAsFigCDSCaption(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const __CFAttributedString *a5)
{
  const void *v10;
  uint64_t ProtocolVTable;
  uint64_t v12;
  void (*v13)(const void *, uint64_t);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(const void *, uint64_t);
  __CFDictionary *Mutable;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(const void *, __CFDictionary *);
  CFTypeRef Attribute;
  const void *v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  const void *v28;
  CFTypeRef v29;
  const void *v30;
  CFTypeRef v31;
  const void *v32;
  CFTypeRef v33;
  const void *v34;
  CFTypeRef v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(const void *, const __CFAttributedString *);
  uint64_t v40;
  const void *v41;
  CFRange effectiveRange;

  effectiveRange.location = 0;
  effectiveRange.length = 0;
  v41 = 0;
  FigCDSCaptionCreate(&v41);
  v10 = v41;
  FigCDSCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v12 = *(_QWORD *)(ProtocolVTable + 16);
    if (v12)
    {
      v13 = *(void (**)(const void *, uint64_t))(v12 + 40);
      if (v13)
        v13(v10, a2);
    }
  }
  if ((_DWORD)a2 == 5)
  {
    (*(void (**)(const void *, _QWORD))(a1 + 16))(v41, *(_QWORD *)(a1 + 32));
  }
  else if (a5)
  {
    v14 = v41;
    FigCDSCaptionProtocolGetProtocolID();
    v15 = CMBaseObjectGetProtocolVTable();
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v17 = *(void (**)(const void *, uint64_t))(v16 + 56);
        if (v17)
          v17(v14, a3);
      }
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v19 = v41;
    FigCDSCaptionProtocolGetProtocolID();
    v20 = CMBaseObjectGetProtocolVTable();
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
      {
        v22 = *(void (**)(const void *, __CFDictionary *))(v21 + 8);
        if (v22)
          v22(v19, Mutable);
      }
    }
    Attribute = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA2AB0], &effectiveRange);
    if (Attribute)
      CFDictionarySetValue(Mutable, CFSTR("region"), Attribute);
    if (a4)
      CFDictionarySetValue(Mutable, CFSTR("textbox"), a4);
    if ((_DWORD)a2 == 4)
    {
      v24 = (const void *)*MEMORY[0x1E0CA2B40];
      v25 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
      if (v25)
        CFDictionarySetValue(Mutable, v24, v25);
      v26 = (const void *)*MEMORY[0x1E0CA2B20];
      v27 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA2B20], &effectiveRange);
      if (v27)
        CFDictionarySetValue(Mutable, v26, v27);
      v28 = (const void *)*MEMORY[0x1E0CA2A88];
      v29 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA2A88], &effectiveRange);
      if (v29)
        CFDictionarySetValue(Mutable, v28, v29);
      v30 = (const void *)*MEMORY[0x1E0CA2A80];
      v31 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA2A80], &effectiveRange);
      if (v31)
        CFDictionarySetValue(Mutable, v30, v31);
      v32 = (const void *)*MEMORY[0x1E0CA29D8];
      v33 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA29D8], &effectiveRange);
      if (v33)
        CFDictionarySetValue(Mutable, v32, v33);
      v34 = (const void *)*MEMORY[0x1E0CA29E0];
      v35 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E0CA29E0], &effectiveRange);
      if (v35)
        CFDictionarySetValue(Mutable, v34, v35);
    }
    v36 = v41;
    FigCDSCaptionProtocolGetProtocolID();
    v37 = CMBaseObjectGetProtocolVTable();
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 16);
      if (v38)
      {
        v39 = *(void (**)(const void *, const __CFAttributedString *))(v38 + 24);
        if (v39)
          v39(v36, a5);
      }
    }
    v40 = *(_QWORD *)(a1 + 48);
    if (v40)
      FigCDSLayoutContextSetMapping(v40, v41, a5);
    (*(void (**)(const void *, _QWORD))(a1 + 16))(v41, *(_QWORD *)(a1 + 32));
    if (Mutable)
      CFRelease(Mutable);
  }
}

uint64_t FigCDSActionCreate(_QWORD *a1)
{
  uint64_t v2;

  *a1 = 0;
  MEMORY[0x19402F294](&FigCDSActionGetClassID_sRegisterFigCDSActionBaseTypeOnce, RegisterFigCDSActionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    *(_DWORD *)CMBaseObjectGetDerivedStorage() = 0;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCDSMoveToActionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;

  *a1 = 0;
  MEMORY[0x19402F294](&FigCDSMoveToActionGetClassID_sRegisterFigCDSMoveToActionBaseTypeOnce, RegisterFigCDSMoveToActionBaseType);
  v2 = CMDerivedObjectCreate();
  if ((_DWORD)v2)
    return v2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E0C9D538];
  v4 = FigCDSActionCreate((_QWORD *)DerivedStorage);
  if ((_DWORD)v4)
    FigSignalErrorAt();
  else
    *a1 = 0;
  return v4;
}

__CFString *FigCDSActionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSAction: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSAction_FigCDSActionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSAction <FigCDSActionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSAction_FigCDSActionProtocol_GetDuration(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCDSAction_FigCDSActionProtocol_SetDuration(uint64_t a1, int a2)
{
  *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t RegisterFigCDSActionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSActionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSAction]"));
}

void FigCDSMoveToActionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCDSMoveToActionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSMoveToAction: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSMoveToAction_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSMoveToAction <FigCDSBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSMoveToAction_FigCDSBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCDSMoveToAction";
  return 0;
}

__CFString *FigCDSMoveToAction_FigCDSActionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSMoveToAction <FigCDSActionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSMoveToAction_FigCDSActionProtocol_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSActionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSMoveToAction_FigCDSActionProtocol_SetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSActionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCDSMoveToAction_FigCDSMoveToActionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSMoveToAction <FigCDSMoveToActionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSMoveToAction_FigCDSMoveToActionProtocol_GetTargetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSMoveToAction_FigCDSMoveToActionProtocol_SetTargetPosition(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  return 0;
}

uint64_t RegisterFigCDSMoveToActionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSMoveToActionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSMoveToAction]"));
}

uint64_t FigFairplayPSSHAtomParserStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigFairplayPSSHAtomParserStartServer_block_invoke;
  block[3] = &unk_1E2F92DC8;
  block[4] = &v3;
  if (FigFairplayPSSHAtomParserStartServer_sFairplayPSSHAtomParserServerSetupOnce != -1)
    dispatch_once(&FigFairplayPSSHAtomParserStartServer_sFairplayPSSHAtomParserServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t figFairplayPSSHAtom_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t FigPhotoCompressionSessionAddImageToSequence()
{
  return CMPhotoCompressionSessionAddImageToSequence();
}

uint64_t FigVideoTargetXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return remoteXPCVideoTarget_GetObjectID(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteXPCVideoTarget_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteXPCVideoTargetClient_EnsureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __remoteXPCVideoTargetClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E2F92E68;
  block[4] = &v3;
  if (remoteXPCVideoTargetClient_EnsureClientEstablished_gVideoTargetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCVideoTargetClient_EnsureClientEstablished_gVideoTargetRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigVideoTargetCreateRemoteWithVideoReceiverEndpointID(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t VideoTargetObject;
  xpc_object_t value;
  void *v8;
  uint64_t uint64;
  uint64_t DerivedStorage;
  uint64_t v11;

  if (!a2)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (!a4)
    goto LABEL_15;
  VideoTargetObject = remoteXPCVideoTargetClient_EnsureClientEstablished();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = remoteXPCVideoTarget_CreateVideoTargetObject();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = FigXPCCreateBasicMessage();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  value = xpc_dictionary_get_value(a2, (const char *)kFigVideoReceiverEndpoint);
  if (!value || (v8 = value, MEMORY[0x194031C7C]() != MEMORY[0x1E0C81308]))
  {
LABEL_15:
    VideoTargetObject = FigSignalErrorAt();
LABEL_16:
    v11 = VideoTargetObject;
    goto LABEL_12;
  }
  xpc_dictionary_set_value(0, "ReceiverEndpoint", v8);
  VideoTargetObject = FigXPCMessageSetCFDictionary();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = uint64;
  *(_BYTE *)(DerivedStorage + 8) = 0;
  v11 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)v11)
    *a4 = 0;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  if (gVideoTargetRemoteClient)
    FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteXPCVideoTarget_CreateVideoTargetObject()
{
  uint64_t result;

  FigVideoTargetGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigVideoTargetCreateRemoteSharingVideoReceiverFromRemoteVideoTarget(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t VideoTargetObject;
  uint64_t uint64;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t value;
  xpc_object_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  value = 0;
  if (!a2)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_11;
  }
  if (!a4)
  {
    VideoTargetObject = FigSignalErrorAt();
LABEL_16:
    v9 = VideoTargetObject;
    goto LABEL_11;
  }
  VideoTargetObject = remoteXPCVideoTargetClient_EnsureClientEstablished();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = remoteXPCVideoTarget_CreateVideoTargetObject();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = FigXPCCreateBasicMessage();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = remoteXPCVideoTarget_GetObjectID(a2, &value);
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  xpc_dictionary_set_uint64(xdict, "VideoTargetWithReceiverToShare", value);
  VideoTargetObject = FigXPCMessageSetCFDictionary();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  VideoTargetObject = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)VideoTargetObject)
    goto LABEL_16;
  uint64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E0CA36A0]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = uint64;
  *(_BYTE *)(DerivedStorage + 8) = 0;
  v9 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)v9)
    *a4 = 0;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  if (gVideoTargetRemoteClient)
    FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCVideoTargetClient_DeadConnectionCallback(const void *a1)
{
  CFTypeID v1;
  uint64_t result;

  v1 = CFGetTypeID(a1);
  result = FigVideoTargetGetTypeID();
  if (v1 == result)
  {
    result = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}

uint64_t remoteXPCVideoTarget_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCVideoTarget_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoTargetRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCVideoTarget_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (a2 && a4)
  {
    *a4 = 0;
    ObjectID = remoteXPCVideoTarget_GetObjectID(a1, &v7);
    if (!(_DWORD)ObjectID)
      ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v5 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCVideoTarget_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (a2 && a3)
  {
    ObjectID = remoteXPCVideoTarget_GetObjectID(a1, &v6);
    if (!(_DWORD)ObjectID)
      ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v4 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCVideoTarget_setActive(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v3)
  {
    xpc_dictionary_set_BOOL(0, "Active", a2 != 0);
    v3 = FigXPCRemoteClientSendSyncMessage();
  }
  v4 = v3;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t FigTTMLDocumentWriterCreateStyleOptimizer(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterStyleOptimizer_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
}

CFStringRef figTTMLDocumentWriterStyleOptimizer_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterStyleOptimizer[%p]"), a1);
}

uint64_t figTTMLDocumentWriterStyleOptimizer_StartElement(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], a2, *(_QWORD *)(DerivedStorage + 16), (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v7 = cf;
    if (!cf)
      return v4;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    *(_QWORD *)(DerivedStorage + 8) = v6;
  }
  v7 = cf;
  *(_QWORD *)(DerivedStorage + 16) = cf;
  if (v7)
LABEL_9:
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  CFIndex ChildrenCount;
  CFIndex v5;
  CFIndex v6;
  void *ChildAtIndex;
  void *v8;
  CFTypeID v9;
  const __CFArray *v10;
  uint64_t result;
  uint64_t ParentElement;
  CFRange v13;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = DerivedStorage;
  v3 = *(_QWORD *)(DerivedStorage + 16);
  if (v3 != *(_QWORD *)(DerivedStorage + 8))
    goto LABEL_12;
  ChildrenCount = FigTTMLDocumentWriterElementGetChildrenCount(*(_QWORD *)(DerivedStorage + 16));
  if (ChildrenCount >= 1)
  {
    v5 = ChildrenCount;
    v6 = 0;
    while (1)
    {
      ChildAtIndex = (void *)FigTTMLDocumentWriterElementGetChildAtIndex(v3, v6);
      if (ChildAtIndex)
      {
        v8 = ChildAtIndex;
        v9 = CFGetTypeID(ChildAtIndex);
        if (v9 == FigTTMLDocumentWriterElementGetTypeID()
          && FigTTMLDocumentWriterElementGetElementType((uint64_t)v8) == 2)
        {
          break;
        }
      }
      if (v5 == ++v6)
        goto LABEL_10;
    }
    v10 = (const __CFArray *)FigTTMLGetInheritableStyleAttributeNames();
    v13.length = CFArrayGetCount(v10);
    v13.location = 0;
    CFArrayApplyFunction(v10, v13, (CFArrayApplierFunction)optimizeStyleAttributesAux, v8);
  }
LABEL_10:
  result = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(v2 + 8), *(_QWORD *)v2);
  if (!(_DWORD)result)
  {
    v3 = *(_QWORD *)(v2 + 16);
LABEL_12:
    ParentElement = FigTTMLDocumentWriterElementGetParentElement(v3);
    result = 0;
    *(_QWORD *)(v2 + 16) = ParentElement;
  }
  return result;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_AddCaptionData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(_QWORD *)(DerivedStorage + 16), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2])
    return 4294950721;
  else
    return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

void optimizeStyleAttributesAux(const void *a1, uint64_t a2)
{
  const __CFDictionary *Mutable;
  CFIndex ChildrenCount;
  CFTypeRef v6;
  CFIndex v7;
  const void *ChildAtIndex;
  const void *v9;
  CFTypeID v10;
  __CFDictionary *v11;
  const void *v12;
  uint64_t v13;
  CFTypeID v14;
  const void *Attribute;
  const void *v16;
  const void *v17;
  CFIndex i;
  const void *v19;
  uint64_t v20;
  CFTypeID v21;
  CFTypeRef cf2[2];

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  ChildrenCount = FigTTMLDocumentWriterElementGetChildrenCount(a2);
  v6 = (CFTypeRef)*MEMORY[0x1E0C9B0D0];
  if (ChildrenCount >= 1)
  {
    v7 = 0;
    while (1)
    {
      ChildAtIndex = FigTTMLDocumentWriterElementGetChildAtIndex(a2, v7);
      if (ChildAtIndex)
      {
        v9 = ChildAtIndex;
        v10 = CFGetTypeID(ChildAtIndex);
        if (v10 == FigCaptionDataGetTypeID())
          goto LABEL_5;
        v14 = CFGetTypeID(v9);
        if (v14 == FigTTMLDocumentWriterElementGetTypeID())
          break;
      }
LABEL_10:
      if (ChildrenCount == ++v7)
        goto LABEL_11;
    }
    optimizeStyleAttributesAux(a1, v9);
    Attribute = FigTTMLDocumentWriterElementGetAttribute((uint64_t)v9, a1);
    if (Attribute)
    {
      v16 = Attribute;
      v13 = (uint64_t)CFDictionaryGetValue(Mutable, Attribute) + 1;
      v11 = Mutable;
      v12 = v16;
    }
    else
    {
LABEL_5:
      v11 = Mutable;
      v12 = v6;
      v13 = 0x7FFFFFFFLL;
    }
    CFDictionarySetValue(v11, v12, (const void *)v13);
    goto LABEL_10;
  }
LABEL_11:
  cf2[0] = v6;
  cf2[1] = 0;
  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)findMostCommonStyleValue, cf2);
  if (cf2[0] != v6)
  {
    v17 = FigTTMLDocumentWriterElementGetAttribute(a2, a1);
    if (!v17 || CFEqual(v17, cf2[0]))
    {
      FigTTMLDocumentWriterElementSetAttribute(a2, a1, cf2[0]);
      if (ChildrenCount >= 1)
      {
        for (i = 0; i != ChildrenCount; ++i)
        {
          v19 = FigTTMLDocumentWriterElementGetChildAtIndex(a2, i);
          if (v19)
          {
            v20 = (uint64_t)v19;
            v21 = CFGetTypeID(v19);
            if (v21 == FigTTMLDocumentWriterElementGetTypeID())
            {
              FigTTMLDocumentWriterElementGetAttribute(v20, a1);
              if (FigCFEqual())
                FigTTMLDocumentWriterElementRemoveAttribute(v20, a1);
            }
          }
        }
      }
    }
  }
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t findMostCommonStyleValue(uint64_t result, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) < a2)
  {
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t FigPlaybackCoordinatorGetClassID()
{
  if (FigPlaybackCoordinatorGetClassID_onceToken != -1)
    dispatch_once_f(&FigPlaybackCoordinatorGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPlaybackCoordinatorBaseTypeOnce);
  return sFigPlaybackCoordinatorClassID;
}

uint64_t RegisterFigPlaybackCoordinatorBaseTypeOnce()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPlaybackCoordinatorGetTypeID()
{
  if (FigPlaybackCoordinatorGetClassID_onceToken != -1)
    dispatch_once_f(&FigPlaybackCoordinatorGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPlaybackCoordinatorBaseTypeOnce);
  return CMBaseClassGetCFTypeID();
}

CFStringRef PlaybackCoordinatorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPlaybackCoordinator %p]"), a1);
}

uint64_t figSFBSKFAssertion_init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t figSFBSKFAssertion_finalize()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  if (dword_1EE2A2E98)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

CFStringRef figSFBSKFAssertion_copyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigSFBSKeepForegroundAssertion %p retainCount: %ld>"), a1, v3);
}

uint64_t FigSFBSKeepForegroundAssertionCreate(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a4)
    return FigSignalErrorAt();
  if (FigSFBSKeepForegroundAssertionGetTypeID_sRegisterFigSFBSKeepForegroundAssertionTypeOnce != -1)
    dispatch_once(&FigSFBSKeepForegroundAssertionGetTypeID_sRegisterFigSFBSKeepForegroundAssertionTypeOnce, &__block_literal_global_30);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  *(_DWORD *)(Instance + 16) = a3;
  if (dword_1EE2A2E98)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *a4 = v7;
  return 0;
}

uint64_t FigImageQueueCreateForCoreVideo(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v6;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2)
    return FigSignalErrorAt();
  FigImageQueueGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = FigReentrantMutexCreate();
    *(_QWORD *)(DerivedStorage + 16) = DerivedStorage + 16;
    *(_QWORD *)(DerivedStorage + 24) = DerivedStorage + 16;
    *(_QWORD *)(DerivedStorage + 8) = v6;
    *(_QWORD *)(DerivedStorage + 144) = 1;
    *(_QWORD *)(DerivedStorage + 152) = 0x100000001;
    *(_QWORD *)(DerivedStorage + 1128) = FigSimpleMutexCreate();
    *(_DWORD *)(DerivedStorage + 1124) = 1;
    *a2 = 0;
  }
  return v3;
}

uint64_t FigImageQueueCreateForDiscarding(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v6;

  v6 = 0;
  v3 = FigImageQueueCreateForCoreVideo(a1, &v6);
  if (!(_DWORD)v3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 1176) = 1;
    *(_DWORD *)(DerivedStorage + 1124) = 2;
  }
  *a2 = v6;
  return v3;
}

uint64_t piqcv_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  piqUnhookVisualContext(a1);
  piqDrop(a1, MEMORY[0x1E0CA2E18]);
  if (*(_QWORD *)(DerivedStorage + 1184))
  {
    CMBaseObject = FigImageQueueGaugeGetCMBaseObject();
    if (CMBaseObject)
    {
      v4 = CMBaseObject;
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
    }
    v6 = *(const void **)(DerivedStorage + 1184);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 1184) = 0;
    }
  }
  FigSimpleMutexDestroy();
  result = *(_QWORD *)(DerivedStorage + 1128);
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

uint64_t piqcv_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v8;
  CFTypeRef *v9;
  int v10;
  uint64_t v11;
  CFTypeRef *v13;
  uint64_t AllocatorForMedia;
  CFTypeRef v15;
  void (*v16)(__int128 *__return_ptr, uint64_t);
  uint64_t (*v17)(CFTypeRef, __int128 *);
  __int128 v18;
  uint64_t v19;
  __int128 valuePtr;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(CFSTR("FigImageQueueProperty_CurrentFrameRate"), a2))
  {
    LODWORD(valuePtr) = FigImageQueueFrameRateGetCurrent((_QWORD *)(DerivedStorage + 1128));
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_FirstImageEnqueued"), a2))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 172);
LABEL_7:
    if (!v10)
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v8 = CFRetain(*v9);
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_LimitCapacityToOneFrame"), a2))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 170);
    goto LABEL_7;
  }
  if (!CFEqual(CFSTR("ImageQueueGauge"), a2))
    return 4294954512;
  v8 = *(CFTypeRef *)(DerivedStorage + 1184);
  if (v8)
  {
    v11 = 0;
  }
  else
  {
    v13 = (CFTypeRef *)(DerivedStorage + 1184);
    AllocatorForMedia = FigGetAllocatorForMedia();
    v11 = FigImageQueueGaugeCreate(AllocatorForMedia, 0, v13);
    if (!(_DWORD)v11)
    {
      v15 = *v13;
      v16 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v16)
      {
        v16(&v18, a1);
      }
      else
      {
        v18 = *MEMORY[0x1E0CA2E18];
        v19 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      }
      v17 = *(uint64_t (**)(CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v17)
      {
        valuePtr = v18;
        v21 = v19;
        v11 = v17(v15, &valuePtr);
      }
      else
      {
        v11 = 4294954514;
      }
    }
    v8 = *v13;
    if (!*v13)
      goto LABEL_11;
  }
  v8 = CFRetain(v8);
LABEL_11:
  *a4 = v8;
  return v11;
}

uint64_t piqcv_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(CFSTR("FigImageQueueProperty_LimitCapacityToOneFrame"), a2))
    return 4294954512;
  if (!a3)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a3);
  if (v6 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  result = 0;
  *(_BYTE *)(DerivedStorage + 170) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
  return result;
}

void piqUnhookVisualContext(uint64_t a1)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v3;
  CFTypeRef *v4;
  void (*v5)(CFTypeRef, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t);

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v3 = *DerivedStorage;
  if (*DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 112);
    if (v5)
      v5(v3, 0, 0, 0, 0, a1);
    if (*v4)
    {
      CFRelease(*v4);
      *v4 = 0;
    }
  }
}

uint64_t piqDrop(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t *v4;
  uint64_t v5;
  int *v6;
  unsigned __int8 v7;
  uint64_t v8;
  CMTime *v9;
  uint64_t v10;
  unsigned int v11;
  CMTime v13;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage + 16;
  v4 = *(uint64_t **)(DerivedStorage + 16);
  if (v4 == (uint64_t *)(DerivedStorage + 16))
  {
    return 0;
  }
  else
  {
    v6 = (int *)DerivedStorage;
    v7 = 0;
    do
    {
      if ((*(_BYTE *)(a2 + 12) & 1) != 0)
      {
        v8 = *v4;
        if (v8 == v5)
          return v7;
        v9 = (CMTime *)(v8 + 16);
        if (v6[39] < 1)
        {
          time1 = *v9;
          time2 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &time2) < 0)
            return v7;
        }
        else
        {
          time1 = *v9;
          time2 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &time2) >= 1)
            return v7;
        }
      }
      v10 = *(_QWORD *)v5;
      if (*(_BYTE *)(*(_QWORD *)v5 + 68))
      {
        ++v6[263];
      }
      else if ((*(_BYTE *)(a2 + 12) & 1) != 0)
      {
        v11 = v6[56];
        if (v11 <= 0x63)
        {
          time1 = *(CMTime *)(v10 + 16);
          CMTimeConvertScale(&v13, &time1, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v6[v6[56] + 62] = v13.value;
          v11 = v6[56];
        }
        v6[56] = v11 + 1;
      }
      else
      {
        ++v6[264];
      }
      piqRemoveItemFromQueue((_QWORD *)v10);
      v4 = *(uint64_t **)v5;
      v7 = 1;
    }
    while (*(_QWORD *)v5 != v5);
  }
  return v7;
}

void piqRemoveItemFromQueue(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  const void *v4;

  v2 = (_QWORD *)a1[1];
  *v2 = *a1;
  *(_QWORD *)(*a1 + 8) = v2;
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  free(a1);
}

uint64_t piqcv_setOutputVisualContext(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v8;
  CFTypeRef v9;
  void (*v10)(CFTypeRef, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, CMTime *, char, _QWORD *, _QWORD *, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL *, uint64_t), uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    if (a2)
    {
      if ((const void *)*DerivedStorage != a2)
        return FigSignalErrorAt();
    }
    else
    {
      piqUnhookVisualContext(a1);
    }
  }
  else if (a2)
  {
    v8 = DerivedStorage;
    v9 = CFRetain(a2);
    *v8 = v9;
    v10 = *(void (**)(CFTypeRef, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, CMTime *, char, _QWORD *, _QWORD *, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL *, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
    if (v10)
      v10(v9, a3, piqIsNewImageAvailable, piqCopyImageForTime, piqGetEarliestSequentialImageTimeAfterTime, a1);
  }
  return 0;
}

uint64_t piqcv_flush(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  __int128 *v4;
  int v5;
  uint64_t v6;
  __int128 v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v3 = *(_QWORD **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = *v3;
  *(_QWORD *)(*v3 + 8) = DerivedStorage + 16;
  v4 = (__int128 *)MEMORY[0x1E0CA2E18];
  v5 = piqDrop(a1, MEMORY[0x1E0CA2E18]);
  *v3 = DerivedStorage + 16;
  v3[1] = DerivedStorage + 16;
  *(_QWORD *)(DerivedStorage + 24) = v3;
  *(_QWORD *)v3[1] = v3;
  ++*(_QWORD *)(DerivedStorage + 144);
  *(_WORD *)(DerivedStorage + 171) = 257;
  v6 = *((_QWORD *)v4 + 2);
  *(_QWORD *)(DerivedStorage + 192) = v6;
  v7 = *v4;
  *(_OWORD *)(DerivedStorage + 176) = *v4;
  *(_QWORD *)(DerivedStorage + 216) = v6;
  *(_OWORD *)(DerivedStorage + 200) = v7;
  *(_DWORD *)(DerivedStorage + 88) = 0;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  if (v5)
    piqcv_postOccupancyChanged(a1);
  if (*(_QWORD *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

uint64_t piqcv_canEnqueueImage()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 170))
    return *(_QWORD *)(DerivedStorage + 16) == DerivedStorage + 16;
  else
    return 99;
}

uint64_t piqcv_enqueueImage(uint64_t a1, __CVBuffer *a2, const void *a3, __int128 *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *i;
  uint64_t *v23;
  _OWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _OWORD *v27;
  _QWORD *v28;
  CMTime *v29;
  uint64_t v30;
  int IsImageTimeSequentialSafe;
  uint64_t v32;
  void (*v33)(uint64_t, CMTime *, uint64_t);
  CMTime v34;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || (*((_BYTE *)a4 + 12) & 1) == 0)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 1176))
    return 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v13 = *(_QWORD *)(v12 + 1184);
  if (v13)
  {
    v14 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v14)
      v14(v13, 0);
  }
  if ((a5 & 1) != 0)
  {
    ++*(_QWORD *)(v12 + 144);
    v15 = MEMORY[0x1E0CA2E18];
    v16 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v12 + 176) = *MEMORY[0x1E0CA2E18];
    v17 = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v12 + 192) = v17;
    *(_OWORD *)(v12 + 200) = v16;
    *(_QWORD *)(v12 + 216) = v17;
  }
  if ((*(_BYTE *)(v12 + 188) & 1) != 0)
  {
    v24 = (_OWORD *)(v12 + 176);
    if (*(int *)(v12 + 156) < 1)
    {
      *(_OWORD *)&time1.value = *v24;
      time1.epoch = *(_QWORD *)(v12 + 192);
      v34 = *(CMTime *)a4;
      if ((CMTimeCompare(&time1, &v34) & 0x80000000) == 0)
        goto LABEL_11;
    }
    else
    {
      *(_OWORD *)&time1.value = *v24;
      time1.epoch = *(_QWORD *)(v12 + 192);
      v34 = *(CMTime *)a4;
      if (CMTimeCompare(&time1, &v34) <= 0)
        goto LABEL_11;
    }
    v30 = 0;
    ++*(_DWORD *)(v12 + 1048);
    goto LABEL_38;
  }
LABEL_11:
  if (*(_BYTE *)(v12 + 171))
  {
    a5 = a5 | 1;
    *(_BYTE *)(v12 + 171) = 0;
  }
  v18 = malloc_type_malloc(0x48uLL, 0x10600402FA6333DuLL);
  if (v18)
  {
    v19 = v18;
    v18[6] = CVBufferRetain(a2);
    v19[7] = a3;
    if (a3)
      CFRetain(a3);
    v20 = *a4;
    v19[4] = *((_QWORD *)a4 + 2);
    *((_OWORD *)v19 + 1) = v20;
    v19[5] = *(_QWORD *)(v12 + 144);
    *((_DWORD *)v19 + 16) = a5 & 3;
    *((_WORD *)v19 + 34) = 0;
    v21 = CMBaseObjectGetDerivedStorage();
    for (i = *(uint64_t **)(v21 + 16); i != (uint64_t *)(v21 + 16); i = (uint64_t *)*i)
    {
      if (i[5] < *(_QWORD *)(v21 + 144))
      {
        v23 = (uint64_t *)i[1];
        if (*((_BYTE *)i + 68))
          ++*(_DWORD *)(v21 + 1052);
        else
          ++*(_DWORD *)(v21 + 1056);
        piqRemoveItemFromQueue(i);
        i = v23;
      }
    }
    v26 = (_QWORD *)(v12 + 16);
    v25 = *(_QWORD **)(v12 + 16);
    if (v25 == (_QWORD *)(v12 + 16))
    {
      v28 = (_QWORD *)(v12 + 16);
    }
    else
    {
      v27 = v19 + 2;
      v28 = (_QWORD *)(v12 + 16);
      do
      {
        v29 = (CMTime *)(v25 + 2);
        if (*(int *)(v12 + 156) < 1)
        {
          *(_OWORD *)&time1.value = *v27;
          time1.epoch = v19[4];
          v34 = *v29;
          if (CMTimeCompare(&time1, &v34) >= 1)
            break;
        }
        else
        {
          *(_OWORD *)&time1.value = *v27;
          time1.epoch = v19[4];
          v34 = *v29;
          if (CMTimeCompare(&time1, &v34) < 0)
            break;
        }
        v28 = (_QWORD *)*v28;
        v25 = (_QWORD *)*v28;
      }
      while ((_QWORD *)*v28 != v26);
      v26 = (_QWORD *)*v28;
    }
    *v19 = v26;
    v19[1] = v28;
    v26[1] = v19;
    *(_QWORD *)v19[1] = v19;
    time1 = *(CMTime *)a4;
    IsImageTimeSequentialSafe = piqIsImageTimeSequentialSafe(a1, a5, &time1);
    if (IsImageTimeSequentialSafe)
      *((_BYTE *)v19 + 69) = 1;
    MEMORY[0x19402EA24](*(_QWORD *)(v12 + 8));
    v32 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
    {
      v34 = *(CMTime *)a4;
      v33 = *(void (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v33)
      {
        time1 = v34;
        v33(v32, &time1, a5);
      }
      if (IsImageTimeSequentialSafe)
      {
        time1 = *(CMTime *)a4;
        piqReportImageAvailableSequential(a1, &time1, a5);
      }
    }
    if (!*(_BYTE *)(v12 + 168))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    if (!*(_BYTE *)(v12 + 172))
    {
      *(_BYTE *)(v12 + 172) = 1;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    piqcv_postOccupancyChanged(a1);
    return 0;
  }
  v30 = 4294954484;
LABEL_38:
  MEMORY[0x19402EA24](*(_QWORD *)(v12 + 8));
  return v30;
}

uint64_t piqcv_setAsync(uint64_t a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 168) = a2;
  return 0;
}

uint64_t piqcv_setDirection(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = *(_DWORD *)(DerivedStorage + 152);
  if (a2 >= 0.0)
    v7 = 0;
  else
    v7 = -1;
  if (a2 > 0.0)
    v7 = 1;
  if (v7)
    v8 = 1;
  else
    v8 = v6 == 0;
  if (v8)
  {
    *(_DWORD *)(DerivedStorage + 152) = v7;
    if (v7)
    {
      if (*(_DWORD *)(DerivedStorage + 156) != v7)
      {
        *(_DWORD *)(DerivedStorage + 156) = v7;
        if (v6 || *(_QWORD *)(DerivedStorage + 160) == *(_QWORD *)(DerivedStorage + 144))
          piqcv_flush(a1);
      }
    }
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 160) = *(_QWORD *)(DerivedStorage + 144);
    *(_DWORD *)(DerivedStorage + 152) = 0;
  }
  *(_BYTE *)(v5 + 169) = a2 == 1.0;
  return 0;
}

uint64_t piqcv_setUpcomingImageInfo(uint64_t a1, unsigned int a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  _BYTE v21[64];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v21[32], 0, 24);
  if (a2 >= 4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (a2 == 2 && ((*((_DWORD *)a3 + 3) & 0x1D) != 1 || (*(_DWORD *)(a4 + 12) & 0x1D) != 1))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v10 = *a3;
  v11 = *(uint64_t **)(v9 + 16);
  *(_QWORD *)(v9 + 108) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v9 + 92) = v10;
  v12 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(v9 + 116) = *(_OWORD *)a4;
  *(_QWORD *)(v9 + 132) = v12;
  *(_DWORD *)(v9 + 88) = a2;
  v13 = 1;
  while (v11 != (uint64_t *)(v9 + 16))
  {
    if (*((_BYTE *)v11 + 68))
      goto LABEL_10;
    if (*((_BYTE *)v11 + 69)
      || (v14 = *((_DWORD *)v11 + 16),
          *(CMTime *)v21 = *(CMTime *)(v11 + 2),
          !piqIsImageTimeSequentialSafe(a1, v14, (CMTime *)v21)))
    {
      v13 = 0;
LABEL_10:
      v11 = (uint64_t *)*v11;
    }
    else
    {
      *(CMTime *)&v21[32] = *(CMTime *)(v11 + 2);
      v15 = *((unsigned int *)v11 + 16);
      v13 = 1;
      *((_BYTE *)v11 + 69) = 1;
      MEMORY[0x19402EA24](*(_QWORD *)(v9 + 8));
      *(CMTime *)v21 = *(CMTime *)&v21[32];
      piqReportImageAvailableSequential(a1, (CMTime *)v21, v15);
      MEMORY[0x19402EA0C](*(_QWORD *)(v9 + 8));
      v11 = *(uint64_t **)(v9 + 16);
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(v9 + 8));
  if (a2 == 3)
  {
    if (v13)
    {
      v17 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
      {
        v18 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
        if (v18)
          v18(v17);
        *(_BYTE *)(v9 + 173) = 1;
      }
    }
LABEL_26:
    *(_BYTE *)(v9 + 174) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 173) = 0;
    if (a2 != 1)
      goto LABEL_26;
    if (v13)
    {
      v19 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
      {
        v20 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (v20)
          v20(v19);
        *(_BYTE *)(v9 + 174) = 1;
      }
    }
  }
  return 0;
}

uint64_t piqcv_getOccupancyInfo(uint64_t a1, _DWORD *a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v8;
  int v9;
  _OWORD *v10;
  CMTime v12;
  CMTime time1;
  CMTime v14;
  CMTime v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v14 = v15;
  ++*(_DWORD *)(DerivedStorage + 1068);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v8 = *(uint64_t **)(DerivedStorage + 16);
  if (v8 != (uint64_t *)(DerivedStorage + 16))
  {
    v9 = 0;
    while (*((_BYTE *)v8 + 68))
    {
LABEL_12:
      v8 = (uint64_t *)*v8;
      if (v8 == (uint64_t *)(DerivedStorage + 16))
        goto LABEL_15;
    }
    v10 = v8 + 2;
    if (v9)
    {
      *(_OWORD *)&time1.value = *v10;
      time1.epoch = v8[4];
      v12 = v15;
      if (CMTimeCompare(&time1, &v12) < 0)
      {
        *(_OWORD *)&v15.value = *v10;
        v15.epoch = v8[4];
      }
      time1 = v14;
      *(_OWORD *)&v12.value = *v10;
      v12.epoch = v8[4];
      if ((CMTimeCompare(&time1, &v12) & 0x80000000) == 0)
        goto LABEL_11;
    }
    else
    {
      *(_OWORD *)&v15.value = *v10;
      v15.epoch = v8[4];
    }
    *(_OWORD *)&v14.value = *v10;
    v14.epoch = v8[4];
LABEL_11:
    ++v9;
    goto LABEL_12;
  }
  v9 = 0;
LABEL_15:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  if (a2)
    *a2 = v9;
  if (a3)
    *a3 = v15;
  if (a4)
    *a4 = v14;
  return 0;
}

uint64_t piqcv_copyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  int v4;
  _QWORD *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v4 = -1;
  v5 = (_QWORD *)(DerivedStorage + 16);
  do
  {
    v5 = (_QWORD *)*v5;
    ++v4;
  }
  while (v5 != (_QWORD *)(DerivedStorage + 16));
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  *(_DWORD *)(DerivedStorage + 1060) = v4;
  return PIQCopyPerformanceDictionaryForInstanceStatistics((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (int *)(DerivedStorage + 224), a2);
}

uint64_t piqcv_getSafeDisplayDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  int v5;
  int v6;
  CMTime v8;
  CMTime v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(DerivedStorage + 156);
  v6 = *(_DWORD *)(DerivedStorage + 88);
  v9 = *(CMTime *)(DerivedStorage + 92);
  v8 = *(CMTime *)(DerivedStorage + 116);
  return FigImageQueueCalculateSafeDisplayDuration(a1, v5, v6, &v9, &v8, a2);
}

uint64_t piqcv_postNotification()
{
  if (!*(_QWORD *)CMBaseObjectGetDerivedStorage())
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t piqcv_flushFramesFollowingCurrent(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  piqcv_flush(a1);
  v3 = *(_QWORD *)(DerivedStorage + 1184);
  if (v3)
  {
    v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v4)
      v4(v3, 1);
  }
  return 0;
}

uint64_t piqIsNewImageAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  _OWORD *v8;
  CMTime *v9;
  CMTime v11;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v6 = v5 + 16;
  for (i = *(uint64_t **)(v5 + 16); i != (uint64_t *)v6; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 68))
      continue;
    if ((i[8] & 2) != 0)
      goto LABEL_17;
    v8 = i + 2;
    if (*(int *)(v5 + 156) < 1)
    {
      *(_OWORD *)&time1.value = *v8;
      time1.epoch = i[4];
      v11 = *(CMTime *)a2;
      if (CMTimeCompare(&time1, &v11) < 0)
        continue;
    }
    else
    {
      *(_OWORD *)&time1.value = *v8;
      time1.epoch = i[4];
      v11 = *(CMTime *)a2;
      if (CMTimeCompare(&time1, &v11) >= 1)
        continue;
    }
    if (*i == v6)
      goto LABEL_17;
    v9 = (CMTime *)(*i + 16);
    if (*(int *)(v5 + 156) < 1)
    {
      time1 = *(CMTime *)a2;
      v11 = *v9;
      if (CMTimeCompare(&time1, &v11) > 0)
      {
LABEL_17:
        v4 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      time1 = *(CMTime *)a2;
      v11 = *v9;
      if (CMTimeCompare(&time1, &v11) < 0)
        goto LABEL_17;
    }
  }
  v4 = 0;
LABEL_19:
  MEMORY[0x19402EA24](*(_QWORD *)(v5 + 8));
  return v4;
}

uint64_t piqCopyImageForTime(uint64_t a1, uint64_t a2, CMTime *a3, char a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  CMTimeValue *v18;
  CMTimeFlags v19;
  CMTimeEpoch v20;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  int32_t v23;
  _BOOL4 v24;
  CMTimeFlags v25;
  CMTimeEpoch v26;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int32_t v29;
  uint64_t v30;
  CMTimeValue *v31;
  CMTimeFlags v32;
  CMTimeEpoch v33;
  CMTimeFlags v34;
  CMTimeEpoch v35;
  unsigned int v36;
  _BOOL4 v37;
  CMTimeFlags v38;
  CMTimeEpoch v39;
  CMTimeFlags v40;
  CMTimeEpoch v41;
  int32_t v42;
  uint64_t *v43;
  int v44;
  __int128 v45;
  const void *v46;
  const void *v47;
  _OWORD *v48;
  __int128 v49;
  unsigned int v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  BOOL v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  CMTime v69;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v77;
  CMTimeScale v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a3->flags & 1) == 0)
    return FigSignalErrorAt();
  v15 = DerivedStorage;
  v65 = a7;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v17 = v15 + 16;
  v16 = *(uint64_t **)(v15 + 16);
  if (v16 == (uint64_t *)(v15 + 16))
  {
    v66 = 0;
    v44 = 0;
    goto LABEL_74;
  }
  v62 = a5;
  v63 = a6;
  v64 = a8;
  v66 = 0;
  while (1)
  {
    v67 = *((_DWORD *)v16 + 16);
    v18 = v16 + 2;
    if (*(int *)(v15 + 156) < 1)
    {
      v77 = *v18;
      v78 = *((_DWORD *)v16 + 6);
      v25 = *((_DWORD *)v16 + 7);
      v26 = v16[4];
      value = a3->value;
      flags = a3->flags;
      timescale = a3->timescale;
      epoch = a3->epoch;
      if ((v25 & 0x1F) != 3 && (flags & 0x1F) != 3)
        goto LABEL_14;
      memset(&time1, 0, sizeof(time1));
      lhs.value = v77;
      lhs.timescale = v78;
      lhs.flags = v25;
      lhs.epoch = v26;
      rhs.value = a3->value;
      rhs.timescale = a3->timescale;
      rhs.flags = flags;
      rhs.epoch = epoch;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        v29 = 0;
      }
      else
      {
LABEL_14:
        time1.value = v77;
        time1.timescale = v78;
        time1.flags = v25;
        time1.epoch = v26;
        rhs.value = value;
        rhs.timescale = timescale;
        rhs.flags = flags;
        rhs.epoch = epoch;
        v29 = CMTimeCompare(&time1, &rhs);
      }
      v24 = v29 >= 0;
    }
    else
    {
      v77 = *v18;
      v78 = *((_DWORD *)v16 + 6);
      v19 = *((_DWORD *)v16 + 7);
      v20 = v16[4];
      value = a3->value;
      v21 = a3->flags;
      timescale = a3->timescale;
      v22 = a3->epoch;
      if ((v19 & 0x1F) != 3 && (v21 & 0x1F) != 3)
        goto LABEL_9;
      memset(&time1, 0, sizeof(time1));
      lhs.value = v77;
      lhs.timescale = v78;
      lhs.flags = v19;
      lhs.epoch = v20;
      rhs.value = a3->value;
      rhs.timescale = a3->timescale;
      rhs.flags = v21;
      rhs.epoch = v22;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        v23 = 0;
      }
      else
      {
LABEL_9:
        time1.value = v77;
        time1.timescale = v78;
        time1.flags = v19;
        time1.epoch = v20;
        rhs.value = value;
        rhs.timescale = timescale;
        rhs.flags = v21;
        rhs.epoch = v22;
        v23 = CMTimeCompare(&time1, &rhs);
      }
      v24 = v23 < 1;
    }
    v30 = *v16;
    if (*v16 == v17)
      break;
    v31 = (CMTimeValue *)(v30 + 16);
    if (*(int *)(v15 + 156) < 1)
    {
      v77 = a3->value;
      v38 = a3->flags;
      v78 = a3->timescale;
      v39 = a3->epoch;
      value = *v31;
      timescale = *(_DWORD *)(v30 + 24);
      v40 = *(_DWORD *)(v30 + 28);
      v41 = *(_QWORD *)(v30 + 32);
      if ((v38 & 0x1F) != 3 && (*(_DWORD *)(v30 + 28) & 0x1F) != 3)
        goto LABEL_27;
      memset(&time1, 0, sizeof(time1));
      lhs.value = a3->value;
      lhs.timescale = a3->timescale;
      lhs.flags = v38;
      lhs.epoch = v39;
      rhs.value = value;
      rhs.timescale = timescale;
      rhs.flags = v40;
      rhs.epoch = v41;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        v42 = 0;
      }
      else
      {
LABEL_27:
        time1.value = v77;
        time1.timescale = v78;
        time1.flags = v38;
        time1.epoch = v39;
        rhs.value = value;
        rhs.timescale = timescale;
        rhs.flags = v40;
        rhs.epoch = v41;
        v42 = CMTimeCompare(&time1, &rhs);
      }
      v37 = v42 > 0;
      if (!v24)
      {
LABEL_45:
        if ((v67 & 2) == 0)
          goto LABEL_46;
        goto LABEL_40;
      }
    }
    else
    {
      v77 = a3->value;
      v32 = a3->flags;
      v78 = a3->timescale;
      v33 = a3->epoch;
      value = *v31;
      timescale = *(_DWORD *)(v30 + 24);
      v34 = *(_DWORD *)(v30 + 28);
      v35 = *(_QWORD *)(v30 + 32);
      if ((v32 & 0x1F) != 3 && (*(_DWORD *)(v30 + 28) & 0x1F) != 3)
        goto LABEL_21;
      memset(&time1, 0, sizeof(time1));
      lhs.value = a3->value;
      lhs.timescale = a3->timescale;
      lhs.flags = v32;
      lhs.epoch = v33;
      rhs.value = value;
      rhs.timescale = timescale;
      rhs.flags = v34;
      rhs.epoch = v35;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        v36 = 0;
      }
      else
      {
LABEL_21:
        time1.value = v77;
        time1.timescale = v78;
        time1.flags = v32;
        time1.epoch = v33;
        rhs.value = value;
        rhs.timescale = timescale;
        rhs.flags = v34;
        rhs.epoch = v35;
        v36 = CMTimeCompare(&time1, &rhs);
      }
      v37 = v36 >> 31;
      if (!v24)
        goto LABEL_45;
    }
    if (v37)
      goto LABEL_40;
    v43 = (uint64_t *)*v16;
    if ((a4 & 1) != 0)
    {
      piqRemoveItemFromQueue(v16);
      v66 = 1;
    }
    v16 = v43;
    if (v43 == (uint64_t *)v17)
      goto LABEL_46;
  }
  if (((v24 | ((v67 & 2) >> 1)) & 1) == 0)
  {
LABEL_46:
    v44 = 0;
    goto LABEL_73;
  }
LABEL_40:
  if (v65)
  {
    v45 = *(_OWORD *)v18;
    *(_QWORD *)(v65 + 16) = v16[4];
    *(_OWORD *)v65 = v45;
  }
  if (FigIsNullPixelBuffer((__CVBuffer *)v16[6]))
  {
    if (v62)
      *v62 = 0;
  }
  else if (v62)
  {
    *v62 = v16[6];
    v46 = (const void *)v16[6];
    if (v46)
      CFRetain(v46);
  }
  if (v63)
  {
    *v63 = v16[7];
    v47 = (const void *)v16[7];
    if (v47)
      CFRetain(v47);
  }
  if ((a4 & 4) != 0 || *((_BYTE *)v16 + 68))
  {
    v44 = 0;
  }
  else
  {
    if (*(_BYTE *)(v15 + 168))
    {
      if (*(_BYTE *)(v15 + 169))
      {
        memset(&time1, 0, sizeof(time1));
        time = *a3;
        *(_OWORD *)&lhs.value = *(_OWORD *)v18;
        lhs.epoch = v16[4];
        CMTimeSubtract(&time1, &time, &lhs);
        CMTimeMake(&time2, 1, 60);
        time = time1;
        if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
        {
          v50 = *(_DWORD *)(v15 + 240);
          if (v50 <= 0x63)
          {
            *(_OWORD *)&time.value = *(_OWORD *)v18;
            time.epoch = v16[4];
            CMTimeConvertScale(&v69, &time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            *(_DWORD *)(v15 + 4 * *(int *)(v15 + 240) + 648) = v69.value;
            v50 = *(_DWORD *)(v15 + 240);
          }
          *(_DWORD *)(v15 + 240) = v50 + 1;
        }
      }
    }
    v66 = 1;
    *((_BYTE *)v16 + 68) = 1;
    v44 = 1;
  }
  if ((a4 & 1) != 0)
  {
    v48 = (_OWORD *)(v15 + 176);
    if ((*(_BYTE *)(v15 + 188) & 1) != 0)
    {
      if (*(int *)(v15 + 156) < 1)
      {
        *(_OWORD *)&time1.value = *v48;
        time1.epoch = *(_QWORD *)(v15 + 192);
        *(_OWORD *)&time.value = *(_OWORD *)v18;
        time.epoch = v16[4];
        if (CMTimeCompare(&time1, &time) < 1)
          goto LABEL_71;
      }
      else
      {
        *(_OWORD *)&time1.value = *v48;
        time1.epoch = *(_QWORD *)(v15 + 192);
        *(_OWORD *)&time.value = *(_OWORD *)v18;
        time.epoch = v16[4];
        if ((CMTimeCompare(&time1, &time) & 0x80000000) == 0)
          goto LABEL_71;
      }
    }
    if (v16[5] == *(_QWORD *)(v15 + 144))
    {
      v49 = *(_OWORD *)v18;
      *(_QWORD *)(v15 + 192) = v16[4];
      *v48 = v49;
    }
  }
LABEL_71:
  if ((a4 & 2) != 0)
  {
    piqRemoveItemFromQueue(v16);
    v66 = 1;
  }
LABEL_73:
  a8 = v64;
LABEL_74:
  v51 = *(_DWORD *)(v15 + 88);
  if (v51 == 3)
  {
    if (*(_BYTE *)(v15 + 173))
    {
      v52 = 1;
      goto LABEL_80;
    }
    v58 = v15 + 16;
    do
    {
      v58 = *(_QWORD *)v58;
      v59 = v58 == v17 || v58 == 0;
      v52 = !v59;
    }
    while (!v59 && *(_BYTE *)(v58 + 68));
  }
  else
  {
    v52 = 1;
  }
  if (v51 == 1 && !*(_BYTE *)(v15 + 174))
  {
    v60 = v15 + 16;
    do
    {
      v60 = *(_QWORD *)v60;
      v61 = v60 == v17 || v60 == 0;
      v53 = !v61;
    }
    while (!v61 && *(_BYTE *)(v60 + 68));
    goto LABEL_81;
  }
LABEL_80:
  v53 = 1;
LABEL_81:
  MEMORY[0x19402EA24](*(_QWORD *)(v15 + 8));
  if (v66)
    piqcv_postOccupancyChanged(a8);
  if ((v52 & 1) == 0)
  {
    v54 = *(_QWORD *)v15;
    if (*(_QWORD *)v15)
    {
      *(_BYTE *)(v15 + 173) = 1;
      v55 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
      if (v55)
        v55(v54);
    }
  }
  if ((v53 & 1) == 0)
  {
    v56 = *(_QWORD *)v15;
    if (*(_QWORD *)v15)
    {
      *(_BYTE *)(v15 + 174) = 1;
      v57 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v57)
        v57(v56);
    }
  }
  if (v44)
    FigImageQueueFrameRateIncrementCounter(v15 + 1128);
  return 0;
}

uint64_t piqGetEarliestSequentialImageTimeAfterTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  _OWORD *v16;
  CMTime v18;
  CMTime time1;
  __int128 v20;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = *MEMORY[0x1E0CA2E18];
  v21 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v12 = DerivedStorage + 16;
  v11 = *(uint64_t **)(DerivedStorage + 16);
  if ((*(_BYTE *)(a3 + 12) & 1) != 0)
  {
    while (v11 != (uint64_t *)v12)
    {
      v16 = v11 + 2;
      if (*(int *)(DerivedStorage + 156) < 1)
      {
        *(_OWORD *)&time1.value = *v16;
        time1.epoch = v11[4];
        v18 = *(CMTime *)a3;
        if (CMTimeCompare(&time1, &v18) < 0)
          goto LABEL_2;
      }
      else
      {
        *(_OWORD *)&time1.value = *v16;
        time1.epoch = v11[4];
        v18 = *(CMTime *)a3;
        if (CMTimeCompare(&time1, &v18) > 0)
          goto LABEL_2;
      }
      v11 = (uint64_t *)*v11;
    }
    goto LABEL_11;
  }
LABEL_2:
  if (v11 == (uint64_t *)v12)
  {
LABEL_11:
    v15 = *(_DWORD *)(DerivedStorage + 88) == 3;
    goto LABEL_13;
  }
  v13 = *((_DWORD *)v11 + 16);
  time1 = *(CMTime *)(v11 + 2);
  if (piqIsImageTimeSequentialSafe(a6, v13, &time1))
  {
    v14 = 0;
    v15 = 0;
    v20 = *((_OWORD *)v11 + 1);
    v21 = v11[4];
    goto LABEL_14;
  }
  v15 = 0;
LABEL_13:
  v14 = 4294954483;
LABEL_14:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  if (a4)
  {
    *(_OWORD *)a4 = v20;
    *(_QWORD *)(a4 + 16) = v21;
  }
  if (a5)
    *a5 = v15;
  return v14;
}

uint64_t piqcv_postOccupancyChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, uint64_t);
  uint64_t (*v6)(uint64_t, __int128 *);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  result = CMNotificationCenterPostNotification();
  v4 = *(_QWORD *)(DerivedStorage + 1184);
  if (v4)
  {
    v5 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v5)
    {
      v5(&v7, a1);
    }
    else
    {
      v7 = *MEMORY[0x1E0CA2E18];
      v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    }
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(result + 16) + 8);
    if (v6)
    {
      v9 = v7;
      v10 = v8;
      return v6(v4, &v9);
    }
  }
  return result;
}

uint64_t piqIsImageTimeSequentialSafe(uint64_t a1, char a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  int v6;
  CMTime v8;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a2 & 2) == 0)
  {
    v6 = *(_DWORD *)(DerivedStorage + 88);
    if (!v6)
      return 0;
    if (v6 == 2)
    {
      if (*(int *)(DerivedStorage + 156) < 1)
      {
        time1 = *a3;
        v8 = *(CMTime *)(DerivedStorage + 116);
        if (CMTimeCompare(&time1, &v8) <= 0)
          return 0;
      }
      else
      {
        time1 = *a3;
        v8 = *(CMTime *)(DerivedStorage + 92);
        if ((CMTimeCompare(&time1, &v8) & 0x80000000) == 0)
          return 0;
      }
    }
  }
  return 1;
}

uint64_t piqReportImageAvailableSequential(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CMTime *, uint64_t);
  CMTime v11;
  CMTime time1;

  result = CMBaseObjectGetDerivedStorage();
  v6 = (uint64_t *)result;
  v7 = result + 200;
  if ((*(_BYTE *)(result + 212) & 1) != 0)
  {
    *(_OWORD *)&time1.value = *(_OWORD *)v7;
    time1.epoch = *(_QWORD *)(result + 216);
    v11 = *a2;
    result = CMTimeCompare(&time1, &v11);
  }
  v8 = *(_OWORD *)&a2->value;
  *(_QWORD *)(v7 + 16) = a2->epoch;
  *(_OWORD *)v7 = v8;
  v9 = *v6;
  if (v9)
  {
    v11 = *a2;
    result = CMBaseObjectGetVTable();
    v10 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)(result + 16) + 88);
    if (v10)
    {
      time1 = v11;
      return v10(v9, &time1, a3);
    }
  }
  return result;
}

__CFString *getFigFileTypeForFormatWriterFileFormatBits(char a1)
{
  __CFString **v1;
  __CFString **v2;
  __CFString **v3;

  v1 = kFigFileType_AppleM4A;
  v2 = kFigFileType_3GPP;
  v3 = kFigFileType_MPEG4;
  if ((a1 & 0x20) == 0)
    v3 = kFigFileType_QuickTimeMovie;
  if ((a1 & 2) == 0)
    v2 = v3;
  if ((a1 & 0xC) != 0)
    v2 = kFigFileType_AppleM4V;
  if ((a1 & 0x10) == 0)
    v1 = v2;
  return *v1;
}

BOOL FigMovieFormatWriterCanFileTypeSupportMediaType(const void *a1, int a2, int a3)
{
  _BOOL8 result;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  if (CFEqual(a1, CFSTR("QuickTimeMovie")))
    return 1;
  if (CFEqual(a1, CFSTR("MP4Family")))
  {
    result = 1;
    if (a2 <= 1936684397)
    {
      if (a2 == 1668047728)
        return result;
      v7 = 1835365473;
      goto LABEL_8;
    }
    if (a2 == 1936684398 || a2 == 1986618469)
      return result;
    v9 = 1952807028;
    goto LABEL_19;
  }
  if (CFEqual(a1, CFSTR("3GPFamily")))
  {
    if (a2 == 1936684398)
      return 1;
    if (a2 == 1952807028)
      return a3 == 0;
    v9 = 1986618469;
LABEL_19:
    if (a2 != v9)
      return 0;
    return a3 == 0;
  }
  if (!CFEqual(a1, CFSTR("iTunesVideoFamily")))
  {
    if (CFEqual(a1, CFSTR("iTunesAudioFamily")))
    {
      if (a2 <= 1952807027)
      {
        result = 1;
        if (a2 == 1751216244)
          return result;
        v8 = 1936684398;
        goto LABEL_10;
      }
      if (a2 != 1952807028 && a2 != 1986618469)
        return 0;
      v10 = a3 == 0;
    }
    else
    {
      v10 = CFEqual(a1, CFSTR("AppleImmersiveVideo")) == 0;
    }
    return !v10;
  }
  result = 1;
  if (a2 > 1936684397)
  {
    if (a2 == 1936684398 || a2 == 1952807028)
      return result;
    v8 = 1986618469;
    goto LABEL_10;
  }
  v7 = 1668047728;
LABEL_8:
  if (a2 == v7)
    return result;
  v8 = 1935832172;
LABEL_10:
  if (a2 != v8)
    return 0;
  return result;
}

BOOL FigMovieFormatWriterCanFileTypeSupportFormatDescription(const void *a1, CMFormatDescriptionRef desc, int a3)
{
  CMMediaType MediaType;
  _BOOL8 result;
  FourCharCode MediaSubType;
  signed int v9;
  int v10;
  signed int v11;
  FourCharCode v12;
  char v13;
  const __CFString *v14;
  const __CFString *v15;
  int v16;
  const __CFString **v17;
  CFStringEncoding SystemEncoding;
  int v19;
  CMBlockBufferRef blockBufferOut;

  MediaType = CMFormatDescriptionGetMediaType(desc);
  result = FigMovieFormatWriterCanFileTypeSupportMediaType(a1, MediaType, a3);
  if (!(_DWORD)result)
    return result;
  if (!a3 && MediaType == 1952807028)
  {
    if (CFEqual(a1, CFSTR("iTunesVideoFamily")))
    {
      MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
      if (MediaSubType != 2021028980 && MediaSubType != 2004251764)
        return 0;
    }
  }
  v9 = CMFormatDescriptionGetMediaSubType(desc);
  if (v9 <= 1903522656)
  {
    if (v9 != 1668641633)
    {
      v10 = 1886745441;
LABEL_13:
      if (v9 != v10)
        goto LABEL_16;
    }
  }
  else if (v9 != 1903522657 && v9 != 2054517601)
  {
    v10 = 1970495843;
    goto LABEL_13;
  }
  if (CFEqual(a1, CFSTR("iTunesAudioFamily")))
    return 0;
LABEL_16:
  blockBufferOut = 0;
  v11 = CMFormatDescriptionGetMediaType(desc);
  v12 = CMFormatDescriptionGetMediaSubType(desc);
  v13 = figMovieWriter_fileFormatBitsForFileType((uint64_t)a1);
  if (v11 <= 1935832171)
  {
    if (v11 <= 1751216243)
    {
      v15 = 0;
      if (v11 == 1635088502)
        goto LABEL_56;
      if (v11 == 1668047728)
      {
        v16 = CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
        goto LABEL_57;
      }
    }
    else
    {
      if (v11 == 1751216244)
      {
        v16 = CMHapticFormatDescriptionCopyAsBigEndianHapticDescriptionBlockBuffer();
        goto LABEL_57;
      }
      if (v11 == 1835365473)
      {
        v16 = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
        goto LABEL_57;
      }
      v15 = 0;
      if (v11 == 1885954932)
      {
LABEL_56:
        SystemEncoding = CFStringGetSystemEncoding();
        v16 = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(0, desc, SystemEncoding, v15, &blockBufferOut);
        goto LABEL_57;
      }
    }
LABEL_45:
    v16 = FigSignalErrorAt();
    goto LABEL_57;
  }
  if (v11 > 1952807027)
  {
    switch(v11)
    {
      case 1952807028:
        goto LABEL_40;
      case 1953325924:
        v16 = CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
        goto LABEL_57;
      case 1986618469:
        if ((v13 & 2) != 0)
        {
          v17 = (const __CFString **)MEMORY[0x1E0CA23B8];
        }
        else if ((v13 & 4) != 0)
        {
          v17 = (const __CFString **)MEMORY[0x1E0CA23C8];
        }
        else
        {
          if ((v13 & 1) == 0)
          {
            v15 = 0;
            goto LABEL_56;
          }
          if (v12 == 1635148595 || v12 == 1751479857 || v12 == 1685481573)
            v17 = (const __CFString **)MEMORY[0x1E0CA4B38];
          else
            v17 = (const __CFString **)MEMORY[0x1E0CA23C0];
        }
        v15 = *v17;
        goto LABEL_56;
    }
    goto LABEL_45;
  }
  if (v11 == 1935832172)
  {
LABEL_40:
    v16 = CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
    goto LABEL_57;
  }
  if (v11 != 1935893870)
  {
    if (v11 == 1936684398)
    {
      if ((v13 & 2) != 0)
      {
        v14 = (const __CFString *)*MEMORY[0x1E0CA27D8];
      }
      else if ((v13 & 1) != 0)
      {
        v14 = (const __CFString *)*MEMORY[0x1E0CA27E0];
      }
      else
      {
        v14 = 0;
      }
      v16 = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(0, desc, v14, &blockBufferOut);
      goto LABEL_57;
    }
    goto LABEL_45;
  }
  v16 = CMSceneFormatDescriptionCopyAsBigEndianSceneDescriptionBlockBuffer();
LABEL_57:
  v19 = v16;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v19 == 0;
}

uint64_t createFigMovieFormatWriterObject(const __CFAllocator *a1, int a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  const __CFString *v7;
  const void *Value;
  __CFString **v10;
  const void *v11;
  int v12;
  int v13;
  const void *v14;
  const void *v15;
  CFTypeID TypeID;
  CFTypeID v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t DerivedStorage;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef v24;
  CFTypeRef v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  CFMutableArrayRef Mutable;
  CMTime v31;
  unsigned __int8 v32;
  CFTypeRef cf;

  cf = 0;
  v7 = CFSTR("com.apple.quicktime-movie");
  v32 = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("FileFormat"));
    if (Value)
    {
      if (FigCFEqual())
      {
        v10 = kFigFileType_QuickTimeMovie;
      }
      else if (FigCFEqual())
      {
        v10 = kFigFileType_AppleM4A;
      }
      else if (FigCFEqual() || FigCFEqual())
      {
        v10 = kFigFileType_AppleM4V;
      }
      else if (FigCFEqual())
      {
        v10 = kFigFileType_3GPP;
      }
      else if (FigCFEqual() || FigCFEqual())
      {
        v10 = kFigFileType_MPEG4;
      }
      else
      {
        if (!FigCFEqual())
        {
          v20 = 4294954662;
          goto LABEL_30;
        }
        v10 = kFigFileType_AppleImmersiveVideo;
      }
      v7 = *v10;
      LODWORD(Value) = figMovieWriter_fileFormatBitsForFileType((uint64_t)Value);
    }
    v14 = CFDictionaryGetValue(theDict, CFSTR("WriteFileType"));
    if (v14)
    {
      v15 = v14;
      TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(v15))
      {
        if (CFEqual(CFSTR("WriteFileType_Never"), v15))
        {
          v13 = 1;
        }
        else
        {
          v13 = 2;
          if (!CFEqual(CFSTR("WriteFileType_BeforeMediaData"), v15))
          {
            if (CFEqual(CFSTR("WriteFileType_OnlyInWriteHeaderToByteStream"), v15))
              v13 = 3;
            else
              v13 = 2;
          }
        }
      }
      else
      {
        v17 = CFBooleanGetTypeID();
        v13 = 2;
        if (v17 == CFGetTypeID(v15))
        {
          if (CFEqual(v15, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
            v13 = 2;
          else
            v13 = 3;
        }
      }
    }
    else
    {
      v13 = 2;
    }
    v18 = CFDictionaryGetValue(theDict, CFSTR("AudioPrimingFormat"));
    if (v18 && (v19 = v18, !CFEqual(v18, CFSTR("AudioPrimingFormat_Manual"))))
    {
      if (CFEqual(v19, CFSTR("AudioPrimingFormat_NoPrimingInfo")))
      {
        v12 = 1;
      }
      else if (CFEqual(v19, CFSTR("AudioPrimingFormat_iTunesGaplessInfo")))
      {
        v12 = 2;
      }
      else if (CFEqual(v19, CFSTR("AudioPrimingFormat_RollSampleGroup")))
      {
        v12 = 3;
      }
      else if (CFEqual(v19, CFSTR("AudioPrimingFormat_DetermineFromSampleOrFileFormat")))
      {
        v12 = 5;
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = 0;
    }
    v11 = CFDictionaryGetValue(theDict, CFSTR("FileTypeProfile"));
    FigCFDictionaryGetBooleanIfPresent();
  }
  else
  {
    LODWORD(Value) = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
  }
  FigFormatWriterGetClassID();
  v20 = CMDerivedObjectCreate();
  if (!(_DWORD)v20)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = cf;
    *(_DWORD *)(DerivedStorage + 20) = 600;
    v22 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 40) = *(_QWORD *)(v22 + 16);
    CMTimeMake(&v31, 1, 2);
    *(CMTime *)(DerivedStorage + 48) = v31;
    CMTimeMake(&v31, 5, 1);
    *(CMTime *)(DerivedStorage + 72) = v31;
    v23 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(DerivedStorage + 96) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(DerivedStorage + 112) = *(_QWORD *)(v23 + 16);
    *(_DWORD *)(DerivedStorage + 268) = 0;
    *(_DWORD *)(DerivedStorage + 320) = v13;
    *(_DWORD *)(DerivedStorage + 324) = v12;
    *(_BYTE *)(DerivedStorage + 16) = v32;
    *(_BYTE *)(DerivedStorage + 334) = 1;
    if (v7)
      v24 = CFRetain(v7);
    else
      v24 = 0;
    *(_QWORD *)(DerivedStorage + 712) = v24;
    if (v11)
      v25 = CFRetain(v11);
    else
      v25 = 0;
    *(_QWORD *)(DerivedStorage + 720) = v25;
    *(_DWORD *)(DerivedStorage + 684) = (_DWORD)Value;
    *(_DWORD *)(DerivedStorage + 376) = 1;
    *(_QWORD *)(DerivedStorage + 360) = -1;
    *(_QWORD *)(DerivedStorage + 520) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 336) = FigSimpleMutexCreate();
    if (a2 | v32)
      *(_BYTE *)(DerivedStorage + 18) = 1;
    *(_QWORD *)(DerivedStorage + 568) = FigSemaphoreCreate();
    *(_QWORD *)(DerivedStorage + 576) = FigSemaphoreCreate();
    *(_QWORD *)(DerivedStorage + 584) = FigSemaphoreCreate();
    *(_QWORD *)(DerivedStorage + 592) = FigSemaphoreCreate();
    *(_DWORD *)(DerivedStorage + 544) = 0;
    v26 = MovieInformationCreate((uint64_t)a1, 0, (uint64_t *)(DerivedStorage + 728));
    if (!(_DWORD)v26)
    {
      v26 = MovieHeaderMakerCreateWithMovieInformation(a1, *(const void **)(DerivedStorage + 728), 0, (_QWORD *)(DerivedStorage + 736));
      if (!(_DWORD)v26)
      {
        v27 = v13 == 2 && a2 == 0;
        if (a2)
          v28 = 2;
        else
          v28 = (*(_BYTE *)(DerivedStorage + 684) & 1) != 0 ? 3 : 1;
        v26 = MovieSampleDataWriterCreate(a1, v7, (uint64_t)v11, a2 != 0, v27, v28, (uint64_t *)(DerivedStorage + 744));
        if (!(_DWORD)v26)
        {
          v26 = MovieInformationSetMovieTimeScale(*(_QWORD *)(DerivedStorage + 728), *(_DWORD *)(DerivedStorage + 20));
          if (!(_DWORD)v26)
          {
            Mutable = CFArrayCreateMutable(a1, 0, 0);
            if (Mutable)
            {
              v20 = 0;
              *(_QWORD *)(DerivedStorage + 488) = Mutable;
              *a4 = cf;
              return v20;
            }
            v26 = FigSignalErrorAt();
          }
        }
      }
    }
    v20 = v26;
  }
LABEL_30:
  if (cf)
    CFRelease(cf);
  return v20;
}

uint64_t FigMovieFormatWriterCreateForWritingMovieFragments(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, _QWORD *a5)
{
  uint64_t v8;
  CFTypeRef v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (!a2 || !a5)
    return FigSignalErrorAt();
  v8 = createFigMovieFormatWriterObject(a1, 1, theDict, &cf);
  v9 = cf;
  if ((_DWORD)v8)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 384) = 1;
    *(_QWORD *)(DerivedStorage + 392) = a2;
    *(_QWORD *)(DerivedStorage + 400) = a3;
    v11 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 408) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 424) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(DerivedStorage + 432) = 0;
    *(_BYTE *)(DerivedStorage + 529) = 1;
    *(_WORD *)(DerivedStorage + 332) = 257;
    *(_BYTE *)(DerivedStorage + 352) = 1;
    *a5 = v9;
  }
  return v8;
}

BOOL validateFigTrackID(uint64_t a1, int a2)
{
  const __CFArray *Count;

  Count = *(const __CFArray **)(a1 + 488);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  return a2 > 0 && Count != 0 && (uint64_t)Count >= a2;
}

uint64_t figMovieWriter_fileFormatBitsForFileType(uint64_t result)
{
  const void *v1;
  CFTypeID TypeID;

  if (result)
  {
    v1 = (const void *)result;
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      if (CFEqual(v1, CFSTR("3GPFamily")))
      {
        return 3;
      }
      else if (CFEqual(v1, CFSTR("iTunesVideoFamily")))
      {
        return 13;
      }
      else if (CFEqual(v1, CFSTR("iTunesAudioFamily")))
      {
        return 21;
      }
      else if (CFEqual(v1, CFSTR("iTunesFamily")))
      {
        return 5;
      }
      else
      {
        if (CFEqual(v1, CFSTR("ISOFamily")))
          return 33;
        result = CFEqual(v1, CFSTR("MP4Family"));
        if ((_DWORD)result)
          return 33;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFString *figMovieWriter_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigMovieWriter %p>"), a1);
  return Mutable;
}

void editBuilderRelease(void *a1)
{
  const __CFAllocator *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  CFAllocatorRef *ValueAtIndex;
  const void *v8;

  if (a1)
  {
    v2 = *(const __CFAllocator **)a1;
    FigCEA608DataInspectorRelease(*((CFAllocatorRef **)a1 + 2));
    *((_QWORD *)a1 + 2) = 0;
    v3 = (const __CFArray *)*((_QWORD *)a1 + 3);
    if (v3)
    {
      Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        v5 = Count;
        for (i = 0; i != v5; ++i)
        {
          ValueAtIndex = (CFAllocatorRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)a1 + 3), i);
          FigCEA608DataInspectorRelease(ValueAtIndex);
        }
      }
      v8 = (const void *)*((_QWORD *)a1 + 3);
      if (v8)
        CFRelease(v8);
      *((_QWORD *)a1 + 3) = 0;
    }
    FigCEA608DataInspectorRelease(*((CFAllocatorRef **)a1 + 1));
    *((_QWORD *)a1 + 1) = 0;
    CFAllocatorDeallocate(v2, a1);
    if (v2)
      CFRelease(v2);
  }
}

uint64_t calculateHeaderByteCount(uint64_t a1, unint64_t *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  unint64_t v8;
  _QWORD *ValueAtIndex;
  int PreferredChunkAlignment;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  const __CFAllocator *v18;
  uint64_t v19;
  size_t DataLength;
  uint64_t v21;
  uint64_t MovieAtomBBuf;
  CMBlockBufferRef v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  CMBlockBufferRef v29;
  CMBlockBufferRef theBuffer;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  if (v5 < 1)
  {
    v8 = 1;
  }
  else
  {
    v6 = v5;
    v7 = 0;
    LODWORD(v8) = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v7);
      LODWORD(theBuffer) = 0;
      PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkAlignment(*(_QWORD *)(a1 + 744), ValueAtIndex[95], &theBuffer);
      if ((_DWORD)theBuffer)
        v11 = PreferredChunkAlignment == 0;
      else
        v11 = 0;
      if (v11)
        v12 = (int)theBuffer;
      else
        v12 = 1;
      v13 = v12;
      if (v12 != (_DWORD)v8)
      {
        v14 = v12;
        if ((_DWORD)v8)
        {
          v15 = v8;
          do
          {
            v16 = v12;
            v12 = v15;
            v15 = v16 % v15;
          }
          while (v15);
          v14 = v12;
        }
        v13 *= (int)v8 / v14;
      }
      if (v13 > 0x7FFFFFFF)
        LODWORD(v8) = 1;
      else
        LODWORD(v8) = v13;
      ++v7;
    }
    while (v7 != v6);
    v8 = (int)v8;
  }
  v17 = 0;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (Count + 2 <= 1)
    v19 = 1;
  else
    v19 = Count + 2;
  do
  {
    DataLength = 0;
    v29 = 0;
    theBuffer = 0;
    if (*(_DWORD *)(a1 + 320) == 3)
    {
      v21 = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*(const __CFNumber ***)(a1 + 744), v18, &theBuffer);
      if ((_DWORD)v21)
      {
        MovieAtomBBuf = v21;
        v24 = 0;
        goto LABEL_30;
      }
      DataLength = CMBlockBufferGetDataLength(theBuffer);
    }
    MovieAtomBBuf = createMovieAtomBBuf(a1, 0, 0, (CFTypeRef *)&v29);
    v23 = v29;
    if (!(_DWORD)MovieAtomBBuf)
    {
      v24 = CMBlockBufferGetDataLength(v29) + DataLength;
      if (!v23)
        goto LABEL_30;
LABEL_29:
      CFRelease(v23);
      goto LABEL_30;
    }
    v24 = 0;
    if (v29)
      goto LABEL_29;
LABEL_30:
    if (theBuffer)
      CFRelease(theBuffer);
    if ((_DWORD)MovieAtomBBuf)
      return MovieAtomBBuf;
    if (v24 % v8)
      v25 = v8 - v24 % v8;
    else
      v25 = 0;
    if (v25 - 1 <= 6)
      v25 += (v8 - v25 + 7) / v8 * v8;
    v26 = v25 + v24;
    if (v26 == v17)
    {
      MovieAtomBBuf = 0;
      *a2 = v26;
      return MovieAtomBBuf;
    }
    v27 = MovieHeaderMakerAddByteCountToChunkOffsets(*(_QWORD *)(a1 + 736), (int)v26);
    if ((_DWORD)v27)
      return v27;
    v17 = v26;
    --v19;
  }
  while (v19);
  return FigSignalErrorAt();
}

uint64_t createMediaDataLocation(const __CFAllocator *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  uint64_t FirstMediaDataAtomOffset;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  uint64_t appended;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  FirstMediaDataAtomOffset = MovieSampleDataWriterGetFirstMediaDataAtomOffset(*(_QWORD *)(a2 + 744), 1, &v13);
  if ((_DWORD)FirstMediaDataAtomOffset)
    return FirstMediaDataAtomOffset;
  FirstMediaDataAtomOffset = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(a2 + 744), &v12);
  if ((_DWORD)FirstMediaDataAtomOffset)
    return FirstMediaDataAtomOffset;
  Mutable = CFArrayCreateMutable(a1, 2, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  appended = FigCFArrayAppendInt64();
  if ((_DWORD)appended)
  {
    v10 = appended;
    goto LABEL_11;
  }
  v10 = FigCFArrayAppendInt64();
  if ((_DWORD)v10)
  {
LABEL_11:
    CFRelease(v8);
    return v10;
  }
  *a3 = v8;
  return v10;
}

uint64_t estimateResultFileSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  CFIndex Count;
  _DWORD *v4;
  uint64_t v5;
  CFIndex i;
  CMBufferQueueRef *ValueAtIndex;
  size_t TotalSize;
  size_t v9;
  CMBufferQueueRef v10;
  size_t v11;
  size_t v12;
  CFIndex v13;
  CFIndex v14;
  _QWORD *v15;
  uint64_t v16;
  OpaqueCMBlockBuffer *TimeToSampleTable;
  size_t DataLength;
  OpaqueCMBlockBuffer *CompositionOffsetTable;
  size_t v20;
  OpaqueCMBlockBuffer *SyncSampleTable;
  size_t v22;
  OpaqueCMBlockBuffer *SampleDependencyTable;
  size_t v24;
  OpaqueCMBlockBuffer *PartialSyncSampleTable;
  size_t v26;
  OpaqueCMBlockBuffer *SampleToChunkTable;
  size_t v28;
  OpaqueCMBlockBuffer *SampleSizeTable;
  size_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  CFIndex v38;
  uint64_t v39;
  uint64_t v40;

  v2 = a1;
  v40 = 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  v4 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (Count < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (CMBufferQueueRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 488), i);
      TotalSize = CMBufferQueueGetTotalSize(ValueAtIndex[77]);
      v9 = CMBufferQueueGetTotalSize(ValueAtIndex[76]);
      if (ValueAtIndex[41])
        v10 = ValueAtIndex[87];
      else
        v10 = 0;
      v11 = v9 + TotalSize;
      if (*v4 == 1)
        kdebug_trace();
      v5 += (uint64_t)v10 + v11;
    }
  }
  if (*v4 == 1)
    kdebug_trace();
  v35 = *(_QWORD *)(v2 + 696);
  v36 = v5;
  if (*(_BYTE *)(v2 + 329))
  {
    v12 = *(_QWORD *)(v2 + 704);
    if (!*(_BYTE *)(v2 + 531))
      goto LABEL_20;
  }
  else
  {
    v12 = 0;
  }
  v13 = CFArrayGetCount(*(CFArrayRef *)(v2 + 488));
  if (v13 >= 1)
  {
    v14 = 0;
    v38 = v13;
    v39 = v2;
    do
    {
      v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 488), v14);
      v16 = v15[92];
      TimeToSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetTimeToSampleTable(v16);
      DataLength = CMBlockBufferGetDataLength(TimeToSampleTable);
      CompositionOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetCompositionOffsetTable(v16);
      v20 = CMBlockBufferGetDataLength(CompositionOffsetTable);
      SyncSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSyncSampleTable(v16);
      v22 = CMBlockBufferGetDataLength(SyncSampleTable);
      SampleDependencyTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleDependencyTable(v16);
      v24 = CMBlockBufferGetDataLength(SampleDependencyTable);
      PartialSyncSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetPartialSyncSampleTable(v16);
      v26 = CMBlockBufferGetDataLength(PartialSyncSampleTable);
      SampleToChunkTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleToChunkTable(v16);
      v28 = CMBlockBufferGetDataLength(SampleToChunkTable);
      SampleSizeTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleSizeTable(v16);
      v30 = CMBlockBufferGetDataLength(SampleSizeTable);
      v31 = DataLength + v12 + v20 + v22 + v24 + v26 + v28;
      v2 = v39;
      v12 = v31 + v30 + v15[74];
      ++v14;
    }
    while (v38 != v14);
  }
LABEL_20:
  v32 = *(_QWORD *)(v2 + 8);
  v33 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v33)
    return 4294954514;
  result = v33(v32, 0, &v40);
  if (!(_DWORD)result)
    *a2 = v35 + v36 + v12 + v40;
  return result;
}

__n128 getLongestMediaDecodeDuration@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  CFIndex v5;
  uint64_t v6;
  CFIndex i;
  _DWORD *ValueAtIndex;
  _DWORD *v9;
  CMTime *v11;
  CMTime *v12;
  __n128 result;
  CMTime v14;
  CMTime time1;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v17 = v18;
  if (Count < 1)
    goto LABEL_14;
  v5 = Count;
  v6 = 0;
  for (i = 0; i != v5; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), i);
    if (!ValueAtIndex[25])
    {
      v9 = ValueAtIndex;
      memset(&v16, 0, sizeof(v16));
      getMediaDecodeDuration((uint64_t)ValueAtIndex, &v16);
      if (*v9 == 1986618469 || *v9 == 1936684398)
      {
        ++v6;
        time1 = v16;
        v14 = v18;
        v11 = &v18;
      }
      else
      {
        time1 = v16;
        v14 = v17;
        v11 = &v17;
      }
      CMTimeMaximum(v11, &time1, &v14);
    }
  }
  if (v6 <= 0)
LABEL_14:
    v12 = &v17;
  else
    v12 = &v18;
  result = *(__n128 *)&v12->value;
  *(_OWORD *)a2 = *(_OWORD *)&v12->value;
  *(_QWORD *)(a2 + 16) = v12->epoch;
  return result;
}

uint64_t copyFigMatrixAsArray(const __CFAllocator *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  CFNumberRef v11;
  CFArrayRef v12;
  uint64_t v13;
  uint64_t i;
  const void *v15;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v6 = 0;
  v7 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_2:
  v9 = 0;
  v10 = v6;
  while (1)
  {
    v11 = CFNumberCreate(v8, kCFNumberFloat32Type, (const void *)(a2 + v9));
    if (!v11)
      break;
    v6 = v10 + 1;
    *((_QWORD *)v17 + v10) = v11;
    v9 += 4;
    ++v10;
    if (v9 == 12)
    {
      ++v7;
      a2 += 12;
      if (v7 != 3)
        goto LABEL_2;
      v12 = CFArrayCreate(a1, (const void **)v17, 9, MEMORY[0x1E0C9B378]);
      if (v12)
      {
        v13 = 0;
        *a3 = v12;
        goto LABEL_9;
      }
      break;
    }
  }
  v13 = FigSignalErrorAt();
LABEL_9:
  for (i = 0; i != 72; i += 8)
  {
    v15 = *(const void **)((char *)v17 + i);
    if (v15)
      CFRelease(v15);
  }
  return v13;
}

uint64_t createMetadataWritersDictionary(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef *a3)
{
  int v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t result;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  void *values[3];
  void *keys;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  keys = 0;
  v15 = 0;
  v16 = 0;
  v6 = *(_DWORD *)(a2 + 684);
  if ((v6 & 4) != 0)
  {
    keys = CFSTR("com.apple.itunes");
    v15 = CFSTR("org.mp4ra");
    v7 = 2;
  }
  else if ((v6 & 1) != 0)
  {
    keys = CFSTR("org.mp4ra");
    v7 = 1;
  }
  else
  {
    keys = CFSTR("com.apple.quicktime.udta");
    v15 = CFSTR("com.apple.quicktime.mdta");
    v16 = CFSTR("com.apple.itunes");
    v7 = 3;
  }
  v8 = 0;
  memset(values, 0, sizeof(values));
  while (1)
  {
    v12 = 0;
    result = getMetadataSerializer((uint64_t)a1, a2, *(&keys + v8), &v12);
    if ((_DWORD)result)
      break;
    values[v8++] = (void *)FigMetadataSerializerGetFigMetadataWriter(v12);
    if (v7 == v8)
    {
      v10 = CFDictionaryCreate(a1, (const void **)&keys, (const void **)values, v7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v10)
        return FigSignalErrorAt();
      v11 = v10;
      result = 0;
      *a3 = v11;
      return result;
    }
  }
  return result;
}

uint64_t copyPredeterminedSizesAsDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 448))
  {
    v5 = 0;
    goto LABEL_7;
  }
  Mutable = CFDictionaryCreateMutable(allocator, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    v6 = FigCFDictionarySetInt64();
    if ((_DWORD)v6 || (v6 = FigCFDictionarySetInt64(), (_DWORD)v6))
    {
      v7 = v6;
      CFRelease(v5);
      return v7;
    }
LABEL_7:
    v7 = 0;
    *a3 = v5;
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t copyMediaDataCheckpointIntervalAsDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 330))
  {
    v5 = 0;
    goto LABEL_6;
  }
  Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    v6 = FigCFDictionarySetCMTime();
    if ((_DWORD)v6)
    {
      v7 = v6;
      CFRelease(v5);
      return v7;
    }
LABEL_6:
    v7 = 0;
    *a3 = v5;
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t createMovieAtomBBuf(uint64_t a1, int a2, const __CFURL *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t inserted;
  uint64_t v9;
  int v10;
  BOOL v11;
  char v12;
  const __CFArray *v13;
  uint64_t Settings;
  int v15;
  const void **v16;
  __CFString **v17;
  uint64_t v18;
  CFStringRef v19;
  const __CFDictionary *v20;
  uint64_t v21;
  const void *v22;
  CFTypeID v23;
  const __CFDictionary *v24;
  CFNumberRef v25;
  uint64_t FigMetadataWriter;
  uint64_t (*v27)(uint64_t, const __CFString *, const __CFString *, CFStringRef, const __CFDictionary *);
  uint64_t Contiguous;
  CFTypeID v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex j;
  const __CFDictionary *v33;
  CFTypeRef v34;
  const void *v35;
  uint64_t (*v36)(CFTypeRef, CMBlockBufferRef *);
  uint64_t v37;
  CFDataRef v38;
  int IsRangeContiguous;
  OpaqueCMBlockBuffer *value;
  CFTypeRef v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, __CFString *, const __CFString *, CFDataRef, _QWORD);
  uint64_t appended;
  CFTypeRef v45;
  const void *v46;
  uint64_t (*v47)(CFTypeRef, CMBlockBufferRef *);
  CFTypeRef v48;
  const void *v49;
  uint64_t (*v50)(CFTypeRef, CMBlockBufferRef *);
  const __CFAllocator *v51;
  uint64_t v52;
  CFIndex k;
  char *v54;
  uint64_t v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t Empty;
  CFMutableSetRef Mutable;
  CFTypeID v61;
  CFTypeID v62;
  CFIndex v63;
  CFIndex v64;
  CFIndex m;
  const __CFDictionary *v66;
  CMTimeValue v67;
  const void *v68;
  CMTimeValue v69;
  const void *v70;
  uint64_t v71;
  const __CFString *v72;
  unsigned int PackedISO639_2TFromLocaleIdentifier;
  const __CFString *StringForLanguageCode;
  uint64_t v75;
  const void *v76;
  uint64_t value_low;
  int32_t v78;
  CMTimeValue v79;
  int32_t v80;
  const __CFArray *v81;
  uint64_t v82;
  CFIndex v83;
  CFIndex v84;
  CFIndex v85;
  _QWORD *v86;
  uint64_t v87;
  const __CFArray *v89;
  CFIndex v90;
  CFIndex v91;
  CFIndex v92;
  double *ValueAtIndex;
  double *v94;
  uint64_t FirstEditBuilder;
  double v96;
  CFIndex v97;
  char *EditMediaTimeAtIndex;
  __int128 v99;
  CFDictionaryRef v100;
  uint64_t i;
  const void *v102;
  CFTypeRef *v103;
  const __CFURL *v104;
  uint64_t v105;
  CFIndex Count;
  char v107;
  char v108;
  const __CFAllocator *allocator;
  CFTypeRef v110;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v112;
  CFTypeRef v113;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef targetBBuf;
  CMBlockBufferRef v117;
  CMTime v118;
  CMTime rhs;
  CMTime lhs;
  CMTime v121;
  CMTime valuePtr;
  void *v123[3];
  void *v124;
  CFNumberRef v125;
  CFNumberRef v126;
  CMTime values;
  CMTime keys;
  uint64_t v129;

  v7 = a1;
  v129 = *MEMORY[0x1E0C80C00];
  v110 = 0;
  inserted = InsertMediaSegments(a1, 1);
  if ((_DWORD)inserted)
    return inserted;
  v103 = a4;
  v9 = *(_QWORD *)(v7 + 736);
  v10 = FigCFEqual();
  if (a2)
    v11 = 1;
  else
    v11 = v10 == 0;
  v12 = v11;
  v13 = *(const __CFArray **)(v7 + 488);
  if (v13)
    Count = CFArrayGetCount(v13);
  else
    Count = 0;
  Settings = MovieHeaderMakerSetShouldWriteMovieExtendsAtom(v9, a2);
  if ((_DWORD)Settings)
    goto LABEL_197;
  keys = *(CMTime *)(v7 + 244);
  Settings = MovieHeaderMakerSetMovieExtendsHeaderFragmentDuration(v9, &keys);
  if ((_DWORD)Settings)
    goto LABEL_197;
  targetBBuf = 0;
  v117 = 0;
  theBuffer = 0;
  v15 = *(_DWORD *)(v7 + 684);
  if ((v15 & 1) != 0)
    v16 = (const void **)&kFigMetadataFormat_ISOUserData;
  else
    v16 = (const void **)&kFigMetadataFormat_QuickTimeUserData;
  if ((v15 & 1) != 0)
    v17 = kFigISOUserDataKeyspace;
  else
    v17 = kFigUserDataKeyspace;
  v113 = 0;
  cf = 0;
  blockBufferOut = 0;
  v112 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2u, 0, &blockBufferOut);
  v105 = v7;
  v104 = a3;
  if ((_DWORD)v18)
  {
    v37 = v18;
    goto LABEL_222;
  }
  if ((v12 & 1) != 0)
  {
LABEL_21:
    v19 = 0;
LABEL_22:
    v20 = 0;
    goto LABEL_23;
  }
  v24 = *(const __CFDictionary **)(v7 + 688);
  if (v24)
  {
    v19 = createiTunesGaplessInfoString(v24);
    if (!v19)
      goto LABEL_22;
LABEL_29:
    keys.value = (CMTimeValue)CFSTR("dataType");
    *(_QWORD *)&keys.timescale = CFSTR("dataTypeNamespace");
    values.value = 0;
    *(_QWORD *)&values.timescale = CFSTR("com.apple.itunes");
    LODWORD(valuePtr.value) = 1;
    v25 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
    values.value = (CMTimeValue)v25;
    v20 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(v25);
    if (!copyMetadataSerializer((uint64_t)allocator, v7, CFSTR("com.apple.itunes"), &v112))
    {
      FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(v112);
      v27 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, CFStringRef, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v27)
      {
        v37 = 4294954514;
        goto LABEL_45;
      }
      Contiguous = v27(FigMetadataWriter, CFSTR("itlk"), CFSTR("com.apple.iTunes.iTunSMPB"), v19, v20);
      if ((_DWORD)Contiguous)
        goto LABEL_44;
    }
    goto LABEL_23;
  }
  v89 = *(const __CFArray **)(v7 + 488);
  if (!v89)
    goto LABEL_21;
  v90 = CFArrayGetCount(v89);
  if (v90 < 1)
    goto LABEL_21;
  v91 = v90;
  v92 = 0;
  while (1)
  {
    ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 488), v92);
    if (*(_DWORD *)ValueAtIndex == 1936684398)
      break;
    ++v92;
    v7 = v105;
    if (v91 == v92)
      goto LABEL_21;
  }
  v94 = ValueAtIndex;
  if (*((_DWORD *)ValueAtIndex + 192) != 2 || !*((_DWORD *)ValueAtIndex + 87))
    goto LABEL_21;
  FirstEditBuilder = getFirstEditBuilder((uint64_t)ValueAtIndex);
  v96 = v94[45];
  v97 = CFArrayGetCount(*(CFArrayRef *)(FirstEditBuilder + 24));
  if (v97 + editMediaTimeIsValid(*(_QWORD *)(FirstEditBuilder + 16)) != 1)
  {
    v37 = FigSignalErrorAt();
    v19 = 0;
    v20 = 0;
    v38 = 0;
    if ((_DWORD)v37)
      goto LABEL_79;
    goto LABEL_23;
  }
  EditMediaTimeAtIndex = (char *)editBuilderGetEditMediaTimeAtIndex(FirstEditBuilder, 0);
  memset(&values, 0, sizeof(values));
  memset(&valuePtr, 0, sizeof(valuePtr));
  memset(&v121, 0, sizeof(v121));
  v125 = 0;
  v126 = 0;
  v123[0] = CFSTR("EncodingDelayInFrame");
  v123[1] = CFSTR("EncodingDrainInFrames");
  v123[2] = CFSTR("DurationInFrames");
  keys = *(CMTime *)(EditMediaTimeAtIndex + 60);
  CMTimeConvertScale(&values, &keys, (int)v96, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  keys = *(CMTime *)(EditMediaTimeAtIndex + 84);
  CMTimeConvertScale(&v121, &keys, (int)v96, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  lhs = *(CMTime *)(EditMediaTimeAtIndex + 36);
  v99 = *(_OWORD *)(EditMediaTimeAtIndex + 12);
  rhs.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 28);
  *(_OWORD *)&rhs.value = v99;
  CMTimeSubtract(&keys, &lhs, &rhs);
  rhs = keys;
  CMTimeConvertScale(&lhs, &rhs, (int)v96, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  keys = lhs;
  rhs = values;
  v118 = v121;
  CMTimeAdd(&lhs, &rhs, &v118);
  rhs = keys;
  CMTimeSubtract(&valuePtr, &rhs, &lhs);
  v124 = CFNumberCreate(allocator, kCFNumberSInt64Type, &values);
  if (v124
    && (v125 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v121)) != 0
    && (v126 = CFNumberCreate(allocator, kCFNumberSInt64Type, &valuePtr)) != 0
    && (v100 = CFDictionaryCreate(allocator, (const void **)v123, (const void **)&v124, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v20 = v100;
    v37 = 0;
  }
  else
  {
    v37 = FigSignalErrorAt();
    v20 = 0;
  }
  for (i = 0; i != 24; i += 8)
  {
    v102 = *(void **)((char *)&v124 + i);
    if (v102)
      CFRelease(v102);
  }
  if ((_DWORD)v37)
  {
LABEL_222:
    v38 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_79;
  }
  v7 = v105;
  if (v20)
  {
    v19 = createiTunesGaplessInfoString(v20);
    CFRelease(v20);
    if (!v19)
      goto LABEL_22;
    goto LABEL_29;
  }
  v19 = 0;
LABEL_23:
  v21 = v105;
  v22 = *(const void **)(v105 + 296);
  if (!v22)
  {
    v22 = *(const void **)(v105 + 304);
    if (!v22)
      goto LABEL_39;
  }
  v23 = CFGetTypeID(v22);
  if (v23 == CFDictionaryGetTypeID())
  {
    v21 = v105;
    transferMovieMetadata(v105, (CFDictionaryRef)v22, &cf, &v113, &v112);
    goto LABEL_39;
  }
  v29 = CFGetTypeID(v22);
  if (v29 == CFArrayGetTypeID())
  {
    v30 = CFArrayGetCount((CFArrayRef)v22);
    v21 = v105;
    if (v30 >= 1)
    {
      v31 = v30;
      for (j = 0; j != v31; ++j)
      {
        v33 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v22, j);
        transferMovieMetadata(v105, v33, &cf, &v113, &v112);
      }
    }
LABEL_39:
    v34 = v112;
    if (!v112)
    {
      v35 = *(const void **)(v21 + 288);
      if (!v35)
        goto LABEL_61;
      v34 = FigMetadataSerializerRetain(v35);
      v112 = v34;
    }
    v36 = *(uint64_t (**)(CFTypeRef, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
    if (!v36)
    {
      v38 = 0;
      goto LABEL_78;
    }
    Contiguous = v36(v34, &theBuffer);
    if ((_DWORD)Contiguous)
      goto LABEL_44;
    if (theBuffer)
    {
      keys.value = 0;
      keys.value = CMBlockBufferGetDataLength(theBuffer);
      values.value = 0;
      IsRangeContiguous = CMBlockBufferIsRangeContiguous(theBuffer, 0, keys.value);
      value = theBuffer;
      if (!IsRangeContiguous)
      {
        valuePtr.value = 0;
        Contiguous = CMBlockBufferCreateContiguous(allocator, theBuffer, allocator, 0, 0, keys.value, 0, (CMBlockBufferRef *)&valuePtr);
        if ((_DWORD)Contiguous)
          goto LABEL_44;
        if (theBuffer)
          CFRelease(theBuffer);
        value = (OpaqueCMBlockBuffer *)valuePtr.value;
        theBuffer = (CMBlockBufferRef)valuePtr.value;
      }
      Contiguous = CMBlockBufferGetDataPointer(value, 8uLL, (size_t *)&keys, 0, (char **)&values);
      if ((_DWORD)Contiguous)
        goto LABEL_44;
      v38 = CFDataCreateWithBytesNoCopy(allocator, (const UInt8 *)values.value, keys.value, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (!v38)
      {
        appended = FigSignalErrorAt();
        goto LABEL_77;
      }
      v41 = cf;
      if (cf || !copyMetadataSerializer((uint64_t)allocator, v105, *v16, &cf) && (v41 = cf) != 0)
      {
        v42 = FigMetadataSerializerGetFigMetadataWriter(v41);
        v43 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *, CFDataRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v43)
          goto LABEL_78;
        appended = v43(v42, *v17, CFSTR("meta"), v38, 0);
        if ((_DWORD)appended)
          goto LABEL_77;
      }
LABEL_62:
      v45 = cf;
      if (!cf)
      {
        v46 = *(const void **)(v105 + 280);
        if (!v46)
        {
LABEL_69:
          v48 = v113;
          if (!v113)
          {
            v49 = *(const void **)(v105 + 272);
            if (!v49)
            {
LABEL_76:
              appended = MovieHeaderMakerSetMovieMetadataBlockBuffer(*(_QWORD *)(v105 + 736), blockBufferOut);
LABEL_77:
              v37 = appended;
              goto LABEL_79;
            }
            v48 = FigMetadataSerializerRetain(v49);
            v113 = v48;
          }
          v50 = *(uint64_t (**)(CFTypeRef, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
          if (v50)
          {
            appended = v50(v48, &v117);
            if ((_DWORD)appended)
              goto LABEL_77;
            if (v117)
            {
              appended = CMBlockBufferAppendBufferReference(blockBufferOut, v117, 0, 0, 0);
              if ((_DWORD)appended)
                goto LABEL_77;
            }
            goto LABEL_76;
          }
LABEL_78:
          v37 = 4294954514;
          goto LABEL_79;
        }
        v45 = FigMetadataSerializerRetain(v46);
        cf = v45;
      }
      v47 = *(uint64_t (**)(CFTypeRef, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
      if (!v47)
        goto LABEL_78;
      appended = v47(v45, &targetBBuf);
      if ((_DWORD)appended)
        goto LABEL_77;
      if (targetBBuf)
      {
        appended = CMBlockBufferAppendBufferReference(blockBufferOut, targetBBuf, 0, 0, 0);
        if ((_DWORD)appended)
          goto LABEL_77;
      }
      goto LABEL_69;
    }
LABEL_61:
    v38 = 0;
    goto LABEL_62;
  }
  Contiguous = FigSignalErrorAt();
  v21 = v105;
  if (!(_DWORD)Contiguous)
    goto LABEL_39;
LABEL_44:
  v37 = Contiguous;
LABEL_45:
  v38 = 0;
LABEL_79:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  v51 = allocator;
  if (cf)
    CFRelease(cf);
  if (v113)
    CFRelease(v113);
  if (v112)
    CFRelease(v112);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);
  if (v38)
    CFRelease(v38);
  if (theBuffer)
    CFRelease(theBuffer);
  v52 = v105;
  if (targetBBuf)
    CFRelease(targetBBuf);
  if (v117)
    CFRelease(v117);
  if ((_DWORD)v37)
    goto LABEL_198;
  if (Count >= 1)
  {
    for (k = 0; k != Count; ++k)
    {
      v54 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v52 + 488), k);
      v55 = *((_QWORD *)v54 + 93);
      v108 = *((_DWORD *)v54 + 192) == 3;
      v56 = *(_DWORD *)v54 == 1936684398 && FigCFEqual() != 0;
      if (*(_BYTE *)(v52 + 384))
      {
        if (v54[492])
          v57 = v56;
        else
          v57 = 0;
        v107 = v57;
      }
      else
      {
        v107 = 0;
        v57 = 1;
      }
      Settings = setTrackExtendsDefaultValuesIfNeeded((uint64_t)v54);
      if ((_DWORD)Settings)
        goto LABEL_197;
      v58 = *((_QWORD *)v54 + 2);
      keys.value = 0;
      values.value = 0;
      valuePtr.value = 0;
      Empty = CMBlockBufferCreateEmpty(v51, 2u, 0, (CMBlockBufferRef *)&valuePtr);
      if ((_DWORD)Empty)
        goto LABEL_139;
      if ((*(_BYTE *)(*((_QWORD *)v54 + 2) + 684) & 3) != 0)
        Mutable = CFSetCreateMutable(v51, 0, MEMORY[0x1E0C9B3B0]);
      else
        Mutable = 0;
      v37 = *((_QWORD *)v54 + 70);
      if (v37 || (v37 = *((_QWORD *)v54 + 71)) != 0)
      {
        v61 = CFGetTypeID((CFTypeRef)v37);
        if (v61 == CFDictionaryGetTypeID())
        {
          transferTrackMetadata((uint64_t)v54, (CFDictionaryRef)v37, &keys.value, &values.value);
LABEL_120:
          v37 = 0;
          goto LABEL_127;
        }
        v62 = CFGetTypeID((CFTypeRef)v37);
        if (v62 == CFArrayGetTypeID())
        {
          v63 = CFArrayGetCount((CFArrayRef)v37);
          if (v63 < 1)
            goto LABEL_120;
          v64 = v63;
          for (m = 0; m != v64; ++m)
          {
            v66 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v37, m);
            transferTrackMetadata((uint64_t)v54, v66, &keys.value, &values.value);
          }
          v37 = 0;
          v52 = v105;
        }
        else
        {
          v37 = FigSignalErrorAt();
        }
      }
LABEL_127:
      if (Mutable)
        CFRelease(Mutable);
      v51 = allocator;
      if (!(_DWORD)v37)
      {
        v67 = keys.value;
        if (keys.value)
          goto LABEL_133;
        v68 = (const void *)*((_QWORD *)v54 + 69);
        if (!v68)
          goto LABEL_227;
        v67 = (CMTimeValue)FigMetadataSerializerRetain(v68);
        keys.value = v67;
LABEL_133:
        Empty = appendBBufFromMetadataSerializerToBlockBuffer(v67, (OpaqueCMBlockBuffer *)valuePtr.value);
        if (!(_DWORD)Empty)
        {
LABEL_227:
          v69 = values.value;
          if (values.value)
            goto LABEL_137;
          v70 = (const void *)*((_QWORD *)v54 + 68);
          if (!v70)
            goto LABEL_138;
          v69 = (CMTimeValue)FigMetadataSerializerRetain(v70);
          values.value = v69;
LABEL_137:
          Empty = appendBBufFromMetadataSerializerToBlockBuffer(v69, (OpaqueCMBlockBuffer *)valuePtr.value);
          if (!(_DWORD)Empty)
LABEL_138:
            Empty = MovieHeaderMakerTrackSetTrackMetadataBlockBuffer(*(_QWORD *)(v58 + 736), *((_QWORD *)v54 + 93), (CFTypeRef)valuePtr.value);
        }
LABEL_139:
        v37 = Empty;
      }
      if (keys.value)
        CFRelease((CFTypeRef)keys.value);
      if (values.value)
        CFRelease((CFTypeRef)values.value);
      if (valuePtr.value)
        CFRelease((CFTypeRef)valuePtr.value);
      if ((_DWORD)v37)
        goto LABEL_198;
      v71 = *((_QWORD *)v54 + 92);
      v72 = (const __CFString *)*((_QWORD *)v54 + 51);
      if (v72 || (v72 = (const __CFString *)*((_QWORD *)v54 + 52)) != 0)
      {
        PackedISO639_2TFromLocaleIdentifier = FigMetadataGetPackedISO639_2TFromLocaleIdentifier(v72);
        StringForLanguageCode = FigCreateStringForLanguageCode(v51, PackedISO639_2TFromLocaleIdentifier, 1);
        v75 = MovieTrackSetLanguageCodeString(v71, StringForLanguageCode);
        if ((_DWORD)v75)
          goto LABEL_156;
        v76 = (const void *)*((_QWORD *)v54 + 52);
        if (v76)
        {
LABEL_155:
          v75 = MovieTrackSetExtendedLanguageTagString(v71, v76);
LABEL_156:
          v37 = v75;
          if (!StringForLanguageCode)
            goto LABEL_158;
LABEL_157:
          CFRelease(StringForLanguageCode);
          goto LABEL_158;
        }
      }
      else
      {
        StringForLanguageCode = 0;
      }
      if (*(_BYTE *)(*((_QWORD *)v54 + 2) + 328))
      {
        v76 = (const void *)*((_QWORD *)v54 + 51);
        if (v76)
          goto LABEL_155;
      }
      v37 = 0;
      if (StringForLanguageCode)
        goto LABEL_157;
LABEL_158:
      v51 = allocator;
      if ((_DWORD)v37)
        goto LABEL_198;
      if (v54[40])
      {
        if ((v54[56] & 1) != 0)
        {
          v78 = *(_DWORD *)(*((_QWORD *)v54 + 2) + 20);
          values = *(CMTime *)(v54 + 44);
          CMTimeConvertScale(&keys, &values, v78, kCMTimeRoundingMethod_QuickTime);
          value_low = LODWORD(keys.value);
        }
        else
        {
          value_low = 0xFFFFFFFFLL;
        }
        if ((v54[80] & 1) != 0)
        {
          v80 = *(_DWORD *)(*((_QWORD *)v54 + 2) + 20);
          values = *(CMTime *)(v54 + 68);
          CMTimeConvertScale(&valuePtr, &values, v80, kCMTimeRoundingMethod_QuickTime);
          v79 = valuePtr.value << 32;
        }
        else
        {
          v79 = 0;
        }
        Settings = MovieTrackSetLoadSettings(*((_QWORD *)v54 + 92), v79 | value_low, *(_QWORD *)(v54 + 92));
        if ((_DWORD)Settings)
          goto LABEL_197;
      }
      Settings = MovieHeaderMakerTrackSetShouldWriteCompactSampleSizeAtomIfPossible(v9, v55, v54[584]);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldWriteCleanApertureDimensionsAtom(v9, v55, v54[34]);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldWriteProductionApertureDimensionsAtom(v9, v55, v54[36]);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldWriteEncodedPixelsDimensionsAtom(v9, v55, v54[38]);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetSampleReferenceBaseURL(v9, v55, *((CFTypeRef *)v54 + 57));
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldWriteRollSampleGroupAtoms(v9, v55, v108);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldWriteSampleAuxiliaryInformationAtoms(v9, v55, v54[729]);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldWriteEditAtom(v9, v55, v57);
      if ((_DWORD)Settings)
        goto LABEL_197;
      Settings = MovieHeaderMakerTrackSetShouldAllowWritingZeroTrackDurationInEditListAtom(v9, v55, v107);
      if ((_DWORD)Settings)
        goto LABEL_197;
    }
  }
  Settings = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer(*(_QWORD *)(v52 + 736), v51, *(_QWORD *)(v52 + 712), v104, (CMBlockBufferRef *)&v110);
  if (!(_DWORD)Settings)
  {
    if (!*(_BYTE *)(v52 + 329)
      || (v81 = *(const __CFArray **)(v105 + 488)) == 0
      || (v82 = *(_QWORD *)(v105 + 736), v83 = CFArrayGetCount(v81), v83 < 1))
    {
LABEL_189:
      v37 = 0;
      *v103 = v110;
      return v37;
    }
    v84 = v83;
    v85 = 0;
    while (1)
    {
      v86 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v105 + 488), v85);
      v87 = v86[93];
      LOBYTE(keys.value) = 0;
      Settings = MovieHeaderMakerTrackDidWriteEditAtom(v82, v87, &keys);
      if ((_DWORD)Settings)
        break;
      if (!LOBYTE(keys.value))
        *((_BYTE *)v86 + 353) = 1;
      if (v84 == ++v85)
        goto LABEL_189;
    }
  }
LABEL_197:
  v37 = Settings;
LABEL_198:
  if (v110)
    CFRelease(v110);
  return v37;
}

uint64_t InsertMediaSegments(uint64_t a1, int a2)
{
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  uint64_t BasicMetrics;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  const void *v13;
  __CFArray *v14;
  uint64_t v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  const __CFDictionary *v19;
  uint64_t v20;
  CFIndex v22;
  uint64_t v23;
  const __CFAllocator *allocator;
  CMTime *v25;
  CMTimeRange v26;
  CMTimeRange v27;
  CMTimeRange v28;
  CMTimeRange duration;
  CMTime start[2];
  __int128 v31;
  _OWORD v32[2];
  CMTimeRange v33;
  CMTimeRange v34;
  CFMutableArrayRef v35;
  _DWORD v36[3];

  v3 = a1;
  v25 = *(CMTime **)(a1 + 728);
  v36[0] = 0;
  v4 = *(const __CFArray **)(a1 + 488);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  v35 = 0;
  BasicMetrics = MovieInformationGetBasicMetrics((uint64_t)v25, 0, 0, v36, 0);
  if ((_DWORD)BasicMetrics)
    return BasicMetrics;
  if (Count < 1)
    return 0;
  v7 = 0;
  v23 = v3;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = Count;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 488), v7);
    v9 = *((_QWORD *)ValueAtIndex + 92);
    start[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    *(_OWORD *)&duration.start.value = *MEMORY[0x1E0CA2E30];
    duration.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    if (a2)
    {
      CMTimeRangeMake(&v34, start, &duration.start);
      v10 = MovieTrackDeleteSegment(v25, v9, (uint64_t)&v34);
    }
    else
    {
      CMTimeRangeMake(&v33, start, &duration.start);
      v10 = MovieTrackFragmentDeleteSegment(v9, (__int128 *)&v33.start.value);
    }
    v11 = v10;
    if ((_DWORD)v10)
      break;
    v12 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 50);
    if (v12 && CFArrayGetCount(v12))
    {
      v13 = (const void *)*((_QWORD *)ValueAtIndex + 50);
      if (v13)
        v14 = (__CFArray *)CFRetain(v13);
      else
        v14 = 0;
      v35 = v14;
      if (!v14)
        goto LABEL_30;
    }
    else
    {
      v15 = createDefaultTrackEditSegmentArray(allocator, (uint64_t)ValueAtIndex, &v35);
      if ((_DWORD)v15)
        goto LABEL_36;
      v14 = v35;
      if (!v35)
        goto LABEL_30;
    }
    v16 = CFArrayGetCount(v14);
    if (v16 >= 1)
    {
      v17 = v16;
      v18 = 0;
      while (1)
      {
        v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v18);
        memset(v32, 0, sizeof(v32));
        v31 = 0u;
        memset(start, 0, sizeof(start));
        getFigTimeMappingFromDictionary(v19, start);
        if ((_DWORD)v15)
          break;
        if ((start[0].flags & 1) != 0)
        {
          memset(&duration, 0, sizeof(duration));
          *(_OWORD *)&v28.start.value = v31;
          v28.start.epoch = *(_QWORD *)&v32[0];
          *(_OWORD *)&v27.start.value = *(_OWORD *)((char *)v32 + 8);
          v27.start.epoch = *((_QWORD *)&v32[1] + 1);
          CMTimeRangeMake(&duration, &v28.start, &v27.start);
          memset(&v28, 0, sizeof(v28));
          v27.start = start[0];
          v26.start = start[1];
          CMTimeRangeMake(&v28, &v27.start, &v26.start);
          v27 = duration;
          v26 = v28;
          v20 = a2
              ? MovieTrackInsertMediaSegment(v25, v9, &v27, (__int128 *)&v26.start.value)
              : MovieTrackFragmentInsertMediaSegment(v9, &v27, (__int128 *)&v26.start.value);
          v11 = v20;
          if ((_DWORD)v20)
            goto LABEL_32;
        }
        if (v17 == ++v18)
          goto LABEL_29;
      }
LABEL_36:
      v11 = v15;
      break;
    }
LABEL_29:
    CFRelease(v14);
    v35 = 0;
    Count = v22;
    v3 = v23;
LABEL_30:
    if (++v7 == Count)
    {
      v11 = 0;
      break;
    }
  }
LABEL_32:
  if (v35)
    CFRelease(v35);
  return v11;
}

double getFigTimeMappingFromDictionary(const __CFDictionary *a1, _OWORD *a2)
{
  double result;
  CFTypeID TypeID;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  BOOL v10;
  const __CFDictionary *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CMTime v17;
  CMTime v18[2];
  __int128 v19;
  _OWORD v20[2];

  result = 0.0;
  memset(v20, 0, sizeof(v20));
  v19 = 0u;
  memset(v18, 0, sizeof(v18));
  if (a1)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("MediaStart"));
      v7 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("MediaDuration"));
      v8 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("TrackStart"));
      v9 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("TrackDuration"));
      if (Value)
        v10 = v7 == 0;
      else
        v10 = 1;
      if (!v10 && v8 != 0 && v9 != 0)
      {
        v13 = v9;
        CMTimeMakeFromDictionary(v18, Value);
        CMTimeMakeFromDictionary(&v17, v7);
        v18[1] = v17;
        CMTimeMakeFromDictionary(&v17, v8);
        v19 = *(_OWORD *)&v17.value;
        *(_QWORD *)&v20[0] = v17.epoch;
        CMTimeMakeFromDictionary(&v17, v13);
        *(CMTime *)((char *)v20 + 8) = v17;
        v14 = v19;
        a2[2] = *(_OWORD *)&v18[1].timescale;
        a2[3] = v14;
        v15 = v20[1];
        a2[4] = v20[0];
        a2[5] = v15;
        result = *(double *)&v18[0].value;
        v16 = *(_OWORD *)&v18[0].epoch;
        *a2 = *(_OWORD *)&v18[0].value;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t getFirstEditBuilder(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  CFIndex v7;

  v2 = *(const __CFArray **)(a1 + 424);
  if (!v2)
    return *(_QWORD *)(a1 + 496);
  Count = CFArrayGetCount(v2);
  if (Count < 1)
    return *(_QWORD *)(a1 + 496);
  v4 = Count;
  v5 = 0;
  while (1)
  {
    v6 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), v5) + 34);
    v7 = CFArrayGetCount(*(CFArrayRef *)(v6 + 24));
    if (v7 + editMediaTimeIsValid(*(_QWORD *)(v6 + 16)))
      break;
    if (v4 == ++v5)
      return *(_QWORD *)(a1 + 496);
  }
  return v6;
}

const void *editBuilderGetEditMediaTimeAtIndex(uint64_t a1, CFIndex a2)
{
  CFIndex Count;
  uint64_t v6;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count > a2)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  if (Count != a2)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (editMediaTimeIsValid(v6))
    return (const void *)v6;
  else
    return 0;
}

uint64_t copyFigTimeMappingAsDictionary(CFAllocatorRef allocator, uint64_t a2, CFDictionaryRef *a3)
{
  CFDictionaryRef v6;
  uint64_t v7;
  uint64_t i;
  const void *v9;
  CMTime v11;
  CMTime time;
  CFDictionaryRef v13;
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("MediaStart");
  keys[1] = CFSTR("MediaDuration");
  keys[2] = CFSTR("TrackStart");
  keys[3] = CFSTR("TrackDuration");
  time = *(CMTime *)a2;
  time.value = (CMTimeValue)CMTimeCopyAsDictionary(&time, allocator);
  v11 = *(CMTime *)(a2 + 24);
  *(_QWORD *)&time.timescale = CMTimeCopyAsDictionary(&v11, allocator);
  v11 = *(CMTime *)(a2 + 48);
  time.epoch = (CMTimeEpoch)CMTimeCopyAsDictionary(&v11, allocator);
  v11 = *(CMTime *)(a2 + 72);
  v13 = CMTimeCopyAsDictionary(&v11, allocator);
  v6 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&time, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
    v7 = 0;
    *a3 = v6;
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  for (i = 0; i != 32; i += 8)
  {
    v9 = *(const void **)((char *)&time.value + i);
    if (v9)
      CFRelease(v9);
  }
  return v7;
}

BOOL editMediaTimeIsValid(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 24) & 0x1D) == 1
      && (*(_DWORD *)(a1 + 48) & 0x1D) == 1
      && (*(_DWORD *)(a1 + 72) & 0x1D) == 1
      && (*(_DWORD *)(a1 + 96) & 0x1D) == 1
      && *(double *)(a1 + 112) != -1.0;
}

uint64_t editBuilderCreateTimeMappingArray(uint64_t a1, int32_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, CFAllocatorRef allocator, const __CFArray **a8, uint64_t a9)
{
  CFIndex Count;
  int v17;
  CMTime *v18;
  int v19;
  uint64_t appended;
  uint64_t v21;
  CFIndex v22;
  char *EditMediaTimeAtIndex;
  double v24;
  __int128 v25;
  __int128 v26;
  char v27;
  int v28;
  uint64_t v29;
  CFDictionaryRef v30;
  CMTimeEpoch v31;
  __int128 v32;
  CMTime *v34;
  const __CFArray **v35;
  CMTimeEpoch epoch;
  __int128 v37;
  const __CFAllocator *allocatora;
  const __CFArray *cf;
  uint64_t v41;
  CMTimeRange duration;
  CMTime v43;
  CMTime lhs;
  CMTimeRange time1[2];
  CMTime v46;
  CMTime rhs;
  CMTime start;
  CMTime v49;
  CMTime v50;
  CMTimeRange time2;
  CMTime v52;
  CMTime v53;
  CFDictionaryRef v54;
  CMTime v55;

  v54 = 0;
  if ((*(_BYTE *)(a4 + 12) & 1) != 0)
  {
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)a4;
    time1[0].start.epoch = *(_QWORD *)(a4 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)a3;
    time2.start.epoch = *(_QWORD *)(a3 + 16);
    if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
      return FigSignalErrorAt();
  }
  cf = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!cf)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  v41 = Count + editMediaTimeIsValid(*(_QWORD *)(a1 + 16));
  v17 = *(_DWORD *)(a4 + 12);
  if (!v41)
  {
    if ((v17 & 1) == 0)
      goto LABEL_46;
LABEL_10:
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)a3;
    time1[0].start.epoch = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)a4;
    time2.start.epoch = *(_QWORD *)(a4 + 16);
    *(_OWORD *)&duration.start.value = *(_OWORD *)&a6->value;
    duration.start.epoch = a6->epoch;
    appended = appendEmptyEditTimeMappingDictionary(cf, allocator, a2, (uint64_t)time1, (uint64_t)&time2, &duration.start, (uint64_t)a6);
    if (!(_DWORD)appended)
      goto LABEL_46;
    goto LABEL_49;
  }
  v18 = (CMTime *)MEMORY[0x1E0CA2E68];
  if ((v17 & 1) != 0)
  {
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)a4;
    time1[0].start.epoch = *(_QWORD *)(a4 + 16);
    *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
    time2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
      goto LABEL_10;
  }
  v53 = *v18;
  *(_OWORD *)&time1[0].start.value = *(_OWORD *)a3;
  time1[0].start.epoch = *(_QWORD *)(a3 + 16);
  v37 = *(_OWORD *)&v53.value;
  time2.start = v53;
  epoch = v53.epoch;
  v34 = a5;
  v35 = a8;
  allocatora = allocator;
  if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
  {
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)a3;
    time1[0].start.epoch = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&time2.start.value = *(_OWORD *)&a6->value;
    time2.start.epoch = a6->epoch;
    appended = appendEmptyEditTimeMappingDictionary(cf, allocator, a2, (uint64_t)time1, MEMORY[0x1E0CA2E68], &time2.start, (uint64_t)a6);
    if ((_DWORD)appended)
      goto LABEL_49;
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (v41 < 1)
  {
LABEL_39:
    if ((*(_BYTE *)(a4 + 12) & 1) != 0)
    {
      time1[0].start = v53;
      *(_OWORD *)&time2.start.value = *(_OWORD *)a3;
      time2.start.epoch = *(_QWORD *)(a3 + 16);
      if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
      {
        *(_OWORD *)&time1[0].start.value = *(_OWORD *)a3;
        v31 = *(_QWORD *)(a3 + 16);
LABEL_44:
        time1[0].start.epoch = v31;
        *(_OWORD *)&time2.start.value = *(_OWORD *)a4;
        time2.start.epoch = *(_QWORD *)(a4 + 16);
        *(_OWORD *)&duration.start.value = *(_OWORD *)&a6->value;
        duration.start.epoch = a6->epoch;
        appended = appendEmptyEditTimeMappingDictionary(cf, allocatora, a2, (uint64_t)time1, (uint64_t)&time2, &duration.start, (uint64_t)a6);
        if (!(_DWORD)appended)
          goto LABEL_45;
LABEL_49:
        v21 = appended;
        goto LABEL_50;
      }
      time1[0].start = v53;
      *(_OWORD *)&time2.start.value = *(_OWORD *)a4;
      time2.start.epoch = *(_QWORD *)(a4 + 16);
      if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
      {
        *(_OWORD *)&time1[0].start.value = *(_OWORD *)&v53.value;
        v31 = v53.epoch;
        goto LABEL_44;
      }
    }
LABEL_45:
    a8 = v35;
LABEL_46:
    *a8 = cf;
    v21 = 0;
    if (a9)
    {
      v32 = *(_OWORD *)&a6->value;
      *(_QWORD *)(a9 + 16) = a6->epoch;
      *(_OWORD *)a9 = v32;
    }
    return v21;
  }
  v22 = 0;
  while (1)
  {
    EditMediaTimeAtIndex = (char *)editBuilderGetEditMediaTimeAtIndex(a1, v22);
    v24 = *((double *)EditMediaTimeAtIndex + 14);
    memset(&v52, 0, sizeof(v52));
    memset(&duration, 0, 24);
    v25 = *(_OWORD *)(EditMediaTimeAtIndex + 12);
    time1[0].start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 28);
    *(_OWORD *)&time1[0].start.value = v25;
    *(_OWORD *)&time2.start.value = *(_OWORD *)(EditMediaTimeAtIndex + 60);
    time2.start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 76);
    CMTimeAdd(&duration.start, &time1[0].start, &time2.start);
    memset(&v55, 0, sizeof(v55));
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)(EditMediaTimeAtIndex + 36);
    time1[0].start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 52);
    *(_OWORD *)&time2.start.value = *(_OWORD *)(EditMediaTimeAtIndex + 84);
    time2.start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 100);
    CMTimeSubtract(&v55, &time1[0].start, &time2.start);
    time1[0].start = v55;
    *(_OWORD *)&time2.start.value = *(_OWORD *)&duration.start.value;
    time2.start.epoch = duration.start.epoch;
    CMTimeSubtract(&v52, &time1[0].start, &time2.start);
    memset(&v55, 0, sizeof(v55));
    time1[0].start = v52;
    CMTimeMultiplyByFloat64(&v55, &time1[0].start, 1.0 / v24);
    memset(&time2, 0, sizeof(time2));
    time1[0].start = v53;
    duration.start = v55;
    CMTimeRangeMake(&time2, &time1[0].start, &duration.start);
    memset(&v50, 0, sizeof(v50));
    v26 = *(_OWORD *)(EditMediaTimeAtIndex + 12);
    time1[0].start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 28);
    *(_OWORD *)&time1[0].start.value = v26;
    *(_OWORD *)&duration.start.value = *(_OWORD *)(EditMediaTimeAtIndex + 60);
    duration.start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 76);
    CMTimeAdd(&v50, &time1[0].start, &duration.start);
    v49 = v50;
    memset(&start, 0, sizeof(start));
    *(_OWORD *)&time1[0].start.value = *(_OWORD *)(EditMediaTimeAtIndex + 36);
    time1[0].start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 52);
    *(_OWORD *)&duration.start.value = *(_OWORD *)(EditMediaTimeAtIndex + 84);
    duration.start.epoch = *(_QWORD *)(EditMediaTimeAtIndex + 100);
    CMTimeSubtract(&start, &time1[0].start, &duration.start);
    if (!v19)
    {
      time1[0] = time2;
      *(_OWORD *)&duration.start.value = *(_OWORD *)a3;
      duration.start.epoch = *(_QWORD *)(a3 + 16);
      if (!CMTimeRangeContainsTime(time1, &duration.start))
      {
        v19 = 0;
        v27 = 1;
        goto LABEL_21;
      }
      memset(time1, 0, 24);
      *(_OWORD *)&duration.start.value = *(_OWORD *)a3;
      duration.start.epoch = *(_QWORD *)(a3 + 16);
      rhs = time2.start;
      CMTimeSubtract(&time1[0].start, &duration.start, &rhs);
      rhs = time1[0].start;
      CMTimeMultiplyByFloat64(&duration.start, &rhs, v24);
      *(_OWORD *)&time1[0].start.value = *(_OWORD *)&duration.start.value;
      time1[0].start.epoch = duration.start.epoch;
      rhs = v50;
      CMTimeAdd(&v49, &duration.start, &rhs);
    }
    v27 = 0;
    v19 = 1;
LABEL_21:
    time1[0] = time2;
    *(_OWORD *)&duration.start.value = *(_OWORD *)a4;
    duration.start.epoch = *(_QWORD *)(a4 + 16);
    v28 = CMTimeRangeContainsTime(time1, &duration.start);
    if (v28)
    {
      memset(time1, 0, 24);
      *(_OWORD *)&duration.start.value = *(_OWORD *)a4;
      duration.start.epoch = *(_QWORD *)(a4 + 16);
      rhs = v53;
      CMTimeSubtract(&time1[0].start, &duration.start, &rhs);
      rhs = time1[0].start;
      CMTimeMultiplyByFloat64(&duration.start, &rhs, v24);
      time1[0].start.epoch = duration.start.epoch;
      *(_OWORD *)&time1[0].start.value = *(_OWORD *)&duration.start.value;
      rhs = duration.start;
      v46 = v50;
      CMTimeAdd(&duration.start, &rhs, &v46);
      start = duration.start;
    }
    if ((v27 & 1) == 0)
    {
      if (EditMediaTimeAtIndex[8])
      {
        time1[0].start = v49;
        duration.start = start;
        rhs = *a6;
        appended = appendEmptyEditTimeMappingDictionary(cf, allocatora, a2, (uint64_t)time1, (uint64_t)&duration, &rhs, (uint64_t)a6);
        if ((_DWORD)appended)
          goto LABEL_49;
        goto LABEL_35;
      }
      time1[0].start = start;
      duration.start = v49;
      CMTimeSubtract(&rhs, &time1[0].start, &duration.start);
      duration.start = rhs;
      CMTimeConvertScale(&time1[0].start, &duration.start, a2, kCMTimeRoundingMethod_QuickTime);
      rhs = time1[0].start;
      CMTimeMultiplyByFloat64(&v46, &time1[0].start, 1.0 / v24);
      *(_OWORD *)&time1[0].start.value = v37;
      time1[0].start.epoch = epoch;
      duration.start = v46;
      if (CMTimeCompare(&time1[0].start, &duration.start) < 0)
        break;
    }
LABEL_35:
    time1[0] = time2;
    CMTimeRangeGetEnd(&v53, time1);
    if (v28)
      goto LABEL_45;
    if (v41 == ++v22)
      goto LABEL_39;
  }
  memset(time1, 0, sizeof(time1));
  if ((EditMediaTimeAtIndex[132] & 1) != 0)
  {
    lhs = v49;
    v43 = *(CMTime *)(EditMediaTimeAtIndex + 5);
    CMTimeSubtract(&duration.start, &lhs, &v43);
    v49 = duration.start;
    *(_OWORD *)&lhs.value = v37;
    lhs.epoch = epoch;
    v43 = duration.start;
    CMTimeMaximum(&duration.start, &lhs, &v43);
    v49 = duration.start;
  }
  lhs = v49;
  v43 = *v34;
  CMTimeAdd(&duration.start, &lhs, &v43);
  v49 = duration.start;
  lhs = rhs;
  CMTimeRangeMake(time1, &duration.start, &lhs);
  lhs = *a6;
  v43 = v46;
  CMTimeRangeMake(&duration, &lhs, &v43);
  time1[1] = duration;
  v29 = copyFigTimeMappingAsDictionary(allocatora, (uint64_t)time1, &v54);
  v30 = v54;
  if (!(_DWORD)v29)
  {
    appendTrackEditSegmentDictionary(cf, v54);
    if (!(_DWORD)v29)
    {
      if (v30)
      {
        CFRelease(v30);
        v54 = 0;
      }
      lhs = *a6;
      v43 = time1[1].duration;
      CMTimeAdd(&duration.start, &lhs, &v43);
      *(_OWORD *)&a6->value = *(_OWORD *)&duration.start.value;
      a6->epoch = duration.start.epoch;
      goto LABEL_35;
    }
  }
  v21 = v29;
  if (v30)
    CFRelease(v30);
LABEL_50:
  CFRelease(cf);
  return v21;
}

uint64_t appendEmptyEditTimeMappingDictionary(const __CFArray *a1, const __CFAllocator *a2, int32_t a3, uint64_t a4, uint64_t a5, CMTime *a6, uint64_t a7)
{
  CMTimeEpoch epoch;
  __int128 v13;
  CFDictionaryRef v14;
  uint64_t v15;
  uint64_t v16;
  CMTime v18;
  CMTimeRange rhs;
  CMTime duration;
  CMTimeRange lhs[2];
  CMTime start;
  CFDictionaryRef v23;

  v23 = 0;
  *(_OWORD *)&lhs[0].start.value = *(_OWORD *)a5;
  lhs[0].start.epoch = *(_QWORD *)(a5 + 16);
  *(_OWORD *)&rhs.start.value = *(_OWORD *)a4;
  rhs.start.epoch = *(_QWORD *)(a4 + 16);
  CMTimeSubtract(&start, &lhs[0].start, &rhs.start);
  rhs.start = start;
  CMTimeConvertScale(&lhs[0].start, &rhs.start, a3, kCMTimeRoundingMethod_QuickTime);
  epoch = lhs[0].start.epoch;
  start = lhs[0].start;
  v13 = *(_OWORD *)&lhs[0].start.value;
  *(_OWORD *)&lhs[0].start.value = *MEMORY[0x1E0CA2E68];
  lhs[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&rhs.start.value = v13;
  rhs.start.epoch = epoch;
  v14 = 0;
  if (CMTimeCompare(&lhs[0].start, &rhs.start) < 0)
  {
    *(_OWORD *)&rhs.start.value = *MEMORY[0x1E0CA2E18];
    rhs.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    duration = rhs.start;
    CMTimeRangeMake(lhs, &rhs.start, &duration);
    memset(&lhs[1], 0, sizeof(CMTimeRange));
    duration = *a6;
    v18 = start;
    CMTimeRangeMake(&rhs, &duration, &v18);
    lhs[1] = rhs;
    v15 = copyFigTimeMappingAsDictionary(a2, (uint64_t)lhs, &v23);
    v14 = v23;
    if ((_DWORD)v15 || (appendTrackEditSegmentDictionary(a1, v23), (_DWORD)v15))
    {
      v16 = v15;
      if (!v14)
        return v16;
      goto LABEL_5;
    }
  }
  *(_OWORD *)&rhs.start.value = *(_OWORD *)&a6->value;
  rhs.start.epoch = a6->epoch;
  duration = start;
  CMTimeAdd(&lhs[0].start, &rhs.start, &duration);
  v16 = 0;
  *(_OWORD *)a7 = *(_OWORD *)&lhs[0].start.value;
  *(_QWORD *)(a7 + 16) = lhs[0].start.epoch;
  if (v14)
LABEL_5:
    CFRelease(v14);
  return v16;
}

uint64_t setTrackExtendsDefaultValuesIfNeeded(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 728))
    return 0;
  result = MovieTrackSetTrackExtendsDefaultValues(*(_DWORD **)(a1 + 736), 1, 0, 0, 0);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 728) = 1;
  return result;
}

CFStringRef createiTunesGaplessInfoString(const __CFDictionary *a1)
{
  const __CFNumber *Value;
  const __CFNumber *v3;
  const __CFNumber *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int valuePtr;
  UInt8 bytes;
  _OWORD v13[6];
  _BYTE v14[19];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  valuePtr = 0;
  v9 = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("EncodingDelayInFrame"));
  v3 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("EncodingDrainInFrames"));
  v4 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("DurationInFrames"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  if (v3)
    CFNumberGetValue(v3, kCFNumberSInt32Type, &v10);
  if (v4)
  {
    CFNumberGetValue(v4, kCFNumberSInt64Type, &v9);
    v5 = v9;
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)&v14[15] = 808464432;
  *(_QWORD *)&v6 = 0x3030303030303030;
  *((_QWORD *)&v6 + 1) = 0x3030303030303030;
  *(_OWORD *)v14 = v6;
  v13[5] = v6;
  v13[4] = v6;
  v13[3] = v6;
  v13[2] = v6;
  v13[1] = v6;
  v13[0] = v6;
  bytes = 32;
  snprintf((char *)v13 + 8, 0x24uLL, " %08X %08X %016llX", valuePtr, v10, v5);
  v7 = 44;
  do
  {
    *(&bytes + v7) = 32;
    v7 += 9;
  }
  while ((_DWORD)v7 != 116);
  return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &bytes, 116, 0x600u, 0);
}

uint64_t copyMetadataSerializer(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef cf;
  uint64_t v11;

  cf = 0;
  v11 = 0;
  if (!a4)
    return FigSignalErrorAt();
  result = getMetadataSerializer(a1, a2, a3, &v11);
  if (!(_DWORD)result)
  {
    v7 = v11;
    if (v11)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
      if (v8)
      {
        result = v8(a1, v7, &cf);
        if ((_DWORD)result)
        {
          v9 = result;
          if (cf)
            CFRelease(cf);
          return v9;
        }
        else
        {
          *a4 = cf;
        }
      }
      else
      {
        return 4294954514;
      }
    }
  }
  return result;
}

void transferMovieMetadata(uint64_t a1, CFDictionaryRef theDict, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  CFTypeRef *v7;
  const void *Value;
  const __CFString *v11;
  const void *v12;
  CFIndex Count;
  CFIndex v14;
  const __CFSet *Mutable;
  CFIndex v16;
  const __CFString *ValueAtIndex;
  CFTypeRef v18;
  uint64_t v19;
  CFTypeRef *v20;
  uint64_t v21;
  const __CFString *v22;
  const void *FigMetadataWriter;
  _BOOL4 v25;
  int v26;
  CFTypeRef *v27;
  const __CFAllocator *allocator;
  CFTypeRef *v29;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef cf1;

  theArray = 0;
  cf1 = 0;
  cf = 0;
  if (!theDict || !a3 || !a4)
    goto LABEL_59;
  v7 = a5;
  if (!a5)
  {
    FigSignalErrorAt();
    goto LABEL_61;
  }
  if (CFDictionaryGetValue(theDict, CFSTR("items")))
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("format"));
    if (Value)
      v11 = (const __CFString *)CFRetain(Value);
    else
      v11 = 0;
    cf1 = v11;
    copyMetadataDestinationFormat(a1, v11, &theArray);
    goto LABEL_13;
  }
  v12 = CFDictionaryGetValue(theDict, CFSTR("MetadataReader"));
  if (!v12)
  {
LABEL_59:
    FigSignalErrorAt();
    goto LABEL_60;
  }
  if (copyMetadataSourceAndDestinationFormats(a1, (uint64_t)v12, &cf1, &theArray))
    goto LABEL_60;
LABEL_13:
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_60:
    v7 = 0;
LABEL_61:
    Mutable = 0;
    goto LABEL_62;
  }
  v14 = Count;
  v29 = a3;
  v27 = v7;
  Mutable = 0;
  v16 = 0;
  v7 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v7)
      CFRelease(v7);
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v16);
    if (cf1 && !CFEqual(cf1, ValueAtIndex) && createMetadataConverter(a1, cf1, ValueAtIndex, &cf))
    {
LABEL_34:
      v7 = 0;
      goto LABEL_56;
    }
    if (CFEqual(ValueAtIndex, CFSTR("com.apple.quicktime.udta")))
    {
      if ((*(_BYTE *)(a1 + 684) & 1) != 0)
        goto LABEL_26;
LABEL_28:
      v18 = *v29;
      if (*v29)
        goto LABEL_40;
      v19 = (uint64_t)allocator;
      v20 = v29;
      v21 = a1;
      v22 = ValueAtIndex;
      goto LABEL_30;
    }
    if (CFEqual(ValueAtIndex, CFSTR("org.mp4ra")))
    {
      if ((*(_BYTE *)(a1 + 684) & 1) == 0)
        goto LABEL_26;
      goto LABEL_28;
    }
    if (CFEqual(ValueAtIndex, CFSTR("com.apple.quicktime.mdta")))
    {
      v18 = *a4;
      if (*a4)
        goto LABEL_40;
      v19 = (uint64_t)allocator;
      v21 = a1;
      v22 = ValueAtIndex;
      v20 = a4;
    }
    else
    {
      if (!CFEqual(ValueAtIndex, CFSTR("com.apple.itunes")))
        goto LABEL_26;
      v18 = *v27;
      if (*v27)
        goto LABEL_40;
      v19 = (uint64_t)allocator;
      v21 = a1;
      v22 = ValueAtIndex;
      v20 = v27;
    }
LABEL_30:
    if (copyMetadataSerializer(v19, v21, v22, v20))
      goto LABEL_34;
    v18 = *v20;
    if (*v20)
    {
LABEL_40:
      FigMetadataWriter = (const void *)FigMetadataSerializerGetFigMetadataWriter(v18);
      if (FigMetadataWriter)
        v7 = (CFTypeRef *)CFRetain(FigMetadataWriter);
      else
        v7 = 0;
      goto LABEL_43;
    }
LABEL_26:
    v7 = 0;
    if (FigSignalErrorAt())
      goto LABEL_56;
LABEL_43:
    v25 = (*(_BYTE *)(a1 + 684) & 4) == 0 || ValueAtIndex != CFSTR("com.apple.itunes");
    if (cf1 && CFEqual(cf1, ValueAtIndex))
      v25 = 0;
    if (!Mutable)
    {
      Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
      if (!Mutable)
        break;
    }
    v26 = transferMetadata(a1, theDict, (uint64_t)cf, (uint64_t)v7, *(const __CFDictionary **)(a1 + 312), Mutable, v25);
    if (v26 && v26 != -12583)
      goto LABEL_62;
LABEL_56:
    if (v14 == ++v16)
      goto LABEL_62;
  }
  FigSignalErrorAt();
LABEL_62:
  if (cf1)
    CFRelease(cf1);
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (Mutable)
    CFRelease(Mutable);
}

CFArrayRef copyMetadataDestinationFormat(uint64_t a1, const __CFString *cf1, CFArrayRef *a3)
{
  int v4;
  CFIndex v6;
  CFArrayRef result;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v4 = *(_DWORD *)(a1 + 684);
  if ((v4 & 4) != 0)
  {
    v8 = CFSTR("com.apple.itunes");
    v9 = CFSTR("org.mp4ra");
  }
  else
  {
    if ((v4 & 1) != 0)
    {
      v8 = CFSTR("org.mp4ra");
      goto LABEL_10;
    }
    if (cf1)
    {
      if (CFEqual(cf1, CFSTR("com.apple.quicktime.mdta")) || CFEqual(cf1, CFSTR("com.apple.quicktime.udta")))
      {
        v8 = cf1;
LABEL_10:
        v6 = 1;
        goto LABEL_11;
      }
      if (CFEqual(cf1, CFSTR("com.apple.itunes")))
      {
        v8 = CFSTR("com.apple.itunes");
        v9 = CFSTR("com.apple.quicktime.mdta");
        v6 = 3;
        v10 = CFSTR("com.apple.quicktime.udta");
        goto LABEL_11;
      }
      if (!CFEqual(cf1, CFSTR("org.mp4ra")))
      {
        v6 = 0;
        goto LABEL_11;
      }
      v8 = CFSTR("com.apple.quicktime.mdta");
      v9 = CFSTR("com.apple.quicktime.udta");
    }
    else
    {
      v8 = CFSTR("com.apple.quicktime.mdta");
      v9 = CFSTR("com.apple.quicktime.udta");
    }
  }
  v6 = 2;
LABEL_11:
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&v8, v6, MEMORY[0x1E0C9B378]);
  *a3 = result;
  return result;
}

uint64_t copyMetadataSourceAndDestinationFormats(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFArrayRef *a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef cf;

  cf = 0;
  if (!((unint64_t)a3 | (unint64_t)a4))
    return FigSignalErrorAt();
  FigBaseObject = FigMetadataReaderGetFigBaseObject(a2);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v8)
    return 4294954514;
  v9 = v8(FigBaseObject, CFSTR("format"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v9)
  {
    v10 = cf;
LABEL_11:
    if (v10)
      CFRelease(v10);
    return v9;
  }
  if (a4)
    copyMetadataDestinationFormat(a1, (const __CFString *)cf, a4);
  v10 = cf;
  if (!a3)
    goto LABEL_11;
  v9 = 0;
  *a3 = cf;
  return v9;
}

uint64_t createMetadataConverter(uint64_t a1, CFTypeRef cf1, const void *a3, _QWORD *a4)
{
  int v7;
  const __CFAllocator *v8;
  const __CFDictionary *v9;
  __CFString **v10;
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  v7 = *(_DWORD *)(a1 + 684);
  if ((v7 & 2) != 0)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = kFigMetadataConverterDestFileFormat_ISO_3GP;
  }
  else
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((v7 & 1) == 0)
    {
      v9 = 0;
      goto LABEL_7;
    }
    v10 = &kFigMetadataConverterDestFileFormat_ISO_MP4;
  }
  v9 = CFDictionaryCreate(v8, (const void **)kFigMetadataConverterCreateOption_DestFileFormat, (const void **)v10, 1, 0, 0);
LABEL_7:
  v11 = FigMetadataCreateConverter(cf1, a3, v9, (int)v8, &v13);
  if (!(_DWORD)v11)
    *a4 = v13;
  if (v9)
    CFRelease(v9);
  return v11;
}

uint64_t transferMetadata(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, const __CFDictionary *a5, const __CFSet *a6, int a7)
{
  uint64_t v7;
  const __CFDictionary *v9;
  unint64_t Value;
  const __CFAllocator **v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFAllocator *v14;
  uint64_t v15;
  __CFDictionary *v16;
  _QWORD *Instance;
  uint64_t v18;
  uint64_t (*v19)(unint64_t, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t (*v21)(unint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, const void **, const __CFDictionary **);
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  CFTypeRef v26;
  _BOOL4 v27;
  CFTypeID TypeID;
  _BOOL4 v29;
  __CFDictionary *MutableCopy;
  __CFDictionary *v31;
  unsigned int (*v32)(uint64_t, __CFDictionary *, const __CFAllocator *, CFTypeRef *);
  const void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v37;
  uint64_t (*v38)(CFTypeRef, _QWORD, CFIndex *);
  int v39;
  const void *v40;
  CFDataRef v41;
  CFTypeID v42;
  uint64_t v43;
  CFIndex v44;
  CFTypeRef v45;
  uint64_t (*v46)(CFTypeRef, CFIndex, uint64_t, OpaqueCMBlockBuffer **, _QWORD);
  uint64_t DataPointer;
  CFDataRef v48;
  CFDataRef v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  const __CFAllocator **v53;
  const void *v54;
  const __CFDictionary *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const __CFDictionary *v59;
  uint64_t (*v60)(uint64_t, const void *, const void *, const void *, const __CFDictionary *);
  uint64_t v61;
  const void *v62;
  const __CFArray *v63;
  uint64_t v64;
  const __CFAllocator **v65;
  CFIndex v66;
  CFIndex v67;
  const __CFDictionary *ValueAtIndex;
  _QWORD *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  unsigned int (*v74)(uint64_t, const __CFDictionary *, const __CFAllocator *, CFTypeRef *);
  uint64_t v75;
  uint64_t (*v76)(uint64_t, const void *, const void *, const void *, const __CFDictionary *);
  uint64_t v77;
  int v79;
  CFDataRef cf;
  unsigned int v81;
  CFTypeRef Count;
  CFIndex range;
  unint64_t v84;
  unint64_t v85;
  const __CFDictionary *v86;
  uint64_t v87;
  uint64_t v88;
  const __CFArray *v89;
  CFIndex v90;
  const __CFDictionary *v92;
  const __CFDictionary *v93;
  const __CFArray *theArray;
  uint64_t v98;
  const __CFAllocator *v99;
  CFTypeRef v100;
  CFTypeRef v101;
  const __CFDictionary *v102;
  const void *v103;
  char *dataPointerOut;
  CFIndex v105;
  CFIndex v106;
  uint64_t v107;
  OpaqueCMBlockBuffer *v108;
  __CFDictionary *v109;
  CFTypeRef valuePtr[2];
  CFRange v111;
  CFRange v112;

  if (!theDict)
    return FigSignalErrorAt();
  v7 = a4;
  if (!a4)
    return FigSignalErrorAt();
  v9 = theDict;
  Value = (unint64_t)CFDictionaryGetValue(theDict, CFSTR("MetadataReader"));
  v11 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!Value)
    goto LABEL_146;
  theArray = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("MetadataKeysToTransfer"));
  v89 = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("MetadataKeysToIgnore"));
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  FigBaseObject = FigMetadataReaderGetFigBaseObject(Value);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v13)
  {
    v16 = 0;
    Instance = 0;
    v18 = 4294954514;
    goto LABEL_133;
  }
  v86 = v9;
  v14 = *v11;
  v15 = v13(FigBaseObject, CFSTR("format"), *v11, &v101);
  if ((_DWORD)v15)
  {
    v18 = v15;
    v16 = 0;
    Instance = 0;
    goto LABEL_132;
  }
  if (theArray)
    range = CFArrayGetCount(theArray);
  else
    range = 0;
  if (!v89)
  {
    Count = 0;
    if (a5)
      goto LABEL_12;
LABEL_14:
    v81 = 0;
    goto LABEL_15;
  }
  Count = (CFTypeRef)CFArrayGetCount(v89);
  if (!a5)
    goto LABEL_14;
LABEL_12:
  v81 = CFDictionaryContainsKey(a5, CFSTR("comn"));
LABEL_15:
  v19 = *(uint64_t (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v19 || (v98 = v19(Value, 0, 0), v98 < 1))
  {
    v16 = 0;
    Instance = 0;
    v18 = 0;
    goto LABEL_132;
  }
  v87 = v7;
  v92 = a5;
  v20 = 0;
  while (1)
  {
    v21 = *(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, const void **, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v21)
    {
      v16 = 0;
      Instance = 0;
      v18 = 4294954514;
      goto LABEL_131;
    }
    v22 = v21(Value, 0, 0, v20, v14, &v103, &v102);
    if ((_DWORD)v22)
    {
      v18 = v22;
      v16 = 0;
      Instance = 0;
      goto LABEL_131;
    }
    MEMORY[0x19402F294](&sourceIndexPairGetTypeID_sRegisterSourceIndexPairOnce, registerSourceIndexPair);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    Instance[2] = Value;
    Instance[3] = v20;
    v23 = CFDictionaryGetValue(v102, CFSTR("keyspace"));
    v24 = CFDictionaryGetValue(v102, CFSTR("key"));
    v16 = 0;
    if (v24)
    {
      if (v23 && v103 && v102)
        break;
    }
LABEL_78:
    if (v100)
    {
      CFRelease(v100);
      v100 = 0;
    }
    if (v103)
    {
      CFRelease(v103);
      v103 = 0;
    }
    if (v102)
    {
      CFRelease(v102);
      v102 = 0;
    }
    CFRelease(Instance);
    if (v16)
      CFRelease(v16);
    if (v98 == ++v20)
    {
      v16 = 0;
      Instance = 0;
      v18 = 0;
LABEL_131:
      a5 = v92;
      v7 = v87;
      goto LABEL_132;
    }
  }
  v25 = v24;
  v26 = v101;
  if (!CFEqual(v101, CFSTR("com.apple.quicktime.udta")) && !CFEqual(v26, CFSTR("org.mp4ra")))
    goto LABEL_31;
  if (CFEqual(v25, CFSTR("meta")))
  {
    if (!CFEqual(v23, CFSTR("itlk")))
      goto LABEL_77;
    v27 = 1;
    goto LABEL_33;
  }
  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(v25))
  {
    LODWORD(valuePtr[0]) = 0;
    CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt32Type, valuePtr);
    v27 = LODWORD(valuePtr[0]) == 1835365473;
  }
  else
  {
LABEL_31:
    v27 = 0;
  }
  if (!CFEqual(v23, CFSTR("itlk")))
  {
    if (v27)
      goto LABEL_77;
    goto LABEL_34;
  }
LABEL_33:
  if (CFEqual(v25, CFSTR("com.apple.iTunes.iTunSMPB")) | v27)
    goto LABEL_77;
LABEL_34:
  if (theArray)
  {
    v111.location = 0;
    v111.length = range;
    v29 = CFArrayContainsValue(theArray, v111, v25) != 0;
LABEL_40:
    if (a7)
      goto LABEL_41;
    if (v29)
      goto LABEL_48;
LABEL_77:
    v16 = 0;
    goto LABEL_78;
  }
  if (v89)
  {
    v112.location = 0;
    v112.length = (CFIndex)Count;
    v29 = CFArrayContainsValue(v89, v112, v25) == 0;
    goto LABEL_40;
  }
  if (!a7)
    goto LABEL_48;
  LOBYTE(v29) = 1;
LABEL_41:
  v16 = 0;
  if (CFSetContainsValue(a6, Instance) || !v29)
    goto LABEL_78;
LABEL_48:
  if (a3)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, v102);
    if (MutableCopy)
    {
      v31 = MutableCopy;
      CFDictionaryAddValue(MutableCopy, CFSTR("value"), v103);
      v32 = *(unsigned int (**)(uint64_t, __CFDictionary *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v32 || v32(a3, v31, v14, &v100))
      {
        CFRelease(v31);
        goto LABEL_77;
      }
      CFRelease(v31);
      if (v103)
      {
        CFRelease(v103);
        v103 = 0;
      }
      if (v102)
      {
        CFRelease(v102);
        v102 = 0;
      }
      v25 = CFDictionaryGetValue((CFDictionaryRef)v100, CFSTR("key"));
      v23 = CFDictionaryGetValue((CFDictionaryRef)v100, CFSTR("keyspace"));
      v33 = CFDictionaryGetValue((CFDictionaryRef)v100, CFSTR("value"));
      if (v33)
        v33 = CFRetain(v33);
      v102 = (const __CFDictionary *)v100;
      v103 = v33;
      v100 = 0;
    }
  }
  if (v92 && !doesWhitelistContainKeyspaceAndKey(v92, v81, v23, (const __CFNumber *)v25))
    goto LABEL_77;
  if (!CFEqual(v25, CFSTR("com.apple.quicktime.aime-data")))
  {
    v16 = 0;
    goto LABEL_122;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 712), CFSTR("com.apple.immersive-video"))
    && !CFEqual(*(CFTypeRef *)(a1 + 712), CFSTR("com.apple.quicktime-movie")))
  {
    goto LABEL_77;
  }
  v34 = v103;
  v109 = 0;
  valuePtr[0] = 0;
  v107 = 0;
  v108 = 0;
  v105 = 0;
  v106 = 0;
  dataPointerOut = 0;
  v84 = Value;
  v35 = FigMetadataReaderGetFigBaseObject(Value);
  v36 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v36)
    goto LABEL_99;
  v18 = v36(v35, CFSTR("containerByteStream"), v14, valuePtr);
  v16 = 0;
  v37 = valuePtr[0];
  if ((_DWORD)v18 || !valuePtr[0])
  {
    v79 = 1;
    v40 = 0;
    cf = 0;
    goto LABEL_102;
  }
  v38 = *(uint64_t (**)(CFTypeRef, _QWORD, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v38)
    goto LABEL_99;
  v18 = v38(v37, 0, &v105);
  v16 = 0;
  v39 = 1;
  if (!v34)
    goto LABEL_90;
  v40 = 0;
  v41 = 0;
  if ((_DWORD)v18)
    goto LABEL_101;
  v42 = CFGetTypeID(v34);
  if (v42 != CFDictionaryGetTypeID())
    goto LABEL_75;
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  v18 = 0;
  v16 = 0;
  v43 = v107;
  v39 = 1;
  if (v107 < 1)
  {
LABEL_90:
    v40 = 0;
    v41 = 0;
    goto LABEL_101;
  }
  v44 = v106;
  v40 = 0;
  v41 = 0;
  if (v106 < 1)
    goto LABEL_101;
  if (v106 + v107 > v105)
  {
LABEL_75:
    v16 = 0;
    v18 = 0;
    goto LABEL_76;
  }
  v45 = valuePtr[0];
  v46 = *(uint64_t (**)(CFTypeRef, CFIndex, uint64_t, OpaqueCMBlockBuffer **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
  if (!v46)
  {
LABEL_99:
    v16 = 0;
    v40 = 0;
    v41 = 0;
    v18 = 4294954514;
LABEL_100:
    v39 = 1;
    goto LABEL_101;
  }
  DataPointer = v46(v45, v44, v43, &v108, 0);
  if ((_DWORD)DataPointer
    || (DataPointer = CMBlockBufferGetDataPointer(v108, 0, 0, 0, &dataPointerOut), (_DWORD)DataPointer))
  {
LABEL_126:
    v18 = DataPointer;
    v16 = 0;
LABEL_76:
    v40 = 0;
    v41 = 0;
    goto LABEL_100;
  }
  v48 = CFDataCreate(v14, (const UInt8 *)dataPointerOut, v106);
  if (!v48)
  {
    DataPointer = FigSignalErrorAt();
    goto LABEL_126;
  }
  v49 = v48;
  v50 = FigCFDictionaryCreateMutableCopy();
  if (v50)
  {
    v51 = v50;
    FigCFDictionarySetValue();
    v52 = (const void *)v51;
    v18 = writeReferencedDataAndCopyUpdatedMetadataItem(a1, v51, &v109);
    if ((_DWORD)v18)
    {
      v16 = 0;
      v39 = 1;
    }
    else
    {
      v39 = 0;
      v16 = v109;
      v109 = 0;
    }
    v41 = v49;
    v40 = v52;
  }
  else
  {
    v18 = FigSignalErrorAt();
    v16 = 0;
    v40 = 0;
    v39 = 1;
    v41 = v49;
  }
LABEL_101:
  cf = v41;
  v79 = v39;
  v37 = valuePtr[0];
LABEL_102:
  if (v37)
  {
    v53 = v11;
    v54 = v40;
    CFRelease(v37);
    v40 = v54;
    v11 = v53;
  }
  if (v40)
    CFRelease(v40);
  Value = v84;
  if (v108)
    CFRelease(v108);
  if (cf)
    CFRelease(cf);
  if (v109)
    CFRelease(v109);
  if ((_DWORD)v18)
    goto LABEL_131;
  if (v79)
    goto LABEL_78;
  v55 = v102;
  v102 = v16;
  if (v16)
    CFRetain(v16);
  if (v55)
    CFRelease(v55);
  v56 = v103;
  v57 = CFDictionaryGetValue(v102, CFSTR("value"));
  v103 = v57;
  if (v57)
    CFRetain(v57);
  if (v56)
    CFRelease(v56);
LABEL_122:
  v59 = v102;
  v58 = v103;
  v60 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v60)
  {
    v18 = 4294954514;
    a5 = v92;
    v7 = v87;
    goto LABEL_197;
  }
  v61 = v60(v87, v23, v25, v58, v59);
  if (!(_DWORD)v61)
  {
    CFSetAddValue(a6, Instance);
    v11 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    goto LABEL_78;
  }
  v18 = v61;
  a5 = v92;
  v7 = v87;
LABEL_197:
  v11 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
LABEL_132:
  v9 = v86;
LABEL_133:
  if (v101)
    CFRelease(v101);
  if (v103)
    CFRelease(v103);
  if (v102)
    CFRelease(v102);
  if (v100)
    CFRelease(v100);
  if (Instance)
    CFRelease(Instance);
  if (v16)
    CFRelease(v16);
  if ((_DWORD)v18)
    return v18;
LABEL_146:
  v62 = CFDictionaryGetValue(v9, CFSTR("format"));
  v63 = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("items"));
  if (!v63)
    goto LABEL_192;
  v109 = 0;
  valuePtr[0] = 0;
  if (a5)
    v64 = CFDictionaryContainsKey(a5, CFSTR("comn"));
  else
    v64 = 0;
  v90 = CFArrayGetCount(v63);
  if (v90 < 1)
  {
    v18 = 0;
    goto LABEL_189;
  }
  v88 = v7;
  v93 = a5;
  v85 = Value;
  v65 = v11;
  v66 = 0;
  v99 = *v65;
  v67 = v90;
  while (2)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v63, v66);
    MEMORY[0x19402F294](&sourceIndexPairGetTypeID_sRegisterSourceIndexPairOnce, registerSourceIndexPair);
    v69 = (_QWORD *)_CFRuntimeCreateInstance();
    v69[2] = v63;
    v69[3] = v66;
    v70 = CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
    v71 = CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
    v72 = CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
    if (!v71)
      goto LABEL_178;
    if (!v70)
      goto LABEL_178;
    v73 = v72;
    if (!v72 || !v62 && !CFEqual(v70, CFSTR("comn")))
      goto LABEL_178;
    if (CFEqual(v70, CFSTR("itlk")) && CFEqual(v71, CFSTR("com.apple.iTunes.iTunSMPB"))
      || a7 && CFSetContainsValue(a6, v69))
    {
      goto LABEL_178;
    }
    if (a3)
    {
      v74 = *(unsigned int (**)(uint64_t, const __CFDictionary *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v74 && !v74(a3, ValueAtIndex, v99, valuePtr))
      {
        v71 = CFDictionaryGetValue((CFDictionaryRef)valuePtr[0], CFSTR("key"));
        v70 = CFDictionaryGetValue((CFDictionaryRef)valuePtr[0], CFSTR("keyspace"));
        v73 = CFDictionaryGetValue((CFDictionaryRef)valuePtr[0], CFSTR("value"));
        ValueAtIndex = (const __CFDictionary *)valuePtr[0];
        break;
      }
LABEL_178:
      if (valuePtr[0])
      {
        CFRelease(valuePtr[0]);
        valuePtr[0] = 0;
      }
      CFRelease(v69);
      if (v109)
      {
        CFRelease(v109);
        v109 = 0;
      }
      if (v67 == ++v66)
      {
        v69 = 0;
        v18 = 0;
        goto LABEL_184;
      }
      continue;
    }
    break;
  }
  if (v93 && !doesWhitelistContainKeyspaceAndKey(v93, v64, v70, (const __CFNumber *)v71))
    goto LABEL_178;
  FigCFDictionaryGetStringValue();
  if (!FigCFEqual())
  {
LABEL_173:
    v76 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v76)
    {
      v18 = 4294954514;
      goto LABEL_184;
    }
    v77 = v76(v88, v70, v71, v73, ValueAtIndex);
    v67 = v90;
    if ((_DWORD)v77 != -12588)
    {
      v18 = v77;
      if ((_DWORD)v77 != -12583)
      {
        if ((_DWORD)v77)
          goto LABEL_184;
        CFSetAddValue(a6, v69);
      }
    }
    goto LABEL_178;
  }
  if (!CFEqual(v71, CFSTR("com.apple.quicktime.aime-data"))
    || !CFEqual(*(CFTypeRef *)(a1 + 712), CFSTR("com.apple.immersive-video"))
    && !CFEqual(*(CFTypeRef *)(a1 + 712), CFSTR("com.apple.quicktime-movie")))
  {
    goto LABEL_178;
  }
  v75 = writeReferencedDataAndCopyUpdatedMetadataItem(a1, (uint64_t)ValueAtIndex, &v109);
  if (!(_DWORD)v75)
  {
    ValueAtIndex = v109;
    if (!v109)
      goto LABEL_178;
    goto LABEL_173;
  }
  v18 = v75;
LABEL_184:
  Value = v85;
  if (valuePtr[0])
    CFRelease(valuePtr[0]);
  if (v69)
    CFRelease(v69);
LABEL_189:
  if (v109)
    CFRelease(v109);
  if (!(_DWORD)v18)
  {
LABEL_192:
    if (Value | (unint64_t)v63)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return v18;
}

uint64_t doesWhitelistContainKeyspaceAndKey(const __CFDictionary *a1, uint64_t a2, const void *a3, const __CFNumber *a4)
{
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  CFStringRef v12;
  const __CFString *CommonKey;
  char cStr[4];
  char v16;
  unsigned int valuePtr;
  CFRange v18;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a3);
  if (Value)
  {
    v9 = Value;
    v10 = CFGetTypeID(Value);
    if (v10 != CFArrayGetTypeID())
      return 0;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a4))
    {
      valuePtr = 0;
      CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
      *(_DWORD *)cStr = bswap32(valuePtr);
      v16 = 0;
      v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
      a4 = (const __CFNumber *)v12;
    }
    else
    {
      v12 = 0;
    }
    v18.length = CFArrayGetCount(v9);
    v18.location = 0;
    if (CFArrayContainsValue(v9, v18, a4))
    {
      a2 = 1;
      if (!v12)
        return a2;
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
  }
  if ((_DWORD)a2)
  {
    if (!FigCFEqual())
    {
      CommonKey = FigMetadataGetCommonKey(a3, (const __CFString *)a4);
      if (CommonKey)
      {
        a2 = doesWhitelistContainKeyspaceAndKey(a1, a2, CFSTR("comn"), CommonKey);
        if (!v12)
          return a2;
        goto LABEL_14;
      }
    }
    a2 = 0;
  }
  if (v12)
LABEL_14:
    CFRelease(v12);
  return a2;
}

uint64_t registerSourceIndexPair()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sSourceIndexPairID = result;
  return result;
}

BOOL sourceIndexPair_equal(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
}

uint64_t sourceIndexPair_hash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) ^ *(_QWORD *)(a1 + 16);
}

CFStringRef sourceIndexPair_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a1)
    return CFStringCreateWithFormat(v2, 0, CFSTR("[SourceIndexPair %p] arraySource: %p index: %ld"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    return CFStringCreateWithFormat(v2, 0, CFSTR("[SourceIndexPair %p]"), 0);
}

uint64_t writeReferencedDataAndCopyUpdatedMetadataItem(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  const __CFData *DataValue;
  const __CFAllocator *v6;
  uint64_t BlockBufferWithCFDataNoCopy;
  __CFDictionary *MutableCopy;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;
  void *values;

  cf = 0;
  values = 0;
  v13 = 0;
  DataValue = (const __CFData *)FigCFDictionaryGetDataValue();
  if (!DataValue)
  {
    BlockBufferWithCFDataNoCopy = FigSignalErrorAt();
LABEL_17:
    v11 = BlockBufferWithCFDataNoCopy;
    MutableCopy = 0;
    goto LABEL_8;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataGetLength(DataValue);
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
    goto LABEL_17;
  BlockBufferWithCFDataNoCopy = MovieSampleDataWriterAppendBlockBuffer(*(uint64_t **)(a1 + 744), (OpaqueCMBlockBuffer *)cf, &v13);
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
    goto LABEL_17;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy
    && (values = (void *)FigCFNumberCreateUInt64()) != 0
    && (v9 = CFDictionaryCreate(v6, (const void **)&kFigMetadataItemStorageLocationKey_ReferenceByteOffset, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v10 = v9;
    CFDictionarySetValue(MutableCopy, CFSTR("storageLocation"), v9);
    *a3 = MutableCopy;
    CFRelease(v10);
    MutableCopy = 0;
    v11 = 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (values)
    CFRelease(values);
  return v11;
}

uint64_t appendBBufFromMetadataSerializerToBlockBuffer(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t (*v4)(uint64_t, CMBlockBufferRef *);
  uint64_t v5;
  CMBlockBufferRef v6;
  BOOL v7;
  uint64_t appended;
  CMBlockBufferRef targetBBuf;

  targetBBuf = 0;
  v4 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (!v4)
    return 4294954514;
  v5 = v4(a1, &targetBBuf);
  v6 = targetBBuf;
  if ((_DWORD)v5)
    v7 = 1;
  else
    v7 = targetBBuf == 0;
  if (!v7)
  {
    appended = CMBlockBufferAppendBufferReference(a2, targetBBuf, 0, 0, 0);
    v6 = targetBBuf;
    if (!targetBBuf)
      return appended;
    goto LABEL_10;
  }
  appended = v5;
  if (targetBBuf)
LABEL_10:
    CFRelease(v6);
  return appended;
}

void transferTrackMetadata(uint64_t a1, CFDictionaryRef theDict, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  const void *Value;
  const __CFString *v9;
  const void *v10;
  CFIndex Count;
  CFIndex v12;
  const __CFSet *Mutable;
  CFIndex v14;
  const __CFString *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  const __CFString *v20;
  const void *FigMetadataWriter;
  _BOOL4 v23;
  const __CFAllocator *allocator;
  uint64_t *v26;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef cf1;

  v4 = *(_QWORD *)(a1 + 16);
  theArray = 0;
  cf1 = 0;
  cf = 0;
  if (!theDict)
    goto LABEL_54;
  v5 = a3;
  if (!a3)
  {
    FigSignalErrorAt();
    goto LABEL_56;
  }
  if (!a4)
    goto LABEL_54;
  if (CFDictionaryGetValue(theDict, CFSTR("items")))
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("format"));
    if (Value)
      v9 = (const __CFString *)CFRetain(Value);
    else
      v9 = 0;
    cf1 = v9;
    copyMetadataDestinationFormat(v4, v9, &theArray);
    goto LABEL_12;
  }
  v10 = CFDictionaryGetValue(theDict, CFSTR("MetadataReader"));
  if (!v10)
  {
LABEL_54:
    FigSignalErrorAt();
    goto LABEL_55;
  }
  if (copyMetadataSourceAndDestinationFormats(v4, (uint64_t)v10, &cf1, &theArray))
    goto LABEL_55;
LABEL_12:
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_55:
    v5 = 0;
LABEL_56:
    Mutable = 0;
    goto LABEL_57;
  }
  v12 = Count;
  v26 = v5;
  Mutable = 0;
  v14 = 0;
  v5 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v5)
      CFRelease(v5);
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v14);
    if (cf1 && !CFEqual(cf1, ValueAtIndex) && createMetadataConverter(v4, cf1, ValueAtIndex, &cf))
    {
LABEL_31:
      v5 = 0;
      goto LABEL_51;
    }
    if (CFEqual(ValueAtIndex, CFSTR("com.apple.quicktime.udta")))
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 684) & 1) != 0)
        goto LABEL_36;
      goto LABEL_25;
    }
    if (CFEqual(ValueAtIndex, CFSTR("org.mp4ra")))
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 684) & 1) == 0)
        goto LABEL_36;
LABEL_25:
      v16 = *v26;
      if (*v26)
        break;
      v17 = (uint64_t)allocator;
      v18 = v26;
      v19 = (_QWORD *)a1;
      v20 = ValueAtIndex;
      goto LABEL_27;
    }
    if (!CFEqual(ValueAtIndex, CFSTR("com.apple.quicktime.mdta")))
      goto LABEL_36;
    v16 = *a4;
    if (*a4)
      break;
    v17 = (uint64_t)allocator;
    v19 = (_QWORD *)a1;
    v20 = ValueAtIndex;
    v18 = a4;
LABEL_27:
    if (copyTrackMetadataSerializer(v17, v19, v20, v18))
      goto LABEL_31;
    v16 = *v18;
    if (*v18)
      break;
LABEL_36:
    v5 = 0;
    if (!FigSignalErrorAt())
      goto LABEL_39;
LABEL_51:
    if (v12 == ++v14)
      goto LABEL_57;
  }
  FigMetadataWriter = (const void *)FigMetadataSerializerGetFigMetadataWriter(v16);
  if (FigMetadataWriter)
    v5 = (uint64_t *)CFRetain(FigMetadataWriter);
  else
    v5 = 0;
LABEL_39:
  v23 = (*(_BYTE *)(v4 + 684) & 4) == 0 || ValueAtIndex != CFSTR("com.apple.itunes");
  if (cf1 && CFEqual(cf1, ValueAtIndex))
    v23 = 0;
  if (Mutable || (Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0])) != 0)
  {
    if (transferMetadata(v4, theDict, (uint64_t)cf, (uint64_t)v5, *(const __CFDictionary **)(a1 + 576), Mutable, v23))goto LABEL_57;
    goto LABEL_51;
  }
  FigSignalErrorAt();
LABEL_57:
  if (cf1)
    CFRelease(cf1);
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t copyTrackMetadataSerializer(uint64_t a1, _QWORD *a2, const void *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  if (!a4)
    return FigSignalErrorAt();
  result = getTrackMetadataSerializer(a1, a2, a3, &v11);
  if (!(_DWORD)result)
  {
    v7 = v11;
    if (v11)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
      if (v8)
      {
        result = v8(a1, v7, &v10);
        if ((_DWORD)result)
        {
          v9 = result;
          if (v10)
            FigMetadataSerializerRelease(v10);
          return v9;
        }
        else
        {
          *a4 = v10;
        }
      }
      else
      {
        return 4294954514;
      }
    }
  }
  return result;
}

uint64_t getTrackMetadataSerializer(uint64_t a1, _QWORD *a2, CFTypeRef cf1, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;

  if (!cf1 || !a4)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta")))
  {
    if ((*(_BYTE *)(a2[2] + 684) & 1) == 0)
    {
      v8 = a2[69];
      if (!v8)
      {
        v9 = a2 + 69;
        result = FigMetadataSerializerCreateForQuickTimeUserData(a1, v9);
        if ((_DWORD)result)
          return result;
LABEL_17:
        v8 = *v9;
        goto LABEL_18;
      }
      goto LABEL_18;
    }
    return 0;
  }
  if (CFEqual(cf1, CFSTR("org.mp4ra")))
  {
    if ((*(_BYTE *)(a2[2] + 684) & 1) != 0)
    {
      v8 = a2[69];
      if (!v8)
      {
        v9 = a2 + 69;
        result = FigMetadataSerializerCreateForISOUserData(a1, v9);
        if ((_DWORD)result)
          return result;
        goto LABEL_17;
      }
      goto LABEL_18;
    }
    return 0;
  }
  if (!CFEqual(cf1, CFSTR("com.apple.quicktime.mdta")))
    return FigSignalErrorAt();
  v8 = a2[68];
  if (!v8)
  {
    v9 = a2 + 68;
    result = FigMetadataSerializerCreateForQuickTimeMetadata(a1, v9);
    if ((_DWORD)result)
      return result;
    goto LABEL_17;
  }
LABEL_18:
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t setTrackReferences(uint64_t *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t Count;
  unint64_t v7;
  const __CFAllocator *v9;
  void *v10;
  void *v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  CFIndex v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *allocator;

  v4 = MovieInformationRemoveAllTrackReferences(a1);
  v5 = v4;
  if (a2 && !(_DWORD)v4)
  {
    Count = CFDictionaryGetCount(a2);
    if (Count)
    {
      v7 = Count;
      if (Count >> 61)
        return FigSignalErrorAt();
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8 * Count, 0);
      if (!v10)
        return FigSignalErrorAt();
      v11 = v10;
      v12 = (const void **)CFAllocatorAllocate(v9, 8 * v7, 0);
      if (!v12)
      {
        v20 = FigSignalErrorAt();
        CFAllocatorDeallocate(v9, v11);
        return v20;
      }
      v13 = v12;
      allocator = v9;
      CFDictionaryGetKeysAndValues(a2, (const void **)v11, v12);
      v14 = 0;
      while (1)
      {
        if (v13[v14])
        {
          v15 = CFArrayGetCount((CFArrayRef)v13[v14]);
          if (v15 >= 1)
            break;
        }
LABEL_18:
        if (++v14 == v7)
        {
          v5 = 0;
          goto LABEL_22;
        }
      }
      v16 = v15;
      v17 = 0;
      while (FigCFArrayGetInt32AtIndex())
      {
        v18 = v17 + 1;
        if (!FigCFArrayGetInt32AtIndex())
          break;
        if (FigCFStringGetOSTypeValue())
        {
          v19 = MovieInformationAddOneTrackReference(a1, 0, 0, 0);
          if ((_DWORD)v19)
            goto LABEL_21;
        }
        v17 += 2;
        if (v18 + 1 >= v16)
          goto LABEL_18;
      }
      v19 = FigSignalErrorAt();
LABEL_21:
      v5 = v19;
LABEL_22:
      CFAllocatorDeallocate(allocator, v11);
      CFAllocatorDeallocate(allocator, v13);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t ffr_updateThreadPriority(uint64_t a1, int a2)
{
  CFNumberRef v2;
  uint64_t v3;
  int valuePtr;

  valuePtr = a2;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 552))
    return 0;
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v3 = FigThreadSetProperty();
  if (v2)
    CFRelease(v2);
  return v3;
}

uint64_t setPredeterminedSizes(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;

  v2 = a2;
  if (a2)
  {
    if (FigCFDictionaryGetInt64IfPresent() != 1 || FigCFDictionaryGetInt64IfPresent() != 1)
      return FigSignalErrorAt();
    a2 = 8;
    v2 = 1;
  }
  result = MovieSampleDataWriterSetPredeterminedMediaDataAtomSize(*(_QWORD *)(a1 + 744), a2);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    *(_BYTE *)(a1 + 448) = v2;
  }
  return result;
}

uint64_t setMediaDataCheckpointInterval(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;
  CMTime v5;
  CMTime time1;
  CMTime v7;

  v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (a2)
  {
    if (FigCFDictionaryGetCMTimeIfPresent() != 1)
      return FigSignalErrorAt();
    if ((v7.flags & 1) == 0)
      return FigSignalErrorAt();
    time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v5 = v7;
    if ((CMTimeCompare(&time1, &v5) & 0x80000000) == 0)
      return FigSignalErrorAt();
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  result = 0;
  *(CMTime *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 330) = v3;
  return result;
}

uint64_t figMovieWriter_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, CFMutableArrayRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t TrackInfoForTrackID;
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  __int128 *v16;
  CFNumberType v17;
  __CFArray *SInt32;
  uint64_t SettingsAsDictionary;
  __CFArray *v20;
  const void *v21;
  uint64_t PreferredChunkAlignment;
  __int16 AlternateGroupID;
  int IsEnabled;
  const void **v25;
  const void **v26;
  const void *v27;
  const __CFDictionary *v28;
  int IsExcludedFromAutoSelection;
  int v30;
  __int128 v31;
  __int128 v32;
  int v33;
  float v34;
  CMTime time;
  uint64_t v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (!DerivedStorage || *(_BYTE *)(DerivedStorage + 335))
    return FigSignalErrorAt();
  v36 = 0;
  TrackInfoForTrackID = getTrackInfoForTrackID(DerivedStorage, a2, &v36);
  if ((_DWORD)TrackInfoForTrackID)
    return TrackInfoForTrackID;
  v13 = v36;
  v14 = *(_QWORD *)(v36 + 736);
  if (CFEqual(CFSTR("MediaTimeScale"), a3))
  {
    LODWORD(v31) = *(_DWORD *)(v13 + 104);
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = &v31;
LABEL_9:
    v17 = kCFNumberSInt32Type;
LABEL_10:
    SInt32 = CFNumberCreate(v15, v17, v16);
LABEL_11:
    TrackInfoForTrackID = 0;
LABEL_12:
    *a5 = SInt32;
    return TrackInfoForTrackID;
  }
  if (CFEqual(CFSTR("QTLoadSettings"), a3))
  {
    *(_QWORD *)&v31 = 0;
    if (*(_BYTE *)(v13 + 40))
    {
      SettingsAsDictionary = copyFigTrackLoadSettingsAsDictionary(a4, v13 + 44, (CFDictionaryRef *)&v31);
      if (!(_DWORD)SettingsAsDictionary)
      {
        v20 = (__CFArray *)v31;
LABEL_27:
        TrackInfoForTrackID = 0;
        *a5 = v20;
        return TrackInfoForTrackID;
      }
      return SettingsAsDictionary;
    }
LABEL_26:
    v20 = 0;
    goto LABEL_27;
  }
  if (CFEqual(CFSTR("MediaDataPrecedence"), a3))
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = (__int128 *)(v13 + 100);
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("InterleavingAdvance"), a3))
  {
    v31 = *(_OWORD *)(v13 + 108);
    *(_QWORD *)&v32 = *(_QWORD *)(v13 + 124);
    SInt32 = CMTimeCopyAsDictionary((CMTime *)&v31, a4);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("InterleavingOrder"), a3))
  {
    SInt32 = (__CFArray *)FigCFNumberCreateSInt32();
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a3))
  {
    v21 = *(const void **)(v13 + 608);
    if (v21)
    {
      CFRetain(v21);
      v20 = *(__CFArray **)(v13 + 608);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (CFEqual(CFSTR("PreferredChunkAlignment"), a3))
  {
    LODWORD(v31) = 0;
    PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkAlignment(*(_QWORD *)(v10 + 744), *(_QWORD *)(v13 + 760), &v31);
LABEL_33:
    TrackInfoForTrackID = PreferredChunkAlignment;
    if ((_DWORD)PreferredChunkAlignment)
      return TrackInfoForTrackID;
    SInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v31);
    goto LABEL_12;
  }
  if (CFEqual(CFSTR("PreferredChunkSize"), a3))
  {
    LODWORD(v31) = 0;
    PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkSize(*(_QWORD *)(v10 + 744), *(_QWORD *)(v13 + 760), &v31);
    goto LABEL_33;
  }
  if (CFEqual(CFSTR("PreferredChunkDuration"), a3))
  {
    v31 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&v32 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    TrackInfoForTrackID = MovieSampleDataWriterTrackGetPreferredChunkDuration(*(_QWORD *)(v10 + 744), *(_QWORD *)(v13 + 760), (uint64_t)&v31);
    if ((_DWORD)TrackInfoForTrackID)
      return TrackInfoForTrackID;
    *(_OWORD *)&time.value = v31;
    time.epoch = v32;
    SInt32 = CMTimeCopyAsDictionary(&time, a4);
    goto LABEL_12;
  }
  if (CFEqual(CFSTR("AlternateGroupID"), a3))
  {
    AlternateGroupID = MovieTrackGetAlternateGroupID(v14);
LABEL_42:
    LOWORD(v31) = AlternateGroupID;
LABEL_43:
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = &v31;
    v17 = kCFNumberSInt16Type;
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("DefaultAlternateGroupID"), a3))
  {
    AlternateGroupID = MovieTrackGetDefaultAlternateGroupID(v14);
    goto LABEL_42;
  }
  if (CFEqual(CFSTR("ProvisionalAlternateGroupID"), a3))
  {
    LOWORD(v31) = 0;
    if (MovieTrackGetProvisionalAlternateGroupID(v14, &v31))
      goto LABEL_43;
LABEL_46:
    SInt32 = 0;
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("TrackVolume"), a3))
  {
    if (*(_DWORD *)v13 != 1936684398)
      return FigSignalErrorAt();
    LODWORD(v31) = MovieTrackGetVolume(v14);
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = &v31;
    v17 = kCFNumberFloat32Type;
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("DefaultEditList"), a3))
    return createDefaultTrackEditSegmentArray(a4, v13, a5);
  if (CFEqual(CFSTR("EditList"), a3))
  {
    SInt32 = *(__CFArray **)(v13 + 400);
    if (!SInt32)
      goto LABEL_11;
    goto LABEL_69;
  }
  if (CFEqual(CFSTR("LanguageTag"), a3))
  {
    SInt32 = *(__CFArray **)(v13 + 408);
    if (!SInt32)
      goto LABEL_11;
    goto LABEL_69;
  }
  if (CFEqual(CFSTR("ExtendedLanguageTag"), a3))
  {
    SInt32 = *(__CFArray **)(v13 + 416);
    if (!SInt32)
      goto LABEL_11;
    goto LABEL_69;
  }
  if (CFEqual(CFSTR("EnableTrack"), a3))
  {
    IsEnabled = MovieTrackIsEnabled(v14);
    v25 = (const void **)MEMORY[0x1E0C9AE50];
    if (!IsEnabled)
      v25 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_68:
    SInt32 = (__CFArray *)*v25;
LABEL_69:
    SInt32 = (__CFArray *)CFRetain(SInt32);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("InterleaveTrack"), a3))
  {
    v25 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(v13 + 352))
      v25 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_68;
  }
  if (CFEqual(CFSTR("TrackDimensions"), a3))
  {
    LODWORD(v31) = 0;
    LODWORD(time.value) = 0;
    MovieTrackGetSpatialInformation(v14, &v31, &time, 0);
    return copyDimensionsAsDictionary(a4, a5, *(float *)&v31, *(float *)&time.value);
  }
  if (CFEqual(CFSTR("CleanApertureDimensions"), a3))
  {
    *(_QWORD *)&v31 = 0;
    if (*(_BYTE *)(v13 + 34))
    {
      v34 = 0.0;
      LODWORD(time.value) = 0;
      MovieTrackGetCleanApertureDimensions(v14, (float *)&time, &v34);
LABEL_84:
      TrackInfoForTrackID = copyDimensionsAsDictionary(a4, (CFDictionaryRef *)&v31, *(float *)&time.value, v34);
      if ((_DWORD)TrackInfoForTrackID)
        return TrackInfoForTrackID;
      SInt32 = (__CFArray *)v31;
      goto LABEL_11;
    }
    if (*(_BYTE *)(v13 + 33))
      goto LABEL_46;
    goto LABEL_91;
  }
  if (CFEqual(CFSTR("ProductionApertureDimensions"), a3))
  {
    *(_QWORD *)&v31 = 0;
    if (*(_BYTE *)(v13 + 36))
    {
      v34 = 0.0;
      LODWORD(time.value) = 0;
      MovieTrackGetProductionApertureDimensions(v14, (float *)&time, &v34);
      goto LABEL_84;
    }
    if (*(_BYTE *)(v13 + 35))
      goto LABEL_46;
    goto LABEL_91;
  }
  if (CFEqual(CFSTR("EncodedPixelsDimensions"), a3))
  {
    *(_QWORD *)&v31 = 0;
    if (*(_BYTE *)(v13 + 38))
    {
      v34 = 0.0;
      LODWORD(time.value) = 0;
      MovieTrackGetEncodedPixelsDimensions(v14, (float *)&time, &v34);
      goto LABEL_84;
    }
    if (*(_BYTE *)(v13 + 37))
      goto LABEL_46;
LABEL_91:
    v26 = (const void **)kFigFormatWriter_NoDimensions;
    goto LABEL_92;
  }
  if (CFEqual(CFSTR("TrackMatrix"), a3))
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    MovieTrackGetSpatialInformation(v14, 0, 0, (uint64_t)&v31);
    return copyFigMatrixAsArray(a4, (uint64_t)&v31, a5);
  }
  if (CFEqual(CFSTR("FormatDescriptionArray"), a3))
  {
    SInt32 = MovieTrackCopyFormatDescriptionArray(v14);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("TrackMetadataWriters"), a3))
    return createTrackMetadataWritersDictionary(a4, (_QWORD *)v13, a5);
  if (CFEqual(CFSTR("TrackMetadataToTransfer"), a3))
  {
    v27 = *(const void **)(v13 + 560);
    if (!v27)
      goto LABEL_107;
LABEL_103:
    SInt32 = (__CFArray *)CFPropertyListCreateDeepCopy(a4, v27, 0);
    goto LABEL_11;
  }
  if (CFEqual(CFSTR("TrackMetadataToWrite"), a3))
  {
    v27 = *(const void **)(v13 + 568);
    if (v27)
      goto LABEL_103;
LABEL_107:
    TrackInfoForTrackID = 0;
    *a5 = 0;
    return TrackInfoForTrackID;
  }
  if (CFEqual(CFSTR("TrackMetadataWhitelist"), a3))
  {
    v28 = *(const __CFDictionary **)(v13 + 576);
    if (v28)
    {
      SInt32 = CFDictionaryCreateCopy(a4, v28);
      goto LABEL_11;
    }
    goto LABEL_107;
  }
  if (CFEqual(CFSTR("ExcludeFromAutoSelection"), a3))
  {
    IsExcludedFromAutoSelection = MovieTrackIsExcludedFromAutoSelection(v14);
    v26 = (const void **)MEMORY[0x1E0C9AE50];
    if (!IsExcludedFromAutoSelection)
      v26 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_92;
  }
  if (CFEqual(CFSTR("WriteCompactSampleSizeIfPossible"), a3))
  {
    v26 = (const void **)MEMORY[0x1E0C9AE50];
    v30 = *(unsigned __int8 *)(v13 + 584);
    goto LABEL_116;
  }
  if (CFEqual(CFSTR("WriteQTSoundSampleTableLieIfPossible"), a3))
  {
    v26 = (const void **)MEMORY[0x1E0C9AE50];
    v30 = *(unsigned __int8 *)(v13 + 585);
LABEL_116:
    if (!v30)
      v26 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_92:
    SInt32 = (__CFArray *)*v26;
    if (!*v26)
      goto LABEL_11;
    goto LABEL_69;
  }
  if (CFEqual(CFSTR("Layer"), a3))
  {
    AlternateGroupID = MovieTrackGetLayer(v14);
    goto LABEL_42;
  }
  if (CFEqual(CFSTR("SampleReferenceBaseURL"), a3))
  {
    SInt32 = *(__CFArray **)(v13 + 456);
    if (!SInt32)
      goto LABEL_11;
    goto LABEL_69;
  }
  if (CFEqual(CFSTR("NegativeCompositionOffsetsInISOFilePolicy"), a3))
    return copyNegativeCompositionOffsetsInISOFilePolicy(v10, v13, a5);
  if (CFEqual(CFSTR("HEVCSyncSampleNALUnitTypes"), a3))
    return MovieTrackCopySyncSampleCombinations(a4, *(_QWORD *)(v13 + 736), a5);
  if (CFEqual(CFSTR("HEVCTemporalLevelInfoCombinations"), a3))
    return MovieTrackCopyTemporalLevelCombinations(a4, *(_QWORD *)(v13 + 736), a5);
  if (!CFEqual(CFSTR("SampleGroupDescriptions"), a3))
    return 4294954666;
  return MovieTrackCopySampleGroupDescriptionDictionary(a4, *(_QWORD *)(v13 + 736), a5);
}

uint64_t figMovieWriter_WriteHeaderToByteStream(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  uint64_t appended;
  const __CFNumber ***v11;
  int v12;
  uint64_t v13;
  uint64_t MovieAtomBBuf;
  CMBlockBufferRef v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t *);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD);
  CMBlockBufferRef v27;
  CMBlockBufferRef theBuffer;
  uint64_t v29;
  int valuePtr;
  uint64_t v31;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  theBuffer = 0;
  v29 = 0;
  v27 = 0;
  if (!a2)
  {
    appended = FigSignalErrorAt();
    goto LABEL_9;
  }
  v6 = DerivedStorage;
  if (a3)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("ByteOffsetToAddToAllSampleOffsets"));
    if (Value)
    {
      v8 = Value;
      v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
        appended = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(v6 + 744));
        if (!(_DWORD)appended)
        {
          v11 = (const __CFNumber ***)(v6 + 744);
          v12 = valuePtr;
          goto LABEL_11;
        }
LABEL_9:
        v13 = appended;
        goto LABEL_39;
      }
    }
  }
  appended = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(v6 + 744));
  if ((_DWORD)appended)
    goto LABEL_9;
  v31 = 0;
  appended = calculateHeaderByteCount(v6, (unint64_t *)&v31);
  if ((_DWORD)appended)
    goto LABEL_9;
  v11 = (const __CFNumber ***)(v6 + 744);
  v12 = v31;
  valuePtr = v31;
LABEL_11:
  appended = MovieHeaderMakerAddByteCountToChunkOffsets(*(_QWORD *)(v6 + 736), v12);
  if ((_DWORD)appended)
    goto LABEL_9;
  if (*(_DWORD *)(v6 + 320) == 3)
  {
    appended = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*v11, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &theBuffer);
    if ((_DWORD)appended)
      goto LABEL_9;
    CMBlockBufferGetDataLength(theBuffer);
    v31 = 0;
    appended = CMByteStreamAppendBlockBuffer();
    if ((_DWORD)appended)
      goto LABEL_9;
  }
  MovieAtomBBuf = createMovieAtomBBuf(v6, 0, 0, (CFTypeRef *)&v27);
  v15 = v27;
  if ((_DWORD)MovieAtomBBuf)
    goto LABEL_23;
  CMBlockBufferGetDataLength(v27);
  v31 = 0;
  MovieAtomBBuf = CMByteStreamAppendBlockBuffer();
  if ((_DWORD)MovieAtomBBuf)
    goto LABEL_23;
  v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v16)
    goto LABEL_36;
  MovieAtomBBuf = v16(a2, 0, &v29);
  if ((_DWORD)MovieAtomBBuf)
  {
LABEL_23:
    v13 = MovieAtomBBuf;
    goto LABEL_37;
  }
  v17 = v29;
  v18 = valuePtr - v29;
  if (valuePtr == v29)
  {
LABEL_20:
    v13 = 0;
    goto LABEL_37;
  }
  v19 = v18 - 8;
  if (v18 < 8)
  {
LABEL_22:
    MovieAtomBBuf = FigSignalErrorAt();
    goto LABEL_23;
  }
  v31 = bswap32(v18) | 0x6565726600000000;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
  if (v20)
  {
    v13 = v20(a2, 8, v17, &v31, 0);
    if (!(_DWORD)v13)
    {
      if (!*(_QWORD *)(v6 + 472))
      {
        v21 = malloc_type_calloc(1uLL, 0x1000uLL, 0x35BF8B66uLL);
        *(_QWORD *)(v6 + 472) = v21;
        if (!v21)
          goto LABEL_22;
        *(_QWORD *)(v6 + 480) = 4096;
      }
      v22 = v17 + 8;
      while (v19)
      {
        v23 = *(_QWORD *)(v6 + 472);
        v24 = *(_QWORD *)(v6 + 480);
        v25 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 16);
        if (!v25)
          goto LABEL_36;
        if (v19 < v24)
          v24 = v19;
        MovieAtomBBuf = v25(a2, v24, v22, v23, 0);
        v19 -= v24;
        v22 += v24;
        if ((_DWORD)MovieAtomBBuf)
          goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  else
  {
LABEL_36:
    v13 = 4294954514;
  }
LABEL_37:
  if (v15)
    CFRelease(v15);
LABEL_39:
  if (theBuffer)
    CFRelease(theBuffer);
  return v13;
}

uint64_t figMovieWriter_CopyMovieHeaderAsBlockBuffer(uint64_t a1, uint64_t a2, CMBlockBufferRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t MovieAtomBBuf;
  CMBlockBufferRef v8;
  uint64_t appended;
  CMBlockBufferRef targetBBuf;
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  targetBBuf = 0;
  theBuffer = 0;
  if (*(_BYTE *)(DerivedStorage + 384) != 1 || !a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v5 = DerivedStorage;
  v6 = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*(const __CFNumber ***)(DerivedStorage + 744), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &theBuffer);
  if ((_DWORD)v6)
  {
LABEL_13:
    appended = v6;
    goto LABEL_9;
  }
  MovieAtomBBuf = createMovieAtomBBuf(v5, 1, 0, (CFTypeRef *)&targetBBuf);
  v8 = targetBBuf;
  if ((_DWORD)MovieAtomBBuf)
  {
    appended = MovieAtomBBuf;
    if (targetBBuf)
LABEL_8:
      CFRelease(v8);
  }
  else
  {
    appended = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0);
    if (!(_DWORD)appended)
    {
      *a3 = theBuffer;
      theBuffer = 0;
    }
    if (v8)
      goto LABEL_8;
  }
LABEL_9:
  if (theBuffer)
    CFRelease(theBuffer);
  return appended;
}

uint64_t editBuilderCreate(const __CFAllocator *a1, _QWORD *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  uint64_t v9;
  uint64_t v10;

  v4 = CFAllocatorAllocate(a1, 32, 0);
  v5 = v4;
  if (!v4)
    goto LABEL_10;
  *v4 = 0u;
  v4[1] = 0u;
  if (a1)
    v6 = CFRetain(a1);
  else
    v6 = 0;
  *v5 = v6;
  v7 = editMediaTimeCreate(a1, v5 + 2);
  if ((_DWORD)v7)
    goto LABEL_11;
  Mutable = CFArrayCreateMutable(a1, 0, 0);
  v5[3] = Mutable;
  if (!Mutable || (v9 = editBoundaryDetectorCreate(a1, v5 + 1), !v5[1]))
  {
LABEL_10:
    v7 = FigSignalErrorAt();
LABEL_11:
    v10 = v7;
    goto LABEL_9;
  }
  v10 = v9;
  *a2 = v5;
  v5 = 0;
LABEL_9:
  editBuilderRelease(v5);
  return v10;
}

uint64_t editBoundaryDetectorCreate(const __CFAllocator *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;

  v4 = CFAllocatorAllocate(a1, 24, 0);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  if (a1)
    v6 = CFRetain(a1);
  else
    v6 = 0;
  *v5 = v6;
  *((_DWORD *)v5 + 2) = 0;
  v5[2] = 0xBFF0000000000000;
  *a2 = v5;
  return 0;
}

uint64_t wakeupWritingThreadForEndOfDataReached(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (!*(_BYTE *)(v1 + 335))
  {
    if (*(_QWORD *)(v1 + 552))
      return FigSemaphoreSignal();
  }
  return result;
}

uint64_t wakeupWritingThreadForOverflow(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (!*(_BYTE *)(v1 + 335))
  {
    if (*(_QWORD *)(v1 + 552))
      return FigSemaphoreSignal();
  }
  return result;
}

uint64_t chunkCallback(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, const __CFArray *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  OpaqueCMBlockBuffer *ChunkOffsetTable;
  size_t DataLength;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char SampleAttachmentSync;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v31;
  CMTime time2;
  CMTime time1;
  __int128 v36;
  _BYTE v37[32];
  __int128 v38;
  CMTimeEpoch v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v13 = a6;
  v15 = a4;
  v17 = a1;
  v18 = *(_QWORD *)(a12 + 16);
  v42 = *MEMORY[0x1E0CA2E18];
  v43 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v40 = v42;
  v41 = v43;
  v19 = *(_QWORD *)(v18 + 752) + a2;
  if ((*(_BYTE *)(v18 + 384) || *(_BYTE *)(v18 + 329)) && !*(_BYTE *)(a12 + 905))
  {
    *(_OWORD *)(a12 + 816) = *(_OWORD *)a7;
    v23 = *(_OWORD *)(a7 + 16);
    v24 = *(_OWORD *)(a7 + 32);
    v25 = *(_OWORD *)(a7 + 48);
    *(_QWORD *)(a12 + 880) = *(_QWORD *)(a7 + 64);
    *(_OWORD *)(a12 + 848) = v24;
    *(_OWORD *)(a12 + 864) = v25;
    *(_OWORD *)(a12 + 832) = v23;
    *(_QWORD *)(a12 + 888) = v19;
    *(_QWORD *)(a12 + 896) = a3;
    v31 = a8;
    SampleAttachmentSync = isFirstSampleAttachmentSync(a10);
    v17 = a1;
    a8 = v31;
    v15 = a4;
    v13 = a6;
    *(_BYTE *)(a12 + 904) = SampleAttachmentSync;
    *(_BYTE *)(a12 + 905) = 1;
    if (*(_BYTE *)(v18 + 384))
    {
      if (*(_DWORD *)a12 == 1986618469)
      {
        *(_QWORD *)(v18 + 432) = v19 + a3;
        v27 = *(_OWORD *)(a7 + 24);
        *(_QWORD *)(v18 + 424) = *(_QWORD *)(a7 + 40);
        *(_OWORD *)(v18 + 408) = v27;
      }
      if ((FigCFEqual() || FigCFEqual())
        && !*(_BYTE *)(v18 + 534)
        && *(_BYTE *)(a12 + 904) != 1)
      {
        return FigSignalErrorAt();
      }
      v13 = a6;
      v15 = a4;
      a8 = v31;
      v17 = a1;
      if (*(_BYTE *)(a12 + 912))
      {
        v28 = *(_OWORD *)(a12 + 864);
        *(_OWORD *)&v37[16] = *(_OWORD *)(a12 + 848);
        v38 = v28;
        v39 = *(_QWORD *)(a12 + 880);
        v29 = *(_OWORD *)(a12 + 832);
        v36 = *(_OWORD *)(a12 + 816);
        *(_OWORD *)v37 = v29;
        time1 = *(CMTime *)&v37[8];
        *(_OWORD *)&time2.value = v28;
        time2.epoch = v39;
        if (CMTimeCompare(&time1, &time2))
          return FigSignalErrorAt();
        v13 = a6;
        v15 = a4;
        a8 = v31;
        v17 = a1;
      }
    }
  }
  result = MovieTrackAppendSampleInformation(*(_QWORD *)(v18 + 728), *(_QWORD *)(a12 + 736), v17, v19, v15, a5, v13, a7, a8, a9, a10, a11, (uint64_t)&v42, (uint64_t)&v40);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a12 + 348) += a5;
    ChunkOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetChunkOffsetTable(*(_QWORD *)(a12 + 736));
    DataLength = CMBlockBufferGetDataLength(ChunkOffsetTable);
    result = 0;
    *(_QWORD *)(a12 + 592) = DataLength;
  }
  return result;
}

uint64_t setNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2)
{
  int v4;

  if (FigCFEqual())
  {
    v4 = 0;
    return MovieHeaderMakerTrackSetNegativeCompositionOffsetsInISOFilePolicy(*(_QWORD *)(a1 + 736), *(_QWORD *)(a2 + 744), v4);
  }
  if (FigCFEqual())
  {
    v4 = 1;
    return MovieHeaderMakerTrackSetNegativeCompositionOffsetsInISOFilePolicy(*(_QWORD *)(a1 + 736), *(_QWORD *)(a2 + 744), v4);
  }
  if (FigCFEqual())
  {
    v4 = 2;
    return MovieHeaderMakerTrackSetNegativeCompositionOffsetsInISOFilePolicy(*(_QWORD *)(a1 + 736), *(_QWORD *)(a2 + 744), v4);
  }
  return FigSignalErrorAt();
}

uint64_t editMediaTimeCreate(const __CFAllocator *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  CFTypeRef v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = CFAllocatorAllocate(a1, 144, 0);
  if (v4)
  {
    v5 = v4;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    LOBYTE(result) = 0;
    *(_QWORD *)v5 = v6;
    *((_BYTE *)v5 + 8) = 0;
    *((_QWORD *)v5 + 14) = 0xBFF0000000000000;
    v8 = MEMORY[0x1E0CA2E18];
    v9 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)((char *)v5 + 12) = *MEMORY[0x1E0CA2E18];
    v10 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)((char *)v5 + 28) = v10;
    *(_OWORD *)((char *)v5 + 36) = v9;
    *(_QWORD *)((char *)v5 + 52) = v10;
    *(_OWORD *)((char *)v5 + 60) = v9;
    *(_QWORD *)((char *)v5 + 76) = v10;
    *(_QWORD *)((char *)v5 + 100) = v10;
    *(_OWORD *)((char *)v5 + 84) = v9;
    *((_QWORD *)v5 + 17) = v10;
    *(_OWORD *)((char *)v5 + 120) = v9;
    *a2 = v5;
  }
  else
  {
    LOBYTE(result) = FigSignalErrorAt();
  }
  return result;
}

CFTypeID getTrimDurationsAndSpeedMultiplierFromSbuf(void *a1, CMTime *a2, CMTime *a3, char *a4, double *a5)
{
  CMTimeEpoch v10;
  char v11;
  const opaqueCMFormatDescription *FormatDescription;
  CFTypeID result;
  double v14;
  const void *v15;
  CFTypeID TypeID;
  __int128 v17;
  CMTime time2;
  CMTime rhs;
  uint64_t valuePtr;
  CMTime lhs;
  CMTime v22;
  CMTime v23;
  CMTime v24;

  *(_OWORD *)&v24.value = *MEMORY[0x1E0CA2E68];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v24.epoch = v10;
  v17 = *(_OWORD *)&v24.value;
  *(_OWORD *)&v23.value = *(_OWORD *)&v24.value;
  v23.epoch = v10;
  valuePtr = 0x3FF0000000000000;
  getTrimDurationFromSampleBuffer(a1, (const __CFString *)*MEMORY[0x1E0CA2728], (uint64_t)&v24);
  getTrimDurationFromSampleBuffer(a1, (const __CFString *)*MEMORY[0x1E0CA2720], (uint64_t)&v23);
  lhs = v24;
  rhs = v23;
  CMTimeAdd(&v22, &lhs, &rhs);
  CMSampleBufferGetDuration(&lhs, (CMSampleBufferRef)a1);
  rhs = lhs;
  time2 = v22;
  if (CMTimeCompare(&rhs, &time2) <= 0)
  {
    rhs = lhs;
    time2 = v22;
    if (CMTimeCompare(&rhs, &time2) < 0)
    {
      FormatDescription = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a1);
      CMFormatDescriptionGetMediaType(FormatDescription);
    }
    v24 = v22;
    *(_OWORD *)&v23.value = v17;
    v23.epoch = v10;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  result = (CFTypeID)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2708], 0);
  v14 = 1.0;
  if (result)
  {
    v15 = (const void *)result;
    TypeID = CFNumberGetTypeID();
    result = CFGetTypeID(v15);
    if (TypeID == result)
    {
      result = CFNumberGetValue((CFNumberRef)v15, kCFNumberDoubleType, &valuePtr);
      v14 = *(double *)&valuePtr;
    }
  }
  *a2 = v24;
  *a3 = v23;
  *a5 = v14;
  if (a4)
    *a4 = v11;
  return result;
}

uint64_t editBoundaryDetectorDetectBoundary(uint64_t a1, int a2, int a3, int a4, double a5)
{
  int v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  double v9;

  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 1:
      if (a4)
        v5 = 3;
      else
        v5 = 2;
      if (a2)
        v5 = 1;
      LODWORD(v6) = 0;
      break;
    case 2:
      v7 = a3 != 0;
      if (a4)
        v5 = 3;
      else
        v5 = 2;
      goto LABEL_16;
    case 3:
      if (a4)
        v5 = 3;
      else
        v5 = 2;
      v7 = 1;
LABEL_16:
      if (a2)
      {
        v5 = 3;
        LODWORD(v6) = 0;
      }
      else
      {
        LODWORD(v6) = v7;
      }
      break;
    case 4:
      if (a4)
        v8 = 3;
      else
        v8 = 2;
      if (a2)
        v5 = 1;
      else
        v5 = v8;
      LODWORD(v6) = 1;
      break;
    default:
      v5 = 0;
      LODWORD(v6) = 0;
      break;
  }
  v9 = *(double *)(a1 + 16);
  if (v9 == a5 || v9 == -1.0)
    v6 = v6;
  else
    v6 = 1;
  *(_DWORD *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = a5;
  return v6;
}

CMTime *getTrimDurationFromSampleBuffer@<X0>(const void *a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  const __CFDictionary *v4;
  CMTime *result;
  uint64_t v6;
  CMTimeEpoch epoch;
  CMTime v8;

  v4 = (const __CFDictionary *)CMGetAttachment(a1, a2, 0);
  memset(&v8, 0, sizeof(v8));
  result = CMTimeMakeFromDictionary(&v8, v4);
  if ((v8.flags & 1) != 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)&v8.value;
    epoch = v8.epoch;
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)(a3 + 16) = epoch;
  return result;
}

double setTrackHeaderDataCompleteFlagIfCumulatedInterleavingDurationReachesCumulatedMovieFragmentDuration(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;
  _OWORD *v5;
  CMTime *v6;
  CMTime *v7;
  CMTime v8;
  CMTime lhs;
  CMTime time2;
  CMTime time1;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v2 + 329) || *(_BYTE *)(v2 + 330))
  {
    v3 = (_OWORD *)(a1 + 648);
    time1 = *(CMTime *)(a1 + 672);
    time2 = *(CMTime *)(a1 + 648);
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      v5 = (_OWORD *)(a1 + 672);
      *v3 = *(_OWORD *)(a1 + 672);
      *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 688);
      v6 = (CMTime *)MEMORY[0x1E0CA2E68];
      *(_BYTE *)(a1 + 601) = 1;
      time1 = *v6;
      if (*(_BYTE *)(v2 + 329))
      {
        v7 = (CMTime *)(v2 + 96);
      }
      else
      {
        if (!*(_BYTE *)(v2 + 330))
        {
LABEL_9:
          *(_OWORD *)&lhs.value = *v5;
          lhs.epoch = *(_QWORD *)(a1 + 688);
          v8 = time1;
          CMTimeAdd(&time2, &lhs, &v8);
          result = *(double *)&time2.value;
          *v5 = *(_OWORD *)&time2.value;
          *(_QWORD *)(a1 + 688) = time2.epoch;
          return result;
        }
        v7 = (CMTime *)(v2 + 144);
      }
      time1 = *v7;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t mergeTrackInfoLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  __int128 *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  CMTime time2;
  CMTime time1;

  v2 = a2;
  v3 = a1;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = a1 != 0;
  v5 = &v12;
  v12 = 0u;
  v13 = 0u;
  if (a1 && a2)
  {
    v5 = &v12;
    while (1)
    {
      v6 = *(_DWORD *)(v3 + 100);
      v7 = *(_DWORD *)(v2 + 100);
      if (v6 | v7)
      {
        if (v6 < v7)
          goto LABEL_9;
      }
      else
      {
        time1 = *(CMTime *)(v3 + 108);
        time2 = *(CMTime *)(v2 + 108);
        if (CMTimeCompare(&time1, &time2))
        {
          time1 = *(CMTime *)(v3 + 108);
          time2 = *(CMTime *)(v2 + 108);
          if (CMTimeCompare(&time1, &time2) <= 0)
            goto LABEL_9;
        }
        else
        {
          v9 = *(_DWORD *)(v3 + 132);
          v10 = *(_DWORD *)(v2 + 132);
          if (v9 == v10)
          {
            if (*(_BYTE *)(*(_QWORD *)(v3 + 16) + 18) && *(_DWORD *)v3 != 1986618469 && *(_DWORD *)v2 == 1986618469)
            {
LABEL_9:
              *((_QWORD *)v5 + 3) = v2;
              v8 = *(_QWORD *)(v2 + 24);
              goto LABEL_17;
            }
          }
          else if (v9 >= v10)
          {
            goto LABEL_9;
          }
        }
      }
      *((_QWORD *)v5 + 3) = v3;
      v8 = v2;
      v2 = v3;
      v3 = *(_QWORD *)(v3 + 24);
LABEL_17:
      v5 = (__int128 *)v2;
      v4 = v3 != 0;
      if (v3)
      {
        v2 = v8;
        if (v8)
          continue;
      }
      goto LABEL_21;
    }
  }
  v8 = a2;
LABEL_21:
  if (v4)
    v8 = v3;
  *((_QWORD *)v5 + 3) = v8;
  return *((_QWORD *)&v13 + 1);
}

void setWritingThreadErrorAndPostErrorOccurredNotification(uint64_t a1, int a2)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  CFDictionaryRef v4;
  void *values;

  if (!*(_DWORD *)(a1 + 680))
  {
    if (a2 == -16359)
      a2 = -12638;
    *(_DWORD *)(a1 + 680) = a2;
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values = (void *)FigCFNumberCreateSInt32();
    if (values)
    {
      v3 = CFDictionaryCreate(v2, (const void **)kFigFormatWriterNotificationParameter_OSStatus, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v3)
      {
        v4 = v3;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v4);
      }
      else
      {
        FigSignalErrorAt();
      }
      if (values)
        CFRelease(values);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t createBlockBufferByteStreamForMovieSampleDataWriter(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t WritableForBlockBuffer;
  void *v5;
  uint64_t v6;
  CMBlockBufferRef v7;
  CMBlockBufferRef v9;
  CFTypeRef cf;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = 0;
  cf = 0;
  v3 = CMBlockBufferCreateEmpty(v2, 0x40u, 0, &v9);
  if ((_DWORD)v3)
  {
    v6 = v3;
    goto LABEL_10;
  }
  WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
  v5 = (void *)cf;
  if ((_DWORD)WritableForBlockBuffer)
  {
    v6 = WritableForBlockBuffer;
    if (cf)
      CFRelease(cf);
LABEL_10:
    v7 = v9;
    if (!v9)
      return v6;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 440) = v9;
  v6 = MovieSampleDataWriterSetDefaultByteStream(*(_QWORD *)(a1 + 744), v5);
  if (v5)
  {
    v7 = (CMBlockBufferRef)v5;
LABEL_5:
    CFRelease(v7);
  }
  return v6;
}

uint64_t flushAllSampleBufferQueues(uint64_t a1)
{
  CMTime *value;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v10;
  char v11;

  value = *(CMTime **)(a1 + 504);
  if (!value)
    return 0;
  v3 = 1;
  while (1)
  {
    v11 = 0;
    do
    {
      v10 = 0;
      if (isReadyToWriteTrackHeaderWithNoSamples((uint64_t)value))
      {
        v4 = 6;
      }
      else if (reachedInterleavingPeriod((uint64_t)value))
      {
        v4 = 1;
      }
      else if (trackBufferQueueIsSampleAvailable((uint64_t)value))
      {
        v4 = 2;
      }
      else if (trackBufferQueueIsAtEndOfData((uint64_t)value))
      {
        v4 = 3;
      }
      else
      {
        v4 = 4;
      }
      v5 = handleWritingThreadEvent((uint64_t)value, v4, &v10, &v11);
      if (v10)
        v6 = 7;
      else
        v6 = 0;
      if ((_DWORD)v5)
        v6 = 8;
    }
    while (!v6);
    v7 = v5;
    if (v6 != 7)
      break;
    if (v11)
      setNextCumulatedInterleavingDuration(value);
    if (trackBufferQueueIsSampleAvailable((uint64_t)value) || (v8 = v3, value[13].epoch))
    {
      v8 = 0;
      v3 = 0;
    }
    if (value[1].value)
      value = (CMTime *)value[1].value;
    else
      value = *(CMTime **)(a1 + 496);
    if (value == *(CMTime **)(a1 + 504))
    {
      v3 = 1;
      if (v8)
      {
        *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
        return v7;
      }
    }
  }
  return v7;
}

const __CFArray *isReadyToWriteTrackHeaderWithNoSamples(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 16);
  if (v1[329] && v1[332] && !v1[352] && !*(_BYTE *)(a1 + 600))
    return doesTrackHaveFormatDescriptionAndNonZeroMediaTimeScale(a1);
  else
    return 0;
}

BOOL trackBufferQueueIsSampleAvailable(uint64_t a1)
{
  _BOOL8 result;
  opaqueCMSampleBuffer *Head;

  result = 1;
  if (!CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 616)))
  {
    Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 608));
    if (!Head || !CMSampleBufferDataIsReady(Head))
      return 0;
  }
  return result;
}

uint64_t trackBufferQueueIsAtEndOfData(uint64_t a1)
{
  uint64_t result;

  result = CMBufferQueueIsAtEndOfData(*(CMBufferQueueRef *)(a1 + 608));
  if ((_DWORD)result)
    return CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 616)) != 0;
  return result;
}

const __CFArray *doesTrackHaveFormatDescriptionAndNonZeroMediaTimeScale(uint64_t a1)
{
  const __CFArray *result;

  result = MovieTrackGetNumFormatDescriptions(*(_QWORD *)(a1 + 736));
  if ((_DWORD)result)
    return (const __CFArray *)(MovieTrackGetMediaTimeScale(*(_QWORD *)(a1 + 736)) != 0);
  return result;
}

uint64_t setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(uint64_t a1)
{
  uint64_t v1;
  int v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t result;
  const void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, CMTime *);
  uint64_t v10;
  CMTime v11;
  CMTime lhs;
  CMTime v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(a1 + 600);
  *(_BYTE *)(a1 + 600) = 1;
  if (v2)
    return 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(v1 + 488));
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    while (*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 488), v5) + 600))
    {
      if (v4 == ++v5)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  if (*(_BYTE *)(v1 + 330))
  {
    lhs.value = 0;
    result = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(v1 + 744));
    if (!(_DWORD)result)
    {
      CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v1 + 440));
      v13.value = 0;
      result = CMByteStreamAppendBlockBuffer();
      if (!(_DWORD)result)
      {
        v7 = *(const void **)(v1 + 440);
        if (v7)
          CFRelease(v7);
        result = createBlockBufferByteStreamForMovieSampleDataWriter(v1);
        if (!(_DWORD)result)
        {
          v8 = *(_QWORD *)(v1 + 8);
          v9 = *(uint64_t (**)(uint64_t, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (!v9)
            return 4294954514;
          result = v9(v8, 0, &lhs);
          if (!(_DWORD)result)
          {
            *(_QWORD *)(v1 + 752) = lhs.value;
            goto LABEL_18;
          }
        }
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v1 + 168))
    {
      result = callFragmentCallback(v1);
      if ((_DWORD)result)
        return result;
      lhs = *(CMTime *)(v1 + 220);
      v11 = *(CMTime *)(v1 + 196);
      CMTimeAdd(&v13, &lhs, &v11);
      *(CMTime *)(v1 + 220) = v13;
      goto LABEL_18;
    }
    if (*(_BYTE *)(v1 + 331))
    {
      v10 = 1;
      MovieSampleDataWriterSynchronizeDefaultByteStream(*(_QWORD *)(v1 + 744), 1, 1);
    }
    else
    {
      v10 = 0;
    }
    result = writeMovieHeader(v1, v10, v10);
    if (!(_DWORD)result)
    {
LABEL_18:
      clearAllTracksHeaderDataCompleteFlag(v1);
      return 0;
    }
  }
  return result;
}

uint64_t trackBufferQueueDequeueAndRetain(uint64_t a1, CMTime *a2, opaqueCMSampleBuffer **a3)
{
  opaqueCMSampleBuffer *v6;
  uint64_t v7;
  opaqueCMSampleBuffer *v9;
  CMItemCount NumSamples;
  opaqueCMBufferQueue *v11;
  CMTimeValue value;
  uint64_t SampleTimingInfoArray;
  CMSampleTimingInfo *v14;
  size_t v15;
  malloc_type_id_t v16;
  uint64_t v17;
  CMItemCount v18;
  CFIndex v19;
  CMTimeFlags flags;
  CMTimeValue v21;
  CMTimeScale timescale;
  CMTimeEpoch epoch;
  CMTimeValue v24;
  CMTimeValue v25;
  CMSampleTimingInfo *v26;
  __int128 v27;
  CFIndex v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t SplitSampleBufferArray;
  CFIndex Count;
  CFIndex v33;
  CFIndex v34;
  const void *ValueAtIndex;
  opaqueCMSampleBuffer **v36;
  CMSampleTimingInfo *v37;
  const __CFAllocator *allocator;
  CMItemCount v39;
  __int128 v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMSampleBufferRef sampleBufferOut;
  CMItemCount timingArrayEntriesNeededOut;
  CMTime rhs;
  CMTime time2;
  CMTime time;
  CFRange v49;

  v6 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 616));
  if (v6
    || (v9 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(a1 + 608)),
        (v6 = v9) == 0)
    || *(_DWORD *)a1 != 1936684398
    || (NumSamples = CMSampleBufferGetNumSamples(v9),
        memset(&v41, 0, sizeof(v41)),
        time = *a2,
        CMTimeMultiplyByFloat64(&v41, &time, 0.5),
        !NumSamples))
  {
LABEL_2:
    v7 = 0;
    *a3 = v6;
    return v7;
  }
  v11 = *(opaqueCMBufferQueue **)(a1 + 616);
  value = v41.value;
  v40 = *(_OWORD *)&v41.timescale;
  sampleBufferOut = 0;
  timingArrayEntriesNeededOut = 0;
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(v6, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)SampleTimingInfoArray)
  {
LABEL_11:
    v7 = SampleTimingInfoArray;
    v14 = 0;
    goto LABEL_54;
  }
  if (timingArrayEntriesNeededOut)
  {
    if ((unint64_t)timingArrayEntriesNeededOut > 0x38E38E38E38E38ELL)
    {
LABEL_10:
      SampleTimingInfoArray = FigSignalErrorAt();
      goto LABEL_11;
    }
    v15 = 72 * timingArrayEntriesNeededOut;
    v16 = 1556728742;
  }
  else
  {
    v15 = 0;
    v16 = 1270757447;
  }
  v14 = (CMSampleTimingInfo *)malloc_type_malloc(v15, v16);
  if (!v14)
    goto LABEL_10;
  v17 = CMSampleBufferGetSampleTimingInfoArray(v6, timingArrayEntriesNeededOut, v14, 0);
  if ((_DWORD)v17)
  {
    v7 = v17;
    goto LABEL_54;
  }
  allocator = CFGetAllocator(v6);
  v18 = CMSampleBufferGetNumSamples(v6);
  memset(&v43, 0, sizeof(v43));
  CMSampleBufferGetOutputPresentationTimeStamp(&v43, v6);
  v39 = v18;
  if (v18 < 1)
  {
    v7 = 0;
    goto LABEL_54;
  }
  v19 = 0;
  v36 = a3;
  v37 = v14;
  while (1)
  {
    if (timingArrayEntriesNeededOut == 1)
    {
      flags = v14->duration.flags;
      if ((flags & 0x1D) != 1)
        goto LABEL_29;
      v21 = v14->duration.value;
      timescale = v14->duration.timescale;
      epoch = v14->duration.epoch;
      time.value = v14->duration.value;
      time.timescale = timescale;
      time.flags = flags;
      time.epoch = epoch;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&time, &time2))
      {
        time2.value = value;
        *(_OWORD *)&time2.timescale = v40;
        CMTimeConvertScale(&time, &time2, timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v24 = v39 - v19 >= time.value / v21 ? time.value / v21 : v39 - v19;
      }
      else
      {
LABEL_29:
        v24 = v39 - v19;
      }
    }
    else
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v24 = 0;
      v25 = timingArrayEntriesNeededOut - v19;
      if (timingArrayEntriesNeededOut > v19)
      {
        v26 = &v14[v19];
        while (1)
        {
          time2 = time;
          rhs.value = value;
          *(_OWORD *)&rhs.timescale = v40;
          if ((CMTimeCompare(&time2, &rhs) & 0x80000000) == 0)
            break;
          time2 = time;
          v27 = *(_OWORD *)&v26->duration.value;
          rhs.epoch = v26->duration.epoch;
          *(_OWORD *)&rhs.value = v27;
          CMTimeAdd(&time, &time2, &rhs);
          ++v24;
          ++v26;
          if (v25 == v24)
          {
            v24 = v25;
            break;
          }
        }
      }
    }
    v28 = v24 <= 1 ? 1 : v24;
    v49.location = v19;
    v49.length = v28;
    v29 = CMSampleBufferCopySampleBufferForRange(allocator, v6, v49, &sampleBufferOut);
    if ((_DWORD)v29)
      break;
    time = v43;
    v29 = CMSampleBufferSetOutputPresentationTimeStamp(sampleBufferOut, &time);
    if ((_DWORD)v29)
      break;
    v30 = *(_QWORD *)(a1 + 776);
    if (v30)
    {
      time.value = 0;
      SplitSampleBufferArray = AudioSampleBufferSplitterCreateSplitSampleBufferArray(v30, sampleBufferOut, 0, (__CFArray **)&time);
      if ((_DWORD)SplitSampleBufferArray)
        goto LABEL_45;
      if (!time.value)
        goto LABEL_49;
      Count = CFArrayGetCount((CFArrayRef)time.value);
      if (Count < 1)
      {
LABEL_42:
        v7 = 0;
      }
      else
      {
        v33 = Count;
        v34 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)time.value, v34);
          SplitSampleBufferArray = CMBufferQueueEnqueue(v11, ValueAtIndex);
          if ((_DWORD)SplitSampleBufferArray)
            break;
          if (v33 == ++v34)
            goto LABEL_42;
        }
LABEL_45:
        v7 = SplitSampleBufferArray;
      }
      if (time.value)
        CFRelease((CFTypeRef)time.value);
      if ((_DWORD)v7)
        goto LABEL_59;
      goto LABEL_49;
    }
    v29 = CMBufferQueueEnqueue(v11, sampleBufferOut);
    if ((_DWORD)v29)
      break;
LABEL_49:
    memset(&time, 0, sizeof(time));
    CMSampleBufferGetOutputDuration(&time, sampleBufferOut);
    rhs = v43;
    v42 = time;
    CMTimeAdd(&time2, &rhs, &v42);
    v43 = time2;
    if (sampleBufferOut)
    {
      CFRelease(sampleBufferOut);
      sampleBufferOut = 0;
    }
    v19 += v28;
    v14 = v37;
    if (v19 >= v39)
    {
      v7 = 0;
      a3 = v36;
      goto LABEL_54;
    }
  }
  v7 = v29;
LABEL_59:
  a3 = v36;
  v14 = v37;
LABEL_54:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  free(v14);
  if (!(_DWORD)v7)
  {
    CFRelease(v6);
    v6 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(a1 + 616));
    goto LABEL_2;
  }
  CFRelease(v6);
  return v7;
}

uint64_t addSampleBufferToTrack(uint64_t a1, CMSampleBufferRef sbuf)
{
  opaqueCMSampleBuffer *v2;
  CMItemCount NumSamples;
  uint64_t OutputSampleTimingInfoArray;
  uint64_t v6;
  size_t v7;
  malloc_type_id_t v8;
  CMSampleTimingInfo *v9;
  uint64_t v10;
  uint64_t v11;
  CMTimeFlags *p_flags;
  CMTimeEpoch v13;
  __int128 v14;
  CMTimeValue v15;
  CMTimeFlags v16;
  uint64_t v17;
  CMTimeValue v18;
  CMTimeFlags v19;
  uint64_t v20;
  CMTimeValue value;
  CMTimeEpoch v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  __int128 v33;
  CMTimeEpoch v34;
  uint64_t v35;
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v37;
  const AudioFormatListItem *MostCompatibleFormat;
  int mFramesPerPacket;
  int mBytesPerPacket;
  _BYTE *v41;
  _BOOL4 v42;
  int v43;
  CFDictionaryRef v44;
  CFDictionaryRef v45;
  uint64_t AudioRollRecoveryValueFromSampleBufferAttachment;
  int value_low;
  int v48;
  uint64_t SampleTimingInfoArray;
  size_t v50;
  malloc_type_id_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  const opaqueCMFormatDescription *v55;
  size_t v56;
  malloc_type_id_t v57;
  opaqueCMSampleBuffer *v58;
  _OWORD *v59;
  _OWORD *v60;
  const __CFArray *SampleAttachmentsArray;
  __int128 v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  CMTimeScale timescale;
  CMTimeValue v73;
  CFTypeRef v74;
  uint64_t v75;
  CMSampleTimingInfo *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  CMTime v80;
  CMTime timingArrayEntriesNeededOut;
  char v82;
  uint64_t v83;
  CMItemCount numSampleTimingEntries;
  double v85;
  unsigned __int8 v86;
  uint64_t v87;
  CFTypeRef cf;
  void *v89;
  CMItemCount v90;
  CMTime time2;
  CMTime time1;
  CMTime v93;
  CMTime rhs;
  CMTime lhs;
  uint64_t v96;

  v2 = sbuf;
  v96 = *MEMORY[0x1E0C80C00];
  NumSamples = CMSampleBufferGetNumSamples(sbuf);
  v89 = 0;
  v90 = NumSamples;
  v87 = 0;
  cf = 0;
  if (!*(_BYTE *)(a1 + 492) || (*(_BYTE *)(a1 + 244) & 1) != 0)
    goto LABEL_23;
  timingArrayEntriesNeededOut.value = 0;
  OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(v2, 0, 0, &timingArrayEntriesNeededOut.value);
  if ((_DWORD)OutputSampleTimingInfoArray == -12736)
  {
    v6 = 0;
    goto LABEL_22;
  }
  v6 = OutputSampleTimingInfoArray;
  if (!(_DWORD)OutputSampleTimingInfoArray)
  {
    if (timingArrayEntriesNeededOut.value)
    {
      if (timingArrayEntriesNeededOut.value > 0x38E38E38E38E38EuLL)
      {
LABEL_8:
        v6 = FigSignalErrorAt();
        goto LABEL_22;
      }
      v7 = 72 * timingArrayEntriesNeededOut.value;
      v8 = 1556728742;
    }
    else
    {
      v7 = 0;
      v8 = 1270757447;
    }
    v9 = (CMSampleTimingInfo *)malloc_type_malloc(v7, v8);
    if (!v9)
      goto LABEL_8;
    v76 = v9;
    v10 = CMSampleBufferGetOutputSampleTimingInfoArray(v2, timingArrayEntriesNeededOut.value, v9, 0);
    if ((_DWORD)v10)
    {
      v6 = v10;
    }
    else if (timingArrayEntriesNeededOut.value < 1)
    {
LABEL_17:
      v6 = 0;
    }
    else
    {
      v11 = 0;
      p_flags = &v76->presentationTimeStamp.flags;
      v77 = *MEMORY[0x1E0CA2E68];
      v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      while (1)
      {
        v14 = *(_OWORD *)(p_flags - 9);
        v93.epoch = *(_QWORD *)(p_flags - 5);
        *(_OWORD *)&v93.value = v14;
        v15 = *(_QWORD *)(p_flags - 3);
        lhs.timescale = *(p_flags - 1);
        lhs.value = v15;
        v16 = *p_flags;
        v17 = *(_QWORD *)(p_flags + 1);
        v18 = *(_QWORD *)(p_flags + 3);
        rhs.timescale = p_flags[5];
        rhs.value = v18;
        v19 = p_flags[6];
        v20 = *(_QWORD *)(p_flags + 7);
        *(_OWORD *)&time1.value = v77;
        time1.epoch = v13;
        *(_OWORD *)&time2.value = v14;
        time2.epoch = v93.epoch;
        if (CMTimeCompare(&time1, &time2) < 0)
          break;
        p_flags += 18;
        if (++v11 >= timingArrayEntriesNeededOut.value)
          goto LABEL_17;
      }
      if ((v19 & 1) == 0)
      {
        rhs.value = lhs.value;
        rhs.timescale = lhs.timescale;
        v19 = v16;
        v20 = v17;
      }
      v6 = 0;
      *(CMTime *)(a1 + 184) = v93;
      *(_QWORD *)(a1 + 208) = lhs.value;
      *(_DWORD *)(a1 + 216) = lhs.timescale;
      *(_DWORD *)(a1 + 220) = v16;
      value = rhs.value;
      *(_QWORD *)(a1 + 224) = v17;
      *(_QWORD *)(a1 + 232) = value;
      *(_DWORD *)(a1 + 240) = rhs.timescale;
      *(_DWORD *)(a1 + 244) = v19;
      *(_QWORD *)(a1 + 248) = v20;
    }
    free(v76);
  }
LABEL_22:
  if ((_DWORD)v6)
    goto LABEL_142;
LABEL_23:
  if (!NumSamples)
  {
    v27 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v28 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA2670], 0);
    v29 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
    v30 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA26C0], 0);
    v31 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA2690], 0);
    v32 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA2658], 0);
    v33 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v93.value = *MEMORY[0x1E0CA2E18];
    v34 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v93.epoch = v34;
    if (v27 == v28 || v27 == v29 || v27 == v30)
    {
      v79 = v33;
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v2);
      if (v27 == v28)
      {
        v6 = 0;
        *(CMTime *)(a1 + 704) = time1;
      }
      else
      {
        if (v27 == v30)
          v43 = 5;
        else
          v43 = 4;
        time2 = time1;
        v6 = beginTrackSessionWithEditBoundaryTime(a1, &time2, v43);
        if (!(_DWORD)v6)
        {
          *(_OWORD *)(a1 + 704) = v79;
          *(_QWORD *)(a1 + 720) = v34;
        }
      }
      goto LABEL_142;
    }
    if (v27 == v31)
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputDecodeTimeStamp(&time1, v2);
      if ((time1.flags & 1) == 0)
      {
        CMSampleBufferGetOutputPresentationTimeStamp(&time2, v2);
        time1 = time2;
      }
      if (*(_BYTE *)(a1 + 912))
      {
        lhs = time1;
        rhs = *(CMTime *)(a1 + 916);
        CMTimeAdd(&time2, &lhs, &rhs);
        time1 = time2;
      }
      lhs = time1;
      rhs = *(CMTime *)(a1 + 232);
      CMTimeSubtract(&time2, &lhs, &rhs);
      time1 = time2;
      lhs = *(CMTime *)(a1 + 256);
      CMTimeSubtract(&v93, &time2, &lhs);
      time2 = v93;
      v35 = flushSampleBufferToTrack(a1, (uint64_t)&time2);
      goto LABEL_141;
    }
    if (v27 == v32 && *(_DWORD *)(a1 + 768) == 1 && *(_DWORD *)a1 == 1936684398)
    {
      v35 = editBuilderResetCurrentEditMediaTime(*(_QWORD *)(a1 + 496));
      if (!(_DWORD)v35)
      {
        *(_BYTE *)(a1 + 504) = 0;
        FigCEA608DataInspectorRelease(*(CFAllocatorRef **)(*(_QWORD *)(a1 + 496) + 8));
        v35 = editBoundaryDetectorCreate(**(const __CFAllocator ***)(a1 + 496), (_QWORD *)(*(_QWORD *)(a1 + 496) + 8));
      }
LABEL_141:
      v6 = v35;
      goto LABEL_142;
    }
    v6 = 0;
LABEL_142:
    v53 = 0;
    goto LABEL_143;
  }
  *(_OWORD *)&v93.value = *MEMORY[0x1E0CA2E68];
  v22 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v93.epoch = v22;
  v78 = *(_OWORD *)&v93.value;
  *(_OWORD *)&time1.value = *(_OWORD *)&v93.value;
  time1.epoch = v22;
  v86 = 0;
  numSampleTimingEntries = 0;
  v85 = 1.0;
  v83 = 0;
  v82 = 0;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 760))
    FigPowerReduceUtilitySFI();
  if ((*(_BYTE *)(a1 + 716) & 1) != 0)
  {
    time2 = *(CMTime *)(a1 + 704);
    v23 = beginTrackSessionWithEditBoundaryTime(a1, &time2, 3);
    if ((_DWORD)v23)
    {
LABEL_77:
      v6 = v23;
      goto LABEL_78;
    }
    v24 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 704) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(v24 + 16);
  }
  getTrimDurationsAndSpeedMultiplierFromSbuf(v2, &v93, &time1, (char *)&v86, &v85);
  if (!*(_DWORD *)(a1 + 348))
  {
    if (*(_DWORD *)a1 == 1936684398)
    {
      FormatDescription = CMSampleBufferGetFormatDescription(v2);
      time2.value = 0;
      *(_QWORD *)&time2.timescale = 0;
      lhs.value = 0;
      *(_QWORD *)&lhs.timescale = 0;
      v37 = CMSampleBufferGetFormatDescription(v2);
      MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v37);
      if (MostCompatibleFormat)
      {
        *(_OWORD *)&time2.value = *(_OWORD *)&MostCompatibleFormat->mASBD.mSampleRate;
        mBytesPerPacket = MostCompatibleFormat->mASBD.mBytesPerPacket;
        mFramesPerPacket = MostCompatibleFormat->mASBD.mFramesPerPacket;
        *(_OWORD *)&lhs.value = *(_OWORD *)&MostCompatibleFormat->mASBD.mBytesPerFrame;
      }
      else
      {
        v6 = FigSignalErrorAt();
        if ((_DWORD)v6)
          goto LABEL_78;
        mFramesPerPacket = 0;
        mBytesPerPacket = 0;
      }
      *(_OWORD *)(a1 + 360) = *(_OWORD *)&time2.value;
      *(_DWORD *)(a1 + 376) = mBytesPerPacket;
      *(_DWORD *)(a1 + 380) = mFramesPerPacket;
      *(_OWORD *)(a1 + 384) = *(_OWORD *)&lhs.value;
      v41 = *(_BYTE **)(a1 + 16);
      if ((v41[684] & 1) == 0)
      {
        rhs.value = 0;
        if (v41[329])
          v42 = 1;
        else
          v42 = v41[384] != 0;
        v23 = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(0, FormatDescription, 0, (CMBlockBufferRef *)&rhs);
        if ((_DWORD)v23)
          goto LABEL_77;
        v67 = CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout((CMBlockBufferRef)rhs.value, 0);
        if (rhs.value)
          CFRelease((CFTypeRef)rhs.value);
        v68 = !*(_BYTE *)(a1 + 585) || v67 == 0;
        v69 = v68 || v42;
        if (v69 != 1 && mBytesPerPacket && mFramesPerPacket)
        {
          MovieTrackSetSampleOverrides(*(_QWORD *)(a1 + 736), mBytesPerPacket, mFramesPerPacket);
          v70 = (int)*(double *)(a1 + 360);
          *(_DWORD *)(a1 + 104) = v70;
          v23 = MediaSampleTimingGeneratorSetMediaTimeScale(*(_QWORD *)(a1 + 752), v70);
          if ((_DWORD)v23)
            goto LABEL_77;
          v23 = MovieTrackSetMediaTimeScale(*(_QWORD *)(a1 + 736), *(_DWORD *)(a1 + 104));
          if ((_DWORD)v23)
            goto LABEL_77;
          goto LABEL_130;
        }
      }
    }
    if (*(_DWORD *)(a1 + 104))
      goto LABEL_130;
    if (*(_DWORD *)a1 == 1986618469)
    {
      timescale = 600;
    }
    else if (*(_DWORD *)a1 == 1936684398)
    {
      timescale = (int)*(double *)(a1 + 360);
    }
    else
    {
      memset(&time2, 0, sizeof(time2));
      CMSampleBufferGetPresentationTimeStamp(&time2, v2);
      if (time2.timescale <= 600)
        timescale = 600;
      else
        timescale = time2.timescale;
    }
    *(_DWORD *)(a1 + 104) = timescale;
    v23 = MediaSampleTimingGeneratorSetMediaTimeScale(*(_QWORD *)(a1 + 752), timescale);
    if ((_DWORD)v23)
      goto LABEL_77;
    v35 = MovieTrackSetMediaTimeScale(*(_QWORD *)(a1 + 736), *(_DWORD *)(a1 + 104));
    if (!(_DWORD)v35)
    {
LABEL_130:
      if ((*(_BYTE *)(a1 + 480) & 1) == 0)
      {
        *(_OWORD *)(a1 + 468) = v78;
        *(_QWORD *)(a1 + 484) = v22;
      }
      goto LABEL_30;
    }
    goto LABEL_141;
  }
LABEL_30:
  v25 = *(_DWORD *)(a1 + 768);
  if (v25 == 5)
  {
    v26 = *(_QWORD *)(a1 + 16);
    CMSampleBufferGetFormatDescription(v2);
    if (FigAudioFormatDescriptionEmploysDependentPackets())
      goto LABEL_32;
    LOWORD(time2.value) = 0;
    LOBYTE(lhs.value) = 0;
    LOBYTE(rhs.value) = 0;
    v44 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 1u);
    if (!v44)
      goto LABEL_167;
    v45 = v44;
    AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment((uint64_t)v44, &time2, (BOOL *)&lhs, &rhs);
    if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
    {
      v6 = AudioRollRecoveryValueFromSampleBufferAttachment;
      CFRelease(v45);
      goto LABEL_78;
    }
    value_low = LOBYTE(lhs.value);
    v48 = LOBYTE(rhs.value);
    CFRelease(v45);
    if (value_low && v48)
    {
LABEL_32:
      v25 = 3;
    }
    else
    {
LABEL_167:
      if (*(_BYTE *)(v26 + 384))
        v25 = 4;
      else
        v25 = 1;
    }
    *(_DWORD *)(a1 + 768) = v25;
  }
  if (v25 == 1 && *(_DWORD *)a1 == 1936684398 && !*(_BYTE *)(a1 + 504))
  {
    memset(&time2, 0, sizeof(time2));
    v55 = CMSampleBufferGetFormatDescription(v2);
    FigGaplessInfoGetDefaultAudioPrimingDuration(v55, &time2);
    *(_OWORD *)&lhs.value = v78;
    lhs.epoch = v22;
    rhs = time2;
    if (CMTimeCompare(&lhs, &rhs))
    {
      if (v86)
      {
        rhs = *(CMTime *)(a1 + 508);
        timingArrayEntriesNeededOut = v93;
        CMTimeAdd(&lhs, &rhs, &timingArrayEntriesNeededOut);
        *(CMTime *)(a1 + 508) = lhs;
      }
      else
      {
        memset(&lhs, 0, sizeof(lhs));
        rhs = *(CMTime *)(a1 + 508);
        timingArrayEntriesNeededOut = v93;
        CMTimeAdd(&lhs, &rhs, &timingArrayEntriesNeededOut);
        rhs = lhs;
        timingArrayEntriesNeededOut = time2;
        if (CMTimeCompare(&rhs, &timingArrayEntriesNeededOut) < 0)
        {
          rhs = *(CMTime *)(a1 + 508);
          timingArrayEntriesNeededOut = time2;
          v80 = v93;
          v23 = createSynthesizedAudioPrimingSampleBuffer(&rhs, &timingArrayEntriesNeededOut, v2, a1 + 360, NumSamples, &v80, &cf, &v90, &v93);
          if ((_DWORD)v23)
            goto LABEL_77;
          v2 = (opaqueCMSampleBuffer *)cf;
        }
        *(CMTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 16) + 120) = time2;
        *(_BYTE *)(a1 + 504) = 1;
      }
    }
  }
  if (*(_BYTE *)(a1 + 492))
  {
    SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(v2, 0, 0, &numSampleTimingEntries);
    if ((_DWORD)SampleTimingInfoArray != -12736)
    {
      v6 = SampleTimingInfoArray;
      if (!(_DWORD)SampleTimingInfoArray)
      {
        if (!numSampleTimingEntries)
        {
          v50 = 0;
          v51 = 1270757447;
LABEL_87:
          v53 = (char *)malloc_type_malloc(v50, v51);
          if (v53)
          {
            v54 = CMSampleBufferGetSampleTimingInfoArray(v2, numSampleTimingEntries, (CMSampleTimingInfo *)v53, 0);
            if (!(_DWORD)v54)
              goto LABEL_109;
            goto LABEL_97;
          }
          goto LABEL_76;
        }
        if ((unint64_t)numSampleTimingEntries <= 0x38E38E38E38E38ELL)
        {
          v50 = 72 * numSampleTimingEntries;
          v51 = 1556728742;
          goto LABEL_87;
        }
LABEL_76:
        v23 = FigSignalErrorAt();
        goto LABEL_77;
      }
      goto LABEL_78;
    }
LABEL_72:
    v6 = 0;
    goto LABEL_78;
  }
  v52 = CMSampleBufferGetOutputSampleTimingInfoArray(v2, 0, 0, &numSampleTimingEntries);
  if ((_DWORD)v52 == -12736)
    goto LABEL_72;
  v6 = v52;
  if (!(_DWORD)v52)
  {
    if (numSampleTimingEntries)
    {
      if ((unint64_t)numSampleTimingEntries > 0x38E38E38E38E38ELL)
        goto LABEL_76;
      v56 = 72 * numSampleTimingEntries;
      v57 = 1556728742;
    }
    else
    {
      v56 = 0;
      v57 = 1270757447;
    }
    v53 = (char *)malloc_type_malloc(v56, v57);
    if (v53)
    {
      v54 = CMSampleBufferGetOutputSampleTimingInfoArray(v2, numSampleTimingEntries, (CMSampleTimingInfo *)v53, 0);
      if (!(_DWORD)v54)
      {
        memset(&time2, 0, sizeof(time2));
        getTrimDurationFromSampleBuffer(v2, (const __CFString *)*MEMORY[0x1E0CA2728], (uint64_t)&time2);
        memset(&lhs, 0, sizeof(lhs));
        rhs = time2;
        CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / v85);
        timingArrayEntriesNeededOut = *(CMTime *)(v53 + 1);
        v80 = lhs;
        CMTimeSubtract(&rhs, &timingArrayEntriesNeededOut, &v80);
        *((CMTime *)v53 + 1) = rhs;
        timingArrayEntriesNeededOut = *(CMTime *)(v53 + 2);
        v80 = lhs;
        CMTimeSubtract(&rhs, &timingArrayEntriesNeededOut, &v80);
        *((CMTime *)v53 + 2) = rhs;
        if (*(_BYTE *)(a1 + 912))
        {
          v59 = v53 + 24;
          v60 = v53 + 48;
          if ((v53[60] & 1) == 0)
          {
            *v60 = *v59;
            *((_QWORD *)v53 + 8) = *((_QWORD *)v53 + 5);
          }
          SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v2, 0);
          if (isFirstSampleAttachmentSync(SampleAttachmentsArray))
          {
            *(_OWORD *)&timingArrayEntriesNeededOut.value = *v59;
            timingArrayEntriesNeededOut.epoch = *((_QWORD *)v53 + 5);
            *(_OWORD *)&v80.value = *v60;
            v80.epoch = *((_QWORD *)v53 + 8);
            CMTimeSubtract(&rhs, &timingArrayEntriesNeededOut, &v80);
            *(CMTime *)(a1 + 916) = rhs;
          }
          *(_OWORD *)&timingArrayEntriesNeededOut.value = *v60;
          timingArrayEntriesNeededOut.epoch = *((_QWORD *)v53 + 8);
          v80 = *(CMTime *)(a1 + 916);
          CMTimeAdd(&rhs, &timingArrayEntriesNeededOut, &v80);
          *v60 = *(_OWORD *)&rhs.value;
          *((_QWORD *)v53 + 8) = rhs.epoch;
        }
LABEL_109:
        if (!*(_BYTE *)(a1 + 492) && (*(_BYTE *)(a1 + 244) & 1) == 0)
        {
          *(_QWORD *)&time2.timescale = 0;
          time2.epoch = 0;
          time2.value = 0;
          v62 = *(_OWORD *)v53;
          time2.epoch = *((_QWORD *)v53 + 2);
          lhs.value = *((_QWORD *)v53 + 3);
          v63 = *((_DWORD *)v53 + 9);
          lhs.timescale = *((_DWORD *)v53 + 8);
          v64 = *((_QWORD *)v53 + 5);
          rhs.value = *((_QWORD *)v53 + 6);
          v65 = *((_DWORD *)v53 + 15);
          rhs.timescale = *((_DWORD *)v53 + 14);
          *(_OWORD *)&time2.value = v62;
          if ((v65 & 1) != 0)
          {
            v66 = *((_QWORD *)v53 + 8);
          }
          else
          {
            rhs.value = *((_QWORD *)v53 + 3);
            rhs.timescale = *((_DWORD *)v53 + 8);
            v65 = v63;
            v66 = v64;
          }
          *(CMTime *)(a1 + 184) = time2;
          *(_QWORD *)(a1 + 208) = lhs.value;
          *(_DWORD *)(a1 + 216) = lhs.timescale;
          *(_DWORD *)(a1 + 220) = v63;
          v73 = rhs.value;
          *(_QWORD *)(a1 + 224) = v64;
          *(_QWORD *)(a1 + 232) = v73;
          *(_DWORD *)(a1 + 240) = rhs.timescale;
          *(_DWORD *)(a1 + 244) = v65;
          *(_QWORD *)(a1 + 248) = v66;
        }
        v54 = MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArray(*(_QWORD *)(a1 + 752), v90, numSampleTimingEntries, (uint64_t)v53, &v87, &v83, &v89, &v82);
        if (!(_DWORD)v54)
        {
          if (v82)
          {
            v58 = *(opaqueCMSampleBuffer **)(a1 + 328);
            if (v2)
              v74 = CFRetain(v2);
            else
              v74 = 0;
            *(_QWORD *)(a1 + 328) = v74;
            v2 = v58;
            if (!v58)
              goto LABEL_158;
          }
          else
          {
            v58 = 0;
            if (!v2)
              goto LABEL_158;
          }
          time2 = v93;
          lhs = time1;
          v75 = addSampleBufferWithSampleMediaTimingToTrack(a1, v2, v83, (CMTime *)v89, (uint64_t)&time2, (uint64_t)&lhs, v86, v85);
          if ((_DWORD)v75)
          {
            v6 = v75;
            goto LABEL_99;
          }
LABEL_158:
          v6 = 0;
          goto LABEL_99;
        }
      }
LABEL_97:
      v6 = v54;
      goto LABEL_98;
    }
    goto LABEL_76;
  }
LABEL_78:
  v53 = 0;
LABEL_98:
  v58 = 0;
LABEL_99:
  if (cf)
    CFRelease(cf);
  if (v58)
    CFRelease(v58);
LABEL_143:
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v89);
  free(v53);
  return v6;
}

uint64_t flushSampleBufferToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0;
  v12 = 0;
  if (*(_QWORD *)(a1 + 328) && (*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    v3 = *(_QWORD *)(a1 + 752);
    v9 = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
    v4 = MediaSampleTimingGeneratorCreateLastMediaSampleTimingInfoArray(v3, &v9, &v13, &v12, &v11);
    v5 = v11;
    if ((_DWORD)v4)
    {
      v6 = v4;
    }
    else
    {
      v6 = addSampleBufferWithSampleMediaTimingToTrack(a1, *(CMSampleBufferRef *)(a1 + 328), v12, (CMTime *)v11, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], 0, 1.0);
      v5 = v11;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v5);
  v7 = *(const void **)(a1 + 328);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 328) = 0;
  }
  return v6;
}

uint64_t callFragmentCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t appended;
  OpaqueCMBlockBuffer *v4;
  size_t DataLength;
  uint64_t v6;
  size_t v7;
  const __CFArray *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  CFMutableArrayRef v15;
  uint64_t v16;
  CFIndex v17;
  const void *ValueAtIndex;
  CFMutableDictionaryRef v19;
  CFMutableDictionaryRef v20;
  uint64_t TrackFragmentMediaDecodeDuration;
  __CFArray *v22;
  CFMutableDictionaryRef v23;
  __CFDictionary *v24;
  uint64_t TrackFragmentBaseMediaDecodeTimeValue;
  __int128 v26;
  __int128 v27;
  const void *v28;
  __CFDictionary *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, OpaqueCMBlockBuffer *, __int128 *, size_t, __CFDictionary *);
  uint64_t BlockBufferByteStreamForMovieSampleDataWriter;
  uint64_t v33;
  const void *v34;
  __CFDictionary *theDict;
  size_t v37;
  const void *v38;
  const void *v39;
  uint64_t capacity;
  CMBlockBufferRef theBuffer;
  CMTime v42;
  CMTime v43;
  int64_t v44;
  int64_t value;
  CMTime v46;
  CMTime v47;
  CMTime rhs;
  CMTime lhs;
  CMTime v50;
  __int128 v51;
  _OWORD v52[3];
  CMTimeEpoch v53;
  char v54;
  int64_t v55[3];

  theBuffer = 0;
  if (!CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 440)))
    return 0;
  v2 = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(a1 + 744));
  if ((_DWORD)v2)
    return v2;
  appended = createMovieFragmentAtomBBuf(a1, &theBuffer);
  v4 = theBuffer;
  if ((_DWORD)appended
    || (DataLength = CMBlockBufferGetDataLength(theBuffer),
        appended = CMBlockBufferAppendBufferReference(v4, *(CMBlockBufferRef *)(a1 + 440), 0, 0, 0),
        (_DWORD)appended))
  {
    v9 = appended;
    goto LABEL_51;
  }
  v6 = *(_QWORD *)(a1 + 432);
  if (v6)
    v7 = v6 + DataLength;
  else
    v7 = 0;
  v8 = *(const __CFArray **)(a1 + 488);
  if (v8)
    capacity = CFArrayGetCount(v8);
  else
    capacity = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v9 = FigSignalErrorAt();
    if (!(_DWORD)v9)
      goto LABEL_58;
    goto LABEL_51;
  }
  v12 = Mutable;
  v13 = FigCFDictionarySetInt32();
  if ((_DWORD)v13)
  {
LABEL_65:
    v9 = v13;
    goto LABEL_57;
  }
  v14 = CFArrayCreateMutable(v10, capacity, MEMORY[0x1E0C9B378]);
  if (!v14)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_65;
  }
  v15 = v14;
  theDict = v12;
  v37 = v7;
  if (capacity < 1)
  {
LABEL_44:
    v29 = theDict;
    CFDictionarySetValue(theDict, CFSTR("SegmentReportKey_TrackReports"), v15);
    CFRelease(v15);
    v7 = v37;
    goto LABEL_45;
  }
  v16 = capacity;
  v17 = 0;
  v39 = (const void *)*MEMORY[0x1E0C9AE50];
  v38 = (const void *)*MEMORY[0x1E0C9AE40];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v17);
    v44 = 0;
    value = 0;
    v19 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v19)
      break;
    v20 = v19;
    TrackFragmentMediaDecodeDuration = FigCFDictionarySetInt32();
    if ((_DWORD)TrackFragmentMediaDecodeDuration)
      goto LABEL_54;
    TrackFragmentMediaDecodeDuration = FigCFDictionarySetInt32();
    if ((_DWORD)TrackFragmentMediaDecodeDuration)
      goto LABEL_54;
    TrackFragmentMediaDecodeDuration = MovieTrackFragmentGetTrackFragmentMediaDecodeDuration(*((_QWORD *)ValueAtIndex + 92), &value);
    if ((_DWORD)TrackFragmentMediaDecodeDuration)
      goto LABEL_54;
    memset(&v43, 0, sizeof(v43));
    CMTimeMake(&v43, value, *((_DWORD *)ValueAtIndex + 26));
    v51 = *(_OWORD *)&v43.value;
    *(_QWORD *)&v52[0] = v43.epoch;
    TrackFragmentMediaDecodeDuration = FigCFDictionarySetCMTime();
    if ((_DWORD)TrackFragmentMediaDecodeDuration
      || (TrackFragmentMediaDecodeDuration = MovieTrackFragmentGetTrackFragmentLowestDisplayStartTimeValue(*((_QWORD *)ValueAtIndex + 92), &v44), (_DWORD)TrackFragmentMediaDecodeDuration)|| (memset(&v42, 0, sizeof(v42)), CMTimeMake(&v42, v44, *((_DWORD *)ValueAtIndex + 26)), v51 = *(_OWORD *)&v42.value, *(_QWORD *)&v52[0] = v42.epoch, TrackFragmentMediaDecodeDuration = FigCFDictionarySetCMTime(), (_DWORD)TrackFragmentMediaDecodeDuration))
    {
LABEL_54:
      v9 = TrackFragmentMediaDecodeDuration;
LABEL_55:
      v7 = v37;
      v12 = theDict;
      CFRelease(v20);
      goto LABEL_56;
    }
    if (*(_DWORD *)ValueAtIndex == 1986618469 && *((_BYTE *)ValueAtIndex + 905))
    {
      v22 = v15;
      v55[0] = 0;
      v54 = 0;
      v23 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v23)
      {
        v24 = v23;
        TrackFragmentBaseMediaDecodeTimeValue = MovieTrackFragmentGetTrackFragmentBaseMediaDecodeTimeValue(*((_QWORD *)ValueAtIndex + 92), v55, &v54);
        if (!(_DWORD)TrackFragmentBaseMediaDecodeTimeValue)
        {
          if (v54 == 1)
          {
            v26 = *((_OWORD *)ValueAtIndex + 54);
            v52[1] = *((_OWORD *)ValueAtIndex + 53);
            v52[2] = v26;
            v53 = *((_QWORD *)ValueAtIndex + 110);
            v27 = *((_OWORD *)ValueAtIndex + 52);
            v51 = *((_OWORD *)ValueAtIndex + 51);
            v52[0] = v27;
            lhs = *(CMTime *)((char *)v52 + 8);
            memset(&v50, 0, sizeof(v50));
            *(_OWORD *)&rhs.value = v26;
            rhs.epoch = v53;
            CMTimeSubtract(&v50, &lhs, &rhs);
            memset(&v47, 0, sizeof(v47));
            CMTimeMake(&v47, v55[0], *((_DWORD *)ValueAtIndex + 26));
            memset(&v46, 0, sizeof(v46));
            lhs = v47;
            rhs = v50;
            CMTimeAdd(&v46, &lhs, &rhs);
            lhs = v46;
            TrackFragmentBaseMediaDecodeTimeValue = FigCFDictionarySetCMTime();
            if (!(_DWORD)TrackFragmentBaseMediaDecodeTimeValue)
            {
              TrackFragmentBaseMediaDecodeTimeValue = FigCFDictionarySetInt32();
              if (!(_DWORD)TrackFragmentBaseMediaDecodeTimeValue)
              {
                TrackFragmentBaseMediaDecodeTimeValue = FigCFDictionarySetInt32();
                if (!(_DWORD)TrackFragmentBaseMediaDecodeTimeValue)
                {
                  if (*((_BYTE *)ValueAtIndex + 904))
                    v28 = v39;
                  else
                    v28 = v38;
                  CFDictionarySetValue(v24, CFSTR("SegmentReportSampleInformationKey_IsSyncSample"), v28);
                  CFDictionarySetValue(v20, CFSTR("SegmentTrackReportKey_FirstVideoSampleInformation"), v24);
                  CFRelease(v24);
                  v15 = v22;
LABEL_36:
                  v16 = capacity;
                  goto LABEL_37;
                }
              }
            }
          }
          else
          {
            TrackFragmentBaseMediaDecodeTimeValue = FigSignalErrorAt();
          }
        }
        v9 = TrackFragmentBaseMediaDecodeTimeValue;
        CFRelease(v24);
      }
      else
      {
        v9 = FigSignalErrorAt();
      }
      v15 = v22;
      if ((_DWORD)v9)
        goto LABEL_55;
      CFDictionarySetValue(v20, CFSTR("SegmentTrackReportKey_FirstVideoSampleInformation"), 0);
      goto LABEL_36;
    }
LABEL_37:
    CFArrayAppendValue(v15, v20);
    CFRelease(v20);
    if (v16 == ++v17)
      goto LABEL_44;
  }
  v9 = FigSignalErrorAt();
  v7 = v37;
  v12 = theDict;
LABEL_56:
  CFRelease(v15);
LABEL_57:
  CFRelease(v12);
  if (!(_DWORD)v9)
  {
LABEL_58:
    v29 = 0;
LABEL_45:
    v31 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, __int128 *, size_t, __CFDictionary *))(a1 + 392);
    v30 = *(_QWORD *)(a1 + 400);
    v51 = *(_OWORD *)(a1 + 408);
    *(_QWORD *)&v52[0] = *(_QWORD *)(a1 + 424);
    BlockBufferByteStreamForMovieSampleDataWriter = v31(v30, v4, &v51, v7, v29);
    if (!(_DWORD)BlockBufferByteStreamForMovieSampleDataWriter)
    {
      MovieInformationReleaseMovieFragmentSampleTables(*(_QWORD *)(a1 + 728));
      v33 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(a1 + 408) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(v33 + 16);
      *(_QWORD *)(a1 + 432) = 0;
      v34 = *(const void **)(a1 + 440);
      if (v34)
        CFRelease(v34);
      clearAllTracksFirstSampleInfoInFragment(a1);
      BlockBufferByteStreamForMovieSampleDataWriter = createBlockBufferByteStreamForMovieSampleDataWriter(a1);
    }
    v9 = BlockBufferByteStreamForMovieSampleDataWriter;
    if (v29)
      CFRelease(v29);
  }
LABEL_51:
  if (v4)
    CFRelease(v4);
  return v9;
}

uint64_t clearAllTracksHeaderDataCompleteFlag(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  CFIndex i;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), i);
      *(_BYTE *)(result + 600) = 0;
    }
  }
  return result;
}

uint64_t createMovieFragmentAtomBBuf(uint64_t a1, CMBlockBufferRef *a2)
{
  uint64_t v4;
  uint64_t inserted;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  CMTimeEpoch v9;
  CMTimeEpoch v10;
  CMTimeEpoch v11;
  const void *ValueAtIndex;
  CFIndex v13;
  CFIndex v14;
  CFIndex i;
  const void *v16;
  CMTimeEpoch epoch;
  __int128 v18;
  int32_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  int v28;
  const __CFAllocator *v29;
  size_t DataLength;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  CMBlockBufferRef *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CMBlockBufferRef theBuffer;
  CMTime v40;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTime v44;

  v4 = *(_QWORD *)(a1 + 736);
  theBuffer = 0;
  inserted = InsertMediaSegments(a1, 0);
  if ((_DWORD)inserted)
    return inserted;
  if (*(_BYTE *)(a1 + 384) && !*(_BYTE *)(a1 + 761))
  {
    v34 = v4;
    v35 = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      v38 = *MEMORY[0x1E0CA2E18];
      v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v37 = *MEMORY[0x1E0CA2E30];
      v10 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      v36 = *MEMORY[0x1E0CA2E68];
      v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v8);
        memset(&v40, 0, sizeof(v40));
        v13 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)ValueAtIndex + 2) + 488));
        *(_OWORD *)&v40.value = v38;
        v40.epoch = v9;
        *(_OWORD *)&v44.value = v37;
        v44.epoch = v10;
        if (v13 >= 1)
        {
          v14 = v13;
          for (i = 0; i != v14; ++i)
          {
            v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(*((_QWORD *)ValueAtIndex + 2) + 488), i);
            getDecodeTimeForTrackFragmentInitialBaseMediaDecodeTime((uint64_t)v16, (uint64_t)&time1);
            v40 = time1;
            epoch = time1.epoch;
            v18 = *(_OWORD *)&time1.value;
            time1 = v44;
            *(_OWORD *)&time2.value = v18;
            time2.epoch = epoch;
            CMTimeMinimum(&v44, &time1, &time2);
          }
        }
        getDecodeTimeForTrackFragmentInitialBaseMediaDecodeTime((uint64_t)ValueAtIndex, (uint64_t)&v40);
        time1 = v44;
        *(_OWORD *)&time2.value = v36;
        time2.epoch = v11;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time1 = v44;
          CMTimeAbsoluteValue(&time2, &time1);
          lhs = v40;
          CMTimeAdd(&time1, &lhs, &time2);
          v40 = time1;
        }
        v19 = *((_DWORD *)ValueAtIndex + 26);
        lhs = v40;
        CMTimeConvertScale(&time1, &lhs, v19, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v40 = time1;
        v20 = MovieTrackFragmentSetInitialBaseMediaDecodeTimeValue(*((_QWORD *)ValueAtIndex + 92), time1.value);
        if ((_DWORD)v20)
          goto LABEL_35;
      }
      while (++v8 != v7);
    }
    *(_BYTE *)(a1 + 761) = 1;
    v4 = v34;
    a2 = v35;
  }
  v21 = *(_QWORD *)(a1 + 736);
  v22 = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  v20 = MovieHeaderMakerSetShouldWriteBaseDataOffsetIsMovieFragmentAtomFlagInTrackFragment(v21, *(_BYTE *)(a1 + 384));
  if (!(_DWORD)v20)
  {
    v20 = MovieHeaderMakerSetShouldWriteBaseMediaDecodeTimeAtomInTrackFragment(v21, *(_BYTE *)(a1 + 333));
    if (!(_DWORD)v20)
    {
      if (v22 >= 1)
      {
        v23 = 0;
        do
        {
          v24 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v23);
          v25 = v24;
          v26 = *((_BYTE *)v24 + 353) && *(_BYTE *)(a1 + 384) == 0;
          v27 = v24[93];
          v28 = *((_DWORD *)v24 + 192);
          v20 = MovieHeaderMakerTrackSetShouldWriteEditAtomInTrackFragment(v21, v27, v26);
          if ((_DWORD)v20)
            goto LABEL_35;
          v20 = MovieHeaderMakerTrackSetShouldWriteRollSampleGroupAtoms(v21, v27, v28 == 3);
          if ((_DWORD)v20)
            goto LABEL_35;
          v20 = MovieHeaderMakerTrackSetShouldWriteSampleAuxiliaryInformationAtoms(v21, v27, *((_BYTE *)v25 + 729));
          if ((_DWORD)v20)
            goto LABEL_35;
        }
        while (v22 != ++v23);
      }
      v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v20 = MovieHeaderMakerCopyMovieFragmentHeaderAsBlockBuffer(v4, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 712), *(_DWORD *)(a1 + 376), &theBuffer);
      if (!(_DWORD)v20)
      {
        DataLength = CMBlockBufferGetDataLength(theBuffer);
        if (!DataLength)
        {
LABEL_33:
          v32 = 0;
          *a2 = theBuffer;
          return v32;
        }
        if (!*(_BYTE *)(a1 + 384))
          goto LABEL_32;
        v31 = DataLength;
        if (theBuffer)
        {
          CFRelease(theBuffer);
          theBuffer = 0;
        }
        v20 = MovieHeaderMakerAddByteCountToTrackRunDataOffsets(v4, v31);
        if (!(_DWORD)v20)
        {
          v20 = MovieHeaderMakerCopyMovieFragmentHeaderAsBlockBuffer(v4, v29, *(_QWORD *)(a1 + 712), *(_DWORD *)(a1 + 376), &theBuffer);
          if (!(_DWORD)v20)
          {
LABEL_32:
            ++*(_DWORD *)(a1 + 376);
            goto LABEL_33;
          }
        }
      }
    }
  }
LABEL_35:
  v32 = v20;
  if (theBuffer)
    CFRelease(theBuffer);
  return v32;
}

__n128 clearAllTracksFirstSampleInfoInFragment(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  __n128 result;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  _OWORD *ValueAtIndex;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *(const __CFArray **)(a1 + 488);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v5 = Count;
      v6 = 0;
      v11 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
      v12 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
      v7 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
      v9 = *(__n128 *)MEMORY[0x1E0CA2E90];
      v10 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v6);
        ValueAtIndex[53] = v12;
        ValueAtIndex[54] = v11;
        *((_QWORD *)ValueAtIndex + 110) = v7;
        result = v9;
        ValueAtIndex[51] = v9;
        ValueAtIndex[52] = v10;
        ++v6;
        *((_QWORD *)ValueAtIndex + 112) = 0;
        *((_QWORD *)ValueAtIndex + 111) = 0;
        *((_WORD *)ValueAtIndex + 452) = 0;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t getDecodeTimeForTrackFragmentInitialBaseMediaDecodeTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  __int128 v9;
  BOOL v10;
  uint64_t FirstEditBuilder;
  CFIndex Count;
  CMTime v13;
  CMTime lhs;

  result = *(_QWORD *)(a1 + 424);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    v5 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
    if (result >= 1)
    {
      v6 = result;
      v7 = 0;
      while (1)
      {
        result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), v7);
        if ((*(_BYTE *)(result + 60) & 1) != 0)
          break;
        if (v6 == ++v7)
          goto LABEL_9;
      }
      v9 = *(_OWORD *)(result + 48);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 64);
      *(_OWORD *)a2 = v9;
    }
  }
  else
  {
    v8 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v8 + 16);
  }
LABEL_9:
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 232);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 248);
  }
  if (*(_DWORD *)a1 == 1936684398)
  {
    result = FigCFEqual();
    v10 = (_DWORD)result != 0;
  }
  else
  {
    v10 = 0;
  }
  if (*(_BYTE *)(a1 + 492) && !v10)
  {
    FirstEditBuilder = getFirstEditBuilder(a1);
    Count = CFArrayGetCount(*(CFArrayRef *)(FirstEditBuilder + 24));
    result = editMediaTimeIsValid(*(_QWORD *)(FirstEditBuilder + 16));
    if (Count + result)
    {
      v13 = *(CMTime *)((char *)editBuilderGetEditMediaTimeAtIndex(FirstEditBuilder, 0) + 60);
      lhs = *(CMTime *)a2;
      return (uint64_t)CMTimeSubtract((CMTime *)a2, &lhs, &v13);
    }
  }
  return result;
}

CMBufferRef trackBufferQueueGetHead(uint64_t a1)
{
  CMBufferRef result;

  result = CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 616));
  if (!result)
    return CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 608));
  return result;
}

uint64_t isFirstSampleAttachmentSync(const __CFArray *a1)
{
  if (!a1)
    return 1;
  if (CFArrayGetCount(a1))
  {
    CFArrayGetValueAtIndex(a1, 0);
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 1;
}

uint64_t beginTrackSessionWithEditBoundaryTime(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t result;
  CMTime time2;
  CMTime v8;
  CMTime rhs;
  CMTime lhs;
  CMTime v11;
  CMTime v12;

  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  memset(&v11, 0, sizeof(v11));
  lhs = *a2;
  rhs = *(CMTime *)(a1 + 232);
  CMTimeSubtract(&v11, &lhs, &rhs);
  memset(&lhs, 0, sizeof(lhs));
  rhs = v11;
  v8 = *(CMTime *)(a1 + 256);
  CMTimeSubtract(&lhs, &rhs, &v8);
  MediaSampleTimingGeneratorGetDefaultLastSampleDuration(*(CMTime **)(a1 + 752), &time2);
  rhs = lhs;
  CMTimeMaximum(&v12, &rhs, &time2);
  rhs = v12;
  result = flushSampleBufferToTrack(a1, (uint64_t)&rhs);
  if (!(_DWORD)result)
  {
    rhs = *a2;
    result = trackEndSession(a1, (__int128 *)&rhs.value, a3);
    if (!(_DWORD)result)
    {
      rhs = *a2;
      return trackBeginSession(a1, (__int128 *)&rhs.value, a3);
    }
  }
  return result;
}

uint64_t createSynthesizedAudioPrimingSampleBuffer(CMTime *a1, CMTime *a2, CMSampleBufferRef sbuf, uint64_t a4, uint64_t a5, CMTime *a6, _QWORD *a7, CMItemCount *a8, CMTime *a9)
{
  OpaqueCMBlockBuffer *DataBuffer;
  int32_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t *sampleSizeArray;
  size_t v24;
  malloc_type_id_t v25;
  size_t SampleSize;
  const __CFAllocator *v27;
  uint64_t appended;
  uint64_t v29;
  size_t *v30;
  unint64_t v31;
  uint64_t v32;
  CMSampleTimingInfo *sampleTimingArray;
  uint64_t v34;
  size_t v35;
  malloc_type_id_t v36;
  uint64_t SampleTimingInfo;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  CMSampleTimingInfo *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CMItemCount v48;
  OpaqueCMBlockBuffer *v49;
  Boolean IsReady;
  const opaqueCMFormatDescription *FormatDescription;
  const __CFDictionary *v52;
  const __CFDictionary *v53;
  const __CFDictionary *v54;
  const __CFDictionary *v55;
  CMSampleBufferRef v56;
  CFDictionaryRef v57;
  CFDictionaryRef v58;
  CFArrayRef SampleAttachmentsArray;
  const __CFArray *v60;
  uint64_t v61;
  CFIndex v62;
  const __CFDictionary *ValueAtIndex;
  CFIndex v64;
  const void **v65;
  const void **v66;
  CFIndex v67;
  __CFDictionary *v68;
  __CFDictionary *v69;
  const void **v70;
  const void **v71;
  CFIndex v72;
  const void *v73;
  const void *v74;
  const void *v75;
  __CFDictionary *v76;
  __CFDictionary *v77;
  const void **v78;
  const void **v79;
  const void *v80;
  const void *v81;
  const void *v82;
  CMItemCount v84;
  CMSampleTimingInfo *v85;
  size_t *v86;
  CMItemCount *v87;
  CFIndex Count;
  const __CFAllocator *allocator;
  const __CFArray *allocatora;
  uint64_t v92;
  uint64_t v93;
  CMTime v94;
  CMTime v95;
  CMSampleTimingInfo timingInfoOut;
  CMItemCount timingArrayEntriesNeededOut;
  CMItemCount sizeArrayEntriesNeededOut;
  CMBlockBufferRef blockBufferOut;
  CMSampleBufferRef v100;
  CMTime rhs;
  __int128 v102;
  CMTime v103;
  CMTime lhs;

  blockBufferOut = 0;
  v100 = 0;
  timingArrayEntriesNeededOut = 0;
  sizeArrayEntriesNeededOut = 0;
  memset(&timingInfoOut, 0, sizeof(timingInfoOut));
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  lhs = *a1;
  rhs = *a6;
  CMTimeAdd(&v103, &lhs, &rhs);
  rhs = *a2;
  v95 = v103;
  CMTimeSubtract(&lhs, &rhs, &v95);
  v102 = *(_OWORD *)&lhs.timescale;
  v17 = (int)*(double *)a4;
  rhs = lhs;
  CMTimeConvertScale(&lhs, &rhs, v17, kCMTimeRoundingMethod_RoundAwayFromZero);
  v102 = *(_OWORD *)&lhs.timescale;
  v18 = *(_DWORD *)(a4 + 20);
  v19 = (LODWORD(lhs.value) + v18 - 1) / v18;
  CMTimeMake(&v95, v19 * v18, (int)*(double *)a4);
  lhs = v95;
  v94 = *a6;
  CMTimeAdd(&rhs, &lhs, &v94);
  v20 = CMSampleBufferGetSampleSizeArray(sbuf, 0, 0, &sizeArrayEntriesNeededOut);
  if ((_DWORD)v20)
  {
    v32 = v20;
    sampleSizeArray = 0;
    goto LABEL_30;
  }
  if (sizeArrayEntriesNeededOut == 1)
    v21 = 1;
  else
    v21 = sizeArrayEntriesNeededOut + (int)v19;
  v22 = v19;
  if (v21)
  {
    if (v21 >> 61)
    {
      sampleSizeArray = 0;
LABEL_28:
      appended = FigSignalErrorAt();
      goto LABEL_29;
    }
    v24 = 8 * v21;
    v25 = 1556728742;
  }
  else
  {
    v24 = 0;
    v25 = 1270757447;
  }
  sampleSizeArray = (size_t *)malloc_type_malloc(v24, v25);
  if (!sampleSizeArray)
    goto LABEL_28;
  SampleSize = CMSampleBufferGetSampleSize(sbuf, 0);
  v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
  if ((_DWORD)appended)
    goto LABEL_29;
  v92 = v22;
  if ((int)v22 >= 1)
  {
    do
    {
      appended = CMBlockBufferAppendBufferReference(blockBufferOut, DataBuffer, 0, SampleSize, 0);
      if ((_DWORD)appended)
        goto LABEL_29;
      LODWORD(v22) = v22 - 1;
    }
    while ((_DWORD)v22);
  }
  appended = CMBlockBufferAppendBufferReference(blockBufferOut, DataBuffer, 0, 0, 0);
  if ((_DWORD)appended)
    goto LABEL_29;
  if (v21 == 1)
  {
    *sampleSizeArray = SampleSize;
  }
  else
  {
    if ((int)v92 >= 1)
    {
      v29 = v92;
      v30 = sampleSizeArray;
      do
      {
        *v30++ = SampleSize;
        --v29;
      }
      while (v29);
    }
    appended = CMSampleBufferGetSampleSizeArray(sbuf, sizeArrayEntriesNeededOut, &sampleSizeArray[(int)v92], 0);
    if ((_DWORD)appended)
      goto LABEL_29;
  }
  appended = CMSampleBufferGetSampleTimingInfoArray(sbuf, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)appended)
  {
LABEL_29:
    v32 = appended;
LABEL_30:
    sampleTimingArray = 0;
    goto LABEL_43;
  }
  v87 = a8;
  if (timingArrayEntriesNeededOut == 1)
    v31 = 1;
  else
    v31 = timingArrayEntriesNeededOut + (int)v92;
  if (v31)
  {
    if (v31 > 0x38E38E38E38E38ELL)
      goto LABEL_28;
    v34 = (int)v92;
    v35 = 72 * v31;
    v36 = 1556728742;
  }
  else
  {
    v34 = (int)v92;
    v35 = 0;
    v36 = 1270757447;
  }
  sampleTimingArray = (CMSampleTimingInfo *)malloc_type_malloc(v35, v36);
  if (!sampleTimingArray)
    goto LABEL_28;
  SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(sbuf, 0, &timingInfoOut);
  if ((_DWORD)SampleTimingInfo)
    goto LABEL_42;
  allocator = v27;
  v38 = a5;
  if (v31 == 1)
  {
    *(_OWORD *)&sampleTimingArray->duration.value = *(_OWORD *)&timingInfoOut.duration.value;
    v39 = *(_OWORD *)&timingInfoOut.duration.epoch;
    v40 = *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale;
    v41 = *(_OWORD *)&timingInfoOut.decodeTimeStamp.value;
    sampleTimingArray->decodeTimeStamp.epoch = timingInfoOut.decodeTimeStamp.epoch;
    *(_OWORD *)&sampleTimingArray->presentationTimeStamp.timescale = v40;
    *(_OWORD *)&sampleTimingArray->decodeTimeStamp.value = v41;
    *(_OWORD *)&sampleTimingArray->duration.epoch = v39;
    v42 = v34;
  }
  else
  {
    if ((int)v92 >= 1)
    {
      v43 = v92;
      v44 = sampleTimingArray;
      do
      {
        *(_OWORD *)&v44->duration.value = *(_OWORD *)&timingInfoOut.duration.value;
        v45 = *(_OWORD *)&timingInfoOut.duration.epoch;
        v46 = *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale;
        v47 = *(_OWORD *)&timingInfoOut.decodeTimeStamp.value;
        v44->decodeTimeStamp.epoch = timingInfoOut.decodeTimeStamp.epoch;
        *(_OWORD *)&v44->presentationTimeStamp.timescale = v46;
        *(_OWORD *)&v44->decodeTimeStamp.value = v47;
        *(_OWORD *)&v44->duration.epoch = v45;
        ++v44;
        --v43;
      }
      while (v43);
    }
    v42 = v34;
    SampleTimingInfo = CMSampleBufferGetSampleTimingInfoArray(sbuf, timingArrayEntriesNeededOut, &sampleTimingArray[(int)v34], 0);
    if ((_DWORD)SampleTimingInfo)
      goto LABEL_42;
  }
  v48 = v42 + v38;
  v49 = blockBufferOut;
  IsReady = CMSampleBufferDataIsReady(sbuf);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  SampleTimingInfo = CMSampleBufferCreate(allocator, v49, IsReady, 0, 0, FormatDescription, v48, v31, sampleTimingArray, v21, sampleSizeArray, &v100);
  if ((_DWORD)SampleTimingInfo)
  {
LABEL_42:
    v32 = SampleTimingInfo;
LABEL_43:
    if (v100)
      CFRelease(v100);
    goto LABEL_70;
  }
  v93 = v42;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  blockBufferOut = 0;
  v52 = CMCopyDictionaryOfAttachments(allocator, sbuf, 1u);
  if (v52)
  {
    v53 = v52;
    CMSetAttachments(v100, v52, 1u);
    CFRelease(v53);
  }
  v84 = v48;
  v54 = CMCopyDictionaryOfAttachments(allocator, sbuf, 0);
  if (v54)
  {
    v55 = v54;
    CMSetAttachments(v100, v54, 0);
    CFRelease(v55);
  }
  v85 = sampleTimingArray;
  v56 = v100;
  lhs = rhs;
  v57 = CMTimeCopyAsDictionary(&lhs, allocator);
  if (v57)
  {
    v58 = v57;
    CMSetAttachment(v56, (CFStringRef)*MEMORY[0x1E0CA2728], v57, 1u);
    CFRelease(v58);
  }
  allocatora = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (allocatora)
  {
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v100, 1u);
    if (SampleAttachmentsArray)
    {
      v60 = SampleAttachmentsArray;
      Count = CFArrayGetCount(allocatora);
      if (Count >= 1)
      {
        v61 = 0;
        v62 = 0;
        v86 = sampleSizeArray;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(allocatora, v62);
          v64 = CFDictionaryGetCount(ValueAtIndex);
          v65 = (const void **)malloc_type_malloc(8 * v64, 0x80040B8603338uLL);
          v66 = (const void **)malloc_type_malloc(8 * v64, 0x80040B8603338uLL);
          CFDictionaryGetKeysAndValues(ValueAtIndex, v65, v66);
          if (!v62)
          {
            v61 = 0;
            if ((int)v92 >= 1)
            {
              v67 = 0;
              do
              {
                v68 = (__CFDictionary *)CFArrayGetValueAtIndex(v60, v67);
                if (v64 >= 1)
                {
                  v69 = v68;
                  v70 = v65;
                  v71 = v66;
                  v72 = v64;
                  do
                  {
                    v74 = *v70++;
                    v73 = v74;
                    v75 = *v71++;
                    CFDictionarySetValue(v69, v73, v75);
                    --v72;
                  }
                  while (v72);
                }
                ++v67;
              }
              while (v67 != v93);
              v61 = v93;
              sampleSizeArray = v86;
            }
          }
          v76 = (__CFDictionary *)CFArrayGetValueAtIndex(v60, v61 + v62);
          if (v64 >= 1)
          {
            v77 = v76;
            v78 = v65;
            v79 = v66;
            do
            {
              v81 = *v78++;
              v80 = v81;
              v82 = *v79++;
              CFDictionarySetValue(v77, v80, v82);
              --v64;
            }
            while (v64);
          }
          free(v65);
          free(v66);
          ++v62;
        }
        while (v62 != Count);
      }
    }
  }
  v32 = 0;
  *a7 = v100;
  v100 = 0;
  sampleTimingArray = v85;
  *v87 = v84;
  *a9 = rhs;
LABEL_70:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (sampleSizeArray)
    free(sampleSizeArray);
  if (sampleTimingArray)
    free(sampleTimingArray);
  return v32;
}

uint64_t editBuilderResetCurrentEditMediaTime(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = (_QWORD *)(a1 + 16);
  v3 = *(void **)(a1 + 16);
  if (editMediaTimeIsValid((uint64_t)v3))
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v3);
  else
    FigCEA608DataInspectorRelease((CFAllocatorRef *)v3);
  return editMediaTimeCreate(*(const __CFAllocator **)a1, v2);
}

uint64_t trackEndSession(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CMTime *v18;
  int32_t v19;
  int32_t v20;
  __int128 v21;
  CFIndex Count;
  unint64_t v23;
  _BYTE *ValueAtIndex;
  __int128 v25;
  __int128 v26;
  CMTime v27;
  CMTime time;

  if ((*(_BYTE *)(a1 + 480) & 1) == 0)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (char *)malloc_type_calloc(1uLL, 0x118uLL, 0x102004013D73AF6uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  *(_OWORD *)v8 = *(_OWORD *)(a1 + 184);
  v10 = *(_OWORD *)(a1 + 200);
  v11 = *(_OWORD *)(a1 + 216);
  v12 = *(_OWORD *)(a1 + 232);
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a1 + 248);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v13 = *(_OWORD *)(v7 + 24);
  *((_QWORD *)v8 + 11) = *(_QWORD *)(v7 + 40);
  *(_OWORD *)(v8 + 72) = v13;
  v14 = (__int128 *)MEMORY[0x1E0CA2E18];
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *((_QWORD *)v8 + 14) = v15;
  v26 = *v14;
  *((_OWORD *)v8 + 6) = *v14;
  *((_DWORD *)v8 + 30) = *(_DWORD *)(a1 + 464);
  v16 = *(_QWORD *)(a1 + 484);
  *(_OWORD *)(v8 + 124) = *(_OWORD *)(a1 + 468);
  *(_QWORD *)(v8 + 140) = v16;
  *((_DWORD *)v8 + 37) = a3;
  v17 = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v8 + 152) = *a2;
  *((_QWORD *)v8 + 21) = v17;
  v18 = (CMTime *)(v8 + 176);
  v27 = *(CMTime *)(a1 + 136);
  v19 = *(_DWORD *)(a1 + 104);
  if (v19)
  {
    time = *(CMTime *)(a1 + 136);
    CMTimeConvertScale(&v27, &time, v19, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  }
  *v18 = v27;
  getSessionMediaDisplayStartTime((CMTime *)a1, &time);
  *(CMTime *)(v9 + 200) = time;
  v27 = *(CMTime *)(a1 + 160);
  v20 = *(_DWORD *)(a1 + 104);
  if (v20)
  {
    time = *(CMTime *)(a1 + 160);
    CMTimeConvertScale(&v27, &time, v20, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  }
  *(CMTime *)(v9 + 224) = v27;
  v21 = *(_OWORD *)(a1 + 432);
  *((_QWORD *)v9 + 33) = *(_QWORD *)(a1 + 448);
  *(_OWORD *)(v9 + 248) = v21;
  *((_QWORD *)v9 + 34) = *(_QWORD *)(a1 + 496);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 424), v9);
  if (a3 == 2)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 424));
    if (Count >= 1)
    {
      v23 = Count + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), v23 - 2);
        if ((ValueAtIndex[108] & 1) != 0)
          break;
        v25 = *a2;
        *((_QWORD *)ValueAtIndex + 14) = *((_QWORD *)a2 + 2);
        *((_OWORD *)ValueAtIndex + 6) = v25;
        --v23;
      }
      while (v23 > 1);
    }
  }
  *(_QWORD *)(a1 + 496) = 0;
  if (*(_BYTE *)(v7 + 329))
  {
    if (*(_BYTE *)(v7 + 352))
      *(_BYTE *)(a1 + 353) = 1;
  }
  *(_OWORD *)(a1 + 468) = v26;
  *(_QWORD *)(a1 + 484) = v15;
  return 0;
}

uint64_t trackBeginSession(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  CMTime v18;

  if ((*(_BYTE *)(a1 + 480) & 1) != 0)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 468;
  getMediaDecodeDuration(a1, &v18);
  v8 = (__int128 *)MEMORY[0x1E0CA2E90];
  *(_OWORD *)(a1 + 432) = *(_OWORD *)&v18.value;
  v9 = *v8;
  *(_OWORD *)(a1 + 200) = v8[1];
  v10 = v8[3];
  *(_OWORD *)(a1 + 216) = v8[2];
  *(_QWORD *)(a1 + 448) = v18.epoch;
  *(_OWORD *)(a1 + 232) = v10;
  *(_QWORD *)(a1 + 248) = *((_QWORD *)v8 + 8);
  *(_OWORD *)(a1 + 184) = v9;
  v11 = MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a1 + 256) = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(a1 + 272) = v13;
  v14 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)(a1 + 280) = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  v15 = *MEMORY[0x1E0CA2E28];
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  *(_OWORD *)(a1 + 304) = v15;
  *(_QWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  *(_DWORD *)(a1 + 464) = a3;
  v16 = *a2;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v7 = v16;
  if (!*(_BYTE *)(a1 + 492)
    || *(_QWORD *)(a1 + 496)
    || (result = editBuilderCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (_QWORD *)(a1 + 496)), !(_DWORD)result))
  {
    if (*(_BYTE *)(v6 + 329))
    {
      if (*(_BYTE *)(v6 + 352))
        *(_BYTE *)(a1 + 353) = 1;
    }
    MediaSampleTimingGeneratorReset(*(_QWORD *)(a1 + 752));
    return 0;
  }
  return result;
}

uint64_t getSampleSizeArrayFromSbuf(opaqueCMSampleBuffer *a1, CMItemCount a2, size_t *a3, CMItemCount *a4)
{
  __CVBuffer *ImageBuffer;
  __CVBuffer *v9;
  size_t BytesPerRow;
  size_t Height;
  uint64_t result;
  CMItemCount v13;
  CMItemCount sizeArrayEntriesNeededOut;

  sizeArrayEntriesNeededOut = 0;
  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (ImageBuffer)
  {
    if (a2 > 0)
    {
      v9 = ImageBuffer;
      BytesPerRow = CVPixelBufferGetBytesPerRow(ImageBuffer);
      Height = CVPixelBufferGetHeight(v9);
      result = 0;
      *a3 = Height * BytesPerRow;
      if (!a4)
        return result;
      v13 = 1;
      goto LABEL_16;
    }
    v13 = 1;
LABEL_11:
    result = 4294954559;
    if (!a4)
      return result;
LABEL_16:
    *a4 = v13;
    return result;
  }
  result = CMSampleBufferGetSampleSizeArray(a1, 0, 0, &sizeArrayEntriesNeededOut);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -12735)
      return result;
    result = 0;
    if (!a4)
      return result;
LABEL_15:
    v13 = sizeArrayEntriesNeededOut;
    goto LABEL_16;
  }
  v13 = sizeArrayEntriesNeededOut;
  if (sizeArrayEntriesNeededOut > a2)
    goto LABEL_11;
  result = CMSampleBufferGetSampleSizeArray(a1, a2, a3, 0);
  if (a4 && !(_DWORD)result)
    goto LABEL_15;
  return result;
}

uint64_t setDefaultTrackDimensionsIfNecessary(uint64_t a1)
{
  const __CFArray *v2;
  const opaqueCMFormatDescription *ValueAtIndex;
  uint64_t v4;
  int IsISOFileType;
  float VideoDefaultTrackDimensionsFromFormatDescription;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  double v11;
  float VideoDefaultCleanApertureDimensionsFromFormatDescription;
  double v13;
  float VideoDefaultProductionApertureDimensionsFromFormatDescription;
  double v15;
  float VideoDefaultEncodedPixelsDimensionsFromFormatDescription;
  double v17;

  v2 = MovieTrackCopyFormatDescriptionArray(*(_QWORD *)(a1 + 736));
  ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v2, 0);
  if (CMFormatDescriptionGetMediaType(ValueAtIndex) != 1986618469)
  {
LABEL_17:
    v9 = 0;
    goto LABEL_18;
  }
  v4 = *(_QWORD *)(a1 + 736);
  IsISOFileType = FigFileTypeIsISOFileType();
  if (IsISOFileType)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      VideoDefaultTrackDimensionsFromFormatDescription = FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(ValueAtIndex, IsISOFileType);
      *(float *)&v7 = v7;
      v8 = MovieTrackSetTrackDimensions(v4, VideoDefaultTrackDimensionsFromFormatDescription, *(float *)&v7);
LABEL_5:
      v9 = v8;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a1 + 32)
    || (v10 = FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(ValueAtIndex, 0),
        *(float *)&v11 = v11,
        v9 = MovieTrackSetTrackDimensions(v4, v10, *(float *)&v11),
        !(_DWORD)v9))
  {
    if (*(_BYTE *)(a1 + 33))
    {
      VideoDefaultCleanApertureDimensionsFromFormatDescription = FigMovieGetVideoDefaultCleanApertureDimensionsFromFormatDescription(ValueAtIndex);
      *(float *)&v13 = v13;
      v8 = MovieTrackSetCleanApertureDimensions(v4, VideoDefaultCleanApertureDimensionsFromFormatDescription, *(float *)&v13);
      if ((_DWORD)v8)
        goto LABEL_5;
      *(_BYTE *)(a1 + 34) = 1;
    }
    if (*(_BYTE *)(a1 + 35))
    {
      VideoDefaultProductionApertureDimensionsFromFormatDescription = FigMovieGetVideoDefaultProductionApertureDimensionsFromFormatDescription(ValueAtIndex);
      *(float *)&v15 = v15;
      v8 = MovieTrackSetProductionApertureDimensions(v4, VideoDefaultProductionApertureDimensionsFromFormatDescription, *(float *)&v15);
      if ((_DWORD)v8)
        goto LABEL_5;
      *(_BYTE *)(a1 + 36) = 1;
    }
    if (!*(_BYTE *)(a1 + 37))
      goto LABEL_17;
    VideoDefaultEncodedPixelsDimensionsFromFormatDescription = FigMovieGetVideoDefaultEncodedPixelsDimensionsFromFormatDescription(ValueAtIndex);
    *(float *)&v17 = v17;
    v9 = MovieTrackSetEncodedPixelsDimensions(v4, VideoDefaultEncodedPixelsDimensionsFromFormatDescription, *(float *)&v17);
    if (!(_DWORD)v9)
      *(_BYTE *)(a1 + 38) = 1;
  }
LABEL_18:
  if (v2)
    CFRelease(v2);
  return v9;
}

uint64_t getTrackInfoForTrackID(uint64_t a1, int a2, _QWORD *a3)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  _DWORD *ValueAtIndex;

  v4 = *(const __CFArray **)(a1 + 488);
  if (!v4)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(v4);
  if (Count < 1)
    return FigSignalErrorAt();
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v9);
    if (ValueAtIndex[183] == a2)
      break;
    if (v8 == ++v9)
      return FigSignalErrorAt();
  }
  *a3 = ValueAtIndex;
  return 0;
}

uint64_t copyFigTrackLoadSettingsAsDictionary(CFAllocatorRef allocator, uint64_t a2, CFDictionaryRef *a3)
{
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  unsigned int v12;
  unsigned int v13;
  CFDictionaryRef v14;
  uint64_t v15;
  CMTime v17;
  void *values[2];
  __int128 v19;
  void *keys[2];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = 0u;
  v21 = 0u;
  *(_OWORD *)values = 0u;
  v19 = 0u;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v17 = *(CMTime *)a2;
    v6 = CMTimeCopyAsDictionary(&v17, allocator);
    if (!v6)
      return FigSignalErrorAt();
  }
  else
  {
    v6 = 0;
  }
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v17 = *(CMTime *)(a2 + 24);
    v7 = CMTimeCopyAsDictionary(&v17, allocator);
    if (!v7)
    {
      v15 = FigSignalErrorAt();
      v9 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a2 + 48));
  if (!v9)
  {
    v15 = FigSignalErrorAt();
LABEL_29:
    v11 = 0;
    goto LABEL_14;
  }
  v10 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 52));
  v11 = v10;
  if (!v10)
  {
LABEL_25:
    v15 = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (v6)
  {
    keys[0] = CFSTR("PreloadStart");
    values[0] = v6;
    v12 = 1;
    if (!v7)
      goto LABEL_12;
    goto LABEL_11;
  }
  v12 = 0;
  if (v7)
  {
LABEL_11:
    *(_QWORD *)((unint64_t)keys | (8 * v12)) = CFSTR("PreloadDuration");
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v12++ & 1))) = v7;
  }
LABEL_12:
  keys[v12] = CFSTR("PreloadFlags");
  values[v12] = v9;
  v13 = v12 + 1;
  keys[v13] = CFSTR("DefaultHints");
  values[v13] = v10;
  v14 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, v12 + 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
    goto LABEL_25;
  v15 = 0;
  *a3 = v14;
LABEL_14:
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  if (v11)
    CFRelease(v11);
  return v15;
}

uint64_t copyDimensionsAsDictionary(const __CFAllocator *a1, CFDictionaryRef *a2, double a3, double a4)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  CFNumberRef v13;
  double valuePtr;
  double v16;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v16 = a4;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &valuePtr);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = CFNumberCreate(v6, kCFNumberCGFloatType, &v16);
  if (v9)
  {
    v10 = v9;
    keys[0] = CFSTR("Width");
    keys[1] = CFSTR("Height");
    values[0] = v8;
    values[1] = v9;
    v11 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v11)
    {
      v12 = 0;
      *a2 = v11;
    }
    else
    {
      v12 = FigSignalErrorAt();
    }
    CFRelease(v8);
    v13 = v10;
  }
  else
  {
    v12 = FigSignalErrorAt();
    v13 = v8;
  }
  CFRelease(v13);
  return v12;
}

uint64_t createTrackMetadataWritersDictionary(const __CFAllocator *a1, _QWORD *a2, CFDictionaryRef *a3)
{
  uint64_t v6;
  __CFString *v7;
  CFIndex v8;
  uint64_t v9;
  uint64_t result;
  CFDictionaryRef v11;
  CFDictionaryRef v12;
  uint64_t v13;
  void *values[2];
  void *keys;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = a2[2];
  v16 = 0;
  if ((*(_BYTE *)(v6 + 684) & 1) != 0)
  {
    v7 = CFSTR("org.mp4ra");
    v8 = 1;
  }
  else
  {
    v7 = CFSTR("com.apple.quicktime.mdta");
    v16 = CFSTR("com.apple.quicktime.udta");
    v8 = 2;
  }
  v9 = 0;
  values[0] = 0;
  values[1] = 0;
  keys = v7;
  while (1)
  {
    v13 = 0;
    result = getTrackMetadataSerializer((uint64_t)a1, a2, *(&keys + v9), &v13);
    if ((_DWORD)result)
      break;
    values[v9++] = (void *)FigMetadataSerializerGetFigMetadataWriter(v13);
    if (v8 == v9)
    {
      v11 = CFDictionaryCreate(a1, (const void **)&keys, (const void **)values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v11)
        return FigSignalErrorAt();
      v12 = v11;
      result = 0;
      *a3 = v12;
      return result;
    }
  }
  return result;
}

uint64_t copyNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t NegativeCompositionOffsetsInISOFilePolicy;
  CFTypeRef v5;
  unsigned int v7;

  v7 = 0;
  NegativeCompositionOffsetsInISOFilePolicy = MovieHeaderMakerTrackGetNegativeCompositionOffsetsInISOFilePolicy(*(_QWORD *)(a1 + 736), *(_QWORD *)(a2 + 744), &v7);
  if (!(_DWORD)NegativeCompositionOffsetsInISOFilePolicy)
  {
    if (v7 > 2)
    {
      v5 = 0;
    }
    else
    {
      v5 = *off_1E2F932C0[v7];
      if (v5)
        v5 = CFRetain(v5);
    }
    *a3 = v5;
  }
  return NegativeCompositionOffsetsInISOFilePolicy;
}

uint64_t getFigTrackLoadSettingsFromDictionary(const void *a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeID TypeID;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int v14;
  uint64_t result;
  int v16;
  CMTimeValue v17;
  CMTime v18;
  uint64_t valuePtr;
  CMTimeValue v20;
  CMTimeScale v21;
  CMTimeValue v22;
  CMTimeScale timescale;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0CA2E18];
  v22 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  valuePtr = 0;
  v20 = v22;
  v21 = timescale;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return 4294954516;
  v6 = *(_DWORD *)(v4 + 12);
  v7 = *(_QWORD *)(v4 + 16);
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("PreloadStart"));
  v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("PreloadDuration"));
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("PreloadFlags"));
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("DefaultHints"));
  flags = v6;
  epoch = v7;
  if (Value)
  {
    CMTimeMakeFromDictionary(&v18, Value);
    v22 = v18.value;
    flags = v18.flags;
    timescale = v18.timescale;
    if ((v18.flags & 0x1D) != 1)
      return 4294954516;
    epoch = v18.epoch;
  }
  if (v9)
  {
    CMTimeMakeFromDictionary(&v18, v9);
    v20 = v18.value;
    v6 = v18.flags;
    v21 = v18.timescale;
    if ((v18.flags & 0x1D) == 1)
    {
      v7 = v18.epoch;
      goto LABEL_8;
    }
    return 4294954516;
  }
LABEL_8:
  if (v10)
    CFNumberGetValue(v10, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (v11)
  {
    CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
    v14 = valuePtr;
  }
  else
  {
    v14 = 0;
  }
  result = 0;
  v16 = HIDWORD(valuePtr);
  *(_QWORD *)a2 = v22;
  *(_DWORD *)(a2 + 8) = timescale;
  *(_DWORD *)(a2 + 12) = flags;
  v17 = v20;
  *(_QWORD *)(a2 + 16) = epoch;
  *(_QWORD *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 36) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v16;
  *(_DWORD *)(a2 + 52) = v14;
  return result;
}

uint64_t getDimensionsFromDictionary(const void *a1, _OWORD *a2)
{
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v6;
  const __CFNumber *v8;
  uint64_t result;
  __int128 v10;

  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("Width"));
  v6 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("Height"));
  if (!Value || v6 == 0)
    return 4294954516;
  v8 = v6;
  v10 = 0uLL;
  if (!CFNumberGetValue(Value, kCFNumberCGFloatType, &v10)
    || !CFNumberGetValue(v8, kCFNumberCGFloatType, (char *)&v10 + 8))
  {
    return 4294954516;
  }
  result = 0;
  *a2 = v10;
  return result;
}

uint64_t FigFormatWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigFormatWriterGetClassID_sRegisterFigFormatWriterTypeOnce, RegisterFigFormatWriterType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigFormatWriterCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigFormatWriter %p]"), a1);
}

uint64_t sbp_bq_UpcomingOutputPTSRangeChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result;
  uint64_t v7;
  const void *v8;
  const void *Value;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  CMTime v12;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v7 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
    v8 = (const void *)*MEMORY[0x1E0C9AE50];
    Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2758]);
    *(_BYTE *)(v7 + 40) = v8 == Value;
    if (v8 == Value)
    {
      v10 = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2740]);
      v11 = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2738]);
      CMTimeMakeFromDictionary(&v12, v10);
      *(CMTime *)(v7 + 44) = v12;
      CMTimeMakeFromDictionary(&v12, v11);
      *(CMTime *)(v7 + 68) = v12;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 32));
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

_BYTE *sbp_bq_CollectorCoherence()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

__CFString *sbp_bq_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProviderForBufferQueue %p>"), a1);
  return Mutable;
}

CMItemCount sbp_bq_scanForSampleBufferThatWillBeDisplayed(opaqueCMSampleBuffer *a1, _BYTE *a2)
{
  CMItemCount result;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v6;
  const __CFDictionary *ValueAtIndex;

  result = CMSampleBufferGetNumSamples(a1);
  if (result)
  {
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (SampleAttachmentsArray
      && (v6 = SampleAttachmentsArray, CFArrayGetCount(SampleAttachmentsArray) >= 1)
      && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 0)) != 0
      && (const void *)*MEMORY[0x1E0C9AE50] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8]))
    {
      return 0;
    }
    else
    {
      *a2 = 1;
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t FigSampleBufferProviderGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleBufferProviderGetClassID_sRegisterFigSampleBufferProviderTypeOnce, RegisterFigSampleBufferProviderType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferProviderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleBufferProvider %p]"), a1);
}

uint64_t FigClusterSynchronizationManager_ClientIsPlaying(char a1)
{
  uint64_t v1;
  _QWORD v3[5];
  char v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (gSerialQueue)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = __FigClusterSynchronizationManager_ClientIsPlaying_block_invoke;
    v3[3] = &unk_1E2F937E8;
    v4 = a1;
    v3[4] = &v5;
    dispatch_sync((dispatch_queue_t)gSerialQueue, v3);
    v1 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v1 = 0;
  }
  _Block_object_dispose(&v5, 8);
  return v1;
}

uint64_t figClusterSynchManager_shouldDisableOdeonStereoClockLink()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
    return FigGetCFPreferenceNumberWithDefault() == 1;
  return result;
}

void figClusterSynchManager_ensureStopped()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  figClusterSynchManager_stopAndClearBonjourAdvertiser();
  figClusterSynchManager_stopAndClearBonjourBrowser();
  if (gAddedIPs)
    CFSetApplyFunction((CFSetRef)gAddedIPs, (CFSetApplierFunction)figClusterSynchManager_RemovePort, 0);
  if (gClusterClock)
  {
    CFRelease((CFTypeRef)gClusterClock);
    gClusterClock = 0;
  }
  if (gAddedIPs)
  {
    CFRelease((CFTypeRef)gAddedIPs);
    gAddedIPs = 0;
  }
  if (gAddedEnpointsToIPMap)
  {
    CFRelease((CFTypeRef)gAddedEnpointsToIPMap);
    gAddedEnpointsToIPMap = 0;
  }
  if (gMyClusterUUID)
  {
    CFRelease((CFTypeRef)gMyClusterUUID);
    gMyClusterUUID = 0;
  }
  gIsStarted = 0;
  if (dword_1EE2A2EB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t figClusterSynchManager_ensureStarted()
{
  uint64_t started;
  const __CFAllocator *v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  int v6;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v6 = 0;
  if ((gIsStarted & 1) == 0)
  {
    started = figClusterSynchManager_startBonjourAdvertiser();
    if (!(_DWORD)started)
    {
      v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v2 = CM8021ASClockCreate();
      if ((_DWORD)v2)
      {
        v4 = v2;
        FigSignalErrorAt();
        goto LABEL_16;
      }
      started = sAPConnectivityHelperCreate(&gconnectivityHelper);
      if (!(_DWORD)started)
      {
        figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(started, (uint64_t)&v6);
        gAddedIPs = (uint64_t)CFSetCreateMutable(v1, 2, MEMORY[0x1E0C9B3B0]);
        if (!gAddedIPs
          || (gAddedEnpointsToIPMap = (uint64_t)CFDictionaryCreateMutable(v1, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
        {
          v4 = FigSignalErrorAt();
          if (!(_DWORD)v4)
            return v4;
          goto LABEL_16;
        }
        started = figClusterSynchManager_startBonjourBrowser();
        if (!(_DWORD)started)
        {
          gIsStarted = 1;
          if (dword_1EE2A2EB8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return 0;
        }
      }
    }
    v4 = started;
LABEL_16:
    figClusterSynchManager_ensureStopped();
    return v4;
  }
  return 0;
}

uint64_t figClusterSynchManager_AddPort(const __CFData *a1)
{
  const UInt8 *BytePtr;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v4;
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v4 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  if (dword_1EE2A2EB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CM8021ASClockAddIPv6Port()
    || figClusterSynchManager_getPeerMACAddress_in6((uint64_t)BytePtr, (uint64_t)&v4))
  {
    return FigSignalErrorAt();
  }
  else
  {
    return figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(1, (uint64_t)&v4);
  }
}

uint64_t FigClusterSynchronizationManager_OneTimeInitialization()
{
  const void *v0;

  v0 = (const void *)MGCopyAnswer();
  if (FigCFEqual())
  {
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      FigNote_AllowInternalDefaultLogs();
      fig_note_initialize_category_with_default_work_cf();
      fig_note_initialize_category_with_default_work_cf();
      if (FigClusterSynchronizationManager_OneTimeInitialization_sfigClusterSynchronizationManager_InitOnce != -1)
      {
        dispatch_once_f(&FigClusterSynchronizationManager_OneTimeInitialization_sfigClusterSynchronizationManager_InitOnce, 0, (dispatch_function_t)figClusterSynchManager_InitOnce);
        if (!v0)
          return 0;
        goto LABEL_5;
      }
    }
  }
  if (v0)
LABEL_5:
    CFRelease(v0);
  return 0;
}

void figClusterSynchManager_InitOnce()
{
  gSerialQueue = (uint64_t)dispatch_queue_create("ClusterSynchManager callback queue", 0);
  dispatch_async_f((dispatch_queue_t)gSerialQueue, 0, (dispatch_function_t)figClusterSynchManager_DeferredInitOnce);
}

uint64_t figClusterSynchManager_getPeerMACAddress_in6(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v16;
  int v17;
  size_t size;
  int v19[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  size = 0;
  v4 = 100;
  while (1)
  {
    *(_OWORD *)v19 = xmmword_1932FB760;
    v20 = 0x4000000000ALL;
    v5 = sysctl(v19, 6u, 0, &size, 0, 0);
    if ((_DWORD)v5)
      return v5;
    if (!size)
      return 4294954510;
    v6 = (unsigned __int16 *)malloc_type_malloc(size, 0x75901A8EuLL);
    if (!v6)
      return 4294954510;
    v7 = v6;
    v8 = sysctl(v19, 6u, v6, &size, 0, 0);
    if (!(_DWORD)v8)
      break;
    v9 = v8;
    free(v7);
    if (!--v4)
      return v9;
  }
  if ((uint64_t)size < 1)
  {
LABEL_21:
    v9 = 4294954513;
  }
  else
  {
    v10 = v7;
    while (1)
    {
      v11 = *((unsigned __int8 *)v10 + 92);
      v12 = (v11 & 3) != 0 ? (v11 | 3) + 1 : *((unsigned __int8 *)v10 + 92);
      v13 = *((_BYTE *)v10 + 92) ? v12 : 4;
      v14 = (char *)v10 + v13 + 92;
      if (v14[1] == 18 && v14[6] == 6 && *((_WORD *)v14 + 1) && *(_QWORD *)(v10 + 54) == *(_QWORD *)(a1 + 8))
        break;
      v10 = (unsigned __int16 *)((char *)v10 + *v10);
      if (v10 >= (unsigned __int16 *)((char *)v7 + size))
        goto LABEL_21;
    }
    v9 = 0;
    v16 = &v14[v14[5]];
    v17 = *((_DWORD *)v16 + 2);
    *(_WORD *)(a2 + 4) = *((_WORD *)v16 + 6);
    *(_DWORD *)a2 = v17;
  }
  free(v7);
  return v9;
}

uint64_t figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  updated = sAPConnectivityHelperUpdateTrafficRegistration(gconnectivityHelper, CFSTR("timeSync"), a2, a1);
  if (dword_1EE2A2EB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return updated;
}

void figClusterSynchManager_stopAndClearBonjourAdvertiser()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (gAdvertiserStarted == 1 && gBonjourAdvertiser)
  {
    DNSServiceRefDeallocate((DNSServiceRef)gBonjourAdvertiser);
    gBonjourAdvertiser = 0;
    gAdvertiserStarted = 0;
    if (dword_1EE2A2EB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void figClusterSynchManager_stopAndClearBonjourBrowser()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (gBrowserStarted == 1 && gBonjourBrowser)
  {
    DNSServiceRefDeallocate((DNSServiceRef)gBonjourBrowser);
    gBonjourBrowser = 0;
    gBrowserStarted = 0;
    if (dword_1EE2A2EB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t figClusterSynchManager_RemovePort(const __CFData *a1)
{
  const UInt8 *BytePtr;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t PeerMACAddress_in6;
  uint64_t result;
  int v5;
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v5 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  if (dword_1EE2A2EB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CM8021ASClockRemoveIPv6Port())
    return FigSignalErrorAt();
  PeerMACAddress_in6 = figClusterSynchManager_getPeerMACAddress_in6((uint64_t)BytePtr, (uint64_t)&v5);
  if ((_DWORD)PeerMACAddress_in6)
    return FigSignalErrorAt();
  result = figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(PeerMACAddress_in6, (uint64_t)&v5);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t figClusterSynchManager_startBonjourAdvertiser()
{
  const __CFAllocator *v0;
  const __CFString *v1;
  const __CFString *v2;
  uint8_t v3;
  uint64_t updated;
  const __CFString *v5;
  const __CFString *v6;
  uint8_t v7;
  uint64_t v8;
  uint32_t v9;
  uint16_t txtLen;
  const void *BytesPtr;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  const __CFString *v15;
  DNSServiceRef sdRef;
  _OWORD name[16];
  _BYTE buffer[256];
  TXTRecordRef txtRecord;
  char __s[256];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  sdRef = 0;
  memset(name, 0, sizeof(name));
  if ((gAdvertiserStarted & 1) != 0)
    return 0;
  txtRecord = 0uLL;
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  __s[0] = 0;
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFUUIDRef)gMyDeviceUUID);
  if (v1)
  {
    v2 = v1;
    if (CFStringGetCString(v1, __s, 256, 0x8000100u))
    {
      v3 = strlen(__s);
      updated = TXTRecordSetValue(&txtRecord, "did", v3, __s);
      if ((_DWORD)updated)
        goto LABEL_25;
      if (CFStringGetCString(v2, (char *)name, 256, 0x8000100u) && strlen((const char *)name) <= 0x3F)
      {
        updated = figClusterSynchManager_updateMyClusterID();
        if (!(_DWORD)updated)
        {
          __s[0] = 0;
          v5 = CFUUIDCreateString(v0, (CFUUIDRef)gMyClusterUUID);
          if (v5)
          {
            v6 = v5;
            if (CFStringGetCString(v5, __s, 256, 0x8000100u))
            {
              v7 = strlen(__s);
              v8 = TXTRecordSetValue(&txtRecord, "tsid", v7, __s);
              if (!(_DWORD)v8)
              {
                v9 = if_nametoindex("awdl0");
                txtLen = TXTRecordGetLength(&txtRecord);
                BytesPtr = TXTRecordGetBytesPtr(&txtRecord);
                v8 = DNSServiceRegister(&sdRef, 0x100000u, v9, (const char *)name, "_ieee1588._udp", 0, 0, 0x3F01u, txtLen, BytesPtr, (DNSServiceRegisterReply)figClusterSynchManager_registerServiceCallBack, 0);
                if (!(_DWORD)v8)
                {
                  v12 = DNSServiceSetDispatchQueue(sdRef, (dispatch_queue_t)gSerialQueue);
                  if ((_DWORD)v12)
                  {
                    v14 = v12;
                    FigSignalErrorAt();
                  }
                  else
                  {
                    gBonjourAdvertiser = (uint64_t)sdRef;
                    sdRef = 0;
                    gAdvertiserStarted = 1;
                    if (dword_1EE2A2EB8)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    v14 = 0;
                  }
                  goto LABEL_16;
                }
              }
            }
            else
            {
              v8 = FigSignalErrorAt();
            }
            v14 = v8;
LABEL_16:
            CFRelease(v2);
            v15 = v6;
LABEL_17:
            CFRelease(v15);
            goto LABEL_18;
          }
          goto LABEL_24;
        }
LABEL_25:
        v14 = updated;
        v15 = v2;
        goto LABEL_17;
      }
    }
LABEL_24:
    updated = FigSignalErrorAt();
    goto LABEL_25;
  }
  v14 = FigSignalErrorAt();
LABEL_18:
  TXTRecordDeallocate(&txtRecord);
  if (sdRef)
    DNSServiceRefDeallocate(sdRef);
  return v14;
}

uint64_t figClusterSynchManager_startBonjourBrowser()
{
  uint32_t v0;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  DNSServiceRef sdRef[21];

  sdRef[20] = *(DNSServiceRef *)MEMORY[0x1E0C80C00];
  sdRef[0] = 0;
  if ((gBrowserStarted & 1) != 0)
    return 0;
  v0 = if_nametoindex("awdl0");
  v1 = DNSServiceBrowse(sdRef, 0x100000u, v0, "_ieee1588._udp", 0, (DNSServiceBrowseReply)figClusterSynchManager_handleBrowserReply, 0);
  if (!(_DWORD)v1)
  {
    v1 = DNSServiceSetDispatchQueue(sdRef[0], (dispatch_queue_t)gSerialQueue);
    if (!(_DWORD)v1)
    {
      gBonjourBrowser = (uint64_t)sdRef[0];
      sdRef[0] = 0;
      gBrowserStarted = 1;
      if (dword_1EE2A2EB8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v3 = 0;
        goto LABEL_7;
      }
      return 0;
    }
  }
  v3 = v1;
  FigSignalErrorAt();
LABEL_7:
  if (sdRef[0])
    DNSServiceRefDeallocate(sdRef[0]);
  return v3;
}

uint64_t figClusterSynchManager_updateMyClusterID()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v1;
  CFTypeID v2;
  CFTypeID v3;
  CFUUIDRef v4;
  CFUUIDRef v5;
  CFTypeID v6;
  NSObject *v7;
  uint64_t v8;
  const __CFString *v9;

  if (figClusterSynchManager_shouldDisableOdeonStereoClockLink())
  {
    if (dword_1EE2A2EB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_17;
  }
  v1 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("tightSyncGroupUUID"), CFSTR("com.apple.airplay"));
  if (v1
    || (v1 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("tightSyncUUID"), CFSTR("com.apple.airplay"))) != 0)
  {
    v2 = CFGetTypeID(v1);
    if (v2 != CFStringGetTypeID())
      figClusterSynchManager_ensureStopped();
    v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID())
    {
      v8 = FigSignalErrorAt();
LABEL_20:
      v9 = v1;
LABEL_21:
      CFRelease(v9);
      return v8;
    }
    v4 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
    v5 = v4;
    if (v4 && (v6 = CFGetTypeID(v4), v6 == CFUUIDGetTypeID()))
    {
      if (!gMyClusterUUID)
      {
LABEL_15:
        if (dword_1EE2A2EB8)
        {
          v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        gMyClusterUUID = (uint64_t)v5;
        v8 = figClusterSynchManager_ensureStarted();
        if (!(_DWORD)v8)
          dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_31);
        goto LABEL_20;
      }
      if (!CFEqual((CFTypeRef)gMyClusterUUID, v5))
      {
        if (gMyClusterUUID)
        {
          figClusterSynchManager_ensureStopped();
          sleep(2u);
        }
        goto LABEL_15;
      }
      CFRelease(v1);
      v8 = 0;
    }
    else
    {
      v8 = FigSignalErrorAt();
      CFRelease(v1);
      if (!v5)
        return v8;
    }
    v9 = (const __CFString *)v5;
    goto LABEL_21;
  }
LABEL_17:
  figClusterSynchManager_ensureStopped();
  return 4294954514;
}

NSObject *figClusterSynchManager_registerServiceCallBack(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *result;

  if (a3 == -65563)
  {
    FigSignalErrorAt();
    return figClusterSynchManager_restartBonjour();
  }
  return result;
}

uint64_t __figClusterSynchManager_updateMyClusterID_block_invoke()
{
  return FigClusterSynchronizationManager_ClientIsPlaying(1);
}

NSObject *figClusterSynchManager_restartBonjour()
{
  NSObject *result;
  NSObject *v1;
  dispatch_time_t v2;

  figClusterSynchManager_stopAndClearBonjourAdvertiser();
  figClusterSynchManager_stopAndClearBonjourBrowser();
  result = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)gSerialQueue);
  gBonjourRestartTimer = (uint64_t)result;
  if (result)
  {
    dispatch_source_set_event_handler_f(result, (dispatch_function_t)figClusterSynchManager_restartBonjourTimerFired);
    v1 = gBonjourRestartTimer;
    v2 = dispatch_time(0, 500000000);
    dispatch_source_set_timer(v1, v2, 0x1DCD6500uLL, 0xF4240uLL);
    dispatch_resume((dispatch_object_t)gBonjourRestartTimer);
    return FigSignalErrorAt();
  }
  return result;
}

void figClusterSynchManager_restartBonjourTimerFired()
{
  if (figClusterSynchManager_startBonjourAdvertiser()
    || figClusterSynchManager_startBonjourBrowser())
  {
    FigSignalErrorAt();
  }
  else
  {
    dispatch_source_cancel((dispatch_source_t)gBonjourRestartTimer);
    if (gBonjourRestartTimer)
    {
      dispatch_release((dispatch_object_t)gBonjourRestartTimer);
      gBonjourRestartTimer = 0;
    }
  }
}

void figClusterSynchManager_handleBrowserReply(int a1, char a2, int a3, int a4, char *cStr, const char *a6, const char *a7)
{
  uint64_t v7;
  const __CFString *v12;
  const __CFString *v13;
  CFUUIDRef v14;
  CFUUIDRef v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t Instance;
  uint32_t v18;
  void *v19;
  DNSServiceRef sdRef;
  char fullName[1009];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  sdRef = 0;
  if (a4 == -65563)
  {
    v7 = FigSignalErrorAt();
    figClusterSynchManager_restartBonjour(v7);
    return;
  }
  if (!a4 && gBrowserStarted == 1)
  {
    v12 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    if (!v12)
    {
      FigSignalErrorAt();
      return;
    }
    v13 = v12;
    v14 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12);
    if (!v14)
    {
      FigSignalErrorAt();
      CFRelease(v13);
      return;
    }
    v15 = v14;
    if ((a2 & 2) == 0 && dword_1EE2A2EB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_20;
    }
    if ((a2 & 2) == 0 || FigCFEqual() || DNSServiceConstructFullName(fullName, cStr, a6, a7))
      goto LABEL_20;
    if (FigClusterSynchronizationManagerBonjourQueryGetTypeID_sOnce != -1)
      dispatch_once_f(&FigClusterSynchronizationManagerBonjourQueryGetTypeID_sOnce, &FigClusterSynchronizationManagerBonjourQueryGetTypeID_sTypeID, (dispatch_function_t)_FigClusterSynchronizationManagerBonjourQueryRegisterClass);
    Instance = _CFRuntimeCreateInstance();
    if (!Instance && FigSignalErrorAt())
    {
      FigSignalErrorAt();
LABEL_20:
      CFRelease(v13);
      CFRelease(v15);
      if (sdRef)
        DNSServiceRefDeallocate(sdRef);
      return;
    }
    *(_BYTE *)(Instance + 16) = 0;
    v18 = if_nametoindex("awdl0");
    v19 = (void *)CFRetain((CFTypeRef)Instance);
    if (DNSServiceQueryRecord(&sdRef, 0x100000u, v18, fullName, 0x10u, 1u, (DNSServiceQueryRecordReply)figClusterSynchManager_txtInfoCallBack, v19))
    {
      CFRelease((CFTypeRef)Instance);
    }
    else if (!DNSServiceSetDispatchQueue(sdRef, (dispatch_queue_t)gSerialQueue))
    {
      *(_QWORD *)(Instance + 48) = sdRef;
      sdRef = 0;
LABEL_19:
      CFRelease((CFTypeRef)Instance);
      goto LABEL_20;
    }
    FigSignalErrorAt();
    goto LABEL_19;
  }
}

void figClusterSynchManager_txtInfoCallBack(int a1, int a2, int a3, int a4, const char *a5, int a6, int a7, uint16_t txtLen, void *txtRecord, uint64_t a10, _QWORD *cf)
{
  const char *ValuePtr;
  const UInt8 *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFAllocator *v18;
  CFUUIDRef v19;
  CFUUIDRef v20;
  int v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *v23;
  const UInt8 *v24;
  CFUUIDRef v25;
  uint32_t v26;
  void *v27;
  uint8_t valueLen;
  DNSServiceRef sdRef[18];

  sdRef[16] = *(DNSServiceRef *)MEMORY[0x1E0C80C00];
  valueLen = 0;
  if (!a4)
  {
    if (!cf)
      return;
    if (cf[3] || cf[5])
      goto LABEL_33;
    if (gBrowserStarted != 1 || gMyClusterUUID == 0)
      goto LABEL_33;
    ValuePtr = (const char *)TXTRecordGetValuePtr(txtLen, txtRecord, "did", &valueLen);
    if (ValuePtr)
    {
      v15 = (const UInt8 *)ValuePtr;
      valueLen = strnlen(ValuePtr, valueLen);
      v16 = CFStringCreateWithBytes(0, v15, valueLen, 0x8000100u, 0);
      if (v16)
      {
        v17 = v16;
        v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v19 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16);
        if (!v19)
        {
          FigSignalErrorAt();
          v24 = 0;
          v25 = 0;
          goto LABEL_25;
        }
        v20 = v19;
        if (FigCFEqual())
          goto LABEL_35;
        v21 = *((unsigned __int8 *)cf + 16);
        if (*((_BYTE *)cf + 16) && dword_1EE2A2EB8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v21 = *((unsigned __int8 *)cf + 16);
        }
        if (v21)
        {
LABEL_35:
          v24 = 0;
        }
        else
        {
          v23 = (const char *)TXTRecordGetValuePtr(txtLen, txtRecord, "tsid", &valueLen);
          v24 = (const UInt8 *)v23;
          if (v23)
          {
            valueLen = strnlen(v23, valueLen);
            v24 = (const UInt8 *)CFStringCreateWithBytes(0, v24, valueLen, 0x8000100u, 0);
            if (v24)
            {
              v25 = CFUUIDCreateFromString(v18, (CFStringRef)v24);
              if (v25)
              {
                if (FigCFEqual())
                {
                  cf[3] = v20;
                  sdRef[0] = 0;
                  if (!*a5)
                  {
                    FigSignalErrorAt();
                    goto LABEL_25;
                  }
                  v26 = if_nametoindex("awdl0");
                  v27 = (void *)CFRetain(cf);
                  if (DNSServiceQueryRecord(sdRef, 0x100000u, v26, a5, 0x21u, 1u, (DNSServiceQueryRecordReply)figClusterSynchManager_srvInfoCallBack, v27))
                  {
                    CFRelease(cf);
                  }
                  else if (!DNSServiceSetDispatchQueue(sdRef[0], (dispatch_queue_t)gSerialQueue))
                  {
                    cf[5] = sdRef[0];
LABEL_25:
                    v20 = (CFUUIDRef)v17;
LABEL_29:
                    CFRelease(v20);
                    if (v24)
                      CFRelease(v24);
                    if (v25)
                      CFRelease(v25);
                    goto LABEL_33;
                  }
                  FigSignalErrorAt();
                  if (sdRef[0])
                    DNSServiceRefDeallocate(sdRef[0]);
                  goto LABEL_25;
                }
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gAddedEnpointsToIPMap, v20, 0))
                  figClusterSynchManager_removePeerEndpoint(v20);
              }
              else
              {
                FigSignalErrorAt();
              }
LABEL_28:
              CFRelease(v17);
              goto LABEL_29;
            }
          }
          FigSignalErrorAt();
        }
        v25 = 0;
        goto LABEL_28;
      }
    }
    FigSignalErrorAt();
LABEL_33:
    CFRelease(cf);
    return;
  }
  FigSignalErrorAt();
  if (cf)
    goto LABEL_33;
}

uint64_t _FigClusterSynchronizationManagerBonjourQueryRegisterClass(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void _FigClusterSynchronizationManagerBonjourQueryFinalize(_QWORD *a1)
{
  const void *v2;
  _DNSServiceRef_t *v3;
  _DNSServiceRef_t *v4;
  _DNSServiceRef_t *v5;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (_DNSServiceRef_t *)a1[4];
  if (v3)
    DNSServiceRefDeallocate(v3);
  v4 = (_DNSServiceRef_t *)a1[5];
  if (v4)
    DNSServiceRefDeallocate(v4);
  v5 = (_DNSServiceRef_t *)a1[6];
  if (v5)
    DNSServiceRefDeallocate(v5);
}

void figClusterSynchManager_removePeerEndpoint(void *key)
{
  const __CFData *Value;
  const __CFData *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gAddedEnpointsToIPMap, key);
  if (Value)
  {
    v3 = Value;
    CFDataGetBytePtr(Value);
    if (dword_1EE2A2EB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CM8021ASClockRemoveIPv6Port();
    CFSetRemoveValue((CFMutableSetRef)gAddedIPs, v3);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gAddedEnpointsToIPMap, key);
  }
}

void figClusterSynchManager_srvInfoCallBack(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  const void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *p_s;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  uint32_t v28;
  void *v29;
  DNSServiceRef sdRef;
  char __s;
  _QWORD v32[136];

  v14 = a11;
  v32[134] = *MEMORY[0x1E0C80C00];
  sdRef = 0;
  bzero(&__s, 0x431uLL);
  if (a4)
    goto LABEL_31;
  if (a8 >= 7 && (a2 & 2) != 0 && a9 && a11 && !a11[4])
  {
    v16 = a9 + 6;
    v15 = *(unsigned __int8 *)(a9 + 6);
    if (!*(_BYTE *)(a9 + 6))
    {
      p_s = (char *)v32;
      __s = 46;
      goto LABEL_24;
    }
    v17 = 0;
    p_s = &__s;
    v19 = 1004;
    v20 = a9 + 6;
    while (1)
    {
      if (v17 + 1 + (unint64_t)v15 > 0xFE || v15 > 0x3F || v19 < v15)
      {
LABEL_25:
        v28 = if_nametoindex("awdl0");
        v14 = a11;
        v29 = (void *)CFRetain(a11);
        if (DNSServiceGetAddrInfo(&sdRef, 0x100000u, v28, 2u, &__s, (DNSServiceGetAddrInfoReply)figClusterSynchManager_addressInfoCallBack, v29))
        {
          CFRelease(a11);
        }
        else if (!DNSServiceSetDispatchQueue(sdRef, (dispatch_queue_t)gSerialQueue))
        {
          a11[4] = sdRef;
          sdRef = 0;
          goto LABEL_28;
        }
LABEL_31:
        FigSignalErrorAt();
        break;
      }
      v21 = v15 + v20 + 1;
      v22 = (unsigned __int8 *)(v20 + 1);
      v23 = p_s;
      do
      {
        v25 = *v22++;
        v24 = v25;
        if (v25 == 92 || v24 == 46)
        {
          *v23++ = 92;
LABEL_16:
          v26 = v23;
          goto LABEL_17;
        }
        if (v24 > 0x20)
          goto LABEL_16;
        *(_WORD *)v23 = 12380;
        v27 = (205 * v24) >> 11;
        v26 = v23 + 3;
        v23[2] = v27 | 0x30;
        LOBYTE(v24) = (v24 - 10 * v27) | 0x30;
LABEL_17:
        *v26 = v24;
        v23 = v26 + 1;
      }
      while ((unint64_t)v22 < v21);
      v26[1] = 0;
      v19 -= strlen(p_s);
      v17 += 1 + *(unsigned __int8 *)(v16 + v17);
      p_s = v26 + 2;
      v26[1] = 46;
      v20 = v16 + v17;
      v15 = *(unsigned __int8 *)(v16 + v17);
      if (!*(_BYTE *)(v16 + v17))
      {
LABEL_24:
        *p_s = 0;
        goto LABEL_25;
      }
    }
  }
  if (sdRef)
    DNSServiceRefDeallocate(sdRef);
  if (v14)
LABEL_28:
    CFRelease(v14);
}

void figClusterSynchManager_addressInfoCallBack(int a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7, _QWORD *cf)
{
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  BOOL v15;
  const __CFData *v17;
  _BYTE v18[28];
  UInt8 bytes[16];

  if (a4 == -65791)
    goto LABEL_30;
  if (!a4)
  {
    if (!a6 || !cf)
      goto LABEL_30;
    if (*(_BYTE *)(a6 + 1) == 30)
    {
      v10 = (void *)cf[3];
      memset(v18, 0, 24);
      *(_QWORD *)bytes = 0;
      v11 = getifaddrs((ifaddrs **)bytes);
      v12 = *(_QWORD *)bytes;
      if (v11 || !*(_QWORD *)bytes)
      {
LABEL_12:
        if (!v12)
          goto LABEL_14;
      }
      else
      {
        v13 = *(uint64_t ***)bytes;
        while (1)
        {
          v14 = v13[3];
          if (*((_BYTE *)v14 + 1) == 30 && !strcmp((const char *)v13[1], "awdl0"))
            break;
          v13 = (uint64_t **)*v13;
          if (!v13)
            goto LABEL_12;
        }
        *(_OWORD *)v18 = *(_OWORD *)v14;
        *(_OWORD *)&v18[12] = *(_OWORD *)((char *)v14 + 12);
        if (!v12)
          goto LABEL_14;
      }
      MEMORY[0x194030B84](v12);
LABEL_14:
      *(_OWORD *)bytes = *(_OWORD *)(a6 + 8);
      if (*(_QWORD *)bytes)
        v15 = 0;
      else
        v15 = *(_QWORD *)&bytes[8] == 0;
      if (!v15 && (*(_QWORD *)&v18[8] != *(_QWORD *)bytes || *(_QWORD *)&v18[16] != *(_QWORD *)&bytes[8]))
      {
        v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 16);
        if (!CFSetContainsValue((CFSetRef)gAddedIPs, v17))
        {
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gAddedEnpointsToIPMap, v10, 0))
            figClusterSynchManager_removePeerEndpoint(v10);
          if (gIsPlaying == 1)
            figClusterSynchManager_AddPort(v17);
          CFSetAddValue((CFMutableSetRef)gAddedIPs, v17);
          CFDictionaryAddValue((CFMutableDictionaryRef)gAddedEnpointsToIPMap, v10, v17);
        }
        if (v17)
          CFRelease(v17);
      }
LABEL_30:
      if (!cf)
        return;
      goto LABEL_31;
    }
    FigSignalErrorAt();
LABEL_31:
    CFRelease(cf);
    return;
  }
  FigSignalErrorAt();
  if (cf)
    goto LABEL_31;
}

uint64_t figClusterSynchManager_DeferredInitOnce()
{
  void *v0;
  void *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int out_token;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  out_token = 0;
  v0 = dlopen("/System/Library/PrivateFrameworks/APTransport.framework/APTransport", 4);
  if (!v0
    || (v1 = v0,
        (sAPConnectivityHelperCreate = (uint64_t (*)(_QWORD))dlsym(v0, "APConnectivityHelperCreate")) == 0)
    || (sAPConnectivityHelperUpdateTrafficRegistration = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v1, "APConnectivityHelperUpdateTrafficRegistration")) == 0)
  {
    FigSignalErrorAt();
  }
  gManagerWorkSemaphore = (uint64_t)dispatch_semaphore_create(0);
  gMyDeviceUUID = (uint64_t)CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (dword_1EE2A2EB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  notify_register_dispatch("com.apple.airplay.prefsChanged", &out_token, (dispatch_queue_t)gSerialQueue, &__block_literal_global_37);
  return figClusterSynchManager_updateMyClusterID();
}

uint64_t ADTSGetSampleFrequency(uint64_t a1)
{
  return *(unsigned int *)((char *)&ADTSSampleFrequencies + (*(_BYTE *)(a1 + 2) & 0x3C));
}

uint64_t ADTSGetFrameSize(uint64_t a1)
{
  return (bswap32(*(unsigned __int16 *)(a1 + 4)) >> 21) & 0xFFFFE7FF | ((*(_BYTE *)(a1 + 3) & 3) << 11);
}

uint64_t ADTSGetFormatID(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_1932FB7D0 + (((unint64_t)*(unsigned __int8 *)(a1 + 2) >> 4) & 0xC));
}

uint64_t ADTSGetChannelLayout(uint64_t a1)
{
  unint64_t v1;

  v1 = ((*(unsigned __int8 *)(a1 + 3) >> 6) & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_BYTE *)(a1 + 2) & 1))) - 1;
  if (v1 > 6)
    return 6619138;
  else
    return dword_1932FB7B0[v1];
}

uint64_t ADTSGetADTSHeaderSize(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 1) & 1) != 0)
    return 7;
  else
    return 9;
}

uint64_t FigSCCFormatWriterCreateWithByteStream(const __CFAllocator *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFTypeRef v11;
  CMTime v13;
  CFTypeRef cf;

  cf = 0;
  if (a2 && a4)
  {
    FigFormatWriterGetClassID();
    v7 = CMDerivedObjectCreate();
    v8 = cf;
    if (!(_DWORD)v7)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      Mutable = CFArrayCreateMutable(a1, 1, 0);
      *(_QWORD *)(DerivedStorage + 88) = Mutable;
      if (Mutable)
      {
        if (a1)
          v11 = CFRetain(a1);
        else
          v11 = 0;
        *(_QWORD *)DerivedStorage = v11;
        *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
        CMTimeMake(&v13, 1001, 30000);
        v7 = 0;
        *(CMTime *)(DerivedStorage + 28) = v13;
        *(_DWORD *)(DerivedStorage + 52) = 30;
        *(_BYTE *)(DerivedStorage + 56) = 0;
        *(_DWORD *)(DerivedStorage + 84) = -1;
        *a4 = cf;
        return v7;
      }
      v7 = FigSignalErrorAt();
      v8 = cf;
    }
    if (v8)
      CFRelease(v8);
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  const __CFAllocator *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  void *ValueAtIndex;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v1 = DerivedStorage;
    v2 = *(const __CFArray **)(DerivedStorage + 88);
    if (v2)
    {
      v3 = *(const __CFAllocator **)v1;
      Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        v5 = Count;
        for (i = 0; i != v5; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 88), i);
          CFAllocatorDeallocate(v3, ValueAtIndex);
        }
      }
      v8 = *(const void **)(v1 + 88);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(v1 + 88) = 0;
      }
    }
    v9 = *(const void **)(v1 + 16);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v1 + 16) = 0;
    }
    if (*(_QWORD *)v1)
    {
      CFRelease(*(CFTypeRef *)v1);
      *(_QWORD *)v1 = 0;
    }
    *(_BYTE *)(v1 + 8) = 1;
  }
  return 0;
}

__CFString *sccFormatWriter_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, CFSTR("<SCCFormatWriter: stream<%@>"), v3);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<SCCFormatWriter: stream<%@>"), 0);
  }
  return Mutable;
}

uint64_t sccFormatWriter_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 8) || !FigCFEqual())
    return FigSignalErrorAt();
  v10 = *(CMTime *)(v8 + 60);
  *a4 = CMTimeCopyAsDictionary(&v10, a3);
  return 0;
}

uint64_t sccFormatWriter_SetProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v7;
  CFIndex Count;
  int v9;
  _QWORD *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const __CFArray **)(DerivedStorage + 88);
  if (v7)
  {
    Count = CFArrayGetCount(v7);
    if (!a4)
      return FigSignalErrorAt();
    v9 = Count;
    if (Count >= 1)
      return FigSignalErrorAt();
  }
  else
  {
    if (!a4)
      return FigSignalErrorAt();
    v9 = 0;
  }
  if (a2 == 1668047728 && !*(_BYTE *)(DerivedStorage + 8))
  {
    v10 = CFAllocatorAllocate(*(CFAllocatorRef *)DerivedStorage, 8, 0);
    if (v10)
    {
      *v10 = 0;
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 88), v10);
      *a4 = v9 + 1;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef *v9;
  CFTypeRef v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 8) || !FigCFEqual())
    return FigSignalErrorAt();
  v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v8 + 56))
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v10 = *v9;
  if (*v9)
    v10 = CFRetain(v10);
  *a5 = v10;
  return 0;
}

uint64_t sccFormatWriter_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  if (!FigCFEqual())
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v8 = CFGetTypeID(a4);
  if (v8 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  *(_BYTE *)(v7 + 56) = CFBooleanGetValue((CFBooleanRef)a4);
  return 0;
}

uint64_t sccFormatWriter_AddSampleBufferToTrack(uint64_t a1, int a2, opaqueCMSampleBuffer *a3)
{
  uint64_t DerivedStorage;
  const __CFArray *Count;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t result;
  _QWORD refcon[2];
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = *(const __CFArray **)(DerivedStorage + 88);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  v7 = (a2 - 1);
  if (!a3 || a2 < 1 || (uint64_t)Count <= v7 || *(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 88), v7);
  refcon[0] = DerivedStorage;
  refcon[1] = ValueAtIndex;
  if (*(_BYTE *)(DerivedStorage + 24))
    return CMSampleBufferCallForEachSample(a3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))sccFormatWriterEachSampleCallback, refcon);
  strcpy((char *)v12, "Scenarist_SCC V1.0");
  v11 = 0;
  result = CMByteStreamAppend();
  if (!(_DWORD)result)
  {
    LODWORD(v11) = 168626701;
    v12[0] = 0;
    result = CMByteStreamAppend();
    if (!(_DWORD)result)
    {
      *(_BYTE *)(DerivedStorage + 24) = 1;
      return CMSampleBufferCallForEachSample(a3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))sccFormatWriterEachSampleCallback, refcon);
    }
  }
  return result;
}

uint64_t sccFormatWriter_Flush()
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t sccFormatWriter_WriteHeader()
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t sccFormatWriter_BeginSession()
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t sccFormatWriter_EndSession()
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t sccFormatWriterEachSampleCallback(opaqueCMSampleBuffer *a1, uint64_t a2, uint64_t *a3)
{
  FourCharCode *v4;
  uint64_t v5;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v7;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  size_t SampleSize;
  uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription;
  BOOL v12;
  int v13;
  uint64_t v14;
  FourCharCode v15;
  size_t v16;
  char *v17;
  _OWORD *v18;
  float v19;
  signed int v20;
  signed int v21;
  int v22;
  uint64_t v23;
  signed int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int32_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  size_t v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  CMTime *v55;
  signed int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int *v60;
  char *v61;
  size_t v62;
  int v63;
  CMTime v64;
  CMTime v65;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMTime v68;
  CMBlockBufferRef blockBufferOut[2];
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime __str;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v4 = (FourCharCode *)a3[1];
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  blockBufferOut[0] = 0;
  if (!DataBuffer)
    return 0;
  v7 = DataBuffer;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  memset(&v68, 0, sizeof(v68));
  CMSampleBufferGetOutputPresentationTimeStamp(&v68, a1);
  SampleSize = CMSampleBufferGetSampleSize(a1, 0);
  dataPointerOut = 0;
  totalLengthOut = 0;
  if (!FormatDescription || (v68.flags & 1) == 0 || !SampleSize)
    goto LABEL_22;
  LODWORD(time1.value) = 0;
  LODWORD(time2.value) = 0;
  ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(FormatDescription, (unsigned int *)&time1, (unsigned int *)&time2);
  if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
    goto LABEL_23;
  v12 = !LODWORD(time2.value) || LODWORD(time1.value) == 0;
  v13 = v12 ? 1 : LODWORD(time2.value);
  if (LODWORD(time2.value) && LODWORD(time1.value) && LODWORD(time1.value) != 1681272888)
  {
LABEL_22:
    ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (*v4)
  {
    if (MediaSubType != *v4)
      goto LABEL_22;
  }
  else
  {
    *v4 = MediaSubType;
  }
  v15 = v4[1];
  if (v15)
  {
    if (v13 != v15)
      goto LABEL_22;
  }
  else
  {
    v4[1] = v13;
  }
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  time2 = v68;
  if (CMTimeCompare(&time1, &time2) >= 1)
    goto LABEL_22;
  CMTimeMake(&v65, 360000, 1);
  time1 = v68;
  if ((CMTimeCompare(&time1, &v65) & 0x80000000) == 0)
    goto LABEL_22;
  if (!CMBlockBufferIsRangeContiguous(v7, 0, 0))
  {
    ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, blockBufferOut);
    if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
      goto LABEL_23;
    v7 = blockBufferOut[0];
  }
  ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMBlockBufferGetDataPointer(v7, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
    goto LABEL_23;
  v17 = dataPointerOut;
  v16 = totalLengthOut;
  v64 = v68;
  time1 = v68;
  v18 = (_OWORD *)(v5 + 28);
  v19 = CMTimeGetSeconds(&time1) * (float)((float)*(int *)(v5 + 36) / (float)*(uint64_t *)(v5 + 28));
  v20 = llroundf(v19);
  v21 = *(_DWORD *)(v5 + 84);
  if (v21 != -1 && v21 >= v20)
  {
    v14 = 4294954663;
    goto LABEL_101;
  }
  __str.timescale = 0;
  __str.value = 0;
  blockBufferOut[1] = 0;
  if (!*(_BYTE *)(v5 + 56)
    || (CMTimeMake(&time1, 1001, 30000),
        *(_OWORD *)&time2.value = *v18,
        time2.epoch = *(_QWORD *)(v5 + 44),
        CMTimeCompare(&time1, &time2))
    && (CMTimeMake(&time2, 100, 2997),
        *(_OWORD *)&rhs.value = *v18,
        rhs.epoch = *(_QWORD *)(v5 + 44),
        CMTimeCompare(&time2, &rhs)))
  {
    v22 = *(_DWORD *)(v5 + 52);
    v23 = 58;
    v24 = v20;
  }
  else
  {
    v22 = *(_DWORD *)(v5 + 52);
    v25 = 600 * v22 - 18;
    v26 = 18 * (v20 / v25);
    v27 = v20 % v25;
    v28 = __OFSUB__(v27, 60 * v22);
    v29 = v27 - 60 * v22;
    if (v29 < 0 == v28)
      v26 += 2 * (v29 / (60 * v22 - 2)) + 2;
    v24 = v26 + v20;
    v23 = 59;
  }
  snprintf((char *)&__str, 0xCuLL, "%02d:%02d:%02d%c%02d", ((char)(v24 / v22) / 16), ((char)(v24 / v22 / 60) % 60), (v24 / v22 % 60), v23, (v24 % v22));
  strlen((const char *)&__str);
  ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMByteStreamAppend();
  if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
  {
LABEL_23:
    v14 = ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription;
    goto LABEL_101;
  }
  if (MediaSubType != 1635017571)
  {
    if (MediaSubType != 1664495672)
    {
      v14 = 4294954662;
      goto LABEL_101;
    }
    v55 = (CMTime *)(v5 + 28);
    v56 = v20;
    if ((v13 - 3) >= 2)
      v30 = 1667522932;
    else
      v30 = 1667527730;
    v58 = v30;
    v57 = v5;
    if (v16 >= 9)
    {
      v31 = 0;
      v32 = 0;
      v33 = *(_QWORD *)(v5 + 16);
      v34 = (unsigned int *)v17;
      while (1)
      {
        v35 = bswap32(*v34);
        if (v35 < 8 || v16 < v35)
        {
          v14 = 4294954659;
          goto LABEL_101;
        }
        v60 = v34;
        v62 = v16;
        if (v58 == bswap32(v34[1]))
        {
          v37 = v35 - 8;
          if (v35 != 8)
            break;
        }
LABEL_68:
        v34 = (unsigned int *)((char *)v60 + v35);
        v16 = v62 - v35;
        if (v62 - v35 <= 8)
          goto LABEL_99;
      }
      v38 = 0;
      while (1)
      {
        LOWORD(time2.value) = 0;
        if (v38 + 1 >= v37)
          v39 = 1;
        else
          v39 = 2;
        __memcpy_chk();
        if (v38 + 1 >= v37)
          BYTE1(time2.value) = 0x80;
        v40 = v32 ? 32 : 9;
        LOBYTE(rhs.value) = v40;
        time1.value = 0;
        ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMByteStreamAppend();
        if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
          goto LABEL_23;
        ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = sccFormatWriterWriteBytePair(v33, LOBYTE(time2.value), BYTE1(time2.value));
        if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
          goto LABEL_23;
        ++v31;
        v38 += v39;
        v32 = 1;
        if (v38 >= v37)
          goto LABEL_68;
      }
    }
LABEL_98:
    v31 = 0;
    goto LABEL_99;
  }
  v55 = (CMTime *)(v5 + 28);
  v56 = v20;
  v57 = v5;
  if (v16 < 8)
    goto LABEL_98;
  v41 = 0;
  v31 = 0;
  v42 = *(_QWORD *)(v5 + 16);
  v43 = v13 - 5;
  while (*v17 != 71 || v17[1] != 65 || v17[2] != 57 || v17[3] != 52 || v17[4] != 3)
  {
    ++v17;
    --v16;
LABEL_95:
    if (v16 <= 7)
      goto LABEL_99;
  }
  v44 = v17[5];
  v45 = v44 & 0x1F;
  if (v16 - 7 >= 3 * (unint64_t)(v44 & 0x1F))
  {
    v59 = 3 * (v44 & 0x1F);
    v61 = v17 + 5;
    if ((v17[5] & 0x40) != 0 && (v44 & 0x1F) != 0)
    {
      v46 = 0;
      v47 = (unsigned __int8 *)(v17 + 9);
      v63 = v44 & 0x1F;
      do
      {
        v48 = *(v47 - 2);
        if ((v48 & 3) <= 1 && v48 >= 0xFC && v43 < 0xFFFFFFFE != ((v48 & 3) == 1))
        {
          v50 = *(v47 - 1);
          v51 = *v47;
          if (v41)
            v52 = 32;
          else
            v52 = 9;
          LOBYTE(time2.value) = v52;
          time1.value = 0;
          ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMByteStreamAppend();
          if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
            goto LABEL_23;
          ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = sccFormatWriterWriteBytePair(v42, v50, v51);
          if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
            goto LABEL_23;
          ++v31;
          v41 = 1;
          v45 = v63;
        }
        ++v46;
        v47 += 3;
      }
      while (v46 < v45);
    }
    v53 = (v59 + 2);
    v17 = &v61[v53];
    v16 = v16 - 5 - v53;
    goto LABEL_95;
  }
  ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigSignalErrorAt();
  v31 = 0;
  if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
    goto LABEL_23;
LABEL_99:
  LODWORD(time2.value) = 168626701;
  time1.value = 0;
  v14 = CMByteStreamAppend();
  if (!(_DWORD)v14)
  {
    time2 = *v55;
    memset(&time1, 0, sizeof(time1));
    CMTimeMultiply(&time1, &time2, v31);
    time2 = v64;
    rhs = time1;
    CMTimeAdd(&__str, &time2, &rhs);
    *(CMTime *)(v57 + 60) = __str;
    *(_DWORD *)(v57 + 84) = v56 + v31 - 1;
  }
LABEL_101:
  if (blockBufferOut[0])
    CFRelease(blockBufferOut[0]);
  return v14;
}

uint64_t sccFormatWriterWriteBytePair(uint64_t a1, int a2, int a3)
{
  char __str[4];
  char v5;

  v5 = 0;
  *(_DWORD *)__str = 0;
  snprintf(__str, 5uLL, "%02x%02x", a2, a3);
  strlen(__str);
  return CMByteStreamAppend();
}

uint64_t DDPlusGetSyncFrameInfo(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *(_BYTE *)(a1 + 2) >> 6;
  *a3 = (*(_BYTE *)(a1 + 2) >> 3) & 7;
  return 0;
}

uint64_t DDPlusGetAudioBlockCountForSyncFrame(uint64_t a1)
{
  return DDPNumberOfAudioBlocksPerSyncframe[((unint64_t)*(unsigned __int8 *)(a1 + 4) >> 4) & 3];
}

uint64_t DolbyCreateChannelLayout(uint64_t a1, _QWORD *a2, UInt32 *a3)
{
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  _DWORD *v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  UInt32 ioPropertyDataSize;
  int outPropertyData;
  _OWORD __src[27];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  outPropertyData = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = 6619138;
    v6 = *(unsigned __int8 *)(a1 + 15);
    switch(*(_BYTE *)(a1 + 14))
    {
      case 1:
        v7 = v6 == 0;
        v5 = 9764866;
        v8 = 6553601;
        goto LABEL_38;
      case 2:
        v16 = v6 == 0;
        v17 = 8716291;
        goto LABEL_34;
      case 3:
        v5 = 9961476;
        v7 = v6 == 0;
        v8 = 9830403;
        goto LABEL_38;
      case 4:
        v7 = v6 == 0;
        v5 = 10027012;
        v8 = 8585219;
        goto LABEL_38;
      case 5:
        v5 = 9895940;
        v16 = v6 == 0;
        v17 = 10092549;
LABEL_34:
        if (!v16)
          v5 = v17;
        break;
      case 6:
        v7 = v6 == 0;
        v5 = 9043973;
        v8 = 8650756;
        goto LABEL_38;
      case 7:
        v7 = v6 == 0;
        v5 = 8060934;
        v8 = 7798789;
        goto LABEL_38;
      default:
        goto LABEL_40;
    }
    goto LABEL_40;
  }
  v9 = *(unsigned __int16 *)(a1 + 12);
  if (v9 == 53505 || v9 == 41217)
  {
    v7 = v9 == 41217;
    v5 = 10092549;
    v8 = 10027012;
LABEL_38:
    if (v7)
      v5 = v8;
LABEL_40:
    outPropertyData = v5;
    goto LABEL_41;
  }
  ioPropertyDataSize = 4;
  memset(__src, 0, sizeof(__src));
  v35 = 0;
  if ((v9 & 0x8000) == 0)
  {
    v11 = 0;
    if ((v9 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  v11 = 1;
  LODWORD(__src[0]) = 1;
  if ((v9 & 0x4000) != 0)
  {
LABEL_12:
    v12 = 20 * v11++;
    *(_DWORD *)((char *)__src + v12) = 3;
  }
LABEL_13:
  if ((v9 & 0x2000) != 0)
  {
    v19 = 20 * v11++;
    *(_DWORD *)((char *)__src + v19) = 2;
    if ((v9 & 0x1000) == 0)
    {
LABEL_15:
      if ((v9 & 0x800) == 0)
        goto LABEL_16;
      goto LABEL_45;
    }
  }
  else if ((v9 & 0x1000) == 0)
  {
    goto LABEL_15;
  }
  v20 = 20 * v11++;
  *(_DWORD *)((char *)__src + v20) = 5;
  if ((v9 & 0x800) == 0)
  {
LABEL_16:
    if ((v9 & 1) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  v21 = 20 * v11++;
  *(_DWORD *)((char *)__src + v21) = 6;
  if ((v9 & 1) == 0)
  {
LABEL_17:
    if ((v9 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  v22 = 20 * v11++;
  *(_DWORD *)((char *)__src + v22) = 4;
  if ((v9 & 0x400) == 0)
  {
LABEL_18:
    if ((v9 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  *((_DWORD *)__src + 5 * v11) = 7;
  v23 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v23) = 8;
  if ((v9 & 0x200) == 0)
  {
LABEL_19:
    if ((v9 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  *((_DWORD *)__src + 5 * v11) = 33;
  v24 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v24) = 34;
  if ((v9 & 0x100) == 0)
  {
LABEL_20:
    if ((v9 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v25 = 20 * v11++;
  *(_DWORD *)((char *)__src + v25) = 9;
  if ((v9 & 0x80) == 0)
  {
LABEL_21:
    if ((v9 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  v26 = 20 * v11++;
  *(_DWORD *)((char *)__src + v26) = 12;
  if ((v9 & 0x40) == 0)
  {
LABEL_22:
    if ((v9 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  *((_DWORD *)__src + 5 * v11) = 10;
  v27 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v27) = 11;
  if ((v9 & 0x20) == 0)
  {
LABEL_23:
    if ((v9 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  *((_DWORD *)__src + 5 * v11) = 35;
  v28 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v28) = 36;
  if ((v9 & 0x10) == 0)
  {
LABEL_24:
    if ((v9 & 8) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  *((_DWORD *)__src + 5 * v11) = 13;
  v29 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v29) = 15;
  if ((v9 & 8) == 0)
  {
LABEL_25:
    if ((v9 & 4) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  v30 = 20 * v11++;
  *(_DWORD *)((char *)__src + v30) = 14;
  if ((v9 & 4) == 0)
  {
LABEL_26:
    if ((v9 & 2) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_55:
  *((_DWORD *)__src + 5 * v11) = 38;
  v31 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v31) = 39;
  if ((v9 & 2) != 0)
  {
LABEL_27:
    v13 = 20 * v11++;
    *(_DWORD *)((char *)__src + v13) = 37;
  }
LABEL_28:
  v14 = 20 * (v11 - 1) + 32;
  *(_QWORD *)a3 = v14;
  v15 = malloc_type_calloc(1uLL, v14, 0x7D367AC1uLL);
  *v15 = 0;
  v15[2] = v11;
  memcpy(v15 + 3, __src, 20 * v11);
  if (!AudioFormatGetProperty(0x636D7074u, *a3, v15, &ioPropertyDataSize, &outPropertyData))
  {
    free(v15);
LABEL_41:
    v15 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
    *v15 = outPropertyData;
    *(_QWORD *)a3 = 32;
  }
  *a2 = v15;
  return 0;
}

uint64_t DolbyGetFormatID(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 5) - 88 >= 0x30)
    return 1633889587;
  else
    return 1700998451;
}

uint64_t DolbyGetSamplesPerFrame()
{
  return 1536;
}

uint64_t DolbyGetSampleFrequency(uint64_t a1)
{
  unint64_t v1;

  v1 = (unint64_t)*(unsigned __int8 *)(a1 + 4) >> 6;
  if ((_DWORD)v1 == 3)
    return 0;
  else
    return DolbyAudioSampleFrequencies[v1];
}

uint64_t DolbyGetFrameSize(_BYTE *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  char *v5;
  int v6;

  if ((a1[5] + 120) <= 0xCFu)
  {
    v1 = a1[4];
    v2 = v1 & 0x3F;
    if ((v1 & 0x3F) > 0x25)
      return 0;
    v3 = v1 >> 6;
    if ((_DWORD)v3 == 3)
      goto LABEL_9;
    v4 = DolbyAudioSampleFrequencies[v3];
    if (v4 == 32000)
    {
      v5 = (char *)&DolbyAudioBitRates + 16 * v2 + 4;
      goto LABEL_11;
    }
    if (v4 != 44100)
LABEL_9:
      v5 = (char *)&DolbyAudioBitRates + 16 * v2 + 12;
    else
      v5 = (char *)&DolbyAudioBitRates + 16 * v2 + 8;
LABEL_11:
    v6 = *(_DWORD *)v5;
    return (2 * v6);
  }
  v6 = (a1[3] | ((a1[2] & 7) << 8)) + 1;
  return (2 * v6);
}

uint64_t DolbyCreateMagicCookie(_BYTE *a1, unsigned __int8 *a2, OpaqueCMBlockBuffer *a3, _QWORD *a4, size_t *a5)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  size_t v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  int ChanMapForDependentStream;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  size_t v45;
  size_t *v46;
  _BYTE *v47;
  char v48;
  char *returnedPointerOut;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  OpaqueCMBlockBuffer *v56;
  char *v57[2];
  __int128 v58;
  uint64_t v59;
  _BYTE temporaryBlock[10];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = a2[5];
  if ((v7 + 120) >= 0xD0u)
  {
    v16 = a1;
    v17 = a1[18];
    v18 = 3 * v17 + 10;
    if (a1[18])
    {
      v19 = a1 + 19;
      do
      {
        if (*v19++)
          ++v18;
        --v17;
      }
      while (v17);
    }
    if (a1[17])
      v21 = v18 + 2;
    else
      v21 = v18;
    v22 = malloc_type_malloc(v21, 0xBA61FDC9uLL);
    if (!v22)
      return FigSignalErrorAt();
    v23 = v22;
    v46 = a5;
    v45 = v21;
    *v22 = bswap32(v21);
    v22[1] = 862152036;
    v24 = v16[18];
    *((_WORD *)v22 + 4) = bswap32((v24 - 1) | (*((_DWORD *)v16 + 2) / 0x7Du) & 0xFFF8) >> 16;
    if (!v24)
    {
      v27 = 10;
LABEL_88:
      if (v16[17])
      {
        v43 = (char *)v23 + v27;
        *v43 = 1;
        v43[1] = v16[17];
      }
      *a4 = v23;
      *v46 = v45;
      return 0;
    }
    v25 = 0;
    v26 = 0;
    v27 = 10;
    v47 = v16;
    while (1)
    {
      returnedPointerOut = 0;
      CMBlockBufferAccessDataBytes(a3, v26, 0xAuLL, temporaryBlock, &returnedPointerOut);
      v28 = returnedPointerOut[2];
      v29 = returnedPointerOut[5];
      v48 = returnedPointerOut[4];
      v59 = 0;
      v57[0] = 0;
      v58 = 0u;
      v52 = 0;
      v56 = a3;
      v57[1] = (char *)(v26 + 2);
      if (!CMBlockBufferGetDataPointer(a3, v26 + 2, (size_t *)&v58, 0, v57))
      {
        *((_QWORD *)&v58 + 1) = 0;
        v59 = 0;
      }
      v54 = 0;
      v55 = 0;
      v53 = 0;
      BitStreamFetch((uint64_t)&v56, 2, (int *)&v55 + 1);
      v59 += 14;
      BitStreamFetch((uint64_t)&v56, 2, (int *)&v55);
      BitStreamFetch((uint64_t)&v56, 2, (int *)&v53 + 1);
      BitStreamFetch((uint64_t)&v56, 3, (int *)&v54 + 1);
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v54);
      v59 += 10;
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if ((_DWORD)v53)
        v59 += 8;
      v30 = HIDWORD(v54);
      if (!HIDWORD(v54))
      {
        v59 += 5;
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if ((_DWORD)v53)
          v59 += 8;
      }
      v31 = HIDWORD(v55);
      if (HIDWORD(v55) == 1)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if ((_DWORD)v53)
          v59 += 16;
      }
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if (!(_DWORD)v53)
        goto LABEL_46;
      if (v30 >= 3)
      {
        v32 = v59;
        v59 += 2;
        if ((v30 & 1) != 0)
          v59 = v32 + 8;
      }
      if ((v30 & 4) != 0)
        v59 += 6;
      if ((_DWORD)v54)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if ((_DWORD)v53)
          v59 += 5;
      }
      if (v31)
        goto LABEL_46;
      v51 = 0;
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if ((_DWORD)v53)
        v59 += 6;
      if (!v30)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if ((_DWORD)v53)
          v59 += 6;
      }
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if ((_DWORD)v53)
        v59 += 6;
      BitStreamFetch((uint64_t)&v56, 2, &v51);
      if (v51 == 3)
        break;
      if (v51 == 2)
      {
        v41 = v59 + 12;
        goto LABEL_70;
      }
      if (v51 == 1)
      {
        v41 = v59 + 5;
LABEL_70:
        v59 = v41;
      }
      if (v30 <= 1)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if ((_DWORD)v53)
          v59 += 14;
        if (!v30)
        {
          BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
          if ((_DWORD)v53)
            v59 += 14;
        }
      }
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if ((_DWORD)v53)
      {
        if (HIDWORD(v53))
        {
          if (DDPNumberOfAudioBlocksPerSyncframe[HIDWORD(v53)] <= 1u)
            v42 = 1;
          else
            v42 = DDPNumberOfAudioBlocksPerSyncframe[HIDWORD(v53)];
          do
          {
            BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
            if ((_DWORD)v53)
              v59 += 5;
            --v42;
          }
          while (v42);
        }
        else
        {
          v59 += 5;
        }
      }
LABEL_46:
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      v33 = v53;
      if ((_DWORD)v53)
      {
        BitStreamFetch((uint64_t)&v56, 3, &v52);
        v33 = v52;
      }
      v16 = v47;
      v34 = (char *)v23 + v27;
      *v34 = (v29 >> 2) & 0x3E | v28 & 0xC0;
      v34[1] = v48 & 0xF | ((v25 != 0) << 7) | (16 * v33);
      v35 = &v47[v25 + 19];
      *((_BYTE *)v23 + v27 + 2) = 2 * *v35;
      v26 += DolbyGetFrameSize(returnedPointerOut);
      if (*v35)
      {
        v36 = 0;
        v37 = 0;
        do
        {
          LOWORD(v56) = 0;
          CMBlockBufferAccessDataBytes(a3, v26, 0xAuLL, temporaryBlock, &returnedPointerOut);
          ChanMapForDependentStream = ddplusGetChanMapForDependentStream((uint64_t)returnedPointerOut, &v56);
          v39 = (unsigned __int16)v56;
          if (!ChanMapForDependentStream)
            v39 = 0;
          v36 |= v39;
          v26 += DolbyGetFrameSize(returnedPointerOut);
          ++v37;
        }
        while (v37 < *v35);
        *((_BYTE *)v23 + v27 + 2) |= (v36 & 2) != 0;
        *((_BYTE *)v23 + v27 + 3) = v36 & 0x20 | ((v36 & 0x400) != 0) | BYTE1(v36) & 2 | (v36 >> 6) & 4 | (v36 >> 4) & 8 | (v36 >> 2) & 0x10 | (((v36 & 0x10) != 0) << 6) | (16 * v36) & 0x80;
        v40 = 4;
        v16 = v47;
      }
      else
      {
        v40 = 3;
      }
      v27 += v40;
      if (++v25 >= (unint64_t)v16[18])
        goto LABEL_88;
    }
    v50 = 0;
    BitStreamFetch((uint64_t)&v56, 5, &v50);
    v41 = 8;
    goto LABEL_70;
  }
  v8 = a2[6];
  v9 = v8 >> 5;
  if (((v8 >> 5 != 1) & (v8 >> 5)) != 0)
    v10 = 2;
  else
    v10 = 4;
  if ((v8 & 0x80u) == 0)
    v11 = v10;
  else
    v11 = v10 - 2;
  if (v9 == 2)
    v12 = v11 - 2;
  else
    v12 = v11;
  if (v12 < 0)
  {
    v8 = a2[7];
    LOBYTE(v12) = v12 + 8;
  }
  v13 = a2[4];
  v14 = malloc_type_malloc(0xBuLL, 0x10000403B807CB7uLL);
  if (v14)
  {
    *(_QWORD *)v14 = 0x336361640B000000;
    v14[8] = v13 & 0xC0 | (v7 >> 2);
    v14[9] = ((_BYTE)v7 << 6) | (8 * v9) | (4 * ((v8 >> v12) & 1)) | (v13 >> 4) & 3;
    v14[10] = (16 * v13) & 0xE0;
    *a4 = v14;
    *a5 = 11;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t DolbyGetSampleInfo(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  size_t DataLength;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  size_t v28;
  unint64_t v29;
  size_t v30;
  int v31;
  unsigned int v32;
  size_t v33;
  char *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  unsigned int v43;
  int ChanMapForDependentStream;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  __int16 v49;
  unsigned __int16 v50;
  char *returnedPointerOut;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE temporaryBlock[10];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  returnedPointerOut = 0;
  result = CMBlockBufferAccessDataBytes(theBuffer, 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if ((_DWORD)result)
    return result;
  v5 = (unsigned __int8 *)returnedPointerOut;
  v6 = (returnedPointerOut[5] + 120);
  if (v6 >= 0xD0)
    v7 = 1700998451;
  else
    v7 = 1633889587;
  *(_DWORD *)a1 = v7;
  v8 = (unint64_t)v5[4] >> 6;
  if ((_DWORD)v8 == 3)
    v9 = 0;
  else
    v9 = DolbyAudioSampleFrequencies[v8];
  *(_DWORD *)(a1 + 4) = v9;
  if (v6 <= 0xCF)
  {
    v10 = v5[4] & 0x3F;
    if (v10 <= 0x25)
      v11 = 1000 * DolbyAudioBitRates[4 * v10];
    else
      v11 = 0;
    *(_DWORD *)(a1 + 8) = v11;
    v15 = v5[6];
    v16 = v15 >> 5;
    *(_BYTE *)(a1 + 15) = 0;
    if ((((v15 >> 5) != 1) & (v15 >> 5)) != 0)
      v17 = 2;
    else
      v17 = 4;
    if ((v15 & 0x80u) == 0)
      v18 = v17;
    else
      v18 = v17 - 2;
    if ((_DWORD)v16 == 2)
      v18 -= 2;
    if (v18 < 0)
    {
      v19 = v5[7];
      LOBYTE(v18) = v18 + 8;
    }
    else
    {
      v19 = v15;
    }
    result = 0;
    v23 = (v19 >> v18) & 1;
    *(_BYTE *)(a1 + 15) = v23;
    *(_BYTE *)(a1 + 14) = v15 >> 5;
    *(_BYTE *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 12) = acmodToChannelMap[v16] | v23;
    *(_BYTE *)(a1 + 18) = 1;
    return result;
  }
  v69 = 0u;
  v70 = 0u;
  v68 = 0u;
  v67 = 0;
  v66 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v13 = 0;
  do
  {
    if (v13 >= DataLength)
      goto LABEL_126;
    *(_QWORD *)&v68 = theBuffer;
    *(_QWORD *)&v69 = v13;
    if (CMBlockBufferGetDataPointer(theBuffer, v13, (size_t *)&v69 + 1, 0, (char **)&v68 + 1))
    {
      v14 = *((_QWORD *)&v70 + 1);
    }
    else
    {
      v14 = 0;
      *(_QWORD *)&v70 = 0;
    }
    *((_QWORD *)&v70 + 1) = v14 + 16;
    result = BitStreamFetch((uint64_t)&v68, 2, (int *)&v67 + 1);
    if ((_DWORD)result)
      return result;
    result = BitStreamFetch((uint64_t)&v68, 3, (int *)&v67);
    if ((_DWORD)result)
      return result;
    result = BitStreamFetch((uint64_t)&v68, 11, &v66);
    if ((_DWORD)result)
      return result;
    v13 += (2 * v66 + 2);
  }
  while (v67);
  v65 = 0;
  result = BitStreamFetch((uint64_t)&v68, 2, (int *)&v65);
  if (!(_DWORD)result)
  {
    v64 = 0;
    result = BitStreamFetch((uint64_t)&v68, 2, &v64);
    if (!(_DWORD)result)
    {
      v63 = 0;
      result = BitStreamFetch((uint64_t)&v68, 3, (int *)&v63);
      if (!(_DWORD)result)
      {
        v62 = 0;
        result = BitStreamFetch((uint64_t)&v68, 1, &v62);
        if (!(_DWORD)result)
        {
          v61 = 0;
          result = BitStreamFetch((uint64_t)&v68, 5, &v61);
          if (!(_DWORD)result)
          {
            if ((v61 - 17) < 0xFFFFFFFA)
              return 4294954516;
            *((_QWORD *)&v70 + 1) += 5;
            v52 = 0;
            result = BitStreamFetch((uint64_t)&v68, 1, &v52);
            if ((_DWORD)result)
              return result;
            if (v52)
              *((_QWORD *)&v70 + 1) += 8;
            v20 = v63;
            if (!v63)
            {
              *((_QWORD *)&v70 + 1) += 5;
              v52 = 0;
              result = BitStreamFetch((uint64_t)&v68, 1, &v52);
              if ((_DWORD)result)
                return result;
              if (v52)
                *((_QWORD *)&v70 + 1) += 8;
            }
            v59 = 0;
            result = BitStreamFetch((uint64_t)&v68, 1, &v59);
            if (!(_DWORD)result)
            {
              if (!v59)
                goto LABEL_97;
              if (v20 >= 3)
              {
                v21 = *((_QWORD *)&v70 + 1);
                *((_QWORD *)&v70 + 1) += 2;
                if ((v20 & 1) != 0)
                  *((_QWORD *)&v70 + 1) = v21 + 8;
              }
              if ((v20 & 4) != 0)
                *((_QWORD *)&v70 + 1) += 6;
              if (v62)
              {
                v52 = 0;
                result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                if ((_DWORD)result)
                  return result;
                if (v52)
                  *((_QWORD *)&v70 + 1) += 5;
              }
              v52 = 0;
              result = BitStreamFetch((uint64_t)&v68, 1, &v52);
              if (!(_DWORD)result)
              {
                if (v52)
                  *((_QWORD *)&v70 + 1) += 6;
                if (!v20)
                {
                  v52 = 0;
                  result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                  if ((_DWORD)result)
                    return result;
                  if (v52)
                    *((_QWORD *)&v70 + 1) += 6;
                }
                v52 = 0;
                result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                if (!(_DWORD)result)
                {
                  if (v52)
                    *((_QWORD *)&v70 + 1) += 6;
                  result = BitStreamFetch((uint64_t)&v68, 2, (int *)&v58 + 1);
                  if (!(_DWORD)result)
                  {
                    switch(HIDWORD(v58))
                    {
                      case 1:
                        v22 = 5;
                        break;
                      case 3:
                        result = BitStreamFetch((uint64_t)&v68, 5, (int *)&v57 + 1);
                        if ((_DWORD)result)
                          return result;
                        v22 = (8 * HIDWORD(v57) + 16);
                        break;
                      case 2:
                        v22 = 12;
                        break;
                      default:
LABEL_77:
                        if (v20 <= 1)
                        {
                          result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v58);
                          if ((_DWORD)result)
                            return result;
                          if ((_DWORD)v58)
                            *((_QWORD *)&v70 + 1) += 14;
                          if (!v20)
                          {
                            result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v57);
                            if ((_DWORD)result)
                              return result;
                            if ((_DWORD)v57)
                              *((_QWORD *)&v70 + 1) += 14;
                          }
                        }
                        result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v56 + 1);
                        if (!(_DWORD)result)
                        {
                          if (HIDWORD(v56))
                          {
                            if (v64)
                            {
                              if (DDPNumberOfAudioBlocksPerSyncframe[v64] <= 1u)
                                v24 = 1;
                              else
                                v24 = DDPNumberOfAudioBlocksPerSyncframe[v64];
                              while (1)
                              {
                                v52 = 0;
                                result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                                if ((_DWORD)result)
                                  return result;
                                if (v52)
                                  *((_QWORD *)&v70 + 1) += 5;
                                if (!--v24)
                                  goto LABEL_97;
                              }
                            }
                            *((_QWORD *)&v70 + 1) += 5;
                          }
LABEL_97:
                          result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v56);
                          if ((_DWORD)result)
                            return result;
                          if (!(_DWORD)v56)
                          {
LABEL_113:
                            if (v64 != 3)
                              ++*((_QWORD *)&v70 + 1);
                            result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v54 + 1);
                            if ((_DWORD)result)
                              return result;
                            if (HIDWORD(v54) != 1)
                              goto LABEL_126;
                            result = BitStreamFetch((uint64_t)&v68, 6, (int *)&v54);
                            if ((_DWORD)result)
                              return result;
                            if ((_DWORD)v54 != 1)
                              goto LABEL_126;
                            result = BitStreamFetch((uint64_t)&v68, 7, (int *)&v53 + 1);
                            if ((_DWORD)result)
                              return result;
                            if (HIDWORD(v53))
                              goto LABEL_126;
                            result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v53);
                            if ((_DWORD)result)
                              return result;
                            if ((_DWORD)v53 == 1)
                            {
                              result = BitStreamFetch((uint64_t)&v68, 8, &v60);
                              if ((_DWORD)result)
                                return result;
                              v27 = v60;
                              if ((v60 - 17) < 0xFFFFFFF0)
                                return 4294954516;
                            }
                            else
                            {
LABEL_126:
                              v27 = 0;
                            }
                            *(_BYTE *)(a1 + 17) = v27;
                            v28 = CMBlockBufferGetDataLength(theBuffer);
                            LODWORD(v29) = *(_DWORD *)(a1 + 4);
                            *(_DWORD *)(a1 + 8) = ((double)v28 * 8.0 * ((double)v29 / 1536.0));
                            *(_BYTE *)(a1 + 16) = 1;
                            if (!v28)
                            {
LABEL_159:
                              v50 = acmodToChannelMap[*(unsigned __int8 *)(a1 + 14)];
                              *(_WORD *)(a1 + 12) = v50;
                              if (!*(_BYTE *)(a1 + 15))
                                return 0;
                              result = 0;
                              *(_WORD *)(a1 + 12) = v50 | 1;
                              return result;
                            }
                            v30 = v28;
                            v31 = 0;
                            v32 = 0;
                            v33 = 0;
                            while (1)
                            {
                              LOWORD(v68) = 0;
                              result = CMBlockBufferAccessDataBytes(theBuffer, v33, 0xAuLL, temporaryBlock, &returnedPointerOut);
                              if ((_DWORD)result)
                                return result;
                              v34 = returnedPointerOut;
                              v35 = returnedPointerOut[2];
                              v36 = returnedPointerOut[4];
                              v37 = (v36 >> 1) & 7;
                              v38 = v36 & 1;
                              if ((v35 & 0x40) != 0)
                                break;
                              v39 = *(unsigned __int8 *)(a1 + 18);
                              if (v39 == 8)
                                goto LABEL_158;
                              v32 = (v35 >> 3) & 7;
                              *(_BYTE *)(a1 + 18) = v39 + 1;
                              if (v31)
                              {
                                if (!v32)
                                {
LABEL_158:
                                  if (!*(_BYTE *)(a1 + 16))
                                    return 0;
                                  goto LABEL_159;
                                }
LABEL_138:
                                ChanMapForDependentStream = 0;
                                goto LABEL_139;
                              }
                              ChanMapForDependentStream = 0;
                              *(_BYTE *)(a1 + 14) = v37;
                              *(_BYTE *)(a1 + 15) = v38;
                              v31 = 1;
LABEL_139:
                              v45 = *(unsigned __int8 *)(a1 + 16);
                              if (*(_BYTE *)(a1 + 16))
                              {
                                v46 = *(unsigned __int8 *)(a1 + 14);
                                if (ChanMapForDependentStream)
                                {
                                  LOWORD(v46) = acmodToChannelMap[v46];
                                  v47 = *(unsigned __int8 *)(a1 + 15);
                                }
                                else
                                {
                                  if ((_DWORD)v37 == (_DWORD)v46)
                                    goto LABEL_155;
                                  v47 = *(unsigned __int8 *)(a1 + 15);
                                  if (v38 == v47)
                                    goto LABEL_155;
                                  LODWORD(v46) = acmodToChannelMap[v46];
                                  if ((v46 | (v47 != 0)) == (unsigned __int16)(acmodToChannelMap[v37] | v38 | v46 | (v47 != 0)))
                                    goto LABEL_155;
                                }
                                *(_BYTE *)(a1 + 16) = 0;
                                *(_WORD *)(a1 + 12) = v46;
                                if (v47)
                                  *(_WORD *)(a1 + 12) = v46 | 1;
                              }
                              if (ChanMapForDependentStream)
                              {
                                v48 = *(_WORD *)(a1 + 12) | v68;
LABEL_154:
                                v45 = 0;
                                *(_WORD *)(a1 + 12) = v48;
                                goto LABEL_155;
                              }
                              v49 = *(_WORD *)(a1 + 12) | acmodToChannelMap[v37];
                              *(_WORD *)(a1 + 12) = v49;
                              if (v38)
                              {
                                v48 = v49 | 1;
                                goto LABEL_154;
                              }
                              v45 = 0;
LABEL_155:
                              v33 += DolbyGetFrameSize(returnedPointerOut);
                              if (v33 >= v30)
                              {
                                if (v45)
                                  goto LABEL_159;
                                return 0;
                              }
                            }
                            if ((v35 & 0xC0) == 0x40)
                            {
                              v40 = a1 + v32;
                              v43 = *(unsigned __int8 *)(v40 + 19);
                              v41 = (_BYTE *)(v40 + 19);
                              v42 = v43;
                              if (v43 <= 7)
                              {
                                *v41 = v42 + 1;
                                ChanMapForDependentStream = ddplusGetChanMapForDependentStream((uint64_t)v34, &v68);
                                goto LABEL_139;
                              }
                            }
                            goto LABEL_138;
                          }
                          v25 = *((_QWORD *)&v70 + 1);
                          *((_QWORD *)&v70 + 1) += 5;
                          if (v20 == 2)
                          {
                            v26 = 9;
                          }
                          else
                          {
                            if (v20 < 6)
                            {
LABEL_104:
                              result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v55 + 1);
                              if ((_DWORD)result)
                                return result;
                              if (HIDWORD(v55))
                                *((_QWORD *)&v70 + 1) += 8;
                              if (!v20)
                              {
                                result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v55);
                                if ((_DWORD)result)
                                  return result;
                                if ((_DWORD)v55)
                                  *((_QWORD *)&v70 + 1) += 8;
                              }
                              if (v65 <= 2)
                                ++*((_QWORD *)&v70 + 1);
                              goto LABEL_113;
                            }
                            v26 = 7;
                          }
                          *((_QWORD *)&v70 + 1) = v26 + v25;
                          goto LABEL_104;
                        }
                        return result;
                    }
                    *((_QWORD *)&v70 + 1) += v22;
                    goto LABEL_77;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ddplusGetChanMapForDependentStream(uint64_t a1, _WORD *a2)
{
  unsigned __int8 v3;
  __int16 v4;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;

  v8 = 0;
  v6 = 0;
  v9[0] = 0;
  v9[1] = a1;
  v10 = xmmword_1932FBA80;
  v11 = xmmword_1932FBA90;
  BitStreamFetch((uint64_t)v9, 3, &v8);
  *((_QWORD *)&v11 + 1) += 11;
  BitStreamFetch((uint64_t)v9, 1, (int *)&v6);
  if ((_DWORD)v6)
    *((_QWORD *)&v11 + 1) += 8;
  if (!v8)
  {
    *((_QWORD *)&v11 + 1) += 5;
    BitStreamFetch((uint64_t)v9, 1, (int *)&v6);
    if ((_DWORD)v6)
      *((_QWORD *)&v11 + 1) += 8;
  }
  v7 = 0;
  BitStreamFetch((uint64_t)v9, 1, &v7);
  v3 = v7;
  if (v7)
  {
    BitStreamFetch((uint64_t)v9, 16, (int *)&v6 + 1);
    v4 = WORD2(v6);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return v3;
}

uint64_t BitStreamFetch(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  size_t *v6;
  char **v7;
  unint64_t i;
  unint64_t v9;
  unint64_t v10;
  OpaqueCMBlockBuffer *v11;
  size_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  *a3 = 0;
  if (a2 < 1)
    return 0;
  v4 = a2;
  v6 = (size_t *)(a1 + 24);
  v7 = (char **)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 40); ; i = 8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32) + (i >> 3);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = i & 7;
    if (v10 >= v9)
    {
      v11 = *(OpaqueCMBlockBuffer **)a1;
      if (*(_QWORD *)a1)
      {
        v12 = *(_QWORD *)(a1 + 16) + v10;
        *(_QWORD *)(a1 + 16) = v12;
        result = CMBlockBufferGetDataPointer(v11, v12, v6, 0, v7);
        if ((_DWORD)result)
          return result;
        v10 = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
      else
      {
        result = FigSignalErrorAt();
        if ((_DWORD)result)
          return result;
        v10 = *(_QWORD *)(a1 + 32);
      }
    }
    v14 = *(_QWORD *)(a1 + 40);
    v15 = 8 - v14;
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v10);
    v17 = v4 - (8 - v14);
    if (v4 <= 8 - v14)
      break;
    *a3 = (*a3 << v15) | bitMask[v15] & v16;
    *(_QWORD *)(a1 + 40) = 8;
    v4 = v17;
    if (v17 <= 0)
      return 0;
  }
  result = 0;
  v18 = v16 >> (v15 - v4);
  if (v15 == v4)
    LOBYTE(v18) = v16;
  *a3 = (*a3 << v4) | bitMask[v4] & v18;
  *(_QWORD *)(a1 + 40) = v14 + v4;
  return result;
}

uint64_t FigCSSParseColor(const __CFString *a1, float *a2, float *a3, float *a4, float *a5)
{
  CFIndex Length;
  int64_t v11;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  const char *CStringPtrAndBufferToFree;
  const __CFAllocator *v15;
  const __CFString *v16;
  unint64_t v17;
  char **v18;
  const __CFString *v19;
  CFComparisonResult v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  float *v32;
  double v33;
  int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  UniChar buffer[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)buffer = 0u;
  Length = CFStringGetLength(a1);
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  if (!a2 || !a3 || !a4 || !a5)
    goto LABEL_25;
  v11 = Length;
  *(_QWORD *)&v47 = a1;
  *((_QWORD *)&v48 + 1) = 0;
  *(_QWORD *)&v49 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  *((_QWORD *)&v47 + 1) = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0;
  *(_QWORD *)&v48 = CStringPtr;
  if (figCSSParseCharacter(35, buffer, 0, v11, &v38))
  {
    if (figCSSParseString("rgb", buffer, v38, v11, &v38))
    {
      CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      if (CStringPtrAndBufferToFree)
      {
        v32 = a5;
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CStringPtrAndBufferToFree, 0x8000100u);
        v17 = 0x1FFFFFFFFFFFFBEDuLL;
        while (1)
        {
          v18 = &(&off_1E2F939B8)[v17];
          v19 = CFStringCreateWithCString(v15, (&off_1E2F939B8)[v17 + 1043], 0x8000100u);
          v20 = CFStringCompare(v19, v16, 1uLL);
          if (v20 == kCFCompareEqualTo)
            break;
          if (v19)
            CFRelease(v19);
          v17 += 7;
          if (!(v17 * 8))
          {
            v19 = 0;
            v21 = NAN;
            v22 = NAN;
            v23 = NAN;
            v24 = NAN;
            if (!v16)
              goto LABEL_39;
            goto LABEL_38;
          }
        }
        v21 = *((float *)v18 + 2088);
        v22 = *((float *)v18 + 2089);
        v23 = *((float *)v18 + 2090);
        v24 = *((float *)v18 + 2091);
        v28 = *((_DWORD *)v18 + 2092);
        LODWORD(v37) = *((_DWORD *)v18 + 2093);
        HIDWORD(v37) = v28;
        v29 = *((_DWORD *)v18 + 2094);
        LODWORD(v36) = *((_DWORD *)v18 + 2095);
        HIDWORD(v36) = v29;
        if (!v16)
          goto LABEL_39;
LABEL_38:
        CFRelease(v16);
LABEL_39:
        a5 = v32;
        if (v19)
          CFRelease(v19);
        if (v20 == kCFCompareEqualTo)
          goto LABEL_42;
      }
    }
    else
    {
      v26 = figCSSParseString("a(", buffer, v38, v11, &v38);
      if (!v26 || !figCSSParseCharacter(40, buffer, v38, v11, &v38))
      {
        figCSSParseLWSP(buffer, v38, v11, &v38);
        v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, (_DWORD *)&v37 + 1);
        if ((_DWORD)v25)
          goto LABEL_46;
        figCSSParseLWSP(buffer, v38, v11, &v38);
        v25 = figCSSParseCharacter(44, buffer, v38, v11, &v38);
        if ((_DWORD)v25)
          goto LABEL_46;
        figCSSParseLWSP(buffer, v38, v11, &v38);
        v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, &v37);
        if ((_DWORD)v25)
          goto LABEL_46;
        figCSSParseLWSP(buffer, v38, v11, &v38);
        v25 = figCSSParseCharacter(44, buffer, v38, v11, &v38);
        if ((_DWORD)v25)
          goto LABEL_46;
        figCSSParseLWSP(buffer, v38, v11, &v38);
        v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, (_DWORD *)&v36 + 1);
        if ((_DWORD)v25)
          goto LABEL_46;
        figCSSParseLWSP(buffer, v38, v11, &v38);
        v24 = 1.0;
        if (!v26)
        {
          v34 = 0;
          v33 = 0.0;
          v25 = figCSSParseCharacter(44, buffer, v38, v11, &v38);
          if ((_DWORD)v25)
            goto LABEL_46;
          figCSSParseLWSP(buffer, v38, v11, &v38);
          v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, &v34);
          if ((_DWORD)v25)
            goto LABEL_46;
          figCSSParseFraction(buffer, v38, v11, &v38, &v33);
          figCSSParseLWSP(buffer, v38, v11, &v38);
          LODWORD(v27) = v34;
          v24 = v33 + (double)v27;
        }
        v25 = figCSSParseCharacter(41, buffer, v38, v11, &v38);
        if ((_DWORD)v25)
          goto LABEL_46;
        v21 = NAN;
        v22 = NAN;
        v23 = NAN;
        goto LABEL_42;
      }
    }
LABEL_25:
    v25 = FigSignalErrorAt();
    goto LABEL_46;
  }
  v25 = figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v37 + 1);
  if ((_DWORD)v25)
    goto LABEL_46;
  v25 = figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v37);
  if ((_DWORD)v25)
    goto LABEL_46;
  v25 = figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v36 + 1);
  if ((_DWORD)v25)
    goto LABEL_46;
  if (figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v36))
    LODWORD(v36) = 255;
  v21 = NAN;
  v22 = NAN;
  v23 = NAN;
  v24 = NAN;
LABEL_42:
  v25 = figCSSCopyColorComponentWithRangeCheck(v21, HIDWORD(v37), a2);
  if (!(_DWORD)v25)
  {
    v25 = figCSSCopyColorComponentWithRangeCheck(v22, v37, a3);
    if (!(_DWORD)v25)
    {
      v25 = figCSSCopyColorComponentWithRangeCheck(v23, HIDWORD(v36), a4);
      if (!(_DWORD)v25)
        v25 = figCSSCopyColorComponentWithRangeCheck(v24, v36, a5);
    }
  }
LABEL_46:
  v30 = v25;
  free(v35);
  return v30;
}

uint64_t figCSSParseCharacter(int a1, UniChar *buffer, int64_t a3, int64_t a4, _QWORD *a5)
{
  int64_t v9;
  uint64_t v10;
  UniChar v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  const __CFString *v16;
  CFRange v17;

  if (!a5)
    return FigSignalErrorAt();
  if (a4 <= a3)
    return 4294949475;
  if (a3 < 0 || (v9 = *((_QWORD *)buffer + 20), v9 <= a3))
  {
    v11 = 0;
  }
  else
  {
    v10 = *((_QWORD *)buffer + 17);
    if (v10)
    {
      v11 = *(_WORD *)(v10 + 2 * (*((_QWORD *)buffer + 19) + a3));
    }
    else
    {
      v13 = *((_QWORD *)buffer + 18);
      if (v13)
      {
        v11 = *(char *)(v13 + *((_QWORD *)buffer + 19) + a3);
      }
      else
      {
        if (*((_QWORD *)buffer + 22) <= a3 || (v14 = *((_QWORD *)buffer + 21), v14 > a3))
        {
          v15 = a3 - 4;
          if ((unint64_t)a3 < 4)
            v15 = 0;
          if (v15 + 64 < v9)
            v9 = v15 + 64;
          *((_QWORD *)buffer + 21) = v15;
          *((_QWORD *)buffer + 22) = v9;
          v16 = (const __CFString *)*((_QWORD *)buffer + 16);
          v17.location = *((_QWORD *)buffer + 19) + v15;
          v17.length = v9 - v15;
          CFStringGetCharacters(v16, v17, buffer);
          v14 = *((_QWORD *)buffer + 21);
        }
        v11 = buffer[a3 - v14];
      }
    }
  }
  if (a1 != v11)
    return 4294949475;
  result = 0;
  *a5 = a3 + 1;
  return result;
}

uint64_t figCSSParseHexDigits(UniChar *buffer, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UniChar v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t result;
  CFRange v29;

  if (!a4 || !a5)
    return FigSignalErrorAt();
  if (a3 - a2 >= 2)
  {
    v8 = 0;
    v9 = -a2;
    v10 = a2 + 64;
    v11 = 1;
    v12 = a2;
    while (1)
    {
      v13 = v11;
      v14 = (unint64_t)v12 >= 4 ? 4 : v12;
      if (a2 < 0)
        break;
      v15 = *((_QWORD *)buffer + 20);
      if (v15 <= v12)
        break;
      v16 = *((_QWORD *)buffer + 17);
      if (v16)
      {
        v17 = *(_WORD *)(v16 + 2 * (v12 + *((_QWORD *)buffer + 19)));
      }
      else
      {
        v18 = *((_QWORD *)buffer + 18);
        if (v18)
        {
          v17 = *(char *)(v18 + *((_QWORD *)buffer + 19) + v12);
        }
        else
        {
          if (*((_QWORD *)buffer + 22) <= v12 || (v19 = *((_QWORD *)buffer + 21), v19 > v12))
          {
            v20 = -v14;
            v21 = v14 + v9;
            v22 = v10 - v14;
            v23 = v12 + v20;
            v24 = v23 + 64;
            if (v23 + 64 >= v15)
              v24 = *((_QWORD *)buffer + 20);
            *((_QWORD *)buffer + 21) = v23;
            *((_QWORD *)buffer + 22) = v24;
            if (v15 >= v22)
              v15 = v22;
            v29.length = v15 + v21;
            v29.location = v23 + *((_QWORD *)buffer + 19);
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v29, buffer);
            v19 = *((_QWORD *)buffer + 21);
          }
          v17 = buffer[v12 - v19];
        }
      }
      v25 = v17;
      if ((unsigned __int16)(v17 - 48) >= 0xAu)
      {
        if (v17 - 65 >= 6)
        {
          if (v17 - 97 > 5)
            return 4294949475;
          v26 = -87;
        }
        else
        {
          v26 = -55;
        }
      }
      else
      {
        v26 = -48;
      }
      if (v8 > 0xF0F0F0E)
        return 4294949474;
      v11 = 0;
      v8 = v26 + v25 + 16 * v8;
      ++v12;
      --v9;
      ++v10;
      if ((v13 & 1) == 0)
      {
        result = 0;
        *a4 = v12;
        *a5 = v8;
        return result;
      }
    }
  }
  return 4294949475;
}

uint64_t figCSSParseString(char *a1, UniChar *buffer, int64_t a3, int64_t a4, int64_t *a5)
{
  int64_t v6;
  char v8;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  UniChar v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t result;
  CFRange v20;

  if (!a5)
    return FigSignalErrorAt();
  v6 = a3;
  v8 = *a1;
  if (*a1)
  {
    v10 = 0;
    if (a4 <= a3)
      v11 = a3;
    else
      v11 = a4;
    v12 = v11 - a3;
    while (v10 != v12)
    {
      if (v6 < 0 || (v13 = *((_QWORD *)buffer + 20), v13 <= v6))
      {
        v15 = 0;
      }
      else
      {
        v14 = *((_QWORD *)buffer + 17);
        if (v14)
        {
          v15 = *(_WORD *)(v14 + 2 * (*((_QWORD *)buffer + 19) + v6));
        }
        else
        {
          v16 = *((_QWORD *)buffer + 18);
          if (v16)
          {
            v15 = *(char *)(v16 + *((_QWORD *)buffer + 19) + v6);
          }
          else
          {
            if (*((_QWORD *)buffer + 22) <= v6 || (v17 = *((_QWORD *)buffer + 21), v17 > v6))
            {
              v18 = v6 - 4;
              if ((unint64_t)v6 < 4)
                v18 = 0;
              if (v18 + 64 < v13)
                v13 = v18 + 64;
              *((_QWORD *)buffer + 21) = v18;
              *((_QWORD *)buffer + 22) = v13;
              v20.location = *((_QWORD *)buffer + 19) + v18;
              v20.length = v13 - v18;
              CFStringGetCharacters(*((CFStringRef *)buffer + 16), v20, buffer);
              v17 = *((_QWORD *)buffer + 21);
            }
            v15 = buffer[v6 - v17];
          }
        }
      }
      if (v8 != v15)
        break;
      ++v6;
      v8 = a1[++v10];
      if (!v8)
        goto LABEL_26;
    }
    return 4294949475;
  }
  else
  {
LABEL_26:
    result = 0;
    *a5 = v6;
  }
  return result;
}

void figCSSParseLWSP(UniChar *buffer, int64_t a2, int64_t a3, int64_t *a4)
{
  int64_t v5;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  UniChar v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  CFRange v24;

  v5 = a2;
  if (a2 < a3 && (a2 & 0x8000000000000000) == 0)
  {
    v8 = -a2;
    v9 = a2 + 64;
    do
    {
      if ((unint64_t)v5 >= 4)
        v10 = 4;
      else
        v10 = v5;
      v11 = *((_QWORD *)buffer + 20);
      if (v11 <= v5)
        break;
      v12 = *((_QWORD *)buffer + 17);
      if (v12)
      {
        v13 = *(_WORD *)(v12 + 2 * (v5 + *((_QWORD *)buffer + 19)));
      }
      else
      {
        v14 = *((_QWORD *)buffer + 18);
        if (v14)
        {
          v13 = *(char *)(v14 + *((_QWORD *)buffer + 19) + v5);
        }
        else
        {
          if (*((_QWORD *)buffer + 22) <= v5 || (v15 = *((_QWORD *)buffer + 21), v15 > v5))
          {
            v16 = -v10;
            v17 = v10 + v8;
            v18 = v9 - v10;
            v19 = v5 + v16;
            v20 = v19 + 64;
            if (v19 + 64 >= v11)
              v20 = *((_QWORD *)buffer + 20);
            *((_QWORD *)buffer + 21) = v19;
            *((_QWORD *)buffer + 22) = v20;
            if (v11 >= v18)
              v11 = v18;
            v24.length = v11 + v17;
            v24.location = v19 + *((_QWORD *)buffer + 19);
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v24, buffer);
            v15 = *((_QWORD *)buffer + 21);
          }
          v13 = buffer[v5 - v15];
        }
      }
      v21 = v13;
      v22 = (1 << v13) & 0x100002600;
      if (v21 > 0x20 || v22 == 0)
        break;
      ++v5;
      --v8;
      ++v9;
    }
    while (v5 < a3);
  }
  *a4 = v5;
}

uint64_t figCSSParseOneOrMoreDigits(UniChar *a1, int64_t a2, int64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  int64_t v11;

  v10 = 0;
  v11 = a2;
  if (!a4 || !a5)
    return FigSignalErrorAt();
  result = figCSSParseDigits(a1, a2, a3, &v11, (_DWORD *)&v10 + 1);
  if (!(_DWORD)result)
  {
    if (figCSSParseDigits(a1, v11, a3, &v11, &v10))
    {
LABEL_7:
      result = 0;
      *a4 = v11;
      *a5 = HIDWORD(v10);
    }
    else
    {
      while (HIDWORD(v10) <= 0x1745D173)
      {
        HIDWORD(v10) = v10 + 10 * HIDWORD(v10);
        if (figCSSParseDigits(a1, v11, a3, &v11, &v10))
          goto LABEL_7;
      }
      return 4294949474;
    }
  }
  return result;
}

uint64_t figCSSParseFraction(UniChar *buffer, int64_t a2, int64_t a3, _QWORD *a4, double *a5)
{
  uint64_t result;
  unint64_t v10;
  double v11;
  double v12;
  int v13;
  int64_t v14;

  v14 = a2;
  v13 = 0;
  if (!a4 || !a5)
    return FigSignalErrorAt();
  result = figCSSParseCharacter(46, buffer, a2, a3, &v14);
  if (!(_DWORD)result)
  {
    result = figCSSParseDigits(buffer, v14, a3, &v14, &v13);
    v11 = 0.0;
    if (!(_DWORD)result)
    {
      v12 = 10.0;
      do
      {
        LODWORD(v10) = v13;
        v11 = v11 + (double)v10 / v12;
        v12 = v12 * 10.0;
        result = figCSSParseDigits(buffer, v14, a3, &v14, &v13);
      }
      while (!(_DWORD)result);
    }
    *a4 = v14;
    *a5 = v11;
  }
  return result;
}

uint64_t figCSSCopyColorComponentWithRangeCheck(float a1, uint64_t a2, float *a3)
{
  if (a1 < 0.0 || a1 > 1.0)
    return FigSignalErrorAt();
  *a3 = a1;
  return 0;
}

uint64_t FigCSSParseDigitsAsUInt32(const __CFString *a1, _DWORD *a2)
{
  CFIndex Length;
  int64_t v5;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t result;
  int v9;
  uint64_t v10;
  _OWORD v11[8];
  const __CFString *v12;
  const UniChar *v13;
  const char *v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;

  Length = CFStringGetLength(a1);
  v10 = 0;
  v9 = 0;
  if (a2)
  {
    v5 = Length;
    v12 = a1;
    v15 = 0;
    v16 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    v13 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    memset(v11, 0, sizeof(v11));
    v14 = CStringPtr;
    v17 = 0;
    v18 = 0;
    result = figCSSParseOneOrMoreDigits((UniChar *)v11, 0, v5, &v10, &v9);
    if (!(_DWORD)result)
    {
      *a2 = v9;
      return result;
    }
  }
  else
  {
    LODWORD(result) = FigSignalErrorAt();
  }
  if ((_DWORD)result == -17821)
    return 4294949474;
  else
    return result;
}

uint64_t FigCSSParseFontSize(const __CFString *a1, uint64_t *a2)
{
  CFIndex Length;
  int64_t v5;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int64_t v13;
  UniChar buffer[8];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const __CFString *v22;
  const UniChar *v23;
  const char *v24;
  uint64_t v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;

  Length = CFStringGetLength(a1);
  v13 = 0;
  v12 = 0;
  v11 = 0.0;
  if (!a2)
  {
    LODWORD(result) = FigSignalErrorAt();
LABEL_16:
    if ((_DWORD)result == -17821)
      return 4294949474;
    else
      return result;
  }
  v5 = Length;
  v22 = a1;
  v25 = 0;
  v26 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  v23 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)buffer = 0u;
  v15 = 0u;
  v27 = 0;
  v28 = 0;
  v24 = CStringPtr;
  LODWORD(result) = figCSSParseOneOrMoreDigits(buffer, 0, v5, &v13, &v12);
  if ((_DWORD)result)
    goto LABEL_16;
  figCSSParseFraction(buffer, v13, v5, &v13, &v11);
  if (figCSSParseCharacter(37, buffer, v13, v5, &v13)
    && figCSSParseString("em", buffer, v13, v5, &v13)
    && figCSSParseString("rem", buffer, v13, v5, &v13)
    && figCSSParseString("vw", buffer, v13, v5, &v13)
    && figCSSParseString("vh", buffer, v13, v5, &v13)
    && figCSSParseString("vmin", buffer, v13, v5, &v13)
    && figCSSParseString("vmax", buffer, v13, v5, &v13))
  {
    return 4294949474;
  }
  v9 = FigGeometryDimensionMake();
  result = 0;
  *a2 = v9;
  a2[1] = v10;
  return result;
}

uint64_t figCSSParseDigits(UniChar *buffer, int64_t a2, int64_t a3, _QWORD *a4, _DWORD *a5)
{
  int64_t v8;
  uint64_t v10;
  UniChar v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t result;
  CFRange v16;

  if (!a4 || !a5)
    return FigSignalErrorAt();
  if (a3 <= a2)
    return 4294949475;
  if (a2 < 0)
    return 4294949475;
  v8 = *((_QWORD *)buffer + 20);
  if (v8 <= a2)
    return 4294949475;
  v10 = *((_QWORD *)buffer + 17);
  if (v10)
  {
    v11 = *(_WORD *)(v10 + 2 * (*((_QWORD *)buffer + 19) + a2));
  }
  else
  {
    v12 = *((_QWORD *)buffer + 18);
    if (v12)
    {
      v11 = *(char *)(v12 + *((_QWORD *)buffer + 19) + a2);
    }
    else
    {
      if (*((_QWORD *)buffer + 22) <= a2 || (v13 = *((_QWORD *)buffer + 21), v13 > a2))
      {
        v14 = a2 - 4;
        if ((unint64_t)a2 < 4)
          v14 = 0;
        if (v14 + 64 < v8)
          v8 = v14 + 64;
        *((_QWORD *)buffer + 21) = v14;
        *((_QWORD *)buffer + 22) = v8;
        v16.location = *((_QWORD *)buffer + 19) + v14;
        v16.length = v8 - v14;
        CFStringGetCharacters(*((CFStringRef *)buffer + 16), v16, buffer);
        v13 = *((_QWORD *)buffer + 21);
      }
      v11 = buffer[a2 - v13];
    }
  }
  if ((unsigned __int16)(v11 - 58) < 0xFFF6u)
    return 4294949475;
  result = 0;
  *a4 = a2 + 1;
  *a5 = v11 - 48;
  return result;
}

uint64_t FigMPEG2ParserGetClassID()
{
  MEMORY[0x19402F294](&FigMPEG2ParserGetClassID_sRegisterFigMPEG2ParserBaseTypeOnce, RegisterFigMPEG2ParserBaseType);
  return sFigMPEG2ParserClassID;
}

uint64_t RegisterFigMPEG2ParserBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigMPEG2ParserGetTypeID()
{
  MEMORY[0x19402F294](&FigMPEG2ParserGetClassID_sRegisterFigMPEG2ParserBaseTypeOnce, RegisterFigMPEG2ParserBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigMPEG2ParserCreate(uint64_t a1, int a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  const void *v16;
  int v17;
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v20;
  uint64_t v21;
  CMTime v22;
  CMTime v23;
  uint64_t v24;

  if (!a7 || !a6 || !a9)
    return FigSignalErrorAt();
  if (FigMPEG2ParserCreate_sCreateParserMallocZoneOnce != -1)
    dispatch_once(&FigMPEG2ParserCreate_sCreateParserMallocZoneOnce, &__block_literal_global_32);
  v16 = (const void *)FigMPEG2ParserCreate_sFigMPEG2ParserZoneAllocator;
  if (!FigMPEG2ParserCreate_sFigMPEG2ParserZoneAllocator)
    return FigSignalErrorAt();
  v17 = *(_DWORD *)(a3 + 12);
  if (a2 == 2)
  {
    if ((v17 & 1) == 0 || *(uint64_t *)a3 <= 0)
      return FigSignalErrorAt();
  }
  else if ((v17 & 1) != 0 && *(_QWORD *)a3)
  {
    return FigSignalErrorAt();
  }
  v24 = 0;
  *a9 = 0;
  MEMORY[0x19402F294](&FigMPEG2ParserGetClassID_sRegisterFigMPEG2ParserBaseTypeOnce, RegisterFigMPEG2ParserBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = v24;
    *(_QWORD *)(DerivedStorage + 40) = CFRetain(v16);
    *(_DWORD *)(DerivedStorage + 100) = a2;
    *(_QWORD *)(DerivedStorage + 56) = a6;
    *(_QWORD *)(DerivedStorage + 64) = a7;
    *(_QWORD *)(DerivedStorage + 72) = a8;
    v20 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 128) = *(_QWORD *)(v20 + 16);
    v21 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(DerivedStorage + 136) = *(_OWORD *)a3;
    *(_QWORD *)(DerivedStorage + 152) = v21;
    *(_QWORD *)(DerivedStorage + 104) = 1000000;
    *(_DWORD *)(DerivedStorage + 48) = 0;
    *(_BYTE *)(DerivedStorage + 449) = a4 & 1;
    *(_DWORD *)(DerivedStorage + 96) = a5;
    *(_QWORD *)(DerivedStorage + 16) = 0;
    *(_QWORD *)(DerivedStorage + 24) = 0;
    *(_QWORD *)(DerivedStorage + 32) = DerivedStorage + 24;
    if ((*(_BYTE *)(a3 + 12) & 1) != 0)
    {
      v22 = *(CMTime *)a3;
      CMTimeConvertScale(&v23, &v22, 90000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      *(_QWORD *)(DerivedStorage + 160) = v23.value;
    }
    result = 0;
    *(_QWORD *)(DerivedStorage + 184) = 0x100000001;
    *a9 = v24;
  }
  return result;
}

CFTypeRef zoneAllocator_CopyDescription()
{
  return CFRetain(CFSTR("FigMPEG2ParserZoneAllocator"));
}

void *zoneAllocator_Allocate(size_t size)
{
  return malloc_type_zone_malloc((malloc_zone_t *)gFigMPEG2ParserZone, size, 0x3FA98EB8uLL);
}

void *zoneAllocator_Reallocate(void *ptr, size_t size)
{
  return malloc_type_zone_realloc((malloc_zone_t *)gFigMPEG2ParserZone, ptr, size, 0xF5F4E7FBuLL);
}

void zoneAllocator_Deallocate(void *ptr)
{
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, ptr);
}

uint64_t FigMPEG2ParserSetBaseTimestamp(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  int v4;
  BOOL v5;
  int v6;
  BOOL v8;
  __int128 v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *((_DWORD *)a2 + 3);
  v5 = (~v4 & 0x11) == 0 || (*((_DWORD *)a2 + 3) & 9) == 9;
  v6 = ~v4 & 5;
  v8 = v5 || v6 == 0 || DerivedStorage == 0;
  if (v8 || *(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v10 = *a2;
  *(_QWORD *)(DerivedStorage + 128) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(DerivedStorage + 112) = v10;
  return 0;
}

uint64_t FigMPEG2ParserSetDecryptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 80) = a2;
  *(_QWORD *)(DerivedStorage + 88) = a3;
  return 0;
}

uint64_t FigMPEG2ParserInjectData(const void *a1, OpaqueCMBlockBuffer *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, OpaqueCMBlockBuffer *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int v12;

  if (a1)
  {
    CFRetain(a1);
    if (!a2)
      goto LABEL_18;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(DerivedStorage + 8))
      goto LABEL_18;
    v7 = DerivedStorage;
    v8 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, uint64_t))(DerivedStorage + 168);
    if (v8)
    {
LABEL_8:
      v9 = v8(v7, a2, a3);
LABEL_9:
      v10 = v9;
      CFRelease(a1);
      return v10;
    }
    if (MPEG2TSSniff(a2, *(_DWORD *)(DerivedStorage + 96), (_DWORD *)(DerivedStorage + 48)))
    {
      *(_BYTE *)(v7 + 448) = 1;
      MPEG2TSInitialize(v7);
      goto LABEL_7;
    }
    v12 = *(_DWORD *)(v7 + 96);
    if ((v12 & 4) != 0)
    {
      if (!MPEG2PSSniff(a2, (int *)(v7 + 48)))
      {
        MPEG2PSInitialize((_QWORD *)v7);
        goto LABEL_7;
      }
      v12 = *(_DWORD *)(v7 + 96);
    }
    if ((v12 & 8) != 0 && !MPEG2VideoSniff(a2))
    {
      *(_DWORD *)(v7 + 48) = 4;
      MPEG2VideoInitialize((_QWORD *)v7);
    }
LABEL_7:
    v8 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, uint64_t))(v7 + 168);
    if (v8)
      goto LABEL_8;
LABEL_18:
    v9 = FigSignalErrorAt();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserAddTransportStreamTrack(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t DerivedStorage;
  unsigned int v8;

  if (a1
    && (unsigned __int16)(a2 - 0x1FFF) > 0xE001u
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_BYTE *)(DerivedStorage + 8))
    && ((v8 = *(_DWORD *)(DerivedStorage + 48), v8 < 2) || v8 == 192))
  {
    return MPEG2TSAddTrack(DerivedStorage, a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMPEG2ParserIssueCommands(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void (*v9)(uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t i;
  void (*v11)(uint64_t);

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 24);
  if (v7)
  {
    do
    {
      if ((a2 & 1) != 0)
      {
        v8 = *(void (**)(uint64_t))(v7 + 864);
        if (v8)
          v8(v7);
      }
      if ((a2 & 2) != 0)
        PesReinitialize(v7);
      v9 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v7 + 92);
      if (v9)
        v9(a1, *(unsigned int *)(v7 + 60), *(_QWORD *)(v7 + 104), a2);
      v7 = *(_QWORD *)(v7 + 32);
    }
    while (v7);
    if ((a2 & 2) == 0)
      return 0;
    goto LABEL_16;
  }
  if ((a2 & 2) != 0)
  {
LABEL_16:
    for (i = *(_QWORD *)(v6 + 16); i; i = *(_QWORD *)(i + 8))
    {
      *(_QWORD *)(i + 64) = 0;
      *(_BYTE *)(i + 88) = 0;
    }
    v11 = *(void (**)(uint64_t))(v6 + 176);
    if (v11)
      v11(v6);
  }
  return 0;
}

uint64_t FigMPEG2ParserInstallCallbacksForTrack(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, unsigned int a5)
{
  uint64_t DerivedStorage;
  int16x8_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _OWORD *v16;
  char v17;
  int v18;
  int v19;
  int v20;
  unsigned __int32 v21;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || (a5 & 1) != 0 && *(_DWORD *)(DerivedStorage + 48) == 4)
    return FigSignalErrorAt();
  v12 = *(_QWORD *)(DerivedStorage + 24);
  if (!v12)
    return FigSignalErrorAt();
  v13 = 0;
  v14 = 0;
  v15 = 0;
  result = 0;
  v10.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(a5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFEFFFFFFFCLL) & 0xFF01FF01FF01FF01;
  v21 = vmovn_s16(v10).u32[0];
  do
  {
    if (*(_DWORD *)(v12 + 60) != a2)
      goto LABEL_50;
    v16 = (_OWORD *)(v12 + 84);
    v13 = *(_QWORD *)v12;
    if (a3)
    {
      *v16 = *a3;
    }
    else
    {
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v12 + 92) = 0;
    }
    *(_QWORD *)(v12 + 104) = a4;
    *(_DWORD *)(v12 + 112) = a5;
    *(_DWORD *)(v12 + 116) = v21;
    if ((a5 & 1) != 0)
    {
      result = CreatePesPrivateForRawPes((_QWORD *)v12);
      if (!(_DWORD)result)
        goto LABEL_48;
      goto LABEL_19;
    }
    v17 = 0;
    v18 = *(_DWORD *)(v12 + 56);
    if (v18 <= 1701143346)
    {
      if (v18 <= 1700880738)
      {
        if (v18 == 1633891104)
          goto LABEL_38;
        if (v18 != 1633973363)
        {
          if (v18 != 1685353248)
            goto LABEL_47;
          result = CreatePesPrivateForDTS((_QWORD *)v12);
          goto LABEL_46;
        }
      }
      else
      {
        if (v18 > 1700886114)
        {
          if (v18 == 1700886115)
          {
LABEL_42:
            result = CreatePesPrivateForH264((_QWORD *)v12);
            goto LABEL_46;
          }
          v20 = 1700998451;
          goto LABEL_37;
        }
        if (v18 != 1700880739)
        {
          v20 = 1700881203;
LABEL_37:
          if (v18 != v20)
            goto LABEL_47;
          goto LABEL_38;
        }
      }
      result = CreatePesPrivateForADTS((_QWORD *)v12);
      goto LABEL_46;
    }
    if (v18 <= 1836476771)
    {
      if (v18 > 1819304812)
      {
        if (v18 == 1819304813)
        {
          result = CreatePesPrivateForLPCM((_QWORD *)v12);
        }
        else
        {
          if (v18 != 1835103588)
            goto LABEL_47;
          result = CreatePesPrivateForMP3((_QWORD *)v12);
        }
        goto LABEL_46;
      }
      if (v18 != 1701143347)
      {
        v19 = 1748121140;
LABEL_41:
        if (v18 != v19)
          goto LABEL_47;
        goto LABEL_42;
      }
LABEL_38:
      result = CreatePesPrivateForDolby(v12);
LABEL_46:
      v17 = 1;
      goto LABEL_47;
    }
    if (v18 <= 1886614577)
    {
      if (v18 == 1836476772)
      {
        result = CreatePesPrivateForMPEG2Video((_QWORD *)v12);
      }
      else
      {
        if (v18 != 1886612592)
          goto LABEL_47;
        result = CreatePesPrivateForPSLPCM((_QWORD *)v12);
      }
      goto LABEL_46;
    }
    if (v18 != 1886614578)
    {
      v19 = 2053207651;
      goto LABEL_41;
    }
    result = FigSignalErrorAt();
    v17 = 0;
LABEL_47:
    *(_BYTE *)(v12 + 80) = v17;
    if (!(_DWORD)result)
    {
LABEL_48:
      ++v15;
      goto LABEL_49;
    }
LABEL_19:
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v12 + 92) = 0;
LABEL_49:
    v14 = 1;
LABEL_50:
    if (*(_BYTE *)(v12 + 80))
      ++v15;
    v12 = *(_QWORD *)(v12 + 32);
  }
  while (v12);
  if (!v14)
    return FigSignalErrorAt();
  if (v13)
    *(_DWORD *)(v13 + 72) = v15;
  return result;
}

uint64_t FigMPEG2ParserCopyAudioConfigurationForTrack(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t result;
  void *v10;

  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a3 = 0;
  *a4 = 0;
  v8 = *(_QWORD *)(DerivedStorage + 24);
  if (!v8)
    return FigSignalErrorAt();
  while (*(_DWORD *)(v8 + 60) != a2)
  {
    v8 = *(_QWORD *)(v8 + 32);
    if (!v8)
      return FigSignalErrorAt();
  }
  if (!*(_QWORD *)(v8 + 824))
    return 0;
  v10 = malloc_type_malloc(*(_QWORD *)(v8 + 832), 0xD496CD4uLL);
  *a3 = v10;
  if (!v10)
    return 4294954510;
  memcpy(v10, *(const void **)(v8 + 824), *(_QWORD *)(v8 + 832));
  result = 0;
  *a4 = *(_QWORD *)(v8 + 832);
  return result;
}

uint64_t FigMPEG2ParserGetStreamType(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(DerivedStorage + 48);
  return 0;
}

uint64_t FigMPEG2ParserCopyProgramList(uint64_t a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  int v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  CFArrayRef v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (!v5)
  {
    v14 = 0;
    *a2 = 0;
    return v14;
  }
  LODWORD(v6) = 0;
  do
  {
    v6 = (v6 + 1);
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
  *a2 = 0;
  if (!(_DWORD)v6)
    return 0;
  v7 = (const void **)malloc_type_calloc(8uLL, v6, 0x595630E5uLL);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(v4 + 16);
    if (v9)
    {
      v10 = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        v12 = CFNumberCreate(v11, kCFNumberSInt32Type, (const void *)(v9 + 40));
        v8[v10] = v12;
        if (!v12)
          break;
        ++v10;
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          goto LABEL_13;
      }
      v14 = 12;
    }
    else
    {
LABEL_13:
      v13 = CFArrayCreate(*(CFAllocatorRef *)(v4 + 40), v8, v6, MEMORY[0x1E0C9B378]);
      *a2 = v13;
      if (v13)
        v14 = 0;
      else
        v14 = 12;
    }
    v15 = 0;
    if (v6 <= 1)
      v16 = 1;
    else
      v16 = v6;
    v17 = 8 * v16;
    do
    {
      v18 = v8[v15 / 8];
      if (v18)
        CFRelease(v18);
      v15 += 8;
    }
    while (v17 != v15);
    free(v8);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserCopyTrackList(uint64_t a1, int a2, CFArrayRef *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t Program;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void **v13;
  const void **v14;
  const void **v15;
  _QWORD *v16;
  int v17;
  const __CFAllocator *v18;
  CFNumberRef v19;
  CFArrayRef v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;

  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (!*(_BYTE *)(DerivedStorage + 8))
        {
          v8 = DerivedStorage;
          Program = FindProgram(DerivedStorage, a2);
          if (Program)
          {
            v10 = Program;
            v11 = *(_QWORD *)(Program + 24);
            if (!v11)
            {
              v22 = 0;
              *a4 = 0;
              *a3 = 0;
              return v22;
            }
            LODWORD(v12) = 0;
            do
            {
              v12 = (v12 + 1);
              v11 = *(_QWORD *)(v11 + 16);
            }
            while (v11);
            *a4 = 0;
            *a3 = 0;
            if ((_DWORD)v12)
            {
              v13 = (const void **)malloc_type_calloc(8uLL, v12, 0x8773047FuLL);
              v14 = (const void **)malloc_type_calloc(8uLL, v12, 0x995BC880uLL);
              v15 = v14;
              if (v13 && v14)
              {
                v16 = *(_QWORD **)(v10 + 24);
                if (v16)
                {
                  v17 = 0;
                  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  while (1)
                  {
                    v13[v17] = CFNumberCreate(v18, kCFNumberSInt32Type, (char *)v16 + 60);
                    v19 = CFNumberCreate(v18, kCFNumberSInt32Type, v16 + 7);
                    v15[v17] = v19;
                    if (!v13[v17] || v19 == 0)
                      break;
                    ++v17;
                    v16 = (_QWORD *)v16[2];
                    if (!v16)
                      goto LABEL_19;
                  }
                }
                else
                {
LABEL_19:
                  v21 = CFArrayCreate(*(CFAllocatorRef *)(v8 + 40), v13, v12, MEMORY[0x1E0C9B378]);
                  *a3 = v21;
                  if (v21)
                  {
                    *a4 = CFArrayCreate(*(CFAllocatorRef *)(v8 + 40), v15, v12, MEMORY[0x1E0C9B378]);
                    if (*a3)
                    {
                      v22 = 0;
                      goto LABEL_25;
                    }
                    CFRelease(0);
                    *a3 = 0;
                  }
                }
                v22 = FigSignalErrorAt();
              }
              else
              {
                v22 = FigSignalErrorAt();
                if (!v13)
                {
LABEL_33:
                  if (v15)
                  {
                    v27 = 0;
                    if (v12 <= 1)
                      v28 = 1;
                    else
                      v28 = v12;
                    v29 = 8 * v28;
                    do
                    {
                      v30 = v15[v27 / 8];
                      if (v30)
                        CFRelease(v30);
                      v27 += 8;
                    }
                    while (v29 != v27);
                    free(v15);
                  }
                  return v22;
                }
              }
LABEL_25:
              v23 = 0;
              if (v12 <= 1)
                v24 = 1;
              else
                v24 = v12;
              v25 = 8 * v24;
              do
              {
                v26 = v13[v23 / 8];
                if (v26)
                  CFRelease(v26);
                v23 += 8;
              }
              while (v25 != v23);
              free(v13);
              goto LABEL_33;
            }
          }
          return 0;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserSniff(OpaqueCMBlockBuffer *a1, char a2, int *a3)
{
  uint64_t result;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  *a3 = 0;
  if ((a2 & 3) != 0 && MPEG2TSSniff(a1, a2, a3))
    return 0;
  if ((a2 & 4) != 0)
  {
    result = MPEG2PSSniff(a1, a3);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = 4294954325;
  }
  if ((a2 & 8) != 0)
  {
    result = MPEG2VideoSniff(a1);
    if (!(_DWORD)result)
      *a3 = 4;
  }
  return result;
}

uint64_t FigMPEG2ParserGetFrameRateForVideoTrack(uint64_t a1, int a2, float *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  if (!v6)
    return FigSignalErrorAt();
  while (*(_DWORD *)(v6 + 60) != a2)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (!v6)
      return FigSignalErrorAt();
  }
  v7 = *(_DWORD *)(v6 + 808);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(_DWORD *)(v6 + 804);
  if (!v8)
    return FigSignalErrorAt();
  *a3 = (float)v8 / (float)v7;
  return 0;
}

uint64_t FigMPEG2ParserGetTimeCodeValueForVideoTrack(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  int v8;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  if (!v6)
    return FigSignalErrorAt();
  while (*(_DWORD *)(v6 + 60) != a2)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (!v6)
      return FigSignalErrorAt();
  }
  v8 = *(_DWORD *)(v6 + 604);
  if (!v8)
    return FigSignalErrorAt();
  *a3 = v8;
  return 0;
}

CFStringRef FigMPEG2ParserBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMPEG2Parser %p]"), a1);
}

uint64_t FigMPEG2ParserInvalidateWork()
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  return 0;
}

void FigMPEG2ParserFinalize()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  while (1)
  {
    v1 = (_QWORD *)DerivedStorage[2];
    if (!v1)
      break;
    v2 = v1[1];
    if (v2)
      *(_QWORD *)(v2 + 16) = v1[2];
    *(_QWORD *)v1[2] = v2;
    free(v1);
  }
  while (1)
  {
    v7 = DerivedStorage[3];
    if (!v7)
      break;
    PesCleanOutData(DerivedStorage[3]);
    free(*(void **)(v7 + 824));
    v3 = *(void **)(v7 + 48);
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(v7 + 856);
      if (v4)
        v4(v7);
      else
        free(v3);
    }
    v5 = *(_QWORD *)(v7 + 32);
    v6 = *(_QWORD **)(v7 + 40);
    if (v5)
    {
      *(_QWORD *)(v5 + 40) = v6;
      v6 = *(_QWORD **)(v7 + 40);
    }
    else
    {
      DerivedStorage[4] = v6;
    }
    *v6 = v5;
    PesFrameHeaderDestroy((_QWORD *)(v7 + 544));
    free((void *)v7);
  }
  v8 = (const void *)DerivedStorage[57];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[57] = 0;
  }
  v9 = (const void *)DerivedStorage[52];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[52] = 0;
  }
  v10 = (const void *)DerivedStorage[5];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[5] = 0;
  }
}

__CFString *FigMPEG2ParserCopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigMPEG2Parser"));
  return Mutable;
}

uint64_t FigMPEG2ParserCopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserSetProperty()
{
  return FigSignalErrorAt();
}

uint64_t FigBufferedAirPlayAudioRenderPipelineCreate(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, CMTimeValue *a4)
{
  uint64_t v7;
  CMTimeValue v8;
  uint64_t DerivedStorage;
  dispatch_queue_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  CFAllocatorRef *v15;
  __CFString *v16;
  uint64_t v17;
  const __CFString *v18;
  int v20;
  int v21;
  CFTypeRef *v22;
  uint64_t *v23;
  uint64_t Factory;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t (*v32)(uint64_t, CMTimeValue, uint64_t, void *, uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  CMBufferQueueRef *v37;
  const void *UInt32;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v40;
  CFMutableArrayRef Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v43)(uint64_t, const __CFString *, _QWORD, _BYTE *);
  uint64_t v44;
  uint64_t v45;
  __CFDictionary *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t RichestDecodableFormatAndChannelLayout;
  uint64_t v53;
  uint64_t v54;
  CFTypeRef v55;
  uint64_t (*v56)(uint64_t, uint64_t, CFTypeRef, os_log_type_t *);
  uint64_t ASBD;
  uint64_t v58;
  int ChannelLayoutTag;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  __CFDictionary *MutableCopy;
  uint64_t v85;
  NSObject *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  NSObject *v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  CMTimeValue *v98;
  const __CFString *v99;
  void *value;
  os_log_type_t v102;
  unsigned int v103;
  int *v104;
  uint64_t *v105;
  os_log_type_t type[8];
  CFTypeRef cf;
  CMTime v108;
  const char *v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  unsigned int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  int v145;
  __int16 v146;
  unsigned int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  _BYTE v158[12];
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  const char *v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  const void *v166;
  __int16 v167;
  void *v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  value = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4)
    return FigSignalErrorAt();
  v98 = a4;
  v108.value = 0;
  FigRenderPipelineGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v47 = v7;
  }
  else
  {
    v8 = v108.value;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 48) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 8) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.notification", 0);
    *(_QWORD *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.baoNotificationQueue", 0);
    *(_QWORD *)(DerivedStorage + 24) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.mixerNotificationQueue", 0);
    *(_QWORD *)(DerivedStorage + 32) = FigDispatchQueueCreateWithPriority();
    v10 = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.processqueue", 0);
    v11 = (__int128 *)MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 40) = v10;
    v12 = *v11;
    v13 = *((_QWORD *)v11 + 2);
    *(_QWORD *)(DerivedStorage + 176) = v13;
    *(_OWORD *)(DerivedStorage + 184) = v12;
    *(_QWORD *)(DerivedStorage + 200) = v13;
    *(_OWORD *)(DerivedStorage + 208) = v12;
    *(_QWORD *)(DerivedStorage + 224) = v13;
    v14 = (_OWORD *)MEMORY[0x1E0CA2E68];
    *(_QWORD *)(DerivedStorage + 276) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_OWORD *)(DerivedStorage + 260) = *v14;
    *(_QWORD *)(DerivedStorage + 240) = 0;
    *(_BYTE *)DerivedStorage = 0;
    *(_QWORD *)(DerivedStorage + 360) = 0;
    *(_BYTE *)(DerivedStorage + 112) = 0;
    *(_OWORD *)(DerivedStorage + 144) = xmmword_1932FBAB0;
    *(_OWORD *)(DerivedStorage + 160) = v12;
    *(_QWORD *)(DerivedStorage + 104) = 0;
    *(_BYTE *)(DerivedStorage + 384) = 0;
    *(_QWORD *)(DerivedStorage + 80) = 0;
    *(_QWORD *)(DerivedStorage + 288) = 0;
    *(_QWORD *)(DerivedStorage + 296) = DerivedStorage + 288;
    *(_QWORD *)(DerivedStorage + 304) = 0;
    *(_BYTE *)(DerivedStorage + 408) = 0;
    v15 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (!a3)
    {
      v20 = FigBufferedAirPlayAudioRenderPipelineCreate_sLogIDPostFix++;
      snprintf((char *)(DerivedStorage + 408), 0x13uLL, "BuffRP-%u", v20);
      v99 = 0;
      value = (void *)CFStringCreateWithCString(a1, (const char *)(DerivedStorage + 408), 0x8000100u);
LABEL_13:
      v23 = (uint64_t *)(DerivedStorage + 392);
      Factory = FigBufferedAirPlayOutputProxyCreateFactory((uint64_t)a1, a2, (_QWORD *)(DerivedStorage + 392));
      if ((_DWORD)Factory)
        goto LABEL_108;
      if (dword_1EE2A2EE0)
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v26 = cf;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v27 = v26;
        else
          v27 = v26 & 0xFFFFFFFE;
        if (v27)
        {
          v28 = *v23;
          *(_DWORD *)v158 = 136316418;
          *(_QWORD *)&v158[4] = "FigBufferedAirPlayAudioRenderPipelineCreate";
          v159 = 2048;
          v160 = 0;
          v161 = 2082;
          v162 = "";
          v163 = 2048;
          v164 = v28;
          v165 = 2048;
          v166 = a2;
          v167 = 2112;
          v168 = value;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      Factory = FigSampleBufferConsumerCreateForSampleBufferConsumer("consumerToBAO", (_QWORD *)(DerivedStorage + 104));
      if ((_DWORD)Factory)
        goto LABEL_108;
      v29 = *v23;
      v30 = *(_QWORD *)(DerivedStorage + 104);
      v31 = value;
      v32 = *(uint64_t (**)(uint64_t, CMTimeValue, uint64_t, void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 96);
      if (!v32)
      {
        v46 = 0;
        v47 = 4294954514;
LABEL_91:
        if (v99)
          CFRelease(v99);
        if (v46)
          CFRelease(v46);
        goto LABEL_95;
      }
      Factory = v32(v29, v8, v30, v31, DerivedStorage + 400);
      if ((_DWORD)Factory)
      {
LABEL_108:
        v47 = Factory;
        goto LABEL_109;
      }
      v33 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      if (!v33[49] || (v34 = v33, v33[16]))
      {
        v47 = FigSignalErrorAt();
        if ((_DWORD)v47)
          goto LABEL_109;
LABEL_47:
        v49 = CFDictionaryGetValue(a3, CFSTR("FormatDescription"));
        if (v49)
        {
          v50 = v49;
          v51 = CMBaseObjectGetDerivedStorage();
          *(_QWORD *)type = 0;
          cf = 0;
          v104 = 0;
          v105 = 0;
          RichestDecodableFormatAndChannelLayout = FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription();
          if ((_DWORD)RichestDecodableFormatAndChannelLayout)
            goto LABEL_103;
          v53 = *(_QWORD *)(v51 + 392);
          v54 = *(_QWORD *)(v51 + 400);
          v55 = cf;
          v56 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 80);
          if (!v56)
          {
            v47 = 4294954514;
            goto LABEL_67;
          }
          RichestDecodableFormatAndChannelLayout = v56(v53, v54, v55, type);
          if ((_DWORD)RichestDecodableFormatAndChannelLayout
            || (RichestDecodableFormatAndChannelLayout = CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout(),
                (_DWORD)RichestDecodableFormatAndChannelLayout))
          {
LABEL_103:
            v47 = RichestDecodableFormatAndChannelLayout;
          }
          else if (v105 && (ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD()) != 0)
          {
            v58 = ASBD;
            ChannelLayoutTag = FigEndpointStreamAudioFormatDescriptionGetChannelLayoutTag();
            if (dword_1EE2A2EE0)
            {
              v97 = ChannelLayoutTag;
              v103 = 0;
              v102 = OS_LOG_TYPE_DEFAULT;
              v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v61 = v103;
              if (os_log_type_enabled(v60, v102))
                v62 = v61;
              else
                v62 = v61 & 0xFFFFFFFE;
              if (v62)
              {
                v63 = *v105;
                v64 = *(_QWORD *)v58;
                v66 = *((_DWORD *)v105 + 4);
                v65 = *((_DWORD *)v105 + 5);
                v68 = *(_DWORD *)(v58 + 16);
                v67 = *(_DWORD *)(v58 + 20);
                v69 = *((_DWORD *)v105 + 6);
                v70 = *((_DWORD *)v105 + 7);
                v71 = *(_DWORD *)(v58 + 28);
                v93 = *(_DWORD *)(v58 + 24);
                v94 = *((_DWORD *)v105 + 8);
                v95 = *(_DWORD *)(v58 + 32);
                v96 = *((_DWORD *)v105 + 3);
                v72 = *((_DWORD *)v105 + 2);
                v73 = HIBYTE(v72);
                v74 = BYTE2(v72);
                v75 = BYTE1(v72);
                v76 = v72;
                v77 = *(_DWORD *)(v58 + 8);
                v78 = *(_DWORD *)(v58 + 12);
                v79 = HIBYTE(v77);
                v80 = BYTE2(v77);
                v81 = BYTE1(v77);
                v82 = v77;
                v83 = (int)v104;
                if (v104)
                  v83 = *v104;
                LODWORD(v108.value) = 136321794;
                *(CMTimeValue *)((char *)&v108.value + 4) = (CMTimeValue)"fbaprp_copyOutputFormatDataFromContentFormatDescription";
                LOWORD(v108.flags) = 2048;
                *(_QWORD *)((char *)&v108.flags + 2) = 0;
                HIWORD(v108.epoch) = 2082;
                v109 = "";
                v110 = 2048;
                v111 = v63;
                v112 = 2048;
                v113 = v64;
                v114 = 1024;
                v115 = v70;
                v116 = 1024;
                v117 = v71;
                v118 = 1024;
                v119 = v66;
                v120 = 1024;
                v121 = v68;
                v122 = 1024;
                v123 = v65;
                v124 = 1024;
                v125 = v67;
                v126 = 1024;
                v127 = v69;
                v128 = 1024;
                v129 = v93;
                v130 = 1024;
                v131 = v94;
                v132 = 1024;
                v133 = v95;
                v134 = 1024;
                v135 = v96;
                v136 = 1024;
                v137 = v78;
                v138 = 1024;
                v139 = v73;
                v140 = 1024;
                v141 = v74;
                v142 = 1024;
                v143 = v75;
                v144 = 1024;
                v145 = v76;
                v146 = 1024;
                v147 = v79;
                v148 = 1024;
                v149 = v80;
                v150 = 1024;
                v151 = v81;
                v152 = 1024;
                v153 = v82;
                v154 = 1024;
                v155 = v83;
                v156 = 1024;
                v157 = v97;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v47 = 0;
            *(_QWORD *)(DerivedStorage + 80) = *(_QWORD *)type;
            *(_QWORD *)type = 0;
          }
          else
          {
            v47 = FigSignalErrorAt();
          }
LABEL_67:
          if (cf)
            CFRelease(cf);
          if (*(_QWORD *)type)
            CFRelease(*(CFTypeRef *)type);
          if (!(_DWORD)v47)
          {
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            v46 = MutableCopy;
            if (MutableCopy)
            {
              CFDictionarySetValue(MutableCopy, CFSTR("LoggingID"), value);
              v85 = FigBufferedAirPlaySubPipeManagerForRenderPipelineCreate(a1, *(const void **)(DerivedStorage + 104), a2, v50, a3, v46, (_QWORD *)(DerivedStorage + 376));
              if ((_DWORD)v85)
                goto LABEL_98;
              if (dword_1EE2A2EE0)
              {
                LODWORD(cf) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v87 = cf;
                if (os_log_type_enabled(v86, type[0]))
                  v88 = v87;
                else
                  v88 = v87 & 0xFFFFFFFE;
                if (v88)
                {
                  v89 = *(_QWORD *)(DerivedStorage + 376);
                  *(_DWORD *)v158 = 136315906;
                  *(_QWORD *)&v158[4] = "FigBufferedAirPlayAudioRenderPipelineCreate";
                  v159 = 2048;
                  v160 = 0;
                  v161 = 2082;
                  v162 = "";
                  v163 = 2048;
                  v164 = v89;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v85 = fbaprp_configureSubPipeManager();
              if ((_DWORD)v85
                || (CMNotificationCenterGetDefaultLocalCenter(),
                    v85 = FigNotificationCenterAddWeakListeners(),
                    (_DWORD)v85))
              {
LABEL_98:
                v47 = v85;
              }
              else
              {
                if (dword_1EE2A2EE0)
                {
                  LODWORD(cf) = 0;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v91 = cf;
                  if (os_log_type_enabled(v90, type[0]))
                    v92 = v91;
                  else
                    v92 = v91 & 0xFFFFFFFE;
                  if (v92)
                  {
                    *(_DWORD *)v158 = 136315650;
                    *(_QWORD *)&v158[4] = "FigBufferedAirPlayAudioRenderPipelineCreate";
                    v159 = 2048;
                    v160 = 0;
                    v161 = 2082;
                    v162 = "";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                v47 = 0;
                *v98 = v8;
              }
            }
            else
            {
              v47 = 4294954510;
            }
            goto LABEL_91;
          }
          goto LABEL_109;
        }
        Factory = FigSignalErrorAt();
        goto LABEL_108;
      }
      MEMORY[0x19402EEEC](v33[6]);
      v35 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)v158 = 0;
      if (*(_BYTE *)v35)
      {
        v47 = FigSignalErrorAt();
        goto LABEL_46;
      }
      v36 = v35;
      v37 = (CMBufferQueueRef *)(v35 + 128);
      if (*(_QWORD *)(v35 + 128) || *(_QWORD *)(v35 + 56))
      {
        v40 = FigSignalErrorAt();
      }
      else
      {
        UInt32 = CFDictionaryGetValue(a3, CFSTR("FormatDescription"));
        if (!UInt32)
        {
          v48 = FigSignalErrorAt();
          goto LABEL_41;
        }
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        v40 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, v37);
        if (!(_DWORD)v40)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(v36 + 88) = Mutable;
          if (!Mutable)
          {
            UInt32 = 0;
            v47 = 4294954443;
            goto LABEL_42;
          }
          CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(*(_QWORD *)(v36 + 392));
          v43 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (!v43)
          {
            UInt32 = 0;
            v47 = 4294954514;
LABEL_42:
            if (*(_QWORD *)v158)
              CFRelease(*(CFTypeRef *)v158);
            if (UInt32)
              CFRelease(UInt32);
LABEL_46:
            MEMORY[0x19402EF04](v34[6]);
            if ((_DWORD)v47)
            {
LABEL_109:
              v46 = 0;
              goto LABEL_91;
            }
            goto LABEL_47;
          }
          v44 = v43(CMBaseObject, CFSTR("PrerollDuration"), *MEMORY[0x1E0C9AE00], v158);
          if ((_DWORD)v44
            || (CMTimeMakeFromDictionary(&v108, *(CFDictionaryRef *)v158),
                *(CMTime *)(v36 + 336) = v108,
                *(_QWORD *)(v36 + 120) = CFRetain(UInt32),
                v45 = CMBaseObjectGetDerivedStorage(),
                *(_QWORD *)(v45 + 320) = (int)FigGetCFPreferenceNumberWithDefault(),
                v44 = fbaprp_setupBufferedAirPlayMediaProcessor(),
                (_DWORD)v44))
          {
            v47 = v44;
            UInt32 = 0;
            goto LABEL_42;
          }
          if (FigGetCFPreferenceNumberWithDefault())
          {
            UInt32 = (const void *)FigCFNumberCreateUInt32();
            FigMediaProcessorSetProperty(*(_QWORD *)(v36 + 56), CFSTR("ActivitySchedulerPriority"), (uint64_t)UInt32);
          }
          else
          {
            UInt32 = 0;
          }
          v48 = FigMediaProcessorGo(*(_QWORD *)(v36 + 56));
LABEL_41:
          v47 = v48;
          goto LABEL_42;
        }
      }
      v47 = v40;
      UInt32 = 0;
      goto LABEL_42;
    }
    if (!CFDictionaryGetValueIfPresent(a3, CFSTR("LoggingID"), (const void **)&value))
    {
      v21 = FigBufferedAirPlayAudioRenderPipelineCreate_sLogIDPostFix++;
      snprintf((char *)(DerivedStorage + 408), 0x13uLL, "BuffRP-%u", v21);
      v99 = 0;
      goto LABEL_10;
    }
    v16 = CFStringCreateMutableCopy(*v15, 0, (CFStringRef)value);
    if (v16)
    {
      v17 = FigBufferedAirPlayAudioRenderPipelineCreate_sLogIDPostFix++;
      v18 = v16;
      CFStringAppendFormat(v16, 0, CFSTR(".%u"), v17);
      v99 = v18;
      CFStringGetCString(v18, (char *)(DerivedStorage + 408), 20, 0x8000100u);
LABEL_10:
      value = (void *)CFStringCreateWithCString(a1, (const char *)(DerivedStorage + 408), 0x8000100u);
      v22 = (CFTypeRef *)(DerivedStorage + 368);
      if (CFDictionaryGetValueIfPresent(a3, CFSTR("AudioSession"), (const void **)(DerivedStorage + 368)) && *v22)
        CFRetain(*v22);
      goto LABEL_13;
    }
    v47 = 4294954510;
  }
LABEL_95:
  if (value)
    CFRelease(value);
  return v47;
}

uint64_t fbaprp_configureSubPipeManager()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t, const __CFString *, CFTypeRef);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 376));
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v2)
    goto LABEL_7;
  v3 = v2(CMBaseObject, CFSTR("SourceSampleBufferConsumer"), *MEMORY[0x1E0C9AE00], cf);
  if (!(_DWORD)v3)
  {
    v4 = *(_QWORD *)(DerivedStorage + 64);
    v5 = cf[0];
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
    if (v6)
    {
      v3 = v6(v4, CFSTR("DownstreamConsumer"), v5);
      if (!(_DWORD)v3)
      {
        if (dword_1EE2A2EE0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMNotificationCenterGetDefaultLocalCenter();
        v3 = FigNotificationCenterAddWeakListeners();
      }
      goto LABEL_9;
    }
LABEL_7:
    v8 = 4294954514;
    goto LABEL_10;
  }
LABEL_9:
  v8 = v3;
LABEL_10:
  if (cf[0])
    CFRelease(cf[0]);
  return v8;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *v3;
  uint64_t CMBaseObject;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  const void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, _QWORD);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFDictionary *Value;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  const void *v36;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  __CFDictionary *v43;

  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v43 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
    if (*(_BYTE *)DerivedStorage)
    {
      FigSignalErrorAt();
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
    }
    else
    {
      if (*(_QWORD *)(DerivedStorage + 56))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        FigMediaProcessorStop(*(_QWORD *)(DerivedStorage + 56));
        FigMediaProcessorWaitUntilCompletelyStopped(*(_QWORD *)(DerivedStorage + 56));
      }
      v3 = *(opaqueCMBufferQueue **)(DerivedStorage + 128);
      if (v3)
        CMBufferQueueReset(v3);
      CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 376));
      if (CMBaseObject)
      {
        v5 = CMBaseObject;
        v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v6)
          v6(v5);
      }
      if (*(_QWORD *)(DerivedStorage + 392))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        v7 = *(_QWORD *)(DerivedStorage + 392);
        v8 = *(_QWORD *)(DerivedStorage + 400);
        v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (v9)
          v9(v7, v8);
        v10 = *(const void **)(DerivedStorage + 392);
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(DerivedStorage + 392) = 0;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      fbaprp_setTimebaseGuts(a1, 0);
      *(_BYTE *)DerivedStorage = 1;
      fbaprp_transitionRosterRemoveAll();
      v11 = *(_QWORD *)(DerivedStorage + 64);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v12)
          v12(v11, CFSTR("DownstreamConsumer"), 0);
      }
      *(_QWORD *)(DerivedStorage + 144) = 0x3F80000000000000;
      *(_QWORD *)(DerivedStorage + 240) = 0;
      v13 = MEMORY[0x1E0CA2E18];
      v14 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 160) = *MEMORY[0x1E0CA2E18];
      v15 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(DerivedStorage + 176) = v15;
      *(_OWORD *)(DerivedStorage + 208) = v14;
      *(_QWORD *)(DerivedStorage + 224) = v15;
      v16 = MEMORY[0x1E0CA2E68];
      *(_OWORD *)(DerivedStorage + 260) = *MEMORY[0x1E0CA2E68];
      *(_QWORD *)(DerivedStorage + 276) = *(_QWORD *)(v16 + 16);
      *(_BYTE *)(DerivedStorage + 96) = 0;
      *(_WORD *)(DerivedStorage + 233) = 0;
      *(_QWORD *)(DerivedStorage + 320) = 0;
      *(_BYTE *)(DerivedStorage + 232) = 0;
      v17 = *(_QWORD *)(DerivedStorage + 72);
      if (v17)
      {
        FigSampleBufferProcessorForBufferedAirPlayCopyPerformanceDictionary(v17, &v43);
        memset(&v42, 0, sizeof(v42));
        Value = (const __CFDictionary *)CFDictionaryGetValue(v43, CFSTR("FirstMediaSamplePts"));
        CMTimeMakeFromDictionary(&v42, Value);
        memset(&v41, 0, sizeof(v41));
        v19 = (const __CFDictionary *)CFDictionaryGetValue(v43, CFSTR("LastMediaSamplePts"));
        CMTimeMakeFromDictionary(&v41, v19);
        memset(&v40, 0, sizeof(v40));
        v20 = (const __CFDictionary *)CFDictionaryGetValue(v43, CFSTR("FirstContinuousSamplePts"));
        CMTimeMakeFromDictionary(&v40, v20);
        memset(&v39, 0, sizeof(v39));
        v21 = (const __CFDictionary *)CFDictionaryGetValue(v43, CFSTR("LastContinuousSamplePts"));
        CMTimeMakeFromDictionary(&v39, v21);
        memset(&v38, 0, sizeof(v38));
        v22 = (const __CFDictionary *)CFDictionaryGetValue(v43, CFSTR("DurationProcessed"));
        CMTimeMakeFromDictionary(&v38, v22);
      }
      v23 = *(const void **)(DerivedStorage + 304);
      if (v23)
      {
        CFRelease(v23);
        *(_QWORD *)(DerivedStorage + 304) = 0;
      }
      v24 = *(const void **)(DerivedStorage + 72);
      if (v24)
      {
        CFRelease(v24);
        *(_QWORD *)(DerivedStorage + 72) = 0;
      }
      v25 = *(const void **)(DerivedStorage + 128);
      if (v25)
      {
        CFRelease(v25);
        *(_QWORD *)(DerivedStorage + 128) = 0;
      }
      v26 = *(const void **)(DerivedStorage + 136);
      if (v26)
      {
        CFRelease(v26);
        *(_QWORD *)(DerivedStorage + 136) = 0;
      }
      v27 = *(const void **)(DerivedStorage + 328);
      if (v27)
      {
        CFRelease(v27);
        *(_QWORD *)(DerivedStorage + 328) = 0;
      }
      v28 = *(const void **)(DerivedStorage + 88);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(DerivedStorage + 88) = 0;
      }
      v29 = *(const void **)(DerivedStorage + 360);
      if (v29)
      {
        CFRelease(v29);
        *(_QWORD *)(DerivedStorage + 360) = 0;
      }
      v30 = *(const void **)(DerivedStorage + 368);
      if (v30)
      {
        CFRelease(v30);
        *(_QWORD *)(DerivedStorage + 368) = 0;
      }
      v31 = *(const void **)(DerivedStorage + 80);
      if (v31)
      {
        CFRelease(v31);
        *(_QWORD *)(DerivedStorage + 80) = 0;
      }
      v32 = *(const void **)(DerivedStorage + 120);
      if (v32)
      {
        CFRelease(v32);
        *(_QWORD *)(DerivedStorage + 120) = 0;
      }
      v33 = *(const void **)(DerivedStorage + 104);
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(DerivedStorage + 104) = 0;
      }
      v34 = *(const void **)(DerivedStorage + 64);
      if (v34)
      {
        CFRelease(v34);
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      v35 = *(_QWORD *)(DerivedStorage + 48);
      v36 = *(const void **)(DerivedStorage + 56);
      *(_QWORD *)(DerivedStorage + 56) = 0;
      MEMORY[0x19402EF04](v35);
      if (v36)
        CFRelease(v36);
    }
    if (v43)
      CFRelease(v43);
  }
  return 0;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigBufferedAirPlayAudioRenderPipelineInvalidate(a1);
  v4 = *(const void **)(DerivedStorage + 376);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 32);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v6 = *(NSObject **)(DerivedStorage + 16);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v8 = *(NSObject **)(DerivedStorage + 40);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v9 = *(NSObject **)(DerivedStorage + 8);
  if (v9)
  {
    dispatch_sync_f(v9, 0, (dispatch_function_t)fbaprp_dispatchNoOp);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 8));
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  result = *(_QWORD *)(DerivedStorage + 48);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  return result;
}

__CFString *FigBufferedAirPlayAudioRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigBufferedAirPlayAudioRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  const void **v9;
  int v10;
  const void *Float32;
  uint64_t BufferedAirPlaySampleBufferConsumer;
  CFTypeRef *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_31;
  }
  if (CFEqual(CFSTR("IsTimebaseStarter"), a2))
  {
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 256);
    goto LABEL_4;
  }
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    Float32 = *(const void **)(DerivedStorage + 248);
    if (!Float32)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (CFEqual(CFSTR("IsRunning"), a2))
  {
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (*(double *)(DerivedStorage + 240) == 0.0)
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    *a4 = (CFDictionaryRef)CFRetain(*v14);
    if (dword_1EE2A2EE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    BufferedAirPlaySampleBufferConsumer = 0;
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    Float32 = *(const void **)(DerivedStorage + 128);
    if (!Float32)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (CFEqual(CFSTR("NeedsToFlushWhenRateChanges"), a2))
  {
LABEL_22:
    v9 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_6:
    Float32 = *v9;
LABEL_7:
    Float32 = CFRetain(Float32);
LABEL_8:
    BufferedAirPlaySampleBufferConsumer = 0;
    *a4 = (CFDictionaryRef)Float32;
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("PreferredClock"), a2))
  {
    v16 = FigBufferedAirPlayOutputProxyCopyProperty(*(_QWORD *)(DerivedStorage + 392), (uint64_t)CFSTR("PreferredClock"), (uint64_t)a3, (uint64_t)a4);
LABEL_31:
    BufferedAirPlaySampleBufferConsumer = v16;
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("EndPresentationTimeForQueuedSamples"), a2))
  {
    v16 = fbaprp_copyEndPresentationTimeForQueuedSamples(a1, a3, a4);
    goto LABEL_31;
  }
  if (CFEqual(CFSTR("EndPresentationTimeForDecodedSamples"), a2))
  {
    v16 = fbaprp_copyEndPresentationTimeForDecodedSamples(a1, (uint64_t)a3, a4);
    goto LABEL_31;
  }
  if (CFEqual(CFSTR("SupportsGaplessTransitionsAcrossFormatChanges"), a2)
    || CFEqual(CFSTR("PrefersConsumptionDrivenReads"), a2))
  {
    goto LABEL_22;
  }
  if (CFEqual(CFSTR("DecodingRate"), a2))
  {
    Float32 = (const void *)FigCFNumberCreateFloat32();
    goto LABEL_8;
  }
  if (CFEqual(CFSTR("Started"), a2))
  {
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 96);
    goto LABEL_4;
  }
  if (CFEqual(CFSTR("UsesSubPipe"), a2))
    goto LABEL_22;
  if (!CFEqual(CFSTR("SourceSampleBufferConsumer"), a2))
  {
    if (!CFEqual(CFSTR("AllowsPrebuffering"), a2))
    {
      v16 = FigBufferedAirPlaySubPipeManagerForRenderPipelineCopyProperty(*(_QWORD *)(DerivedStorage + 376), (uint64_t)a2, *MEMORY[0x1E0C9AE00], (uint64_t)a4);
      goto LABEL_31;
    }
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 384);
LABEL_4:
    if (!v10)
      v9 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_6;
  }
  BufferedAirPlaySampleBufferConsumer = fbaprp_createBufferedAirPlaySampleBufferConsumer(a1, a4);
  if (!(_DWORD)BufferedAirPlaySampleBufferConsumer)
    fbaprp_cleanFreedSampleBufferConsumers();
LABEL_9:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  return BufferedAirPlaySampleBufferConsumer;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineSetProperty(const void *a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  CFTypeID TypeID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  CFTypeID v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, __CFString *, const void *);
  __CFString **v24;
  CFTypeID v25;
  CFTypeID v26;
  int v27;
  uint64_t v28;
  __CFString **v29;
  CFTypeID v30;
  int v31;
  CFTypeID v32;
  NSObject *v33;
  const void *v34;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (CFEqual(CFSTR("IsTimebaseStarter"), a2))
  {
    if (a3)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v7[256] = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        if (dword_1EE2A2EE0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v21 = *((_QWORD *)v7 + 49);
        v22 = *((_QWORD *)v7 + 50);
        v23 = *(void (**)(uint64_t, uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
        if (!v23)
          return 0;
        v24 = kFigBufferedAirPlayOutputProxyState_RenderPipelineStateIsTimebaseStarter;
        goto LABEL_30;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    if (!a3 || (v10 = CMTimebaseGetTypeID(), v10 == CFGetTypeID(a3)))
    {
      v11 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 48));
      if (*(_BYTE *)v11)
      {
        FigSignalErrorAt();
      }
      else
      {
        v12 = *(_QWORD *)(v11 + 248);
        if (v12)
          fbaprp_transitionRosterRemoveRecordByTimebase((uint64_t)a1, v12);
        fbaprp_setTimebaseGuts((uint64_t)a1, a3);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v11 + 48));
      if (dword_1EE2A2EE0)
      {
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("GoActive"), a2))
  {
    v14 = CFBooleanGetTypeID();
    if (v14 == CFGetTypeID(a3))
    {
      v15 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v15 + 48));
      if (*(_BYTE *)v15)
      {
        v17 = FigSignalErrorAt();
      }
      else
      {
        if ((const void *)*MEMORY[0x1E0C9AE50] != a3)
        {
          v16 = FigMediaProcessorStop(*(_QWORD *)(v15 + 56));
          if (!(_DWORD)v16)
            v16 = FigMediaProcessorWaitUntilCompletelyStopped(*(_QWORD *)(v15 + 56));
          v17 = v16;
          MEMORY[0x19402EF04](*(_QWORD *)(v15 + 48));
          if (dword_1EE2A2EE0)
          {
            v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fbaprp_postNotification(a1, (uint64_t)CFSTR("PrerollLost"), 0);
          return v17;
        }
        v17 = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v15 + 48));
      return v17;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("MXSession"), a2))
    return 0;
  if (CFEqual(CFSTR("Muted"), a2))
  {
    v19 = CFBooleanGetTypeID();
    if (v19 == CFGetTypeID(a3))
      return FigBufferedAirPlayOutputProxySetProperty(*((_QWORD *)v7 + 49), (uint64_t)CFSTR("Muted"), (uint64_t)a3);
    return 0;
  }
  if (!CFEqual(CFSTR("AudioProcessingTap"), a2))
  {
    if (CFEqual(CFSTR("PrerollRate"), a2))
    {
      if (a3)
      {
        v26 = CFNumberGetTypeID();
        if (v26 == CFGetTypeID(a3))
        {
          FigCFNumberGetFloat32();
          *((_DWORD *)v7 + 38) = v27;
          v28 = *((_QWORD *)v7 + 47);
          v29 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_DecodeForPrerollRate;
          return FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(v28, (uint64_t)*v29, (uint64_t)a3);
        }
      }
    }
    else
    {
      if (!CFEqual(CFSTR("PipelineRate"), a2))
      {
        if (!CFEqual(CFSTR("LoudnessInfo"), a2))
        {
          if (CFEqual(CFSTR("SoftwareVolume1"), a2)
            || CFEqual(CFSTR("SoftwareVolume2"), a2)
            || CFEqual(CFSTR("SoftwareVolume3"), a2)
            || CFEqual(CFSTR("SoftwareVolume5"), a2)
            || CFEqual(CFSTR("SoftwareVolume1RampDuration"), a2)
            || CFEqual(CFSTR("SoftwareVolume2RampDuration"), a2)
            || CFEqual(CFSTR("STSLabel"), a2))
          {
            return 0;
          }
          if (!CFEqual(CFSTR("AllowsPrebuffering"), a2))
          {
            if (CFEqual(CFSTR("HardwarePassthrough"), a2))
              FigLogBacktrace();
            v17 = FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(*((_QWORD *)v7 + 47), (uint64_t)a2, (uint64_t)a3);
            if ((_DWORD)v17)
            {
              v34 = (const void *)FigCFCopyCompactDescription();
              if (v34)
                CFRelease(v34);
            }
            return v17;
          }
          v32 = CFBooleanGetTypeID();
          if (v32 == CFGetTypeID(a3))
          {
            if (!FigGetCFPreferenceNumberWithDefault())
              return 0;
            v7[384] = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
            if (dword_1EE2A2EE0)
            {
              v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v21 = *((_QWORD *)v7 + 49);
            v22 = *((_QWORD *)v7 + 50);
            v23 = *(void (**)(uint64_t, uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
            if (!v23)
              return 0;
            v24 = kFigBufferedAirPlayOutputProxyState_RenderPipelineStateAllowsPrebuffering;
LABEL_30:
            v23(v21, v22, *v24, a3);
            return 0;
          }
          return FigSignalErrorAt();
        }
        v28 = *((_QWORD *)v7 + 47);
        v29 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_LoudnessInfo;
        return FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(v28, (uint64_t)*v29, (uint64_t)a3);
      }
      if (a3)
      {
        v30 = CFNumberGetTypeID();
        if (v30 == CFGetTypeID(a3))
        {
          FigCFNumberGetFloat32();
          *((_DWORD *)v7 + 39) = v31;
          v28 = *((_QWORD *)v7 + 47);
          v29 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_PipelineRate;
          return FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(v28, (uint64_t)*v29, (uint64_t)a3);
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    v25 = MTAudioProcessingTapGetTypeID();
    if (v25 != CFGetTypeID(a3))
      return 0;
  }
  return fbaprp_setAudioProcessingTap((uint64_t)a1, (uint64_t)a3);
}

void fbaprp_setTimebaseGuts(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v4 = *(const void **)(DerivedStorage + 248);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(DerivedStorage + 248) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
}

void fbaprp_transitionRosterRemoveAll()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD **)(DerivedStorage + 288);
  if (!v1)
    return;
  v2 = (_QWORD **)(DerivedStorage + 288);
  while (1)
  {
    v3 = (_QWORD *)*v1;
    v4 = *v2;
    if (*v2 == v1)
      break;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4 != v1);
    *v5 = v3;
    if (!v3)
      goto LABEL_11;
LABEL_8:
    fbaprp_transitionRosterFreeRecord((uint64_t)v1);
    v1 = v3;
  }
  *v2 = v3;
  if (v3)
    goto LABEL_8;
  v5 = (_QWORD *)(DerivedStorage + 288);
LABEL_11:
  *(_QWORD *)(DerivedStorage + 296) = v5;
  fbaprp_transitionRosterFreeRecord((uint64_t)v1);
}

void fbaprp_transitionIDFound(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 312) = 1;
  if (a5)
    CFRetain(a5);
  if (a2)
    CFRetain(a2);
  v8 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbaprp_transitionIDFound_block_invoke;
  block[3] = &__block_descriptor_tmp_46;
  block[4] = DerivedStorage;
  block[5] = a5;
  block[6] = a2;
  dispatch_async(v8, block);
}

uint64_t fbaprp_resumeOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  const void *v10;
  CMClockRef HostTimeClock;
  float Rate;
  NSObject *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;
  NSObject *v16;
  float v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  float v22;
  NSObject *v23;
  CMTime v24;
  CMTime time;
  CMTime v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v24.value = *MEMORY[0x1E0CA2E18];
  v24.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (!a5)
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a5) || !FigCFDictionaryGetCMTimeIfPresent())
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)(DerivedStorage + 232))
  {
    *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)&v24.value;
    *(_QWORD *)(DerivedStorage + 176) = v24.epoch;
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  }
  if (*(_BYTE *)(DerivedStorage + 233))
  {
    *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)&v24.value;
    *(_QWORD *)(DerivedStorage + 176) = v24.epoch;
    v10 = *(const void **)(DerivedStorage + 248);
    HostTimeClock = CMClockGetHostTimeClock();
    time = v24;
    CMSyncConvertTime(&v26, &time, v10, HostTimeClock);
    *(CMTime *)(DerivedStorage + 208) = v26;
    Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 248));
    if (Rate == 0.0)
    {
      *(_WORD *)(DerivedStorage + 232) = 1;
    }
    else
    {
      if (dword_1EE2A2EE0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(a2, Rate);
    }
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  }
  if (*(float *)(DerivedStorage + 152) == 0.0)
  {
    if (*(float *)(DerivedStorage + 156) == 0.0)
    {
      if (dword_1EE2A2EE0)
      {
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v26 = v24;
      v18 = (__int128 *)MEMORY[0x1E0CA2E18];
      v17 = 0.0;
      v19 = a2;
      v20 = 0;
      goto LABEL_27;
    }
    if (dword_1EE2A2EE0)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(_BYTE *)(DerivedStorage + 96))
    {
      v17 = *(float *)(DerivedStorage + 156);
      goto LABEL_26;
    }
    if (!dword_1EE2A2EE0)
      return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
LABEL_38:
    v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  }
  if (dword_1EE2A2EE0)
  {
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    if (!dword_1EE2A2EE0)
      return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
    goto LABEL_38;
  }
  v17 = *(float *)(DerivedStorage + 152);
LABEL_26:
  v26 = v24;
  v18 = (__int128 *)MEMORY[0x1E0CA2E18];
  v19 = a2;
  v20 = 1;
LABEL_27:
  if (!fbaprp_startAudioChainGuts(v17, v19, v20, (__int128 *)&v26.value, v18))
  {
    if ((v24.flags & 1) != 0)
    {
      *(_OWORD *)(DerivedStorage + 184) = *(_OWORD *)&v24.value;
      *(_QWORD *)(DerivedStorage + 200) = v24.epoch;
      if (dword_1EE2A2EE0)
      {
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v22 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 248));
    if (v22 != 0.0 && *(_BYTE *)(DerivedStorage + 384))
    {
      v26 = *(CMTime *)(DerivedStorage + 184);
      time = *(CMTime *)(DerivedStorage + 208);
      fbaprp_setRateOnAudioChainGuts(a2, (uint64_t)&v26, &time, 0, v22);
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
}

void fbaprp_resetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  fbaprp_suspendAudioChainGuts(a2);
  JUMPOUT(0x19402EF04);
}

uint64_t fbaprp_sbufProcessorFoundEndOfSiriTTSUtterance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, __int128 *);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (a5)
  {
    if (!*(_BYTE *)DerivedStorage)
    {
      v7 = CFGetTypeID(a5);
      if (v7 == CFDictionaryGetTypeID())
      {
        if (FigCFDictionaryGetCMTimeIfPresent())
        {
          if ((BYTE12(v12) & 1) != 0)
          {
            v8 = *(_QWORD *)(DerivedStorage + 392);
            v9 = *(_QWORD *)(DerivedStorage + 400);
            v10 = *(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
            if (v10)
            {
              v14 = v12;
              v15 = v13;
              v10(v8, v9, &v14);
            }
          }
        }
      }
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
}

void __fbaprp_transitionIDFound_block_invoke(uint64_t a1)
{
  CFTypeID TypeID;
  const void *Value;
  const void *v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *Record;
  _QWORD *v9;
  const void *v10;
  const void *v11;
  OpaqueCMTimebase *v12;
  CFTypeRef v13;
  const void *v14;
  const void *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  CMTime v19;
  os_log_type_t type[16];
  uint64_t v21;
  __int128 v22;
  CMTimeEpoch epoch;
  CMTime v24;
  CMTime time;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v19.value = *MEMORY[0x1E0CA2E18];
  v19.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v18 = *MEMORY[0x1E0CA2E18];
  v16 = *MEMORY[0x1E0CA2E68];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 256))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(*(CFTypeRef *)(a1 + 40)))
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("TransitionID"));
        if (Value)
        {
          v4 = Value;
          if (FigCFDictionaryGetCMTimeIfPresent())
          {
            if (FigCFDictionaryGetCMTimeIfPresent() && FigCFDictionaryGetCMTimeIfPresent())
            {
              v5 = *(_QWORD *)(a1 + 48);
              DerivedStorage = CMBaseObjectGetDerivedStorage();
              if (dword_1EE2A2EE0)
              {
                LODWORD(v22) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              Record = fbaprp_transitionRosterGetRecord(v5, (uint64_t)v4);
              if (Record)
              {
                v9 = Record;
                v10 = (const void *)Record[6];
                Record[15] = v17;
                *(_OWORD *)(Record + 13) = v16;
                *(_OWORD *)(Record + 3) = *(_OWORD *)&v19.value;
                Record[5] = v19.epoch;
                v11 = *(const void **)(DerivedStorage + 304);
                if (v11)
                {
                  v9[2] = CFRetain(v11);
                  v12 = *(OpaqueCMTimebase **)(DerivedStorage + 304);
                }
                else
                {
                  v13 = *(CFTypeRef *)(DerivedStorage + 248);
                  if (v13)
                  {
                    v13 = CFRetain(v13);
                    v12 = *(OpaqueCMTimebase **)(DerivedStorage + 248);
                  }
                  else
                  {
                    v12 = 0;
                  }
                  v9[2] = v13;
                }
                CMTimebaseGetTime(&time, v12);
                v24 = v19;
                v22 = v18;
                epoch = v19.epoch;
                *(_OWORD *)type = v16;
                v21 = v17;
                fbaprp_scheduleItemTransitionOnTimebase(v5, v12, (uint64_t)&time, &v24, v10, (uint64_t)&v22, (__int128 *)type, v4);
              }
            }
          }
        }
      }
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  v14 = *(const void **)(a1 + 48);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 40);
  if (v15)
    CFRelease(v15);
}

_QWORD *fbaprp_transitionRosterGetRecord(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  v4 = (_QWORD *)(DerivedStorage + 288);
  do
    v4 = (_QWORD *)*v4;
  while (v4 && !FigCFEqual());
  return v4;
}

void fbaprp_scheduleItemTransitionOnTimebase(uint64_t a1, void *a2, uint64_t a3, CMTime *a4, const void *a5, uint64_t a6, __int128 *a7, const void *a8)
{
  uint64_t DerivedStorage;
  dispatch_source_t v16;
  NSObject *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *Record;
  NSObject *v25;
  const void *v26;
  uint64_t v27;
  CMTime v28;
  CMTime v29;
  CMTime rhs;
  CMTime lhs;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v29, 0, sizeof(v29));
  CMTimeMake(&v29, 1, 1);
  memset(&v28, 0, sizeof(v28));
  lhs = *a4;
  rhs = v29;
  CMTimeSubtract(&v28, &lhs, &rhs);
  if (a2)
  {
    if (a5)
    {
      v16 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 32));
      if (v16)
      {
        v17 = v16;
        v27 = DerivedStorage;
        v18 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0x10E0040C66585F0uLL);
        if (v18)
        {
          v19 = v18;
          *((_QWORD *)v18 + 2) = CFRetain(a2);
          *((_QWORD *)v19 + 3) = CFRetain(a5);
          *(_QWORD *)v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          *(CMTime *)(v19 + 32) = v28;
          v20 = *(_QWORD *)(a6 + 16);
          *((_OWORD *)v19 + 5) = *(_OWORD *)a6;
          *((_QWORD *)v19 + 12) = v20;
          v21 = *a7;
          *((_QWORD *)v19 + 15) = *((_QWORD *)a7 + 2);
          *(_OWORD *)(v19 + 104) = v21;
          epoch = a4->epoch;
          *(_OWORD *)(v19 + 56) = *(_OWORD *)&a4->value;
          *((_QWORD *)v19 + 9) = epoch;
          *((_QWORD *)v19 + 1) = CFRetain(a8);
          if (dword_1EE2A2EE0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          dispatch_source_set_timer(v17, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          dispatch_source_set_event_handler_f(v17, (dispatch_function_t)fbaprp_transitionToNextTimebaseNow);
          dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)fbaprp_cancelTimebaseTransition);
          dispatch_set_context(v17, v19);
          dispatch_resume(v17);
          if (a8)
          {
            Record = fbaprp_transitionRosterGetRecord(a1, (uint64_t)a8);
            if (Record)
            {
              v25 = Record[12];
              Record[12] = v17;
              dispatch_retain(v17);
              if (v25)
              {
                dispatch_source_cancel(v25);
                dispatch_release(v25);
              }
            }
          }
          if (!CMTimebaseAddTimerDispatchSource((CMTimebaseRef)a2, v17))
          {
            lhs = v28;
            if (!CMTimebaseSetTimerDispatchSourceNextFireTime((CMTimebaseRef)a2, v17, &lhs, 1u))
            {
              v26 = *(const void **)(v27 + 304);
              *(_QWORD *)(v27 + 304) = a5;
              CFRetain(a5);
              if (v26)
                CFRelease(v26);
              goto LABEL_15;
            }
            CMTimebaseRemoveTimerDispatchSource((CMTimebaseRef)a2, v17);
          }
          fbaprp_transitionRosterRemoveRecordByTimebase(a1, (uint64_t)a5);
        }
LABEL_15:
        dispatch_release(v17);
      }
    }
  }
}

void fbaprp_transitionToNextTimebaseNow(uint64_t a1)
{
  const void *v2;
  double Rate;
  Float64 v4;
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v11;
  _QWORD *Record;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CMClockRef HostTimeClock;
  __int128 v18;
  CMClockOrTimebaseRef v19;
  CMClockRef v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMTimebase *v22;
  void (*v23)(uint64_t, CFTypeRef, CMTime *, CMTime *, float);
  uint64_t v24;
  float v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime rhs;
  CMTime lhs;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v28 = v29;
  v27 = v29;
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 16));
  memset(&v26, 0, sizeof(v26));
  if (v2)
  {
    v4 = Rate;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
    if (*(_BYTE *)DerivedStorage)
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
      CFRelease(v2);
    }
    else
    {
      v6 = *(OpaqueCMTimebase **)(DerivedStorage + 248);
      if (v6)
      {
        CMTimebaseGetTime(&v28, v6);
        lhs = v28;
        rhs = *(CMTime *)(DerivedStorage + 260);
        CMTimeAdd(&v27, &lhs, &rhs);
        v30 = v27;
        v7 = CMBaseObjectGetDerivedStorage();
        v8 = (_QWORD **)(v7 + 288);
        v9 = v7 + 288;
        while (1)
        {
          v9 = *(_QWORD *)v9;
          if (!v9)
            break;
          lhs = *(CMTime *)(v9 + 104);
          rhs = v30;
          if (CMTimeCompare(&lhs, &rhs) <= 0)
          {
            for (i = *v8; i != (_QWORD *)v9; i = (_QWORD *)*i)
              v8 = (_QWORD **)i;
            v11 = *(_QWORD *)v9;
            *v8 = *(_QWORD **)v9;
            if (!v11)
              *(_QWORD *)(v7 + 296) = v8;
            fbaprp_transitionRosterFreeRecord(v9);
            break;
          }
        }
      }
      Record = fbaprp_transitionRosterGetRecord((uint64_t)v2, *(_QWORD *)(a1 + 8));
      if (Record)
      {
        v13 = (uint64_t)Record;
        v14 = *(const void **)(a1 + 8);
        if (v14)
          v15 = CFRetain(v14);
        else
          v15 = 0;
        v30 = *(CMTime *)(v13 + 56);
        v16 = *(const void **)(a1 + 16);
        HostTimeClock = CMClockGetHostTimeClock();
        lhs = *(CMTime *)(a1 + 56);
        CMSyncConvertTime(&v29, &lhs, v16, HostTimeClock);
        v18 = *(_OWORD *)(a1 + 104);
        *(_QWORD *)(DerivedStorage + 276) = *(_QWORD *)(a1 + 120);
        *(_OWORD *)(DerivedStorage + 260) = v18;
        v19 = CMTimebaseCopySource(*(CMTimebaseRef *)(a1 + 24));
        v20 = CMClockGetHostTimeClock();
        lhs = v29;
        CMSyncConvertTime(&v26, &lhs, v20, v19);
        if (dword_1EE2A2EE0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v22 = *(OpaqueCMTimebase **)(a1 + 24);
        lhs = v30;
        rhs = v26;
        if (CMTimebaseSetRateAndAnchorTime(v22, v4, &lhs, &rhs))
        {
          v23 = 0;
          v24 = 0;
        }
        else
        {
          fbaprp_setTimebaseGuts((uint64_t)v2, *(const void **)(a1 + 24));
          v23 = *(void (**)(uint64_t, CFTypeRef, CMTime *, CMTime *, float))(v13 + 80);
          v24 = *(_QWORD *)(v13 + 88);
        }
        *(_BYTE *)(v13 + 128) = 1;
        fbaprp_transitionRosterCancelAndReleaseTimerSource(v13);
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
        if (v23)
        {
          v25 = v4;
          lhs = v30;
          rhs = v29;
          v23(v24, v15, &lhs, &rhs, v25);
        }
        if (v19)
          CFRelease(v19);
        if (v15)
          CFRelease(v15);
      }
      else
      {
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
      }
      CFRelease(v2);
    }
  }
}

void fbaprp_transitionRosterRemoveRecordByTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    v5 = (_QWORD **)(DerivedStorage + 288);
    v6 = (_QWORD *)(DerivedStorage + 288);
    while (1)
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        break;
      if (FigCFEqual())
      {
        for (i = *v5; i != v6; i = (_QWORD *)*i)
          v5 = (_QWORD **)i;
        v8 = (_QWORD *)*v6;
        *v5 = (_QWORD *)*v6;
        if (!v8)
          *(_QWORD *)(v4 + 296) = v5;
        fbaprp_transitionRosterFreeRecord((uint64_t)v6);
        return;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fbaprp_itemTransitionContextRelease(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    v5 = a1[3];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

void fbaprp_transitionRosterCancelAndReleaseTimerSource(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 96);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 96));
    *(_QWORD *)(a1 + 96) = 0;
  }
}

void fbaprp_transitionRosterFreeRecord(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = MEMORY[0x1E0CA2E18];
  v6 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  fbaprp_transitionRosterCancelAndReleaseTimerSource(a1);
  free((void *)a1);
}

uint64_t fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(uint64_t a1, double a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, double);
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v11;
  CMTime type;
  CMTime v13;
  CMTime v14;
  CMTime time;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 392);
  v6 = *(_QWORD *)(DerivedStorage + 400);
  v7 = *(_QWORD *)(DerivedStorage + 80);
  *(_OWORD *)&v13.value = *(_OWORD *)(DerivedStorage + 184);
  v13.epoch = *(_QWORD *)(DerivedStorage + 200);
  *(_OWORD *)&type.value = *(_OWORD *)(DerivedStorage + 208);
  type.epoch = *(_QWORD *)(DerivedStorage + 224);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 120);
  if (!v8)
    return 4294954514;
  time = v13;
  v14 = type;
  result = v8(v5, v6, &time, &v14, v7, a2);
  if (!(_DWORD)result)
  {
    if (dword_1EE2A2EE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    result = 0;
    if (a2 != 0.0 && !*(_BYTE *)(DerivedStorage + 96))
    {
      v11 = a2;
      *(float *)(DerivedStorage + 148) = v11;
      *(_BYTE *)(DerivedStorage + 96) = 1;
      *(Float64 *)(DerivedStorage + 240) = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 248));
      time = *(CMTime *)(DerivedStorage + 184);
      v14 = *(CMTime *)(DerivedStorage + 208);
      return fbaprp_setRateOnAudioChainGuts(a1, (uint64_t)&time, &v14, 0, v11);
    }
  }
  return result;
}

uint64_t fbaprp_startAudioChainGuts(float a1, uint64_t a2, int a3, __int128 *a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v14;
  const void *v15;
  const void *v16;
  NSObject *v17;
  NSObject *v18;
  _BYTE *v19;
  _QWORD *v20;
  const void *UInt32;
  uint64_t v22;
  uint64_t CMBaseObject;
  void (*v24)(uint64_t, const __CFString *, const void *);
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  result = FigMediaProcessorGo(*(_QWORD *)(DerivedStorage + 56));
  if (!(_DWORD)result)
  {
    if ((*((_DWORD *)a4 + 3) & 0x1D) == 1)
    {
      v12 = *a4;
      *(_QWORD *)(v10 + 176) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(v10 + 160) = v12;
      if (dword_1EE2A2EE0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (*(_BYTE *)(v10 + 96))
    {
      if (!dword_1EE2A2EE0)
        return 0;
    }
    else
    {
      if (a3 == 1)
      {
        *(float *)(v10 + 144) = a1;
        v14 = *a5;
        *(_QWORD *)(v10 + 224) = *((_QWORD *)a5 + 2);
        *(_OWORD *)(v10 + 208) = v14;
      }
      else
      {
        a1 = *(float *)(v10 + 144);
      }
      if (a1 != 0.0 && (*(_DWORD *)(v10 + 172) & 0x1D) == 1)
      {
        v15 = *(const void **)(v10 + 136);
        v16 = *(const void **)(v10 + 248);
        *(_QWORD *)(v10 + 136) = v16;
        if (v16)
          CFRetain(v16);
        if (v15)
          CFRelease(v15);
        if (dword_1EE2A2EE0)
        {
          v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v19 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (!*v19)
        {
          v20 = v19;
          UInt32 = (const void *)FigCFNumberCreateUInt32();
          v22 = v20[7];
          if (v22)
            FigMediaProcessorSetProperty(v22, CFSTR("ActivitySchedulerPriority"), (uint64_t)UInt32);
          CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(v20[47]);
          v24 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
          if (v24)
            v24(CMBaseObject, CFSTR("ThreadPriority"), UInt32);
          v25 = CFSTR("BufferedAirPlayUrgent");
          if (CFSTR("BufferedAirPlayUrgent"))
            v25 = (const __CFString *)CFRetain(CFSTR("BufferedAirPlayUrgent"));
          v20[41] = v25;
          if (UInt32)
            CFRelease(UInt32);
        }
        *(_DWORD *)(v10 + 148) = *(_DWORD *)(v10 + 144);
        *(_BYTE *)(v10 + 96) = 1;
        *(_WORD *)(v10 + 232) = 0;
        v27 = *(_QWORD *)(v10 + 392);
        v26 = *(_QWORD *)(v10 + 400);
        v28 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
        if (v28)
          return v28(v27, v26);
        else
          return 4294954514;
      }
      if (!dword_1EE2A2EE0)
        return 0;
    }
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return result;
}

uint64_t fbaprp_setRateOnAudioChainGuts(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, float a5)
{
  _BYTE *DerivedStorage;
  _BYTE *v10;
  int v11;
  BOOL v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, CMTime *, CMTime *, double);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  const __CFAllocator *v24;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v26;
  CFMutableDictionaryRef v27;
  CFMutableDictionaryRef v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, void (*)(uint64_t, int, CMTime *, CMTime *, uint64_t, float), char *, CFMutableDictionaryRef, double);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, _QWORD, _QWORD, _QWORD, double);
  uint64_t v38;
  CMTime type;
  CMTime typea;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTime time;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_43;
  }
  v10 = DerivedStorage;
  v11 = dword_1EE2A2EE0;
  if (DerivedStorage[256])
    v12 = 1;
  else
    v12 = dword_1EE2A2EE0 == 0;
  if (!v12)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v11 = dword_1EE2A2EE0;
  }
  if (v11)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2A2EE0)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v16 = *((_QWORD *)v10 + 47);
  *(_OWORD *)&v43.value = *((_OWORD *)v10 + 10);
  v43.epoch = *((_QWORD *)v10 + 22);
  *(_OWORD *)&type.value = *((_OWORD *)v10 + 13);
  type.epoch = *((_QWORD *)v10 + 28);
  v17 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v17)
    goto LABEL_38;
  time = v43;
  v45 = type;
  v18 = v17(v16, &time, &v45, a5);
  if ((_DWORD)v18)
  {
LABEL_43:
    v33 = v18;
    v19 = 0;
    goto LABEL_39;
  }
  if (a5 == 0.0)
  {
    if (dword_1EE2A2EE0)
    {
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v34 = *((_QWORD *)v10 + 49);
    v35 = *((_QWORD *)v10 + 50);
    v36 = *((_QWORD *)v10 + 10);
    v37 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v37)
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v45 = time;
      v38 = v37(v34, v35, &time, &v45, v36, 0, 0, 0, 0.0);
      v19 = 0;
      if ((_DWORD)v38)
      {
LABEL_41:
        v33 = v38;
        goto LABEL_39;
      }
      v28 = 0;
      v26 = 0;
      goto LABEL_33;
    }
LABEL_38:
    v19 = 0;
    v33 = 4294954514;
    goto LABEL_39;
  }
  v19 = 0;
  v20 = *((_QWORD *)v10 + 31);
  time = *a3;
  if (!a1
    || !v20
    || (v19 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A004094F85FBAuLL),
        *(_QWORD *)v19 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        v21 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        *((_QWORD *)v19 + 8) = v21,
        *((float *)v19 + 2) = a5,
        *(CMTime *)(v19 + 36) = time,
        !*(_QWORD *)v19)
    || !v21)
  {
    v38 = FigSignalErrorAt();
    if ((_DWORD)v38)
      goto LABEL_41;
  }
  if (dword_1EE2A2EE0)
  {
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v33 = 4294954443;
      goto LABEL_39;
    }
    v26 = Mutable;
    v27 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v27)
    {
      v33 = 4294954443;
LABEL_37:
      CFRelease(v26);
      goto LABEL_39;
    }
    v28 = v27;
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
  }
  else
  {
    v28 = 0;
    v26 = 0;
  }
  v29 = *((_QWORD *)v10 + 49);
  v30 = *((_QWORD *)v10 + 50);
  v31 = *((_QWORD *)v10 + 10);
  *(_OWORD *)&v44.value = *(_OWORD *)a2;
  v44.epoch = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&typea.value = *(_OWORD *)&a3->value;
  typea.epoch = a3->epoch;
  v32 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, void (*)(uint64_t, int, CMTime *, CMTime *, uint64_t, float), char *, CFMutableDictionaryRef, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v32)
  {
    v33 = 4294954514;
    goto LABEL_34;
  }
  time = v44;
  v45 = typea;
  v33 = v32(v29, v30, &time, &v45, v31, fbaprp_bufferedAirPlayOutputStartedCallback, v19, v26, a5);
  if ((_DWORD)v33)
    goto LABEL_34;
LABEL_33:
  v33 = 0;
  *((float *)v10 + 36) = a5;
LABEL_34:
  if (v28)
    CFRelease(v28);
  v19 = 0;
  if (v26)
    goto LABEL_37;
LABEL_39:
  fbaprp_releaseSetRateContext((const void **)v19);
  return v33;
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

void fbaprp_bufferedAirPlayOutputStartedCallback(uint64_t a1, int a2, CMTime *a3, CMTime *a4, uint64_t a5, float a6)
{
  const void *v10;
  uint64_t v11;
  OpaqueCMTimebase *v12;
  uint64_t DerivedStorage;
  BOOL v14;
  NSObject *v15;
  NSObject *v16;
  Float64 Seconds;
  NSObject *v18;
  NSObject *v19;
  CFMutableDictionaryRef v20;
  CFMutableDictionaryRef Mutable;
  float v22;
  OpaqueCMTimebase *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, const __CFString *, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v28;
  CMTime v31;
  os_log_type_t type;
  CMTime v33;
  CMTime time2;
  CMTime time;
  Float64 v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!a1)
  {
    FigSignalErrorAt();
    v10 = 0;
LABEL_46:
    fbaprp_releaseSetRateContext((const void **)a1);
    goto LABEL_44;
  }
  v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v10)
    goto LABEL_46;
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11)
    goto LABEL_46;
  v12 = (OpaqueCMTimebase *)v11;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_49;
  if (*(float *)(DerivedStorage + 144) == 0.0)
  {
    if (dword_1EE2A2EE0)
    {
      LODWORD(v31.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      Mutable = 0;
      v20 = 0;
      goto LABEL_40;
    }
LABEL_49:
    Mutable = 0;
LABEL_50:
    v20 = 0;
    goto LABEL_40;
  }
  if (*(_BYTE *)(DerivedStorage + 256))
    v14 = 1;
  else
    v14 = dword_1EE2A2EE0 == 0;
  if (!v14)
  {
    LODWORD(v31.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a6 != 0.0)
  {
    if (*MEMORY[0x1E0CA1FB8])
    {
      v16 = fig_log_handle();
      if (os_signpost_enabled(v16))
      {
        time = *a3;
        Seconds = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 134218752;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)v10;
        LOWORD(time.flags) = 2048;
        *(double *)((char *)&time.flags + 2) = a6;
        HIWORD(time.epoch) = 2048;
        v36 = Seconds;
        v37 = 2048;
        v38 = a2;
        _os_signpost_emit_with_name_impl(&dword_1928EC000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAORP_SetRateAndAnchorTime", " enableTelemetry=YES renderPipeline=%llu, timebaseRate=%1.2f, itemTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
      }
    }
    if (*MEMORY[0x1E0CA1FA8])
    {
      time = *a3;
      CMTimeGetSeconds(&time);
      fig_gm_ktrace_wrapper();
    }
  }
  if (!a2 || a2 == -17323)
  {
    if (dword_1EE2A2EE0)
    {
      LODWORD(v31.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if ((*(_BYTE *)(DerivedStorage + 272) & 1) != 0)
    {
      time = *(CMTime *)(DerivedStorage + 260);
      time2 = *a3;
      if (CMTimeCompare(&time, &time2) <= 0)
      {
        time = *a3;
        time2 = *(CMTime *)(DerivedStorage + 260);
        CMTimeSubtract(&v33, &time, &time2);
        if (dword_1EE2A2EE0)
        {
          LODWORD(v31.value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a3 = v33;
      }
    }
    v22 = *(float *)(a1 + 8);
    time = *a3;
    time2 = *a3;
    v31 = *a4;
    fbaprp_startTimebase(v22, (uint64_t)v10, v12, &time, &time2, &v31);
    Mutable = 0;
    v20 = 0;
    if (a2 || !a5)
      goto LABEL_33;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v20 = 0;
LABEL_33:
      v23 = *(OpaqueCMTimebase **)(DerivedStorage + 136);
      if (v23 == v12 && v23)
      {
        CFRelease(v12);
        *(_QWORD *)(DerivedStorage + 136) = 0;
      }
      if (*(_BYTE *)(DerivedStorage + 234))
      {
        *(_BYTE *)(DerivedStorage + 234) = 0;
        v24 = *(_QWORD *)(DerivedStorage + 392);
        v25 = *(_QWORD *)(DerivedStorage + 400);
        v26 = *(void (**)(uint64_t, uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
        if (v26)
          v26(v24, v25, CFSTR("RenderPipelineStateEndOfTrackReached"), *MEMORY[0x1E0C9AE50]);
        fbaprp_postNotification(v10, (uint64_t)CFSTR("PlayResourceReleased"), 0);
      }
      goto LABEL_40;
    }
    goto LABEL_50;
  }
  LODWORD(v31.value) = 0;
  type = OS_LOG_TYPE_DEFAULT;
  v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v20 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v20)
  {
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    Mutable = 0;
    goto LABEL_33;
  }
  Mutable = 0;
LABEL_40:
  CFRelease(v12);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  fbaprp_releaseSetRateContext((const void **)a1);
  if (v20)
    CFRelease(v20);
  if (Mutable)
    CFRelease(Mutable);
LABEL_44:
  fbaprp_releaseAsync((uint64_t)v10);
}

void fbaprp_releaseSetRateContext(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[8];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

CMTime *fbaprp_startTimebase(float a1, uint64_t a2, OpaqueCMTimebase *a3, CMTime *a4, CMTime *a5, CMTime *a6)
{
  _DWORD *v10;
  double v11;
  OpaqueCMClock *HostTimeClock;
  CMTime *result;
  CMClockOrTimebaseRef v14;
  CMClockRef v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v17;
  CMTime v18;
  CMTime immediateSourceTime;
  CMTime time;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  v11 = a1;
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    time = *a6;
    CMTimeGetSeconds(&time);
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v18, HostTimeClock);
    time = v18;
    CMTimeGetSeconds(&time);
    kdebug_trace();
  }
  immediateSourceTime = *a6;
  CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a6 = time;
  immediateSourceTime = *a4;
  CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a4 = time;
  immediateSourceTime = *a5;
  result = CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a5 = time;
  a6->value += (uint64_t)((double)(a5->value - a4->value) / v11 + 0.5);
  if (a3)
  {
    v14 = CMTimebaseCopySource(a3);
    memset(&v17, 0, sizeof(v17));
    v15 = CMClockGetHostTimeClock();
    time = *a6;
    CMSyncConvertTime(&v17, &time, v15, v14);
    if (v14)
      CFRelease(v14);
    immediateSourceTime = v17;
    CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    v17 = time;
    if (dword_1EE2A2EE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    }
    time = *a4;
    immediateSourceTime = v17;
    result = (CMTime *)CMTimebaseSetRateAndAnchorTime(a3, v11, &time, &immediateSourceTime);
  }
  if (*v10 == 1)
  {
    time = *a4;
    CMTimeGetSeconds(&time);
    time = *a5;
    CMTimeGetSeconds(&time);
    time = *a6;
    CMTimeGetSeconds(&time);
    return (CMTime *)kdebug_trace();
  }
  return result;
}

void fbaprp_postNotification(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
    CFRetain(a3);
  CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbaprp_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_44;
  block[4] = a2;
  block[5] = a1;
  block[6] = a3;
  dispatch_async(v7, block);
}

void fbaprp_releaseAsync(uint64_t a1)
{
  NSObject *global_queue;
  _QWORD block[5];

  if (a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fbaprp_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_45;
    block[4] = a1;
    dispatch_async(global_queue, block);
  }
}

void __fbaprp_postNotification_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  fbaprp_releaseAsync(*(_QWORD *)(a1 + 40));
}

void __fbaprp_releaseAsync_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t fbaprp_suspendAudioChainGuts(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v3 = DerivedStorage;
  if (dword_1EE2A2EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *((_QWORD *)v3 + 47);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    v6(v5, 1);
  v7 = *((_QWORD *)v3 + 49);
  v8 = *((_QWORD *)v3 + 50);
  result = CMBaseObjectGetVTable();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 40);
  if (v10)
  {
    result = v10(v7, v8, a1, 1);
    if (!(_DWORD)result)
    {
      *((_QWORD *)v3 + 18) = 0x3F80000000000000;
      *((_QWORD *)v3 + 30) = 0;
      v11 = MEMORY[0x1E0CA2E18];
      v12 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v3 + 184) = *MEMORY[0x1E0CA2E18];
      v13 = *(_QWORD *)(v11 + 16);
      *((_QWORD *)v3 + 25) = v13;
      *((_OWORD *)v3 + 10) = v12;
      *((_QWORD *)v3 + 22) = v13;
      *((_OWORD *)v3 + 13) = v12;
      *((_QWORD *)v3 + 28) = v13;
      v14 = MEMORY[0x1E0CA2E68];
      *(_OWORD *)(v3 + 260) = *MEMORY[0x1E0CA2E68];
      *(_QWORD *)(v3 + 276) = *(_QWORD *)(v14 + 16);
      v3[96] = 0;
      *(_WORD *)(v3 + 233) = 0;
      v3[232] = 0;
    }
  }
  return result;
}

void fbaprp_notificationsFromSubPipeManager(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, const __CFString *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
    if (*(_BYTE *)DerivedStorage
      || (v9 = *(_QWORD *)(DerivedStorage + 392),
          v10 = *(_QWORD *)(DerivedStorage + 400),
          (v11 = *(unsigned int (**)(uint64_t, uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8)) == 0)
      || v11(v9, v10, CFSTR("RenderPipelineStateEndOfTrackReached"), *MEMORY[0x1E0C9AE50]))
    {
      JUMPOUT(0x19402EF04);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  }
  fbaprp_postNotification(a2, a3, a5);
}

void fbaprp_timebaseRateChangedCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 248) == a4)
  {
    v7 = DerivedStorage;
    if (a2)
      CFRetain(a2);
    v8 = *(NSObject **)(v7 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fbaprp_timebaseRateChangedCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_46_1;
    block[4] = v7;
    block[5] = a4;
    block[6] = a2;
    dispatch_async(v8, block);
  }
}

void __fbaprp_timebaseRateChangedCallback_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  OpaqueCMTimebase *v3;
  double EffectiveRate;
  double v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v7;
  const void *v8;
  CMTime time;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402EEEC](*(_QWORD *)(a1[4] + 48));
  v2 = a1[4];
  if (!*(_BYTE *)v2)
  {
    v3 = (OpaqueCMTimebase *)a1[5];
    if (v3 == *(OpaqueCMTimebase **)(v2 + 248))
    {
      EffectiveRate = CMTimebaseGetEffectiveRate(v3);
      v2 = a1[4];
      if (*(_BYTE *)(v2 + 232))
      {
        v5 = EffectiveRate;
        if (EffectiveRate != 0.0)
        {
          fabaprp_getOffsetToBAOTimeline(&time);
          *(CMTime *)(v2 + 184) = time;
          if (dword_1EE2A2EE0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v2 = a1[4];
          *(_BYTE *)(v2 + 232) = 0;
          if ((*(_DWORD *)(v2 + 172) & 0x1D) != 1
            || (v7 = fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(a1[6], v5), v2 = a1[4], !v7))
          {
            *(_BYTE *)(v2 + 233) = 1;
          }
        }
      }
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v2 + 48));
  v8 = (const void *)a1[6];
  if (v8)
    CFRelease(v8);
}

void fabaprp_getOffsetToBAOTimeline(CMTime *a1@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v8;
  CMTime v9;
  CFTypeRef cf;
  CMTime rhs;
  CMTime time;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v8 = v9;
  v3 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a1->value = *MEMORY[0x1E0CA2E68];
  a1->epoch = *(_QWORD *)(v3 + 16);
  CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(*(_QWORD *)(DerivedStorage + 392));
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v5)
  {
    if (!v5(CMBaseObject, CFSTR("ZeroBasedTimebase"), *MEMORY[0x1E0C9AE00], &cf))
    {
      CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(DerivedStorage + 248));
      v6 = *(const void **)(DerivedStorage + 248);
      time = v9;
      CMSyncConvertTime(&v8, &time, v6, cf);
      time = v9;
      rhs = v8;
      CMTimeSubtract(a1, &time, &rhs);
      if (dword_1EE2A2EE0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  if (cf)
    CFRelease(cf);
}

uint64_t FigBufferedAirPlayOutputProxyCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t fbaprp_copyEndPresentationTimeForQueuedSamples(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t v9;
  CFDictionaryRef v10;
  const __CFDictionary *v11;
  CFDictionaryRef v12;
  CMTime time;
  CFDictionaryRef dictionaryRepresentation;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dictionaryRepresentation = 0;
  if (!a3)
    return 0;
  v6 = DerivedStorage;
  CMBufferQueueGetEndPresentationTimeStamp(&time, *(CMBufferQueueRef *)(DerivedStorage + 128));
  value = time.value;
  timescale = time.timescale;
  if ((time.flags & 1) != 0)
  {
    time.value = value;
    time.timescale = timescale;
    v12 = CMTimeCopyAsDictionary(&time, a2);
    v9 = 0;
    *a3 = v12;
  }
  else
  {
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(_QWORD *)(v6 + 72));
    v8 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v8)
    {
      v9 = v8(FigBaseObject, CFSTR("Last\x10InputSbufPresentationEndTime"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
      v10 = dictionaryRepresentation;
      if (!(_DWORD)v9)
      {
        CMTimeMakeFromDictionary(&time, dictionaryRepresentation);
        value = time.value;
        timescale = time.timescale;
        v10 = dictionaryRepresentation;
        if (dictionaryRepresentation)
        {
          v11 = (const __CFDictionary *)CFRetain(dictionaryRepresentation);
          v10 = dictionaryRepresentation;
        }
        else
        {
          v11 = 0;
        }
        *a3 = v11;
      }
      if (v10)
        CFRelease(v10);
    }
    else
    {
      return 4294954514;
    }
  }
  return v9;
}

uint64_t fbaprp_copyEndPresentationTimeForDecodedSamples(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, __CFString *, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!a3)
    return FigSignalErrorAt();
  FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(_QWORD *)(DerivedStorage + 72));
  v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v7)
    return 4294954514;
  result = v7(FigBaseObject, CFSTR("Last\x10InputSbufPresentationEndTime"), a2, &v9);
  if (!(_DWORD)result)
    *a3 = v9;
  return result;
}

uint64_t fbaprp_createBufferedAirPlaySampleBufferConsumer(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  CMTime v15;
  CMTime time;
  CMTime v17;
  CMTime v18;
  CFTypeRef v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  memset(&v18, 0, sizeof(v18));
  CMTimeMake(&v18, 2, 1);
  memset(&v17, 0, sizeof(v17));
  CMTimeMake(&v17, 10, 1);
  if (!a2)
    goto LABEL_15;
  v4 = *(_QWORD *)(DerivedStorage + 128);
  time = v17;
  v15 = v18;
  v5 = FigSampleBufferConsumerCreateForBufferQueue(v4, (uint64_t)&time, (uint64_t)&v15, &v19);
  if ((_DWORD)v5)
  {
LABEL_16:
    v13 = v5;
    v12 = 0;
    goto LABEL_10;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *(CMTime *)(DerivedStorage + 336);
  v7 = CMTimeCopyAsDictionary(&time, v6);
  if (!v7)
  {
LABEL_15:
    v5 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v8 = v7;
  FigBaseObject = FigSampleBufferConsumerGetFigBaseObject(v19);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v10)
  {
    v11 = v10(FigBaseObject, CFSTR("PrerollDuration"), v8);
    if ((_DWORD)v11)
    {
      v13 = v11;
      v12 = 0;
    }
    else
    {
      v12 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v12)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 88), v12);
        v13 = 0;
        *a2 = v19;
        v19 = 0;
      }
      else
      {
        v13 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    v12 = 0;
    v13 = 4294954514;
  }
  CFRelease(v8);
LABEL_10:
  if (v19)
    CFRelease(v19);
  if (v12)
    CFRelease(v12);
  return v13;
}

CFIndex fbaprp_cleanFreedSampleBufferConsumers()
{
  uint64_t DerivedStorage;
  CFIndex result;
  CFIndex i;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 88));
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 88), i);
      v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (v3)
        CFRelease(v3);
      else
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 88), i--);
      result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 88));
    }
  }
  return result;
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigBufferedAirPlayOutputProxySetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t fbaprp_setAudioProcessingTap(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  char *v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t);
  BOOL v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = getenv("ENABLE_BUFFERED_LOCAL_PLAYBACK");
  getenv("ENABLE_BUFFERED_LOCAL_PLAYBACK_BUT_TAP_AT_FAQRP");
  if (v4)
    LODWORD(v4) = *v4 == 49;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
  {
    LOBYTE(v6) = 0;
    v8 = 4294954511;
    goto LABEL_19;
  }
  if ((_DWORD)v4)
  {
    CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(*(_QWORD *)(DerivedStorage + 392));
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v6)
    {
      v8 = 4294954514;
      goto LABEL_19;
    }
    v7 = v6(CMBaseObject, CFSTR("AudioProcessingTap"), a2);
    goto LABEL_7;
  }
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    v7 = FigSignalErrorAt();
LABEL_7:
    v8 = v7;
    LOBYTE(v6) = 0;
    goto LABEL_19;
  }
  v9 = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 376));
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v10)
    v8 = v10(v9, CFSTR("AudioProcessingTap"), a2);
  else
    v8 = 4294954514;
  if (a2)
    v11 = (_DWORD)v8 == 0;
  else
    v11 = 0;
  LOBYTE(v6) = v11;
LABEL_19:
  *(_BYTE *)(DerivedStorage + 112) = (_BYTE)v6;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  return v8;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineSetRateAndAnchorTime(const void *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t DerivedStorage;
  CMTimeFlags v9;
  _OWORD *v10;
  CMTimeFlags flags;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v14;
  uint64_t v15;
  uint64_t v16;
  CMClockOrTimebaseRef v17;
  NSObject *v18;
  unsigned int value;
  unsigned int v20;
  const char *v21;
  NSObject *v22;
  Float64 v23;
  uint64_t v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  const char *v32;
  Float64 Seconds;
  OpaqueCMTimebase *v34;
  CMTimeEpoch epoch;
  Float64 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, const __CFString *, _QWORD);
  uint64_t v40;
  uint64_t v41;
  Float64 v42;
  NSObject *v43;
  unsigned int v44;
  unsigned int v45;
  const char *v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  const char *v50;
  Float64 v51;
  Float64 v52;
  uint64_t started;
  NSObject *v54;
  unsigned int v55;
  unsigned int v56;
  const char *v57;
  Float64 v58;
  uint64_t v59;
  void (*v60)(uint64_t, CMTime *, CMTime *, double);
  NSObject *v62;
  Float64 v63;
  CMTimeEpoch v64;
  uint64_t v65;
  CMTimeEpoch v66;
  CMTime v67;
  CMTime type;
  CMTime v69;
  os_log_type_t v70;
  os_log_type_t v71[4];
  CMTimeValue v72;
  CMTimeScale v73;
  CMTime timebaseTime;
  const char *v75;
  __int16 v76;
  Float64 v77;
  __int16 v78;
  Float64 v79;
  __int16 v80;
  Float64 v81;
  CMTimeValue v82;
  CMTimeScale timescale;
  CMTime time;
  Float64 v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
  {
    v41 = FigSignalErrorAt();
    goto LABEL_109;
  }
  v72 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 12);
  v73 = *(_DWORD *)(a2 + 8);
  v65 = DerivedStorage;
  v66 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&v67.value = *(_OWORD *)a3;
  v67.epoch = *(_QWORD *)(a3 + 16);
  v10 = (_OWORD *)MEMORY[0x1E0CA2E18];
  v82 = *MEMORY[0x1E0CA2E18];
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v64 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v12 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2EE0)
  {
    LODWORD(v69.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v14 = a4;
  if (a4 == 0.0)
  {
    if (*(double *)(v12 + 240) != v14
      || (CMTimebaseGetTime(&type, *(CMTimebaseRef *)(v12 + 248)),
          time.value = v72,
          time.timescale = v73,
          time.flags = v9,
          time.epoch = v66,
          CMTimeCompare(&time, &type)))
    {
      v15 = CMBaseObjectGetDerivedStorage();
      v16 = v15;
      if ((v9 & 0x1D) == 1)
      {
        v17 = CMTimebaseCopySource(*(CMTimebaseRef *)(v15 + 248));
        if (dword_1EE2A2EE0)
        {
          LODWORD(v69.value) = 0;
          v71[0] = OS_LOG_TYPE_DEFAULT;
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = v69.value;
          if (os_log_type_enabled(v18, v71[0]))
            v20 = value;
          else
            v20 = value & 0xFFFFFFFE;
          if (v20)
          {
            if (a1)
              v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
            else
              v21 = "";
            time.value = v72;
            time.timescale = v73;
            time.flags = v9;
            time.epoch = v66;
            Seconds = CMTimeGetSeconds(&time);
            LODWORD(timebaseTime.value) = 136315906;
            *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_stopTimebase";
            LOWORD(timebaseTime.flags) = 2048;
            *(_QWORD *)((char *)&timebaseTime.flags + 2) = a1;
            HIWORD(timebaseTime.epoch) = 2082;
            v75 = v21;
            v76 = 2048;
            v77 = Seconds;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v34 = *(OpaqueCMTimebase **)(v16 + 248);
        CMSyncGetTime(&time, v17);
        timebaseTime.value = v72;
        timebaseTime.timescale = v73;
        timebaseTime.flags = v9;
        timebaseTime.epoch = v66;
        CMTimebaseSetRateAndAnchorTime(v34, 0.0, &timebaseTime, &time);
        epoch = v64;
        if (v17)
          CFRelease(v17);
      }
      else
      {
        if (dword_1EE2A2EE0)
        {
          *(_DWORD *)v71 = 0;
          v70 = OS_LOG_TYPE_DEFAULT;
          v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v30 = *(_DWORD *)v71;
          if (os_log_type_enabled(v29, v70))
            v31 = v30;
          else
            v31 = v30 & 0xFFFFFFFE;
          if (v31)
          {
            if (a1)
              v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
            else
              v32 = "";
            CMTimebaseGetTime(&v69, *(CMTimebaseRef *)(v16 + 248));
            v36 = CMTimeGetSeconds(&v69);
            LODWORD(timebaseTime.value) = 136315906;
            *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_stopTimebase";
            LOWORD(timebaseTime.flags) = 2048;
            *(_QWORD *)((char *)&timebaseTime.flags + 2) = a1;
            HIWORD(timebaseTime.epoch) = 2082;
            v75 = v32;
            v76 = 2048;
            v77 = v36;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_OWORD *)&time.value = *v10;
        epoch = v64;
        time.epoch = v64;
        *(_OWORD *)&timebaseTime.value = *(_OWORD *)&time.value;
        timebaseTime.epoch = v64;
        CMTimebaseSetRateAndAnchorTimeWithFlags();
      }
      if (*(_BYTE *)(v12 + 232))
      {
        *(_WORD *)(v12 + 232) = 0;
        v37 = *(_QWORD *)(v12 + 392);
        v38 = *(_QWORD *)(v12 + 400);
        v39 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
        if (!v39)
        {
          v41 = 4294954514;
LABEL_108:
          DerivedStorage = v65;
          goto LABEL_109;
        }
        v40 = v39(v37, v38, CFSTR("RenderPipelineStateSynchronizeToTimebase"), *MEMORY[0x1E0C9AE40]);
        if ((_DWORD)v40)
        {
          v41 = v40;
          goto LABEL_108;
        }
      }
      v24 = 0;
      goto LABEL_100;
    }
LABEL_113:
    v41 = 0;
    goto LABEL_108;
  }
  if (*MEMORY[0x1E0CA1FB8])
  {
    v22 = fig_log_handle();
    if (os_signpost_enabled(v22))
    {
      time.value = v72;
      time.timescale = v73;
      time.flags = v9;
      time.epoch = v66;
      v23 = CMTimeGetSeconds(&time);
      LODWORD(time.value) = 134218496;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)a1;
      LOWORD(time.flags) = 2048;
      *(double *)((char *)&time.flags + 2) = a4;
      HIWORD(time.epoch) = 2048;
      v85 = v23;
      _os_signpost_emit_with_name_impl(&dword_1928EC000, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "WHA_BAORP_SetRateAndAnchorTime", " enableTelemetry=YES renderPipeline=%llu, timebaseRate=%1.2f, itemTime=%1.3f", (uint8_t *)&time, 0x20u);
    }
  }
  if (*MEMORY[0x1E0CA1FA8])
  {
    time.value = v72;
    time.timescale = v73;
    time.flags = v9;
    time.epoch = v66;
    CMTimeGetSeconds(&time);
    fig_gm_ktrace_wrapper();
  }
  if (*(double *)(v12 + 240) == v14)
    goto LABEL_113;
  v24 = mach_absolute_time();
  if (!*(_BYTE *)(v12 + 96))
    goto LABEL_65;
  if (*(float *)(v12 + 148) != a4)
  {
    if (dword_1EE2A2EE0)
    {
      LODWORD(v69.value) = 0;
      LOBYTE(type.value) = 0;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v26 = v69.value;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if (v27)
      {
        if (a1)
          v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
        else
          v28 = "";
        v42 = *(float *)(v12 + 148);
        LODWORD(timebaseTime.value) = 136315906;
        *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
        LOWORD(timebaseTime.flags) = 2048;
        *(_QWORD *)((char *)&timebaseTime.flags + 2) = a1;
        HIWORD(timebaseTime.epoch) = 2082;
        v75 = v28;
        v76 = 2048;
        v77 = v42;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbaprp_suspendAudioChainGuts((uint64_t)a1);
    fbaprp_postNotification(a1, (uint64_t)CFSTR("PrerollLost"), 0);
    if (!*(_BYTE *)(v12 + 96))
    {
LABEL_65:
      if ((v9 & 1) != 0)
      {
        v82 = v72;
        timescale = v73;
        epoch = v66;
        flags = v9;
      }
      else
      {
        CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v12 + 248));
        v82 = time.value;
        flags = time.flags;
        timescale = time.timescale;
        epoch = time.epoch;
        timebaseTime = *(CMTime *)(v12 + 160);
        CMTimeCompare(&time, &timebaseTime);
      }
      if (dword_1EE2A2EE0)
      {
        LODWORD(v69.value) = 0;
        LOBYTE(type.value) = 0;
        v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v48 = v69.value;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          v49 = v48;
        else
          v49 = v48 & 0xFFFFFFFE;
        if (v49)
        {
          if (a1)
            v50 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
          else
            v50 = "";
          time = v67;
          v51 = CMTimeGetSeconds(&time);
          time.value = v82;
          time.timescale = timescale;
          time.flags = flags;
          time.epoch = epoch;
          v52 = CMTimeGetSeconds(&time);
          LODWORD(timebaseTime.value) = 136316418;
          *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
          LOWORD(timebaseTime.flags) = 2048;
          *(_QWORD *)((char *)&timebaseTime.flags + 2) = a1;
          HIWORD(timebaseTime.epoch) = 2082;
          v75 = v50;
          v76 = 2048;
          v77 = a4;
          v78 = 2048;
          v79 = v51;
          v80 = 2048;
          v81 = v52;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time.value = v82;
      time.timescale = timescale;
      time.flags = flags;
      time.epoch = epoch;
      timebaseTime = v67;
      started = fbaprp_startAudioChainGuts(a4, (uint64_t)a1, 1, (__int128 *)&time.value, (__int128 *)&timebaseTime.value);
      if ((_DWORD)started)
      {
        v41 = started;
        DerivedStorage = v65;
        goto LABEL_115;
      }
      if ((flags & 1) == 0)
        goto LABEL_100;
LABEL_88:
      if ((*(_BYTE *)(v12 + 196) & 1) == 0)
      {
        *(_QWORD *)(v12 + 184) = v82;
        *(_DWORD *)(v12 + 192) = timescale;
        *(_DWORD *)(v12 + 196) = flags;
        *(_QWORD *)(v12 + 200) = epoch;
        if (dword_1EE2A2EE0)
        {
          LODWORD(v69.value) = 0;
          LOBYTE(type.value) = 0;
          v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v55 = v69.value;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            v56 = v55;
          else
            v56 = v55 & 0xFFFFFFFE;
          if (v56)
          {
            if (a1)
              v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
            else
              v57 = "";
            time = *(CMTime *)(v12 + 184);
            v58 = CMTimeGetSeconds(&time);
            LODWORD(timebaseTime.value) = 136315906;
            *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
            LOWORD(timebaseTime.flags) = 2048;
            *(_QWORD *)((char *)&timebaseTime.flags + 2) = a1;
            HIWORD(timebaseTime.epoch) = 2082;
            v75 = v57;
            v76 = 2048;
            v77 = v58;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      goto LABEL_100;
    }
  }
  if (dword_1EE2A2EE0)
  {
    LODWORD(v69.value) = 0;
    LOBYTE(type.value) = 0;
    v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v44 = v69.value;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      v45 = v44;
    else
      v45 = v44 & 0xFFFFFFFE;
    if (v45)
    {
      if (a1)
        v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
      else
        v46 = "";
      LODWORD(timebaseTime.value) = 136315650;
      *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
      LOWORD(timebaseTime.flags) = 2048;
      *(_QWORD *)((char *)&timebaseTime.flags + 2) = a1;
      HIWORD(timebaseTime.epoch) = 2082;
      v75 = v46;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    epoch = v64;
    if ((flags & 1) == 0)
      goto LABEL_100;
    goto LABEL_88;
  }
  epoch = v64;
  if ((flags & 1) != 0)
    goto LABEL_88;
LABEL_100:
  if ((flags & 1) == 0)
  {
    if ((v9 & 1) != 0)
    {
      v82 = v72;
      timescale = v73;
      epoch = v66;
      flags = v9;
    }
    else
    {
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v12 + 248));
      v82 = time.value;
      flags = time.flags;
      timescale = time.timescale;
      epoch = time.epoch;
    }
  }
  v59 = *(_QWORD *)(v12 + 376);
  v60 = *(void (**)(uint64_t, CMTime *, CMTime *, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v60)
  {
    time.value = v82;
    time.timescale = timescale;
    time.flags = flags;
    time.epoch = epoch;
    timebaseTime = v67;
    v60(v59, &time, &timebaseTime, a4);
  }
  time = *(CMTime *)(v12 + 184);
  timebaseTime = v67;
  v41 = fbaprp_setRateOnAudioChainGuts((uint64_t)a1, (uint64_t)&time, &timebaseTime, v24, a4);
  if (!(_DWORD)v41)
  {
    *(double *)(v12 + 240) = v14;
    goto LABEL_108;
  }
  DerivedStorage = v65;
  if (a4 == 0.0)
    goto LABEL_109;
LABEL_115:
  if (*MEMORY[0x1E0CA1FB8])
  {
    v62 = fig_log_handle();
    if (os_signpost_enabled(v62))
    {
      time.value = v72;
      time.timescale = v73;
      time.flags = v9;
      time.epoch = v66;
      v63 = CMTimeGetSeconds(&time);
      LODWORD(time.value) = 134218752;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)a1;
      LOWORD(time.flags) = 2048;
      *(double *)((char *)&time.flags + 2) = a4;
      HIWORD(time.epoch) = 2048;
      v85 = v63;
      v86 = 2048;
      v87 = (int)v41;
      _os_signpost_emit_with_name_impl(&dword_1928EC000, v62, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAORP_SetRateAndAnchorTime", " enableTelemetry=YES renderPipeline=%llu, timebaseRate=%1.2f, itemTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
    }
  }
  if (*MEMORY[0x1E0CA1FA8])
  {
    time.value = v72;
    time.timescale = v73;
    time.flags = v9;
    time.epoch = v66;
    CMTimeGetSeconds(&time);
    fig_gm_ktrace_wrapper();
  }
LABEL_109:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  return v41;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineStartAndUseTimebaseAtTransition(uint64_t a1, OpaqueCMTimebase *a2, __int128 *a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  if (CMTimebaseGetRate(a2) != 0.0)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 48));
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage()
    || (v13 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040BF52E99EuLL)) == 0)
  {
    v17 = FigSignalErrorAt();
  }
  else
  {
    v14 = v13;
    v13[1] = CFRetain(a4);
    v14[6] = CFRetain(a2);
    *(_OWORD *)(v14 + 7) = v19;
    v14[9] = v20;
    v14[10] = a5;
    v15 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(v14 + 13) = *MEMORY[0x1E0CA2E68];
    v14[15] = *(_QWORD *)(v15 + 16);
    *((_BYTE *)v14 + 128) = 0;
    v14[11] = a6;
    v14[12] = 0;
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = 0;
    *v14 = 0;
    **(_QWORD **)(v16 + 296) = v14;
    *(_QWORD *)(v16 + 296) = v14;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v12 + 48));
  return v17;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineSynchronizeToTimebase(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CMClockOrTimebaseRef v4;
  uint64_t RelativeRateAndAnchorTime;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, const __CFString *, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  char v11;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime outOfClockOrTimebaseAnchorTime;
  Float64 outRelativeRate;
  CMTime time;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v3 = CMBaseObjectGetDerivedStorage();
  outRelativeRate = 0.0;
  memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
  memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
  v4 = CMTimebaseCopySource(*(CMTimebaseRef *)(v3 + 248));
  RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(v3 + 248), v4, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
  if ((_DWORD)RelativeRateAndAnchorTime)
    goto LABEL_17;
  v6 = *(_QWORD *)(v3 + 392);
  v7 = *(_QWORD *)(v3 + 400);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
  if (!v8)
  {
    v10 = 4294954514;
    if (!v4)
      goto LABEL_16;
    goto LABEL_15;
  }
  RelativeRateAndAnchorTime = v8(v6, v7, CFSTR("RenderPipelineStateSynchronizeToTimebase"), *MEMORY[0x1E0C9AE50]);
  if ((_DWORD)RelativeRateAndAnchorTime)
    goto LABEL_17;
  if (outRelativeRate == 0.0)
  {
    v11 = 1;
    goto LABEL_14;
  }
  fabaprp_getOffsetToBAOTimeline(&time);
  *(CMTime *)(v3 + 184) = time;
  if (dword_1EE2A2EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*(_DWORD *)(v3 + 172) & 0x1D) == 1)
  {
    RelativeRateAndAnchorTime = fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(a1, outRelativeRate);
    if ((_DWORD)RelativeRateAndAnchorTime)
    {
LABEL_17:
      v10 = RelativeRateAndAnchorTime;
      if (!v4)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  v11 = 0;
  *(_BYTE *)(v3 + 233) = 1;
LABEL_14:
  v10 = 0;
  *(_BYTE *)(v3 + 232) = v11;
  if (v4)
LABEL_15:
    CFRelease(v4);
LABEL_16:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  return v10;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineReset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v5 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = FigMediaProcessorStop(*(_QWORD *)(v5 + 56));
  if ((_DWORD)v7)
    goto LABEL_30;
  v7 = FigMediaProcessorWaitUntilCompletelyStopped(*(_QWORD *)(v5 + 56));
  if ((_DWORD)v7)
    goto LABEL_30;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  v8 = *(_QWORD *)(v5 + 64);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v9)
    goto LABEL_27;
  v7 = v9(v8, CFSTR("DownstreamConsumer"), 0);
  if ((_DWORD)v7)
  {
LABEL_30:
    v25 = v7;
    goto LABEL_28;
  }
  v10 = *(_QWORD *)(v5 + 376);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v11)
    v11(v10, a2);
  CMBufferQueueReset(*(CMBufferQueueRef *)(v5 + 128));
  if (!*(_BYTE *)(v5 + 256))
    goto LABEL_13;
  v12 = *(_QWORD *)(v5 + 392);
  v13 = *(_QWORD *)(v5 + 400);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v14)
  {
LABEL_27:
    v25 = 4294954514;
    goto LABEL_28;
  }
  v7 = v14(v12, v13, a1, a2);
  if ((_DWORD)v7)
    goto LABEL_30;
LABEL_13:
  *(_QWORD *)(v5 + 144) = 0x3F80000000000000;
  *(_QWORD *)(v5 + 240) = 0;
  v15 = MEMORY[0x1E0CA2E18];
  v16 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v5 + 160) = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v5 + 176) = v17;
  *(_OWORD *)(v5 + 184) = v16;
  *(_QWORD *)(v5 + 200) = v17;
  *(_OWORD *)(v5 + 208) = v16;
  *(_QWORD *)(v5 + 224) = v17;
  v18 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v5 + 260) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(v5 + 276) = *(_QWORD *)(v18 + 16);
  *(_BYTE *)(v5 + 96) = 0;
  *(_WORD *)(v5 + 233) = 0;
  *(_BYTE *)(v5 + 232) = 0;
  fbaprp_transitionRosterRemoveAll();
  v19 = *(const void **)(v5 + 304);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(v5 + 304) = 0;
  }
  v20 = *(const void **)(v5 + 72);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(v5 + 72) = 0;
  }
  v21 = *(const void **)(v5 + 136);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(v5 + 136) = 0;
  }
  v22 = *(const void **)(v5 + 360);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(v5 + 360) = 0;
  }
  v23 = *(const void **)(v5 + 56);
  *(_QWORD *)(v5 + 56) = 0;
  v24 = fbaprp_setupBufferedAirPlayMediaProcessor();
  if (!(_DWORD)v24)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v24 = FigNotificationCenterRemoveWeakListeners();
    if (!(_DWORD)v24)
    {
      v24 = fbaprp_configureSubPipeManager();
      if (!(_DWORD)v24)
        v24 = FigMediaProcessorGo(*(_QWORD *)(v5 + 56));
    }
  }
  v25 = v24;
  if (v23)
    CFRelease(v23);
LABEL_28:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  return v25;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineFinishSettingRate(uint64_t a1)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v3;
  _OWORD *v4;
  OpaqueCMClock *HostTimeClock;
  uint64_t v6;
  _OWORD *v7;
  OpaqueCMTimebase *v8;
  float v9;
  float v10;
  uint64_t started;
  const void *v12;
  __int128 v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v19.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v19.epoch = v3;
  v14 = *(_OWORD *)&v19.value;
  *(_OWORD *)&v18.value = *(_OWORD *)&v19.value;
  v18.epoch = v3;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_16;
  if (!*(_QWORD *)(DerivedStorage + 136))
  {
    v6 = 0;
    goto LABEL_15;
  }
  if (*(float *)(DerivedStorage + 144) == 0.0)
  {
LABEL_16:
    started = FigSignalErrorAt();
LABEL_17:
    v6 = started;
    goto LABEL_15;
  }
  v4 = (_OWORD *)(DerivedStorage + 208);
  if ((*(_BYTE *)(DerivedStorage + 220) & 1) != 0)
  {
    *(_OWORD *)&v19.value = *v4;
    v19.epoch = *(_QWORD *)(DerivedStorage + 224);
  }
  else
  {
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v19, HostTimeClock);
  }
  v7 = (_OWORD *)(DerivedStorage + 160);
  if ((*(_BYTE *)(DerivedStorage + 172) & 1) != 0)
  {
    *(_OWORD *)&v18.value = *v7;
    v18.epoch = *(_QWORD *)(DerivedStorage + 176);
  }
  else
  {
    CMTimebaseGetTime(&v18, *(CMTimebaseRef *)(DerivedStorage + 136));
  }
  v8 = *(OpaqueCMTimebase **)(DerivedStorage + 136);
  v9 = *(float *)(DerivedStorage + 144);
  v17 = v18;
  v16 = v18;
  v15 = v19;
  fbaprp_startTimebase(v9, a1, v8, &v17, &v16, &v15);
  v10 = *(float *)(DerivedStorage + 144);
  *(_OWORD *)&v17.value = *v7;
  v17.epoch = *(_QWORD *)(DerivedStorage + 176);
  *(_OWORD *)&v16.value = *v4;
  v16.epoch = *(_QWORD *)(DerivedStorage + 224);
  started = fbaprp_startAudioChainGuts(v10, a1, 1, (__int128 *)&v17.value, (__int128 *)&v16.value);
  if ((_DWORD)started)
    goto LABEL_17;
  v12 = *(const void **)(DerivedStorage + 136);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v6 = 0;
  *v7 = v14;
  *(_QWORD *)(DerivedStorage + 176) = v3;
  *v4 = v14;
  *(_QWORD *)(DerivedStorage + 224) = v3;
LABEL_15:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  return v6;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineCancelAndFlushTransition(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v5;
  uint64_t v6;
  __int128 *Record;
  __int128 *v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, __CFString *);
  uint64_t started;
  uint64_t *v12;
  NSObject *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, __CFString *, const __CFAllocator *, const __CFDictionary **);
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  float v25;
  Float64 v26;
  int CFPreferenceNumberWithDefault;
  uint64_t v28;
  CMAttachmentBearerRef v29;
  uint64_t (*v30)(uint64_t, CMAttachmentBearerRef);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, _BYTE *);
  const void *v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  NSObject *v41;
  const __CFAllocator *allocator;
  __int128 v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMAttachmentBearerRef target;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  const __CFDictionary *v58;
  __int128 v59;
  _OWORD v60[2];
  const __CFDictionary *v61;
  CMTime v62;
  _BYTE time2[32];
  __int128 v64;
  _BYTE time1[32];
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v62.value = *MEMORY[0x1E0CA2E68];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v62.epoch = v5;
  v61 = 0;
  v44 = *(_OWORD *)&v62.value;
  v59 = *(_OWORD *)&v62.value;
  *(_QWORD *)&v60[0] = v5;
  *(_OWORD *)((char *)v60 + 8) = *MEMORY[0x1E0CA2E30];
  *((_QWORD *)&v60[1] + 1) = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  v57 = 0;
  v58 = 0;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  target = 0;
  v47 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v46 = v47;
  v45 = v47;
  if (!a2)
  {
    v16 = 4294954444;
    goto LABEL_65;
  }
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)v6)
  {
    v16 = 4294954511;
    goto LABEL_63;
  }
  FigMediaProcessorStop(*(_QWORD *)(v6 + 56));
  FigMediaProcessorWaitUntilCompletelyStopped(*(_QWORD *)(v6 + 56));
  Record = (__int128 *)fbaprp_transitionRosterGetRecord(a1, a2);
  if (!Record)
  {
    if (dword_1EE2A2EE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = fbaprp_flushTransitionInBufferQueue(*(_QWORD *)(v6 + 128), a2);
    if ((_DWORD)v16 != -1)
      goto LABEL_62;
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    goto LABEL_61;
  }
  v8 = Record;
  FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(_QWORD *)(v6 + 72));
  v10 = *(uint64_t (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v10)
    goto LABEL_55;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  started = v10(FigBaseObject, CFSTR("CurrentOutputTime"));
  if ((_DWORD)started)
    goto LABEL_73;
  CMTimeMakeFromDictionary(&v62, v61);
  *(_OWORD *)time1 = *(__int128 *)((char *)v8 + 104);
  *(_QWORD *)&time1[16] = *((_QWORD *)v8 + 15);
  *(_OWORD *)time2 = v44;
  *(_QWORD *)&time2[16] = v5;
  v12 = &sFigCDSNodeProtocolID;
  if (!CMTimeCompare((CMTime *)time1, (CMTime *)time2))
  {
    if (dword_1EE2A2EE0)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v12 = &sFigCDSNodeProtocolID;
    }
    v18 = FigSampleBufferProcessorGetFigBaseObject(*(_QWORD *)(v6 + 72));
    v19 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v19)
      goto LABEL_55;
    started = v19(v18, CFSTR("TransitionIDContext"), allocator, &v58);
    if ((_DWORD)started)
      goto LABEL_73;
    if (v58)
      CFDictionaryGetValue(v58, CFSTR("TransitionID"));
    if (FigCFEqual())
    {
      if (dword_1EE2A2EE0)
      {
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v12 = &sFigCDSNodeProtocolID;
      }
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      v22 = *(_QWORD *)(v6 + 304);
      if (!v22)
        v22 = *(_QWORD *)(v6 + 248);
      *(_QWORD *)&v50 = v22;
      v8 = &v49;
      goto LABEL_30;
    }
    if (dword_1EE2A2EE0)
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v16 = fbaprp_flushTransitionInBufferQueue(*(_QWORD *)(v6 + 128), a2);
    if ((_DWORD)v16 != -1)
      goto LABEL_62;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
LABEL_61:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v16 = 4294954444;
    goto LABEL_62;
  }
  *(_OWORD *)time1 = *(__int128 *)((char *)v8 + 104);
  *(_QWORD *)&time1[16] = *((_QWORD *)v8 + 15);
  *(CMTime *)time2 = v62;
  if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) < 0)
  {
    if (dword_1EE2A2EE0)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v12 = &sFigCDSNodeProtocolID;
    }
    started = CMBufferQueueReset(*(CMBufferQueueRef *)(v6 + 128));
    if ((_DWORD)started)
      goto LABEL_73;
  }
LABEL_30:
  if (*((_DWORD *)v12 + 952))
  {
    v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = &sFigCDSNodeProtocolID;
  }
  v59 = *(__int128 *)((char *)v8 + 104);
  *(_QWORD *)&v60[0] = *((_QWORD *)v8 + 15);
  *(CMTime *)time1 = v62;
  *(_OWORD *)time2 = *(__int128 *)((char *)v8 + 104);
  *(_QWORD *)&time2[16] = *((_QWORD *)v8 + 15);
  CMTimeSubtract((CMTime *)((char *)v60 + 8), (CMTime *)time1, (CMTime *)time2);
  if (*((_DWORD *)v12 + 952))
  {
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v25 = *(float *)(v6 + 148);
  if (v25 > 0.0 && v25 != 1.0)
  {
    *(_OWORD *)time2 = v59;
    *(_QWORD *)&time2[16] = *(_QWORD *)&v60[0];
    v26 = 1.0 / v25;
    CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v26);
    v59 = *(_OWORD *)time1;
    *(_QWORD *)&v60[0] = *(_QWORD *)&time1[16];
    *(_OWORD *)time2 = *(_OWORD *)((char *)v60 + 8);
    *(_QWORD *)&time2[16] = *((_QWORD *)&v60[1] + 1);
    CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v26);
    *(_OWORD *)((char *)v60 + 8) = *(_OWORD *)time1;
    *((_QWORD *)&v60[1] + 1) = *(_QWORD *)&time1[16];
  }
  *(_OWORD *)time1 = *(_OWORD *)((char *)v60 + 8);
  *(_QWORD *)&time1[16] = *((_QWORD *)&v60[1] + 1);
  *(_OWORD *)time2 = v44;
  *(_QWORD *)&time2[16] = v5;
  if (CMTimeCompare((CMTime *)time1, (CMTime *)time2))
  {
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&v46, CFPreferenceNumberWithDefault, 1);
    CMTimebaseGetTime(&v47, *(CMTimebaseRef *)(v6 + 248));
    *(_OWORD *)time1 = v59;
    *(_QWORD *)&time1[16] = *(_QWORD *)&v60[0];
    *(CMTime *)time2 = v47;
    CMTimeSubtract(&v45, (CMTime *)time1, (CMTime *)time2);
    *(CMTime *)time1 = v45;
    *(CMTime *)time2 = v46;
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) <= 0)
    {
      started = FigSignalErrorAt();
      goto LABEL_73;
    }
    started = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if ((_DWORD)started)
      goto LABEL_73;
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E48], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
    v28 = *(_QWORD *)(v6 + 64);
    v29 = target;
    v30 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v30)
    {
      started = v30(v28, v29);
      if ((_DWORD)started)
        goto LABEL_73;
      v31 = *(_QWORD *)(v6 + 392);
      v32 = *(_QWORD *)(v6 + 400);
      *(_OWORD *)time2 = v59;
      *(_OWORD *)&time2[16] = v60[0];
      v64 = v60[1];
      v33 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v33)
      {
        *(_OWORD *)time1 = *(_OWORD *)time2;
        *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
        v66 = v64;
        started = v33(v31, v32, time1);
        if (!(_DWORD)started)
          goto LABEL_44;
LABEL_73:
        v16 = started;
        goto LABEL_62;
      }
    }
LABEL_55:
    v16 = 4294954514;
    goto LABEL_62;
  }
LABEL_44:
  v34 = (const void *)*((_QWORD *)v8 + 2);
  *(_OWORD *)time1 = *(__int128 *)((char *)v8 + 24);
  *(_QWORD *)&time1[16] = *((_QWORD *)v8 + 5);
  *(_OWORD *)time2 = *(__int128 *)((char *)v8 + 104);
  *(_QWORD *)&time2[16] = *((_QWORD *)v8 + 15);
  started = fbaprp_restoreAudioChainToStartOutputTime(a1, v34, (uint64_t)time1, (CMTime *)time2, 0);
  if ((_DWORD)started)
    goto LABEL_73;
  v35 = CMBaseObjectGetDerivedStorage();
  v36 = (_QWORD **)(v35 + 288);
  v37 = (_QWORD *)(v35 + 288);
  do
  {
    v37 = (_QWORD *)*v37;
    if (!v37)
      goto LABEL_58;
  }
  while (!FigCFEqual());
  while (1)
  {
    v38 = (_QWORD *)*v37;
    v39 = *v36;
    if (*v36 == v37)
      break;
    do
    {
      v40 = v39;
      v39 = (_QWORD *)*v39;
    }
    while (v39 != v37);
    *v40 = v38;
    if (!v38)
      goto LABEL_57;
LABEL_50:
    fbaprp_transitionRosterFreeRecord((uint64_t)v37);
    v37 = v38;
  }
  *v36 = v38;
  if (v38)
    goto LABEL_50;
  v40 = (_QWORD *)(v35 + 288);
LABEL_57:
  *(_QWORD *)(v35 + 296) = v40;
  fbaprp_transitionRosterFreeRecord((uint64_t)v37);
LABEL_58:
  v16 = 0;
LABEL_62:
  FigMediaProcessorGo(*(_QWORD *)(v6 + 56));
LABEL_63:
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 48));
  if (v61)
    CFRelease(v61);
LABEL_65:
  if (v58)
    CFRelease(v58);
  if (target)
    CFRelease(target);
  return v16;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineFlushFromTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  const __CFAllocator *v11;
  uint64_t started;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  Float64 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, _BYTE *);
  uint64_t v22;
  uint64_t v23;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  OSStatus v25;
  unsigned int v26;
  __int128 v28;
  _BYTE time2[32];
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  CFDictionaryRef dictionaryRepresentation;
  CMBufferQueueRef queueOut;
  _BYTE time1[32];
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dictionaryRepresentation = 0;
  v5 = *MEMORY[0x1E0CA2E68];
  v31 = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_QWORD *)v32 = v6;
  *(_OWORD *)&v32[8] = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)&v32[24] = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  v7 = *((_DWORD *)a2 + 3);
  if ((v7 & 9) != 1)
    return 4294954444;
  if ((v7 & 4) != 0)
    return 0;
  v8 = DerivedStorage;
  v28 = v5;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (!*(_BYTE *)v8)
  {
    FigMediaProcessorStop(*(_QWORD *)(v8 + 56));
    FigMediaProcessorWaitUntilCompletelyStopped(*(_QWORD *)(v8 + 56));
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(_QWORD *)(v8 + 72));
    v10 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v10)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      started = v10(FigBaseObject, CFSTR("CurrentOutputTime"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
      if ((_DWORD)started)
        goto LABEL_15;
      CMTimeMakeFromDictionary((CMTime *)time1, dictionaryRepresentation);
      v13 = *(_DWORD *)&time1[8];
      v14 = *(_DWORD *)&time1[12];
      v38 = *(_DWORD *)&time1[8];
      v15 = *(_QWORD *)time1;
      v37 = *(_QWORD *)time1;
      v16 = *(_QWORD *)&time1[16];
      *(_OWORD *)time1 = *a2;
      *(_QWORD *)&time1[16] = *((_QWORD *)a2 + 2);
      *(_QWORD *)time2 = v15;
      *(_QWORD *)&time2[8] = __PAIR64__(v14, v13);
      *(_QWORD *)&time2[16] = v16;
      if ((CMTimeCompare((CMTime *)time1, (CMTime *)time2) & 0x80000000) == 0 || (v14 & 1) == 0)
      {
        v23 = *(_QWORD *)(v8 + 128);
        *(_OWORD *)time2 = *a2;
        *(_QWORD *)&time2[16] = *((_QWORD *)a2 + 2);
        queueOut = 0;
        v36 = 0u;
        memset(time1, 0, sizeof(time1));
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        v25 = CMBufferQueueCreate(v11, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
        if (v25)
        {
          v26 = v25;
        }
        else
        {
          *(_QWORD *)time1 = queueOut;
          *(_OWORD *)&time1[16] = *(_OWORD *)time2;
          *(_QWORD *)&v36 = *(_QWORD *)&time2[16];
          BYTE8(v36) = 1;
          HIDWORD(v36) = 0;
          MEMORY[0x19402B01C](v23, fbaprp_copySbufBeforeFlushTimeForBufferQueueResetCallback, time1);
          MEMORY[0x19402B01C](queueOut, fbaprp_copySbufForBufferQueueResetCallback, v23);
          v26 = HIDWORD(v36);
        }
        if (queueOut)
          CFRelease(queueOut);
        if (v26 == -1)
          v22 = 4294954444;
        else
          v22 = v26;
        goto LABEL_24;
      }
      v31 = *a2;
      *(_QWORD *)v32 = *((_QWORD *)a2 + 2);
      *(_QWORD *)time1 = v37;
      *(_QWORD *)&time1[8] = __PAIR64__(v14, v38);
      *(_QWORD *)&time1[16] = v16;
      *(_OWORD *)time2 = *a2;
      *(_QWORD *)&time2[16] = *((_QWORD *)a2 + 2);
      CMTimeSubtract((CMTime *)&v32[8], (CMTime *)time1, (CMTime *)time2);
      v17 = *(float *)(v8 + 148);
      if (v17 > 0.0 && v17 != 1.0)
      {
        *(_OWORD *)time2 = v31;
        *(_QWORD *)&time2[16] = *(_QWORD *)v32;
        v18 = 1.0 / v17;
        CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v18);
        v31 = *(_OWORD *)time1;
        *(_QWORD *)v32 = *(_QWORD *)&time1[16];
        *(_OWORD *)time2 = *(_OWORD *)&v32[8];
        *(_QWORD *)&time2[16] = *(_QWORD *)&v32[24];
        CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v18);
        *(_OWORD *)&v32[8] = *(_OWORD *)time1;
        *(_QWORD *)&v32[24] = *(_QWORD *)&time1[16];
      }
      *(_OWORD *)time1 = *(_OWORD *)&v32[8];
      *(_QWORD *)&time1[16] = *(_QWORD *)&v32[24];
      *(_OWORD *)time2 = v28;
      *(_QWORD *)&time2[16] = v6;
      if (!CMTimeCompare((CMTime *)time1, (CMTime *)time2))
        goto LABEL_14;
      v19 = *(_QWORD *)(v8 + 392);
      v20 = *(_QWORD *)(v8 + 400);
      *(_OWORD *)time2 = v31;
      *(_OWORD *)&time2[16] = *(_OWORD *)v32;
      v30 = *(_OWORD *)&v32[16];
      v21 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v21)
      {
        *(_OWORD *)time1 = *(_OWORD *)time2;
        *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
        v36 = v30;
        started = v21(v19, v20, time1);
        if (!(_DWORD)started)
        {
LABEL_14:
          *(_OWORD *)time1 = *a2;
          *(_QWORD *)&time1[16] = *((_QWORD *)a2 + 2);
          started = fbaprp_restoreAudioChainToStartOutputTime(a1, 0, MEMORY[0x1E0CA2E18], (CMTime *)time1, 1);
        }
LABEL_15:
        v22 = started;
LABEL_24:
        FigMediaProcessorGo(*(_QWORD *)(v8 + 56));
        goto LABEL_25;
      }
    }
    v22 = 4294954514;
    goto LABEL_24;
  }
  v22 = 4294954511;
LABEL_25:
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 48));
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  return v22;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineDoesSupportTransitionToFormatDescription()
{
  return 1;
}

uint64_t fbaprp_setupBufferedAirPlayMediaProcessor()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  const __CFAllocator *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *MutableCopy;
  CFStringRef v11;
  CFTypeRef v12;
  const void *AllocatorForMedia;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;
  CFTypeRef v20;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage[9])
  {
    v1 = DerivedStorage;
    if (!DerivedStorage[7])
    {
      v3 = DerivedStorage + 8;
      v2 = (const void *)DerivedStorage[8];
      if (v2)
      {
        CFRelease(v2);
        *v3 = 0;
      }
      v4 = FigSampleBufferConsumerCreateForSampleBufferConsumer("mediaProcessorConsumerForConsumer", v1 + 8);
      if ((_DWORD)v4)
        return v4;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = (const void *)v1[16];
      v7 = (const void *)v1[8];
      v8 = CMBaseObjectGetDerivedStorage();
      cf = 0;
      v20 = 0;
      v17 = 0;
      v18 = 0;
      v9 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v5, v6, &cf);
      if ((_DWORD)v9)
      {
        v15 = v9;
        MutableCopy = 0;
        v11 = 0;
      }
      else
      {
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (MutableCopy)
        {
          v11 = CFStringCreateWithCString(v5, (const char *)(v8 + 408), 0x8000100u);
          if (v11)
          {
            CFDictionarySetValue(MutableCopy, CFSTR("LoggingID"), v11);
            v12 = cf;
            AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
            v14 = FigSampleBufferProcessorForBufferedAirPlayCreate(v12, AllocatorForMedia, MutableCopy, &v20);
            if ((_DWORD)v14
              || (v14 = FigActivitySchedulerCreateForNewThread((uint64_t)v5, 37, CFSTR("com.apple.coremedia.mediaprocessor.bufferedairplay"), &v18), (_DWORD)v14)|| (v14 = FigMediaProcessorCreate((uint64_t)v5, v20, cf, v7, v18, (uint64_t *)&v17), (_DWORD)v14))
            {
              v15 = v14;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              v15 = FigNotificationCenterAddWeakListeners();
              if (!(_DWORD)v15)
              {
                v1[9] = v20;
                v20 = 0;
                v1[7] = v17;
                v17 = 0;
              }
            }
            goto LABEL_15;
          }
        }
        else
        {
          v11 = 0;
        }
        v15 = 4294954443;
      }
LABEL_15:
      if (cf)
        CFRelease(cf);
      if (v18)
        CFRelease(v18);
      if (v20)
        CFRelease(v20);
      if (v17)
        CFRelease(v17);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (v11)
        CFRelease(v11);
      return v15;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fbaprp_flushTransitionInBufferQueue(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[2];
  __int128 v10;
  CMBufferQueueRef queueOut;

  queueOut = 0;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v6 = CMBufferQueueCreate(v4, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    *(_QWORD *)&v9[0] = queueOut;
    *((_QWORD *)&v9[0] + 1) = a2;
    BYTE8(v10) = 1;
    HIDWORD(v10) = -1;
    MEMORY[0x19402B01C](a1, fbaprp_copySbufBeforeTransitionIDForBufferQueueResetCallback, v9);
    MEMORY[0x19402B01C](queueOut, fbaprp_copySbufForBufferQueueResetCallback, a1);
    v7 = HIDWORD(v10);
  }
  if (queueOut)
    CFRelease(queueOut);
  return v7;
}

uint64_t fbaprp_restoreAudioChainToStartOutputTime(uint64_t a1, const void *a2, uint64_t a3, CMTime *a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  CMTimeEpoch epoch;
  _OWORD *v19;
  _OWORD *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  CMTime v24;
  CMTime lhs;
  CMTime v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v11 = DerivedStorage;
  if (a5)
  {
    v12 = *(_QWORD *)(DerivedStorage + 392);
    v13 = *(_QWORD *)(DerivedStorage + 400);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v14)
      return 4294954514;
    result = v14(v12, v13, a1, 0);
    if ((_DWORD)result)
      return result;
  }
  v16 = MEMORY[0x1E0CA2E68];
  v17 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v11 + 160) = *MEMORY[0x1E0CA2E68];
  epoch = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v11 + 176) = epoch;
  v19 = (_OWORD *)MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v11 + 200) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)(v11 + 184) = *v19;
  v20 = (_OWORD *)(v11 + 260);
  if ((*(_BYTE *)(a3 + 12) & 1) != 0)
  {
    lhs = *a4;
    v24 = *(CMTime *)a3;
    CMTimeSubtract(&v26, &lhs, &v24);
    *v20 = *(_OWORD *)&v26.value;
    epoch = v26.epoch;
  }
  else
  {
    *v20 = v17;
  }
  *(_QWORD *)(v11 + 276) = epoch;
  *(_BYTE *)(v11 + 96) = 1;
  v21 = *(const void **)(v11 + 304);
  *(_QWORD *)(v11 + 304) = a2;
  if (a2)
    CFRetain(a2);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v11 + 136);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(v11 + 136) = 0;
  }
  v23 = *(_QWORD *)(v11 + 72);
  v26 = *(CMTime *)a3;
  lhs = *a4;
  result = FigSampleBufferProcessorRestoreBufferedAirPlayStates(v23, (__int128 *)&v26.value, &lhs);
  if (!(_DWORD)result)
    *(_DWORD *)(v11 + 148) = *(_DWORD *)(v11 + 144);
  return result;
}

CFTypeRef fbaprp_copySbufBeforeTransitionIDForBufferQueueResetCallback(CFTypeRef result, uint64_t a2)
{
  const void *v3;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = result;
    result = CMGetAttachment(result, (CFStringRef)*MEMORY[0x1E0CA2718], 0);
    if (result == *(CFTypeRef *)(a2 + 8))
    {
      *(_BYTE *)(a2 + 40) = 0;
    }
    else if (*(_BYTE *)(a2 + 40))
    {
      result = (CFTypeRef)CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, v3);
      *(_DWORD *)(a2 + 44) = 0;
    }
  }
  return result;
}

uint64_t fbaprp_copySbufForBufferQueueResetCallback(CMBufferRef buf, CMBufferQueueRef queue)
{
  return CMBufferQueueEnqueue(queue, buf);
}

void fbaprp_copySbufBeforeFlushTimeForBufferQueueResetCallback(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  opaqueCMSampleBuffer *v3;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFAllocator *v6;
  OSStatus Copy;
  int v8;
  const __CFDictionary *v9;
  void *v10;
  const __CFDictionary *v11;
  const __CFString *v12;
  const __CFDictionary *v13;
  CMTimeEpoch v14;
  CFDictionaryRef v15;
  CMTime v16;
  CMTime rhs;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime lhs;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v18 = v19;
  if (!*(_BYTE *)(a2 + 40))
    return;
  v3 = a1;
  CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a1);
  value = lhs.value;
  flags = lhs.flags;
  timescale = lhs.timescale;
  if ((lhs.flags & 0x1D) != 1)
    goto LABEL_15;
  epoch = lhs.epoch;
  CMSampleBufferGetOutputDuration(&rhs, v3);
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  CMTimeAdd(&v19, &lhs, &rhs);
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  time2 = *(CMTime *)(a2 + 16);
  if ((CMTimeCompare(&lhs, &time2) & 0x80000000) == 0)
  {
    *(_BYTE *)(a2 + 40) = 0;
    return;
  }
  lhs = v19;
  time2 = *(CMTime *)(a2 + 16);
  if (CMTimeCompare(&lhs, &time2) < 1)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  lhs.value = 0;
  if (!v3)
  {
    v10 = 0;
    if (!FigSignalErrorAt())
      goto LABEL_13;
    goto LABEL_26;
  }
  Copy = CMSampleBufferCreateCopy(v6, v3, (CMSampleBufferRef *)&lhs);
  if (lhs.value)
  {
    v8 = Copy;
    v9 = CMCopyDictionaryOfAttachments(v6, v3, 0);
    v10 = (void *)lhs.value;
    if (!v9)
      goto LABEL_12;
    v11 = v9;
    CMSetAttachments((CMAttachmentBearerRef)lhs.value, v9, 0);
    v10 = (void *)lhs.value;
    lhs.value = 0;
    CFRelease(v11);
  }
  else
  {
    v8 = FigSignalErrorAt();
    v10 = 0;
  }
  if (lhs.value)
    CFRelease((CFTypeRef)lhs.value);
LABEL_12:
  if (!v8)
  {
LABEL_13:
    lhs = v19;
    time2 = *(CMTime *)(a2 + 16);
    CMTimeSubtract(&v18, &lhs, &time2);
    v12 = (const __CFString *)*MEMORY[0x1E0CA2720];
    v16 = v18;
    lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v13 = (const __CFDictionary *)CMGetAttachment(v10, v12, 0);
    if (v13)
    {
      CMTimeMakeFromDictionary(&lhs, v13);
      v21 = lhs;
      v20 = v16;
      CMTimeAdd(&time2, &v21, &v20);
      *(_OWORD *)&lhs.value = *(_OWORD *)&time2.value;
      v14 = time2.epoch;
    }
    else
    {
      *(_OWORD *)&lhs.value = *(_OWORD *)&v16.value;
      v14 = v16.epoch;
    }
    lhs.epoch = v14;
    *(_OWORD *)&time2.value = *(_OWORD *)&lhs.value;
    time2.epoch = v14;
    v15 = CMTimeCopyAsDictionary(&time2, v6);
    CMSetAttachment(v10, v12, v15, 1u);
    if (v15)
      CFRelease(v15);
    v3 = (opaqueCMSampleBuffer *)v10;
LABEL_16:
    if (*(_BYTE *)(a2 + 40))
    {
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, v3);
      *(_DWORD *)(a2 + 44) = 0;
    }
    if (v10)
      goto LABEL_19;
    return;
  }
LABEL_26:
  FigSignalErrorAt();
  if (v10)
LABEL_19:
    CFRelease(v10);
}

void fbaprp_baoBufferingPriorityChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *UInt32;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, const __CFString *, const void *);
  const void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (*(_BYTE *)DerivedStorage
    || (Value = CFDictionaryGetValue(a5, CFSTR("bufferingPriority")), FigCFEqual())
    || !FigCFEqual() && !FigCFEqual() && !FigCFEqual())
  {
    JUMPOUT(0x19402EF04);
  }
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  v9 = *(_QWORD *)(DerivedStorage + 56);
  if (v9)
    FigMediaProcessorSetProperty(v9, CFSTR("ActivitySchedulerPriority"), (uint64_t)UInt32);
  CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 376));
  v11 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  if (v11)
    v11(CMBaseObject, CFSTR("ThreadPriority"), UInt32);
  v12 = *(const void **)(DerivedStorage + 328);
  *(_QWORD *)(DerivedStorage + 328) = Value;
  if (Value)
    CFRetain(Value);
  if (v12)
    CFRelease(v12);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  if (UInt32)
    CFRelease(UInt32);
}

uint64_t fbaprp_baoPrerollDurationChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v10;
  const __CFAllocator *v11;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  CFIndex v14;
  uint64_t v15;
  const void *v16;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, CFDictionaryRef);
  int v19;
  CMTime v21;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  if (!a5)
    goto LABEL_16;
  v7 = CFGetTypeID(a5);
  if (v7 != CFDictionaryGetTypeID())
    goto LABEL_16;
  CMTimeMakeFromDictionary(&v21, (CFDictionaryRef)a5);
  value = v21.value;
  flags = v21.flags;
  timescale = v21.timescale;
  if ((v21.flags & 1) == 0)
    goto LABEL_16;
  if (*(_BYTE *)DerivedStorage)
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  epoch = v21.epoch;
  fbaprp_cleanFreedSampleBufferConsumers();
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v21.value = value;
  v21.timescale = timescale;
  v21.flags = flags;
  v21.epoch = epoch;
  v12 = CMTimeCopyAsDictionary(&v21, v11);
  if (!v12)
  {
LABEL_16:
    FigSignalErrorAt();
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  }
  v13 = v12;
  if (CFArrayGetCount(*(CFArrayRef *)(v10 + 88)) < 1)
  {
LABEL_12:
    *(_QWORD *)(v10 + 336) = value;
    *(_DWORD *)(v10 + 344) = timescale;
    *(_DWORD *)(v10 + 348) = flags;
    *(_QWORD *)(v10 + 352) = epoch;
    goto LABEL_14;
  }
  v14 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 88), v14);
    v15 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v15)
      break;
LABEL_11:
    if (++v14 >= CFArrayGetCount(*(CFArrayRef *)(v10 + 88)))
      goto LABEL_12;
  }
  v16 = (const void *)v15;
  FigBaseObject = FigSampleBufferConsumerGetFigBaseObject(v15);
  v18 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v18)
  {
    v19 = v18(FigBaseObject, CFSTR("PrerollDuration"), v13);
    CFRelease(v16);
    if (v19)
      goto LABEL_14;
    goto LABEL_11;
  }
  CFRelease(v16);
LABEL_14:
  CFRelease(v13);
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
}

void fbaprp_baoDecryptionNotSupported(uint64_t a1, const void *a2)
{
  fbaprp_postNotification(a2, (uint64_t)CFSTR("DecodeError"), 0);
}

uint64_t CreatePesPrivateForADTS(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
    {
      v2(a1);
      a1[6] = 0;
    }
  }
  v3 = malloc_type_calloc(1uLL, 0x138uLL, 0x10B00401FD4DE26uLL);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  *v4 = v4 + 37;
  v4[2] = (char *)v4 + 303;
  v4[3] = 7;
  v4[4] = ADTSCheckHeader;
  v4[5] = ADTSCompareHeaders;
  v4[6] = ADTSGetSamplesInFrame;
  v4[7] = ADTSGetSampleFrequency;
  v4[8] = ADTSGetFrameSize;
  a1[105] = PesADTSProcessData;
  a1[106] = PesADTSCleanPrivateData;
  a1[107] = PesADTSDeletePrivateData;
  a1[6] = v4;
  return result;
}

BOOL ADTSCheckHeader(unsigned __int8 *a1)
{
  return *a1 == 255 && (a1[1] & 0xF6) == 240;
}

uint64_t ADTSCompareHeaders(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  uint64_t result;
  char *v5;
  _BYTE temporaryBlock[4];

  result = ADTSGetSampleFrequency((uint64_t)a2);
  if ((_DWORD)result)
  {
    v5 = 0;
    return !CMBlockBufferAccessDataBytes(a1, 0, 4uLL, temporaryBlock, &v5) && bswap32(*a2 ^ *(_DWORD *)v5) < 0x10;
  }
  return result;
}

uint64_t ADTSGetSamplesInFrame()
{
  return 1024;
}

uint64_t PesADTSProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(_QWORD **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesADTSCleanPrivateData(uint64_t a1)
{
  MPEGAudioCleanPrivateData(*(_QWORD *)(a1 + 48));
}

void PesADTSDeletePrivateData(uint64_t a1)
{
  MPEGAudioCleanPrivateData(*(_QWORD *)(a1 + 48));
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t FigCaptionRendererIntervalProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererIntervalProtocolGetProtocolID_sRegisterFigCaptionRendererIntervalProtocolTypeOnce, RegisterFigCaptionRendererIntervalProtocolType);
  return sFigCaptionRendererIntervalProtocolID;
}

uint64_t RegisterFigCaptionRendererIntervalProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCaptionRendererParentIntervalProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererParentIntervalProtocolGetProtocolID_sRegisterFigCaptionRendererParentIntervalProtocolTypeOnce, RegisterFigCaptionRendererParentIntervalProtocolType);
  return sFigCaptionRendererParentIntervalProtocolID;
}

uint64_t RegisterFigCaptionRendererParentIntervalProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigReportingModeratorCreateForCRABS(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4)
    return 4294949785;
  FigReportingModeratorGetClassID();
  v6 = CMDerivedObjectCreate();
  if (!(_DWORD)v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 8) = 0;
    *(_QWORD *)(DerivedStorage + 96) = FigGetUpTimeNanoseconds();
    *(_BYTE *)(DerivedStorage + 104) = 0;
    *(_QWORD *)DerivedStorage = FigGetUpTimeNanoseconds();
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    v6 = 0;
    *(_QWORD *)(DerivedStorage + 80) = v8;
    *(_QWORD *)(DerivedStorage + 88) = 0x1E301B718;
    *a4 = 0;
  }
  return v6;
}

void playerReportingModeratorFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = *(const void **)(DerivedStorage + 80);
    if (v1)
      CFRelease(v1);
  }
}

__CFString *playerReportingModeratorCopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigPlayerReportingModerator : "));
  return Mutable;
}

uint64_t playerModeratorProcessEventAndCopyKeyArray(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __CFString *, uint64_t *);
  uint64_t UpTimeNanoseconds;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, __CFString *, unint64_t);
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, __CFString *, __CFString *, unint64_t);
  __CFString *v38;
  __CFString *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, __CFString *, uint64_t *);
  void (*v70)(uint64_t, uint64_t, __CFString *, unint64_t *);
  void (*v71)(uint64_t, uint64_t, __CFString *, unint64_t *);
  void (*v72)(uint64_t, uint64_t, __CFString *, unint64_t *);
  void (*v73)(uint64_t, uint64_t, __CFString *, unint64_t *);
  void (*v74)(uint64_t, uint64_t, __CFString *, unint64_t *);
  void (*v75)(uint64_t, uint64_t, __CFString *, uint64_t *);
  uint64_t v76;
  unint64_t v77;
  void (*v78)(uint64_t, uint64_t, __CFString *, unint64_t);
  unint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, __CFString *, uint64_t *);
  unint64_t v81;
  void (*v82)(uint64_t, uint64_t, __CFString *, unint64_t);
  void (*v83)(uint64_t, uint64_t, __CFString *, uint64_t *);
  unint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, uint64_t, __CFString *, unint64_t);
  void (*v87)(uint64_t, uint64_t, __CFString *, uint64_t *);
  unint64_t v88;
  unint64_t v89;
  void (*v90)(uint64_t, uint64_t, __CFString *, unint64_t);
  void (*v91)(uint64_t, uint64_t, __CFString *, uint64_t *);
  void (*v92)(uint64_t, uint64_t, __CFString *, uint64_t *);
  void (*v93)(uint64_t, uint64_t, __CFString *, uint64_t *);
  void (*v94)(uint64_t, uint64_t, __CFString *, uint64_t *);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void (*v100)(uint64_t, uint64_t, __CFString *, unint64_t);
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  CFTypeRef v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294949785;
  if (!a3 || !DerivedStorage)
    return result;
  if (a2 == 110)
    return 4294949783;
  v9 = 0;
  v106 = 0;
  if (a2 != 306)
  {
LABEL_8:
    v105 = a4;
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v13 = UpTimeNanoseconds;
    v14 = *(_DWORD *)(DerivedStorage + 8);
    if (*(_QWORD *)DerivedStorage)
    {
      v15 = (UpTimeNanoseconds - *(_QWORD *)DerivedStorage) / 0xF4240uLL;
      switch(v14)
      {
        case 0:
          v16 = *(_QWORD *)(DerivedStorage + 80);
          v17 = *(_QWORD *)(DerivedStorage + 88);
          v18 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
          if (v18)
          {
            v19 = CFSTR("InitTime");
            goto LABEL_21;
          }
          break;
        case 1:
          v16 = *(_QWORD *)(DerivedStorage + 80);
          v17 = *(_QWORD *)(DerivedStorage + 88);
          v18 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
          if (v18)
          {
            v19 = CFSTR("PauseTime");
            goto LABEL_21;
          }
          break;
        case 2:
          v20 = *(_QWORD *)(DerivedStorage + 16);
          v21 = *(_QWORD *)(DerivedStorage + 80);
          v22 = *(_QWORD *)(DerivedStorage + 88);
          v23 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
          if (v23)
            v23(v21, v22, CFSTR("PlayTimeWC"), v15);
          v24 = *(_QWORD *)(DerivedStorage + 80);
          v25 = *(_QWORD *)(DerivedStorage + 88);
          v18 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
          if (v18)
          {
            v26 = v20 * v15 / 0x64;
            v19 = CFSTR("PlayTime");
            v27 = v24;
            v28 = v25;
            goto LABEL_22;
          }
          break;
        case 3:
          v16 = *(_QWORD *)(DerivedStorage + 80);
          v17 = *(_QWORD *)(DerivedStorage + 88);
          v18 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
          if (v18)
          {
            v19 = CFSTR("StallTime");
LABEL_21:
            v27 = v16;
            v28 = v17;
            v26 = v15;
LABEL_22:
            v18(v27, v28, v19, v26);
          }
          break;
        default:
          break;
      }
    }
    *(_QWORD *)DerivedStorage = v13;
    switch(a2)
    {
      case 303:
        *(_QWORD *)(DerivedStorage + 32) = v13;
        v14 = 3;
        break;
      case 304:
        break;
      case 305:
        v32 = *(_QWORD *)(DerivedStorage + 80);
        v33 = *(_QWORD *)(DerivedStorage + 88);
        v34 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 64);
        if (v34)
          v34(v32, v33, CFSTR("EventCounter"), 1);
        if (!*(_BYTE *)(DerivedStorage + 104))
        {
          *(_BYTE *)(DerivedStorage + 104) = 1;
          v35 = *(_QWORD *)(DerivedStorage + 80);
          v36 = *(_QWORD *)(DerivedStorage + 96);
          v37 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 88);
          if (v37)
          {
            v38 = CFSTR("moderatorStats");
            v39 = CFSTR("TimeAssetToLTKU");
            v40 = (v13 - v36) / 0xF4240uLL;
            v41 = v35;
            goto LABEL_39;
          }
        }
        break;
      case 306:
        if (v9)
        {
          *(_QWORD *)(DerivedStorage + 16) = v9;
          *(_QWORD *)(DerivedStorage + 24) = v13;
          v14 = 2;
        }
        else
        {
          v14 = 1;
        }
        break;
      case 307:
        fprm_setSessionEndReasonIfFatalError(DerivedStorage, 0x1E301B638, 0, 0x1E301CB78, 0x1E301CBB8, 0x1E301CB98);
        v42 = *(_QWORD *)(DerivedStorage + 80);
        v43 = *(__CFString **)(DerivedStorage + 88);
        v37 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 64);
        if (v37)
        {
          v39 = CFSTR("PlayerErrCount");
          v41 = v42;
          v38 = v43;
          v40 = 1;
LABEL_39:
          v37(v41, v38, v39, v40);
        }
        break;
      default:
        if (a2 == 402)
        {
          fprm_setSessionEndReasonIfFatalError(DerivedStorage, 0x1E301B6B8, 0x1E2FF75B8, 0x1E2FF7538, 0x1E2FF7578, 0x1E2FF7558);
          v44 = *(_QWORD *)(DerivedStorage + 80);
          v45 = *(_QWORD *)(DerivedStorage + 88);
          v46 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
          if (v46)
            v46(v44, v45, CFSTR("CRABSErrCount"), 1);
          *(_QWORD *)(DerivedStorage + 48) = v13;
        }
        else if (a2 == 502)
        {
          fprm_setSessionEndReasonIfFatalError(DerivedStorage, 0x1E301B6D8, 0x1E2FF7658, 0x1E2FF75F8, 0x1E2FF7638, 0x1E2FF7618);
          v29 = *(_QWORD *)(DerivedStorage + 80);
          v30 = *(_QWORD *)(DerivedStorage + 88);
          v31 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
          if (v31)
            v31(v29, v30, CFSTR("FlumeErrCount"), 1);
          *(_QWORD *)(DerivedStorage + 56) = v13;
        }
        break;
    }
    *(_DWORD *)(DerivedStorage + 8) = v14;
    v47 = v106;
    v48 = FigGetUpTimeNanoseconds();
    v50 = a2 == 306 && v47 != 0;
    if (a2 == 303 || v50)
    {
      v51 = *(_QWORD *)(DerivedStorage + 24);
      if (v51)
      {
        v52 = *(_QWORD *)(DerivedStorage + 80);
        v53 = *(_QWORD *)(DerivedStorage + 88);
        v54 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 88);
        if (v54)
          v54(v52, v53, CFSTR("LastResume"), (v48 - v51) / 0xF4240uLL);
      }
      v55 = *(_QWORD *)(DerivedStorage + 32);
      if (v55)
      {
        v56 = *(_QWORD *)(DerivedStorage + 80);
        v57 = *(_QWORD *)(DerivedStorage + 88);
        v58 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 88);
        if (v58)
          v58(v56, v57, CFSTR("LastStall"), (v48 - v55) / 0xF4240uLL);
      }
    }
    v59 = *(_QWORD *)(DerivedStorage + 56);
    if (v59)
    {
      v60 = *(_QWORD *)(DerivedStorage + 80);
      v61 = *(_QWORD *)(DerivedStorage + 88);
      v62 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 88);
      if (v62)
        v62(v60, v61, CFSTR("FlumeErrTime"), (v48 - v59) / 0xF4240uLL);
    }
    v63 = *(_QWORD *)(DerivedStorage + 48);
    if (v63)
    {
      v64 = *(_QWORD *)(DerivedStorage + 80);
      v65 = *(_QWORD *)(DerivedStorage + 88);
      v66 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 88);
      if (v66)
        v66(v64, v65, CFSTR("CRABSErrTime"), (v48 - v63) / 0xF4240uLL);
    }
    if (a2 == 901 || a2 == 101)
    {
      v68 = *(_QWORD *)(DerivedStorage + 80);
      v67 = *(_QWORD *)(DerivedStorage + 88);
      v114 = 0;
      v115 = 0;
      v112 = 0;
      v113 = 0;
      v111 = 0;
      v69 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 48);
      if (v69)
        v69(v68, 1, CFSTR("TWStats_PlayTime"), &v115);
      v70 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 48);
      if (v70)
        v70(v68, 1, CFSTR("ADT"), &v113);
      v71 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 48);
      if (v71)
        v71(v68, 1, CFSTR("DownloadTime"), &v114);
      v72 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 48);
      if (v72)
        v72(v68, 1, CFSTR("FMReqTime"), &v112);
      v73 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 48);
      if (v73)
        v73(v68, 1, CFSTR("IMReqTime"), &v111);
      v110 = 0;
      v74 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 40);
      if (v74)
        v74(v68, 1, CFSTR("FDur"), &v110);
      if (v110)
      {
        v116 = 0;
        v75 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 40);
        if (v75)
          v75(v68, 1, CFSTR("FSize"), &v116);
        v76 = v116;
        v77 = v110;
        v78 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 88);
        if (v78)
          v78(v68, v67, CFSTR("IBR"), 8000 * v76 / v77);
      }
      v79 = v113;
      if (v113)
      {
        v116 = 0;
        v80 = *(unsigned int (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 48);
        if (v80)
        {
          if (!v80(v68, 1, CFSTR("TWOBR_Bits"), &v116))
          {
            v81 = v116;
            if (v116)
            {
              v82 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 88);
              if (v82)
                v82(v68, v67, CFSTR("TWOBR"), v81 / v79);
            }
          }
        }
      }
      if (v112)
      {
        v116 = 0;
        v83 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 40);
        if (v83)
        {
          v83(v68, 1, CFSTR("FMReqBytes"), &v116);
          v84 = 8000 * v116;
        }
        else
        {
          v84 = 0;
        }
        v85 = v112;
        v86 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 88);
        if (v86)
          v86(v68, v67, CFSTR("TWFOBR"), v84 / v85);
      }
      if (v111)
      {
        v116 = 0;
        v87 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 40);
        if (v87)
        {
          v87(v68, 1, CFSTR("IMReqBytes"), &v116);
          v88 = 8000 * v116;
        }
        else
        {
          v88 = 0;
        }
        v89 = v111;
        v90 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 88);
        if (v90)
          v90(v68, v67, CFSTR("TWIOBR"), v88 / v89);
      }
      if (v114)
      {
        v116 = 0;
        v108 = 0;
        v109 = 0;
        v107 = 0;
        v91 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 48);
        if (v91)
          v91(v68, 1, CFSTR("WiFiBytes"), &v116);
        v92 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 48);
        if (v92)
          v92(v68, 1, CFSTR("WWANBytes"), &v109);
        v93 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 48);
        if (v93)
          v93(v68, 1, CFSTR("WANBytes"), &v108);
        v94 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 48);
        if (v94)
        {
          v94(v68, 1, CFSTR("WiFiAWDLBytes"), &v107);
          v95 = v107;
        }
        else
        {
          v95 = 0;
        }
        v96 = v116;
        v97 = v108;
        v98 = v109;
        v99 = v114;
        v100 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 88);
        if (v100)
          v100(v68, v67, CFSTR("TWRAWOBR"), 8000 * (v96 + v95 + v97 + v98) / v99);
      }
    }
    MEMORY[0x19402F294](&fprm_copyEventKeyArray_sCreateStaticKeyArrayFromEventKeysOnce, fprm_createStaticKeyArrayFromEventKeys);
    v101 = 0;
    v102 = &kFigReportingEventKeyArray_AggregatedEvent_0;
    if (a2 <= 401)
    {
      switch(a2)
      {
        case 303:
          v102 = &kFigReportingEventKeyArray_StallEvent_0;
          goto LABEL_135;
        case 304:
          v102 = &kFigReportingEventKeyArray_UnlikelyToKeepUpEvent;
          goto LABEL_135;
        case 305:
          v102 = &kFigReportingEventKeyArray_LikelyToKeepUpEvent_0;
          goto LABEL_135;
        case 306:
          v102 = &kFigReportingEventKeyArray_PlayRateChangedEvent_0;
          goto LABEL_135;
        case 307:
          v102 = &kFigReportingEventKeyArray_PlayerErrorEvent_0;
LABEL_135:
          v103 = v105;
          goto LABEL_136;
        default:
          v103 = v105;
          if (a2 == 101)
            goto LABEL_136;
          if (a2 != 401)
            goto LABEL_138;
          v102 = &kFigReportingEventKeyArray_CRABSDoneBufferingEvent;
          break;
      }
      goto LABEL_136;
    }
    if (a2 <= 800)
    {
      v103 = v105;
      switch(a2)
      {
        case 402:
          v102 = &kFigReportingEventKeyArray_CRABSErrorEvent;
          break;
        case 502:
          v102 = &kFigReportingEventKeyArray_FlumeErrorEvent;
          break;
        case 800:
          v102 = &kFigReportingEventKeyArray_IRATStreamingActivityStartEvent_0;
          break;
        default:
          goto LABEL_138;
      }
    }
    else
    {
      v103 = v105;
      if (a2 > 899)
      {
        if (a2 == 900)
        {
          v102 = &kFigReportingEventKeyArray_PowerLogEvent_0;
        }
        else if (a2 != 901)
        {
          goto LABEL_138;
        }
      }
      else
      {
        if (a2 != 801)
        {
          if (a2 == 802)
          {
            v102 = &kFigReportingEventKeyArray_IRATStallEvent_0;
            goto LABEL_136;
          }
LABEL_138:
          result = 0;
          *a3 = v101;
          if (a2 != 101 && v103)
          {
            if (kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats_0)
              v104 = CFRetain((CFTypeRef)kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats_0);
            else
              v104 = 0;
            result = 0;
            *v103 = v104;
          }
          return result;
        }
        v102 = &kFigReportingEventKeyArray_IRATStreamingActivityEndEvent_0;
      }
    }
LABEL_136:
    v101 = *v102;
    if (*v102)
      CFRetain((CFTypeRef)*v102);
    goto LABEL_138;
  }
  v10 = *(_QWORD *)(DerivedStorage + 80);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 40);
  if (!v11)
    return 4294954514;
  result = v11(v10, 1, CFSTR("Rate"), &v106);
  if (!(_DWORD)result)
  {
    v9 = v106;
    goto LABEL_8;
  }
  return result;
}

