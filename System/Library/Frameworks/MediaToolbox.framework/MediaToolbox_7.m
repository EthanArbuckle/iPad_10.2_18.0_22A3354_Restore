uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontWeight(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35A0];
  if (CFEqual(a1, CFSTR("normal")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA35B0];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("bold")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA35A8];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontStyle(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3580];
  if (CFEqual(a1, CFSTR("normal")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3590];
LABEL_9:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("italic")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3588];
    goto LABEL_9;
  }
  if (CFEqual(a1, CFSTR("oblique")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3598];
    goto LABEL_9;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_display(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35C0];
  if (CFEqual(a1, CFSTR("none")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("auto")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textOutline(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t v7;
  const __CFArray *v8;
  CGColor *v9;
  const __CFArray *v10;
  const __CFString *ValueAtIndex;
  uint64_t v12;

  if (!a1 || (v6 = CFGetTypeID(a1), v6 != CFStringGetTypeID()))
  {
    v7 = FigSignalErrorAt();
    CGColorRelease(0);
    return v7;
  }
  if (CFEqual(a1, CFSTR("none")))
  {
    v7 = FigCaptionTextOutlineCreate();
    v8 = 0;
    v9 = 0;
LABEL_12:
    *a2 = *MEMORY[0x1E0CA3630];
    *a3 = 0;
    goto LABEL_13;
  }
  v10 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
  v8 = v10;
  if (v10 && CFArrayGetCount(v10) > 0)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
    v9 = (CGColor *)FigTTMLCGColorCreateWithColorSyntax(ValueAtIndex);
    if (v9)
    {
      if (CFArrayGetCount(v8) < 2)
        goto LABEL_18;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
    }
    FigTTMLParseLengthSyntax(ValueAtIndex);
    if ((v12 & 0x100000000) != 0)
    {
      v7 = FigCaptionTextOutlineCreate();
      goto LABEL_12;
    }
LABEL_18:
    v7 = FigSignalErrorAt();
    CGColorRelease(v9);
    goto LABEL_14;
  }
  v7 = FigSignalErrorAt();
  v9 = 0;
LABEL_13:
  CGColorRelease(v9);
  if (v8)
LABEL_14:
    CFRelease(v8);
  return v7;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textDecoration(const void *a1, const __CFArray **a2, CFNumberRef *a3)
{
  CFTypeID v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  int v13;
  const void *ValueAtIndex;
  CFNumberRef v15;
  const __CFArray *v16;
  CFNumberRef *v18;
  int valuePtr;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      v7 = (const __CFArray *)*MEMORY[0x1E0CA3560];
      v8 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
      if (v8)
      {
        v9 = v8;
        v18 = a3;
        Count = CFArrayGetCount(v8);
        if (Count < 1)
        {
          v13 = 0;
        }
        else
        {
          v11 = Count;
          v12 = 0;
          v13 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
            if (CFEqual(ValueAtIndex, CFSTR("underline")))
            {
              v13 |= 1u;
            }
            else if (CFEqual(ValueAtIndex, CFSTR("lineThrough")))
            {
              v13 |= 2u;
            }
            else if (CFEqual(ValueAtIndex, CFSTR("overline")))
            {
              v13 |= 4u;
            }
            ++v12;
          }
          while (v11 != v12);
        }
        valuePtr = v13;
        v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        *a2 = v7;
        *v18 = v15;
        v16 = v9;
      }
      else
      {
        FigSignalErrorAt();
        if (!v7)
          return 0;
        v16 = v7;
      }
      CFRelease(v16);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_forcedDisplay(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35B8];
  if (CFEqual(a1, CFSTR("true")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("false")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontSize(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  FigTTMLParseLengthSyntax(a1);
  if ((v7 & 0x100000000) != 0)
  {
    FigGeometrySizeMake();
    *a2 = *MEMORY[0x1E0CA3578];
    v8 = FigGeometrySizeCopyAsDictionary();
    *a3 = v8;
  }
  else
  {
    v8 = *a3;
  }
  if (v8)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_lineHeight(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  FigTTMLParseLengthSyntax(a1);
  if ((v7 & 0x100000000) != 0)
  {
    *a2 = *MEMORY[0x1E0CA35D0];
    v8 = FigGeometryDimensionCopyAsDictionary();
    *a3 = v8;
  }
  else
  {
    v8 = *a3;
  }
  if (v8)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_wrapOption(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35D8];
  if (CFEqual(a1, CFSTR("wrap")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("noWrap")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontFamily(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t FontFamilyNameList;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3570];
  FontFamilyNameList = FigTTMLParseFontFamilySyntaxAndCreateFontFamilyNameList(a1);
  *a3 = FontFamilyNameList;
  if (FontFamilyNameList)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_visibility(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35C8];
  if (CFEqual(a1, CFSTR("hidden")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("visible")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_direction_and_unicodeBidi(const void *a1, _QWORD *a2, CFMutableArrayRef *a3)
{
  CFTypeID v6;
  const __CFAllocator *v7;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  uint64_t v10;
  CFMutableArrayRef v12;
  uint64_t v13;
  CFRange v14;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3648];
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = CFArrayGetCount((CFArrayRef)a1);
  Mutable = CFArrayCreateMutable(v7, Count, MEMORY[0x1E0C9B378]);
  v12 = Mutable;
  v13 = 0;
  v14.length = CFArrayGetCount((CFArrayRef)a1);
  v14.location = 0;
  CFArrayApplyFunction((CFArrayRef)a1, v14, (CFArrayApplierFunction)fcd_ttml_addWritingDirectionStylePropertyKeyFrameValueToArray, &v12);
  v10 = v13;
  if ((_DWORD)v13)
  {
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    *a3 = Mutable;
  }
  return v10;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textCombine(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA35F0];
  if (CFEqual(a1, CFSTR("none")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3608];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("all")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA35F8];
    goto LABEL_7;
  }
  return 4294950725;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textEmphasis(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  result = FigTTMLParseTextEmphasisSyntaxAndCreateCaptionTextEmphasis((uint64_t)a1, a3);
  if (!(_DWORD)result)
    *a2 = *MEMORY[0x1E0CA3628];
  return result;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textShear(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  result = FigTTMLParseLength(a1, (float *)&v9 + 1, (int *)&v9);
  if (!(_DWORD)result)
  {
    if ((_DWORD)v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      FigGeometryDimensionMake();
      *a2 = *MEMORY[0x1E0CA3640];
      v8 = FigGeometryDimensionCopyAsDictionary();
      result = 0;
      *a3 = v8;
    }
  }
  return result;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textShadow(const void *a1, _QWORD *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  result = FigTTMLParseTextShadowSyntaxAndCreateCaptionTextShadowList((uint64_t)a1, a3);
  if (!(_DWORD)result)
    *a2 = *MEMORY[0x1E0CA3638];
  return result;
}

void fcd_ttml_addWritingDirectionStylePropertyKeyFrameValueToArray(const __CFDictionary *a1, uint64_t a2)
{
  const void *Value;
  const void *v5;
  int v6;
  CFNumberRef v7;
  int valuePtr;

  Value = CFDictionaryGetValue(a1, CFSTR("http://www.w3.org/ns/ttml#styling direction"));
  v5 = CFDictionaryGetValue(a1, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"));
  valuePtr = 0;
  if (CFEqual(Value, CFSTR("ltr")))
  {
    v6 = 2;
  }
  else
  {
    if (!CFEqual(Value, CFSTR("rtl")))
      goto LABEL_10;
    valuePtr = 1;
    v6 = 3;
  }
  if (CFEqual(v5, CFSTR("embed")))
    goto LABEL_8;
  if (!CFEqual(v5, CFSTR("bidiOverride")))
  {
LABEL_10:
    *(_DWORD *)(a2 + 8) = -16576;
    return;
  }
  valuePtr = v6;
LABEL_8:
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(*(CFMutableArrayRef *)a2, v7);
  if (v7)
    CFRelease(v7);
}

uint64_t fcd_ttml_createDynamicStyleFromTTML(uint64_t (*a1)(CFTypeRef, CFTypeRef *, CFTypeRef *), uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5, _QWORD *a6)
{
  double Seconds;
  double v12;
  uint64_t KeyFrameCount;
  uint64_t v14;
  uint64_t v15;
  uint64_t Mutable;
  CFTypeRef v17;
  uint64_t v18;
  CMTime v20;
  CMTime v21;
  CMTime time;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cf;

  v25 = 0;
  cf = 0;
  v23 = 0;
  v24 = 0;
  if ((a4[1].flags & 0x1D) != 1)
  {
    Mutable = FigSignalErrorAt();
LABEL_29:
    v18 = Mutable;
    if (v23)
      CFRelease(v23);
    goto LABEL_21;
  }
  time = a4[1];
  Seconds = CMTimeGetSeconds(&time);
  time = *a4;
  v20 = *a3;
  CMTimeSubtract(&v21, &time, &v20);
  v12 = CMTimeGetSeconds(&v21);
  KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
  if (KeyFrameCount >= 1)
  {
    v14 = KeyFrameCount;
    v15 = 0;
    while (1)
    {
      time.value = 0;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      Mutable = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if ((_DWORD)Mutable)
        goto LABEL_29;
      if (v24)
      {
        CFRelease(v24);
        v24 = 0;
      }
      if (v25)
      {
        CFRelease(v25);
        v25 = 0;
      }
      Mutable = a1(cf, &v25, &v24);
      if ((_DWORD)Mutable)
        goto LABEL_29;
      v17 = v23;
      if (v23)
      {
        if ((*(double *)&time.value - v12) / Seconds >= 1.0)
          goto LABEL_20;
        Mutable = FigCaptionDynamicStyleAddKeyFrameValue();
        if ((_DWORD)Mutable)
          goto LABEL_29;
      }
      else
      {
        Mutable = FigCaptionDynamicStyleCreateMutable();
        if ((_DWORD)Mutable)
          goto LABEL_29;
      }
      if (v14 == ++v15)
      {
        v17 = v23;
        goto LABEL_20;
      }
    }
  }
  v17 = 0;
LABEL_20:
  v18 = 0;
  *a5 = v25;
  *a6 = v17;
  v25 = 0;
  v23 = 0;
LABEL_21:
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  if (cf)
    CFRelease(cf);
  return v18;
}

uint64_t fcd_ttml_setRubyTextPropertyFromDictionary(const __CFDictionary *a1, const void *a2)
{
  uint64_t InitialValue;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  CFDictionaryGetValue(a1, a2);
  InitialValue = FigCaptionDynamicStyleGetInitialValue();
  if (FigCFEqual())
  {
    v3 = *MEMORY[0x1E0CA3530];
    if (InitialValue && !FigCFEqual())
    {
      v4 = FigCFEqual();
      v5 = (uint64_t *)MEMORY[0x1E0CA3528];
      goto LABEL_5;
    }
LABEL_33:
    if (!v3)
      return v3;
    return FigCaptionDynamicStyleCreate();
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v3 = *MEMORY[0x1E0CA3548];
      if (!InitialValue)
        goto LABEL_33;
      if (FigCFEqual())
      {
        v7 = (uint64_t *)MEMORY[0x1E0CA3530];
      }
      else
      {
        if (!FigCFEqual())
        {
          FigCFEqual();
          goto LABEL_33;
        }
        v7 = (uint64_t *)MEMORY[0x1E0CA3528];
      }
    }
    else
    {
      if (!FigCFEqual())
        return 0;
      v3 = *MEMORY[0x1E0CA34F8];
      if (!InitialValue)
        goto LABEL_33;
      if (FigCFEqual())
      {
LABEL_12:
        v7 = (uint64_t *)MEMORY[0x1E0CA3520];
        goto LABEL_27;
      }
      if (FigCFEqual())
        goto LABEL_33;
      if (FigCFEqual())
      {
        v7 = (uint64_t *)MEMORY[0x1E0CA3508];
      }
      else
      {
        if (!FigCFEqual())
        {
          v4 = FigCFEqual();
          v5 = (uint64_t *)MEMORY[0x1E0CA3510];
          goto LABEL_5;
        }
        v7 = (uint64_t *)MEMORY[0x1E0CA3500];
      }
    }
LABEL_27:
    v3 = *v7;
    if (!*v7)
      return v3;
    return FigCaptionDynamicStyleCreate();
  }
  v3 = *MEMORY[0x1E0CA3508];
  if (!InitialValue)
    goto LABEL_33;
  if (FigCFEqual())
    goto LABEL_12;
  if (FigCFEqual())
  {
    v7 = (uint64_t *)MEMORY[0x1E0CA34F8];
    goto LABEL_27;
  }
  if (FigCFEqual())
    goto LABEL_33;
  v4 = FigCFEqual();
  v5 = (uint64_t *)MEMORY[0x1E0CA3500];
LABEL_5:
  v6 = *v5;
  if (v4)
    v3 = v6;
  if (v3)
    return FigCaptionDynamicStyleCreate();
  return v3;
}

__n128 fcd_ttml_getCaptionTimeRange@<Q0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 *v4;
  CFIndex Count;
  __n128 result;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v17;

  v4 = (__n128 *)MEMORY[0x1E0CA2E40];
  v13 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v14 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)(a2 + 16) = v13;
  v12 = v4[2];
  *(__n128 *)(a2 + 32) = v12;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      memset(&v17, 0, sizeof(v17));
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      if (FigTTMLNodeGetActiveTimeRange((uint64_t)ValueAtIndex, (uint64_t)&v17))
        break;
      if ((*(_BYTE *)(a2 + 12) & 1) == 0
        || (*(_BYTE *)(a2 + 36) & 1) == 0
        || *(_QWORD *)(a2 + 40)
        || (*(_QWORD *)(a2 + 24) & 0x8000000000000000) != 0)
      {
        v10 = *(_OWORD *)&v17.start.epoch;
        *(_OWORD *)a2 = *(_OWORD *)&v17.start.value;
        *(_OWORD *)(a2 + 16) = v10;
        result.n128_u64[0] = *(_QWORD *)&v17.duration.timescale;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v17.duration.timescale;
      }
      else
      {
        v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&range.start.value = *(_OWORD *)a2;
        *(_OWORD *)&range.start.epoch = v11;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a2 + 32);
        otherRange = v17;
        CMTimeRangeGetUnion((CMTimeRange *)a2, &range, &otherRange);
      }
      if (v7 == ++v8)
        return result;
    }
    *(_OWORD *)a2 = v14;
    *(_OWORD *)(a2 + 16) = v13;
    result = v12;
    *(__n128 *)(a2 + 32) = v12;
  }
  return result;
}

uint64_t fcd_ttml_setPropertyToObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(a3, a1, a2);
  return result;
}

void fcd_ttml_initializeCaptionPropertyMappingDictionary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("urn:ebu:tt:style linePadding"), fcd_ttml_createCaptionPropertyFromTTMLStyle_linePadding);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), fcd_ttml_createCaptionPropertyFromTTMLStyle_backgroundColor);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap"), fcd_ttml_createCaptionPropertyFromTTMLStyle_fillLineGap);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textAlign"), fcd_ttml_createCaptionPropertyFromTTMLStyle_textAlign);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling lineHeight"), fcd_ttml_createCaptionPropertyFromTTMLStyle_lineHeight);
  CFDictionaryAddValue(Mutable, CFSTR("urn:ebu:tt:style multiRowAlign"), fcd_ttml_createCaptionPropertyFromTTMLStyle_multiRowAlign);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling display"), fcd_ttml_createCaptionPropertyFromTTMLStyle_display);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling rubyReserve"), fcd_ttml_createCaptionPropertyFromTTMLStyle_rubyReserve);
  sCaptionPropertyMappingDictionary = (uint64_t)Mutable;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_linePadding(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3330];
  v7 = COERCE_DOUBLE(FigTTMLParseLengthSyntax(a1));
  if ((v8 & 0x100000000) == 0 || v7 < 0.0 || (_DWORD)v8 != 1667591276)
    return FigSignalErrorAt();
  v9 = FigGeometryDimensionCopyAsDictionary();
  *a3 = v9;
  if (v9)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_backgroundColor(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3308];
  v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
  *a3 = v7;
  if (v7)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_fillLineGap(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3318];
  if (CFEqual(a1, CFSTR("true")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("false")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_textAlign(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3378];
  if (CFEqual(a1, CFSTR("start")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3670];
LABEL_13:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("end")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3658];
    goto LABEL_13;
  }
  if (CFEqual(a1, CFSTR("center")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3650];
    goto LABEL_13;
  }
  if (CFEqual(a1, CFSTR("left")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3660];
    goto LABEL_13;
  }
  if (CFEqual(a1, CFSTR("right")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3668];
    goto LABEL_13;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_lineHeight(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3328];
  if (CFEqual(a1, CFSTR("normal")) || (FigTTMLParseLengthSyntax(a1), (v7 & 0x100000000) != 0))
  {
    v8 = FigGeometryDimensionCopyAsDictionary();
    *a3 = v8;
  }
  else
  {
    v8 = *a3;
  }
  if (v8)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_multiRowAlign(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3338];
  if (CFEqual(a1, CFSTR("start")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA32F8];
LABEL_11:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("center")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA32E8];
    goto LABEL_11;
  }
  if (CFEqual(a1, CFSTR("end")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA32F0];
    goto LABEL_11;
  }
  if (CFEqual(a1, CFSTR("auto")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA32E0];
    goto LABEL_11;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_display(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3320];
  if (CFEqual(a1, CFSTR("none")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("auto")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_rubyReserve(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  uint64_t v8;

  v8 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  result = FigTTMLParseRubyReserveSyntaxAndCreateCaptionRubyReserve((uint64_t)a1, &v8);
  if (!(_DWORD)result)
  {
    *a2 = *MEMORY[0x1E0CA3358];
    *a3 = v8;
  }
  return result;
}

uint64_t fcd_ttml_createCellResolutionProperty(uint64_t a1)
{
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  if (*(_DWORD *)(a1 + 184) && *(_DWORD *)(a1 + 188))
  {
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
  }
  FigGeometrySizeMake();
  return FigGeometrySizeCopyAsDictionary();
}

uint64_t fcd_ttml_setDimensionProperty(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;

  v3 = (const void *)FigGeometryDimensionCopyAsDictionary();
  v4 = FigCaptionDynamicStyleCreate();
  if ((_DWORD)v4)
    goto LABEL_4;
  CMBaseObject = FigCaptionRegionGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
  {
    v4 = v6(CMBaseObject, a2, 0);
LABEL_4:
    v7 = v4;
    goto LABEL_6;
  }
  v7 = 4294954514;
LABEL_6:
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t fcd_ttml_createRegionFromNode(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, _QWORD *a7)
{
  const __CFAllocator *v14;
  uint64_t Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, _QWORD);
  __CFDictionary *v22;
  __int128 v23;
  uint64_t v24;
  const void *CellResolutionProperty;
  _QWORD v27[2];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __CFDictionary *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  const __CFDictionary *v38;
  void *v39;

  v38 = 0;
  v39 = 0;
  v37 = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = FigCaptionRegionCreateMutable();
  if ((_DWORD)Mutable)
    goto LABEL_23;
  CMBaseObject = FigCaptionRegionGetCMBaseObject();
  v17 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v17)
    goto LABEL_17;
  Mutable = v17(CMBaseObject, *MEMORY[0x1E0CA3400], a4);
  if ((_DWORD)Mutable)
    goto LABEL_23;
  v18 = FigCaptionRegionGetCMBaseObject();
  v19 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v19)
  {
LABEL_17:
    v24 = 4294954514;
    goto LABEL_18;
  }
  Mutable = v19(v18, *MEMORY[0x1E0CA3438], a3);
  if ((_DWORD)Mutable)
    goto LABEL_23;
  Mutable = FigTTMLNodeGetNodeType((uint64_t)a2, (uint64_t)&v37);
  if ((_DWORD)Mutable)
    goto LABEL_23;
  if (v37 == 10)
  {
    v20 = FigCaptionRegionGetCMBaseObject();
    v21 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v21)
    {
      Mutable = v21(v20, *MEMORY[0x1E0CA3418], *MEMORY[0x1E0C9AE50]);
      if (!(_DWORD)Mutable)
        goto LABEL_10;
LABEL_23:
      v24 = Mutable;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_10:
  Mutable = FigTTMLSynchronicTreeCopySSS(a1, a2, &v38);
  if ((_DWORD)Mutable)
    goto LABEL_23;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  Mutable = FigTTMLNodeGetActiveTimeRange((uint64_t)a2, (uint64_t)&v34);
  if ((_DWORD)Mutable)
    goto LABEL_23;
  v22 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27[0] = 0;
  MEMORY[0x19402F294](&fcd_ttml_getRegionPropertyMappingDictionary_sInitializeRegionPropertyMappingOnce, fcd_ttml_initializeRegionPropertyMappingDictionary);
  v28 = v34;
  v23 = a5[1];
  v30 = *a5;
  v27[1] = sRegionPropertyMappingDictionary;
  v29 = v35;
  v31 = v23;
  v32 = a5[2];
  v33 = v22;
  CFDictionaryApplyFunction(v38, (CFDictionaryApplierFunction)fcd_ttml_convertTTMLStyleToRegionPropertyAndAddToDictionary, v27);
  v24 = LODWORD(v27[0]);
  if (!LODWORD(v27[0]))
  {
    CellResolutionProperty = (const void *)fcd_ttml_createCellResolutionProperty(a6);
    CFDictionaryAddValue(v22, (const void *)*MEMORY[0x1E0CA33F0], CellResolutionProperty);
    CFDictionaryApplyFunction(v22, (CFDictionaryApplierFunction)fcd_ttml_setPropertyToObject, v39);
    *a7 = v39;
    v39 = 0;
    if (CellResolutionProperty)
      CFRelease(CellResolutionProperty);
  }
  if (v22)
    CFRelease(v22);
LABEL_18:
  if (v38)
    CFRelease(v38);
  if (v39)
    CFRelease(v39);
  return v24;
}

void fcd_ttml_convertTTMLStyleToRegionPropertyAndAddToDictionary(void *key, uint64_t a2, uint64_t a3)
{
  uint64_t (*Value)(CFTypeRef, CFTypeRef *, CFTypeRef *);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  const void *v11;
  CFTypeRef v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CMTime v19;
  const void *v20;
  CFTypeRef v21;

  v20 = 0;
  v21 = 0;
  Value = (uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), key);
  if (Value)
  {
    v6 = *(_OWORD *)(a3 + 16);
    v19.epoch = *(_QWORD *)(a3 + 32);
    v7 = *(_OWORD *)(a3 + 56);
    v16 = *(_OWORD *)(a3 + 40);
    v17 = v7;
    v18 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v19.value = v6;
LABEL_10:
    v15 = fcd_ttml_createDynamicStyleFromTTML(Value, a2, &v19, (CMTime *)&v16, &v21, &v20);
    v11 = v20;
    if (!v15)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 88), v21, v20);
    goto LABEL_12;
  }
  if (!FigCFEqual())
    goto LABEL_14;
  v8 = *(_OWORD *)(a3 + 16);
  v19.epoch = *(_QWORD *)(a3 + 32);
  v9 = *(_OWORD *)(a3 + 56);
  v16 = *(_OWORD *)(a3 + 40);
  v17 = v9;
  v18 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)&v19.value = v8;
  v10 = fcd_ttml_createDynamicStyleFromTTML((uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))fcd_ttml_createWidthRegionPropertyFromTTMLStyle_extent, a2, &v19, (CMTime *)&v16, &v21, &v20);
  v11 = v20;
  if (!v10)
  {
    v12 = v21;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 88), v21, v20);
    if (v12)
    {
      CFRelease(v12);
      v21 = 0;
    }
    if (v11)
    {
      CFRelease(v11);
      v20 = 0;
    }
    v13 = *(_OWORD *)(a3 + 16);
    v19.epoch = *(_QWORD *)(a3 + 32);
    v14 = *(_OWORD *)(a3 + 56);
    v16 = *(_OWORD *)(a3 + 40);
    v17 = v14;
    v18 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v19.value = v13;
    Value = (uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))fcd_ttml_createHeightRegionPropertyFromTTMLStyle_extent;
    goto LABEL_10;
  }
LABEL_12:
  if (v11)
    CFRelease(v11);
LABEL_14:
  if (v21)
    CFRelease(v21);
}

void fcd_ttml_initializeRegionPropertyMappingDictionary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling overflow"), fcd_ttml_createRegionPropertyFromTTMLStyle_overflow);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling showBackground"), fcd_ttml_createRegionPropertyFromTTMLStyle_showBackground);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), fcd_ttml_createRegionPropertyFromTTMLStyle_backgroundColor);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling opacity"), fcd_ttml_createRegionPropertyFromTTMLStyle_opacity);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay"), fcd_ttml_createRegionPropertyFromTTMLStyle_forcedDisplay);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling displayAlign"), fcd_ttml_createRegionPropertyFromTTMLStyle_displayAlign);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling display"), fcd_ttml_createRegionPropertyFromTTMLStyle_display);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling visibility"), fcd_ttml_createRegionPropertyFromTTMLStyle_visibility);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling writingMode"), fcd_ttml_createRegionPropertyFromTTMLStyle_writingMode);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling zIndex"), fcd_ttml_createRegionPropertyFromTTMLStyle_zIndex);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling padding"), fcd_ttml_createRegionPropertyFromTTMLStyle_padding);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling origin"), fcd_ttml_createRegionPropertyFromTTMLStyle_origin);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling position"), fcd_ttml_createRegionPropertyFromTTMLStyle_position);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling luminanceGain"), fcd_ttml_createRegionPropertyFromTTMLStyle_luminanceGain);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling disparity"), fcd_ttml_createRegionPropertyFromTTMLStyle_stereoDisparity);
  sRegionPropertyMappingDictionary = (uint64_t)Mutable;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_overflow(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA33F8];
  if (CFEqual(a1, CFSTR("hidden")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("visible")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_showBackground(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA34A0];
  if (CFEqual(a1, CFSTR("always")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA34C8];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("whenActive")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA34D0];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_backgroundColor(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA33E8];
  v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
  *a3 = v7;
  if (v7)
    return 0;
  else
    return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_opacity(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  __CFString *MutableCopy;
  const char *CStringPtrAndBufferToFree;
  char *v9;
  uint64_t Float32;
  uint64_t v11;
  char *v13;
  void *v14;

  v14 = 0;
  if (a1 && (v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E0CA3480];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
    CFStringTrimWhitespace(MutableCopy);
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    v9 = (char *)&CStringPtrAndBufferToFree[strlen(CStringPtrAndBufferToFree)];
    v13 = v9;
    strtof(CStringPtrAndBufferToFree, &v13);
    if (v9 == v13)
    {
      Float32 = FigCFNumberCreateFloat32();
      *a3 = Float32;
    }
    else
    {
      Float32 = *a3;
    }
    if (Float32)
      v11 = 0;
    else
      v11 = 4294950720;
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  free(v14);
  return v11;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_forcedDisplay(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3420];
  if (CFEqual(a1, CFSTR("true")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("false")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_displayAlign(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3408];
  if (CFEqual(a1, CFSTR("after")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3390];
LABEL_9:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("before")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA3398];
    goto LABEL_9;
  }
  if (CFEqual(a1, CFSTR("center")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA33A0];
    goto LABEL_9;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_display(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3430];
  if (CFEqual(a1, CFSTR("auto")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("none")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_visibility(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA3470];
  if (CFEqual(a1, CFSTR("visible")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
LABEL_7:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("hidden")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
    goto LABEL_7;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_writingMode(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  *a2 = *MEMORY[0x1E0CA34B8];
  if (CFEqual(a1, CFSTR("lrtb")))
  {
LABEL_4:
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA34D8];
LABEL_11:
    *a3 = *v8;
    return result;
  }
  if (CFEqual(a1, CFSTR("rltb")))
  {
LABEL_6:
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA34E0];
    goto LABEL_11;
  }
  if (CFEqual(a1, CFSTR("tbrl")))
    goto LABEL_8;
  if (CFEqual(a1, CFSTR("tblr")))
  {
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA34E8];
    goto LABEL_11;
  }
  if (CFEqual(a1, CFSTR("lr")))
    goto LABEL_4;
  if (CFEqual(a1, CFSTR("rl")))
    goto LABEL_6;
  if (CFEqual(a1, CFSTR("tb")))
  {
LABEL_8:
    result = 0;
    v8 = (_QWORD *)MEMORY[0x1E0CA34F0];
    goto LABEL_11;
  }
  return 4294950720;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_zIndex(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  __CFString *MutableCopy;
  const char *CStringPtrAndBufferToFree;
  char *v9;
  int v10;
  uint64_t v11;
  char *v13;
  void *v14;

  v14 = 0;
  if (a1 && (v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E0CA34C0];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
    CFStringTrimWhitespace(MutableCopy);
    if (CFEqual(MutableCopy, CFSTR("auto"))
      || (CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree(),
          v9 = (char *)&CStringPtrAndBufferToFree[strlen(CStringPtrAndBufferToFree)],
          v13 = v9,
          v10 = strtol(CStringPtrAndBufferToFree, &v13, 10),
          v11 = 4294950720,
          v9 == v13)
      && (v10 & 0x80000000) == 0)
    {
      v11 = 0;
      *a3 = FigCFNumberCreateSInt32();
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  free(v14);
  return v11;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_padding(const void *a1, _QWORD *a2, __CFDictionary **a3)
{
  __CFDictionary *Mutable;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFString *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  const __CFString *v29;
  uint64_t v30;
  const __CFString *v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  __CFDictionary **v39;
  const __CFArray *cf;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a1 || (v7 = CFGetTypeID(a1), v7 != CFStringGetTypeID()))
  {
    v37 = FigSignalErrorAt();
    if (!Mutable)
      return v37;
    goto LABEL_25;
  }
  v8 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
  v39 = a3;
  cf = v8;
  switch(CFArrayGetCount(v8))
  {
    case 1:
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(ValueAtIndex);
      v11 = v10;
      v12 = v10;
      v13 = v10;
      v14 = v10;
      break;
    case 2:
      v15 = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(v15);
      v13 = v16;
      v17 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
      FigTTMLParseLengthSyntax(v17);
      v11 = v18;
      v12 = v18;
      v14 = v13;
      break;
    case 3:
      v19 = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(v19);
      v14 = v20;
      v21 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
      FigTTMLParseLengthSyntax(v21);
      v11 = v22;
      v23 = (const __CFString *)CFArrayGetValueAtIndex(v8, 2);
      FigTTMLParseLengthSyntax(v23);
      v13 = v24;
      v12 = v11;
      break;
    case 4:
      v25 = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(v25);
      v14 = v26;
      v27 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
      FigTTMLParseLengthSyntax(v27);
      v11 = v28;
      v29 = (const __CFString *)CFArrayGetValueAtIndex(v8, 2);
      FigTTMLParseLengthSyntax(v29);
      v13 = v30;
      v31 = (const __CFString *)CFArrayGetValueAtIndex(v8, 3);
      FigTTMLParseLengthSyntax(v31);
      v12 = v32;
      break;
    default:
      v11 = *(_QWORD *)(MEMORY[0x1E0CA4AC8] + 8);
      v12 = v11;
      v13 = v11;
      v14 = v11;
      break;
  }
  if ((v14 & 0x100000000) != 0
    && (v13 & 0x100000000) != 0
    && (v11 & 0x100000000) != 0
    && (v12 & 0x100000000) != 0)
  {
    v33 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA33B0], v33);
    if (v33)
      CFRelease(v33);
    v34 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA33A8], v34);
    if (v34)
      CFRelease(v34);
    v35 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA33C0], v35);
    if (v35)
      CFRelease(v35);
    v36 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA33B8], v36);
    v37 = 0;
    *a2 = *MEMORY[0x1E0CA3488];
    *v39 = Mutable;
    Mutable = 0;
  }
  else
  {
    v37 = FigSignalErrorAt();
    v36 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
  if (Mutable)
LABEL_25:
    CFRelease(Mutable);
  return v37;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_origin(const void *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  const __CFArray *v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFString *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v7 = 0;
        v8 = *(_QWORD *)(MEMORY[0x1E0CA4AD0] + 8);
        if ((v8 & 0x100000000) == 0)
          goto LABEL_13;
      }
      else
      {
        v9 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
        v7 = v9;
        if (!v9)
          goto LABEL_13;
        if (CFArrayGetCount(v9) != 2)
          goto LABEL_13;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0);
        FigTTMLParseLengthSyntax(ValueAtIndex);
        v12 = v11;
        v13 = (const __CFString *)CFArrayGetValueAtIndex(v7, 1);
        FigTTMLParseLengthSyntax(v13);
        v8 = v14;
        if ((v12 & 0x100000000) == 0)
          goto LABEL_13;
      }
      if ((v8 & 0x100000000) != 0)
      {
        FigGeometryPointMake();
        v15 = FigGeometryPointCopyAsDictionary();
        v16 = 0;
        *a2 = *MEMORY[0x1E0CA3490];
        *a3 = v15;
        if (!v7)
          return v16;
LABEL_11:
        CFRelease(v7);
        return v16;
      }
LABEL_13:
      v16 = FigSignalErrorAt();
      if (!v7)
        return v16;
      goto LABEL_11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_position(const void *a1, _QWORD *a2, _QWORD *a3)
{
  CFTypeID v6;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return FigSignalErrorAt();
  result = FigTTMLParsePositionSyntaxAndCreateCaptionPosition((uint64_t)a1, a3);
  if (!(_DWORD)result)
    *a2 = *MEMORY[0x1E0CA33C8];
  return result;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_luminanceGain(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  CFMutableStringRef MutableCopy;
  uint64_t v8;
  uint64_t v9;
  float v11;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      *a2 = *MEMORY[0x1E0CA3478];
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
      CFStringTrimWhitespace(MutableCopy);
      v11 = -1.0;
      v8 = FigTTMLParseNumber(MutableCopy, &v11);
      if ((_DWORD)v8)
      {
        v9 = v8;
        if (!MutableCopy)
          return v9;
      }
      else if (v11 >= 0.0)
      {
        v9 = 0;
        *a3 = FigCFNumberCreateFloat32();
        if (!MutableCopy)
          return v9;
      }
      else
      {
        v9 = 4294950720;
        if (!MutableCopy)
          return v9;
      }
      CFRelease(MutableCopy);
      return v9;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_stereoDisparity(const __CFString *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  __CFString *MutableCopy;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      *a2 = *MEMORY[0x1E0CA34A8];
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
      CFStringTrimWhitespace(MutableCopy);
      v8 = FigTTMLParseLength(a1, (float *)&v11 + 1, (int *)&v11);
      if ((_DWORD)v8 || v11 >= 6 && (v8 = FigSignalErrorAt(), (_DWORD)v8))
      {
        v9 = v8;
        if (!MutableCopy)
          return v9;
      }
      else
      {
        FigGeometryDimensionMake();
        v9 = 0;
        *a3 = FigGeometryDimensionCopyAsDictionary();
        if (!MutableCopy)
          return v9;
      }
      CFRelease(MutableCopy);
      return v9;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createWidthRegionPropertyFromTTMLStyle_extent(const void *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  const __CFArray *v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFString *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        FigGeometryDimensionMake();
        v7 = 0;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v9 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
        v7 = v9;
        if (!v9
          || CFArrayGetCount(v9) != 2
          || (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0),
              FigTTMLParseLengthSyntax(ValueAtIndex),
              (v11 & 0x100000000) == 0))
        {
LABEL_12:
          v12 = FigSignalErrorAt();
          if (!v7)
            return v12;
          goto LABEL_10;
        }
      }
      *a2 = *MEMORY[0x1E0CA34B0];
      v12 = 0;
      *a3 = FigGeometryDimensionCopyAsDictionary();
      if (!v7)
        return v12;
LABEL_10:
      CFRelease(v7);
      return v12;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createHeightRegionPropertyFromTTMLStyle_extent(const void *a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeID v6;
  const __CFArray *v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFString *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        FigGeometryDimensionMake();
        v7 = 0;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v9 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
        v7 = v9;
        if (!v9
          || CFArrayGetCount(v9) != 2
          || (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 1),
              FigTTMLParseLengthSyntax(ValueAtIndex),
              (v11 & 0x100000000) == 0))
        {
LABEL_12:
          v12 = FigSignalErrorAt();
          if (!v7)
            return v12;
          goto LABEL_10;
        }
      }
      *a2 = *MEMORY[0x1E0CA3428];
      v12 = 0;
      *a3 = FigGeometryDimensionCopyAsDictionary();
      if (!v7)
        return v12;
LABEL_10:
      CFRelease(v7);
      return v12;
    }
  }
  return FigSignalErrorAt();
}

const __CFString *fcd_ttml_GetCaptionText(const void *a1)
{
  uint64_t DerivedStorage;
  int IsLoaded;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  if (a1)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  if (IsLoaded)
    return &stru_1E2FD85F8;
  v4 = *(_QWORD *)(DerivedStorage + 16);
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
    return &stru_1E2FD85F8;
  else
    return (const __CFString *)v5(v4);
}

uint64_t fcd_ttml_CopyStylePropertyAtIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5, _OWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t IsLoaded;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, __int128 *);
  uint64_t v16;
  __int128 v18;
  CFTypeRef cf;

  if (a1)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  cf = 0;
  v18 = 0uLL;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  if (!(_DWORD)IsLoaded)
  {
    v14 = *(_QWORD *)(DerivedStorage + 16);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 24);
    if (v15)
    {
      v16 = v15(v14, a2, a3, a4, &cf, &v18);
      if ((_DWORD)v16)
      {
        IsLoaded = v16;
      }
      else
      {
        if (a5)
        {
          *a5 = cf;
          cf = 0;
        }
        IsLoaded = 0;
        if (a6)
          *a6 = v18;
      }
    }
    else
    {
      IsLoaded = 4294954514;
    }
  }
  if (cf)
    CFRelease(cf);
  return IsLoaded;
}

uint64_t FigMediaProcessorCreateForAudioCompressionCommon(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, const void *a8, unsigned int a9, uint64_t a10, __int128 *a11, uint64_t a12, const void *a13, int a14, uint64_t *a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  CFTypeRef cf;
  CFTypeRef v29;
  CFTypeRef v30;
  const void *v31;

  v30 = 0;
  v31 = 0;
  cf = 0;
  v29 = 0;
  v18 = *MEMORY[0x1E0C9AE00];
  v19 = FigSampleBufferProcessorCreateWithAudioCompression(a1, a2, a3, a4, a5, a6, (const void *)*MEMORY[0x1E0C9AE00], &v31);
  if ((_DWORD)v19)
    goto LABEL_12;
  v20 = FigSampleBufferProviderCreateForBufferQueue(v18, a7, &v30);
  if (!(_DWORD)v20)
  {
    v26 = *a11;
    v27 = *((_QWORD *)a11 + 2);
    v24 = *(_OWORD *)a12;
    v25 = *(_QWORD *)(a12 + 16);
    v21 = a8
        ? FigSampleBufferConsumerCreateForFormatWriter(a8, a9, (uint64_t)&v26, &v24, &v29)
        : FigSampleBufferConsumerCreateForBufferQueue(a10, (uint64_t)&v26, (uint64_t)&v24, &v29);
    v20 = v21;
    if (!(_DWORD)v21)
    {
      v22 = a13
          ? FigActivitySchedulerCreateForCFRunLoop(a1, a13, &cf)
          : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a14, CFSTR("com.apple.coremedia.mediaprocessor.audiocompression"), &cf);
      v20 = v22;
      if (!(_DWORD)v22)
      {
        v19 = FigMediaProcessorCreate((uint64_t)a1, v31, v30, v29, cf, a15);
LABEL_12:
        v20 = v19;
      }
    }
  }
  if (v30)
    CFRelease(v30);
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v29)
    CFRelease(v29);
  return v20;
}

uint64_t FigMediaProcessorCreateForAudioCompression(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, uint64_t a8, uint64_t a9, __int128 *a10, const void *a11, int a12, uint64_t *a13)
{
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v16 = *(_OWORD *)a9;
  v17 = *(_QWORD *)(a9 + 16);
  v14 = *a10;
  v15 = *((_QWORD *)a10 + 2);
  return FigMediaProcessorCreateForAudioCompressionCommon(a1, a2, a3, a4, a5, a6, a7, 0, 0, a8, &v16, (uint64_t)&v14, a11, a12, a13);
}

uint64_t FigMediaProcessorCreateForAudioDecompressionWithBufferQueue(const void *a1, uint64_t a2, size_t a3, const AudioChannelLayout *a4, uint64_t a5, const void *a6, uint64_t a7, __int128 *a8, __int128 *a9, const void *a10, int a11, uint64_t *a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  CFTypeRef cf;
  CFTypeRef v25;
  CFTypeRef v26;
  const void *v27;

  v26 = 0;
  v27 = 0;
  cf = 0;
  v25 = 0;
  v16 = FigSampleBufferProcessorCreateWithAudioDecompression(a1, a2, a3, a4, a5, &v27);
  if ((_DWORD)v16)
    goto LABEL_9;
  v17 = FigSampleBufferProviderCreateForBufferQueue(*MEMORY[0x1E0C9AE00], a6, &v26);
  if (!(_DWORD)v17)
  {
    v22 = *a8;
    v23 = *((_QWORD *)a8 + 2);
    v20 = *a9;
    v21 = *((_QWORD *)a9 + 2);
    v17 = FigSampleBufferConsumerCreateForBufferQueue(a7, (uint64_t)&v22, (uint64_t)&v20, &v25);
    if (!(_DWORD)v17)
    {
      v18 = a10
          ? FigActivitySchedulerCreateForCFRunLoop((const __CFAllocator *)a1, a10, &cf)
          : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a11, CFSTR("com.apple.coremedia.mediaprocessor.audiodecompression"), &cf);
      v17 = v18;
      if (!(_DWORD)v18)
      {
        v16 = FigMediaProcessorCreate((uint64_t)a1, v27, v26, v25, cf, a12);
LABEL_9:
        v17 = v16;
      }
    }
  }
  if (v26)
    CFRelease(v26);
  if (cf)
    CFRelease(cf);
  if (v27)
    CFRelease(v27);
  if (v25)
    CFRelease(v25);
  return v17;
}

uint64_t FigMediaProcessorCreateForVideoCompressionCommon(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, const __CFArray *a8, __int128 *a9, __int128 *a10, const void *a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, int a18, uint64_t *a19)
{
  int v20;
  uint64_t v22;
  CFIndex Count;
  void *ValueAtIndex;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  const __CFAllocator *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CMTime v36;
  CFTypeRef cf;
  const void *v38;
  CFTypeRef v39;
  const void *v40;

  v39 = 0;
  v40 = 0;
  v38 = 0;
  cf = 0;
  if ((a7 == 0) != (a8 != 0))
    return FigSignalErrorAt();
  v20 = a11 != 0;
  if (a13)
    ++v20;
  if (a16)
    ++v20;
  if (v20 != 1)
    return FigSignalErrorAt();
  v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = FigSampleBufferProcessorCreateWithVTCompressionSession(a1, a2, a3, a4, a5, a6, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a18, &v40);
  if ((_DWORD)v22)
    goto LABEL_29;
  if (a7)
  {
    v22 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v32, a7, &v39);
    if ((_DWORD)v22)
      goto LABEL_29;
    goto LABEL_10;
  }
  if (!a8)
    goto LABEL_24;
  Count = CFArrayGetCount(a8);
  if (Count == 1)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a8, 0);
    v26 = *a9;
    v36.epoch = *((_QWORD *)a9 + 2);
    v27 = a10[1];
    v33 = *a10;
    v34 = v27;
    v35 = a10[2];
    *(_OWORD *)&v36.value = v26;
    v22 = FigSampleBufferProviderCreateForVisualContext(v32, ValueAtIndex, (__int128 *)&v36.value, &v33, &v39);
    if ((_DWORD)v22)
      goto LABEL_29;
    goto LABEL_10;
  }
  if (Count < 2)
  {
LABEL_24:
    v22 = FigSignalErrorAt();
    goto LABEL_29;
  }
  v28 = *a9;
  v36.epoch = *((_QWORD *)a9 + 2);
  v29 = a10[1];
  v33 = *a10;
  v34 = v29;
  v35 = a10[2];
  *(_OWORD *)&v36.value = v28;
  v22 = FigSampleBufferProviderCreateForVisualContextGroup(v32, a8, &v36, &v33, &v39);
  if ((_DWORD)v22)
    goto LABEL_29;
LABEL_10:
  if (a11)
  {
    v33 = *(_OWORD *)a14;
    *(_QWORD *)&v34 = *(_QWORD *)(a14 + 16);
    *(_OWORD *)&v36.value = *(_OWORD *)a15;
    v36.epoch = *(_QWORD *)(a15 + 16);
    v22 = FigSampleBufferConsumerCreateForFormatWriter(a11, a12, (uint64_t)&v33, (__int128 *)&v36.value, &v38);
    if ((_DWORD)v22)
      goto LABEL_29;
  }
  else if (a16)
  {
    v22 = FigSampleBufferConsumerCreateForFrameSilo(a16, &v38);
    if ((_DWORD)v22)
      goto LABEL_29;
  }
  else
  {
    v33 = *(_OWORD *)a14;
    *(_QWORD *)&v34 = *(_QWORD *)(a14 + 16);
    *(_OWORD *)&v36.value = *(_OWORD *)a15;
    v36.epoch = *(_QWORD *)(a15 + 16);
    v22 = FigSampleBufferConsumerCreateForBufferQueue(a13, (uint64_t)&v33, (uint64_t)&v36, &v38);
    if ((_DWORD)v22)
      goto LABEL_29;
  }
  if (!a17)
  {
    v22 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, a18, CFSTR("com.apple.coremedia.mediaprocessor.videocompression"), &cf);
    if ((_DWORD)v22)
      goto LABEL_29;
    goto LABEL_28;
  }
  v22 = FigActivitySchedulerCreateForCFRunLoop(a1, a17, &cf);
  if (!(_DWORD)v22)
LABEL_28:
    v22 = FigMediaProcessorCreate((uint64_t)a1, v40, v39, v38, cf, a19);
LABEL_29:
  v30 = v22;
  if (v39)
    CFRelease(v39);
  if (cf)
    CFRelease(cf);
  if (v40)
    CFRelease(v40);
  if (v38)
    CFRelease(v38);
  return v30;
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithVisualContextGroupAndFormatWriter(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFArray *a7, uint64_t a8, __int128 *a9, const void *a10, unsigned int a11, __int128 *a12, __int128 *a13, const void *a14, int a15, uint64_t *a16)
{
  __int128 v16;
  __int128 v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23[3];
  __int128 v24;
  uint64_t v25;

  v16 = *(_OWORD *)a8;
  v25 = *(_QWORD *)(a8 + 16);
  v17 = a9[1];
  v23[0] = *a9;
  v23[1] = v17;
  v23[2] = a9[2];
  v24 = v16;
  v21 = *a12;
  v22 = *((_QWORD *)a12 + 2);
  v19 = *a13;
  v20 = *((_QWORD *)a13 + 2);
  return FigMediaProcessorCreateForVideoCompressionCommon(a1, a2, a3, a4, a5, a6, 0, a7, &v24, v23, a10, a11, 0, (uint64_t)&v21, (uint64_t)&v19, 0, a14, a15, a16);
}

uint64_t FigMediaProcessorCreateForVideoCompression(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, uint64_t a9, __int128 *a10, uint64_t a11, __int128 *a12, __int128 *a13, const void *a14, int a15, uint64_t *a16)
{
  const __CFArray *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31[3];
  __int128 v32;
  uint64_t v33;
  void *values;

  values = a8;
  if (a8)
  {
    v23 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!v23)
      return FigSignalErrorAt();
  }
  else
  {
    v23 = 0;
  }
  v32 = *(_OWORD *)a9;
  v33 = *(_QWORD *)(a9 + 16);
  v25 = a10[1];
  v31[0] = *a10;
  v31[1] = v25;
  v31[2] = a10[2];
  v29 = *a12;
  v30 = *((_QWORD *)a12 + 2);
  v27 = *a13;
  v28 = *((_QWORD *)a13 + 2);
  v24 = FigMediaProcessorCreateForVideoCompressionCommon(a1, a2, a3, a4, a5, a6, a7, v23, &v32, v31, 0, 0, a11, (uint64_t)&v29, (uint64_t)&v27, 0, a14, a15, a16);
  if (v23)
    CFRelease(v23);
  return v24;
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithFrameSilo(CFAllocatorRef allocator, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, uint64_t a9, __int128 *a10, const void *a11, const void *a12, int a13, uint64_t *a14)
{
  const __CFArray *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v25[3];
  __int128 v26;
  uint64_t v27;
  void *values;

  values = a8;
  if (a8)
  {
    v21 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!v21)
      return FigSignalErrorAt();
  }
  else
  {
    v21 = 0;
  }
  v26 = *(_OWORD *)a9;
  v27 = *(_QWORD *)(a9 + 16);
  v23 = a10[1];
  v25[0] = *a10;
  v25[1] = v23;
  v25[2] = a10[2];
  v22 = FigMediaProcessorCreateForVideoCompressionCommon(allocator, a2, a3, a4, a5, a6, a7, v21, &v26, v25, 0, 0, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a11, a12, a13, a14);
  if (v21)
    CFRelease(v21);
  return v22;
}

CVPixelBufferPoolRef FigMediaProcessorGetPixelBufferPool(uint64_t a1)
{
  OpaqueVTCompressionSession *VTCompressionSession;

  FigMediaProcessorGetSampleBufferProcessor(a1);
  VTCompressionSession = (OpaqueVTCompressionSession *)FigSampleBufferProcessorGetVTCompressionSession();
  return VTCompressionSessionGetPixelBufferPool(VTCompressionSession);
}

uint64_t FigRemakerCreateBaseWithURLs(const __CFAllocator *a1, uint64_t a2, const void *a3, const __CFURL *a4, uint64_t a5, const __CFDictionary *a6, const __CFDictionary *a7, _QWORD *a8)
{
  unint64_t v10;
  int v13;
  uint64_t ByteStreamForFile;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v24;
  CFTypeRef cf;
  CFTypeRef v26;

  v10 = (unint64_t)a3;
  v24 = a3;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  FigCFDictionaryGetBooleanIfPresent();
  if (!(a2 | v10) || a2 && !FigCFURLIsLocalResource() || !a8)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_36;
  }
  v13 = 0;
  if (a2 && !v10)
  {
    FigGetDefaultManagedFilePool();
    ByteStreamForFile = FigManagedFilePoolCreateByteStreamForFile();
    if ((_DWORD)ByteStreamForFile)
    {
      v19 = ByteStreamForFile;
      FigSignalErrorAt();
      goto LABEL_37;
    }
    v15 = FigFormatReaderCreateForStream(0, a1, 0, &v24);
    if (!(_DWORD)v15)
    {
      v13 = 1;
      v10 = (unint64_t)v24;
      goto LABEL_10;
    }
LABEL_36:
    v19 = v15;
LABEL_37:
    v13 = 0;
    goto LABEL_23;
  }
LABEL_10:
  cf = 0;
  v26 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (!v10)
  {
    v18 = FigSignalErrorAt();
LABEL_29:
    v19 = v18;
    goto LABEL_32;
  }
  if (a7)
  {
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v16 == CFDictionaryGetValue(a7, CFSTR("Remaker_SecurityPolicyForbidLocalToLocal")))
      v17 = 33;
    else
      v17 = 1;
  }
  else
  {
    v17 = 1;
  }
  v18 = FigAssetCreateWithFormatReader((uint64_t)a1, (const void *)v10, v17, 0, &cf);
  if ((_DWORD)v18)
    goto LABEL_29;
  v19 = FigRemakerCreateWithAsset(a1, cf, a4, a6, a7, &v26);
  v20 = v26;
  if ((_DWORD)v19)
  {
    if (!v26)
      goto LABEL_19;
    CFRelease(v26);
LABEL_32:
    v20 = 0;
    goto LABEL_19;
  }
  v26 = 0;
LABEL_19:
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v19)
  {
    if (v20)
      CFRelease(v20);
  }
  else
  {
    *a8 = v20;
  }
LABEL_23:
  if (v13 && v24)
    CFRelease(v24);
  return v19;
}

uint64_t FigRemakerCreateWithURLs(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, uint64_t a15, const __CFURL *a16, const __CFDictionary *a17, const __CFDictionary *a18, _DWORD *a19, _DWORD *a20,_QWORD *a21)
{
  uint64_t v27;
  CFTypeRef v28;
  __int128 v29;
  uint64_t (*v30)(CFTypeRef, CMTimeRange *, CMTime *);
  CFTypeRef v31;
  uint64_t (*v32)(CFTypeRef, uint64_t *);
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, char *);
  uint64_t v35;
  uint64_t v36;
  CFTypeRef v37;
  uint64_t (*v38)(CFTypeRef, uint64_t, uint64_t, uint64_t, _DWORD *);
  CFTypeRef v39;
  uint64_t (*v40)(CFTypeRef, uint64_t, __int128 *);
  uint64_t v41;
  CFTypeRef v42;
  uint64_t (*v43)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTimeRange *, __int128 *);
  __int128 v45;
  CMTimeEpoch v46;
  CMTimeRange range;
  CMTime v48;
  uint64_t v49;
  CFTypeRef v50;
  CMTime v51;

  v49 = 0;
  v50 = 0;
  if (a19)
    *a19 = 0;
  if (a20)
    *a20 = 0;
  v27 = FigRemakerCreateBaseWithURLs(a1, a2, 0, a16, a5, a17, a18, &v50);
  if ((_DWORD)v27)
    goto LABEL_38;
  v28 = v50;
  v29 = a14[1];
  *(_OWORD *)&range.start.value = *a14;
  *(_OWORD *)&range.start.epoch = v29;
  *(_OWORD *)&range.duration.timescale = a14[2];
  CMTimeRangeGetEnd(&v48, &range);
  v45 = *a14;
  v46 = *((_QWORD *)a14 + 2);
  v30 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v30)
    goto LABEL_31;
  *(_OWORD *)&range.start.value = v45;
  range.start.epoch = v46;
  v51 = v48;
  v27 = v30(v28, &range, &v51);
  if ((_DWORD)v27)
    goto LABEL_38;
  v31 = v50;
  v32 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v32)
    goto LABEL_31;
  v27 = v32(v31, &v49);
  if ((_DWORD)v27)
    goto LABEL_38;
  v33 = v50;
  v34 = *(uint64_t (**)(CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v34)
    goto LABEL_31;
  v27 = v34(v33, (char *)&v49 + 4);
  if ((_DWORD)v27)
    goto LABEL_38;
  v36 = v49;
  v35 = HIDWORD(v49);
  if (!v49)
  {
    v27 = FigSignalErrorAt();
    goto LABEL_38;
  }
  if (!(_DWORD)v49)
    goto LABEL_17;
  v37 = v50;
  v38 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 88);
  if (!v38)
    goto LABEL_31;
  v27 = v38(v37, v36, a3, a4, a19);
  if ((_DWORD)v27)
  {
LABEL_38:
    v35 = v27;
    goto LABEL_32;
  }
  v35 = HIDWORD(v49);
LABEL_17:
  if (!(_DWORD)v35)
  {
LABEL_30:
    *a21 = v50;
    return v35;
  }
  LODWORD(v45) = 0;
  if (!(_DWORD)a8)
  {
    v39 = v50;
    v40 = *(uint64_t (**)(CFTypeRef, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v40)
    {
      v41 = v40(v39, v35, &v45);
      goto LABEL_26;
    }
LABEL_31:
    v35 = 4294954514;
    goto LABEL_32;
  }
  if ((_DWORD)a8 == 1851876449)
  {
    if (!a20)
      goto LABEL_29;
    goto LABEL_28;
  }
  v42 = v50;
  *(_OWORD *)&v51.value = *(_OWORD *)a13;
  v51.epoch = *(_QWORD *)(a13 + 16);
  v43 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTimeRange *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v43)
    goto LABEL_31;
  range.start = v51;
  v41 = v43(v42, v35, a5, a6, a7, a8, a9, a10, a11, a12, &range, &v45);
LABEL_26:
  v35 = v41;
  if (a20 && !(_DWORD)v41)
  {
LABEL_28:
    *a20 = v45;
LABEL_29:
    v35 = 0;
    goto LABEL_30;
  }
  if (!(4 * ((_DWORD)v41 != 0)))
    goto LABEL_30;
LABEL_32:
  if (v50)
    CFRelease(v50);
  return v35;
}

uint64_t FigRemakerCreateWithAsset(const __CFAllocator *a1, const void *a2, const __CFURL *a3, const __CFDictionary *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  int IsServerProcess;
  void *v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v14;
  uint64_t LoggingIdentifier;
  const void *Value;
  CFTypeID v17;
  const char *CStringPtrAndBufferToFree;
  CFStringRef v19;
  const char *v20;
  const void *v21;
  uint64_t v22;
  CFTypeID v23;
  uint64_t TypeID;
  uint64_t v25;
  uint64_t Storage;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  int v30;
  uint64_t v32;
  const void *v33;
  const void *v34;
  CFTypeID v35;
  CFMutableArrayRef Mutable;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, const __CFString *, uint64_t, char *);
  CFNumberRef v41;
  uint64_t FigBaseObject;
  void (*v43)(uint64_t, const __CFString *, CFNumberRef);
  void *valuePtr;
  CFTypeRef cf;
  CFTypeRef v49;
  CFTypeRef v50;
  char __str[8];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v50 = 0;
  cf = 0;
  IsServerProcess = FigServer_IsServerProcess();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (IsServerProcess)
  {
    v11 = (void *)FigOSTransactionCreate();
    if (!v11)
    {
      v25 = FigSignalErrorAt();
      goto LABEL_56;
    }
    if (!a2)
      goto LABEL_69;
  }
  else
  {
    v11 = 0;
    if (!a2)
      goto LABEL_69;
  }
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v13)
  {
    v25 = 4294954514;
    goto LABEL_54;
  }
  v14 = *MEMORY[0x1E0C9AE00];
  LoggingIdentifier = v13(CMBaseObject, CFSTR("assetProperty_CreationURL"), *MEMORY[0x1E0C9AE00], &v49);
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_70;
  if (v49)
  {
    __str[0] = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if (!__str[0] && !FigCFURLIsLocalResource())
      goto LABEL_69;
  }
  if (!a3 || !remakerFamily_CFURLSchemeIsFile(a3))
    goto LABEL_69;
  Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
  {
    v17 = CFGetTypeID(Value);
    if (v17 != CFStringGetTypeID())
    {
      v25 = 4294955174;
      goto LABEL_54;
    }
    valuePtr = 0;
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    v19 = CFURLCopyPathExtension(a3);
    v20 = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    snprintf(__str, 0x80uLL, "-%s.%s", CStringPtrAndBufferToFree, v20);
    free(0);
    free(0);
    if (v19)
      CFRelease(v19);
    v21 = (const void *)FigCFDictionaryGetValue();
    v22 = (uint64_t)v21;
    if (v21)
    {
      v23 = CFGetTypeID(v21);
      if (v23 != CFURLGetTypeID())
        goto LABEL_69;
    }
    TypeID = FigRemakerGetTypeID();
    LoggingIdentifier = remakerFamily_createTempFile(TypeID, v22, a3, __str, 0, &cf);
    if ((_DWORD)LoggingIdentifier)
      goto LABEL_70;
  }
  else if (FigFileDoesFileExist())
  {
    goto LABEL_69;
  }
  if (!a6)
    goto LABEL_69;
  FigRemakerGetClassID();
  LoggingIdentifier = CMDerivedObjectCreate();
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_70;
  Storage = remakerFamily_getStorage(v50);
  LoggingIdentifier = remakerFamily_generateLoggingIdentifier(69, (char *)(Storage + 41));
  if ((_DWORD)LoggingIdentifier)
    goto LABEL_70;
  v27 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(Storage + 88) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(Storage + 104) = *(_QWORD *)(v27 + 16);
  v28 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)(Storage + 112) = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(Storage + 128) = *(_QWORD *)(v28 + 16);
  *(_DWORD *)(Storage + 456) = -1;
  *(_QWORD *)(Storage + 8) = FigReentrantMutexCreate();
  *(_QWORD *)(Storage + 64) = FigReentrantMutexCreate();
  remakerFamily_initializePowerLog((uint64_t)v50);
  remakerFamily_SetRemakerState((uint64_t)v50, 1, 0);
  *(_QWORD *)(Storage + 72) = CFRetain(a2);
  if (cf)
    v29 = cf;
  else
    v29 = a3;
  *(_QWORD *)(Storage + 160) = CFRetain(v29);
  if (IsServerProcess)
  {
    *(_QWORD *)(Storage + 448) = v11;
    v11 = 0;
  }
  v30 = CMByteStreamCreateForFileURL();
  if (v30 != -12204 && v30 != 0)
    v30 = -12115;
  if (v30)
    goto LABEL_69;
  v32 = FigDispatchQueueCreateWithPriorityAndClientPID();
  *(_QWORD *)(Storage + 56) = v32;
  if (!v32)
    FigSignalErrorAt();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (!a5)
    goto LABEL_44;
  v33 = CFDictionaryGetValue(a5, CFSTR("Remaker_TemporaryDirectoryURL"));
  if (!v33)
  {
LABEL_43:
    *(_QWORD *)(Storage + 232) = v33;
LABEL_44:
    *(_DWORD *)(Storage + 360) = -1;
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(Storage + 80) = Mutable;
    if (Mutable)
    {
      LoggingIdentifier = remakerFamily_createFormatWriter(v50, a1, 0, 0, a4, (CFTypeRef *)(Storage + 184));
      if (!(_DWORD)LoggingIdentifier)
      {
        *(_QWORD *)(Storage + 192) = FigCFWeakReferenceHolderCreateWithReferencedObject();
        CMNotificationCenterGetDefaultLocalCenter();
        LoggingIdentifier = FigNotificationCenterAddWeakListeners();
        if (!(_DWORD)LoggingIdentifier)
        {
          v37 = *(_QWORD *)(Storage + 72);
          v38 = *(_QWORD *)(Storage + 184);
          *(_QWORD *)__str = 0;
          LODWORD(valuePtr) = 0;
          v39 = FigAssetGetCMBaseObject(v37);
          v40 = *(void (**)(uint64_t, const __CFString *, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (v40)
          {
            v40(v39, CFSTR("NaturalTimeScale"), v14, __str);
            if (*(_QWORD *)__str)
            {
              CFNumberGetValue(*(CFNumberRef *)__str, kCFNumberSInt32Type, &valuePtr);
              if ((int)valuePtr >= 1)
              {
                v41 = *(CFNumberRef *)__str;
                FigBaseObject = FigFormatWriterGetFigBaseObject(v38);
                v43 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
                if (v43)
                  v43(FigBaseObject, CFSTR("MovieTimeScale"), v41);
              }
              CFRelease(*(CFTypeRef *)__str);
            }
          }
          v25 = 0;
          *a6 = v50;
          v50 = 0;
          goto LABEL_54;
        }
      }
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  v34 = v33;
  v35 = CFGetTypeID(v33);
  if (v35 == CFURLGetTypeID())
  {
    v33 = CFRetain(v34);
    goto LABEL_43;
  }
LABEL_69:
  LoggingIdentifier = FigSignalErrorAt();
LABEL_70:
  v25 = LoggingIdentifier;
LABEL_54:
  if (v11)
    os_release(v11);
LABEL_56:
  if (cf)
    CFRelease(cf);
  if (v49)
    CFRelease(v49);
  if (v50)
    CFRelease(v50);
  return v25;
}

BOOL FigRemakerCanFileTypeSupportMediaType(const void *a1, int a2, int a3)
{
  if (remakerFamily_useAudioFormatWriterGivenFormatWriterOption((unint64_t)a1))
    return FigAudioFileFormatWriterCanFileTypeSupportMediaType((uint64_t)a1, a2);
  else
    return FigMovieFormatWriterCanFileTypeSupportMediaType(a1, a2, a3);
}

uint64_t FigRemakerCanFileTypeSupportFormatDescription(const void *a1, const opaqueCMFormatDescription *a2, int a3)
{
  if (remakerFamily_useAudioFormatWriterGivenFormatWriterOption((unint64_t)a1))
    return FigAudioFileFormatWriterCanFileTypeSupportFormatDescription((uint64_t)a1, a2);
  else
    return FigMovieFormatWriterCanFileTypeSupportFormatDescription(a1, a2, a3);
}

uint64_t remaker_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _DWORD *Storage;
  _DWORD *v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v13;
  uint64_t v14;
  uint64_t ExpectedDuration;
  float v16;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  double Seconds;
  uint64_t v20;
  const __CFAllocator *v21;
  float *p_valuePtr;
  CFNumberType v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, _QWORD, CMTime *);
  uint64_t ProgressOfCurrentPass;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, _QWORD, CMTime *);
  char v32;
  uint64_t v33;
  CFIndex Count;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  char v38;
  float v39;
  const void *ValueAtIndex;
  OpaqueVTFrameSilo *v41;
  int v42;
  double v43;
  float v44;
  float v45;
  float v46;
  uint64_t v48;
  CFIndex v49;
  float v50;
  CFIndex v51;
  CFIndex v52;
  float v53;
  void *v54;
  CFTypeRef *v55;
  int v56;
  float valuePtr;
  CMTime time2;
  CMTime time1;
  CMTime v60;
  CMTime v61;
  CFDictionaryRef dictionaryRepresentation;

  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage < 7u)
  {
    v9 = Storage;
    if (CFEqual(a2, CFSTR("Remaker_SourceDuration")))
    {
      CMBaseObject = FigAssetGetCMBaseObject(*((_QWORD *)v9 + 9));
      v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v11)
        return v11(CMBaseObject, CFSTR("Duration"), a3, a4);
      return 4294954514;
    }
    if (!CFEqual(a2, CFSTR("Remaker_Progress")))
    {
      if (CFEqual(a2, CFSTR("Remaker_MaxFileSize")))
      {
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        p_valuePtr = (float *)(v9 + 36);
        v23 = kCFNumberSInt64Type;
      }
      else
      {
        if (!CFEqual(a2, CFSTR("Remaker_ClientPID")))
        {
          if (CFEqual(a2, CFSTR("Remaker_ThrottleForBackground")))
          {
            v55 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
            v56 = *((unsigned __int8 *)v9 + 40);
          }
          else
          {
            if (CFEqual(a2, CFSTR("Remaker_IOPolicy")))
            {
              v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              p_valuePtr = (float *)(v9 + 114);
              v23 = kCFNumberIntType;
              goto LABEL_60;
            }
            if (CFEqual(a2, CFSTR("Remaker_MaximizePowerEfficiency")))
            {
              v55 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
              v56 = *((unsigned __int8 *)v9 + 424);
            }
            else
            {
              if (!CFEqual(a2, CFSTR("Remaker_RealTime")))
                return 4294954512;
              v55 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
              v56 = *((unsigned __int8 *)v9 + 32);
            }
          }
          if (!v56)
            v55 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          v54 = (void *)CFRetain(*v55);
          goto LABEL_61;
        }
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        p_valuePtr = (float *)(v9 + 9);
        v23 = kCFNumberSInt32Type;
      }
LABEL_60:
      v54 = CFNumberCreate(v21, v23, p_valuePtr);
LABEL_61:
      v20 = 0;
      *a4 = v54;
      return v20;
    }
    valuePtr = 0.0;
    v13 = remakerFamily_getStorage(a1);
    if (*(_DWORD *)v13 < 3u || !*(_QWORD *)(v13 + 72) || !*(_QWORD *)(v13 + 184))
    {
      v20 = FigSignalErrorAt();
      if ((_DWORD)v20)
        return v20;
      goto LABEL_59;
    }
    v14 = remakerFamily_getStorage(a1);
    dictionaryRepresentation = 0;
    v61 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v60 = v61;
    ExpectedDuration = remakerFamily_getExpectedDuration(a1, &v60);
    v16 = 0.0;
    if ((_DWORD)ExpectedDuration)
      goto LABEL_78;
    FigBaseObject = FigFormatWriterGetFigBaseObject(*(_QWORD *)(v14 + 184));
    v18 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (!v18)
    {
      v20 = 4294954514;
      goto LABEL_17;
    }
    ExpectedDuration = v18(FigBaseObject, CFSTR("LongestMediaDecodeDuration"), a3, &dictionaryRepresentation);
    if ((_DWORD)ExpectedDuration)
    {
LABEL_78:
      v20 = ExpectedDuration;
    }
    else
    {
      CMTimeMakeFromDictionary(&v61, dictionaryRepresentation);
      time1 = v60;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&time1, &time2))
      {
        time1 = v61;
        Seconds = CMTimeGetSeconds(&time1);
        time1 = v60;
        v20 = 0;
        v16 = Seconds / CMTimeGetSeconds(&time1);
      }
      else
      {
        v20 = 0;
      }
    }
LABEL_17:
    if (dictionaryRepresentation)
      CFRelease(dictionaryRepresentation);
    if ((_DWORD)v20)
      return v20;
    v24 = remakerFamily_getStorage(a1);
    v25 = 0.0;
    if (!*(_BYTE *)(v24 + 240))
      goto LABEL_30;
    v26 = v24;
    v27 = *(_QWORD *)(v24 + 216);
    if (!v27 || !*(_QWORD *)(v24 + 168))
      goto LABEL_30;
    v61.value = 0;
    v60.value = 0;
    v28 = *(uint64_t (**)(uint64_t, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v28)
    {
      ProgressOfCurrentPass = v28(v27, 0, &v61);
      if ((_DWORD)ProgressOfCurrentPass)
        return ProgressOfCurrentPass;
      v30 = *(_QWORD *)(v26 + 168);
      v31 = *(uint64_t (**)(uint64_t, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v31)
      {
        ProgressOfCurrentPass = v31(v30, 0, &v60);
        if (!(_DWORD)ProgressOfCurrentPass)
        {
          if (v61.value >= 1)
          {
            v32 = 0;
            v25 = (float)v60.value / (float)v61.value;
LABEL_31:
            v33 = remakerFamily_getStorage(a1);
            Count = CFArrayGetCount(*(CFArrayRef *)(v33 + 80));
            v35 = Count - 1;
            if (Count >= 1)
            {
              v36 = Count;
              v37 = 0;
              v38 = 1;
              v39 = 0.0;
              do
              {
                while (1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 80), v37);
                  v41 = (OpaqueVTFrameSilo *)*((_QWORD *)ValueAtIndex + 46);
                  if (!v41)
                    break;
                  LODWORD(v61.value) = 0;
                  ProgressOfCurrentPass = VTFrameSiloGetProgressOfCurrentPass(v41, (Float32 *)&v61);
                  if ((_DWORD)ProgressOfCurrentPass)
                    return ProgressOfCurrentPass;
                  v42 = *((_DWORD *)ValueAtIndex + 109);
                  v43 = 1.0 - exp2f(-(float)(v42 - 1));
                  v44 = *(float *)&v61.value;
                  v45 = exp2f(-(float)v42);
                  v38 = 0;
                  v46 = v43 + (float)(v44 * v45);
                  if (v39 < v46)
                    v39 = v46;
                  if (v35 == v37++)
                    goto LABEL_45;
                }
                if (v39 < 0.0)
                  v39 = 0.0;
                ++v37;
              }
              while (v36 != v37);
              if ((v38 & 1) != 0)
                goto LABEL_46;
LABEL_45:
              v16 = v39 + (1.0 - v39) * v16;
            }
LABEL_46:
            if ((v32 & 1) == 0)
            {
              v48 = remakerFamily_getStorage(a1);
              v49 = CFArrayGetCount(*(CFArrayRef *)(v48 + 80));
              v50 = 0.5;
              if (v49 >= 1)
              {
                v51 = v49;
                v52 = 0;
                while (*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v48 + 80), v52) + 48))
                {
                  if (v51 == ++v52)
                    goto LABEL_55;
                }
                v50 = 0.1;
              }
LABEL_55:
              v16 = (float)(v25 * v50) + v16 * (1.0 - v50);
            }
            v53 = 0.0;
            if (v16 >= 0.0)
              v53 = v16;
            valuePtr = fminf(v53, 1.0);
LABEL_59:
            v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            p_valuePtr = &valuePtr;
            v23 = kCFNumberFloat32Type;
            goto LABEL_60;
          }
LABEL_30:
          v32 = 1;
          goto LABEL_31;
        }
        return ProgressOfCurrentPass;
      }
    }
    return 4294954514;
  }
  return FigSignalErrorAt();
}

uint64_t remaker_SetProperty(const void *a1, const void *a2, const void *a3)
{
  _DWORD *Storage;
  _DWORD *v7;
  CFTypeID v8;
  const void *v9;
  uint64_t result;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  uint64_t v15;
  CFTypeID v16;
  const void *v17;
  CFArrayRef Copy;
  CFTypeID v19;
  const void *v20;
  CFDictionaryRef v21;
  CFTypeID v22;
  Boolean Value;
  CFTypeID v24;
  Boolean v25;
  uint64_t valuePtr;

  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage >= 7u)
    return FigSignalErrorAt();
  v7 = Storage;
  if (CFEqual(a2, CFSTR("Remaker_ClientSecTask")))
  {
    if (a3)
    {
      v8 = CFGetTypeID(a3);
      if (v8 == SecTaskGetTypeID())
      {
        v9 = (const void *)*((_QWORD *)v7 + 55);
        *((_QWORD *)v7 + 55) = a3;
        CFRetain(a3);
        if (v9)
          CFRelease(v9);
        return 0;
      }
      return FigSignalErrorAt();
    }
    result = *((_QWORD *)v7 + 55);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      result = 0;
      *((_QWORD *)v7 + 55) = 0;
    }
  }
  else
  {
    if (CFEqual(a2, CFSTR("Remaker_ClientPID")))
    {
      if (a3)
      {
        v11 = CFGetTypeID(a3);
        if (v11 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 9);
          return remakerfamily_updateClientPID();
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("Remaker_ThrottleForBackground")))
    {
      if (a3)
      {
        v12 = CFGetTypeID(a3);
        if (v12 == CFBooleanGetTypeID())
        {
          *((_BYTE *)v7 + 40) = CFBooleanGetValue((CFBooleanRef)a3);
          return remakerfamily_updateThrottleForBackground(a1);
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("Remaker_IOPolicy")))
    {
      if (a3)
      {
        v13 = CFGetTypeID(a3);
        if (v13 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, v7 + 114);
          return remakerfamily_updateIOPolicy();
        }
      }
      return FigSignalErrorAt();
    }
    if (*v7 >= 3u)
      return FigSignalErrorAt();
    if (CFEqual(a2, CFSTR("Remaker_MaxFileSize")))
    {
      valuePtr = 0;
      if (a3)
      {
        v14 = CFGetTypeID(a3);
        if (v14 != CFNumberGetTypeID())
          return FigSignalErrorAt();
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
        v15 = valuePtr;
        if (valuePtr < 0)
          return FigSignalErrorAt();
      }
      else
      {
        v15 = 0;
      }
      result = 0;
      *((_QWORD *)v7 + 18) = v15;
    }
    else if (CFEqual(a2, CFSTR("Remaker_Metadata")))
    {
      if (a3)
      {
        v16 = CFGetTypeID(a3);
        if (v16 != CFArrayGetTypeID())
          return FigSignalErrorAt();
        v17 = (const void *)*((_QWORD *)v7 + 50);
        if (v17)
        {
          CFRelease(v17);
          *((_QWORD *)v7 + 50) = 0;
        }
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a3);
        result = 0;
        *((_QWORD *)v7 + 50) = Copy;
      }
      else
      {
        result = *((_QWORD *)v7 + 50);
        if (result)
        {
          CFRelease((CFTypeRef)result);
          result = 0;
          *((_QWORD *)v7 + 50) = 0;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("Remaker_MetadataTransferWhitelist")))
      {
        if (CFEqual(a2, CFSTR("Remaker_MaximizePowerEfficiency")))
        {
          if (a3)
          {
            v22 = CFGetTypeID(a3);
            if (v22 == CFBooleanGetTypeID())
            {
              Value = CFBooleanGetValue((CFBooleanRef)a3);
              result = 0;
              *((_BYTE *)v7 + 424) = Value;
              return result;
            }
          }
        }
        else
        {
          if (!CFEqual(a2, CFSTR("Remaker_RealTime")))
            return 4294954512;
          if (a3)
          {
            v24 = CFGetTypeID(a3);
            if (v24 == CFBooleanGetTypeID())
            {
              v25 = CFBooleanGetValue((CFBooleanRef)a3);
              result = 0;
              *((_BYTE *)v7 + 32) = v25;
              return result;
            }
          }
        }
        return FigSignalErrorAt();
      }
      if (a3)
      {
        v19 = CFGetTypeID(a3);
        if (v19 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
        v20 = (const void *)*((_QWORD *)v7 + 51);
        if (v20)
        {
          CFRelease(v20);
          *((_QWORD *)v7 + 51) = 0;
        }
        v21 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)a3);
        result = 0;
        *((_QWORD *)v7 + 51) = v21;
      }
      else
      {
        result = *((_QWORD *)v7 + 51);
        if (result)
        {
          CFRelease((CFTypeRef)result);
          result = 0;
          *((_QWORD *)v7 + 51) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t remaker_AddAudioTrack(const void *a1, unsigned int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFAllocator *v15;
  CFArrayRef v16;
  uint64_t SourceASBDForTrackID;
  CFTypeRef v18;
  uint64_t (*v19)(const void *, CFArrayRef, _OWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t);
  uint64_t v20;
  CFTypeRef v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  CFTypeRef cf;
  void *values;
  unsigned int valuePtr;

  valuePtr = a2;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  cf = CFDictionaryCreate(v15, (const void **)kFigRemakerAudioMixdown_SourceTrackID, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = CFArrayCreate(v15, &cf, 1, MEMORY[0x1E0C9B378]);
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v22 = 0;
  if (!a3)
  {
    SourceASBDForTrackID = FigSignalErrorAt();
    goto LABEL_6;
  }
  SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, valuePtr, (uint64_t)&v25);
  if ((_DWORD)SourceASBDForTrackID)
    goto LABEL_6;
  SourceASBDForTrackID = remaker_createSanitizedDestinationASBDAndAudioOptions(HIDWORD(v26), a3, a5 != 0, *(double *)&v25, a6, (uint64_t)v23, (__CFDictionary **)&v22);
  if ((_DWORD)SourceASBDForTrackID)
    goto LABEL_6;
  v18 = v22;
  v19 = *(uint64_t (**)(const void *, CFArrayRef, _OWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v19)
  {
    SourceASBDForTrackID = v19(a1, v16, v23, a4, a5, v18, a7, a8);
LABEL_6:
    v20 = SourceASBDForTrackID;
    goto LABEL_8;
  }
  v20 = 4294954514;
LABEL_8:
  if (values)
    CFRelease(values);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v22)
    CFRelease(v22);
  return v20;
}

uint64_t remaker_AddVideoTrack(const void *a1, uint64_t a2, int a3, int a4, const __CFDictionary *a5, unsigned int a6, const __CFDictionary *a7, uint64_t a8, const __CFDictionary *a9, const __CFDictionary *a10, uint64_t a11, _DWORD *a12)
{
  unint64_t v14;
  const void *v16;
  uint64_t Storage;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v21;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, _QWORD, unsigned int *);
  CFTypeID v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const __CFString *, _QWORD, float64x2_t *);
  int v27;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  int v31;
  _BOOL4 v32;
  BOOL v33;
  __CFArray *v34;
  CFTypeRef v35;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v37;
  __CFArray *v38;
  uint64_t v39;
  signed int MediaSubType;
  char v41;
  unsigned __int16 v42;
  int TrackRotationAngle;
  int v44;
  const __CFDictionary *v45;
  const void *v46;
  const void *v47;
  const __CFAllocator *v48;
  const void *v49;
  CFTypeID v50;
  int v51;
  char v52;
  unint64_t Dimensions;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v58;
  const __CFAllocator *v59;
  uint64_t CMBaseObject;
  void (*v61)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  CMVideoDimensions v62;
  double width;
  double height;
  __CFArray *v65;
  __CFArray *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, const __CFString *, __CFArray *);
  const __CFAllocator *v70;
  const __CFAllocator *v71;
  const CMBufferCallbacks *v72;
  CFAllocatorRef v73;
  uint64_t Basic;
  CFTypeID v75;
  uint64_t v76;
  CFAllocatorRef v77;
  const void *v78;
  const __CFAllocator *v79;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const void *v81;
  const __CFAllocator *v82;
  const CMBufferCallbacks *v83;
  const void *v84;
  const void *v85;
  uint64_t SampleBufferProcessor;
  uint64_t FigBaseObject;
  void (*v88)(uint64_t, const __CFString *, _QWORD);
  const void *VTCompressionSession;
  const __CFString *v90;
  const __CFAllocator *v91;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v93;
  const void *v94;
  const __CFAllocator *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  CFAllocatorRef v103;
  uint64_t v104;
  void (*v105)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **);
  int v106;
  int v107;
  const __CFDictionary *v108;
  const __CFDictionary *v109;
  const __CFAllocator *v110;
  int v111;
  int v112;
  const __CFDictionary *v113;
  void *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  CFAllocatorRef v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **);
  uint64_t v126;
  const __CFDictionary *v127;
  uint64_t v128;
  CFAllocatorRef v129;
  uint64_t v130;
  void (*v131)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **);
  CFAllocatorRef v132;
  const opaqueCMFormatDescription *v133;
  uint64_t v134;
  CFAllocatorRef v135;
  uint64_t v136;
  CFIndex v137;
  CFIndex v138;
  const __CFAllocator *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  CMTagValue v143;
  CMTagValue v144;
  const __CFAllocator *v145;
  const __CFAllocator *v146;
  uint64_t v147;
  const void *v148;
  int v149;
  CFNumberRef v150;
  uint64_t v151;
  void (*v152)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, const __CFString *, CFNumberRef);
  const void *v157;
  int v158;
  unsigned int v159;
  int v160;
  CFIndex Count;
  const __CFString *v162;
  char v163;
  unsigned int v164;
  __CFDictionary *Mutable;
  int v166;
  const __CFArray *theArray;
  const void *v169;
  _BYTE v171[24];
  _BYTE v172[24];
  CMTime v173;
  CMTime v174;
  CMTimeRange v175;
  CMTime v176;
  CMTime v177;
  CMTimeRange v178;
  os_log_type_t type;
  int v180;
  char v181;
  OpaqueCMTagCollection *v182;
  CFTypeRef v183[3];
  const __CFDictionary *v184;
  __CFDictionary *v185;
  __CFDictionary *v186;
  CFTypeRef propertyValueOut;
  __CFDictionary *v188;
  __CFDictionary *v189;
  const opaqueCMFormatDescription *v190;
  __int16 v191;
  unsigned int v192;
  unsigned int v193;
  CFTypeRef v194;
  uint64_t v195;
  CMTime end;
  float64x2_t value;
  float64x2_t v198;
  float64x2_t v199;
  uint64_t v200;
  CMTag v201;

  LODWORD(v14) = a3;
  v16 = a1;
  v200 = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  v194 = 0;
  v195 = 0;
  v193 = 1986618469;
  v192 = bswap32(a6);
  v191 = 0;
  v189 = 0;
  v190 = 0;
  propertyValueOut = 0;
  v188 = 0;
  v185 = 0;
  v186 = 0;
  v184 = 0;
  memset((char *)&v183[1] + 7, 0, 9);
  v182 = 0;
  v183[0] = 0;
  if (*(_DWORD *)Storage != 1)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_263;
  }
  v18 = Storage;
  v19 = *(_QWORD *)(Storage + 72);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v20)
  {
    v21 = v20(v19, a2, &v194);
    if ((_DWORD)v21)
      goto LABEL_263;
    v22 = v194;
    v23 = *(uint64_t (**)(CFTypeRef, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v23)
    {
      v21 = v23(v22, 0, &v193);
      if ((_DWORD)v21)
        goto LABEL_263;
      if (v193 != 1986618469)
        return FigSignalErrorAt();
      v24 = CFGetTypeID(v16);
      v21 = remakerFamily_copyFormatDescription(v24, (uint64_t)v194, &v190);
      if ((_DWORD)v21)
        goto LABEL_263;
      if (a6 != 1752589105 || !FigCFDictionaryGetValue())
      {
LABEL_30:
        v164 = remakerFamily_IsRasterFormatDescription(v190);
        MediaSubType = CMFormatDescriptionGetMediaSubType(v190);
        v41 = 1;
        if (MediaSubType <= 1634743415)
        {
          if (MediaSubType == 1634742376 || MediaSubType == 1634742888)
            goto LABEL_41;
          v42 = 13416;
        }
        else
        {
          if ((MediaSubType - 1634755432) <= 0xB && ((1 << (MediaSubType - 104)) & 0x8C1) != 0
            || (MediaSubType - 1634759272) <= 6 && ((1 << (MediaSubType - 104)) & 0x51) != 0)
          {
            goto LABEL_41;
          }
          v42 = 13432;
        }
        if (MediaSubType != (v42 | 0x61700000))
          v41 = 0;
LABEL_41:
        v163 = v41;
        v21 = remakerFamily_createChannel(v16, a2, v193, &v195);
        if (!(_DWORD)v21)
        {
          TrackRotationAngle = remakerFamily_getTrackRotationAngle((uint64_t)v194, (_BYTE *)&v191 + 1, &v191);
          if (a5)
          {
            v44 = TrackRotationAngle;
            value.f64[0] = 0.0;
            if (CFDictionaryGetValueIfPresent(a5, CFSTR("MatrixHandling"), (const void **)&value)
              && CFEqual(*(CFTypeRef *)&value.f64[0], CFSTR("PreserveMatrix")))
            {
              TrackRotationAngle = 0;
              v191 = 0;
              v160 = 1;
            }
            else
            {
              v160 = 0;
              TrackRotationAngle = v44;
            }
          }
          else
          {
            v160 = 0;
          }
          v166 = TrackRotationAngle;
          if (a10)
          {
            v162 = (const __CFString *)CFDictionaryGetValue(a10, CFSTR("CustomSampleBufferProcessor"));
            v45 = (const __CFDictionary *)CFDictionaryGetValue(a10, CFSTR("CustomSampleBufferProcessorOptions"));
            if (v45
              && (v46 = CFDictionaryGetValue(v45, CFSTR("CustomSampleBufferProcessorOptions_ConvenienceString"))) != 0)
            {
              v47 = v46;
              v48 = CFGetAllocator(v16);
              Mutable = CFDictionaryCreateMutable(v48, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFDictionaryAddValue(Mutable, CFSTR("SampleBufferProcessor_ConvenienceString"), v47);
            }
            else
            {
              Mutable = 0;
            }
            if (CFDictionaryContainsKey(a10, CFSTR("RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm")))
            {
              v49 = CFDictionaryGetValue(a10, CFSTR("RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm"));
              if (v49)
              {
                v50 = CFGetTypeID(v49);
                if (v50 == CFStringGetTypeID())
                {
                  if (FigCFEqual())
                    *(_BYTE *)(v195 + 49) = 1;
                }
              }
            }
          }
          else
          {
            v162 = 0;
            Mutable = 0;
          }
          if (FigCPEIsSupportedFormatDescription((uint64_t)v190))
          {
            v58 = FigSignalErrorAt();
          }
          else
          {
            v159 = a2;
            if ((_DWORD)v14 && a4)
            {
              *(_DWORD *)(v195 + 320) |= 1u;
              if (a5)
              {
                value.f64[0] = 0.0;
                if (CFDictionaryGetValueIfPresent(a5, (const void *)*MEMORY[0x1E0CED848], (const void **)&value))
                {
                  if (!CFEqual(*(CFTypeRef *)&value.f64[0], (CFTypeRef)*MEMORY[0x1E0CEDB40]))
                    *(_DWORD *)(v195 + 320) |= 2u;
                  v51 = CFEqual(*(CFTypeRef *)&value.f64[0], (CFTypeRef)*MEMORY[0x1E0CEDB38]);
                  v52 = v163;
                  if (v51)
                    v52 = 1;
                  v163 = v52;
                }
              }
            }
            else
            {
              Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v190);
              LODWORD(v14) = Dimensions;
              if (v166 == 90 || v166 == 270)
              {
                a4 = Dimensions;
                v14 = HIDWORD(Dimensions);
              }
              else
              {
                a4 = HIDWORD(Dimensions);
              }
            }
            v54 = v195;
            *(_BYTE *)(v195 + 48) = 0;
            *(_BYTE *)(v54 + 50) = 1;
            v55 = *(_QWORD *)(v18 + 184);
            v56 = v193;
            v57 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
            if (!v57)
            {
              v34 = 0;
              v35 = 0;
              MutableCopy = 0;
              goto LABEL_205;
            }
            v58 = v57(v55, v56, 0, v54 + 300);
            if (!(_DWORD)v58)
            {
              v58 = remakerFamily_setFormatWriterTrackProperties((uint64_t)v16, *(unsigned int *)(v195 + 300));
              if (!(_DWORD)v58)
              {
                v58 = remakerFamily_setFormatWriterProperties((uint64_t)v16, a6);
                if (!(_DWORD)v58)
                {
                  if (v160)
                  {
                    end.value = 0;
                    v59 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                    CMBaseObject = FigAssetTrackGetCMBaseObject(v194);
                    v61 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v61)
                      v61(CMBaseObject, CFSTR("PreferredTransform"), v59, &end);
                    if (end.value)
                    {
                      v62 = CMVideoFormatDescriptionGetDimensions(v190);
                      width = (double)v62.width;
                      height = (double)v62.height;
                      FigGetCGAffineTransformFrom3x3MatrixArray((const void *)end.value, (uint64_t)&value);
                      v199 = vmulq_f64(v199, vabsq_f64(vmlaq_n_f64(vmulq_n_f64(v198, (double)a4 / height), value, (double)(int)v14 / width)));
                      v65 = FigCreate3x3MatrixArrayFromCGAffineTransform(v59, &value);
                      if (v65)
                      {
                        v66 = v65;
                        v67 = *(_QWORD *)(v18 + 184);
                        v68 = *(unsigned int *)(v195 + 300);
                        v69 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                        if (v69)
                          v39 = v69(v67, v68, CFSTR("TrackMatrix"), v66);
                        else
                          v39 = 4294954514;
                        CFRelease(v66);
                        CFRelease((CFTypeRef)end.value);
                        if ((_DWORD)v39)
                          goto LABEL_88;
                      }
                      else
                      {
                        CFRelease((CFTypeRef)end.value);
                      }
                    }
                  }
                  v70 = CFGetAllocator(v16);
                  v71 = v70;
                  if (v164 != 1)
                  {
                    v34 = CFArrayCreateMutable(v70, 0, MEMORY[0x1E0C9B378]);
                    if (!v34)
                    {
                      v35 = 0;
                      MutableCopy = 0;
                      goto LABEL_277;
                    }
                    v73 = CFGetAllocator(v16);
                    Basic = FigVisualContextCreateBasic((uint64_t)v73, 0, v183);
                    if ((_DWORD)Basic)
                      goto LABEL_275;
                    CFArrayAppendValue(v34, v183[0]);
                    if (v183[0])
                    {
                      CFRelease(v183[0]);
                      v183[0] = 0;
                    }
                    value.f64[0] = 0.0;
                    Count = 1;
                    if (FigCFDictionaryGetValueIfPresent() && *(_QWORD *)&value.f64[0])
                    {
                      v75 = CFGetTypeID(*(CFTypeRef *)&value.f64[0]);
                      if (v75 == CFArrayGetTypeID())
                      {
                        if (*(_QWORD *)&value.f64[0])
                        {
                          Count = CFArrayGetCount(*(CFArrayRef *)&value.f64[0]);
                          if (Count >= 2)
                          {
                            v76 = 1;
                            do
                            {
                              v77 = CFGetAllocator(v16);
                              Basic = FigVisualContextCreateBasic((uint64_t)v77, 0, v183);
                              if ((_DWORD)Basic)
                                goto LABEL_275;
                              CFArrayAppendValue(v34, v183[0]);
                              if (v183[0])
                              {
                                CFRelease(v183[0]);
                                v183[0] = 0;
                              }
                            }
                            while (Count != ++v76);
                          }
                        }
                        else
                        {
                          Count = 0;
                        }
                      }
                      else
                      {
                        Count = 1;
                      }
                    }
                    v157 = 0;
LABEL_112:
                    if (v166 || HIBYTE(v191) || (v78 = v157, (_BYTE)v191))
                    {
                      v79 = CFGetAllocator(v16);
                      CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                      Basic = CMBufferQueueCreate(v79, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v195 + 248));
                      if ((_DWORD)Basic)
                        goto LABEL_275;
                      v78 = *(const void **)(v195 + 248);
                    }
                    v81 = v78;
                    if (v162)
                    {
                      v82 = CFGetAllocator(v16);
                      v83 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                      Basic = CMBufferQueueCreate(v82, 0, v83, (CMBufferQueueRef *)(v195 + 272));
                      if ((_DWORD)Basic)
                        goto LABEL_275;
                      v78 = *(const void **)(v195 + 272);
                    }
                    Basic = remakerFamily_createRemakerVideoEncoderSpecification(v16, a7, &v188);
                    if (!(_DWORD)Basic)
                    {
                      Basic = remakerFamily_setupMultiPassTrackIfNecessary(v16, v195);
                      if (!(_DWORD)Basic)
                      {
                        v181 = 0;
                        FigCFDictionaryGetBooleanIfPresent();
                        v84 = v34 ? CFArrayGetValueAtIndex(v34, 0) : 0;
                        v183[0] = v84;
                        value = *(float64x2_t *)a11;
                        v198.f64[0] = *(float64_t *)(a11 + 16);
                        Basic = remakerFamily_setupCompressionMediaProcessorAndFileOutput(v16, v14, a4, a6, (__int128 *)&value, v188, 0, v195, v78, v34, a9);
                        if (!(_DWORD)Basic)
                        {
                          if (a5)
                          {
                            v85 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CED848]);
                            if (!v85 || CFEqual(v85, (CFTypeRef)*MEMORY[0x1E0CEDB40]))
                            {
                              SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(v195 + 288));
                              FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
                              v88 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 56);
                              if (v88)
                                v88(FigBaseObject, CFSTR("SampleBufferProcessor_InheritOutputCleanApertureFromInput"), *MEMORY[0x1E0C9AE50]);
                            }
                          }
                          FigCFDictionaryGetDoubleIfPresent();
                          VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v195 + 288));
                          v90 = (const __CFString *)*MEMORY[0x1E0CED268];
                          v91 = CFGetAllocator(v16);
                          Basic = VTSessionCopyProperty(VTCompressionSession, v90, v91, &propertyValueOut);
                          if (!(_DWORD)Basic)
                          {
                            if (propertyValueOut)
                            {
                              if (dword_1EE2A3000)
                              {
                                v180 = 0;
                                type = OS_LOG_TYPE_DEFAULT;
                                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                              v93 = v195;
                              theArray = v34;
                              if (*(_QWORD *)(v195 + 272))
                              {
                                v94 = v16;
                                v95 = CFGetAllocator(v16);
                                v96 = (uint64_t)propertyValueOut;
                                if (v81)
                                  v97 = 0;
                                else
                                  v97 = (void *)v183[0];
                                value = *(float64x2_t *)(v18 + 88);
                                v198.f64[0] = *(float64_t *)(v18 + 104);
                                end = *(CMTime *)(v18 + 112);
                                CMTimeRangeFromTimeToTime(&v178, (CMTime *)&value, &end);
                                v98 = *(_QWORD *)(v195 + 272);
                                CMTimeMake(&v177, 1, 10);
                                CMTimeMake(&v176, 1, 30);
                                if (*(_BYTE *)(v18 + 32))
                                  v99 = 0;
                                else
                                  v99 = 31;
                                value = *(float64x2_t *)a11;
                                v198.f64[0] = *(float64_t *)(a11 + 16);
                                v100 = FigMediaProcessorCreateForCustom(v95, v162, (uint64_t)Mutable, v96, v81, v97, (uint64_t)&value, (__int128 *)&v178.start.value, v98, (uint64_t)&v177, (uint64_t)&v176, 0, v99, (uint64_t *)(v195 + 264));
                                if ((_DWORD)v100
                                  || (CMNotificationCenterGetDefaultLocalCenter(),
                                      v100 = FigNotificationCenterAddWeakListeners(),
                                      (_DWORD)v100))
                                {
                                  v39 = v100;
                                  v35 = 0;
                                  MutableCopy = 0;
                                  v38 = 0;
                                  goto LABEL_270;
                                }
                                v93 = v195;
                                *(_DWORD *)(v195 + 320) = -1;
                                v34 = theArray;
                              }
                              if (!*(_QWORD *)(v93 + 248))
                              {
                                MutableCopy = 0;
                                v108 = a5;
                                if (a5)
                                  goto LABEL_172;
                                goto LABEL_173;
                              }
                              *(_DWORD *)(v93 + 320) |= 4u;
                              v101 = *(_QWORD *)(v93 + 264);
                              if (v101)
                              {
                                v102 = FigMediaProcessorGetSampleBufferProcessor(v101);
                                v103 = CFGetAllocator(v16);
                                v104 = FigSampleBufferProcessorGetFigBaseObject(v102);
                                v105 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                if (v105)
                                  v105(v104, CFSTR("SampleBufferProcessor_SourcePixelBufferAttributes"), v103, &v184);
                                if (!v184)
                                {
LABEL_156:
                                  MutableCopy = 0;
                                  v184 = (const __CFDictionary *)CFRetain(propertyValueOut);
                                  goto LABEL_161;
                                }
                                v106 = CFDictionaryContainsKey(v184, (const void *)*MEMORY[0x1E0CA90E0]);
                                v107 = CFDictionaryContainsKey(v184, (const void *)*MEMORY[0x1E0CA8FD8]);
                                if (!v106 || !v107)
                                {
                                  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v184);
                                  if (!MutableCopy)
                                    goto LABEL_278;
                                  FigCFDictionarySetInt32();
                                  FigCFDictionarySetInt32();
                                  v109 = v184;
                                  v184 = MutableCopy;
                                  CFRetain(MutableCopy);
                                  if (v109)
                                    CFRelease(v109);
                                  if (!v184)
                                  {
LABEL_278:
                                    v119 = FigSignalErrorAt();
                                    goto LABEL_279;
                                  }
LABEL_161:
                                  v169 = v16;
                                  v110 = CFGetAllocator(v16);
                                  v111 = HIBYTE(v191);
                                  v112 = v191;
                                  v113 = v184;
                                  if (v157)
                                    v114 = 0;
                                  else
                                    v114 = (void *)v183[0];
                                  value = *(float64x2_t *)(v18 + 88);
                                  v198.f64[0] = *(float64_t *)(v18 + 104);
                                  end = *(CMTime *)(v18 + 112);
                                  CMTimeRangeFromTimeToTime(&v175, (CMTime *)&value, &end);
                                  v115 = *(_QWORD *)(v195 + 248);
                                  CMTimeMake(&v174, 1, 10);
                                  CMTimeMake(&v173, 1, 30);
                                  if (*(_BYTE *)(v18 + 32))
                                    v116 = 0;
                                  else
                                    v116 = 31;
                                  value = *(float64x2_t *)a11;
                                  v198.f64[0] = *(float64_t *)(a11 + 16);
                                  v117 = FigMediaProcessorCreateForVideoRotation(v110, v166, v111, v112, v113, v157, v114, (uint64_t)&value, (__int128 *)&v175.start.value, v115, (uint64_t)&v174, (uint64_t)&v173, 0, v116, (uint64_t *)(v195 + 232));
                                  if ((_DWORD)v117
                                    || (CMNotificationCenterGetDefaultLocalCenter(),
                                        v117 = FigNotificationCenterAddWeakListeners(),
                                        v108 = a5,
                                        (_DWORD)v117))
                                  {
                                    v39 = v117;
                                    v35 = 0;
                                    v38 = 0;
                                    v16 = v169;
                                    goto LABEL_271;
                                  }
                                  v16 = v169;
                                  if (v184)
                                  {
                                    CFRelease(v184);
                                    v184 = 0;
                                  }
                                  v34 = theArray;
                                  if (a5)
                                  {
LABEL_172:
                                    v118 = CFGetAllocator(v16);
                                    v119 = remakerFamily_createVideoPixelTransferProperties(v118, v108, v166, &v185);
                                    if ((_DWORD)v119)
                                      goto LABEL_279;
                                  }
LABEL_173:
                                  v120 = v195;
                                  v121 = *(_QWORD *)(v195 + 232);
                                  if (!v121)
                                    goto LABEL_177;
                                  v122 = FigMediaProcessorGetSampleBufferProcessor(v121);
                                  v123 = CFGetAllocator(v16);
                                  v124 = FigSampleBufferProcessorGetFigBaseObject(v122);
                                  v125 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                  if (v125)
                                  {
                                    v119 = v125(v124, CFSTR("SampleBufferProcessor_SourcePixelBufferAttributes"), v123, &v184);
                                    if (!(_DWORD)v119)
                                    {
                                      v120 = v195;
LABEL_177:
                                      v126 = *(_QWORD *)(v120 + 264);
                                      v127 = v184;
                                      if (v126 && !v184)
                                      {
                                        v128 = FigMediaProcessorGetSampleBufferProcessor(v126);
                                        v129 = CFGetAllocator(v16);
                                        v130 = FigSampleBufferProcessorGetFigBaseObject(v128);
                                        v131 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                        if (v131)
                                          v131(v130, CFSTR("SampleBufferProcessor_SourcePixelBufferAttributes"), v129, &v184);
                                        v127 = v184;
                                      }
                                      if (!v127)
                                      {
                                        v127 = (const __CFDictionary *)CFRetain(propertyValueOut);
                                        v184 = v127;
                                      }
                                      v35 = CFRetain(v127);
                                      if (v184)
                                      {
                                        CFRelease(v184);
                                        v184 = 0;
                                      }
                                      v132 = CFGetAllocator(v16);
                                      v133 = v190;
                                      remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(v18 + 32), (uint64_t)v172);
                                      remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(v18 + 32), (uint64_t)v171);
                                      v134 = remakerFamily_createRenderPipelineOptions((uint64_t)v132, v133, (uint64_t)v172, (uint64_t)v171, 0, 0, *(unsigned __int8 *)(v18 + 424), 1, v163, *(_BYTE *)(v18 + 32), 0, 0, v18 + 41, v159, &v189);
                                      if ((_DWORD)v134)
                                        goto LABEL_273;
                                      if (v164)
                                      {
                                        v135 = CFGetAllocator(v16);
                                        v136 = FigRenderPipelineCreateForBufferQueue((uint64_t)v135, *(const void **)(v195 + 224), 0, (CFTypeRef *)(v195 + 56));
                                        v38 = 0;
                                        if ((_DWORD)v136)
                                        {
LABEL_268:
                                          v39 = v136;
                                          goto LABEL_230;
                                        }
LABEL_215:
                                        CMNotificationCenterGetDefaultLocalCenter();
                                        v136 = FigNotificationCenterAddWeakListeners();
                                        if (!(_DWORD)v136)
                                        {
                                          if (a12)
                                            *a12 = *(_DWORD *)(v195 + 300);
                                          if ((*(_DWORD *)(a11 + 12) & 0x1D) == 1)
                                          {
                                            v149 = *(_DWORD *)(a11 + 8);
                                            if (v149 <= 600)
                                              v149 = 600;
                                            LODWORD(value.f64[0]) = v149;
                                            v150 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &value);
                                            v183[2] = v150;
                                          }
                                          else
                                          {
                                            v151 = FigAssetTrackGetCMBaseObject(v194);
                                            v152 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                            if (v152)
                                              v152(v151, CFSTR("NaturalTimeScale"), *MEMORY[0x1E0C9AE00], &v183[2]);
                                            v150 = (CFNumberRef)v183[2];
                                          }
                                          if (v150)
                                          {
                                            v153 = *(_QWORD *)(v18 + 184);
                                            v154 = *(unsigned int *)(v195 + 300);
                                            v155 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                                            if (v155)
                                              v155(v153, v154, CFSTR("MediaTimeScale"), v150);
                                            remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)v16, (uint64_t)v183[2], 1986618469);
                                            CFRelease(v183[2]);
                                          }
                                          remakerFamily_commitChannel((uint64_t)v16, v195);
                                          v39 = 0;
                                          v195 = 0;
                                          goto LABEL_230;
                                        }
                                        goto LABEL_268;
                                      }
                                      v134 = remakerFamily_createRemakerVideoDecoderSpecification(v16, (uint64_t)a10, &v186);
                                      if ((_DWORD)v134)
                                      {
LABEL_273:
                                        v39 = v134;
                                        goto LABEL_90;
                                      }
                                      value.f64[0] = 0.0;
                                      if (!FigCFDictionaryGetValueIfPresent())
                                      {
                                        if (Count == 1)
                                        {
                                          v146 = CFGetAllocator(v16);
                                          v136 = FigVideoRenderPipelineCreateWithVisualContext(v146, (int)v186, v35, v185, 1, (uint64_t)v183[0], 0, v189, (_QWORD *)(v195 + 56));
                                          v38 = 0;
                                          if ((_DWORD)v136)
                                            goto LABEL_268;
                                        }
                                        else
                                        {
                                          v38 = 0;
                                        }
                                        goto LABEL_210;
                                      }
                                      if (*(_QWORD *)&value.f64[0])
                                      {
                                        v94 = v16;
                                        v137 = CFArrayGetCount(*(CFArrayRef *)&value.f64[0]);
                                        if (v137)
                                        {
                                          v138 = v137;
                                          v139 = CFGetAllocator(v94);
                                          v38 = CFArrayCreateMutable(v139, v138, MEMORY[0x1E0C9B378]);
                                          if (v38)
                                          {
                                            if (v138 >= 1)
                                            {
                                              v140 = 0;
                                              while (1)
                                              {
                                                CFGetAllocator(v94);
                                                v141 = FigTagCollectionCreateMutable();
                                                if ((_DWORD)v141)
                                                {
                                                  v39 = v141;
                                                  goto LABEL_270;
                                                }
                                                end.value = -1;
                                                FigCFArrayGetInt64AtIndex();
                                                if (end.value < 0)
                                                  break;
                                                v142 = FigTagMakeWithSInt64Value();
                                                v144 = v143;
                                                *(_QWORD *)&v201.category = v142;
                                                v201.value = v144;
                                                CMTagCollectionAddTag(v182, v201);
                                                CFArrayAppendValue(v38, v182);
                                                if (v182)
                                                {
                                                  CFRelease(v182);
                                                  v182 = 0;
                                                }
                                                if (v138 == ++v140)
                                                  goto LABEL_202;
                                              }
                                              v39 = 4294955190;
                                              goto LABEL_270;
                                            }
LABEL_202:
                                            v16 = v94;
                                            v145 = CFGetAllocator(v94);
                                            v34 = theArray;
                                            v136 = FigVideoRenderPipelineCreateWithVisualContextGroup(v145, (int)v186, v35, v185, 1, theArray, v38, 0, v189, (_QWORD *)(v195 + 56));
                                            if ((_DWORD)v136)
                                              goto LABEL_268;
LABEL_210:
                                            v147 = v195;
                                            if (!*(_QWORD *)(v195 + 56))
                                            {
                                              v39 = 4294955190;
                                              goto LABEL_230;
                                            }
                                            if (a10)
                                            {
                                              v148 = CFDictionaryGetValue(a10, CFSTR("Remaker_FieldMode"));
                                              FigCFDictionaryGetBooleanIfPresent();
                                              v147 = v195;
                                            }
                                            else
                                            {
                                              v148 = 0;
                                            }
                                            v136 = remakerFamily_setVideoRenderPipelineProperties((int)v16, v147, 1, HIBYTE(v183[1]), v190, v148, *(unsigned __int8 *)(v18 + 32), 0, v185);
                                            if ((_DWORD)v136)
                                              goto LABEL_268;
                                            goto LABEL_215;
                                          }
                                          v39 = 4294955196;
                                        }
                                        else
                                        {
                                          v38 = 0;
                                          v39 = 0;
                                        }
LABEL_270:
                                        v16 = v94;
LABEL_271:
                                        v37 = Mutable;
                                        v34 = theArray;
                                        goto LABEL_231;
                                      }
LABEL_277:
                                      v38 = 0;
                                      v39 = 0;
                                      goto LABEL_230;
                                    }
LABEL_279:
                                    v39 = v119;
                                    v35 = 0;
                                    goto LABEL_90;
                                  }
                                  v35 = 0;
LABEL_205:
                                  v38 = 0;
                                  v39 = 4294954514;
                                  goto LABEL_230;
                                }
                              }
                              if (v184)
                              {
                                MutableCopy = 0;
                                goto LABEL_161;
                              }
                              goto LABEL_156;
                            }
                            Basic = FigSignalErrorAt();
                          }
                        }
                      }
                    }
LABEL_275:
                    v39 = Basic;
                    goto LABEL_89;
                  }
                  v72 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                  v58 = CMBufferQueueCreate(v71, 0, v72, (CMBufferQueueRef *)(v195 + 224));
                  if (!(_DWORD)v58)
                  {
                    v34 = 0;
                    Count = 0;
                    v157 = *(const void **)(v195 + 224);
                    goto LABEL_112;
                  }
                }
              }
            }
          }
          v39 = v58;
LABEL_88:
          v34 = 0;
LABEL_89:
          v35 = 0;
          MutableCopy = 0;
LABEL_90:
          v38 = 0;
LABEL_230:
          v37 = Mutable;
          goto LABEL_231;
        }
LABEL_263:
        v39 = v21;
        v34 = 0;
        v35 = 0;
        MutableCopy = 0;
        v37 = 0;
        v38 = 0;
        goto LABEL_231;
      }
      CFGetTypeID(v16);
      value.f64[0] = 0.0;
      v25 = FigAssetTrackGetCMBaseObject(v194);
      v26 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, float64x2_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (!v26)
        goto LABEL_26;
      v27 = v26(v25, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &value);
      if (v27 != -12521)
      {
        if (v27)
        {
LABEL_26:
          v32 = 1;
          goto LABEL_27;
        }
        if (*(_QWORD *)&value.f64[0])
        {
          v28 = CFArrayGetCount(*(CFArrayRef *)&value.f64[0]);
          if (v28)
          {
            v158 = a2;
            v29 = v28 - 1;
            if (v28 < 1)
            {
              v32 = 0;
            }
            else
            {
              v30 = 0;
              do
              {
                CFArrayGetValueAtIndex(*(CFArrayRef *)&value.f64[0], v30);
                v31 = FigVideoFormatDescriptionContainsStereoMultiviewVideo();
                v32 = v31 == 0;
                if (v31)
                  v33 = v29 == v30;
                else
                  v33 = 1;
                ++v30;
              }
              while (!v33);
            }
            LODWORD(a2) = v158;
LABEL_27:
            if (*(_QWORD *)&value.f64[0])
              CFRelease(*(CFTypeRef *)&value.f64[0]);
            if (!v32)
              goto LABEL_30;
            return FigSignalErrorAt();
          }
        }
      }
      FigAssetReaderGetTypeID();
      goto LABEL_26;
    }
  }
  v34 = 0;
  v35 = 0;
  MutableCopy = 0;
  v37 = 0;
  v38 = 0;
  v39 = 4294954514;
LABEL_231:
  remakerFamily_discardChannel((uint64_t)v16, v195);
  if (v182)
    CFRelease(v182);
  if (v38)
    CFRelease(v38);
  if (v34)
    CFRelease(v34);
  if (v190)
    CFRelease(v190);
  if (v189)
    CFRelease(v189);
  if (v188)
    CFRelease(v188);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  if (v186)
    CFRelease(v186);
  if (v35)
    CFRelease(v35);
  if (v185)
    CFRelease(v185);
  if (v37)
    CFRelease(v37);
  if (v184)
    CFRelease(v184);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v194)
    CFRelease(v194);
  return v39;
}

uint64_t remaker_AddPassthroughTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    return v6(a1, a2, 0, a3);
  else
    return 4294954514;
}

uint64_t remaker_SetTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t Storage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  CMTime time2;
  CMTime time;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  if (dword_1EE2A3000)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)Storage != 1)
    return FigSignalErrorAt();
  if ((a2->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time = *a2;
  time2 = *a3;
  if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
    return FigSignalErrorAt();
  result = 0;
  v8 = *(_OWORD *)&a2->value;
  *(_QWORD *)(Storage + 104) = a2->epoch;
  *(_OWORD *)(Storage + 88) = v8;
  v9 = *(_OWORD *)&a3->value;
  *(_QWORD *)(Storage + 128) = a3->epoch;
  *(_OWORD *)(Storage + 112) = v9;
  return result;
}

uint64_t remaker_StartOutput(const void *a1)
{
  const void *v1;
  uint64_t Storage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  CFIndex Count;
  double Seconds;
  NSObject *v7;
  CFIndex v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned int *ValueAtIndex;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, const __CFString *, CFAllocatorRef, CFNumberRef *);
  int v21;
  CFNumberRef v22;
  BOOL v23;
  CFIndex v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t SampleBufferProcessor;
  CFAllocatorRef v31;
  uint64_t FigBaseObject;
  unsigned int (*v33)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, const __CFString *, CFAllocatorRef, CFNumberRef *);
  int v39;
  CFNumberRef v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  double v44;
  CFIndex v45;
  const __CFAllocator *v46;
  const __CFString *v47;
  double *v48;
  double *v49;
  double v50;
  CFNumberRef v52;
  const void *VTCompressionSession;
  CFIndex v54;
  uint64_t v55;
  uint64_t v56;
  CFIndex v57;
  CFIndex v58;
  CFIndex v59;
  const __CFAllocator *v60;
  const __CFString *v61;
  _QWORD *v62;
  _QWORD *v63;
  CFNumberRef v64;
  const void *v65;
  uint64_t v66;
  CFIndex v67;
  CFIndex v68;
  CFIndex v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  int v78;
  const __CFDictionary *value;
  __CFArray *Mutable;
  CFIndex v81;
  uint64_t v82;
  uint64_t v83;
  CFIndex v84;
  const __CFNumber *v85;
  const void *v86;
  CFIndex v87;
  CFIndex v88;
  CFIndex v89;
  const __CFNumber *v90;
  _DWORD *ChannelBySourceTrackID;
  CFArrayRef v92;
  CFArrayRef v93;
  int v94;
  CFArrayRef v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, const __CFString *, CFArrayRef);
  int v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, const __CFString *, CFArrayRef);
  int v102;
  CFIndex v103;
  _QWORD *v104;
  uint64_t MultiPassPlaybackBossForTrack;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, CMTime *);
  NSObject *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v113;
  int key;
  CFAllocatorRef allocator;
  const __CFAllocator *allocatora;
  const void *v117;
  _BYTE v118[2];
  int v119;
  CFNumberRef number;
  CFNumberRef v121;
  CFTypeRef cf;
  CMTime v123;
  os_log_type_t type[8];
  CMTime valuePtr;
  CMTime time;
  uint64_t v127;

  v1 = a1;
  v127 = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  v118[0] = 0;
  if (dword_1EE2A3000)
  {
    LODWORD(v123.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*(_DWORD *)Storage != 1)
    goto LABEL_173;
  remakerFamily_SetRemakerState((uint64_t)v1, 2, 0);
  if (*(_DWORD *)Storage >= 7u)
    goto LABEL_173;
  v117 = v1;
  if (*(uint64_t *)(Storage + 144) >= 1)
  {
    v4 = remakerFamily_getStorage(v1);
    *(double *)type = 0.0;
    v123 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v121 = 0;
    cf = 0;
    number = 0;
    Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 80));
    if (!remakerFamily_getExpectedDuration((uint64_t)v1, &v123))
    {
      time = v123;
      Seconds = CMTimeGetSeconds(&time);
      if (dword_1EE2A3000)
      {
        v119 = 0;
        v118[1] = 0;
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Count >= 1)
      {
        v8 = 0;
        v9 = 0;
        allocator = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
        v10 = (double)(uint64_t)(Seconds * 16.0 * 0.5);
        v11 = 2000;
        while (1)
        {
          ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 80), v8);
          if (*((_BYTE *)ValueAtIndex + 48) || !ValueAtIndex[75])
            goto LABEL_14;
          v14 = ValueAtIndex[8];
          if (v14 == 1835365473)
          {
            v15 = v9;
            time.value = 0;
            v16 = *(_QWORD *)(v4 + 72);
            v17 = ValueAtIndex[7];
            v18 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 40);
            if (!v18 || v18(v16, v17, &cf))
              goto LABEL_82;
            CMBaseObject = FigAssetTrackGetCMBaseObject(cf);
            v20 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            v13 = (uint64_t)(Seconds * 16.0 * 0.5);
            if (v20)
            {
              v21 = v20(CMBaseObject, CFSTR("UneditedSampleCount"), allocator, &number);
              v22 = number;
              if (v21)
                v23 = 1;
              else
                v23 = number == 0;
              if (!v23)
              {
                CFNumberGetValue(number, kCFNumberSInt64Type, &time);
                v13 = (uint64_t)(Seconds * 16.0 * 0.5) + 12 * time.value;
                goto LABEL_33;
              }
              v13 = (uint64_t)(Seconds * 16.0 * 0.5);
            }
            else
            {
LABEL_33:
              v22 = number;
            }
            v9 = v15;
            if (v22)
            {
              CFRelease(v22);
              number = 0;
            }
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            goto LABEL_15;
          }
          if (v14 == 1986618469)
          {
            time = *(CMTime *)(ValueAtIndex + 82);
            v13 = (uint64_t)(Seconds * 4.0 + (Seconds / CMTimeGetSeconds(&time) + 1.0) * 21.0 + v10);
            v9 = (v9 + 1);
            goto LABEL_15;
          }
          if (v14 == 1936684398 && *((_BYTE *)ValueAtIndex + 324))
          {
            time = *(CMTime *)(ValueAtIndex + 82);
            v13 = (uint64_t)(v10 + (Seconds / CMTimeGetSeconds(&time) + 1.0) * 4.0);
          }
          else
          {
LABEL_14:
            v13 = (uint64_t)(Seconds * 16.0 * 0.5);
          }
LABEL_15:
          v11 += v13;
          if (Count == ++v8)
          {
            key = v9;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 80), v24);
              if (!*((_BYTE *)v26 + 48) && v26[75])
              {
                v28 = v26[8];
                if (v28 == 1835365473)
                {
                  if (*((_QWORD *)v26 + 36))
                  {
                    LODWORD(time.value) = 0;
                    v34 = *(_QWORD *)(v4 + 72);
                    v35 = v26[7];
                    v36 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 40);
                    if (!v36 || v36(v34, v35, &cf))
                      goto LABEL_82;
                    v37 = FigAssetTrackGetCMBaseObject(cf);
                    v38 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v38)
                    {
                      v39 = v38(v37, CFSTR("EstimatedDataRate"), allocator, &v121);
                      v40 = v121;
                      if (v39)
                        v41 = 1;
                      else
                        v41 = v121 == 0;
                      if (!v41)
                      {
                        CFNumberGetValue(v121, kCFNumberFloat32Type, &time);
                        v27 = (uint64_t)(Seconds * *(float *)&time.value);
                        goto LABEL_63;
                      }
                      v27 = 0;
                      if (!v121)
                      {
LABEL_65:
                        if (cf)
                        {
                          CFRelease(cf);
                          cf = 0;
                        }
                        goto LABEL_40;
                      }
                    }
                    else
                    {
                      v27 = 0;
LABEL_63:
                      v40 = v121;
                      if (!v121)
                        goto LABEL_65;
                    }
                    CFRelease(v40);
                    v121 = 0;
                    goto LABEL_65;
                  }
                }
                else if (v28 == 1936684398)
                {
                  v29 = *((_QWORD *)v26 + 36);
                  if (v29)
                  {
                    time.value = 0;
                    valuePtr.value = 0;
                    SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(v29);
                    v31 = CFGetAllocator(v117);
                    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
                    v33 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (!v33 || v33(FigBaseObject, CFSTR("SampleBufferProcessor_OutputBitRate"), v31, &time))
                      goto LABEL_82;
                    if (time.value)
                    {
                      CFNumberGetValue((CFNumberRef)time.value, kCFNumberDoubleType, &valuePtr);
                      CFRelease((CFTypeRef)time.value);
                    }
                    v27 = (uint64_t)(Seconds * *(double *)&valuePtr.value * 0.125);
                    goto LABEL_40;
                  }
                }
              }
              v27 = 0;
LABEL_40:
              v25 += v27;
              if (Count == ++v24)
              {
                v42 = v25 + v11;
                v43 = key;
                goto LABEL_68;
              }
            }
          }
        }
      }
      v43 = 0;
      v42 = 2000;
LABEL_68:
      v44 = (double)(*(_QWORD *)(v4 + 144) - v42) / Seconds / (double)v43 * 0.95 * 8.0;
      if (v44 < 64000.0)
        v44 = 64000.0;
      *(double *)type = v44;
      if (Count >= 1)
      {
        v45 = 0;
        v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v47 = (const __CFString *)*MEMORY[0x1E0CECEF0];
        do
        {
          v48 = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 80), v45);
          if (!*((_BYTE *)v48 + 48))
          {
            v49 = v48;
            if (*((_DWORD *)v48 + 75))
            {
              if (*((_DWORD *)v48 + 8) == 1986618469)
              {
                v50 = v48[44];
                if (v50 == 0.0 || v50 > *(double *)type)
                {
                  v52 = CFNumberCreate(v46, kCFNumberDoubleType, type);
                  VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*((_QWORD *)v49 + 36));
                  VTSessionSetProperty(VTCompressionSession, v47, v52);
                  CFRelease(v52);
                }
              }
            }
          }
          ++v45;
        }
        while (Count != v45);
      }
    }
LABEL_82:
    if (number)
      CFRelease(number);
    if (v121)
      CFRelease(v121);
    v1 = v117;
    if (cf)
      CFRelease(cf);
  }
  v54 = CFArrayGetCount(*(CFArrayRef *)(Storage + 80));
  if (!v54)
  {
LABEL_173:
    MultiPassPlaybackBossForTrack = FigSignalErrorAt();
    goto LABEL_174;
  }
  v55 = v54;
  v56 = remakerFamily_getStorage(v1);
  v57 = CFArrayGetCount(*(CFArrayRef *)(v56 + 80));
  if (v57 >= 1)
  {
    v58 = v57;
    v59 = 0;
    v60 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v61 = (const __CFString *)*MEMORY[0x1E0CECFC8];
    do
    {
      v62 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 80), v59);
      if (!*((_BYTE *)v62 + 48))
      {
        v63 = v62;
        if (*((_DWORD *)v62 + 8) == 1986618469)
        {
          if (v62[36])
          {
            time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            v123.value = 0;
            if (remakerFamily_getExpectedDuration((uint64_t)v117, &time))
              break;
            valuePtr = time;
            v123.value = CMTimeGetSeconds(&valuePtr);
            v64 = CFNumberCreate(v60, kCFNumberDoubleType, &v123);
            v65 = (const void *)FigMediaProcessorGetVTCompressionSession(v63[36]);
            VTSessionSetProperty(v65, v61, v64);
            CFRelease(v64);
          }
        }
      }
      ++v59;
    }
    while (v58 != v59);
  }
  v1 = v117;
  v66 = remakerFamily_getStorage(v117);
  v67 = CFArrayGetCount(*(CFArrayRef *)(v66 + 80));
  if (v67 >= 1)
  {
    v68 = v67;
    v69 = 0;
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 80), v69);
      if (v70[8] != 1835365473)
        goto LABEL_138;
      v71 = v70;
      if (!*((_QWORD *)v70 + 36))
        goto LABEL_138;
      v72 = remakerFamily_getStorage(v1);
      valuePtr.value = 0;
      v73 = FigMediaProcessorGetSampleBufferProcessor(*((_QWORD *)v71 + 36));
      v74 = *(_QWORD *)(v72 + 72);
      if (!v74)
      {
        Mutable = 0;
        v94 = 0;
        goto LABEL_124;
      }
      v75 = v71[7];
      v76 = FigAssetGetCMBaseObject(v74);
      v77 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v77)
        break;
      v78 = v77(v76, CFSTR("assetProperty_TrackReferences"), allocatora, &valuePtr);
      if (v78)
        goto LABEL_146;
      value = (const __CFDictionary *)valuePtr.value;
      time.value = 0;
      if (!valuePtr.value)
        break;
      Mutable = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        if (CFDictionaryGetValueIfPresent(value, CFSTR("cdep"), (const void **)&time))
        {
          v81 = CFArrayGetCount((CFArrayRef)time.value);
          v82 = v81 >= 0 ? v81 : v81 + 1;
          if (v81 >= 2)
          {
            v83 = v82 >> 1;
            v84 = 1;
            do
            {
              v85 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)time.value, v84 - 1);
              LODWORD(v123.value) = 0;
              CFNumberGetValue(v85, kCFNumberSInt32Type, &v123);
              if (LODWORD(v123.value) == v75)
              {
                v86 = CFArrayGetValueAtIndex((CFArrayRef)time.value, v84);
                CFArrayAppendValue(Mutable, v86);
              }
              v84 += 2;
              --v83;
            }
            while (v83);
          }
        }
        v1 = v117;
      }
      else
      {
        v78 = FigSignalErrorAt();
        if (v78)
        {
LABEL_146:
          v94 = v78;
          Mutable = 0;
LABEL_124:
          v92 = 0;
LABEL_125:
          v93 = 0;
          goto LABEL_129;
        }
      }
      v87 = CFArrayGetCount(Mutable);
      if (v87 < 1)
      {
LABEL_121:
        v92 = 0;
        v93 = 0;
LABEL_122:
        v94 = 0;
        goto LABEL_129;
      }
      v88 = v87;
      v89 = 0;
      while (1)
      {
        LODWORD(time.value) = 0;
        v90 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, v89);
        CFNumberGetValue(v90, kCFNumberSInt32Type, &time);
        ChannelBySourceTrackID = remakerFamily_getChannelBySourceTrackID((uint64_t)v1, time.value);
        if (ChannelBySourceTrackID)
        {
          if (ChannelBySourceTrackID[80] > 1u)
            break;
        }
        if (v88 == ++v89)
          goto LABEL_121;
      }
      v95 = CFArrayCreate(allocatora, 0, 0, MEMORY[0x1E0C9B378]);
      v96 = v73;
      v92 = v95;
      v113 = v96;
      v97 = FigSampleBufferProcessorGetFigBaseObject(v96);
      v98 = *(uint64_t (**)(uint64_t, const __CFString *, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
      if (!v98)
        goto LABEL_127;
      v99 = v98(v97, CFSTR("SampleBufferProcessor_TransferMetadataBlacklistIdentifiers"), v92);
      if (v99)
      {
        v94 = v99;
        goto LABEL_125;
      }
      v93 = CFArrayCreate(allocatora, 0, 0, MEMORY[0x1E0C9B378]);
      v100 = FigSampleBufferProcessorGetFigBaseObject(v113);
      v101 = *(uint64_t (**)(uint64_t, const __CFString *, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
      if (!v101)
        goto LABEL_128;
      v102 = v101(v100, CFSTR("SampleBufferProcessor_TransferMetadataKeepValidIdentifiers"), v93);
      if (!v102)
        goto LABEL_122;
      v94 = v102;
LABEL_129:
      if (valuePtr.value)
        CFRelease((CFTypeRef)valuePtr.value);
      if (Mutable)
        CFRelease(Mutable);
      if (v93)
        CFRelease(v93);
      if (v92)
        CFRelease(v92);
      if (v94)
        goto LABEL_148;
LABEL_138:
      if (++v69 == v68)
        goto LABEL_148;
    }
    Mutable = 0;
    v92 = 0;
LABEL_127:
    v93 = 0;
LABEL_128:
    v94 = -12106;
    goto LABEL_129;
  }
LABEL_148:
  if (v55 >= 1)
  {
    v103 = 0;
    do
    {
      v104 = CFArrayGetValueAtIndex(*(CFArrayRef *)(Storage + 80), v103);
      if (*((_BYTE *)v104 + 360))
      {
        MultiPassPlaybackBossForTrack = remakerFamily_createMultiPassPlaybackBossForTrack((uint64_t)v104, v104 + 53);
        if ((_DWORD)MultiPassPlaybackBossForTrack)
          goto LABEL_174;
      }
    }
    while (v55 != ++v103);
  }
  MultiPassPlaybackBossForTrack = remakerFamily_createSinglePassPlaybackBoss(v1, (_QWORD *)(Storage + 376));
  if ((_DWORD)MultiPassPlaybackBossForTrack)
    goto LABEL_174;
  if (!*(_QWORD *)(Storage + 376))
    *(_BYTE *)(Storage + 384) = 1;
  v106 = *(_QWORD *)(Storage + 184);
  valuePtr = *(CMTime *)(Storage + 88);
  v107 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v107)
  {
    v111 = 4294954514;
    goto LABEL_172;
  }
  time = valuePtr;
  MultiPassPlaybackBossForTrack = v107(v106, &time);
  if ((_DWORD)MultiPassPlaybackBossForTrack
    || (remakerFamily_transferMetadata(v1),
        remakerFamily_registerPowerLogEvent(v1, CFSTR("Export_Started")),
        MultiPassPlaybackBossForTrack = remakerfamily_updateClientPID(),
        (_DWORD)MultiPassPlaybackBossForTrack)
    || (MultiPassPlaybackBossForTrack = remakerfamily_updateThrottleForBackground(v1),
        (_DWORD)MultiPassPlaybackBossForTrack)
    || (MultiPassPlaybackBossForTrack = remakerFamily_startAllMultiPassTracks((uint64_t)v1, v118),
        (_DWORD)MultiPassPlaybackBossForTrack)
    || !v118[0]
    && (MultiPassPlaybackBossForTrack = remakerFamily_startAllSinglePassTracks((uint64_t)v1),
        (_DWORD)MultiPassPlaybackBossForTrack))
  {
LABEL_174:
    v111 = MultiPassPlaybackBossForTrack;
    goto LABEL_172;
  }
  remakerFamily_SetRemakerState((uint64_t)v1, 3, 0);
  if (dword_1EE2A3000)
  {
    LODWORD(v123.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v108 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v109 = v123.value;
    if (os_log_type_enabled(v108, type[0]))
      v110 = v109;
    else
      v110 = v109 & 0xFFFFFFFE;
    if (v110)
    {
      LODWORD(valuePtr.value) = 136315394;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"remaker_StartOutput";
      LOWORD(valuePtr.flags) = 2048;
      *(_QWORD *)((char *)&valuePtr.flags + 2) = v1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  remakerFamily_safelyPostNotification(v1, 0, (uint64_t)CFSTR("Remaker_Started"), 0, v1);
  v111 = 0;
LABEL_172:
  remakerFamily_PostFailureNotificationIfError(v1, 0, v111, 1, 0);
  return v111;
}

uint64_t remaker_EstimateMaxSegmentDurationForFileSize(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t Storage;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;

  Storage = remakerFamily_getStorage(a1);
  cf = 0;
  if (*(_DWORD *)Storage >= 7u || !a2)
    return FigSignalErrorAt();
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(Storage + 72));
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
    return 4294954514;
  v8 = v7(CMBaseObject, CFSTR("assetProperty_FormatReader"), *MEMORY[0x1E0C9AE00], &cf);
  v9 = cf;
  if (!(_DWORD)v8)
  {
    v8 = EstimateMaximumTrimTimeForFileSize((uint64_t)cf, a2, a3);
    v9 = cf;
  }
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t remaker_AddAudioTrackWithPreset(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _DWORD *a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *);
  os_log_type_t type[8];
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = 0;
  if (*(_DWORD *)remakerFamily_getStorage(a1) >= 7u)
    return FigSignalErrorAt();
  if (dword_1EE2A3000)
  {
    LODWORD(v19) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a3)
    goto LABEL_9;
  if (CFEqual(a3, CFSTR("Preset_NoAudio")))
    goto LABEL_6;
  if (CFEqual(a3, CFSTR("Preset_Passthru")))
  {
LABEL_9:
    v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v12)
    {
      result = v12(a1, a2, &v20);
      if (a5 && !(_DWORD)result)
      {
LABEL_12:
        result = 0;
        *a5 = v20;
        return result;
      }
      return result;
    }
    return 4294954514;
  }
  v22[0] = 0;
  v21 = 0;
  *(_QWORD *)type = 0;
  v19 = 0;
  result = FigAudioCompressionOptionsGetPreset(a3, v22, &v21, &v19, (uint64_t *)type);
  if ((_DWORD)result)
    return result;
  v13 = v22[0];
  v14 = v21;
  v16 = *(_QWORD *)type;
  v15 = v19;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v17)
    return 4294954514;
  result = v17(a1, a2, v13, v14, v15, v16, a4, &v20);
  if (!(_DWORD)result)
  {
LABEL_6:
    if (!a5)
      return 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t remaker_AddAudioMixdownTrack(const void *a1, const __CFArray *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, uint64_t a6, const __CFDictionary *a7, _DWORD *a8)
{
  const void *v15;
  _DWORD *Storage;
  _DWORD *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int64_t Count;
  intptr_t *v20;
  __int128 v21;
  const __CFAllocator *v22;
  uint64_t v23;
  CFIndex v24;
  const __CFDictionary *ValueAtIndex;
  const void *v26;
  const __CFAllocator *v27;
  CFDictionaryRef v28;
  const void *v29;
  const void *v30;
  const __CFString *v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, uint64_t);
  const __CFAllocator *v36;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v38;
  int v39;
  const __CFAllocator *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t FigBaseObject;
  uint64_t (*v44)(uint64_t, const __CFString *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  intptr_t *v47;
  intptr_t v48;
  uint64_t AudioMixdownSourceTrack;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  intptr_t *v54;
  uint64_t v55;
  const __CFString *Value;
  const __CFArray *theArray;
  uint64_t v58;
  CFTypeRef cf;
  CMTime v60;
  CMTime v61;
  os_log_type_t type;
  int v63;
  CFTypeRef v64;
  CFTypeRef v65;
  CMAudioFormatDescriptionRef formatDescriptionOut;
  AudioStreamBasicDescription asbd;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  void *values[19];

  v15 = a1;
  values[16] = *(void **)MEMORY[0x1E0C80C00];
  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  v69 = 0;
  v68 = 0;
  memset(&asbd, 0, sizeof(asbd));
  v65 = 0;
  formatDescriptionOut = 0;
  v64 = 0;
  if (*Storage == 1 && a2 && a3 && *(_DWORD *)(a3 + 28) && *(double *)a3 != 0.0)
  {
    v17 = Storage;
    v53 = a6;
    v69 = bswap32(*(_DWORD *)(a3 + 8));
    v55 = a3;
    if (dword_1EE2A3000)
    {
      v63 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    theArray = a2;
    Count = CFArrayGetCount(a2);
    v20 = (intptr_t *)malloc_type_calloc(8uLL, Count, 0x6267D8D5uLL);
    if (a7)
      Value = (const __CFString *)CFDictionaryGetValue(a7, CFSTR("RemakerFamilyAudioProcessingOption_TimePitchAlgorithm"));
    else
      Value = 0;
    *(_QWORD *)&asbd.mBitsPerChannel = *(_QWORD *)(a3 + 32);
    v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&asbd.mSampleRate = *(_OWORD *)a3;
    asbd.mChannelsPerFrame = HIDWORD(v21);
    asbd.mBitsPerChannel = 32;
    *(_QWORD *)&asbd.mFormatID = 0x96C70636DLL;
    asbd.mFramesPerPacket = 1;
    asbd.mBytesPerFrame = 4 * HIDWORD(v21);
    asbd.mBytesPerPacket = 4 * HIDWORD(v21);
    v22 = CFGetAllocator(v15);
    v23 = CMAudioFormatDescriptionCreate(v22, &asbd, a4, a5, 0, 0, 0, &formatDescriptionOut);
    if (!(_DWORD)v23)
    {
      if (Count >= 1)
      {
        v51 = v17;
        v52 = a8;
        v58 = 0;
        cf = v15;
        v24 = 0;
        v54 = v20;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v24);
          v70 = 0;
          values[0] = 0;
          if (!FigCFDictionaryGetInt32IfPresent())
            break;
          values[0] = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("RemakerAudioMixdown_VolumeCurve"));
          if (values[0])
          {
            v26 = cf;
            v27 = CFGetAllocator(cf);
            v28 = CFDictionaryCreate(v27, (const void **)kFigAudioCurvesKey_Volume, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v28)
            {
              AudioMixdownSourceTrack = 4294954510;
LABEL_73:
              v15 = cf;
              v20 = v54;
              goto LABEL_57;
            }
          }
          else
          {
            v28 = 0;
            v26 = cf;
          }
          v29 = CFDictionaryGetValue(ValueAtIndex, CFSTR("RemakerAudioMixdown_AudioProcessingTap"));
          v30 = CFDictionaryGetValue(ValueAtIndex, CFSTR("RemakerAudioMixdown_CinematicAudioParameters"));
          v31 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("RemakerFamilyAudioProcessingOption_TimePitchAlgorithmSourceTrack"));
          if (v31)
            v32 = v31;
          else
            v32 = Value;
          AudioMixdownSourceTrack = remakerFamily_createAudioMixdownSourceTrack(v26, v70, v28, v29, v30, v32, 0, 0, v20);
          if (v28)
            CFRelease(v28);
          if ((_DWORD)AudioMixdownSourceTrack != -12123)
          {
            if ((_DWORD)AudioMixdownSourceTrack)
              goto LABEL_73;
            ++v58;
          }
          ++v24;
          ++v20;
          if (Count == v24)
          {
            v15 = cf;
            v20 = v54;
            if (!v58)
              goto LABEL_54;
            v23 = remakerFamily_createChannel(cf, 0, 1936684398, &v68);
            if (!(_DWORD)v23)
            {
              v33 = v68;
              *(_BYTE *)(v68 + 48) = 0;
              *(_BYTE *)(v33 + 50) = 1;
              v34 = *((_QWORD *)v51 + 23);
              v35 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
              if (!v35)
              {
                AudioMixdownSourceTrack = 4294954514;
                goto LABEL_57;
              }
              v23 = v35(v34, 1936684398, 0, v33 + 300);
              if (!(_DWORD)v23)
              {
                v23 = remakerFamily_setFormatWriterTrackProperties((uint64_t)cf, *(unsigned int *)(v68 + 300));
                if (!(_DWORD)v23)
                {
                  v23 = remakerFamily_setFormatWriterProperties((uint64_t)cf, *(_DWORD *)(v55 + 8));
                  if (!(_DWORD)v23)
                  {
                    v36 = CFGetAllocator(cf);
                    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                    v23 = CMBufferQueueCreate(v36, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v68 + 208));
                    if (!(_DWORD)v23)
                    {
                      v23 = remakerFamily_buildMediaProcessorForAudioCompressionFromLPCMWithFormatWriter(cf, v68, formatDescriptionOut, (double *)v55, a4, a5, v53, *(const void **)(v68 + 208));
                      if (!(_DWORD)v23)
                      {
                        v38 = *(_QWORD *)(v68 + 208);
                        CMTimeMake(&v61, 2, 1);
                        CMTimeMake(&v60, 1, 1);
                        v23 = FigSampleBufferConsumerCreateForBufferQueue(v38, (uint64_t)&v61, (uint64_t)&v60, &v65);
                        if (!(_DWORD)v23)
                        {
                          v39 = *((_BYTE *)v51 + 32) ? 0 : 31;
                          v23 = FigActivitySchedulerCreateForNewThread(*MEMORY[0x1E0C9AE00], v39, CFSTR("com.apple.coremedia.remakerOfflineMixer"), &v64);
                          if (!(_DWORD)v23)
                          {
                            v40 = CFGetAllocator(cf);
                            v23 = FigAudioQueueOfflineMixerCreate(v40, (__int128 *)&asbd, a4, a5, 0, v65, v64, (uint64_t *)(v68 + 200));
                            if (!(_DWORD)v23)
                            {
                              CMNotificationCenterGetDefaultLocalCenter();
                              v23 = FigNotificationCenterAddWeakListeners();
                              if (!(_DWORD)v23)
                              {
                                v41 = Count;
                                while (1)
                                {
                                  if (*v20)
                                  {
                                    v42 = *(_QWORD *)(v68 + 200);
                                    FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(*v20 + 56));
                                    v44 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                                    if (!v44)
                                    {
                                      AudioMixdownSourceTrack = 4294954514;
LABEL_60:
                                      remakerFamily_discardChannel((uint64_t)cf, v68);
                                      v20 = v54;
                                      goto LABEL_61;
                                    }
                                    v45 = v44(FigBaseObject, CFSTR("OfflineMixer"), v42);
                                    if ((_DWORD)v45)
                                    {
                                      AudioMixdownSourceTrack = v45;
                                      goto LABEL_60;
                                    }
                                    *(_DWORD *)(*v20 + 304) = *(_DWORD *)(v68 + 300);
                                  }
                                  ++v20;
                                  if (!--v41)
                                  {
                                    if (v52)
                                      *v52 = *(_DWORD *)(v68 + 300);
                                    v20 = v54;
                                    v46 = v54;
                                    AudioMixdownSourceTrack = Count;
                                    do
                                    {
                                      remakerFamily_commitChannel((uint64_t)cf, *v46);
                                      *v46++ = 0;
                                      --AudioMixdownSourceTrack;
                                    }
                                    while (AudioMixdownSourceTrack);
                                    remakerFamily_commitChannel((uint64_t)cf, v68);
                                    v68 = 0;
                                    goto LABEL_57;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_55;
          }
        }
        AudioMixdownSourceTrack = 0;
        goto LABEL_73;
      }
LABEL_54:
      v23 = FigSignalErrorAt();
    }
LABEL_55:
    AudioMixdownSourceTrack = v23;
LABEL_57:
    remakerFamily_discardChannel((uint64_t)v15, v68);
    if (v20)
    {
LABEL_61:
      if (Count >= 1)
      {
        v47 = v20;
        do
        {
          v48 = *v47++;
          remakerFamily_discardChannel((uint64_t)v15, v48);
          --Count;
        }
        while (Count);
      }
      free(v20);
    }
  }
  else
  {
    AudioMixdownSourceTrack = FigSignalErrorAt();
    remakerFamily_discardChannel((uint64_t)v15, 0);
  }
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (v65)
    CFRelease(v65);
  if (v64)
    CFRelease(v64);
  return AudioMixdownSourceTrack;
}

uint64_t remaker_AddAudioMixdownTrackWithPreset(const void *a1, const __CFArray *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Preset;
  signed int v11;
  CFIndex v12;
  int SourceASBDForTrackID;
  signed int v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t (*v22)(const void *, const __CFArray *, _OWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t);
  uint64_t v23;
  CFTypeRef cf;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD v30[2];
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  cf = 0;
  if (*(_DWORD *)remakerFamily_getStorage(a1) >= 7u)
    return FigSignalErrorAt();
  if (a3)
  {
    Preset = FigAudioCompressionOptionsGetPreset(a3, (uint64_t *)&v29, &v28, &v27, &v26);
    if (!(_DWORD)Preset)
    {
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      if (CFArrayGetCount(a2) >= 1)
      {
        v11 = 0;
        v12 = 0;
        do
        {
          CFArrayGetValueAtIndex(a2, v12);
          v32 = 0;
          if (!FigCFDictionaryGetInt32IfPresent())
          {
            v11 = 0;
            goto LABEL_14;
          }
          SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, v32, (uint64_t)&v33);
          v14 = HIDWORD(v34);
          if (HIDWORD(v34) <= v11)
            v14 = v11;
          if (!SourceASBDForTrackID)
            v11 = v14;
          ++v12;
        }
        while (v12 < CFArrayGetCount(a2));
        if (v11 >= 1)
          goto LABEL_14;
      }
      Preset = FigSignalErrorAt();
      v11 = 0;
      if (!(_DWORD)Preset)
      {
LABEL_14:
        v35 = 0;
        v33 = 0u;
        v34 = 0u;
        Count = CFArrayGetCount(a2);
        if (Count < 1)
        {
          v18 = 0.0;
        }
        else
        {
          v16 = Count;
          v17 = 0;
          v18 = 0.0;
          do
          {
            CFArrayGetValueAtIndex(a2, v17);
            v32 = 0;
            if (!FigCFDictionaryGetInt32IfPresent()
              || remakerFamily_getSourceASBDForTrackID(a1, v32, (uint64_t)&v33))
            {
              break;
            }
            if (*(double *)&v33 > v18)
              v18 = *(double *)&v33;
            ++v17;
          }
          while (v16 != v17);
        }
        Preset = remaker_createSanitizedDestinationASBDAndAudioOptions(v11, v29, v27 != 0, v18, v26, (uint64_t)v30, (__CFDictionary **)&cf);
        if (!(_DWORD)Preset)
        {
          v20 = v27;
          v19 = v28;
          v21 = cf;
          v22 = *(uint64_t (**)(const void *, const __CFArray *, _OWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
          if (!v22)
          {
            v23 = 4294954514;
            goto LABEL_28;
          }
          Preset = v22(a1, a2, v30, v19, v20, v21, a4, a5);
        }
      }
    }
  }
  else
  {
    Preset = FigSignalErrorAt();
  }
  v23 = Preset;
LABEL_28:
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t remaker_AddVideoCompositionTrack(const void *a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5, const __CFString *a6, const void *a7, const void *a8, int a9, const __CFArray *a10, uint64_t a11, const void *a12, uint64_t a13, unsigned int a14, int a15, int a16, int32_t a17, int32_t a18, CFDictionaryRef theDict, int a20,const __CFDictionary *a21,const __CFDictionary *a22,const __CFDictionary *a23,CFTypeRef cf,_DWORD *a25)
{
  _DWORD *Storage;
  _QWORD *v33;
  CFTypeID v34;
  _QWORD *v35;
  const void *v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t Basic;
  intptr_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, intptr_t);
  CFAllocatorRef v42;
  const __CFAllocator *v43;
  const __CFArray *v44;
  const __CFArray *v45;
  uint64_t v46;
  const void *Value;
  uint64_t SampleBufferProcessor;
  uint64_t FigBaseObject;
  void (*v50)(uint64_t, const __CFString *, _QWORD);
  const void *VTCompressionSession;
  const __CFString *v52;
  const __CFAllocator *v53;
  const void *v54;
  uint64_t v55;
  const void *v56;
  const void *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v62;
  uint64_t CMBaseObject;
  uint64_t (*v64)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, const __CFString *, const void *);
  const void *v71;
  const __CFArray *v72;
  __int128 v74;
  uint64_t v75;
  CFTypeRef v76;
  CFTypeRef v77;
  void *propertyValueOut;
  CFTypeRef v79;
  void *values;
  intptr_t v81;
  unsigned int v82;
  __int128 valuePtr;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  Storage = (_DWORD *)remakerFamily_getStorage(a1);
  v82 = bswap32(a20);
  values = 0;
  v81 = 0;
  propertyValueOut = 0;
  v79 = 0;
  v76 = 0;
  v77 = 0;
  v74 = *(_OWORD *)a13;
  v75 = *(_QWORD *)(a13 + 16);
  if (*Storage != 1
    || !a2
    || (v72 = a3, !a7)
    || a15 < 1
    || a16 < 1
    || a17 < 1
    || a18 < 1
    || !a20
    || (v33 = Storage, (*(_DWORD *)(a13 + 12) & 0x1D) != 1)
    || cf && (v34 = CFGetTypeID(cf), v34 != CFDictionaryGetTypeID()))
  {
    v55 = FigSignalErrorAt();
    v36 = a1;
    goto LABEL_35;
  }
  v71 = a8;
  v35 = v33;
  v36 = a1;
  if (dword_1EE2A3000)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Basic = remakerFamily_createChannel(a1, 0, 1986618469, &v81);
  if ((_DWORD)Basic)
    goto LABEL_72;
  v39 = v81;
  *(_BYTE *)(v81 + 48) = 0;
  *(_BYTE *)(v39 + 50) = 1;
  v40 = v35[23];
  v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, intptr_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v41)
  {
    v55 = 4294954514;
LABEL_35:
    remakerFamily_discardChannel((uint64_t)v36, v81);
    goto LABEL_62;
  }
  Basic = v41(v40, 1986618469, 0, v39 + 300);
  if ((_DWORD)Basic
    || (Basic = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v81 + 300)), (_DWORD)Basic)
    || (Basic = remakerFamily_setFormatWriterProperties((uint64_t)a1, a20), (_DWORD)Basic)
    || (v42 = CFGetAllocator(a1),
        Basic = FigVisualContextCreateBasic((uint64_t)v42, 0, (CFTypeRef *)&values),
        (_DWORD)Basic)
    || (Basic = remakerFamily_createRemakerVideoEncoderSpecification(a1, a21, (__CFDictionary **)&v79), (_DWORD)Basic)
    || (Basic = remakerFamily_setupMultiPassTrackIfNecessary(a1, v81), (_DWORD)Basic))
  {
LABEL_72:
    v55 = Basic;
    goto LABEL_35;
  }
  if (a14)
  {
    v74 = *MEMORY[0x1E0CA2E18];
    v75 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v43 = CFGetAllocator(a1);
  v44 = CFArrayCreate(v43, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v44)
  {
    v55 = 4294955196;
    goto LABEL_35;
  }
  v45 = v44;
  valuePtr = v74;
  v84 = v75;
  v46 = remakerFamily_setupCompressionMediaProcessorAndFileOutput(a1, a17, a18, a20, &valuePtr, (const __CFDictionary *)v79, 0, v81, 0, v44, a22);
  if ((_DWORD)v46)
    goto LABEL_73;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED848]);
    if (!Value || CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CEDB40]))
    {
      SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(_QWORD *)(v81 + 288));
      FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
      v50 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v50)
        v50(FigBaseObject, CFSTR("SampleBufferProcessor_InheritOutputCleanApertureFromInput"), *MEMORY[0x1E0C9AE50]);
    }
  }
  FigCFDictionaryGetDoubleIfPresent();
  VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*(_QWORD *)(v81 + 288));
  v52 = (const __CFString *)*MEMORY[0x1E0CED268];
  v53 = CFGetAllocator(v36);
  v46 = VTSessionCopyProperty(VTCompressionSession, v52, v53, &propertyValueOut);
  if ((_DWORD)v46)
  {
LABEL_73:
    v55 = v46;
  }
  else
  {
    if (a23)
      v54 = CFDictionaryGetValue(a23, CFSTR("Remaker_FieldMode"));
    else
      v54 = 0;
    v56 = (const void *)v35[59];
    v35[59] = a4;
    if (a4)
      CFRetain(a4);
    if (v56)
      CFRelease(v56);
    v57 = (const void *)v35[60];
    v35[60] = a5;
    if (a5)
      CFRetain(a5);
    if (v57)
      CFRelease(v57);
    valuePtr = *(_OWORD *)a13;
    v84 = *(_QWORD *)(a13 + 16);
    v58 = remakerFamily_finishVideoCompositionChannel(v36, v81, a2, v72, a6, a7, v71, a9, a10, a11, a12, &valuePtr, a14, a15, a16, v54, theDict, (const __CFDictionary *)cf, (uint64_t)values,
            propertyValueOut);
    if ((_DWORD)v58)
    {
      v55 = v58;
    }
    else
    {
      if (a25)
        *a25 = *(_DWORD *)(v81 + 300);
      if (!a14)
      {
        v66 = *(_DWORD *)(a13 + 8);
        if (v66 <= 600)
          v66 = 600;
        LODWORD(valuePtr) = v66;
        v65 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        v77 = v65;
        v59 = v35;
        goto LABEL_57;
      }
      v59 = v35;
      v60 = v35[9];
      v61 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v61)
      {
        v62 = v61(v60, a14, &v76);
        if ((_DWORD)v62)
        {
LABEL_77:
          v55 = v62;
          goto LABEL_61;
        }
        CMBaseObject = FigAssetTrackGetCMBaseObject(v76);
        v64 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v64)
        {
          v62 = v64(CMBaseObject, CFSTR("NaturalTimeScale"), *MEMORY[0x1E0C9AE00], &v77);
          if (!(_DWORD)v62)
          {
            v65 = v77;
LABEL_57:
            v67 = v59[23];
            v68 = *(unsigned int *)(v81 + 300);
            v69 = *(void (**)(uint64_t, uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 24);
            if (v69)
              v69(v67, v68, CFSTR("MediaTimeScale"), v65);
            remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)v36, (uint64_t)v77, 1986618469);
            CFRelease(v77);
            v55 = 0;
            v81 = 0;
            goto LABEL_61;
          }
          goto LABEL_77;
        }
        v55 = 4294954514;
      }
      else
      {
        v55 = 4294954514;
      }
    }
  }
LABEL_61:
  remakerFamily_discardChannel((uint64_t)v36, v81);
  CFRelease(v45);
LABEL_62:
  if (values)
    CFRelease(values);
  if (v79)
    CFRelease(v79);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  if (v76)
    CFRelease(v76);
  return v55;
}

uint64_t remaker_AddPassthroughTrackWithOptions(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t Storage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t Channel;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, _QWORD, unsigned int *);
  CFTypeID v14;
  FourCharCode MediaSubType;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, uint64_t);
  CFAllocatorRef v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CMTime v29;
  CMTime v30;
  os_log_type_t type;
  int v32;
  char v33;
  CMFormatDescriptionRef desc;
  unsigned int v35;
  CFTypeRef cf;
  uint64_t v37[23];

  v37[22] = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  cf = 0;
  v37[0] = 0;
  v35 = 0;
  desc = 0;
  v33 = 0;
  if (dword_1EE2A3000)
  {
    v32 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)Storage != 1)
    goto LABEL_40;
  v9 = *(_QWORD *)(Storage + 72);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v10)
    goto LABEL_34;
  Channel = v10(v9, a2, &cf);
  if ((_DWORD)Channel)
  {
LABEL_41:
    v27 = Channel;
    goto LABEL_35;
  }
  v12 = cf;
  v13 = *(uint64_t (**)(CFTypeRef, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v13)
    goto LABEL_34;
  Channel = v13(v12, 0, &v35);
  if ((_DWORD)Channel)
    goto LABEL_41;
  Channel = remakerFamily_createChannel(a1, a2, v35, v37);
  if ((_DWORD)Channel)
    goto LABEL_41;
  v14 = CFGetTypeID(a1);
  Channel = remakerFamily_copyFormatDescription(v14, (uint64_t)cf, &desc);
  if ((_DWORD)Channel)
    goto LABEL_41;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v16 = v35;
  if (v35 == 1936684398)
  {
    v17 = desc;
    if (desc)
    {
      v17 = (void *)CFRetain(desc);
      v16 = v35;
    }
    else
    {
      v16 = 1936684398;
    }
    v18 = v37[0];
    *(_QWORD *)(v37[0] + 40) = v17;
  }
  else
  {
    v18 = v37[0];
  }
  *(_BYTE *)(v18 + 48) = 1;
  v19 = *(_BYTE *)(Storage + 208) && (_DWORD)v16 == 1936684398;
  v20 = v19;
  *(_BYTE *)(v18 + 50) = v20;
  v21 = *(_QWORD *)(Storage + 184);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v22)
  {
LABEL_34:
    v27 = 4294954514;
    goto LABEL_35;
  }
  Channel = v22(v21, v16, 0, v18 + 300);
  if ((_DWORD)Channel)
    goto LABEL_41;
  Channel = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v37[0] + 300));
  if ((_DWORD)Channel)
    goto LABEL_41;
  Channel = remakerFamily_setFormatWriterProperties((uint64_t)a1, MediaSubType);
  if ((_DWORD)Channel)
    goto LABEL_41;
  Channel = remaker_transferTrackSettingsForPassthrough((uint64_t)a1, v35, (uint64_t)cf, *(_QWORD *)(Storage + 184), *(_DWORD *)(v37[0] + 300));
  if ((_DWORD)Channel)
    goto LABEL_41;
  FigCFDictionaryGetBooleanIfPresent();
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    if (v35 == 1986618469)
    {
      *(_BYTE *)(v37[0] + 49) = 1;
      goto LABEL_30;
    }
LABEL_40:
    Channel = FigSignalErrorAt();
    goto LABEL_41;
  }
LABEL_30:
  v23 = CFGetAllocator(a1);
  v24 = *(const void **)(Storage + 184);
  v25 = *(unsigned int *)(v37[0] + 300);
  CMTimeMake(&v30, 2, 1);
  CMTimeMake(&v29, 1, 1);
  Channel = FigRenderPipelineCreateForWritingTrack((uint64_t)v23, v24, v25, (__int128 *)&v30.value, (uint64_t)&v29, (CFTypeRef *)(v37[0] + 56));
  if ((_DWORD)Channel)
    goto LABEL_41;
  v26 = v37[0];
  if (a4)
    *a4 = *(_DWORD *)(v37[0] + 300);
  remakerFamily_commitChannel((uint64_t)a1, v26);
  v27 = 0;
  v37[0] = 0;
LABEL_35:
  remakerFamily_discardChannel((uint64_t)a1, v37[0]);
  if (desc)
    CFRelease(desc);
  if (cf)
    CFRelease(cf);
  return v27;
}

uint64_t remaker_CanPerformFastFrameRateConversion(const void *a1, int a2, __int128 *a3)
{
  _QWORD *v6;
  CFTypeRef v7;
  __int128 v8;
  NSObject *v9;

  remakerFamily_getStorage(a1);
  v6 = malloc_type_malloc(0x30uLL, 0x102004002AA219BuLL);
  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  v6[4] = v7;
  v8 = *a3;
  v6[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)v6 = v8;
  *((_DWORD *)v6 + 6) = a2;
  v9 = FigDispatchQueueCreateWithPriorityAndClientPID();
  v6[5] = v9;
  dispatch_async_f(v9, v6, (dispatch_function_t)remaker_CanPerformFastFrameRateConversionWork);
  return 0;
}

uint64_t remaker_AddTemporalMetadataTrackWithOptions(const void *a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  const void *v5;
  uint64_t Storage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t RenderPipelineOptions;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, _QWORD, unsigned int *);
  CFTypeID v13;
  CFTypeRef v14;
  uint64_t v15;
  const void *v16;
  const __CFDictionary *v17;
  int64_t Count;
  const void **v19;
  const void **v20;
  const __CFAllocator *v21;
  __CFArray *Mutable;
  uint64_t i;
  CFIndex v24;
  CFIndex v25;
  CFIndex j;
  const void *ValueAtIndex;
  uint64_t v28;
  int v29;
  uint64_t CMBaseObject;
  uint64_t (*v31)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  uint64_t v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  const void *v36;
  const opaqueCMFormatDescription *v37;
  const __CFDictionary *Extensions;
  const __CFDictionary *Value;
  const __CFDictionary *v40;
  int64_t v41;
  const void **v42;
  const void **v43;
  const void *v44;
  const void **v45;
  const void *IdentifierForLocalID;
  const __CFArray *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  FourCharCode MediaSubType;
  const __CFAllocator *v54;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v56;
  uint64_t v57;
  CFAllocatorRef v58;
  void (*v59)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, uint64_t *);
  const __CFAllocator *v60;
  const void *v61;
  uint64_t v62;
  int v63;
  CFAllocatorRef v64;
  CMFormatDescriptionRef v65;
  CFAllocatorRef v66;
  uint64_t v67;
  CMTime *v68;
  const void *v70;
  _DWORD *v71;
  int v72;
  CFIndex v73;
  uint64_t v74;
  _BYTE v76[24];
  _BYTE v77[24];
  CMTime v78;
  CMTime v79;
  os_log_type_t type;
  int v81;
  uint64_t v82;
  CFTypeRef cf;
  CMFormatDescriptionRef desc;
  unsigned int v85;
  CFTypeRef v86;
  uint64_t v87;
  CFStringRef identifierOut;
  CMTime v89;
  uint64_t v90;
  CFRange v91;

  v5 = a1;
  v90 = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  v86 = 0;
  v87 = 0;
  v85 = 1835365473;
  cf = 0;
  desc = 0;
  v82 = 0;
  v74 = Storage;
  if (dword_1EE2A3000)
  {
    v81 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Storage = v74;
  }
  if (*(_DWORD *)Storage != 1)
    goto LABEL_78;
  v8 = *(_QWORD *)(Storage + 72);
  v9 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v9)
    goto LABEL_70;
  v71 = a4;
  RenderPipelineOptions = v9(v8, a2, &v86);
  if ((_DWORD)RenderPipelineOptions)
    goto LABEL_79;
  v11 = v86;
  v12 = *(uint64_t (**)(CFTypeRef, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v12)
  {
LABEL_70:
    v28 = 4294954514;
    goto LABEL_71;
  }
  RenderPipelineOptions = v12(v11, 0, &v85);
  if ((_DWORD)RenderPipelineOptions)
    goto LABEL_79;
  if (v85 != 1835365473)
    goto LABEL_78;
  v13 = CFGetTypeID(v5);
  RenderPipelineOptions = remakerFamily_copyFormatDescription(v13, (uint64_t)v86, &desc);
  if ((_DWORD)RenderPipelineOptions)
    goto LABEL_79;
  if (CMFormatDescriptionGetMediaSubType(desc) != 1835360888)
  {
LABEL_78:
    RenderPipelineOptions = FigSignalErrorAt();
    goto LABEL_79;
  }
  v14 = v86;
  v15 = remakerFamily_getStorage(v5);
  v89.value = 0;
  v16 = *(const void **)(v15 + 416);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(v15 + 416) = 0;
  }
  v17 = *(const __CFDictionary **)(v15 + 408);
  if (!v17)
  {
    v28 = 0;
    v29 = 1;
    goto LABEL_47;
  }
  v70 = v5;
  Count = CFDictionaryGetCount(v17);
  v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  v20 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v15 + 408), v19, v20);
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v24 = CFArrayGetCount((CFArrayRef)v20[i]);
      if (v24 >= 1)
      {
        v25 = v24;
        for (j = 0; j != v25; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v20[i], j);
          identifierOut = 0;
          if (!CMMetadataCreateIdentifierForKeyAndKeySpace(v21, ValueAtIndex, (CFStringRef)v19[i], &identifierOut))
          {
            CFArrayAppendValue(Mutable, identifierOut);
            if (identifierOut)
              CFRelease(identifierOut);
          }
        }
      }
    }
  }
  free(v19);
  free(v20);
  if (Mutable)
  {
    *(_QWORD *)(v15 + 416) = CFRetain(Mutable);
    CFRelease(Mutable);
  }
  else
  {
    *(_QWORD *)(v15 + 416) = 0;
  }
  CMBaseObject = FigAssetTrackGetCMBaseObject(v14);
  v31 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v31)
  {
    v29 = 0;
    v28 = 4294954514;
LABEL_45:
    v5 = v70;
    goto LABEL_47;
  }
  v32 = v31(CMBaseObject, CFSTR("FormatDescriptionArray"), v21, &v89);
  if ((_DWORD)v32)
  {
    v28 = v32;
    v29 = 0;
    goto LABEL_45;
  }
  if (!v89.value)
  {
    v28 = 4294955173;
    v5 = v70;
    goto LABEL_71;
  }
  v33 = CFArrayGetCount((CFArrayRef)v89.value);
  v5 = v70;
  if (v33)
  {
    v34 = v33;
    if (v33 < 1)
    {
      v29 = 0;
      v28 = 0;
    }
    else
    {
      v35 = 0;
      v72 = 0;
      v36 = (const void *)*MEMORY[0x1E0CA2138];
      v73 = v33;
      do
      {
        v37 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)v89.value, v35);
        Extensions = CMFormatDescriptionGetExtensions(v37);
        Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v36);
        if (Value)
        {
          v40 = Value;
          v41 = CFDictionaryGetCount(Value);
          v42 = (const void **)malloc_type_calloc(v41, 8uLL, 0x6004044C4A2DFuLL);
          v43 = (const void **)malloc_type_calloc(v41, 8uLL, 0x6004044C4A2DFuLL);
          CFDictionaryGetKeysAndValues(v40, v42, v43);
          if (v41 >= 1)
          {
            v44 = v36;
            v45 = v43;
            while (1)
            {
              FigMetadataKeyGetLocalIDUInt32();
              IdentifierForLocalID = (const void *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
              v47 = *(const __CFArray **)(v15 + 416);
              v91.length = CFArrayGetCount(v47);
              v91.location = 0;
              if (CFArrayContainsValue(v47, v91, IdentifierForLocalID))
                break;
              ++v45;
              if (!--v41)
                goto LABEL_40;
            }
            v72 = 1;
LABEL_40:
            v36 = v44;
            v34 = v73;
          }
          free(v42);
          free(v43);
        }
        ++v35;
      }
      while (v35 != v34);
      v28 = 0;
      v5 = v70;
      v29 = v72;
    }
  }
  else
  {
    v29 = 0;
    v28 = 4294955173;
  }
LABEL_47:
  if (v89.value)
    CFRelease((CFTypeRef)v89.value);
  if (!(_DWORD)v28 && v29)
  {
    RenderPipelineOptions = remakerFamily_createChannel(v5, a2, v85, &v87);
    if ((_DWORD)RenderPipelineOptions)
      goto LABEL_79;
    v48 = v87;
    *(_BYTE *)(v87 + 48) = 0;
    *(_BYTE *)(v48 + 50) = 1;
    v49 = *(_QWORD *)(v74 + 184);
    v50 = v85;
    v51 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v51)
    {
      RenderPipelineOptions = v51(v49, v50, 0, v48 + 300);
      if (!(_DWORD)RenderPipelineOptions)
      {
        v52 = *(unsigned int *)(v87 + 300);
        CMFormatDescriptionGetMediaSubType(desc);
        RenderPipelineOptions = remakerFamily_setFormatWriterTrackProperties((uint64_t)v5, v52);
        if (!(_DWORD)RenderPipelineOptions)
        {
          MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
          RenderPipelineOptions = remakerFamily_setFormatWriterProperties((uint64_t)v5, MediaSubType);
          if (!(_DWORD)RenderPipelineOptions)
          {
            v54 = CFGetAllocator(v5);
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            RenderPipelineOptions = CMBufferQueueCreate(v54, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v87 + 312));
            if (!(_DWORD)RenderPipelineOptions)
            {
              v56 = *(_QWORD *)(v74 + 184);
              v57 = *(unsigned int *)(v87 + 300);
              v58 = CFGetAllocator(v5);
              v59 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v59)
                v59(v56, v57, CFSTR("SourceSampleBufferQueue"), v58, &v82);
              v60 = CFGetAllocator(v5);
              v61 = *(const void **)(v87 + 312);
              v62 = v82;
              CMTimeMake(&v79, 1, 10);
              CMTimeMake(&v78, 1, 30);
              v63 = *(_BYTE *)(v74 + 32) ? 0 : 31;
              RenderPipelineOptions = FigMediaProcessorCreateForTemporalMetadataFilter(v60, v61, v62, (__int128 *)&v79.value, (__int128 *)&v78.value, *(const void **)(v74 + 416), 0, v63, (uint64_t *)(v87 + 288));
              if (!(_DWORD)RenderPipelineOptions)
              {
                CMNotificationCenterGetDefaultLocalCenter();
                RenderPipelineOptions = FigNotificationCenterAddWeakListeners();
                if (!(_DWORD)RenderPipelineOptions)
                {
                  v64 = CFGetAllocator(v5);
                  v65 = desc;
                  remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(v74 + 32), (uint64_t)v77);
                  remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(v74 + 32), (uint64_t)v76);
                  RenderPipelineOptions = remakerFamily_createRenderPipelineOptions((uint64_t)v64, v65, (uint64_t)v77, (uint64_t)v76, 0, 0, *(unsigned __int8 *)(v74 + 424), 0, 0, *(_BYTE *)(v74 + 32), 0, 0, v74 + 41, a2, (__CFDictionary **)&cf);
                  if (!(_DWORD)RenderPipelineOptions)
                  {
                    v66 = CFGetAllocator(v5);
                    RenderPipelineOptions = FigRenderPipelineCreateForBufferQueue((uint64_t)v66, *(const void **)(v87 + 312), 0, (CFTypeRef *)(v87 + 56));
                    if (!(_DWORD)RenderPipelineOptions)
                    {
                      v67 = v87;
                      if (v71)
                        *v71 = *(_DWORD *)(v87 + 300);
                      v28 = remaker_transferTrackSettingsForPassthrough((uint64_t)v5, 1835365473, (uint64_t)v86, *(_QWORD *)(v74 + 184), *(_DWORD *)(v67 + 300));
                      if (!(_DWORD)v28)
                      {
                        v68 = (CMTime *)(v87 + 328);
                        CMTimeMake(&v89, 1, 30);
                        *v68 = v89;
                        remakerFamily_commitChannel((uint64_t)v5, v87);
                        v87 = 0;
                      }
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_79:
      v28 = RenderPipelineOptions;
      goto LABEL_71;
    }
    goto LABEL_70;
  }
LABEL_71:
  remakerFamily_discardChannel((uint64_t)v5, v87);
  if (desc)
    CFRelease(desc);
  if (cf)
    CFRelease(cf);
  if (v86)
    CFRelease(v86);
  FigBufferQueueRelease();
  return v28;
}

uint64_t remaker_AddCaptionTrack(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t Storage;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t Channel;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, _QWORD, int *);
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, uint64_t);
  const __CFAllocator *v21;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  CFAllocatorRef v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v31;
  CMTime v33;
  CMTime v34;
  int v35;
  CFTypeRef cf;
  uint64_t v37[23];

  v37[22] = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(a1);
  cf = 0;
  v37[0] = 0;
  v35 = 0;
  if (*(_DWORD *)Storage != 1)
  {
    Channel = FigSignalErrorAt();
    goto LABEL_30;
  }
  v12 = Storage;
  v13 = *(_QWORD *)(Storage + 72);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v14)
  {
LABEL_24:
    v31 = 4294954514;
    goto LABEL_26;
  }
  Channel = v14(v13, a2, &cf);
  if ((_DWORD)Channel)
  {
LABEL_30:
    v31 = Channel;
    goto LABEL_26;
  }
  v16 = cf;
  v17 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v17)
    goto LABEL_24;
  Channel = v17(v16, 0, &v35);
  if ((_DWORD)Channel)
    goto LABEL_30;
  Channel = remakerFamily_createChannel(a1, a2, a3, v37);
  if ((_DWORD)Channel)
    goto LABEL_30;
  v18 = *(_QWORD *)(v12 + 184);
  v19 = v37[0];
  v20 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v20)
    goto LABEL_24;
  Channel = v20(v18, a3, 0, v19 + 300);
  if ((_DWORD)Channel)
    goto LABEL_30;
  Channel = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v37[0] + 300));
  if ((_DWORD)Channel)
    goto LABEL_30;
  Channel = remakerFamily_setFormatWriterProperties((uint64_t)a1, a4);
  if ((_DWORD)Channel)
    goto LABEL_30;
  Channel = remaker_transferTrackSettingsForPassthrough((uint64_t)a1, a3, (uint64_t)cf, *(_QWORD *)(v12 + 184), *(_DWORD *)(v37[0] + 300));
  if ((_DWORD)Channel)
    goto LABEL_30;
  v21 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  Channel = CMBufferQueueCreate(v21, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v37[0] + 248));
  if ((_DWORD)Channel)
    goto LABEL_30;
  v23 = CFGetAllocator(a1);
  Channel = FigRenderPipelineCreateForBufferQueue((uint64_t)v23, *(const void **)(v37[0] + 248), 0, (CFTypeRef *)(v37[0] + 56));
  if ((_DWORD)Channel)
    goto LABEL_30;
  CMNotificationCenterGetDefaultLocalCenter();
  Channel = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)Channel)
    goto LABEL_30;
  v24 = *MEMORY[0x1E0C9AE00];
  v25 = *(const void **)(v37[0] + 248);
  v26 = *(const void **)(v12 + 184);
  v27 = *(unsigned int *)(v37[0] + 300);
  CMTimeMake(&v34, 2, 1);
  CMTimeMake(&v33, 1, 1);
  v28 = *(_BYTE *)(v12 + 32) ? 0 : 31;
  Channel = FigMediaProcessorCreateForCaptionConversionWithFormatWriter(v24, a3, a4, v25, v26, v27, (__int128 *)&v34.value, (uint64_t)&v33, v28, (uint64_t *)(v37[0] + 288));
  if ((_DWORD)Channel)
    goto LABEL_30;
  CMNotificationCenterGetDefaultLocalCenter();
  Channel = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)Channel)
    goto LABEL_30;
  v29 = v37[0];
  *(_BYTE *)(v37[0] + 52) = 1;
  if (a6)
    *a6 = *(_DWORD *)(v29 + 300);
  if (dword_1EE2A3000)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v29 = v37[0];
  }
  remakerFamily_commitChannel((uint64_t)a1, v29);
  v31 = 0;
  v37[0] = 0;
LABEL_26:
  remakerFamily_discardChannel((uint64_t)a1, v37[0]);
  if (cf)
    CFRelease(cf);
  return v31;
}

uint64_t remaker_createSanitizedDestinationASBDAndAudioOptions(unsigned int a1, __int128 *a2, int a3, double a4, uint64_t a5, uint64_t a6, __CFDictionary **a7)
{
  uint64_t MutableCopy;
  __CFDictionary *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  UInt32 outPropertyDataSize;
  unsigned int v29;

  v29 = 0;
  if (!a2)
    return FigSignalErrorAt();
  if (!a6)
    return FigSignalErrorAt();
  if (!a7)
    return FigSignalErrorAt();
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return FigSignalErrorAt();
  v14 = (__CFDictionary *)MutableCopy;
  v16 = *a2;
  v15 = a2[1];
  *(_QWORD *)(a6 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a6 = v16;
  *(_OWORD *)(a6 + 16) = v15;
  if (*(double *)a6 == 0.0)
  {
    *(double *)a6 = a4;
  }
  else if (*(double *)a6 > a4)
  {
    outPropertyDataSize = 0;
    if (!AudioFormatGetPropertyInfo(0x61657372u, 4u, (const void *)(a6 + 8), &outPropertyDataSize))
    {
      v17 = (char *)malloc_type_malloc(outPropertyDataSize, 0x56FBC43CuLL);
      if (AudioFormatGetProperty(0x61657372u, 4u, (const void *)(a6 + 8), &outPropertyDataSize, v17)
        || outPropertyDataSize <= 0xF)
      {
        free(v17);
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v27 = outPropertyDataSize & 0xFFFFFFF0;
        do
        {
          if (*(double *)&v17[v25] <= a4 && *(double *)&v17[v25 + 8] >= a4)
          {
            *(double *)a6 = a4;
            v26 = 1;
          }
          v25 += 16;
        }
        while (v27 != v25);
        free(v17);
        if (v26)
          CFDictionarySetValue(v14, CFSTR("FigAudioCompressionOption__AudioConverterEncoderCanAdjustBitRate"), (const void *)*MEMORY[0x1E0C9AE50]);
      }
    }
  }
  v18 = *(_DWORD *)(a6 + 28);
  if (v18)
    v19 = *(_DWORD *)(a6 + 28);
  else
    v19 = a1;
  if (a3)
    v20 = 0;
  else
    v20 = v19 > a1;
  v21 = v20;
  if (!v18 || v21)
  {
    if (v21)
      v19 = a1;
    *(_DWORD *)(a6 + 28) = v19;
  }
  if (FigCFDictionaryGetInt32IfPresent()
    && *((_DWORD *)a2 + 2) == 1633772392
    && v29 > 40000 * *(_DWORD *)(a6 + 28)
    && (v22 = FigCFDictionarySetInt32(), (_DWORD)v22))
  {
    v23 = v22;
    CFRelease(v14);
  }
  else
  {
    v23 = 0;
    *a7 = v14;
  }
  return v23;
}

uint64_t remaker_transferTrackSettingsForPassthrough(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v13;
  uint64_t (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef);
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFNumberRef v22;
  uint64_t (*v23)(uint64_t, _QWORD, const __CFString *, CFNumberRef);
  unsigned int v24;
  CFTypeRef v30;
  uint64_t valuePtr;
  CFTypeRef v32;
  CFTypeRef cf;
  _QWORD v34[34];

  v7 = 0;
  v34[32] = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  v32 = 0;
  v30 = 0;
  v34[0] = CFSTR("IsEnabled");
  v34[1] = CFSTR("EnableTrack");
  v34[2] = CFSTR("AlternateGroupID");
  v34[3] = CFSTR("AlternateGroupID");
  v34[4] = CFSTR("LanguageCode");
  v34[5] = CFSTR("LanguageTag");
  v34[6] = CFSTR("ExtendedLanguageTag");
  v34[7] = CFSTR("ExtendedLanguageTag");
  v34[8] = CFSTR("Layer");
  v34[9] = CFSTR("Layer");
  v34[10] = CFSTR("Volume");
  v34[11] = CFSTR("TrackVolume");
  v34[12] = CFSTR("PreferredTransform");
  v34[13] = CFSTR("TrackMatrix");
  v34[14] = CFSTR("TrackDimensions");
  v34[15] = CFSTR("TrackDimensions");
  v34[16] = CFSTR("CleanApertureDimensions");
  v34[17] = CFSTR("CleanApertureDimensions");
  v34[18] = CFSTR("ProductionApertureDimensions");
  v34[19] = CFSTR("ProductionApertureDimensions");
  v34[20] = CFSTR("EncodedPixelsDimensions");
  v34[21] = CFSTR("EncodedPixelsDimensions");
  v34[22] = CFSTR("NaturalTimeScale");
  v34[23] = CFSTR("MediaTimeScale");
  v34[24] = CFSTR("LoadSettings");
  v34[25] = CFSTR("QTLoadSettings");
  v34[26] = CFSTR("SampleGroupDescriptions");
  v34[27] = CFSTR("SampleGroupDescriptions");
  v34[28] = CFSTR("HEVCTemporalLevelInfoCombinations");
  v34[29] = CFSTR("HEVCTemporalLevelInfoCombinations");
  v34[30] = CFSTR("HEVCSyncSampleNALUnitTypes");
  v34[31] = CFSTR("HEVCSyncSampleNALUnitTypes");
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    v10 = v34[v7];
    v9 = v34[v7 + 1];
    cf = 0;
    CMBaseObject = FigAssetTrackGetCMBaseObject(a3);
    v12 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v12)
    {
      v12(CMBaseObject, v10, v8, &cf);
      v13 = cf;
      if (cf)
      {
        v14 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
        if (v14)
        {
          v15 = v14(a4, a5, v9, v13);
          CFRelease(cf);
          v17 = (_DWORD)v15 == -12784 || (_DWORD)v15 == -12630 || (_DWORD)v15 == -12782;
          if (!v17 && (_DWORD)v15)
            goto LABEL_27;
        }
        else
        {
          CFRelease(cf);
        }
      }
    }
    v7 += 2;
  }
  while (v7 != 32);
  v18 = FigAssetTrackGetCMBaseObject(a3);
  v19 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v19)
  {
    v19(v18, CFSTR("NaturalTimeScale"), v8, &v30);
    if (v30)
    {
      remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate(a1, (uint64_t)v30, a2);
      CFRelease(v30);
    }
  }
  v20 = FigAssetTrackGetCMBaseObject(a3);
  v21 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v21)
    v21(v20, CFSTR("LoadSettings"), v8, &v32);
  if (!v32)
    return 0;
  if (!FigCFDictionaryGetInt32IfPresent() || (valuePtr & 0x300000000) == 0)
  {
    v15 = 0;
LABEL_27:
    v22 = 0;
    goto LABEL_36;
  }
  LODWORD(valuePtr) = 1;
  v22 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
  v23 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 24);
  if (v23)
    v24 = v23(a4, a5, CFSTR("MediaDataPrecedence"), v22);
  else
    v24 = -12782;
  if ((v24 & 0xFFFFFFFD) == 0xFFFFCE10 || v24 == -12630)
    v15 = 0;
  else
    v15 = v24;
LABEL_36:
  if (v32)
    CFRelease(v32);
  if (v22)
    CFRelease(v22);
  return v15;
}

void remaker_CanPerformFastFrameRateConversionWork(uint64_t a1)
{
  uint64_t Storage;
  uint64_t v3;
  CMTimeEpoch v4;
  CMTimeEpoch v5;
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v8;
  CFTypeRef v9;
  uint64_t v10;
  unsigned int (*v11)(CFTypeRef, uint64_t, CFMutableDictionaryRef, unsigned int *);
  CFTypeRef v12;
  unsigned int (*v13)(CFTypeRef, CMTime *, CMTime *);
  uint64_t v14;
  BOOL v15;
  int v16;
  CMTimeFlags flags;
  opaqueCMSampleBuffer *v18;
  uint64_t v19;
  CMTimeEpoch epoch;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v22;
  const __CFDictionary *ValueAtIndex;
  void *v24;
  BOOL v25;
  _BOOL4 v26;
  void *v27;
  const void *v28;
  CMTimeValue v29;
  int v30;
  _BOOL4 v31;
  CFTypeRef v32;
  uint64_t v33;
  unsigned int (*v34)(CFTypeRef, uint64_t, uint64_t, char *, CMSampleBufferRef *);
  uint64_t FigBaseObject;
  uint64_t v36;
  void (*v37)(uint64_t);
  int32_t v38;
  void *v39;
  const void *v40;
  NSObject *v41;
  __CFDictionary *v42;
  __CFDictionary *v43;
  int v44;
  BOOL v45;
  const void *v46;
  void *key[2];
  const void *keya;
  CMTimeEpoch v49;
  void *value;
  CMTime rhs;
  CMTime v52;
  CFTypeRef cf;
  CMSampleBufferRef sbuf;
  char v55;
  CMTime v56;
  CMTime v57;
  unsigned int v58;
  CMTime lhs;
  CMTime time;
  CMTimeValue v61;
  CMTimeScale timescale;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  Storage = remakerFamily_getStorage(*(_QWORD *)(a1 + 32));
  v3 = MEMORY[0x1E0CA2E18];
  v58 = -1;
  *(_OWORD *)&v57.value = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v57.epoch = v4;
  *(_OWORD *)key = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v56.value = *MEMORY[0x1E0CA2E68];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v56.epoch = v5;
  v55 = 0;
  cf = 0;
  sbuf = 0;
  v61 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  value = (void *)*MEMORY[0x1E0C9AE40];
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (FigAssetReaderCreateWithAsset(v6, *(const void **)(Storage + 72), 0, &cf))
  {
    v8 = 0;
LABEL_64:
    v28 = 0;
    goto LABEL_65;
  }
  v49 = v4;
  v8 = CFDictionaryCreateMutable(v6, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  time = *(CMTime *)a1;
  FigCFDictionarySetCMTime();
  v9 = cf;
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int (**)(CFTypeRef, uint64_t, CFMutableDictionaryRef, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 32);
  if (!v11)
    goto LABEL_64;
  if (v11(v9, v10, v8, &v58))
    goto LABEL_64;
  v12 = cf;
  v13 = *(unsigned int (**)(CFTypeRef, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v13)
    goto LABEL_64;
  v42 = v8;
  v43 = Mutable;
  *(_OWORD *)&time.value = *(_OWORD *)key;
  time.epoch = v5;
  lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  if (v13(v12, &time, &lhs))
  {
    v28 = 0;
LABEL_81:
    v8 = v42;
    Mutable = v43;
    goto LABEL_65;
  }
  v14 = 0;
  v15 = 0;
  v45 = 0;
  v46 = 0;
  v16 = 0;
  flags = *(_DWORD *)(v3 + 12);
  keya = (const void *)*MEMORY[0x1E0CA2618];
  v44 = -1;
  v18 = sbuf;
  do
  {
    if (!v18 || CMSampleBufferGetNumSamples(v18) < 1)
    {
      v19 = v14;
      goto LABEL_45;
    }
    if ((flags & 1) != 0)
    {
      memset(&time, 0, sizeof(time));
      CMSampleBufferGetOutputPresentationTimeStamp(&time, sbuf);
      lhs = time;
      rhs.value = v61;
      rhs.timescale = timescale;
      rhs.flags = flags;
      rhs.epoch = v49;
      CMTimeSubtract(&v52, &lhs, &rhs);
      lhs = v56;
      CMTimeAdd(&v56, &lhs, &v52);
    }
    else
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time, sbuf);
    }
    v61 = time.value;
    flags = time.flags;
    timescale = time.timescale;
    epoch = time.epoch;
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    if (!SampleAttachmentsArray)
      goto LABEL_56;
    v22 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) < 1)
      goto LABEL_56;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, 0);
    if (!ValueAtIndex)
      goto LABEL_56;
    v49 = epoch;
    v19 = v14 + 1;
    v24 = (void *)CFDictionaryGetValue(ValueAtIndex, keya);
    v25 = v24 == value;
    v26 = v24 != value;
    if (v24 == value)
      ++v16;
    if (v15)
    {
      v15 = 1;
      goto LABEL_45;
    }
    v27 = v24;
    LODWORD(lhs.value) = 0;
    time.value = 0;
    if (CMSampleBufferGetDataBuffer(sbuf))
    {
      v28 = v46;
    }
    else
    {
      v28 = v46;
      if (remakerFamily_resolveByteReferenceSampleBufferAndCopyByteStream(sbuf, v46, &time))
        goto LABEL_81;
      v29 = time.value;
      if (time.value)
        CFRetain((CFTypeRef)time.value);
      if (v46)
        CFRelease(v46);
      if (time.value)
        CFRelease((CFTypeRef)time.value);
      v28 = (const void *)v29;
    }
    if (FigH264Bridge_GetSliceInformationFromSampleBuffer())
      goto LABEL_81;
    v46 = v28;
    if (v14 <= 0)
    {
      v15 = 0;
      v30 = lhs.value;
    }
    else
    {
      if (v27 == value && v45)
      {
        v30 = lhs.value;
LABEL_40:
        if (v44 != v30)
          goto LABEL_81;
        v15 = v16 > 10;
        goto LABEL_44;
      }
      v31 = v45 && v26;
      v30 = lhs.value;
      if (v31)
        goto LABEL_40;
      v15 = 0;
    }
    v44 = v30;
LABEL_44:
    v45 = v25;
LABEL_45:
    if (sbuf)
    {
      CFRelease(sbuf);
      sbuf = 0;
    }
    v32 = cf;
    v33 = v58;
    v34 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, char *, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 104);
    if (!v34 || v34(v32, v33, 1, &v55, &sbuf))
    {
LABEL_56:
      v8 = v42;
      Mutable = v43;
      goto LABEL_62;
    }
    if (v55)
      break;
    v18 = sbuf;
    v14 = v19;
  }
  while (sbuf);
  FigBaseObject = FigAssetReaderGetFigBaseObject(cf);
  if (FigBaseObject)
  {
    v36 = FigBaseObject;
    v37 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v37)
      v37(v36);
  }
  v8 = v42;
  time = v56;
  if (v19 > 0x7FFFFFFF)
    CMTimeMultiplyByFloat64(&v57, &time, 1.0 / (double)v19);
  else
    CMTimeMultiplyByRatio(&v57, &time, 1, v19);
  lhs = v56;
  CMTimeMultiplyByRatio(&time, &lhs, 9, 10);
  *(CMTime *)a1 = time;
  Mutable = v43;
  if (v15)
  {
    time = v57;
    lhs = *(CMTime *)a1;
    v38 = CMTimeCompare(&time, &lhs);
    v39 = value;
    if (v38 >= 0)
      v39 = (void *)*MEMORY[0x1E0C9AE50];
    value = v39;
  }
LABEL_62:
  v28 = v46;
LABEL_65:
  CFDictionarySetValue(Mutable, CFSTR("Remaker_CFBoolean"), value);
  remakerFamily_safelyPostNotification(*(const void **)(a1 + 32), 0, (uint64_t)CFSTR("Remaker_CanPerformFastFrameRateConversion"), (uint64_t)Mutable, *(const void **)(a1 + 32));
  if (sbuf)
    CFRelease(sbuf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (Mutable)
    CFRelease(Mutable);
  if (v28)
    CFRelease(v28);
  v40 = *(const void **)(a1 + 32);
  if (v40)
    CFRelease(v40);
  v41 = *(NSObject **)(a1 + 40);
  if (v41)
    dispatch_release(v41);
  free((void *)a1);
}

CFTypeRef FigURLStorageSessionCopyGlobalSession()
{
  uint64_t ClassID;

  ClassID = FigHTTPRequestGetClassID();
  if (ClassID == FigHTTPRequestNSURLSessionGetClassID())
    return _FigURLStorageSessionNSCopyGlobalSession();
  else
    return 0;
}

uint64_t FigURLStorageSessionCreate(const __CFDictionary *a1, uint64_t *a2)
{
  uint64_t ClassID;

  ClassID = FigHTTPRequestGetClassID();
  if (ClassID == FigHTTPRequestNSURLSessionGetClassID())
    return _FigURLStorageSessionNSCreate(a1, a2);
  else
    return 4294954514;
}

__CFString *otfw_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerForFormatWriter %p>"), a1);
  return Mutable;
}

uint64_t otfw_postNotification()
{
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16))
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t otfw_LowWater()
{
  uint64_t result;
  uint64_t (*v1)(_QWORD);

  result = CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(_QWORD))(result + 72);
  if (v1)
    return v1(*(_QWORD *)(result + 80));
  return result;
}

void sub_192CCC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPATCCAccessClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__7;
  v7 = __Block_byref_object_dispose__7;
  v0 = getPATCCAccessClass_softClass;
  v8 = getPATCCAccessClass_softClass;
  if (!getPATCCAccessClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPATCCAccessClass_block_invoke;
    v2[3] = &unk_1E2F91F58;
    v2[4] = &v3;
    __getPATCCAccessClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_192CCC880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AssetPALoggingHelperCreateAccessInterval(uint64_t a1, _OWORD *a2)
{
  void *v4;
  AssetPAAccessInterval *v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];

  if (assetPALoggingHelper_InitOnce_once != -1)
    dispatch_once(&assetPALoggingHelper_InitOnce_once, &__block_literal_global_38);
  if (!s_PAFrameworkAvailable)
    return 0;
  v4 = (void *)MEMORY[0x19403137C]();
  v5 = [AssetPAAccessInterval alloc];
  v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  v7 = -[AssetPAAccessInterval initWithClientPid:auditToken:](v5, "initWithClientPid:auditToken:", a1, v9);
  objc_autoreleasePoolPop(v4);
  return v7;
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class __getPAAccessLoggerClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PAAccessLogger");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPAAccessLoggerClass_block_invoke_cold_1();
  getPAAccessLoggerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void PrivacyAccountingLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E2F9BA28;
    v2 = 0;
    PrivacyAccountingLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
    PrivacyAccountingLibrary_cold_1(&v0);
}

Class __getPATCCAccessClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PATCCAccess");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPATCCAccessClass_block_invoke_cold_1();
  getPATCCAccessClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPAApplicationClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PAApplication");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPAApplicationClass_block_invoke_cold_1();
  getPAApplicationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

CFStringRef FigSampleBufferProcessorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleBufferProcessor %p]"), a1);
}

uint64_t FigCDSCaptionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  v8 = 0;
  MEMORY[0x19402F294](&FigCDSCaptionGetClassID_sRegisterFigCDSCaptionBaseTypeOnce, RegisterFigCDSCaptionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    v3 = v8;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v7 = 0;
    FigCDSNodeCreate(&v7);
    *DerivedStorage = v7;
    v6 = 0;
    FigCDSIntervalCreate(&v6);
    DerivedStorage[1] = v6;
    *a1 = v3;
  }
  return v2;
}

void FigCDSCaptionFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
    CFRelease(v4);
}

__CFString *FigCDSCaptionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSCaption: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSCaption_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSCaption <FigCDSBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCDSCaption";
  return 0;
}

__CFString *FigCDSCaption_FigCDSIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSCaption <FigCDSIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7)
        v7(v4, a1, a2);
    }
  }
  return 0;
}

__CFString *FigCDSCaption_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSCaption <FigCDSNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 240);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CGRect *v5;
  CGContext *v6;
  CGSize v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(const void *, unsigned int *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(const void *, CGRect *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *, CGRect *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(const void *, void **);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(const void *, char *);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(const void *, unint64_t *);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(const void *, char *);
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const __CFAllocator *v33;
  const __CFAttributedString *MutableCopy;
  uint64_t v35;
  const __CFDictionary *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(const void *, CFRange *);
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(const void *, double *);
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(const void *, CGAffineTransform *);
  CGFloat a;
  uint64_t v54;
  double location_low;
  uint64_t v56;
  void (*v57)(_QWORD, CFRange *, double);
  double v58;
  double v59;
  const __CFNumber *Attribute;
  double v61;
  double v62;
  double v63;
  CFNumberRef v64;
  double v65;
  const __CFNumber *v66;
  const __CFString *v67;
  double v68;
  CFTypeRef v69;
  CFTypeRef v70;
  BOOL v71;
  char v72;
  double v73;
  double v74;
  double v75;
  double v76;
  const __CFNumber *v77;
  double v78;
  double v79;
  const __CFString *v80;
  CFIndex Length;
  CFIndex v82;
  CTFramesetterRef v83;
  const __CTFramesetter *v84;
  const __CFDictionary *FrameAttributesDictionary;
  CGPath *Mutable;
  const CGPath *v87;
  double v88;
  const __CTFrame *Frame;
  const __CTFrame *v90;
  const __CFArray *Lines;
  const __CFArray *v92;
  const __CTLine *ValueAtIndex;
  CFRange v94;
  CGSize v95;
  float v96;
  CFIndex v97;
  CFNumberRef v98;
  CFNumberRef v99;
  uint64_t v100;
  const __CFNumber *v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  CGFloat v107;
  CGFloat v108;
  double v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  double v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(const void *, uint64_t, const __CFString *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(const void *, void **);
  CGColorSpace *v123;
  CGColorSpace *v124;
  CGContext *v125;
  CGContext *v126;
  __int128 v127;
  const __CFNumber *v128;
  CGColor *v129;
  CGImageRef Image;
  CGImage *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(const void *, CGImage *);
  uint64_t v135;
  uint64_t v136;
  void (*v137)(const void *, _QWORD);
  uint64_t v138;
  uint64_t v139;
  void (*v140)(const void *, double, double);
  CGPoint v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(const void *, double, double, double, double);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  CGFloat v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(const void *, CGAffineTransform *);
  const void *Value;
  double b;
  CGFloat d;
  int v157;
  double v158;
  double v159;
  int v160;
  CGSize v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(const void *, CFRange *);
  double MidY;
  CGFloat v166;
  CGFloat v167;
  CGFloat c;
  double MidX;
  double v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(const void *, double, double);
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(const void *, double, double);
  uint64_t v178;
  uint64_t v179;
  void (*v180)(const void *, CFRange *);
  CFIndex location;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(const void *, CFIndex);
  const __CFDictionary *Attributes;
  double v186;
  CGFloat v187;
  double v188;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat v191;
  CGFloat v192;
  CGFloat v193;
  CGFloat v194;
  CGFloat v195;
  CGColorSpace *v196;
  int v197;
  int v198;
  int v200;
  CGContext *v201;
  __int128 v202;
  CGImageRef v203;
  CGImage *v204;
  uint64_t v206;
  const __CFAttributedString *v207;
  const __CFAttributedString *v208;
  const __CFAttributedString *v209;
  const __CFAttributedString *v210;
  int v211;
  const __CFAttributedString *v212;
  const __CFAttributedString *v213;
  CFMutableAttributedStringRef v214;
  const void *v215;
  CGFloat rect2;
  CGFloat v217;
  CGFloat cf;
  const __CFAttributedString *cfa;
  uint64_t v220;
  CGFloat v221;
  const __CFDictionary *v222;
  CGFloat v223;
  CGContext *v224;
  const __CFAllocator *alloc;
  CGSize v226;
  CGPoint origin;
  double v228;
  unsigned int v229;
  char v230;
  unint64_t v231;
  void *data;
  CGRect v233;
  CGRect v234;
  CGAffineTransform v235;
  CFRange effectiveRange;
  CFRange v237;
  CGSize v238;
  double v239;
  double valuePtr;
  CGFloat descent[2];
  CFRange v242;
  CFRange v243;
  CFRange v244;
  CGSize v245;
  CGRect v246;
  CGRect v247;
  CGRect v248;
  CGRect v249;
  CGRect v250;
  CGRect v251;
  CGRect v252;
  CGRect v253;
  CGRect v254;
  CGRect v255;
  CGRect v256;
  CGRect v257;
  CGRect v258;
  CGRect v259;
  CGRect v260;
  CGRect v261;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (CGRect *)MEMORY[0x1E0C9D628];
  v6 = *(CGContext **)(a2 + 288);
  v7 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v234.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v234.size = v7;
  v226 = v7;
  origin = v234.origin;
  v233.origin = v234.origin;
  v233.size = v7;
  v231 = 0;
  data = 0;
  v230 = 0;
  v229 = 0;
  FigCDSCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (v9)
    {
      v10 = *(void (**)(const void *, unsigned int *))(v9 + 48);
      if (v10)
        v10(a1, &v229);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(const void *, CGRect *))(v12 + 72);
      if (v13)
        v13(a1, &v234);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(void (**)(const void *, CGRect *))(v15 + 104);
      if (v16)
        v16(a1, &v233);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(const void *, void **))(v18 + 192);
      if (v19)
        v19(a1, &data);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = *(void (**)(const void *, char *))(v21 + 168);
      if (v22)
        v22(a1, (char *)&v231 + 4);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v23 = CMBaseObjectGetProtocolVTable();
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = *(void (**)(const void *, unint64_t *))(v24 + 176);
      if (v25)
        v25(a1, &v231);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(void (**)(const void *, char *))(v27 + 208);
      if (v28)
        v28(a1, &v230);
    }
  }
  if (!v230)
    goto LABEL_155;
  x = v5->origin.x;
  y = v5->origin.y;
  width = v5->size.width;
  height = v5->size.height;
  v260.origin.x = v5->origin.x;
  v260.origin.y = y;
  v260.size.width = width;
  v260.size.height = height;
  if (CGRectEqualToRect(v234, v260) || v234.size.width <= 0.0 || v234.size.height <= 0.0)
    goto LABEL_155;
  v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFAttributedStringRef *)(DerivedStorage + 32));
  valuePtr = 0.0;
  v237 = (CFRange)origin;
  v238 = v226;
  v35 = CMBaseObjectGetDerivedStorage();
  v36 = *(const __CFDictionary **)(v35 + 40);
  if (v36)
    v37 = CFDictionaryGetValue(v36, CFSTR("region")) == 0;
  else
    v37 = 1;
  rect2 = width;
  descent[0] = 0.0;
  FigCDSNodeProtocolGetProtocolID();
  v38 = CMBaseObjectGetProtocolVTable();
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v40 = *(void (**)(const void *, CFRange *))(v39 + 72);
      if (v40)
        v40(a1, &v237);
    }
  }
  FCRGetVideoPresentationBounds(*(double *)(a2 + 336), *(double *)(a2 + 344), *(double *)(a2 + 304), *(double *)(a2 + 312), *(double *)(a2 + 320), *(double *)(a2 + 328));
  v42 = v41;
  v44 = v43;
  LODWORD(v239) = 0;
  FigCDSCaptionProtocolGetProtocolID();
  v45 = CMBaseObjectGetProtocolVTable();
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 16);
    if (v46)
    {
      v47 = *(void (**)(const void *, double *))(v46 + 48);
      if (v47)
        v47(a1, &v239);
    }
  }
  if (v37)
  {
    v48 = v44 * 0.15;
    v49 = 3.0;
  }
  else
  {
    v235.a = 0.0;
    LODWORD(effectiveRange.location) = 0;
    FigCDSNodeProtocolGetProtocolID();
    v50 = CMBaseObjectGetProtocolVTable();
    if (v50
      && (v51 = *(_QWORD *)(v50 + 16)) != 0
      && (v52 = *(void (**)(const void *, CGAffineTransform *))(v51 + 16)) != 0)
    {
      v52(a1, &v235);
      a = v235.a;
    }
    else
    {
      a = 0.0;
    }
    FigCDSRegionProtocolGetProtocolID();
    v54 = CMBaseObjectGetProtocolVTable();
    location_low = 0.0;
    if (v54)
    {
      v56 = *(_QWORD *)(v54 + 16);
      if (v56)
      {
        v57 = *(void (**)(_QWORD, CFRange *, double))(v56 + 48);
        if (v57)
        {
          v57(*(_QWORD *)&a, &effectiveRange, 0.0);
          location_low = (double)SLODWORD(effectiveRange.location);
        }
      }
    }
    v48 = v238.height / location_low;
    v49 = 1.3;
  }
  v58 = v48 / v49;
  valuePtr = v48 / v49;
  if (v44 > v42)
  {
    v58 = v42 / v44 * v58;
    valuePtr = v58;
  }
  if (LODWORD(v239) == 1)
  {
    v59 = *(double *)(a2 + 456);
    if (v59 > 0.0)
    {
      v58 = v59 * 0.8;
      valuePtr = v59 * 0.8;
    }
  }
  if (*(_DWORD *)(v35 + 16) != 3)
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA52B0], &effectiveRange);
    if (Attribute)
    {
      CFNumberGetValue(Attribute, kCFNumberCGFloatType, &valuePtr);
      v61 = valuePtr;
      memset(&v235, 0, sizeof(v235));
      FCRGetTransform((uint64_t)&v235, *(double *)(a2 + 336), *(double *)(a2 + 344), *(double *)(a2 + 320), *(double *)(a2 + 328));
      v58 = v235.b + v61 * v235.d;
      valuePtr = v58;
    }
    else
    {
      v77 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2970], &effectiveRange);
      if (v77)
      {
        v235.a = 0.0;
        CFNumberGetValue(v77, kCFNumberCGFloatType, &v235);
        if (*(_QWORD *)(a2 + 56) == 1)
        {
          v63 = v44 * v235.a / 100.0;
          if (v63 > 0.0)
            goto LABEL_66;
        }
      }
    }
  }
  v62 = *(double *)(a2 + 192);
  if (v62 > 0.0)
  {
    v63 = v58 * v62;
LABEL_66:
    descent[0] = v63;
    goto LABEL_68;
  }
  descent[0] = v58;
LABEL_68:
  v64 = CFNumberCreate(v33, kCFNumberCGFloatType, descent);
  v242.length = CFAttributedStringGetLength(MutableCopy);
  v242.location = 0;
  CFAttributedStringSetAttribute(MutableCopy, v242, CFSTR("kCDSSubtitleRenderer_FontSizeToUse"), v64);
  if (v64)
    CFRelease(v64);
  v224 = v6;
  v65 = descent[0];
  *(CGFloat *)(v35 + 24) = descent[0];
  v237.location = 0;
  v237.length = 0;
  v228 = 100.0;
  v66 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2B48], &v237);
  if (v66)
    CFNumberGetValue(v66, kCFNumberCGFloatType, &v228);
  v67 = (const __CFString *)*MEMORY[0x1E0CA2B40];
  v68 = v228 / 100.0;
  v69 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &v237);
  v70 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2A98], &v237);
  v215 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v70)
    v71 = v70 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  else
    v71 = 0;
  v72 = !v71;
  v73 = *(double *)(a2 + 352);
  v74 = v73 * v234.size.width;
  v75 = v73 * v234.size.height;
  v217 = y;
  cf = x;
  if (v69)
  {
    if ((v72 & 1) != 0)
    {
      if (v68 * v234.size.height >= v75)
        v76 = v75;
      else
        v76 = v68 * v234.size.height;
    }
    else
    {
      v76 = *(double *)(MEMORY[0x1E0C9D5E0] + 24);
    }
  }
  else
  {
    if ((v72 & 1) != 0)
    {
      if (v68 * v234.size.width >= v74)
        v76 = v74;
      else
        v76 = v68 * v234.size.width;
    }
    else
    {
      v76 = *(double *)(MEMORY[0x1E0C9D5E0] + 16);
    }
    v74 = v75;
  }
  alloc = v33;
  v79 = *MEMORY[0x1E0C9D820];
  v78 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v239 = 0.0;
  if (MutableCopy)
  {
    v235.a = 0.0;
    v235.b = 0.0;
    v80 = (const __CFString *)CFAttributedStringGetAttribute(MutableCopy, 0, v67, (CFRange *)&v235);
    ckCaptionSetupText(DerivedStorage, MutableCopy, 0, a2, v65);
    Length = CFAttributedStringGetLength(MutableCopy);
    if (Length < 1)
    {
      v67 = (const __CFString *)DerivedStorage;
    }
    else
    {
      v82 = Length;
      v83 = CTFramesetterCreateWithAttributedString(MutableCopy);
      if (!v83)
        goto LABEL_112;
      v84 = v83;
      FrameAttributesDictionary = createFrameAttributesDictionary(v80);
      Mutable = CGPathCreateMutable();
      if (Mutable)
      {
        v87 = Mutable;
        v88 = 0.0;
        v246.origin.x = 0.0;
        v246.origin.y = 0.0;
        v246.size.width = v76;
        v246.size.height = v74;
        CGPathAddRect(Mutable, 0, v246);
        v243.location = 0;
        v243.length = v82;
        v222 = FrameAttributesDictionary;
        Frame = CTFramesetterCreateFrame(v84, v243, v87, FrameAttributesDictionary);
        if (Frame)
        {
          v90 = Frame;
          v220 = DerivedStorage;
          Lines = CTFrameGetLines(Frame);
          if (Lines)
          {
            v92 = Lines;
            if (CFArrayGetCount(Lines) >= 1)
            {
              effectiveRange.location = 0;
              valuePtr = 0.0;
              descent[0] = 0.0;
              ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v92, 0);
              CTLineGetTypographicBounds(ValueAtIndex, (CGFloat *)&effectiveRange.location, descent, &valuePtr);
              v88 = *(double *)&effectiveRange.location + descent[0] + valuePtr;
              v239 = v88;
            }
          }
          CFRelease(v90);
          DerivedStorage = v220;
        }
        CFRelease(v87);
        v94.location = 0;
        FrameAttributesDictionary = v222;
      }
      else
      {
        v94.location = 0;
        v88 = 0.0;
      }
      v94.length = v82;
      v245.width = v76;
      v245.height = v74;
      v95 = CTFramesetterSuggestFrameSizeWithConstraints(v84, v94, 0, v245, 0);
      v79 = v95.width;
      v96 = v88;
      *(float *)(DerivedStorage + 20) = v96;
      if (FrameAttributesDictionary)
        CFRelease(FrameAttributesDictionary);
      v67 = (const __CFString *)DerivedStorage;
      v78 = ceil(v95.height);
      CFRelease(v84);
    }
    v97 = CFAttributedStringGetLength(MutableCopy);
    v98 = CFNumberCreate(alloc, kCFNumberCGFloatType, &v239);
    if (v98)
    {
      v99 = v98;
      v244.location = 0;
      v244.length = v97;
      CFAttributedStringSetAttribute(MutableCopy, v244, CFSTR("kCDSSubtitleRenderer_SuggestLineHeight"), v98);
      CFRelease(v99);
    }
    DerivedStorage = (uint64_t)v67;
  }
LABEL_112:
  v100 = v229;
  v235.a = 0.0;
  v235.b = 0.0;
  effectiveRange.location = 0;
  v101 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, CFSTR("kCDSSubtitleRenderer_SuggestLineHeight"), (CFRange *)&v235);
  if (v101)
    CFNumberGetValue(v101, kCFNumberCGFloatType, &effectiveRange);
  if ((_DWORD)v100 == 1)
  {
    v78 = *(double *)(a2 + 456);
    v102 = 0.0;
    v103 = v78;
    v104 = v79;
  }
  else
  {
    v104 = v79 + *(double *)&effectiveRange.location * 0.1;
    v103 = v78 + *(double *)&effectiveRange.location * 0.1;
    v102 = *(double *)&effectiveRange.location * 0.05 + 0.0;
  }
  v105 = 0;
  v106 = 0;
  v247 = CGRectIntegral(*(CGRect *)(&v104 - 2));
  v107 = v247.origin.x;
  v108 = v247.origin.y;
  v109 = v247.size.width;
  v110 = v247.size.height;
  v247.origin.x = v102;
  v247.origin.y = v102;
  v247.size.width = v79;
  v247.size.height = v78;
  v248 = CGRectIntegral(v247);
  v111 = v248.origin.x;
  v112 = v248.size.width;
  if (v69)
  {
    v221 = v248.size.height;
    v223 = v248.origin.y;
    v113 = v110;
  }
  else
  {
    v221 = v248.size.width;
    v223 = v248.origin.x;
    v111 = v248.origin.y;
    v112 = v248.size.height;
    v114 = v107;
    v107 = v108;
    v108 = v114;
    v113 = v109;
    v109 = v110;
  }
  LODWORD(v100) = vcvtpd_s64_f64(v113);
  LODWORD(v67) = vcvtpd_s64_f64(v109);
  v231 = __PAIR64__(v100, v67);
  v115 = *(unsigned int *)(a2 + 300);
  FigCDSNodeProtocolGetProtocolID();
  v116 = CMBaseObjectGetProtocolVTable();
  if (!v116 || (v117 = *(_QWORD *)(v116 + 16)) == 0)
  {
    v149 = 4294954508;
    goto LABEL_172;
  }
  v118 = *(uint64_t (**)(const void *, uint64_t, const __CFString *, uint64_t))(v117 + 184);
  if (!v118)
  {
    v149 = 4294954514;
    goto LABEL_172;
  }
  v119 = v118(a1, v100, v67, v115);
  if ((_DWORD)v119)
    goto LABEL_245;
  FigCDSNodeProtocolGetProtocolID();
  v120 = CMBaseObjectGetProtocolVTable();
  v6 = v224;
  if (v120)
  {
    v121 = *(_QWORD *)(v120 + 16);
    if (v121)
    {
      v122 = *(void (**)(const void *, void **))(v121 + 192);
      if (v122)
        v122(a1, &data);
    }
  }
  if (!data)
  {
    FigSignalErrorAt();
    v149 = 0;
    goto LABEL_172;
  }
  v123 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (!v123)
  {
    v119 = FigSignalErrorAt();
LABEL_245:
    v149 = v119;
    goto LABEL_172;
  }
  v124 = v123;
  v125 = CGBitmapContextCreate(data, *(_DWORD *)(a2 + 300) * HIDWORD(v231), (int)v231 * (uint64_t)*(int *)(a2 + 300), 8uLL, 4 * *(_DWORD *)(a2 + 300) * HIDWORD(v231), v123, 0x4001u);
  if (!v125)
  {
    v149 = FigSignalErrorAt();
    goto LABEL_250;
  }
  v126 = v125;
  CGContextScaleCTM(v125, (double)*(int *)(a2 + 300), (double)*(int *)(a2 + 300));
  v127 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v235.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v235.c = v127;
  *(_OWORD *)&v235.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  CGContextSetTextMatrix(v126, &v235);
  CGColorSpaceRelease(v124);
  *(_QWORD *)(a2 + 288) = v126;
  v235.a = 0.0;
  v235.b = 0.0;
  effectiveRange.location = 0;
  v128 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, CFSTR("kCDSSubtitleRenderer_FontSizeToUse"), (CFRange *)&v235);
  if (v128)
  {
    CFNumberGetValue(v128, kCFNumberCGFloatType, &effectiveRange);
    if (*(double *)&effectiveRange.location > 0.0)
    {
      v249.size.width = v221;
      v249.origin.x = v223;
      v249.origin.y = v111;
      v249.size.height = v112;
      v261.origin.y = v217;
      v261.origin.x = cf;
      v261.size.width = rect2;
      v261.size.height = height;
      if (!CGRectEqualToRect(v249, v261))
      {
        Attributes = CFAttributedStringGetAttributes(MutableCopy, 0, (CFRange *)&v235);
        v129 = copyContentColor(*(_QWORD *)(a2 + 16), *(CGColorRef *)(a2 + 152), *(_QWORD *)(a2 + 40), Attributes, (void *)*MEMORY[0x1E0CA2968], *(CGFloat *)(a2 + 176));
        if (*(double *)(a2 + 192) * 4.0 <= 10.0)
          v186 = *(double *)(a2 + 192) * 4.0;
        else
          v186 = 10.0;
        CGContextSaveGState(v126);
        CGContextSetFontRenderingStyle();
        CGContextSetShouldSmoothFonts(v126, 0);
        CGContextSetShouldAntialias(v126, 1);
        CGContextSetInterpolationQuality(v126, kCGInterpolationHigh);
        if (v129)
        {
          CGContextSetFillColorWithColor(v126, v129);
          CGContextBeginPath(v126);
          if (v186 <= 1.0)
          {
            v259.origin.x = v108;
            v259.origin.y = v107;
            v259.size.width = v113;
            v259.size.height = v109;
            CGContextAddRect(v126, v259);
          }
          else
          {
            CGContextSaveGState(v126);
            v253.origin.x = v108;
            v253.origin.y = v107;
            v253.size.width = v113;
            v253.size.height = v109;
            v187 = v108;
            v188 = v112;
            MinX = CGRectGetMinX(v253);
            v254.origin.x = v187;
            v254.origin.y = v107;
            v254.size.width = v113;
            v254.size.height = v109;
            MinY = CGRectGetMinY(v254);
            CGContextTranslateCTM(v126, MinX, MinY);
            CGContextScaleCTM(v126, v186, v186);
            v255.origin.x = v187;
            v255.origin.y = v107;
            v255.size.width = v113;
            v255.size.height = v109;
            v191 = CGRectGetWidth(v255) / v186;
            v256.origin.x = v187;
            v256.origin.y = v107;
            v256.size.width = v113;
            v256.size.height = v109;
            v192 = CGRectGetHeight(v256) / v186;
            CGContextMoveToPoint(v126, v191, v192 * 0.5);
            CGContextAddArcToPoint(v126, v191, v192, v191 * 0.5, v192, 1.0);
            CGContextAddArcToPoint(v126, 0.0, v192, 0.0, v192 * 0.5, 1.0);
            CGContextAddArcToPoint(v126, 0.0, 0.0, v191 * 0.5, 0.0, 1.0);
            v193 = v191;
            v194 = v191;
            v112 = v188;
            CGContextAddArcToPoint(v126, v193, 0.0, v194, v192 * 0.5, 1.0);
            CGContextClosePath(v126);
            CGContextRestoreGState(v126);
          }
          CGContextFillPath(v126);
        }
        v206 = DerivedStorage;
        ckCaptionSetupText(DerivedStorage, MutableCopy, 0, a2, *(double *)&effectiveRange.location);
        v207 = CFAttributedStringCreateMutableCopy(alloc, 0, MutableCopy);
        if (!v207)
          goto LABEL_240;
        v208 = v207;
        if (!ckCaptionDrawText(v207, a2, 2, 0, *(double *)&effectiveRange.location, v223, v111, v221, v112))
        {
          if (v215 == CFDictionaryGetValue(*(CFDictionaryRef *)(v206 + 40), CFSTR("FigCDSPreview_DisableTextEdge"))
            || (unint64_t)(getEdgeStyle(*(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 264), Attributes, (void *)*MEMORY[0x1E0CA29C0])- 1) < 3)
          {
            v209 = CFAttributedStringCreateMutableCopy(alloc, 0, MutableCopy);
            if (v209)
            {
              v210 = v209;
              setupHighlight(a2, v209);
              cfa = 0;
              v211 = 1;
              goto LABEL_233;
            }
          }
          else
          {
            v213 = CFAttributedStringCreateMutableCopy(alloc, 0, MutableCopy);
            if (v213)
            {
              v212 = v213;
              setupHighlight(a2, v213);
              if (ckCaptionSetupText(v206, v212, 2, a2, *(double *)&effectiveRange.location)
                || ckCaptionDrawText(v212, a2, 1, 1, *(double *)&effectiveRange.location, v223, v111, v221, v112)|| (cfa = v212, (v214 = CFAttributedStringCreateMutableCopy(alloc, 0, MutableCopy)) == 0))
              {
LABEL_238:
                CFRelease(v212);
                goto LABEL_239;
              }
              v210 = v214;
              v211 = 0;
LABEL_233:
              ckCaptionDrawText(v210, a2, 0, v211, *(double *)&effectiveRange.location, v223, v111, v221, v112);
              CFRelease(v210);
              v212 = cfa;
              if (!cfa)
                goto LABEL_239;
              goto LABEL_238;
            }
          }
        }
LABEL_239:
        CFRelease(v208);
LABEL_240:
        CGContextRestoreGState(v126);
        DerivedStorage = v206;
        goto LABEL_135;
      }
    }
  }
  v129 = 0;
LABEL_135:
  CGColorRelease(v129);
  Image = CGBitmapContextCreateImage(v126);
  if (!Image)
  {
    v149 = FigSignalErrorAt();
LABEL_252:
    CGContextRelease(v126);
LABEL_172:
    if (MutableCopy)
      CFRelease(MutableCopy);
    return v149;
  }
  v131 = Image;
  FigCDSNodeProtocolGetProtocolID();
  v132 = CMBaseObjectGetProtocolVTable();
  if (v132)
  {
    v133 = *(_QWORD *)(v132 + 16);
    if (v133)
    {
      v134 = *(void (**)(const void *, CGImage *))(v133 + 152);
      if (v134)
        v134(a1, v131);
    }
  }
  CGImageRelease(v131);
  FigCDSNodeProtocolGetProtocolID();
  v135 = CMBaseObjectGetProtocolVTable();
  if (v135)
  {
    v136 = *(_QWORD *)(v135 + 16);
    if (v136)
    {
      v137 = *(void (**)(const void *, _QWORD))(v136 + 200);
      if (v137)
        v137(a1, 0);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v138 = CMBaseObjectGetProtocolVTable();
  if (v138)
  {
    v139 = *(_QWORD *)(v138 + 16);
    if (v139)
    {
      v140 = *(void (**)(const void *, double, double))(v139 + 112);
      if (v140)
        v140(a1, v113, v109);
    }
  }
  v141 = v233.origin;
  v233.size.width = v113;
  v233.size.height = v109;
  FigCDSNodeProtocolGetProtocolID();
  v142 = CMBaseObjectGetProtocolVTable();
  if (v142)
  {
    v143 = *(_QWORD *)(v142 + 16);
    if (v143)
    {
      v144 = *(void (**)(const void *, double, double, double, double))(v143 + 96);
      if (v144)
        v144(a1, v141.x, v141.y, v113, v109);
    }
  }
  CGContextRelease(v126);
  if (MutableCopy)
    CFRelease(MutableCopy);
  *(_QWORD *)(a2 + 288) = v224;
LABEL_155:
  v145 = *(_QWORD *)DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v146 = CMBaseObjectGetProtocolVTable();
  if (v146)
  {
    v147 = *(_QWORD *)(v146 + 16);
    if (v147)
    {
      v148 = *(void (**)(uint64_t, uint64_t))(v147 + 264);
      if (v148)
        v148(v145, a2);
    }
  }
  if (!v6)
    return 0;
  v149 = 0;
  if (!CGRectEqualToRect(v233, *v5))
  {
    v150 = v233.size.width;
    if (v233.size.width > 0.0 && v233.size.height > 0.0 && data)
    {
      if (*(_QWORD *)(a2 + 272))
      {
        *(CGPoint *)&v235.a = origin;
        *(CGSize *)&v235.c = v226;
        FigCDSNodeProtocolGetProtocolID();
        v151 = CMBaseObjectGetProtocolVTable();
        if (v151)
        {
          v152 = *(_QWORD *)(v151 + 16);
          if (v152)
          {
            v153 = *(void (**)(const void *, CGAffineTransform *))(v152 + 104);
            if (v153)
              v153(a1, &v235);
          }
        }
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 272), a1);
        if (*(_DWORD *)(a2 + 296))
        {
          b = v235.b;
          d = v235.d;
        }
        else
        {
          v161 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
          v237 = (CFRange)*MEMORY[0x1E0C9D648];
          v238 = v161;
          FigCDSNodeProtocolGetProtocolID();
          v162 = CMBaseObjectGetProtocolVTable();
          if (v162)
          {
            v163 = *(_QWORD *)(v162 + 16);
            if (v163)
            {
              v164 = *(void (**)(const void *, CFRange *))(v163 + 72);
              if (v164)
                v164(a1, &v237);
            }
          }
          v250.origin.x = v235.a;
          v250.origin.y = v235.b;
          v250.size = *(CGSize *)&v235.c;
          MidY = CGRectGetMidY(v250);
          *(_QWORD *)&v251.origin.x = v237.location;
          *(_QWORD *)&v251.origin.y = v237.length;
          v251.size = v238;
          v166 = CGRectGetMidY(v251);
          d = v235.d;
          b = v166 + v166 - MidY + v235.d * -0.5;
          v235.b = b;
        }
        v167 = v235.a;
        c = v235.c;
        MidX = CGRectGetMidX(*(CGRect *)(&b - 1));
        v252.origin.x = v235.a;
        v252.origin.y = v235.b;
        v252.size = *(CGSize *)&v235.c;
        v170 = CGRectGetMidY(v252);
        FigCDSOutputNodeProtocolGetProtocolID();
        v171 = CMBaseObjectGetProtocolVTable();
        if (v171)
        {
          v172 = *(_QWORD *)(v171 + 16);
          if (v172)
          {
            v173 = *(void (**)(const void *, double, double))(v172 + 72);
            if (v173)
              v173(Value, MidX, v170);
          }
        }
        v174 = *(_OWORD *)&v235.c;
        FigCDSOutputNodeProtocolGetProtocolID();
        v175 = CMBaseObjectGetProtocolVTable();
        if (v175)
        {
          v176 = *(_QWORD *)(v175 + 16);
          if (v176)
          {
            v177 = *(void (**)(const void *, double, double))(v176 + 88);
            if (v177)
              v177(Value, *(double *)&v174, *((double *)&v174 + 1));
          }
        }
        v237.location = 0;
        FigCDSNodeProtocolGetProtocolID();
        v178 = CMBaseObjectGetProtocolVTable();
        if (v178
          && (v179 = *(_QWORD *)(v178 + 16)) != 0
          && (v180 = *(void (**)(const void *, CFRange *))(v179 + 160)) != 0)
        {
          v180(a1, &v237);
          location = v237.location;
        }
        else
        {
          location = 0;
        }
        FigCDSOutputNodeProtocolGetProtocolID();
        v182 = CMBaseObjectGetProtocolVTable();
        if (v182)
        {
          v183 = *(_QWORD *)(v182 + 16);
          if (v183)
          {
            v184 = *(void (**)(const void *, CFIndex))(v183 + 104);
            if (v184)
              v184(Value, location);
          }
        }
        return 0;
      }
      v157 = (int)(v233.size.height + v233.origin.y);
      v158 = v234.origin.y;
      if (v233.origin.y <= v234.origin.y)
      {
        v160 = 0;
      }
      else
      {
        v159 = v234.origin.y + v234.size.height;
        if (v233.origin.y > v234.origin.y + v234.size.height)
          return 0;
        if (v233.size.height + v233.origin.y <= v159)
        {
          v160 = 0;
        }
        else
        {
          v157 = (int)v159;
          v160 = (int)(v233.size.height - ((double)(int)v159 - v233.origin.y));
        }
        v158 = v233.origin.y;
      }
      v195 = v233.origin.x;
      v196 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (!v196)
        return FigSignalErrorAt();
      v124 = v196;
      v197 = v157 - (int)v158;
      if (v197 >= (int)v231)
        v198 = v231;
      else
        v198 = v157 - (int)v158;
      if (v198 + v160 <= (int)v231 || v160 <= 0)
        v200 = v160;
      else
        v200 = v231 - v198;
      v201 = CGBitmapContextCreate((char *)data + v200 * *(_DWORD *)(a2 + 300) * 4 * HIDWORD(v231) * *(_DWORD *)(a2 + 300), HIDWORD(v231) * *(_DWORD *)(a2 + 300), *(_DWORD *)(a2 + 300) * v198, 8uLL, 4 * HIDWORD(v231) * *(_DWORD *)(a2 + 300), v196, 0x4001u);
      if (v201)
      {
        v126 = v201;
        CGContextScaleCTM(v201, (double)*(int *)(a2 + 300), (double)*(int *)(a2 + 300));
        v202 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        *(_OWORD *)&v235.a = *MEMORY[0x1E0C9BAA8];
        *(_OWORD *)&v235.c = v202;
        *(_OWORD *)&v235.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
        CGContextSetTextMatrix(v126, &v235);
        CGColorSpaceRelease(v124);
        v203 = CGBitmapContextCreateImage(v126);
        if (v203)
        {
          v204 = v203;
          v257.origin.y = (double)(int)v158;
          v257.size.height = (double)v197;
          v257.origin.x = v195;
          v257.size.width = v150;
          v258 = CGRectIntegral(v257);
          CGContextDrawImage(v6, v258, v204);
          CGImageRelease(v204);
          CGContextRelease(v126);
          return 0;
        }
        v149 = FigSignalErrorAt();
        MutableCopy = 0;
        goto LABEL_252;
      }
      v149 = FigSignalErrorAt();
      MutableCopy = 0;
LABEL_250:
      CGColorSpaceRelease(v124);
      goto LABEL_172;
    }
  }
  return v149;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_Layout(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  CGSize v5;
  CGPoint v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, _OWORD *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(const void *, CGRect *);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, CGSize *);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, CGPoint *);
  CGPoint v19;
  CGSize size;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(const void *, double, double, double, double);
  CGPoint origin;
  CGSize v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(const void *, double, double, double, double);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(const void *, uint64_t);
  uint64_t v32;
  const __CFArray *Value;
  const __CFArray *v34;
  CFIndex Count;
  CFIndex v36;
  const __CFAttributedString *ValueAtIndex;
  const __CFAttributedString *v38;
  CFIndex Length;
  CFNumberRef v40;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  const __CFAttributedString *v47;
  CFDictionaryRef theDict;
  _OWORD v49[2];
  CGPoint v50;
  CGSize v51;
  CGRect v52;
  CFRange v53;
  CFRange v54;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v52.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v52.size = v5;
  v51 = (CGSize)*MEMORY[0x1E0C9D820];
  v6 = (CGPoint)*MEMORY[0x1E0C9D538];
  v49[1] = v5;
  v50 = v6;
  v49[0] = v52.origin;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v9 = *(void (**)(const void *, _OWORD *))(v8 + 72);
      if (v9)
        v9(a1, v49);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(const void *, CGRect *))(v11 + 104);
      if (v12)
        v12(a1, &v52);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = *(void (**)(const void *, CGSize *))(v14 + 120);
      if (v15)
        v15(a1, &v51);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = *(void (**)(const void *, CGPoint *))(v17 + 136);
      if (v18)
        v18(a1, &v50);
    }
  }
  if (v52.origin.x != v50.x || v52.origin.y != v50.y)
  {
    v52.origin = v50;
    v19 = v50;
    size = v52.size;
    FigCDSNodeProtocolGetProtocolID();
    v21 = CMBaseObjectGetProtocolVTable();
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v23 = *(void (**)(const void *, double, double, double, double))(v22 + 96);
        if (v23)
          v23(a1, v19.x, v19.y, size.width, size.height);
      }
    }
  }
  if (v52.size.width != v51.width || v52.size.height != v51.height)
  {
    v52.size = v51;
    origin = v52.origin;
    v25 = v51;
    FigCDSNodeProtocolGetProtocolID();
    v26 = CMBaseObjectGetProtocolVTable();
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 16);
      if (v27)
      {
        v28 = *(void (**)(const void *, double, double, double, double))(v27 + 96);
        if (v28)
          v28(a1, origin.x, origin.y, v25.width, v25.height);
      }
    }
    FigCDSNodeProtocolGetProtocolID();
    v29 = CMBaseObjectGetProtocolVTable();
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v31 = *(void (**)(const void *, uint64_t))(v30 + 200);
        if (v31)
          v31(a1, 1);
      }
    }
  }
  v32 = *(_QWORD *)(a2 + 280);
  if (v32)
  {
    theDict = 0;
    FigCDSLayoutContextGetSubtitleSample(v32, &theDict);
    if (theDict)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
      if (Value)
      {
        v34 = Value;
        Count = CFArrayGetCount(Value);
        v47 = 0;
        FigCDSLayoutContextGetMapping(*(_QWORD *)(a2 + 280), a1, (const void **)&v47);
        if (Count >= 1)
        {
          v36 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v34, v36);
            if (ValueAtIndex)
            {
              v38 = ValueAtIndex;
              if (CFAttributedStringGetLength(ValueAtIndex))
              {
                if (v38 == v47)
                  break;
              }
            }
            if (Count == ++v36)
              goto LABEL_47;
          }
          Length = CFAttributedStringGetLength(v38);
          v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, DerivedStorage + 3);
          v53.location = 0;
          v53.length = Length;
          CFAttributedStringSetAttribute(v38, v53, CFSTR("kFigSubtitleRenderer_FontSizeToUse"), v40);
          if (v40)
            CFRelease(v40);
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v52);
          v54.location = 0;
          v54.length = Length;
          CFAttributedStringSetAttribute(v38, v54, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), DictionaryRepresentation);
          if (DictionaryRepresentation)
            CFRelease(DictionaryRepresentation);
        }
      }
    }
  }
LABEL_47:
  v42 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v43 = CMBaseObjectGetProtocolVTable();
  if (!v43)
    return 4294954508;
  v44 = *(_QWORD *)(v43 + 16);
  if (!v44)
    return 4294954508;
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 272);
  if (v45)
    return v45(v42, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_ExecActions(uint64_t a1)
{
  uint64_t ProtocolVTable;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFArrayRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, float64x2_t *);
  const void *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(const void *, char **);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, float64x2_t *);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, int *);
  float64x2_t v19;
  float64x2_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, __n128, double);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  int v30;
  void *v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void *, double, double);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void *, _QWORD);
  float64x2_t v40;
  __n128 v41;
  void *value;
  int v43;
  float64x2_t v44;
  char *__s1;
  CFArrayRef theArray;
  float64x2_t v47;

  v40 = *(float64x2_t *)MEMORY[0x1E0C9D538];
  v47 = *(float64x2_t *)MEMORY[0x1E0C9D538];
  __s1 = 0;
  theArray = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v3 = *(_QWORD *)(ProtocolVTable + 16);
    if (v3)
    {
      v4 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v3 + 328);
      if (!v4)
      {
LABEL_29:
        v22 = 4294954514;
        goto LABEL_27;
      }
      v5 = v4(a1, &theArray);
      if ((_DWORD)v5)
      {
LABEL_53:
        v22 = v5;
        goto LABEL_27;
      }
      if (!theArray || !CFArrayGetCount(theArray))
        return 0;
      FigCDSNodeProtocolGetProtocolID();
      v6 = CMBaseObjectGetProtocolVTable();
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 16);
        if (v7)
        {
          v8 = *(void (**)(uint64_t, float64x2_t *))(v7 + 136);
          if (v8)
            v8(a1, &v47);
        }
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      FigCDSBaseProtocolGetProtocolID();
      v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
          if (v12)
          {
            v5 = v12(ValueAtIndex, &__s1);
            if (!(_DWORD)v5)
            {
              if (__s1 && !strcmp(__s1, "FigCDSMoveToAction"))
              {
                v44 = v40;
                v43 = 0;
                FigCDSMoveToActionProtocolGetProtocolID();
                v13 = CMBaseObjectGetProtocolVTable();
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 16);
                  if (v14)
                  {
                    v15 = *(void (**)(const void *, float64x2_t *))(v14 + 8);
                    if (v15)
                      v15(ValueAtIndex, &v44);
                  }
                }
                FigCDSActionProtocolGetProtocolID();
                v16 = CMBaseObjectGetProtocolVTable();
                if (v16
                  && (v17 = *(_QWORD *)(v16 + 16)) != 0
                  && (v18 = *(void (**)(const void *, int *))(v17 + 8)) != 0
                  && (v18(ValueAtIndex, &v43), v43 >= 33))
                {
                  v19 = v47;
                  v20 = vdivq_f64(vsubq_f64(v44, v47), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)(v43 / 0x21u + 1)), 0));
                  v21 = 1;
                }
                else
                {
                  v21 = 0;
                  v19 = v47;
                  v20 = vsubq_f64(v44, v47);
                }
                if (v20.f64[0] != 0.0 || v20.f64[1] != 0.0)
                {
                  v41 = (__n128)vaddq_f64(v20, v19);
                  v47 = (float64x2_t)v41;
                  FigCDSNodeProtocolGetProtocolID();
                  v24 = CMBaseObjectGetProtocolVTable();
                  if (v24)
                  {
                    v25 = *(_QWORD *)(v24 + 16);
                    if (v25)
                    {
                      v26 = *(void (**)(uint64_t, __n128, double))(v25 + 128);
                      if (v26)
                        v26(a1, v41, v41.n128_f64[1]);
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  v27 = CMBaseObjectGetProtocolVTable();
                  if (v27)
                  {
                    v28 = *(_QWORD *)(v27 + 16);
                    if (v28)
                    {
                      v29 = *(void (**)(uint64_t, uint64_t))(v28 + 216);
                      if (v29)
                        v29(a1, 1);
                    }
                  }
                }
                CFArrayRemoveValueAtIndex(theArray, 0);
                if (v21)
                {
                  v30 = v43;
                  value = 0;
                  FigCDSMoveToActionCreate(&value);
                  v31 = value;
                  v32 = v44;
                  FigCDSMoveToActionProtocolGetProtocolID();
                  v33 = CMBaseObjectGetProtocolVTable();
                  if (v33)
                  {
                    v34 = *(_QWORD *)(v33 + 16);
                    if (v34)
                    {
                      v35 = *(void (**)(void *, double, double))(v34 + 16);
                      if (v35)
                        v35(v31, v32.f64[0], v32.f64[1]);
                    }
                  }
                  v36 = value;
                  FigCDSActionProtocolGetProtocolID();
                  v37 = CMBaseObjectGetProtocolVTable();
                  if (v37)
                  {
                    v38 = *(_QWORD *)(v37 + 16);
                    if (v38)
                    {
                      v39 = *(void (**)(void *, _QWORD))(v38 + 16);
                      if (v39)
                        v39(v36, (v30 - 33));
                    }
                  }
                  CFArrayInsertValueAtIndex(theArray, 0, value);
                  if (value)
                    CFRelease(value);
                }
              }
              return 0;
            }
            goto LABEL_53;
          }
          goto LABEL_29;
        }
      }
    }
  }
  v22 = 4294954508;
LABEL_27:
  FigSignalErrorAt();
  return v22;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __int16 *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7)
        v7(a1, (char *)&v25 + 1);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, __int16 *))(v9 + 224);
      if (v10)
        v10(a1, &v25);
    }
  }
  if (HIBYTE(v25))
  {
    FigCDSNodeProtocolGetProtocolID();
    v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(void (**)(uint64_t, uint64_t))(v12 + 280);
        if (v13)
          v13(a1, a2);
      }
    }
  }
  if ((_BYTE)v25)
  {
    FigCDSNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
        if (v16)
          v16(a1, a2);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 296);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 336);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 344);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t ckCaptionSetupText(uint64_t a1, CFAttributedStringRef aStr, int a3, uint64_t a4, double a5)
{
  __CFAttributedString *v7;
  const void *v9;
  const void *v10;
  CFIndex v11;
  const __CFString *String;
  UniChar *v13;
  CFAllocatorRef *v14;
  UniChar *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int v18;
  CFIndex v19;
  const __CFString *v20;
  CFRange v21;
  unsigned int v22;
  const __CFString *v23;
  CFIndex Length;
  CFTypeRef v25;
  CFIndex v26;
  CFTypeRef *v27;
  __CFDictionary *Mutable;
  __CFDictionary *v29;
  CTParagraphStyleRef v30;
  CTParagraphStyleRef v31;
  const void *v32;
  const __CFString *v33;
  const __CFDictionary *Attributes;
  const __CFDictionary *v35;
  CGColor *CGColorFromCFArray;
  const __CFNumber *v37;
  const __CFNumber *v38;
  double v39;
  const __CFNumber *v40;
  CTParagraphStyleSpecifier spec;
  int v42;
  CFNumberRef v43;
  _BOOL4 v44;
  const __CFString *v45;
  const __CFString *v46;
  int v47;
  uint64_t v48;
  int v49;
  CGColor *v50;
  int v51;
  const void *v52;
  const __CTFontDescriptor *v53;
  const __CTFontDescriptor *v54;
  const void *v55;
  CGColor *v56;
  const void *v57;
  const __CFString *v58;
  const void *v59;
  const void *v60;
  const __CTFont *v61;
  double Size;
  unsigned int v63;
  uint64_t v64;
  const __CFString *v65;
  const __CFString *v66;
  char v67;
  const void *v68;
  const __CFString *v69;
  uint64_t v70;
  int v71;
  const __CTFont *v72;
  char v73;
  uint64_t v74;
  const __CTFontDescriptor *v75;
  __CFDictionary *v76;
  CTFontSymbolicTraits v77;
  const void *CopyWithSymbolicTraits;
  const __CFNumber *SInt32;
  const __CFNumber *UInt32;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontDescriptorRef v82;
  CTFontDescriptorRef v83;
  const __CFArray *v84;
  const __CFArray *v85;
  CFArrayRef v86;
  CFArrayRef v87;
  const __CTFontDescriptor *v88;
  uint64_t v89;
  __CFDictionary *v90;
  CTParagraphStyleSpecifier v91;
  CFNumberRef v92;
  CFNumberRef v93;
  double Ascent;
  double Descent;
  double Leading;
  const __CTFont *v97;
  double v98;
  double v99;
  CTParagraphStyleRef v100;
  BOOL v101;
  void *v103;
  void *v104;
  const __CFString *v105;
  void *v106;
  const __CFString *v107;
  const __CFString *attrName;
  const __CFString *v109;
  const __CFString *v110;
  const __CFString *v111;
  const __CFString *v112;
  int v113;
  const __CFString *theString2;
  const __CFString *v115;
  const __CFString *attribute;
  uint64_t v117;
  const __CFAllocator *allocator;
  uint64_t v119;
  void *v120;
  __CFAttributedString *aStra;
  void *v122;
  const __CFString *v123;
  const __CFString *v124;
  const __CFString *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *key;
  CFTypeRef value;
  int v132;
  CFTypeRef v133;
  CGColor *v134;
  const void *v135;
  CFIndex v136;
  void *v137;
  uint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  double v141;
  double v142;
  char v143;
  CFRange v144;
  CFRange effectiveRange;
  CTParagraphStyleSetting valuePtr;
  int v147;
  uint64_t v148;
  double *v149;
  int v150;
  uint64_t v151;
  double *v152;
  int v153;
  uint64_t v154;
  double *v155;
  _OWORD v156[2];
  uint64_t v157;
  CFRange v158;
  CFRange v159;
  CFRange v160;
  CFRange v161;
  CFRange v162;
  CFRange v163;
  CFRange v164;

  v157 = *MEMORY[0x1E0C80C00];
  if (!aStr)
    return 4294950096;
  v7 = aStr;
  if (a3 == 2)
  {
    *(_QWORD *)&valuePtr.spec = 0;
    *(_QWORD *)&v156[0] = 0;
    Length = CFAttributedStringGetLength(aStr);
    calculateAndCopyStrokeAttributes(a4, &valuePtr, (CFNumberRef *)v156, a5);
    if (*(_QWORD *)&valuePtr.spec)
    {
      v159.location = 0;
      v159.length = Length;
      CFAttributedStringSetAttribute(v7, v159, (CFStringRef)*MEMORY[0x1E0CA85C8], *(CFTypeRef *)&valuePtr.spec);
    }
    if (*(_QWORD *)&v156[0])
    {
      v160.location = 0;
      v160.length = Length;
      CFAttributedStringSetAttribute(v7, v160, (CFStringRef)*MEMORY[0x1E0CA85D0], *(CFTypeRef *)&v156[0]);
    }
    if (*(_QWORD *)&valuePtr.spec)
      CFRelease(*(CFTypeRef *)&valuePtr.spec);
    if (*(_QWORD *)&v156[0])
      CFRelease(*(CFTypeRef *)&v156[0]);
    setupRubyAnnotation(a4, v7, 2, a5);
    return 0;
  }
  else
  {
    if (a3)
      return 0;
    v113 = FigCFEqual();
    if (!v113)
    {
      v9 = *(const void **)(a4 + 392);
      v10 = *(const void **)(a1 + 48);
      *(_QWORD *)(a4 + 392) = v10;
      if (v10)
        CFRetain(v10);
      if (v9)
        CFRelease(v9);
    }
    v11 = CFAttributedStringGetLength(v7);
    String = CFAttributedStringGetString(v7);
    v13 = (UniChar *)malloc_type_calloc(v11, 2uLL, 0x1000040BDFB0063uLL);
    v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    v119 = a1;
    if (v13)
    {
      v15 = v13;
      valuePtr.spec = kCTParagraphStyleSpecifierFirstLineHeadIndent;
      v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      if (v16)
      {
        v17 = v16;
        v158.location = 0;
        v158.length = v11;
        CFStringGetCharacters(String, v158, v15);
        v18 = 0;
        if (v11 >= 1)
        {
          v19 = 0;
          v20 = CFSTR("kCDSSubtitleRenderer_LanguageCategory");
LABEL_13:
          v21.location = -1;
          do
          {
            v22 = v15[v19];
            if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x51C019C0003000C0, (uint16x4_t)vadd_s16(vdup_n_s16(v22), (int16x4_t)0xB200CC00CE40CFC0))) & 1) != 0|| (unsigned __int16)(v22 + 1792) < 0x200u|| (unsigned __int16)(v22 + 464) < 0x20u|| (unsigned __int16)(v22 + 256) < 0xF0u|| (v22 & 0xFFC0) == 0x3000|| (v22 & 0xFF80) == 0x2E80|| (v22 & 0xFE00) == 0x3200)
            {
              if (v21.location < 0)
                v21.location = v19;
            }
            else if ((v21.location & 0x8000000000000000) == 0)
            {
              v21.length = v19 - v21.location;
              v23 = v20;
              CFAttributedStringSetAttribute(v7, v21, v20, v17);
              v20 = v23;
              v18 = 1;
              v101 = v11 - 1 == v19++;
              if (v101)
                goto LABEL_42;
              goto LABEL_13;
            }
            ++v19;
          }
          while (v11 != v19);
          if ((v21.location & 0x8000000000000000) == 0)
          {
            v21.length = v11 - v21.location;
            CFAttributedStringSetAttribute(v7, v21, CFSTR("kCDSSubtitleRenderer_LanguageCategory"), v17);
            v18 = 1;
          }
        }
LABEL_42:
        CFRelease(v17);
        v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      }
      else
      {
        v18 = 0;
      }
      free(v15);
    }
    else
    {
      v18 = 0;
    }
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    v112 = (const __CFString *)*MEMORY[0x1E0CA2B40];
    v25 = CFAttributedStringGetAttribute(v7, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
    v26 = CFAttributedStringGetLength(v7);
    v27 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v133 = v25;
    if (v18 && v25)
    {
      v161.location = 0;
      v161.length = v26;
      CFAttributedStringSetAttribute(v7, v161, (CFStringRef)*MEMORY[0x1E0CA86C8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      v132 = *(_DWORD *)(a1 + 16);
      v139 = (_DWORD *)(a1 + 16);
      Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        return 4294950093;
      v29 = Mutable;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8170], (const void *)*MEMORY[0x1E0CA8180]);
      v162.location = 0;
      v162.length = v26;
      CFAttributedStringSetAttribute(v7, v162, (CFStringRef)*MEMORY[0x1E0CA8178], v29);
      CFRelease(v29);
    }
    else
    {
      v132 = *(_DWORD *)(a1 + 16);
      v139 = (_DWORD *)(a1 + 16);
    }
    v30 = CTParagraphStyleCreate(0, 0);
    if (v30)
    {
      v31 = v30;
      CTParagraphStyleSetCompositionLanguage();
      v163.location = 0;
      v163.length = v26;
      v115 = (const __CFString *)*MEMORY[0x1E0CA85A0];
      CFAttributedStringSetAttribute(v7, v163, (CFStringRef)*MEMORY[0x1E0CA85A0], v31);
      CFRelease(v31);
      v144.location = 0;
      v144.length = 0;
      v138 = *MEMORY[0x1E0CA8308];
      v129 = (void *)*MEMORY[0x1E0CA2A20];
      key = (void *)*MEMORY[0x1E0CA2A38];
      attrName = (const __CFString *)*MEMORY[0x1E0CA8580];
      v137 = (void *)*MEMORY[0x1E0CA2AD0];
      value = *v27;
      v127 = (void *)*MEMORY[0x1E0CA2978];
      v128 = (void *)*MEMORY[0x1E0CA2A50];
      v126 = (void *)*MEMORY[0x1E0CA2B38];
      allocator = *v14;
      v109 = (const __CFString *)*MEMORY[0x1E0CA86C0];
      v122 = (void *)*MEMORY[0x1E0CA2A00];
      v32 = (const void *)*MEMORY[0x1E0CA2A28];
      attribute = (const __CFString *)*MEMORY[0x1E0CA8380];
      v117 = *MEMORY[0x1E0CA83C0];
      v120 = (void *)*MEMORY[0x1E0CA2A58];
      v111 = (const __CFString *)*MEMORY[0x1E0CA8590];
      v103 = (void *)*MEMORY[0x1E0CA8340];
      v104 = (void *)*MEMORY[0x1E0CA8300];
      v106 = (void *)*MEMORY[0x1E0CA81D8];
      v125 = (const __CFString *)*MEMORY[0x1E0CA2958];
      theString2 = (const __CFString *)*MEMORY[0x1E0CA2948];
      v110 = (const __CFString *)*MEMORY[0x1E0CA2930];
      v107 = (const __CFString *)*MEMORY[0x1E0CA2928];
      v105 = (const __CFString *)*MEMORY[0x1E0CA2940];
      v124 = (const __CFString *)*MEMORY[0x1E0CA8550];
      v123 = (const __CFString *)*MEMORY[0x1E0CA8188];
      v135 = (const void *)*MEMORY[0x1E0CA2A28];
      v136 = v26;
      aStra = v7;
      while (1)
      {
        if (v144.length + v144.location >= v26)
        {
          setupRubyAnnotation(a4, v7, 0, a5);
          v164.length = CFAttributedStringGetLength(v7);
          v144.location = 0;
          v144.length = v164.length;
          v164.location = 0;
          CFAttributedStringSetAttribute(v7, v164, CFSTR("kCDSSubtitleRenderer_CommonSetupDone"), value);
          return 0;
        }
        v156[0] = xmmword_1932FC308;
        v156[1] = unk_1932FC318;
        v33 = (const __CFString *)CFRetain(CFSTR("Helvetica"));
        Attributes = CFAttributedStringGetAttributes(v7, v144.length + v144.location, &v144);
        if (!Attributes)
        {
          v50 = 0;
          v140 = 0;
          v51 = 0;
          LODWORD(v52) = 0;
          v44 = 0;
          v49 = 0;
          v39 = a5;
          v48 = v138;
          goto LABEL_130;
        }
        v35 = Attributes;
        CGColorFromCFArray = copyContentColor(*(_QWORD *)a4, *(CGColorRef *)(a4 + 136), *(_QWORD *)(a4 + 24), Attributes, v129, *(CGFloat *)(a4 + 160));
        if (!CGColorFromCFArray)
          CGColorFromCFArray = createCGColorFromCFArray(0, 0, v156);
        if (v133)
        {
          if (CFDictionaryContainsKey(v35, key))
          {
            v37 = (const __CFNumber *)CFDictionaryGetValue(v35, key);
            v38 = v37;
            valuePtr.spec = kCTParagraphStyleSpecifierAlignment;
            if (!v37
              || (CFNumberGetValue(v37, kCFNumberIntType, &valuePtr), valuePtr.spec <= kCTParagraphStyleSpecifierTabStops))
            {
              CFAttributedStringSetAttribute(v7, v144, attrName, v38);
            }
          }
        }
        v39 = a5;
        if (CFDictionaryContainsKey(v35, v137))
        {
          v40 = (const __CFNumber *)CFDictionaryGetValue(v35, v137);
          spec = 100;
          valuePtr.spec = 100;
          if (v40)
          {
            CFNumberGetValue(v40, kCFNumberIntType, &valuePtr);
            spec = valuePtr.spec;
          }
          v39 = (double)(int)spec * a5 / 100.0;
        }
        v42 = value == CFDictionaryGetValue(v35, v128);
        HIDWORD(v140) = value == CFDictionaryGetValue(v35, v127);
        if (value == CFDictionaryGetValue(v35, v126))
        {
          valuePtr.spec = kCTParagraphStyleSpecifierFirstLineHeadIndent;
          v43 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
          CFAttributedStringSetAttribute(v7, v144, v109, v43);
          if (v43)
            CFRelease(v43);
        }
        LODWORD(v140) = v42;
        v44 = *(unsigned __int8 *)(a4 + 384) != v42 || !v113 || *(unsigned __int8 *)(a4 + 385) != HIDWORD(v140);
        if (v132 != 4)
          break;
        if (CFDictionaryContainsKey(v35, v122))
        {
          v45 = (const __CFString *)CFDictionaryGetValue(v35, v122);
          if (!v45)
            break;
          v46 = v45;
          CFRetain(v45);
          if (v33)
            CFRelease(v33);
          v47 = 1;
          v33 = v46;
          v48 = v138;
          v49 = 1;
        }
        else
        {
          if (!CFDictionaryContainsKey(v35, v32) || !CFDictionaryGetValue(v35, v32))
            break;
          *(_QWORD *)&valuePtr.spec = 0;
          if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
            && (v53 = *(const __CTFontDescriptor **)(a4 + 8 * *(_QWORD *)&valuePtr.spec + 200)) != 0)
          {
            if (v33)
              CFRelease(v33);
            v33 = (const __CFString *)CTFontDescriptorCopyAttribute(v53, attribute);
            v47 = 1;
            v48 = v117;
          }
          else
          {
            v47 = 0;
            v48 = v138;
          }
          v49 = 0;
        }
LABEL_88:
        if (*v139 != 3)
        {
          if (*v139 != 1)
            goto LABEL_99;
          CFRetain(CFSTR("CourierNewPSMT"));
          if (v33)
            CFRelease(v33);
          if (*v139 != 3)
          {
            v47 = 1;
            v33 = CFSTR("CourierNewPSMT");
            v48 = v117;
            goto LABEL_98;
          }
          CFRetain(CFSTR("Helvetica"));
          v33 = CFSTR("CourierNewPSMT");
LABEL_95:
          CFRelease(v33);
          goto LABEL_96;
        }
        CFRetain(CFSTR("Helvetica"));
        if (v33)
          goto LABEL_95;
LABEL_96:
        v47 = 1;
        v33 = CFSTR("Helvetica");
        v48 = v138;
LABEL_98:
        v49 = 1;
LABEL_99:
        if (*(_QWORD *)(a4 + 64))
        {
          if (v47)
            goto LABEL_111;
          v54 = *(const __CTFontDescriptor **)(a4 + 200);
          if (v33)
            CFRelease(v33);
        }
        else
        {
          if (v33)
            CFRelease(v33);
          v54 = *(const __CTFontDescriptor **)(a4 + 200);
        }
        v33 = (const __CFString *)CTFontDescriptorCopyAttribute(v54, attribute);
        v55 = *(const void **)(a4 + 200);
        if (v55)
        {
          v52 = *(const void **)(a4 + 376);
          if (v52 && v52 == v55)
          {
            v56 = CGColorFromCFArray;
            v51 = 0;
            LODWORD(v52) = 0;
          }
          else
          {
            v56 = CGColorFromCFArray;
            *(_QWORD *)(a4 + 376) = v55;
            CFRetain(v55);
            if (v52)
            {
              CFRelease(v52);
              LODWORD(v52) = 0;
            }
            v51 = 1;
          }
          v48 = v117;
          goto LABEL_126;
        }
        v48 = v117;
LABEL_111:
        v57 = *(const void **)(a4 + 376);
        if (v57)
        {
          CFRelease(v57);
          *(_QWORD *)(a4 + 376) = 0;
        }
        v58 = *(const __CFString **)(a4 + 368);
        if (!v58)
        {
          v56 = CGColorFromCFArray;
          *(_QWORD *)(a4 + 368) = v33;
          if (v33)
            CFRetain(v33);
          goto LABEL_121;
        }
        if (v33 && CFStringCompare(v58, v33, 0))
        {
          v56 = CGColorFromCFArray;
          v59 = *(const void **)(a4 + 368);
          *(_QWORD *)(a4 + 368) = v33;
          CFRetain(v33);
          if (v59)
            CFRelease(v59);
LABEL_121:
          v51 = 0;
          LODWORD(v52) = 1;
          goto LABEL_126;
        }
        v56 = CGColorFromCFArray;
        v51 = 0;
        LODWORD(v52) = 0;
LABEL_126:
        if (CFDictionaryContainsKey(v35, v120) && (v60 = CFDictionaryGetValue(v35, v120)) != 0)
        {
          CFAttributedStringSetAttribute(aStra, v144, v111, v60);
          v50 = v56;
          v7 = aStra;
        }
        else
        {
          v50 = v56;
          v7 = aStra;
        }
LABEL_130:
        v61 = *(const __CTFont **)(a4 + 360);
        if (v61)
        {
          Size = CTFontGetSize(v61);
          v63 = v52 | v51;
          v64 = *(_QWORD *)(a4 + 360);
          if (!(v63 | v44) && v39 == Size)
          {
            if (v64)
              goto LABEL_134;
            goto LABEL_197;
          }
          if (v64)
          {
            CFRelease(*(CFTypeRef *)(a4 + 360));
            *(_QWORD *)(a4 + 360) = 0;
          }
        }
        if (!v33)
        {
          v72 = 0;
LABEL_158:
          v73 = v140;
          goto LABEL_196;
        }
        v68 = *(const void **)(a4 + 376);
        v69 = *(const __CFString **)(v119 + 48);
        v134 = v50;
        if (v69)
        {
          if (CFStringCompare(CFSTR("yue"), v69, 1uLL)
            && CFStringCompare(CFSTR("yue-Hant"), v69, 1uLL)
            && CFStringCompare(CFSTR("cmn-Hant"), v69, 1uLL)
            && CFStringCompare(CFSTR("zh-cmn-Hant"), v69, 1uLL)
            && CFStringCompare(CFSTR("zh-Hant"), v69, 1uLL))
          {
            if (CFStringCompare(CFSTR("cmn-Hans"), v69, 1uLL)
              && CFStringCompare(CFSTR("zh-cmn-Hans"), v69, 1uLL)
              && CFStringCompare(CFSTR("zh-cmn"), v69, 1uLL)
              && CFStringCompare(CFSTR("zh-Hans"), v69, 1uLL))
            {
              if (CFStringCompare(CFSTR("ja"), v69, 1uLL) && CFStringCompare(CFSTR("ja-JP"), v69, 1uLL))
              {
                v70 = 0;
                v71 = 0;
              }
              else
              {
                if (v49)
                  v101 = 0;
                else
                  v101 = *(_QWORD *)(a4 + 64) == 1;
                v71 = v101;
                v70 = 1;
              }
            }
            else
            {
              v71 = 0;
              v70 = 2;
            }
          }
          else
          {
            v71 = 0;
            v70 = 3;
          }
          if (*v139 == 3 && CFStringCompare(CFSTR("ja-JP"), v69, 1uLL) == kCFCompareEqualTo || v71)
          {
            *(_QWORD *)&valuePtr.spec = *(_QWORD *)(a4 + 64);
            v74 = MACaptionAppearanceCopyFontDescriptorForLanguage();
            goto LABEL_168;
          }
        }
        else
        {
          v70 = 0;
        }
        if (v68)
        {
          v74 = (uint64_t)CFRetain(v68);
LABEL_168:
          v75 = (const __CTFontDescriptor *)v74;
          v76 = 0;
          if (!v74)
            goto LABEL_220;
          goto LABEL_169;
        }
        v90 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v90)
        {
          v72 = 0;
          v50 = v134;
          goto LABEL_158;
        }
        v76 = v90;
        if (v138 == v48)
        {
          CFDictionaryAddValue(v90, v104, v33);
        }
        else if (v117 == v48)
        {
          CFDictionaryAddValue(v90, attribute, v33);
          if (CFStringCompare(v33, CFSTR("CourierNewPSMT"), 1uLL) == kCFCompareEqualTo)
          {
            *(float *)&v91 = *(double *)(a4 + 448);
            valuePtr.spec = v91;
            if (*(float *)&v91 > 0.0)
            {
              v92 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              if (v92)
              {
                v93 = v92;
                CFDictionaryAddValue(v76, v103, v92);
                CFRelease(v93);
              }
            }
          }
        }
        v75 = CTFontDescriptorCreateWithAttributes(v76);
        if (!v75)
        {
LABEL_220:
          v72 = 0;
          v50 = v134;
          goto LABEL_194;
        }
LABEL_169:
        v77 = v140 | (2 * HIDWORD(v140));
        CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v75, v77, 3u);
        if (CopyWithSymbolicTraits)
          goto LABEL_181;
        if ((_DWORD)v140)
        {
          SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
          UInt32 = (const __CFNumber *)FigCFNumberCreateUInt32();
          CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v75, SInt32, UInt32);
          CopyWithSymbolicTraits = CopyWithFeature;
          if (!HIDWORD(v140))
            goto LABEL_175;
          if (CopyWithFeature)
          {
            v82 = CTFontDescriptorCreateCopyWithSymbolicTraits(CopyWithFeature, v77, 2u);
            if (v82)
            {
              v83 = v82;
              CFRelease(CopyWithSymbolicTraits);
              CopyWithSymbolicTraits = v83;
            }
LABEL_175:
            if (SInt32)
LABEL_176:
              CFRelease(SInt32);
          }
          else
          {
            CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v75, v77, 2u);
            if (SInt32)
              goto LABEL_176;
          }
          if (UInt32)
            CFRelease(UInt32);
          if (CopyWithSymbolicTraits)
            goto LABEL_181;
        }
        CopyWithSymbolicTraits = CFRetain(v75);
LABEL_181:
        v72 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v39, 0);
        if (!v72
          || (v70 & 2) == 0
          || !v76
          || (*(_QWORD *)&valuePtr.spec = qword_1E2F9BDB0[v70],
              (v84 = CFArrayCreate(allocator, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378])) == 0))
        {
          v50 = v134;
          goto LABEL_192;
        }
        v85 = v84;
        v86 = CTFontCopyDefaultCascadeListForLanguages(v72, v84);
        v50 = v134;
        if (!v86)
        {
          CFRelease(v85);
LABEL_192:
          CFRelease(v75);
          if (!CopyWithSymbolicTraits)
            goto LABEL_194;
LABEL_193:
          CFRelease(CopyWithSymbolicTraits);
          goto LABEL_194;
        }
        v87 = v86;
        CFDictionarySetValue(v76, v106, v86);
        CFRelease(v75);
        CFRelease(v72);
        v88 = CTFontDescriptorCreateWithAttributes(v76);
        v75 = v88;
        if (v88)
          v72 = CTFontCreateWithFontDescriptor(v88, v39, 0);
        else
          v72 = 0;
        CFRelease(v87);
        CFRelease(v85);
        if (v75)
          goto LABEL_192;
        if (CopyWithSymbolicTraits)
          goto LABEL_193;
LABEL_194:
        v73 = v140;
        if (v76)
          CFRelease(v76);
LABEL_196:
        *(_QWORD *)(a4 + 360) = v72;
        *(_BYTE *)(a4 + 384) = v73;
        *(_BYTE *)(a4 + 385) = BYTE4(v140);
        if (v72)
        {
LABEL_134:
          v143 = 0;
          *(_QWORD *)&valuePtr.spec = 0;
          valuePtr.valueSize = 0;
          v65 = (const __CFString *)CFAttributedStringGetAttribute(v7, 0, v125, (CFRange *)&valuePtr);
          if (v65)
          {
            v66 = v65;
            if (CFStringCompare(v65, theString2, 0))
            {
              if (CFStringCompare(v66, v110, 0))
              {
                if (CFStringCompare(v66, v107, 0))
                {
                  if (CFStringCompare(v66, v105, 0))
                    v67 = 2;
                  else
                    v67 = 1;
                }
                else
                {
                  v67 = 1;
                }
              }
              else
              {
                v67 = 0;
              }
            }
            else
            {
              v67 = 4;
            }
          }
          else
          {
            v67 = 2 * (CFAttributedStringGetAttribute(v7, 0, v112, (CFRange *)&valuePtr) == 0);
          }
          v143 = v67;
          Ascent = CTFontGetAscent(*(CTFontRef *)(a4 + 360));
          Descent = CTFontGetDescent(*(CTFontRef *)(a4 + 360));
          v142 = 0.0;
          Leading = 0.0;
          if (*v139 != 1)
          {
            v97 = *(const __CTFont **)(a4 + 360);
            v98 = CTFontGetAscent(v97);
            v99 = CTFontGetDescent(v97);
            Leading = CTFontGetLeading(v97);
            if (Leading <= (v98 + v99) * 0.2)
              Leading = (v98 + v99) * 0.2;
          }
          v142 = Leading;
          v141 = Ascent + Descent + Leading;
          valuePtr.spec = kCTParagraphStyleSpecifierAlignment;
          valuePtr.valueSize = 1;
          valuePtr.value = &v143;
          v147 = 15;
          v148 = 8;
          v149 = &v142;
          v150 = 14;
          v151 = 8;
          v152 = &v142;
          v153 = 8;
          v154 = 8;
          v155 = &v141;
          v100 = CTParagraphStyleCreate(&valuePtr, 4uLL);
          CFAttributedStringSetAttribute(v7, v144, v124, v50);
          CFAttributedStringSetAttribute(v7, v144, v123, *(CFTypeRef *)(a4 + 360));
          v32 = v135;
          if (v100)
          {
            CFAttributedStringSetAttribute(v7, v144, v115, v100);
            CFRelease(v100);
            v89 = 0;
          }
          else
          {
            v89 = 4294950093;
          }
          goto LABEL_214;
        }
LABEL_197:
        v89 = 4294950093;
        v32 = v135;
LABEL_214:
        CGColorRelease(v50);
        if (v33)
          CFRelease(v33);
        v26 = v136;
        if ((_DWORD)v89)
          return v89;
      }
      v47 = 0;
      v49 = 0;
      v48 = v138;
      goto LABEL_88;
    }
    return 4294950095;
  }
}

CFDictionaryRef createFrameAttributesDictionary(const __CFString *a1)
{
  int v1;
  const __CFAllocator *v2;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = *(void **)MEMORY[0x1E0CA8578];
  valuePtr = 0;
  if (a1)
  {
    if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA2DE0], 0))
      v1 = 2;
    else
      v1 = 1;
    valuePtr = v1;
  }
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  return CFDictionaryCreate(v2, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

CGColor *copyContentColor(uint64_t a1, CGColorRef color, uint64_t a3, const __CFDictionary *a4, void *key, CGFloat a6)
{
  CGColor *Copy;
  BOOL v10;
  BOOL v11;
  CGColorRef CopyWithAlpha;
  CGColorRef v13;

  if (a1 || !color)
  {
    v10 = 0;
    if (!a4 || !key || (Copy = createCGColorFromCFArray(a4, key, 0), v10 = Copy != 0, !Copy))
    {
LABEL_8:
      Copy = CGColorCreateCopy(color);
      if (!Copy)
        return Copy;
    }
  }
  else
  {
    Copy = CGColorCreateCopy(color);
    v10 = 0;
    if (!Copy)
      goto LABEL_8;
  }
  if (a3)
    v11 = v10;
  else
    v11 = 0;
  if (a6 >= 0.0 && !v11)
  {
    CopyWithAlpha = CGColorCreateCopyWithAlpha(Copy, a6);
    if (CopyWithAlpha)
    {
      v13 = CopyWithAlpha;
      CGColorRelease(Copy);
      return v13;
    }
  }
  return Copy;
}

CGColorRef createCGColorFromCFArray(const __CFDictionary *a1, void *key, _OWORD *a3)
{
  void *Value;
  CFTypeID v7;
  CGColorRef v8;
  CGColorSpace *v9;
  CFTypeID v10;
  CFIndex v11;
  const void *ValueAtIndex;
  CFTypeID v13;
  __int128 v14;
  CGFloat valuePtr;
  CGFloat components[2];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1 || !key || !CFDictionaryContainsKey(a1, key))
  {
    if (!a3)
      return 0;
    v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
LABEL_15:
    v14 = a3[1];
    *(_OWORD *)components = *a3;
    v18 = v14;
LABEL_16:
    if (v9)
    {
      v8 = CGColorCreate(v9, components);
      CGColorSpaceRelease(v9);
      return v8;
    }
    return 0;
  }
  Value = (void *)CFDictionaryGetValue(a1, key);
  v7 = CFGetTypeID(Value);
  if (v7 != CGColorGetTypeID())
  {
    v10 = CFGetTypeID(Value);
    if (v10 == CFArrayGetTypeID())
    {
      v11 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v11);
        valuePtr = 0.0;
        v13 = CFGetTypeID(ValueAtIndex);
        if (v13 != CFNumberGetTypeID())
          break;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
        components[((_BYTE)v11++ - 1) & 3] = valuePtr;
        if (v11 == 4)
        {
          v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
          goto LABEL_16;
        }
      }
    }
LABEL_14:
    v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  v8 = CGColorRetain((CGColorRef)Value);
  if (!v8)
    goto LABEL_14;
  return v8;
}

void setupRubyAnnotation(uint64_t a1, CFAttributedStringRef aStr, int a3, double a4)
{
  CFIndex Length;
  CFIndex v7;
  CFIndex v8;
  const void *v9;
  const void *v10;
  const __CFAllocator *v11;
  const __CFDictionary *Attributes;
  const __CFDictionary *v13;
  const void *v14;
  const __CFAttributedString *Value;
  const __CFString *String;
  const __CFDictionary *v17;
  const __CFString *v18;
  const __CFString *v19;
  CTRubyAlignment v20;
  const void *v21;
  double v22;
  __CFDictionary *Mutable;
  CFNumberRef v24;
  const __CFDictionary *Copy;
  CTRubyPosition v26;
  CTRubyAnnotationRef v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  void *v34;
  void *v35;
  const __CFString *attrName;
  const __CFString *theString2;
  const void *v38;
  const void *v39;
  void *v40;
  const __CFString *v41;
  void *v42;
  void *v43;
  void *key;
  const void *v45;
  CFRange v47;
  CFRange effectiveRange;
  CFNumberRef v49;
  const void *v50;
  uint64_t valuePtr;

  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Length = CFAttributedStringGetLength(aStr);
  if (Length >= 1)
  {
    v7 = Length;
    v8 = 0;
    v9 = (const void *)*MEMORY[0x1E0CA8550];
    v10 = (const void *)*MEMORY[0x1E0CA2AD8];
    key = (void *)*MEMORY[0x1E0CA2AE0];
    theString2 = (const __CFString *)*MEMORY[0x1E0CA2D10];
    v32 = (const __CFString *)*MEMORY[0x1E0CA2CE0];
    v31 = (const __CFString *)*MEMORY[0x1E0CA2D00];
    v30 = (const __CFString *)*MEMORY[0x1E0CA2CE8];
    v29 = (const __CFString *)*MEMORY[0x1E0CA2CF0];
    v28 = (const __CFString *)*MEMORY[0x1E0CA2D08];
    v43 = (void *)*MEMORY[0x1E0CA2AE8];
    attrName = (const __CFString *)*MEMORY[0x1E0CA8168];
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v40 = (void *)*MEMORY[0x1E0CA85B8];
    v39 = (const void *)*MEMORY[0x1E0CA85B0];
    v38 = (const void *)*MEMORY[0x1E0C9AE50];
    v35 = (void *)*MEMORY[0x1E0CA85C8];
    v34 = (void *)*MEMORY[0x1E0CA85D0];
    v42 = (void *)*MEMORY[0x1E0CA2AF0];
    v41 = (const __CFString *)*MEMORY[0x1E0CA85A8];
    v45 = (const void *)*MEMORY[0x1E0CA2AD8];
    do
    {
      Attributes = CFAttributedStringGetAttributes(aStr, v8, &effectiveRange);
      if (Attributes)
      {
        v13 = Attributes;
        v14 = CFDictionaryContainsKey(Attributes, v9) ? CFDictionaryGetValue(v13, v9) : 0;
        if (CFDictionaryContainsKey(v13, v10))
        {
          Value = (const __CFAttributedString *)CFDictionaryGetValue(v13, v10);
          String = CFAttributedStringGetString(Value);
          v47.location = 0;
          v47.length = 0;
          v17 = CFAttributedStringGetAttributes(Value, 0, &v47);
          v18 = (const __CFString *)CFDictionaryGetValue(v17, key);
          if (v18)
          {
            v19 = v18;
            if (CFStringCompare(v18, theString2, 0))
            {
              if (CFStringCompare(v19, v32, 0))
              {
                if (CFStringCompare(v19, v31, 0))
                {
                  if (CFStringCompare(v19, v30, 0))
                  {
                    if (CFStringCompare(v19, v29, 0))
                    {
                      if (CFStringCompare(v19, v28, 0))
                        v20 = kCTRubyAlignmentAuto;
                      else
                        v20 = kCTRubyAlignmentLineEdge;
                    }
                    else
                    {
                      v20 = kCTRubyAlignmentDistributeSpace;
                    }
                  }
                  else
                  {
                    v20 = kCTRubyAlignmentDistributeLetter;
                  }
                }
                else
                {
                  v20 = kCTRubyAlignmentEnd;
                }
              }
              else
              {
                v20 = kCTRubyAlignmentCenter;
              }
            }
            else
            {
              v20 = kCTRubyAlignmentStart;
            }
          }
          else
          {
            v20 = kCTRubyAlignmentAuto;
          }
          v21 = CFDictionaryGetValue(v17, v43);
          if (v21)
            CFAttributedStringSetAttribute(aStr, effectiveRange, attrName, v21);
          v50 = 0;
          valuePtr = 0x3FE0000000000000;
          v49 = 0;
          if (a3 == 2)
          {
            if (*(_BYTE *)(a1 + 416))
              v22 = a4 * 0.5;
            else
              v22 = a4;
            calculateAndCopyStrokeAttributes(a1, &v50, &v49, v22);
          }
          Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v24 = CFNumberCreate(v11, kCFNumberCGFloatType, &valuePtr);
            CFDictionaryAddValue(Mutable, v40, v24);
            if (v24)
              CFRelease(v24);
            CFDictionaryAddValue(Mutable, v39, v38);
            CFDictionaryAddValue(Mutable, v9, v14);
            if (v50)
              CFDictionaryAddValue(Mutable, v35, v50);
            if (v49)
              CFDictionaryAddValue(Mutable, v34, v49);
            Copy = CFDictionaryCreateCopy(v11, Mutable);
          }
          else
          {
            FigSignalErrorAt();
            Copy = 0;
          }
          if (v50)
            CFRelease(v50);
          if (v49)
            CFRelease(v49);
          if (Mutable)
            CFRelease(Mutable);
          CFDictionaryGetValue(v17, v42);
          v26 = FigCFEqual() != 0;
          v27 = CTRubyAnnotationCreateWithAttributes(v20, kCTRubyOverhangNone, v26, String, Copy);
          CFAttributedStringSetAttribute(aStr, effectiveRange, v41, v27);
          if (v27)
            CFRelease(v27);
          v10 = v45;
          if (Copy)
            CFRelease(Copy);
        }
      }
      v8 = effectiveRange.length + effectiveRange.location;
    }
    while (effectiveRange.length + effectiveRange.location < v7);
  }
}

void calculateAndCopyStrokeAttributes(uint64_t a1, _QWORD *a2, CFNumberRef *a3, double a4)
{
  const void *CopyWithAlpha;
  CGColorSpace *DeviceRGB;
  CGColorSpace *v10;
  CGColor *v11;
  double v12;
  double v13;
  const __CFAllocator *v14;
  CFNumberRef v15;
  double v16;
  CGFloat components[2];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a4 > 0.0)
  {
    components[0] = *(CGFloat *)(a1 + 64);
    CopyWithAlpha = (const void *)MACaptionAppearanceCopyStrokeColor();
    if (!CopyWithAlpha)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      if (DeviceRGB)
      {
        v10 = DeviceRGB;
        *(_OWORD *)components = xmmword_1932FC328;
        v18 = unk_1932FC338;
        v11 = CGColorCreate(DeviceRGB, components);
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v11, *(CGFloat *)(a1 + 160));
        CGColorRelease(v11);
        CGColorSpaceRelease(v10);
      }
      else
      {
        CopyWithAlpha = 0;
      }
    }
    v12 = *(double *)(a1 + 408);
    if (v12 < 0.0)
    {
      MACaptionAppearanceGetStrokeWidth();
      v12 = v13 + v13;
    }
    if (*(_BYTE *)(a1 + 400))
      v12 = v12 * 100.0 / a4;
    components[0] = v12;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, components);
    if (v15)
    {
      if (a2)
      {
LABEL_12:
        *a2 = CopyWithAlpha;
LABEL_18:
        if (a3)
        {
          *a3 = v15;
        }
        else if (v15)
        {
          CFRelease(v15);
        }
        return;
      }
    }
    else
    {
      v16 = a4 * 0.147058824;
      if (a4 > 60.0)
        v16 = a4 * 0.147058824 * 0.5;
      components[0] = v16;
      v15 = CFNumberCreate(v14, kCFNumberCGFloatType, components);
      if (a2)
        goto LABEL_12;
    }
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
    goto LABEL_18;
  }
}

uint64_t ckCaptionDrawText(const __CFAttributedString *a1, uint64_t a2, int a3, int a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  CGContext *v16;
  int AppBooleanValue;
  double v18;
  double v19;
  const __CFDictionary *Attributes;
  CGColorSpace *v21;
  CGColorSpace *v22;
  CGColor *v23;
  CGColor *CopyWithAlpha;
  CGMutablePathRef Mutable;
  CGPath *v26;
  CTFramesetterRef v27;
  const __CTFramesetter *v28;
  const __CFDictionary *FrameAttributesDictionary;
  const __CFArray *Lines;
  const __CFArray *v31;
  double *v32;
  CFIndex v33;
  const __CFString *v34;
  const __CTLine *ValueAtIndex;
  const __CFArray *GlyphRuns;
  CFIndex v37;
  double *v38;
  char IsRightToLeft;
  char v40;
  uint64_t v41;
  CFIndex v42;
  const __CTRun *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  CFDictionaryRef v56;
  const __CFDictionary *v57;
  char v58;
  double v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  CGColor *Value;
  CGColor *v69;
  double *v70;
  _BOOL4 v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  double *v76;
  uint64_t v77;
  double *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  uint64_t v87;
  const __CTFramesetter *v89;
  CGPath *v90;
  const __CFArray *v91;
  CFRange v92;
  CFIndex Count;
  const __CFAllocator *allocator;
  const __CTFrame *frame;
  double dx;
  CFIndex v97;
  double v98;
  const __CFString *Attribute;
  int v100;
  double v101;
  double TrailingWhitespaceWidth;
  double rect;
  CFRange v106;
  CFRange effectiveRange;
  __int128 v108;
  uint64_t v109;
  CFRange v110;
  CFRange v111;
  CFRange v112;
  CGSize v113;
  CGRect v114;
  CGRect ImageBounds;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;

  v109 = *MEMORY[0x1E0C80C00];
  v16 = *(CGContext **)(a2 + 288);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("cds_custom_background_render"), CFSTR("com.apple.coremedia"), 0);
  v100 = a3;
  if (a3 == 1)
  {
    CGContextSetLineJoin(*(CGContextRef *)(a2 + 288), kCGLineJoinBevel);
    v18 = 0.0;
    v19 = 0.0;
  }
  else
  {
    if (a5 <= 60.0)
      v19 = a5 * 0.0882352941;
    else
      v19 = a5 * 0.0882352941 / 1.5;
    if (*(_DWORD *)(a2 + 296))
      v19 = -v19;
    v18 = 0.0;
  }
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Attributes = CFAttributedStringGetAttributes(a1, 0, &effectiveRange);
  switch(getEdgeStyle(*(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 264), Attributes, (void *)*MEMORY[0x1E0CA29C0]))
  {
    case 1:
    case 4:
      goto LABEL_21;
    case 2:
      if (a5 <= 60.0)
      {
        v18 = a5 * -0.0882352941;
        v19 = a5 * 0.0882352941;
      }
      else
      {
        v18 = a5 * 0.0882352941 / -1.5;
        v19 = a5 * 0.0882352941 / 1.5;
      }
      goto LABEL_17;
    case 3:
      if (a5 <= 60.0)
        v18 = a5 * 0.0882352941;
      else
        v18 = a5 * 0.0882352941 / 1.5;
      v19 = -v18;
      goto LABEL_17;
    default:
LABEL_17:
      effectiveRange = (CFRange)xmmword_1932FC348;
      v108 = *(_OWORD *)algn_1932FC358;
      v21 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (v21)
      {
        v22 = v21;
        v23 = CGColorCreate(v21, (const CGFloat *)&effectiveRange.location);
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v23, *(CGFloat *)(a2 + 160));
        CGColorRelease(v23);
        CGColorSpaceRelease(v22);
      }
      else
      {
        CopyWithAlpha = 0;
      }
      v113.width = v18;
      v113.height = v19;
      CGContextSetShadowWithColor(*(CGContextRef *)(a2 + 288), v113, 4.0, CopyWithAlpha);
      CGColorRelease(CopyWithAlpha);
LABEL_21:
      Mutable = CGPathCreateMutable();
      if (!Mutable)
        return 4294950093;
      v26 = Mutable;
      v27 = CTFramesetterCreateWithAttributedString(a1);
      if (!v27)
      {
        v87 = 4294950093;
        goto LABEL_97;
      }
      v28 = v27;
      v106.location = 0;
      v106.length = 0;
      Attribute = (const __CFString *)CFAttributedStringGetAttribute(a1, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &v106);
      FrameAttributesDictionary = createFrameAttributesDictionary(Attribute);
      v114.origin.x = a6;
      v114.origin.y = a7;
      v114.size.width = a8;
      v114.size.height = a9;
      CGPathAddRect(v26, 0, v114);
      v110.location = 0;
      v110.length = 0;
      frame = CTFramesetterCreateFrame(v28, v110, v26, FrameAttributesDictionary);
      if (FrameAttributesDictionary)
        CFRelease(FrameAttributesDictionary);
      if (frame)
      {
        if (!a4)
          goto LABEL_92;
        if (!AppBooleanValue)
          goto LABEL_92;
        Lines = CTFrameGetLines(frame);
        if (!Lines)
          goto LABEL_92;
        v31 = Lines;
        Count = CFArrayGetCount(Lines);
        if (Count < 1)
          goto LABEL_92;
        v89 = v28;
        v90 = v26;
        v32 = 0;
        v33 = 0;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        dx = a5 / -10.0;
        v92 = (CFRange)*MEMORY[0x1E0C9D538];
        v98 = a5 / -40.0;
        v34 = Attribute;
        v91 = v31;
LABEL_31:
        effectiveRange = v92;
        v111.location = v33;
        v111.length = 1;
        CTFrameGetLineOrigins(frame, v111, (CGPoint *)&effectiveRange);
        ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v31, v33);
        GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
        v37 = CFArrayGetCount(GlyphRuns);
        v38 = (double *)CFAllocatorReallocate(allocator, v32, 24 * v37, 0);
        if (!v38)
        {
          FigSignalErrorAt();
LABEL_91:
          v28 = v89;
          v26 = v90;
LABEL_92:
          CTFrameDraw(frame, v16);
          CFRelease(frame);
          v87 = 0;
          goto LABEL_96;
        }
        v32 = v38;
        v97 = v33;
        TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(ValueAtIndex);
        IsRightToLeft = CTLineIsRightToLeft();
        if (v37 < 1)
          goto LABEL_89;
        v40 = IsRightToLeft;
        v41 = 0;
        v42 = 0;
        v101 = -INFINITY;
        rect = INFINITY;
        while (1)
        {
          v43 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v42);
          CTRunGetBackgroundBounds();
          v45 = v44;
          v47 = v46;
          v49 = v48;
          v51 = v50;
          v112.location = 0;
          v112.length = 0;
          ImageBounds = CTRunGetImageBounds(v43, 0, v112);
          x = ImageBounds.origin.x;
          y = ImageBounds.origin.y;
          width = ImageBounds.size.width;
          height = ImageBounds.size.height;
          v56 = CTRunGetAttributes(v43);
          if (v49 < 0.0 || v51 < 0.0 || width < 0.0 || height < 0.0)
            goto LABEL_77;
          v57 = v56;
          if (TrailingWhitespaceWidth > 0.0)
          {
            v58 = v40 ^ 1;
            if (v42)
              v58 = 1;
            if ((v58 & 1) != 0)
            {
              if (v42 == v37 - 1)
                v60 = v40;
              else
                v60 = 1;
              if ((v60 & 1) != 0)
                goto LABEL_52;
              v59 = TrailingWhitespaceWidth;
              if (TrailingWhitespaceWidth >= v49)
                v59 = v49;
            }
            else
            {
              v59 = TrailingWhitespaceWidth;
              if (TrailingWhitespaceWidth >= v49)
                v59 = v49;
              v45 = v45 + v59;
            }
            v49 = v49 - v59;
          }
LABEL_52:
          if (v49 == 0.0)
          {
LABEL_77:
            if (++v42 == v37)
            {
              v77 = v41;
              if (v41 >= 1)
              {
LABEL_82:
                v78 = v32;
                do
                {
                  if (*(_QWORD *)v78)
                  {
                    v79 = v78[1];
                    v80 = v78[2] - v79;
                    if (v34)
                    {
                      v81 = -v79;
                      v82 = -v80;
                      v79 = rect;
                      v80 = v101 - rect;
                    }
                    else
                    {
                      v81 = rect;
                      v82 = v101 - rect;
                    }
                    v120 = CGRectOffset(*(CGRect *)&v79, a6 + *(double *)&effectiveRange.location, a7 + *(double *)&effectiveRange.length);
                    v83 = v120.origin.x;
                    v84 = v120.origin.y;
                    v85 = v120.size.width;
                    v86 = v120.size.height;
                    CGContextSetFillColorWithColor(v16, *(CGColorRef *)v78);
                    v121.origin.x = v83;
                    v121.origin.y = v84;
                    v121.size.width = v85;
                    v121.size.height = v86;
                    CGContextAddRect(v16, v121);
                    CGContextFillPath(v16);
                  }
                  v78 += 3;
                  --v77;
                }
                while (v77);
              }
LABEL_89:
              v33 = v97 + 1;
              v31 = v91;
              if (v97 + 1 == Count)
              {
                CFAllocatorDeallocate(allocator, v32);
                goto LABEL_91;
              }
              goto LABEL_31;
            }
          }
          else
          {
            if (v100 == 1)
            {
              v116.origin.x = x;
              v116.origin.y = y;
              v116.size.width = width;
              v116.size.height = height;
              v117 = CGRectInset(v116, dx, dx);
              x = v117.origin.x;
              y = v117.origin.y;
              width = v117.size.width;
              height = v117.size.height;
            }
            v118.origin.x = x;
            v118.origin.y = y;
            v118.size.width = width;
            v118.size.height = height;
            v119 = CGRectInset(v118, v98, v98);
            if (v45 >= v119.origin.x)
              v61 = v119.origin.x;
            else
              v61 = v45;
            v62 = v119.origin.x + v119.size.width;
            if (v45 + v49 <= v62)
              v63 = v62;
            else
              v63 = v45 + v49;
            if (v47 >= v119.origin.y)
              v64 = v119.origin.y;
            else
              v64 = v47;
            v65 = v119.origin.y + v119.size.height;
            if (v47 + v51 > v65)
              v65 = v47 + v51;
            v66 = rect;
            if (rect >= v64)
              v66 = v64;
            rect = v66;
            v67 = v101;
            if (v101 <= v65)
              v67 = v65;
            v101 = v67;
            Value = (CGColor *)CFDictionaryGetValue(v57, CFSTR("kCDSSubtitleRenderer_CharacterBackgroundColor"));
            v69 = Value;
            if (v41)
            {
              v70 = &v32[3 * v41];
              v71 = CGColorEqualToColor(Value, *((CGColorRef *)v70 - 3));
              v73 = *(v70 - 1);
              v72 = v70 - 1;
              v74 = v73;
              if (v71)
              {
                if (v74 <= v63)
                  v74 = v63;
                *v72 = v74;
              }
              else
              {
                v75 = (v61 + v74) * 0.5;
                *v72 = v75;
                v76 = &v32[3 * v41];
                *(_QWORD *)v76 = v69;
                v76[1] = v75;
                v76[2] = v63;
                ++v41;
              }
              v34 = Attribute;
              goto LABEL_77;
            }
            *(_QWORD *)v32 = Value;
            v32[1] = v61;
            v32[2] = v63;
            ++v42;
            v77 = 1;
            v41 = 1;
            v34 = Attribute;
            if (v42 == v37)
              goto LABEL_82;
          }
        }
      }
      v87 = 4294950093;
LABEL_96:
      CFRelease(v28);
LABEL_97:
      CFRelease(v26);
      return v87;
  }
}

uint64_t getEdgeStyle(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, void *key)
{
  uint64_t v5;
  CFTypeID TypeID;
  void *value;

  v5 = a2;
  if (a1)
  {
    if (!theDict || !key)
      return a2;
    value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value)
      && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(value)))
    {
      v5 = 1;
      if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B70], 1uLL))
      {
        if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B78], 1uLL))
        {
          if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B60], 1uLL))
          {
            if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B80], 1uLL))
            {
              if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B68], 1uLL))
                v5 = 0;
              else
                v5 = 5;
            }
            else
            {
              v5 = 4;
            }
          }
          else
          {
            v5 = 3;
          }
        }
        else
        {
          v5 = 2;
        }
      }
    }
    else
    {
      v5 = 0;
    }
  }
  if (!v5)
    return a2;
  return v5;
}

void setupHighlight(uint64_t a1, const __CFAttributedString *a2)
{
  CFIndex Length;
  CFIndex v5;
  CFIndex v6;
  const __CFString *v7;
  void *v8;
  const void *v9;
  CFDictionaryRef Attributes;
  const __CFDictionary *v11;
  CGColorSpace *v12;
  CGColor *CGColorFromCFArray;
  CGColor *v14;
  const CGFloat *v15;
  char v16;
  const CGFloat *v17;
  const CGFloat *v18;
  CGColor *v19;
  CFRange v20;
  __CFAttributedString *v21;
  const __CFString *v22;
  CFStringRef attrName;
  const __CFString *v24;
  int AppBooleanValue;
  CFRange effectiveRange;
  CGFloat components[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("cds_custom_background_render"), CFSTR("com.apple.coremedia"), 0);
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Length = CFAttributedStringGetLength(a2);
  if (Length >= 1)
  {
    v5 = Length;
    v6 = 0;
    v7 = (const __CFString *)*MEMORY[0x1E0C9DA10];
    v8 = (void *)*MEMORY[0x1E0CA29B8];
    attrName = (CFStringRef)*MEMORY[0x1E0CA8160];
    v24 = (const __CFString *)*MEMORY[0x1E0CA8600];
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      Attributes = CFAttributedStringGetAttributes(a2, v6, &effectiveRange);
      if (Attributes)
        break;
LABEL_24:
      v6 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v5)
        return;
    }
    v11 = Attributes;
    v12 = CGColorSpaceCreateWithName(v7);
    if (CFDictionaryContainsKey(v11, v8))
    {
      CGColorFromCFArray = createCGColorFromCFArray(v11, v8, 0);
      v14 = CGColorFromCFArray;
      if (CGColorFromCFArray)
      {
        if (*(_QWORD *)(a1 + 8))
        {
          v15 = CGColorGetComponents(CGColorFromCFArray);
          *(_OWORD *)components = *(_OWORD *)v15;
          v28 = *((_QWORD *)v15 + 2);
          goto LABEL_11;
        }
        v16 = 0;
LABEL_10:
        v17 = CGColorGetComponents(*(CGColorRef *)(a1 + 144));
        *(_OWORD *)components = *(_OWORD *)v17;
        v28 = *((_QWORD *)v17 + 2);
        v18 = (const CGFloat *)(a1 + 168);
        if ((v16 & 1) != 0)
        {
LABEL_14:
          v29 = *(_QWORD *)v18;
          v19 = CGColorCreate(v12, components);
          CGColorRelease(v14);
          if (v12)
            CFRelease(v12);
          if (!v19)
            goto LABEL_23;
          if (AppBooleanValue)
          {
            if (CGColorGetAlpha(v19) == 0.0)
            {
LABEL_22:
              CFAttributedStringSetAttribute(a2, effectiveRange, v24, v9);
LABEL_23:
              CGColorRelease(v19);
              goto LABEL_24;
            }
            v20 = effectiveRange;
            v21 = a2;
            v22 = CFSTR("kCDSSubtitleRenderer_CharacterBackgroundColor");
          }
          else
          {
            v20 = effectiveRange;
            v21 = a2;
            v22 = attrName;
          }
          CFAttributedStringSetAttribute(v21, v20, v22, v19);
          goto LABEL_22;
        }
LABEL_11:
        if (*(_QWORD *)(a1 + 32))
          v18 = CGColorGetComponents(v14) + 3;
        else
          v18 = (const CGFloat *)(a1 + 168);
        goto LABEL_14;
      }
    }
    else
    {
      v14 = 0;
    }
    v16 = 1;
    goto LABEL_10;
  }
}

__CFString *FigCDSCaption_FigCDSCaptionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSCaption <FigCDSCaptionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetAttributes(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 40);
  *(_QWORD *)(DerivedStorage + 40) = 0;
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *(_QWORD *)(DerivedStorage + 40) = v5;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetAttributes(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetContent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  CFTypeRef v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = 0;
  if (a2)
    v6 = CFRetain(a2);
  else
    v6 = 0;
  *(_QWORD *)(DerivedStorage + 32) = v6;
  if (v5)
    CFRelease(v5);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, uint64_t))(v8 + 216);
      if (v9)
        v9(a1, 1);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, uint64_t))(v11 + 200);
      if (v12)
        v12(a1, 1);
    }
  }
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetContent(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetFormat(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetFormat(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetExtendedLanguageTagString(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 48);
  *(_QWORD *)(DerivedStorage + 48) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetExtendedLanguageTagString(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetSuggestLineHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t RegisterFigCDSCaptionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSCaptionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSCaption]"));
}

uint64_t FigVTTCaptionWriterGetClassID()
{
  MEMORY[0x19402F294](&FigVTTCaptionWriterGetClassID_sRegisterFigVTTCaptionWriterBaseTypeOnce, figVTTCaptionWriter_RegisterFigVTTCaptionWriterBaseType);
  return sFigVTTCaptionWriterClassID;
}

uint64_t figVTTCaptionWriter_RegisterFigVTTCaptionWriterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVTTCaptionWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigVTTCaptionWriterGetClassID_sRegisterFigVTTCaptionWriterBaseTypeOnce, figVTTCaptionWriter_RegisterFigVTTCaptionWriterBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTCaptionWriterAddCaption(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _OWORD *);
  __int128 v7;
  _OWORD v9[3];

  v6 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    return 4294954514;
  v7 = a3[1];
  v9[0] = *a3;
  v9[1] = v7;
  v9[2] = a3[2];
  return v6(a1, a2, v9);
}

uint64_t FigVTTCaptionWriterFinish(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigVTTCaptionWriterInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

CFStringRef figVTTCaptionWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVTTCaptionWriter %p]"), a1);
}

void facPickBestDestinationNumberOfChannels(uint64_t a1, _DWORD *inSpecifier)
{
  unsigned int v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  UInt32 outPropertyDataSize;

  v3 = *(_DWORD *)(a1 + 28);
  outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61766E63u, 0x28u, inSpecifier, &outPropertyDataSize))
  {
    v4 = (char *)malloc_type_malloc(outPropertyDataSize, 0x91944672uLL);
    if (AudioFormatGetProperty(0x61766E63u, 0x28u, inSpecifier, &outPropertyDataSize, v4) || outPropertyDataSize <= 3)
    {
      free(v4);
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_DWORD *)&v4[v5];
        if (v7 == -1 || v7 == v3)
          break;
        v5 += 4;
        if (v7 > v6 && v7 < v3)
          v6 = v7;
        if ((outPropertyDataSize & 0xFFFFFFFC) == v5)
          goto LABEL_19;
      }
      v6 = v3;
LABEL_19:
      free(v4);
      if (v6)
        inSpecifier[7] = v6;
    }
  }
}

uint64_t findCodecs(int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t PropertyInfo;
  UInt32 v6;
  UInt32 v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t Property;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  UInt32 outPropertyDataSize;
  int inSpecifier;

  outPropertyDataSize = 0;
  inSpecifier = a1;
  *a2 = 0;
  *a3 = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize);
  if (!(_DWORD)PropertyInfo)
  {
    v6 = outPropertyDataSize;
    if (outPropertyDataSize)
    {
      v7 = outPropertyDataSize / 0xC;
      v8 = malloc_type_malloc(12 * (outPropertyDataSize / 0xCuLL), 0x10000403E1C8BA9uLL);
      if (!v8)
        return 4294954510;
      v9 = v8;
      Property = AudioFormatGetProperty(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize, v8);
      if ((_DWORD)Property)
      {
        PropertyInfo = Property;
        free(v9);
        return PropertyInfo;
      }
      if (v6 >= 0xC)
      {
        v11 = inSpecifier;
        v12 = v7 + 1;
        v13 = v9 + 2;
        do
        {
          if (*(v13 - 1) == v11)
          {
            if (*v13 == 1634756727)
            {
              if (!*a2)
                *a2 = 1634756727;
            }
            else if (!*a3)
            {
              *a3 = *v13;
            }
          }
          v13 += 3;
          --v12;
        }
        while (v12 > 1);
      }
      free(v9);
    }
    return 0;
  }
  return PropertyInfo;
}

uint64_t facCopyMixMapForInputs(int a1, _DWORD *a2, unsigned int a3, unsigned int a4, void *a5, char **a6, _DWORD *a7)
{
  _DWORD *v7;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  void *v17;
  _DWORD *v18;
  int v19;
  float *v20;
  char *v21;
  int v22;
  _DWORD *v23;
  int v24;
  float *v25;
  int v26;
  float v27;
  uint64_t v28;
  const void *v29;
  AudioFormatPropertyID v30;
  const void *v32;
  AudioFormatPropertyID v33;
  unsigned int v34;
  int v35;
  char *v36;
  _DWORD *v37;
  __int128 v38;
  unsigned int v39;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  UInt32 outPropertyDataSize[2];
  int *inSpecifier;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return FigSignalErrorAt();
  v7 = a7;
  if (!a7)
    return FigSignalErrorAt();
  if (a2)
  {
    v14 = a2;
    goto LABEL_12;
  }
  if ((a1 - 1) > 1)
  {
    v14 = 0;
    goto LABEL_12;
  }
  a3 = 20 * a1 + 12;
  v15 = malloc_type_calloc(1uLL, a3 & 0xFFFFFFFC, 0xD24260A2uLL);
  if (!v15)
    return FigSignalErrorAt();
  v14 = v15;
  if (a1 == 1)
    v16 = 6553601;
  else
    v16 = 6619138;
  *v15 = v16;
LABEL_12:
  v17 = a5;
  if (a5)
    goto LABEL_20;
  if (a4 - 1 > 1)
  {
    v17 = 0;
    goto LABEL_20;
  }
  v18 = malloc_type_calloc(1uLL, 20 * a4 + 12, 0x7154BE33uLL);
  v17 = v18;
  if (v18)
  {
    if (a4 == 1)
      v19 = 6553601;
    else
      v19 = 6619138;
    *v18 = v19;
LABEL_20:
    v41 = a4 * a1;
    v20 = (float *)malloc_type_calloc(a4 * a1, 4uLL, 0x100004052888210uLL);
    v21 = (char *)v20;
    if (!v14 || !v17)
    {
      if (a1)
      {
        v24 = 0;
        v25 = v20;
        do
        {
          if (a4)
          {
            v26 = 0;
            do
            {
              if (v26)
                v27 = 0.0;
              else
                v27 = 1.0;
              *v25++ = v27;
              ++v26;
            }
            while (a4 != v26);
          }
          ++v24;
        }
        while (v24 != a1);
      }
      v23 = 0;
      goto LABEL_36;
    }
    *(_QWORD *)outPropertyDataSize = 0;
    inSpecifier = 0;
    v48 = 0;
    v43 = 0x100000000;
    v44 = 0uLL;
    v45 = 0;
    v42 = 0;
    if (*v14 == 0x10000)
    {
      v29 = v14 + 1;
      v30 = 1668116578;
    }
    else
    {
      if (!*v14)
      {
        v22 = v14[2];
        v23 = v14;
        if ((20 * v22 + 12) > (unint64_t)a3)
        {
          v23 = v14;
          goto LABEL_42;
        }
        goto LABEL_67;
      }
      v30 = 1668116588;
      v29 = v14;
    }
    if (AudioFormatGetPropertyInfo(v30, 4u, v29, &outPropertyDataSize[1]))
      goto LABEL_41;
    if (outPropertyDataSize[1])
    {
      v23 = malloc_type_calloc(1uLL, outPropertyDataSize[1], 0x6F6A9329uLL);
      if (v23)
      {
        if (*v14 == 0x10000)
        {
          v32 = v14 + 1;
          v33 = 1668116578;
        }
        else
        {
          v33 = 1668116588;
          v32 = v14;
        }
        if (!AudioFormatGetProperty(v33, 4u, v32, &outPropertyDataSize[1], v23))
        {
          v22 = v23[2];
LABEL_67:
          v40 = v7;
          v48 = v17;
          if (v22)
          {
            v34 = 0;
            v35 = 1;
            v36 = v21;
            while (1)
            {
              if (v35)
              {
                v37 = &v23[5 * v34];
                v38 = *(_OWORD *)(v37 + 3);
                v45 = v37[7];
                v44 = v38;
              }
              inSpecifier = &v42;
              outPropertyDataSize[0] = 4 * a4;
              if (!AudioFormatGetProperty(0x6D6D6170u, 0x10u, &inSpecifier, outPropertyDataSize, v36) || !(_DWORD)v44)
                goto LABEL_80;
              if ((_DWORD)v44 != -1)
                break;
              v35 = 0;
              LODWORD(v44) = 3;
              --v34;
LABEL_81:
              if (++v34 >= v23[2])
                goto LABEL_82;
            }
            if ((v44 & 0xFFFF0000) == 0x10000)
            {
              v39 = (unsigned __int16)v44;
              if ((unsigned __int16)v44 >= a4)
                goto LABEL_80;
            }
            else
            {
              v39 = v34;
              if (v34 >= a4)
              {
LABEL_80:
                v36 += 4 * a4;
                v35 = 1;
                goto LABEL_81;
              }
            }
            *(_DWORD *)&v36[4 * v39] = 1065353216;
            goto LABEL_80;
          }
LABEL_82:
          v7 = v40;
LABEL_36:
          v28 = 0;
          *a6 = v21;
          *v7 = 4 * v41;
          v21 = 0;
          if (!v23)
            goto LABEL_45;
          goto LABEL_43;
        }
        free(v23);
LABEL_41:
        v23 = 0;
      }
    }
    else
    {
      v23 = 0;
    }
LABEL_42:
    v28 = FigSignalErrorAt();
    if (!v23)
      goto LABEL_45;
LABEL_43:
    if (v23 != v14)
      free(v23);
LABEL_45:
    if (v14)
      goto LABEL_46;
    goto LABEL_48;
  }
  v28 = FigSignalErrorAt();
  v21 = 0;
  if (v14)
  {
LABEL_46:
    if (v14 != a2)
      free(v14);
  }
LABEL_48:
  if (v17 && v17 != a5)
    free(v17);
  if (v21)
    free(v21);
  return v28;
}

uint64_t getGDRCountForFormatID(OpaqueAudioConverter *a1, CMAudioFormatDescriptionRef desc, char *a3)
{
  const AudioFormatListItem *MostCompatibleFormat;
  const AudioFormatListItem *v6;
  UInt32 mFramesPerPacket;
  char v8;
  unsigned int v9;
  AudioFormatID mFormatID;
  UInt32 ioPropertyDataSize;
  UInt32 v15;
  uint64_t v16;
  int inPropertyData;
  int outPropertyData;

  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(desc);
  if (!MostCompatibleFormat)
    goto LABEL_18;
  v6 = MostCompatibleFormat;
  inPropertyData = 2;
  outPropertyData = 0;
  v16 = 0;
  ioPropertyDataSize = 4;
  v15 = 8;
  if (AudioConverterGetProperty(a1, 0x646D6F64u, &ioPropertyDataSize, &outPropertyData)
    || AudioConverterSetProperty(a1, 0x646D6F64u, ioPropertyDataSize, &inPropertyData)
    || AudioConverterGetProperty(a1, 0x7072696Du, &v15, &v16)
    || AudioConverterSetProperty(a1, 0x646D6F64u, ioPropertyDataSize, &outPropertyData)
    || (mFramesPerPacket = v6->mASBD.mFramesPerPacket) == 0)
  {
    mFormatID = v6->mASBD.mFormatID;
    if (mFormatID - 1633772389 <= 0xE && ((1 << (mFormatID - 101)) & 0x4889) != 0 || mFormatID == 1633772320)
    {
      v8 = 0;
      LOWORD(v9) = 1;
      goto LABEL_8;
    }
LABEL_18:
    LOWORD(v9) = 0;
    v8 = 0;
    goto LABEL_8;
  }
  v8 = 1;
  v9 = v16 / mFramesPerPacket;
LABEL_8:
  *a3 = v8;
  return (__int16)v9;
}

uint64_t FigSampleBufferProcessorAcquireHardware()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return acquireHardware(DerivedStorage);
}

uint64_t acquireHardware(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 72) || *(_BYTE *)(a1 + 80))
    return 0;
  if (!AudioConverterAcquireHardwareCodec())
  {
    *(_BYTE *)(a1 + 80) = 1;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigSampleBufferProcessorRelinquishHardware()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 80))
    return 0;
  v1 = DerivedStorage;
  result = AudioConverterReleaseHardwareCodec();
  *(_BYTE *)(v1 + 80) = 0;
  return result;
}

__CFString *facCopyDebugDesc()
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v1;
  __CFString *Mutable;
  CFIndex v3;
  const char *v4;
  CFAllocatorRef v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v1 = CFGetAllocator(DerivedStorage);
  Mutable = CFStringCreateMutable(v1, 0);
  v3 = CFGetRetainCount(DerivedStorage);
  if (DerivedStorage[16])
    v4 = " (invalidated)";
  else
    v4 = "";
  v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_AudioCompression %p> retainCount: %d%s allocator: %p\n"), DerivedStorage, v3, v4, v5);
  return Mutable;
}

uint64_t facCopyProperty(uint64_t a1, const void *a2, uint64_t a3, double **a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  double *RichestDecodableFormat;
  double *v11;
  uint64_t v12;
  const AudioStreamBasicDescription *StreamBasicDescription;
  unsigned int mFramesPerPacket;
  unsigned int mBytesPerPacket;
  OpaqueAudioConverter *v16;
  uint64_t Property;
  uint64_t v18;
  const void *v19;
  void *v20;
  const AudioChannelLayout *ChannelLayout;
  const AudioStreamBasicDescription *v22;
  CFDictionaryRef Extensions;
  const __CFDictionary *v24;
  const __CFAllocator *v25;
  UInt32 ioPropertyDataSize[2];
  UInt32 outSize;
  size_t outPropertyData;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_iTunesGaplessInfo")))
  {
    if (!*(_BYTE *)(v8 + 208))
      goto LABEL_31;
    v9 = *(_QWORD *)(v8 + 200);
    RichestDecodableFormat = (double *)CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(v8 + 32));
    if (!RichestDecodableFormat)
      goto LABEL_32;
    v11 = RichestDecodableFormat;
    RichestDecodableFormat = (double *)CMAudioFormatDescriptionGetMostCompatibleFormat(*(CMAudioFormatDescriptionRef *)(v8 + 32));
    if (!RichestDecodableFormat)
      goto LABEL_32;
    if (*((_DWORD *)v11 + 2) == 1819304813)
      goto LABEL_31;
    outPropertyData = 0;
    if (*v11 == *RichestDecodableFormat)
    {
      v12 = 1;
    }
    else
    {
      v12 = (uint64_t)(*v11 / *RichestDecodableFormat + 0.5);
      if (!v12)
      {
LABEL_31:
        RichestDecodableFormat = 0;
        goto LABEL_32;
      }
    }
    ioPropertyDataSize[0] = 8;
    if (!AudioConverterGetProperty(*(AudioConverterRef *)(v8 + 64), 0x7072696Du, ioPropertyDataSize, &outPropertyData))
    {
      RichestDecodableFormat = (double *)FigGaplessInfoCreateEnhanced_NoCorrection(*(const AudioFormatListItem **)(v8 + 32), outPropertyData, SHIDWORD(outPropertyData), v9 / v12);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_OutputBitRate")))
  {
    LODWORD(outPropertyData) = 0;
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v8 + 32));
    if (StreamBasicDescription
      && StreamBasicDescription->mSampleRate != 0.0
      && (mFramesPerPacket = StreamBasicDescription->mFramesPerPacket) != 0
      && (mBytesPerPacket = StreamBasicDescription->mBytesPerPacket) != 0)
    {
      LODWORD(outPropertyData) = vcvtd_n_u64_f64(StreamBasicDescription->mSampleRate/ (double)mFramesPerPacket* (double)mBytesPerPacket, 3uLL);
    }
    else
    {
      v16 = *(OpaqueAudioConverter **)(v8 + 64);
      if (v16)
      {
        ioPropertyDataSize[0] = 4;
        Property = AudioConverterGetProperty(v16, 0x62726174u, ioPropertyDataSize, &outPropertyData);
      }
      else
      {
        Property = FigSignalErrorAt();
      }
      v18 = Property;
      if ((_DWORD)Property)
        return v18;
    }
    RichestDecodableFormat = (double *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &outPropertyData);
  }
  else
  {
    if (!CFEqual(a2, CFSTR("SampleBufferProcessor_OutputFormatDescription")))
    {
      if (CFEqual(a2, CFSTR("SampleBufferProcessor_HardwareResourceName")))
      {
        *a4 = *(double **)(v8 + 72);
        v19 = *(const void **)(v8 + 72);
        if (v19)
          CFRetain(v19);
        return 0;
      }
      else if (CFEqual(a2, CFSTR("SampleBufferProcessorProperty_ImprovedOutputFormatDescription")))
      {
        outSize = 0;
        if (AudioConverterGetPropertyInfo(*(AudioConverterRef *)(v8 + 64), 0x636D6763u, &outSize, 0) || !outSize)
        {
          return FigSignalErrorAt();
        }
        else
        {
          v20 = malloc_type_malloc(outSize, 0x4D213ECDuLL);
          if (AudioConverterGetProperty(*(AudioConverterRef *)(v8 + 64), 0x636D6763u, &outSize, v20) || !outSize)
          {
            v18 = FigSignalErrorAt();
          }
          else
          {
            outPropertyData = 0;
            ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(*(CMAudioFormatDescriptionRef *)(v8 + 32), &outPropertyData);
            v22 = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v8 + 32));
            Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v8 + 32));
            if (v22)
            {
              v24 = Extensions;
              *(_QWORD *)ioPropertyDataSize = 0;
              v25 = CFGetAllocator(*(CFTypeRef *)(v8 + 32));
              v18 = CMAudioFormatDescriptionCreate(v25, v22, outPropertyData, ChannelLayout, outSize, v20, v24, (CMAudioFormatDescriptionRef *)ioPropertyDataSize);
              if (!(_DWORD)v18)
                *a4 = *(double **)ioPropertyDataSize;
            }
            else
            {
              v18 = 0;
            }
          }
          if (v20)
            free(v20);
        }
      }
      else
      {
        return 4294954512;
      }
      return v18;
    }
    RichestDecodableFormat = *(double **)(v8 + 32);
    if (RichestDecodableFormat)
      RichestDecodableFormat = (double *)CFRetain(RichestDecodableFormat);
  }
LABEL_32:
  v18 = 0;
  *a4 = RichestDecodableFormat;
  return v18;
}

unsigned __int16 *StereoMonoDownMix16SwappedEndian(unsigned __int16 *result, __int16 *a2, int a3)
{
  int v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;

  for (; a3; --a3)
  {
    v3 = ((2896 * ((int)bswap32(result[1]) >> 16)) >> 12) + ((2896 * ((int)bswap32(*result) >> 16)) >> 12);
    if (v3 >= 0x7FFF)
      v4 = 0x7FFF;
    else
      v4 = v3;
    if (v3 <= -32768)
      v5 = 0x8000;
    else
      v5 = v3;
    if (v3 <= 0)
      v6 = v5;
    else
      v6 = v4;
    *a2++ = v6;
    result += 2;
  }
  return result;
}

unsigned int *StereoMonoDownMix32SwappedEndian(unsigned int *result, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  for (; a3; --a3)
  {
    v3 = *result;
    v4 = result[1];
    result += 2;
    v5 = ((11863283 * (int)bswap32(v4)) >> 24) + ((11863283 * (int)bswap32(v3)) >> 24);
    if (v5 >= 0x7FFFFFFF)
      v6 = 0x7FFFFFFF;
    else
      v6 = v5;
    if (v5 <= (uint64_t)0xFFFFFFFF80000000)
      v7 = 0x80000000;
    else
      v7 = v5;
    if (v5 <= 0)
      v8 = v7;
    else
      v8 = v6;
    *a2++ = v8;
  }
  return result;
}

void appendAttributesToDictionary_0(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t FigSampleBufferProcessorCreateWithAudioDecompression(const void *a1, uint64_t a2, size_t a3, const AudioChannelLayout *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v13;
  __int128 v14;

  if (!a6 || !a2 || *(_DWORD *)(a2 + 8) != 1819304813)
    return FigSignalErrorAt();
  FigSampleBufferProcessorGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v13 = *(_QWORD *)(a2 + 32);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 40) = *(_OWORD *)a2;
    *(_OWORD *)(DerivedStorage + 56) = v14;
    *(_QWORD *)(DerivedStorage + 72) = v13;
    if (CMAudioFormatDescriptionCreate((CFAllocatorRef)a1, (const AudioStreamBasicDescription *)a2, a3, a4, 0, 0, 0, (CMAudioFormatDescriptionRef *)(DerivedStorage + 32)))
    {
      CFRelease(0);
      return FigSignalErrorAt();
    }
    else
    {
      if (a1)
      {
        *(_QWORD *)(DerivedStorage + 288) = a1;
        CFRetain(a1);
      }
      result = 0;
      *a6 = 0;
    }
  }
  return result;
}

uint64_t fadInvalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAudioDecompressorInvalidate(DerivedStorage);
  return 0;
}

void fadFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAudioDecompressorInvalidate(DerivedStorage);
}

__CFString *fadCopyDebugDesc()
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v1;
  __CFString *Mutable;
  CFIndex v3;
  const char *v4;
  CFAllocatorRef v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v1 = CFGetAllocator(DerivedStorage);
  Mutable = CFStringCreateMutable(v1, 0);
  v3 = CFGetRetainCount(DerivedStorage);
  if (DerivedStorage[16])
    v4 = " (invalidated)";
  else
    v4 = "";
  v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_AudioDecompression %p> retainCount: %d%s allocator: %p\n"), DerivedStorage, v3, v4, v5);
  return Mutable;
}

void FigAudioDecompressorInvalidate(uint64_t a1)
{
  const void *v2;
  void *v3;
  unsigned int *v4;
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  void *ValueAtIndex;
  const void *v16;
  const void *v17;
  const void *v18;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 136))
    {
      if (*(_BYTE *)(a1 + 152))
      {
        AudioConverterReleaseHardwareCodec();
        *(_BYTE *)(a1 + 152) = 0;
      }
      v2 = *(const void **)(a1 + 144);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(a1 + 144) = 0;
      }
      AudioConverterDispose(*(AudioConverterRef *)(a1 + 136));
      *(_QWORD *)(a1 + 136) = 0;
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
    }
    v4 = *(unsigned int **)(a1 + 80);
    if (v4)
    {
      deallocateAndZeroBufferListDataPointers(v4, *(CFAllocatorRef *)(a1 + 296));
      free(*(void **)(a1 + 80));
      *(_QWORD *)(a1 + 80) = 0;
    }
    v5 = *(void **)(a1 + 232);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(a1 + 232) = 0;
      *(_QWORD *)(a1 + 240) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v8 = *(const void **)(a1 + 304);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 304) = 0;
    }
    v9 = *(const void **)(a1 + 312);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 312) = 0;
    }
    v10 = *(const void **)(a1 + 296);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 296) = 0;
    }
    v11 = *(const __CFArray **)(a1 + 264);
    if (v11)
    {
      Count = CFArrayGetCount(v11);
      if (Count >= 1)
      {
        v13 = Count;
        for (i = 0; i != v13; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), i);
          free(ValueAtIndex);
        }
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 264));
      CFRelease(*(CFTypeRef *)(a1 + 264));
      *(_QWORD *)(a1 + 264) = 0;
    }
    v16 = *(const void **)(a1 + 224);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 224) = 0;
    }
    v17 = *(const void **)(a1 + 160);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 160) = 0;
    }
    v18 = *(const void **)(a1 + 168);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 168) = 0;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
}

void deallocateAndZeroBufferListDataPointers(unsigned int *a1, CFAllocatorRef allocator)
{
  unint64_t v3;
  unint64_t v5;
  void **v6;

  if (a1)
  {
    v3 = *a1;
    if ((_DWORD)v3)
    {
      v5 = 0;
      v6 = (void **)(a1 + 4);
      do
      {
        if (*v6)
        {
          CFAllocatorDeallocate(allocator, *v6);
          *v6 = 0;
          v3 = *a1;
        }
        *((_DWORD *)v6 - 1) = 0;
        ++v5;
        v6 += 2;
      }
      while (v5 < v3);
    }
  }
}

uint64_t sbp_fad_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 120) = a2;
  *(_QWORD *)(DerivedStorage + 128) = a3;
  return 0;
}

CMItemCount sbp_fad_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CMItemCount result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 272) == 2)
  {
    AudioConverterReset(*(AudioConverterRef *)(DerivedStorage + 136));
    result = acquireHardware_0(v4);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(v4 + 272) = 0;
  }
  return RunConverter_0(v4, a2);
}

CMItemCount sbp_fad_finishPendingProcessing()
{
  uint64_t DerivedStorage;
  CMItemCount v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 272) = 1;
  v1 = RunConverter_0(DerivedStorage, 0);
  *(_DWORD *)(DerivedStorage + 272) = 2;
  if (*(_BYTE *)(DerivedStorage + 152))
  {
    AudioConverterReleaseHardwareCodec();
    *(_BYTE *)(DerivedStorage + 152) = 0;
  }
  return v1;
}

uint64_t acquireHardware_0(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 144) || *(_BYTE *)(a1 + 152))
    return 0;
  if (!AudioConverterAcquireHardwareCodec())
  {
    *(_BYTE *)(a1 + 152) = 1;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fadDecoderInputProc(uint64_t a1, _DWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  const AudioFormatListItem *RichestDecodableFormat;
  const void *v10;
  const void *v11;
  const void *v12;
  opaqueCMSampleBuffer *v13;
  uint64_t result;
  opaqueCMSampleBuffer *v15;
  CMItemCount NumSamples;
  CMItemCount v17;
  size_t *v18;
  CMItemCount v19;
  opaqueCMSampleBuffer *v20;
  CMItemCount v21;
  CMItemCount v22;
  opaqueCMSampleBuffer *v23;
  CMItemCount v24;
  size_t v25;
  size_t v26;
  size_t *v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  CMItemCount v31;
  OpaqueCMBlockBuffer *DataBuffer;
  CMItemCount v33;
  CMItemCount v34;
  size_t v35;
  CMItemCount v36;
  CMItemCount v37;
  OpaqueCMBlockBuffer *v38;
  CMItemCount v39;
  const AudioFormatListItem *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  opaqueCMSampleBuffer *v45;
  CMItemCount v46;
  uint64_t v47;
  uint64_t v48;
  CMTimeValue v49;
  CMItemCount v50;
  const void *v51;
  int32_t v52;
  CMTimeValue value;
  int32_t v54;
  CMTimeValue v55;
  double v56;
  float v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  const AudioFormatListItem *v65;
  CMTime v66;
  CMTime v67;
  CMItemCount sizeArrayEntriesNeededOut;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMTime v72;
  CMTime time;
  CMTime v74;
  CMTime packetDescriptionsSizeOut;
  CMTime v76;

  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(a5 + 24));
  totalLengthOut = 0;
  dataPointerOut = 0;
  sizeArrayEntriesNeededOut = 0;
  lengthAtOffsetOut = 0;
  v10 = *(const void **)(a5 + 160);
  if (v10)
  {
    v11 = *(const void **)(a5 + 168);
    *(_QWORD *)(a5 + 168) = v10;
    CFRetain(v10);
    if (v11)
      CFRelease(v11);
    *(_QWORD *)(a5 + 176) = 0;
    *(_QWORD *)(a5 + 184) = 0;
    v12 = *(const void **)(a5 + 160);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a5 + 160) = 0;
    }
  }
  v13 = *(opaqueCMSampleBuffer **)(a5 + 168);
  if (!v13 || CMSampleBufferGetNumSamples(v13) == *(_QWORD *)(a5 + 184))
  {
    *a2 = 0;
    if (*(_DWORD *)(a5 + 272) == 1)
      return 0;
    else
      return 3;
  }
  if (!*(_BYTE *)(a5 + 216))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v76, *(CMSampleBufferRef *)(a5 + 168));
    *(CMTime *)(a5 + 192) = v76;
    *(_BYTE *)(a5 + 216) = 1;
  }
  v15 = *(opaqueCMSampleBuffer **)(a5 + 168);
  NumSamples = CMSampleBufferGetNumSamples(v15);
  CMSampleBufferGetSampleSizeArray(v15, NumSamples, 0, &sizeArrayEntriesNeededOut);
  v17 = sizeArrayEntriesNeededOut;
  v18 = *(size_t **)(a5 + 232);
  if (sizeArrayEntriesNeededOut > *(_QWORD *)(a5 + 240))
  {
    if (v18)
    {
      free(*(void **)(a5 + 232));
      v17 = sizeArrayEntriesNeededOut;
    }
    v18 = (size_t *)malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
    v19 = sizeArrayEntriesNeededOut;
    *(_QWORD *)(a5 + 232) = v18;
    *(_QWORD *)(a5 + 240) = v19;
  }
  v20 = *(opaqueCMSampleBuffer **)(a5 + 168);
  v21 = CMSampleBufferGetNumSamples(v20);
  CMSampleBufferGetSampleSizeArray(v20, v21, v18, &sizeArrayEntriesNeededOut);
  if (!sizeArrayEntriesNeededOut)
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  if (!*(_QWORD *)(a5 + 176))
  {
    if (sizeArrayEntriesNeededOut == 1)
    {
      *(_QWORD *)(a5 + 176) = *v18;
    }
    else if (CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)) >= 1)
    {
      v22 = 0;
      do
      {
        v23 = *(opaqueCMSampleBuffer **)(a5 + 168);
        *(_QWORD *)(a5 + 176) += v18[v22++];
      }
      while (v22 < CMSampleBufferGetNumSamples(v23));
    }
  }
  v24 = *(_QWORD *)(a5 + 184);
  v65 = RichestDecodableFormat;
  if (!v24)
  {
    v25 = 0;
LABEL_38:
    v26 = 0;
    goto LABEL_39;
  }
  if (sizeArrayEntriesNeededOut == 1)
  {
    v25 = *v18 * v24;
    v26 = *v18 * CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)) - v25;
    goto LABEL_39;
  }
  if (v24 < 1)
  {
    v25 = 0;
  }
  else
  {
    v25 = 0;
    v27 = v18;
    v28 = *(_QWORD *)(a5 + 184);
    do
    {
      v29 = *v27++;
      v25 += v29;
      --v28;
    }
    while (v28);
  }
  if (v24 >= CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)))
    goto LABEL_38;
  v26 = 0;
  do
    v26 += v18[v24++];
  while (v24 < CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)));
LABEL_39:
  v30 = *(const void **)(a5 + 224);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a5 + 224) = 0;
  }
  v31 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
  DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a5 + 168));
  CMBlockBufferGetDataPointer(DataBuffer, v25, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  v64 = a4;
  if (lengthAtOffsetOut == v26)
  {
LABEL_55:
    LODWORD(result) = 0;
    goto LABEL_62;
  }
  v33 = sizeArrayEntriesNeededOut;
  v31 = *(_QWORD *)(a5 + 184);
  v34 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
  if (v33 == 1)
  {
    if (v31 >= v34)
      goto LABEL_56;
    v35 = 0;
    while (1)
    {
      v26 = *v18 + v35;
      if (v26 > lengthAtOffsetOut)
        break;
      ++v31;
      v36 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
      v35 = v26;
      if (v31 >= v36)
        goto LABEL_54;
    }
  }
  else
  {
    if (v31 >= v34)
      goto LABEL_56;
    v35 = 0;
    while (1)
    {
      v26 = v18[v31] + v35;
      if (v26 > lengthAtOffsetOut)
        break;
      ++v31;
      v37 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
      v35 = v26;
      if (v31 >= v37)
        goto LABEL_54;
    }
  }
  v26 = v35;
LABEL_54:
  if (v26)
    goto LABEL_55;
LABEL_56:
  v38 = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a5 + 168));
  if (sizeArrayEntriesNeededOut == 1)
    v39 = 0;
  else
    v39 = v31;
  LODWORD(result) = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v38, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v25, v18[v39], 0, (CMBlockBufferRef *)(a5 + 224));
  if ((_DWORD)result)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a5 + 224), 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    LODWORD(result) = 0;
    v31 = *(_QWORD *)(a5 + 184) + 1;
    v26 = v18[v39];
  }
LABEL_62:
  v40 = v65;
  v41 = *(_QWORD *)(a5 + 184);
  v42 = v31 - v41;
  if (!v65->mASBD.mBytesPerPacket || (v43 = *(_QWORD *)(a5 + 184), !v65->mASBD.mFramesPerPacket))
  {
    v76.value = 0;
    packetDescriptionsSizeOut.value = 0;
    if (v42 > *(_QWORD *)(a5 + 112))
    {
      v44 = *(void **)(a5 + 104);
      if (v44)
        free(v44);
      *(_QWORD *)(a5 + 104) = malloc_type_malloc(16 * v42, 0x1000040451B5BE8uLL);
      *(_QWORD *)(a5 + 112) = v42;
    }
    v45 = *(opaqueCMSampleBuffer **)(a5 + 168);
    v46 = CMSampleBufferGetNumSamples(v45);
    CMSampleBufferGetSampleSizeArray(v45, v46, v18, 0);
    LODWORD(result) = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(*(CMSampleBufferRef *)(a5 + 168), (const AudioStreamPacketDescription **)&v76, (size_t *)&packetDescriptionsSizeOut);
    if (v42 >= 1)
    {
      v47 = 0;
      v48 = *(_QWORD *)(a5 + 104);
      v49 = v76.value + 16 * v41;
      v50 = v31 - v41;
      do
      {
        *(_OWORD *)(v48 + v47) = *(_OWORD *)(v49 + v47);
        v48 = *(_QWORD *)(a5 + 104);
        *(_QWORD *)(v48 + v47) -= v25;
        v47 += 16;
        --v50;
      }
      while (v50);
    }
    v43 = *(_QWORD *)(a5 + 184);
    v40 = v65;
  }
  if (!v43)
  {
    v63 = *(_QWORD *)(a5 + 248);
    v51 = *(const void **)(a5 + 168);
    memset(&v76, 0, sizeof(v76));
    if (faq_getFigTimeAttachment(v51, (const __CFString *)*MEMORY[0x1E0CA2728], &v76))
    {
      v52 = (int)*(double *)(a5 + 40);
      time = v76;
      CMTimeConvertScale(&v74, &time, v52, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      value = v74.value;
      if (HIDWORD(v74.value))
        return 4294954516;
    }
    else
    {
      value = 0;
    }
    memset(&packetDescriptionsSizeOut, 0, sizeof(packetDescriptionsSizeOut));
    if (faq_getFigTimeAttachment(v51, (const __CFString *)*MEMORY[0x1E0CA2720], &packetDescriptionsSizeOut))
    {
      v54 = (int)*(double *)(a5 + 40);
      time = packetDescriptionsSizeOut;
      CMTimeConvertScale(&v72, &time, v54, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      v55 = v72.value;
      if (HIDWORD(v72.value))
        return 4294954516;
    }
    else
    {
      v55 = 0;
    }
    if (v55 | value)
    {
      v56 = *(double *)(a5 + 40);
      if (v56 == v65->mASBD.mSampleRate)
      {
        v58 = v63;
      }
      else
      {
        v57 = v56 / v65->mASBD.mSampleRate;
        v58 = (unint64_t)((double)*(unint64_t *)(a5 + 248) * v57 + 0.5);
      }
      if ((_DWORD)value)
      {
        v59 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        *v59 = v58;
        v59[1] = v58 + value;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a5 + 264), v59);
      }
      if ((_DWORD)v55)
      {
        v60 = v58;
        v61 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        CMSampleBufferGetDuration(&v67, *(CMSampleBufferRef *)(a5 + 168));
        CMTimeConvertScale(&v66, &v67, (int)*(double *)(a5 + 40), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v62 = LODWORD(v66.value) + v60;
        *v61 = v62 - v55;
        v61[1] = v62;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a5 + 264), v61);
      }
    }
    LODWORD(result) = 0;
    v40 = v65;
  }
  *(_QWORD *)(a5 + 248) += v42 * v40->mASBD.mFramesPerPacket;
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = v40->mASBD.mChannelsPerFrame;
  *(_DWORD *)(a3 + 12) = v26;
  *(_QWORD *)(a3 + 16) = dataPointerOut;
  *(_QWORD *)(a5 + 184) += v42;
  *a2 = v42;
  if (v64)
    *v64 = *(_QWORD *)(a5 + 104);
  if (v31 == v41)
    return 3;
  else
    return result;
}

uint64_t FigVCLayerDefinitionGetTypeID()
{
  MEMORY[0x19402F294](&FigVCLayerDefinitionGetTypeID_sRegisterFigVCLayerDefinitionOnce, fvc_layerDefinition_Register);
  return sFigVCLayerDefinitionID;
}

uint64_t fvc_layerDefinition_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCLayerDefinitionID = result;
  return result;
}

uint64_t FigVCLayerDefinitionGetOpacity(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(a1 + 44);
  return 0;
}

uint64_t FigVCLayerDefinitionGetSpecifiedCropRect(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  const void *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = (_OWORD *)(a1 + 48);
  if (CGRectIsNull(*(CGRect *)(a1 + 48)))
  {
    v12 = *MEMORY[0x1E0C9D5E0];
    v13 = *(_OWORD *)(MEMORY[0x1E0C9D5E0] + 16);
    FigCFDictionaryGetCGRectIfPresent();
    if (*(_BYTE *)(a1 + 24))
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("TweenedCropRectangle"));
      if (Value)
      {
        FigVideoCompositionInstructionEvaluateTweenedCropRectangle((uint64_t)Value, *(float *)(a1 + 40));
        *(_QWORD *)&v12 = v6;
        *((_QWORD *)&v12 + 1) = v7;
        *(_QWORD *)&v13 = v8;
        *((_QWORD *)&v13 + 1) = v9;
      }
    }
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = v13;
  }
  v10 = v4[1];
  *a2 = *v4;
  a2[1] = v10;
  return 0;
}

uint64_t FigVCLayerDefinitionGetSpecifiedAffineTransform(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];

  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 128))
  {
    v4 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    v15 = *MEMORY[0x1E0C9BAA8];
    v16 = v4;
    v17 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("ConstantAffineMatrix"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFArrayGetTypeID())
        FigGetCGAffineTransformFrom3x2MatrixArray(v6, (double *)&v15);
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v8 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("TweenedAffineMatrix"));
      if (v8)
      {
        v9 = v8;
        v10 = CFGetTypeID(v8);
        if (v10 == CFArrayGetTypeID())
        {
          FigVideoCompositionInstructionEvaluateTweenedAffineMatrix(v9, (uint64_t)v18, *(float *)(a1 + 40));
          v15 = v18[0];
          v16 = v18[1];
          v17 = v18[2];
        }
      }
    }
    v11 = v16;
    *(_OWORD *)(a1 + 80) = v15;
    *(_OWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 112) = v17;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 112);
  a2[1] = *(_OWORD *)(a1 + 96);
  a2[2] = v13;
  *a2 = v12;
  return 0;
}

uint64_t FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(uint64_t a1, CGRect *a2)
{
  __CVBuffer *v3;
  uint64_t SpecifiedCropRect;
  CFTypeRef v5;
  int Width;
  int Height;
  uint64_t v8;
  uint64_t v9;
  CGRect v11;
  __int128 v12;
  CGSize v13;
  CGRect v14;

  v12 = 0u;
  v13 = (CGSize)0;
  memset(&v11, 0, sizeof(v11));
  v3 = *(__CVBuffer **)(a1 + 32);
  SpecifiedCropRect = FigVCLayerDefinitionGetSpecifiedCropRect(a1, &v12);
  if ((_DWORD)SpecifiedCropRect)
    return SpecifiedCropRect;
  v5 = CVBufferCopyAttachment(v3, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  Width = CVPixelBufferGetWidth(v3);
  Height = CVPixelBufferGetHeight(v3);
  fvc_layerDefinition_getCleanAperture(v5, Width, Height, &v11.origin.x);
  v9 = v8;
  if (!(_DWORD)v8)
  {
    v14.origin.x = *(double *)&v12 + v11.origin.x;
    v14.origin.y = *((double *)&v12 + 1) + v11.origin.y;
    v14.size = v13;
    *a2 = CGRectIntersection(v11, v14);
  }
  if (v5)
    CFRelease(v5);
  return v9;
}

uint64_t FigVCLayerDefinitionGetSourcePixelBuffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void fvc_layerDefinition_getCleanAperture(const void *a1, int a2, int a3, double *a4)
{
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    v17 = 0;
    v18 = 0;
    FigVideoCompositorUtilityGetCleanAperture(a1, a2, a3, (float *)&v18 + 1, (float *)&v18, (float *)&v17 + 1, (float *)&v17);
    if (v7)
      return;
    v8 = *((float *)&v18 + 1);
    v9 = (float)a2;
    if (*((float *)&v18 + 1) >= (float)((float)a2 + (float)(*((float *)&v17 + 1) * 2.0)))
      v8 = (float)a2 + (float)(*((float *)&v17 + 1) * 2.0);
    if (v8 >= (float)(v9 + (float)(*((float *)&v17 + 1) * -2.0)))
      v8 = v9 + (float)(*((float *)&v17 + 1) * -2.0);
    v10 = (float)a3;
    v11 = (float)a3 + (float)(*(float *)&v17 * 2.0);
    if (*(float *)&v18 < v11)
      v11 = *(float *)&v18;
    v12 = v10 + (float)(*(float *)&v17 * -2.0);
    if (v11 < v12)
      v12 = v11;
    v13 = (float)(*((float *)&v17 + 1) + (float)((float)(v9 - v8) * 0.5));
    v14 = (float)(*(float *)&v17 + (float)((float)(v10 - v12) * 0.5));
    v15 = v8;
    v16 = v12;
  }
  else
  {
    v15 = (double)a2;
    v16 = (double)a3;
    v14 = 0.0;
    v13 = 0.0;
  }
  *a4 = v13;
  a4[1] = v14;
  a4[2] = v15;
  a4[3] = v16;
}

uint64_t FigVCLayerDefinitionGetAffineTransform(uint64_t a1, _OWORD *a2)
{
  __CVBuffer *v3;
  uint64_t SpecifiedAffineTransform;
  CFTypeRef v5;
  int Width;
  int Height;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  __int128 v11;
  __int128 v12;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform t1;
  CGAffineTransform v17;
  uint64_t v18;
  CGAffineTransform v19;
  _OWORD v20[2];
  CGAffineTransform v21;

  if (a2)
  {
    v3 = *(__CVBuffer **)(a1 + 32);
    memset(&v21, 0, sizeof(v21));
    SpecifiedAffineTransform = FigVCLayerDefinitionGetSpecifiedAffineTransform(a1, &v21);
    if ((_DWORD)SpecifiedAffineTransform)
      return SpecifiedAffineTransform;
    v5 = CVBufferCopyAttachment(v3, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
    memset(v20, 0, sizeof(v20));
    Width = CVPixelBufferGetWidth(v3);
    Height = CVPixelBufferGetHeight(v3);
    fvc_layerDefinition_getCleanAperture(v5, Width, Height, (double *)v20);
    v9 = v8;
    if ((_DWORD)v8)
    {
      v10 = 0;
      if (!v5)
      {
LABEL_6:
        if (v10)
          CFRelease(v10);
        return v9;
      }
    }
    else
    {
      memset(&v19, 0, sizeof(v19));
      CGAffineTransformMakeTranslation(&v19, -*(double *)v20, -*((double *)v20 + 1));
      v10 = CVBufferCopyAttachment(v3, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
      v18 = 0;
      FigVideoCompositorUtilityGetPixelAspectRatio((CFTypeID)v10, (_DWORD *)&v18 + 1, &v18);
      memset(&v17, 0, sizeof(v17));
      CGAffineTransformMakeScale(&v17, (double)SHIDWORD(v18) / (double)(int)v18, 1.0);
      t1 = v19;
      v14 = v17;
      CGAffineTransformConcat(&v15, &t1, &v14);
      v14 = v21;
      CGAffineTransformConcat(&t1, &v15, &v14);
      v12 = *(_OWORD *)&t1.c;
      v11 = *(_OWORD *)&t1.tx;
      v21 = t1;
      *a2 = *(_OWORD *)&t1.a;
      a2[1] = v12;
      a2[2] = v11;
      if (!v5)
        goto LABEL_6;
    }
    CFRelease(v5);
    goto LABEL_6;
  }
  return FigSignalErrorAt();
}

uint64_t FigVCLayerDefinitionCreate(float a1, uint64_t a2, const void *a3, const void *a4, char a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v12;
  CFTypeRef v13;
  __int128 v14;

  if (!a4)
    return FigSignalErrorAt();
  if (!a6)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCLayerDefinitionGetTypeID_sRegisterFigVCLayerDefinitionOnce, fvc_layerDefinition_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v12 = Instance;
  if (a3)
    v13 = CFRetain(a3);
  else
    v13 = 0;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 16) = CFRetain(a4);
  *(float *)(v12 + 40) = a1;
  *(_BYTE *)(v12 + 24) = a5;
  *(_DWORD *)(v12 + 44) = 2143289344;
  v14 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v12 + 48) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v12 + 64) = v14;
  *a6 = v12;
  return 0;
}

uint64_t FigVCLayerDefinitionCreateLayerDefinitionArray(int a1, _DWORD *a2, const void **a3, const __CFDictionary *a4, CGFloat a5, CGFloat a6, uint64_t a7, __CFArray **a8)
{
  uint64_t v14;
  __CFArray *Mutable;
  const __CFArray *Value;
  const __CFArray *v17;
  CFTypeID v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  const void *ValueAtIndex;
  const void *v23;
  const void **v24;
  CFTypeID v25;
  uint64_t v26;
  _DWORD *v27;
  const void **v28;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef cf;
  char v36;

  v36 = 0;
  cf = 0;
  FigCFDictionaryGetBooleanIfPresent();
  v14 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Value = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("LayerStack"));
  if (!Value)
    goto LABEL_17;
  v17 = Value;
  v18 = CFGetTypeID(Value);
  if (v18 == CFArrayGetTypeID())
  {
    Count = CFArrayGetCount(v17);
    if (Count >= 1)
    {
      v20 = Count;
      v21 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v17, v21);
        if (!ValueAtIndex)
          goto LABEL_19;
        v23 = ValueAtIndex;
        v24 = a3;
        v25 = CFGetTypeID(ValueAtIndex);
        if (v25 != CFDictionaryGetTypeID() || !FigCFDictionaryGetInt32IfPresent() || a1 < 1)
          goto LABEL_19;
        v26 = a1;
        v27 = a2;
        a3 = v24;
        v28 = v24;
        while (*v27++)
        {
          ++v28;
          if (!--v26)
            goto LABEL_19;
        }
        v30 = *v28;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v31 = FigVCLayerDefinitionCreate(0.0, v14, v30, v23, v36, (uint64_t *)&cf);
        if ((_DWORD)v31)
          goto LABEL_20;
        CFArrayAppendValue(Mutable, cf);
      }
      while (++v21 != v20);
    }
LABEL_17:
    v32 = FigVCLayerDefinitionOptimizeLayerDefinitionArray(Mutable, a5, a6);
    if (!(_DWORD)v32)
    {
      *a8 = Mutable;
      Mutable = 0;
    }
    goto LABEL_21;
  }
LABEL_19:
  v31 = FigSignalErrorAt();
LABEL_20:
  v32 = v31;
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v32;
}

uint64_t FigVCLayerDefinitionOptimizeLayerDefinitionArray(__CFArray *a1, CGFloat a2, CGFloat a3)
{
  CFIndex v6;
  CFIndex v7;
  const void *v8;
  uint64_t result;
  CFIndex v10;
  const void *v11;
  CFIndex v12;
  __CVBuffer **ValueAtIndex;
  uint64_t v14;
  double c;
  double d;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double *v21;
  __int128 v22;
  __int128 v23;
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];
  float v28;
  CGAffineTransform v29;
  CGRect v30;
  CGAffineTransform v31;
  __int128 v32;
  uint64_t v33;
  float64x2x2_t v34;
  float64x2x2_t v35;
  CGRect v36;
  CGRect v37;

  v33 = *MEMORY[0x1E0C80C00];
  if (CFArrayGetCount(a1) >= 1)
  {
    v6 = 0;
    do
    {
      if (*((_QWORD *)CFArrayGetValueAtIndex(a1, v6) + 4))
        ++v6;
      else
        CFArrayRemoveValueAtIndex(a1, v6);
    }
    while (v6 < CFArrayGetCount(a1));
  }
  if (CFArrayGetCount(a1) < 1)
  {
LABEL_14:
    if (CFArrayGetCount(a1) < 1)
    {
LABEL_22:
      if (CFArrayGetCount(a1) < 1)
      {
        v12 = 0;
LABEL_42:
        while (v12 < CFArrayGetCount(a1))
          CFArrayRemoveValueAtIndex(a1, v12);
        return 0;
      }
      else
      {
        v12 = 0;
        while (1)
        {
          ValueAtIndex = (__CVBuffer **)CFArrayGetValueAtIndex(a1, v12);
          v28 = 0.0;
          result = FigVCLayerDefinitionGetOpacity((uint64_t)ValueAtIndex, &v28);
          if ((_DWORD)result)
            break;
          if (v28 == 1.0 && FigVideoCompositorIsPixelBufferOpaque(ValueAtIndex[4]))
          {
            memset(&v30, 0, sizeof(v30));
            result = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect((uint64_t)ValueAtIndex, &v30);
            if ((_DWORD)result)
              return result;
            memset(&v29, 0, sizeof(v29));
            result = FigVCLayerDefinitionGetAffineTransform((uint64_t)ValueAtIndex, &v29);
            if ((_DWORD)result)
              return result;
            v14 = 0;
            *(CGPoint *)&v31.a = v30.origin;
            v31.c = v30.origin.x + v30.size.width;
            v31.d = v30.origin.y;
            v31.tx = v30.origin.x + v30.size.width;
            v31.ty = v30.origin.y + v30.size.height;
            *(CGFloat *)&v32 = v30.origin.x;
            *((double *)&v32 + 1) = v30.origin.y + v30.size.height;
            c = v29.c;
            d = v29.d;
            v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.a, 0);
            v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.tx, 0);
            v19 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.b, 0);
            v20 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.ty, 0);
            do
            {
              v21 = (double *)((char *)&v31.a + v14);
              v34 = vld2q_f64(v21);
              v35.val[0] = vaddq_f64(v18, vmlaq_f64(vmulq_n_f64(v34.val[1], c), v34.val[0], v17));
              v35.val[1] = vaddq_f64(v20, vmlaq_f64(vmulq_n_f64(v34.val[1], d), v34.val[0], v19));
              vst2q_f64(v21, v35);
              v14 += 32;
            }
            while (v14 != 64);
            if ((v31.a - v31.c) * (v31.ty - v31.d) - (v31.b - v31.d) * (v31.tx - v31.c) > 0.0)
            {
              v22 = *(_OWORD *)&v31.a;
              *(_OWORD *)&v31.a = v32;
              v32 = v22;
              v23 = *(_OWORD *)&v31.c;
              *(_OWORD *)&v31.c = *(_OWORD *)&v31.tx;
              *(_OWORD *)&v31.tx = v23;
            }
            v27[0] = 0.0;
            v27[1] = 0.0;
            v25[1] = a3;
            v26[0] = a2;
            v26[1] = 0.0;
            v24[1] = a3;
            v25[0] = a2;
            v24[0] = 0.0;
            if (fvc_layerDefinition_isPointInTetragon(v27, (uint64_t)&v31)
              && fvc_layerDefinition_isPointInTetragon(v26, (uint64_t)&v31)
              && fvc_layerDefinition_isPointInTetragon(v25, (uint64_t)&v31)
              && fvc_layerDefinition_isPointInTetragon(v24, (uint64_t)&v31))
            {
              ++v12;
              goto LABEL_42;
            }
          }
          if (++v12 >= CFArrayGetCount(a1))
            goto LABEL_42;
        }
      }
    }
    else
    {
      v10 = 0;
      while (1)
      {
        v11 = CFArrayGetValueAtIndex(a1, v10);
        memset(&v30, 0, sizeof(v30));
        result = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect((uint64_t)v11, &v30);
        if ((_DWORD)result)
          break;
        memset(&v31, 0, sizeof(v31));
        result = FigVCLayerDefinitionGetAffineTransform((uint64_t)v11, &v31);
        if ((_DWORD)result)
          break;
        v29 = v31;
        v36 = CGRectApplyAffineTransform(v30, &v29);
        v36.origin.x = round(v36.origin.x);
        v36.origin.y = round(v36.origin.y);
        v36.size.width = round(v36.size.width);
        v36.size.height = round(v36.size.height);
        v37.origin.x = 0.0;
        v37.origin.y = 0.0;
        v37.size.width = a2;
        v37.size.height = a3;
        if (CGRectIntersectsRect(v36, v37))
          ++v10;
        else
          CFArrayRemoveValueAtIndex(a1, v10);
        if (v10 >= CFArrayGetCount(a1))
          goto LABEL_22;
      }
    }
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v8 = CFArrayGetValueAtIndex(a1, v7);
      LODWORD(v31.a) = 0;
      result = FigVCLayerDefinitionGetOpacity((uint64_t)v8, &v31);
      if ((_DWORD)result)
        break;
      if (*(float *)&v31.a < 0.0001)
        CFArrayRemoveValueAtIndex(a1, v7);
      else
        ++v7;
      if (v7 >= CFArrayGetCount(a1))
        goto LABEL_14;
    }
  }
  return result;
}

BOOL fvc_layerDefinition_isPointInTetragon(double *a1, uint64_t a2)
{
  unint64_t v2;
  double *v3;
  unint64_t v4;
  double *v5;
  double v6;

  v2 = 0;
  v3 = (double *)(a2 + 8);
  do
  {
    v4 = v2;
    if (v2 == 4)
      break;
    ++v2;
    v5 = (double *)(a2 + 16 * ((v4 + 1) & 3));
    v6 = round((*(v3 - 1) - *v5) * (a1[1] - v5[1]) - (*v3 - v5[1]) * (*a1 - *v5));
    v3 += 2;
  }
  while (v6 <= 0.0);
  return v4 > 3;
}

uint64_t FigVCLayerDefinitionCopyDestinationPixelBufferWithoutComposingIfPossible(CFArrayRef theArray, int *a2, _OWORD *a3, const void *a4, const void *a5, _QWORD *a6)
{
  const __CFArray *UInt32;
  const void *ValueAtIndex;
  uint64_t Opacity;
  __CVBuffer *v14;
  CFTypeID v15;
  uint64_t AffineTransform;
  CFTypeID v17;
  int Width;
  int Height;
  int v20;
  CFTypeRef v21;
  CGSize v22;
  uint64_t SpecifiedCropRect;
  __int128 v24;
  __int128 v25;
  _BOOL4 IsIdentity;
  CGAffineTransform v28;
  CGAffineTransform t1;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGRect v32;
  float v33[3];

  UInt32 = theArray;
  if (!theArray)
  {
    AffineTransform = 0;
LABEL_26:
    v21 = 0;
    goto LABEL_27;
  }
  if (CFArrayGetCount(theArray) != 1)
    goto LABEL_40;
  ValueAtIndex = CFArrayGetValueAtIndex(UInt32, 0);
  v33[0] = 1.0;
  Opacity = FigVCLayerDefinitionGetOpacity((uint64_t)ValueAtIndex, v33);
  if ((_DWORD)Opacity)
    return Opacity;
  if (v33[0] <= 0.9999)
  {
LABEL_40:
    AffineTransform = 0;
    theArray = 0;
    UInt32 = 0;
    goto LABEL_26;
  }
  v14 = (__CVBuffer *)*((_QWORD *)ValueAtIndex + 4);
  if (a5)
  {
    CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)ValueAtIndex + 4));
    UInt32 = (const __CFArray *)FigCFNumberCreateUInt32();
    v15 = CFGetTypeID(a5);
    if (v15 == CFNumberGetTypeID())
    {
      if (FigCFEqual())
        goto LABEL_30;
    }
    else
    {
      v17 = CFGetTypeID(a5);
      if (v17 != CFArrayGetTypeID())
      {
        AffineTransform = FigSignalErrorAt();
LABEL_25:
        theArray = 0;
        goto LABEL_26;
      }
      if (FigCFArrayContainsValue())
      {
LABEL_30:
        AffineTransform = 0;
        goto LABEL_25;
      }
    }
  }
  else
  {
    UInt32 = 0;
  }
  if (!FigVideoCompositorIsPixelBufferOpaque(v14))
    goto LABEL_30;
  Width = CVPixelBufferGetWidth(v14);
  Height = CVPixelBufferGetHeight(v14);
  if (*a2 != Width)
    goto LABEL_30;
  v20 = Height;
  if (a2[1] != Height)
    goto LABEL_30;
  v21 = CVBufferCopyAttachment(v14, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  if (!FigVideoCompositorUtilityAreCleanAperturesEqual(v21, Width, v20, a4, *a2, a2[1]))
  {
LABEL_31:
    AffineTransform = 0;
    theArray = 0;
    if (a6)
    {
LABEL_28:
      *a6 = theArray;
      if (!UInt32)
        goto LABEL_36;
LABEL_35:
      CFRelease(UInt32);
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  v22 = *(CGSize *)(MEMORY[0x1E0C9D5E0] + 16);
  v32.origin = (CGPoint)*MEMORY[0x1E0C9D5E0];
  v32.size = v22;
  SpecifiedCropRect = FigVCLayerDefinitionGetSpecifiedCropRect((uint64_t)ValueAtIndex, &v32);
  if (!(_DWORD)SpecifiedCropRect)
  {
    if (CGRectIsInfinite(v32))
    {
      v24 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&v31.a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&v31.c = v24;
      *(_OWORD *)&v31.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      AffineTransform = FigVCLayerDefinitionGetAffineTransform((uint64_t)ValueAtIndex, &v31);
      if ((_DWORD)AffineTransform)
        goto LABEL_34;
      memset(&v30, 0, sizeof(v30));
      t1 = v31;
      v25 = a3[1];
      *(_OWORD *)&v28.a = *a3;
      *(_OWORD *)&v28.c = v25;
      *(_OWORD *)&v28.tx = a3[2];
      CGAffineTransformConcat(&v30, &t1, &v28);
      t1 = v30;
      IsIdentity = CGAffineTransformIsIdentity(&t1);
      theArray = 0;
      if (IsIdentity && v14)
      {
        theArray = (CFArrayRef)CFRetain(v14);
        AffineTransform = 0;
        if (a6)
          goto LABEL_28;
LABEL_32:
        if (theArray)
          CFRelease(theArray);
LABEL_34:
        if (!UInt32)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_27:
      if (a6)
        goto LABEL_28;
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  AffineTransform = SpecifiedCropRect;
  if (UInt32)
    goto LABEL_35;
LABEL_36:
  if (v21)
    CFRelease(v21);
  return AffineTransform;
}

double fvc_layerDefinition_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvc_layerDefinition_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
}

__CFString *fvc_layerDefinition_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  CGSize v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CGRect v9;
  float v10;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v10 = NAN;
  v3 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v9.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v9.size = v3;
  v4 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v6 = *MEMORY[0x1E0C9BAA8];
  v7 = v4;
  v8 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  FigVCLayerDefinitionGetOpacity(a1, &v10);
  FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(a1, &v9);
  FigVCLayerDefinitionGetAffineTransform(a1, &v6);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigVCLayerDefinition %p]\n"), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("  relativeTime:  %.2f\n"), *(float *)(a1 + 40));
  CFStringAppendFormat(Mutable, 0, CFSTR("  opacity:       %.2f\n"), v10);
  CFStringAppendFormat(Mutable, 0, CFSTR("  crop and clap: origin={%4d,%4d} size={%4d,%4d}\n"), (int)v9.origin.x, (int)v9.origin.y, (int)v9.size.width, (int)v9.size.height);
  CFStringAppendFormat(Mutable, 0, CFSTR("  transform:     [%.2f %.2f %.2f; %.2f %.2f %.2f; %.2f %.2f %.2f]\n"),
    v6,
    0,
    v7,
    0,
    v8,
    0x3FF0000000000000);
  CFStringAppendFormat(Mutable, 0, CFSTR("  See also:      expr *(OpaqueFigVCLayerDefinition*)%p\n"), a1);
  return Mutable;
}

uint64_t FigPersonaCopyCurrentID(CFStringRef *a1)
{
  uint64_t result;
  CFStringRef v3;
  _OWORD v4[16];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  voucher_get_current_persona();
  result = kpersona_info();
  if (!(_DWORD)result)
  {
    v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v4 + 4, 0x8000100u);
    result = 0;
    *a1 = v3;
  }
  return result;
}

uint64_t sbp_vtcs_handleSessionTerminatedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

__CFString *sbp_vtcs_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_VideoCompression %p>"), a1);
  return Mutable;
}

uint64_t sbp_vtcs_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v8;
  CFTypeRef *v9;
  int v10;
  void *v11;
  void *v12;
  const __CFAllocator *v13;
  CMTimeEpoch v14;
  CMTime v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 39) || !a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_InheritOutputColorSpaceFromInput")))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(v8 + 34);
LABEL_9:
    if (!v10)
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v11 = (void *)CFRetain(*v9);
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_InheritOutputCleanApertureFromInput")))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(v8 + 36);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessorProperty_ForceSyncSampleIntervalForSegmentation")))
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_OWORD *)&v15.value = *(_OWORD *)(v8 + 72);
    v14 = *(_QWORD *)(v8 + 88);
LABEL_17:
    v15.epoch = v14;
    v11 = CMTimeCopyAsDictionary(&v15, v13);
LABEL_12:
    v12 = v11;
    result = 0;
    *a4 = v12;
    return result;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessorProperty_InitialSegmentStartTime")))
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_OWORD *)&v15.value = *(_OWORD *)(v8 + 48);
    v14 = *(_QWORD *)(v8 + 64);
    goto LABEL_17;
  }
  return 4294954512;
}

uint64_t sbp_vtcs_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID TypeID;
  Boolean Value;
  uint64_t result;
  CFTypeID v10;
  Boolean v11;
  CMTime v12;
  CMTime time1;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 39))
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_InheritOutputColorSpaceFromInput")))
  {
    if (a3)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        Value = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(v6 + 34) = Value;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_InheritOutputCleanApertureFromInput")))
  {
    if (a3)
    {
      v10 = CFGetTypeID(a3);
      if (v10 == CFBooleanGetTypeID())
      {
        v11 = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(v6 + 36) = v11;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessorProperty_ForceSyncSampleIntervalForSegmentation")))
  {
    memset(&v14, 0, sizeof(v14));
    CMTimeMakeFromDictionary(&v14, a3);
    if ((v14.flags & 0x1D) == 1)
    {
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v12 = v14;
      if (CMTimeCompare(&time1, &v12) < 0)
      {
        result = 0;
        *(CMTime *)(v6 + 72) = v14;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessorProperty_InitialSegmentStartTime")))
  {
    memset(&v14, 0, sizeof(v14));
    CMTimeMakeFromDictionary(&v14, a3);
    if ((v14.flags & 0x1D) == 1)
    {
      result = 0;
      *(CMTime *)(v6 + 48) = v14;
      return result;
    }
    return FigSignalErrorAt();
  }
  return 4294954512;
}

void sbp_vtcs_releaseCMBlockBuffer(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

BOOL sbp_CVBufferAttachmentEmpty(__CVBuffer *a1, const __CFString *a2)
{
  CFTypeRef v2;
  CFTypeRef v3;

  v2 = CVBufferCopyAttachment(a1, a2, 0);
  v3 = v2;
  if (v2)
    CFRelease(v2);
  return v3 == 0;
}

CMTime *sbp_vtcs_calculateNextCumulatedForceSyncSampleInterval@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  int32_t v5;
  CMTime v7;
  CMTime lhs;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  lhs = *a2;
  v7 = *(CMTime *)(a1 + 48);
  CMTimeSubtract(&v9, &lhs, &v7);
  lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v7 = v9;
  if (CMTimeCompare(&lhs, &v7) < 0)
  {
    lhs = v9;
    v7 = *(CMTime *)(a1 + 72);
    v5 = CMTimeDivide() + 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  lhs = *(CMTime *)(a1 + 72);
  return CMTimeMultiply((CMTime *)a3, &lhs, v5);
}

uint64_t FigRTCReportingCreate(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v24[4];
  unsigned __int8 v25;
  CFTypeRef v26;
  CFTypeRef cf;

  v26 = 0;
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19402F294](&sFigPlayerReportingInitOnce, frr_figRTCReportingInitOnce);
  if (!sRTCreportingFrameworkIsValid)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v16 = 4294955284;
  if (!a4 || !a11)
    goto LABEL_14;
  v17 = frr_createUserInfoDict(a4, a2, a7, a5, a8, a10, &v26);
  if ((_DWORD)v17)
    goto LABEL_20;
  if (!v26)
  {
    v16 = 4294955285;
    goto LABEL_14;
  }
  v17 = frr_createSessionDict(a3, a1, a6, a7, a9, a4, 0, &cf);
  if ((_DWORD)v17)
  {
LABEL_20:
    v16 = v17;
    goto LABEL_14;
  }
  if (!cf)
  {
    v16 = 4294955285;
    goto LABEL_16;
  }
  v18 = sRTCReportingAPI_InitWithSessionInfoDict(cf, v26, gFrameworkList, &__block_literal_global_39);
  sRTCReportingAPI_SetMessageBlock(v18, &__block_literal_global_9_0);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __FigRTCReportingCreate_block_invoke_3;
  v24[3] = &__block_descriptor_33_e20_v16__0____CFArray__8l;
  v25 = a10;
  sRTCReportingAPI_StartConfiguration(v18, v24);
  *a11 = v18;
  frr_logRTCReportingSession((int)CFSTR("Create"), a4, a2, a5, a3, (CFDictionaryRef)v26, a10);
  if (sRTCReportingAPI_RelaxSessionLimit)
  {
    if (FigCFEqual())
      v19 = 7;
    else
      v19 = 5;
    sRTCReportingAPI_RelaxSessionLimit(v19);
  }
  v16 = 0;
LABEL_14:
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (v26)
    CFRelease(v26);
  return v16;
}

_QWORD *frr_figRTCReportingInitOnce()
{
  _QWORD *result;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v51;

  result = dlopen("/System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting", 1);
  if (result)
  {
    v1 = result;
    gFrameworkList = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)frr_figRTCReportingInitOnce_frameworkList, 6, 0);
    sRTCReportingAPI_InitWithSessionInfo = (uint64_t)dlsym(v1, "RTCReportingInitWithSessionInfo");
    sRTCReportingAPI_InitWithSessionInfoDict = dlsym(v1, "RTCReportingInitWithSessionInfoDict");
    sRTCReportingAPI_StartConfiguration = dlsym(v1, "RTCReportingStartConfiguration");
    sRTCReportingAPI_FetchStatesWithUserInfo = dlsym(v1, "RTCReportingFetchStatesWithUserInfo");
    sRTCReportingAPI_SetMessageBlock = dlsym(v1, "RTCReportingSetMessageBlock");
    sRTCReportingAPI_SendMessageWithError = dlsym(v1, "RTCReportingSendMessageWithError");
    sRTCReportingAPI_SendMessageWithDictionary = dlsym(v1, "RTCReportingSendMessageWithDictionary");
    sRTCReportingAPI_UploadLogWithArray = (uint64_t)dlsym(v1, "RTCReportingUploadLogWithArray");
    sRTCReportingAPI_RelaxSessionLimit = dlsym(v1, "RTC_relaxSessions");
    sRTCReportingAPI_SendOneMessageWithDictionary = dlsym(v1, "RTCReportingSendOneMessageWithDictionary");
    v2 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientType");
    if (v2)
      v3 = *v2;
    else
      v3 = 0;
    sRTCReportingConfigParams_0 = v3;
    v4 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientVersion");
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    sRTCReportingConfigParams_1 = v5;
    v6 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoSessionID");
    if (v6)
      v7 = *v6;
    else
      v7 = 0;
    sRTCReportingConfigParams_2 = v7;
    v8 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoBatchEvent");
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    sRTCReportingConfigParams_3 = v9;
    v10 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoContainsRealtimeEvents");
    if (v10)
      v11 = *v10;
    else
      v11 = 0;
    sRTCReportingConfigParams_7 = v11;
    v12 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoRequireUserInfo");
    if (v12)
      v13 = *v12;
    else
      v13 = 0;
    sRTCReportingConfigParams_4 = v13;
    v14 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoHierarchyToken");
    if (v14)
      v15 = *v14;
    else
      v15 = 0;
    sRTCReportingConfigParams_5 = v15;
    v16 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientBundleID");
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    sRTCReportingConfigParams_6 = v17;
    v18 = (uint64_t *)dlsym(v1, "kRTCReportingUserInfoClientName");
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    sRTCReportingConfigParams_8 = v19;
    v20 = (uint64_t *)dlsym(v1, "kRTCReportingUserInfoServiceName");
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    sRTCReportingConfigParams_9 = v21;
    v22 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersCategory");
    if (v22)
      v23 = *v22;
    else
      v23 = 0;
    sRTCReportingConfigParams_10 = v23;
    v24 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersFlag");
    if (v24)
      v25 = *v24;
    else
      v25 = 0;
    sRTCReportingConfigParams_11 = v25;
    v26 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersPayload");
    if (v26)
      v27 = *v26;
    else
      v27 = 0;
    sRTCReportingConfigParams_13 = v27;
    result = dlsym(v1, "kRTCReportingMessageParametersType");
    if (result)
      v28 = *result;
    else
      v28 = 0;
    sRTCReportingConfigParams_12 = v28;
    if (sRTCReportingAPI_InitWithSessionInfo)
      v29 = sRTCReportingAPI_InitWithSessionInfoDict == 0;
    else
      v29 = 1;
    v51 = !v29
       && sRTCReportingAPI_StartConfiguration != 0
       && sRTCReportingAPI_FetchStatesWithUserInfo != 0
       && sRTCReportingAPI_SetMessageBlock != 0
       && sRTCReportingAPI_SendMessageWithError != 0
       && sRTCReportingAPI_SendMessageWithDictionary != 0
       && sRTCReportingAPI_UploadLogWithArray != 0
       && sRTCReportingAPI_SendOneMessageWithDictionary != 0
       && sRTCReportingConfigParams_6 != 0
       && sRTCReportingConfigParams_0 != 0
       && sRTCReportingConfigParams_1 != 0
       && sRTCReportingConfigParams_2 != 0
       && sRTCReportingConfigParams_3 != 0
       && sRTCReportingConfigParams_4 != 0
       && sRTCReportingConfigParams_5 != 0
       && sRTCReportingConfigParams_7 != 0
       && sRTCReportingConfigParams_9 != 0
       && sRTCReportingConfigParams_8 != 0
       && sRTCReportingConfigParams_10 != 0
       && sRTCReportingConfigParams_11 != 0
       && sRTCReportingConfigParams_13 != 0
       && v28 != 0;
    sRTCreportingFrameworkIsValid = v51;
  }
  return result;
}

uint64_t frr_createUserInfoDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, int a6, CFTypeRef *a7)
{
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v11;
  int IsItOKToLogURLs;
  CFPropertyListRef v13;

  if (!a7)
    return 4294955284;
  if (a5 && objc_msgSend(MEMORY[0x1E0CB36D8], "isValidJSONObject:", a5))
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a5);
  else
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = MutableCopy;
  if (!MutableCopy)
    return 4294955285;
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  IsItOKToLogURLs = FigIsItOKToLogURLs();
  if (a6 && IsItOKToLogURLs)
  {
    v13 = CFPreferencesCopyAppValue(CFSTR("SessionTag"), CFSTR("com.apple.coremedia"));
    FigCFDictionarySetValue();
    if (v13)
      CFRelease(v13);
  }
  *a7 = CFRetain(v11);
  CFRelease(v11);
  return 0;
}

uint64_t frr_createSessionDict(int a1, uint64_t a2, const void *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  uint64_t v14;

  if (!sRTCreportingFrameworkIsValid)
    return FigSignalErrorAt();
  if (!a8)
    return 4294955284;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294955285;
  v13 = Mutable;
  v14 = 4294955284;
  switch(a1)
  {
    case 1:
    case 2:
    case 5:
      FigCFDictionarySetInt32();
      goto LABEL_7;
    case 3:
      FigCFDictionarySetInt32();
      FigCFDictionarySetDouble();
LABEL_7:
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (!a5)
        FigCFEqual();
      FigCFDictionarySetInt32();
      FigCFDictionarySetValue();
      if (a3)
        CFDictionarySetValue(v13, (const void *)sRTCReportingConfigParams_5, a3);
      v14 = 0;
      *a8 = CFRetain(v13);
      break;
    default:
      break;
  }
  CFRelease(v13);
  return v14;
}

uint64_t frr_logRTCReportingSession(int a1, int a2, int a3, int a4, int a5, CFDictionaryRef theDict, int a7)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (theDict)
  {
    CFDictionaryGetValue(theDict, CFSTR("PlayerType"));
    CFDictionaryGetValue(theDict, CFSTR("PumpName"));
  }
  result = FigIsItOKToLogURLs();
  if (a7 && (_DWORD)result)
  {
    if (dword_1EE2A3020)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t FigRTCReportingSetUserInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, int a7, int a8)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  if (!sRTCreportingFrameworkIsValid)
    return 4294955286;
  if (!a1)
    return 4294955283;
  v11 = a5;
  v12 = a3;
  v13 = a2;
  v14 = frr_createUserInfoDict(a3, a2, a4, a5, a6, a7, &cf);
  if (!(_DWORD)v14)
  {
    if (!cf)
      return 4294955285;
    sRTCReportingAPI_FetchStatesWithUserInfo(a1, cf, &__block_literal_global_15_1);
    frr_logRTCReportingSession((int)CFSTR("SetUserInfo"), v12, v13, v11, a8, (CFDictionaryRef)cf, a7);
  }
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t FigRTCReportingSendOneMessageWithDictionary(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8, unsigned __int16 a9, __int16 a10, unsigned __int16 a11, __int16 a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  CFTypeRef cf;
  CFTypeRef v26;
  CFTypeRef v27;

  v26 = 0;
  v27 = 0;
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19402F294](&sFigPlayerReportingInitOnce, frr_figRTCReportingInitOnce);
  if (!sRTCreportingFrameworkIsValid)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v19 = frr_createUserInfoDict(a4, a2, a7, a5, a8, a13, &v26);
  if ((_DWORD)v19)
    goto LABEL_17;
  if (!v26)
  {
    v20 = 4294955285;
    goto LABEL_11;
  }
  v19 = frr_createSessionDict(a3, a1, a6, a7, 0, a4, 1, &v27);
  if ((_DWORD)v19)
  {
LABEL_17:
    v20 = v19;
    goto LABEL_11;
  }
  if (!v27)
  {
    v20 = 4294955285;
    goto LABEL_13;
  }
  frr_logRTCReportingSession((int)CFSTR("SendOneMessage"), a4, a2, a5, a3, (CFDictionaryRef)v26, a13);
  if ((sRTCReportingAPI_SendOneMessageWithDictionary(v27, v26, a9, a11, a14, &cf) & 1) != 0)
  {
    v20 = 0;
  }
  else
  {
    if (cf)
      CFRelease(cf);
    v20 = 4294955282;
  }
LABEL_11:
  if (v27)
    CFRelease(v27);
LABEL_13:
  if (v26)
    CFRelease(v26);
  return v20;
}

uint64_t FigRTCReportingSendMsgWithErrors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return 4294955283;
  if (!sRTCreportingFrameworkIsValid)
    return 4294955286;
  if (!a4)
    return 4294955296;
  if ((sRTCReportingAPI_SendMessageWithError() & 1) != 0)
    return 0;
  return 4294955282;
}

uint64_t FigRTCReportingSendMsgRealTime(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294955283;
  if (!sRTCreportingFrameworkIsValid)
    return 4294955286;
  if (!a4)
    return 4294955296;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294955295;
  v7 = Mutable;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CFDictionarySetValue(v7, (const void *)sRTCReportingConfigParams_13, a4);
  if ((sRTCReportingAPI_SendMessageWithDictionary(a1, v7, &cf) & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    if (cf)
      CFRelease(cf);
    v8 = 4294955282;
  }
  CFRelease(v7);
  return v8;
}

uint64_t FigImageQueueDisplayCountHistory_GetTypeID()
{
  if (sRegisterFigImageQueueDisplayCountHistoryTypeOnce != -1)
    dispatch_once_f(&sRegisterFigImageQueueDisplayCountHistoryTypeOnce, 0, (dispatch_function_t)FigImageQueueDisplayCountHistory_RegisterClassOnce);
  return sFigImageQueueDisplayCountHistoryID;
}

uint64_t FigImageQueueDisplayCountHistory_RegisterClassOnce()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigImageQueueDisplayCountHistoryID = result;
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_Create(uint64_t *a1)
{
  uint64_t Instance;

  if (sRegisterFigImageQueueDisplayCountHistoryTypeOnce != -1)
    dispatch_once_f(&sRegisterFigImageQueueDisplayCountHistoryTypeOnce, 0, (dispatch_function_t)FigImageQueueDisplayCountHistory_RegisterClassOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a1 = Instance;
  return 0;
}

uint64_t FigImageQueueDisplayCountHistory_StartTracingDisplayCount(uint64_t a1, unsigned int a2, const char *a3)
{
  const __CFString *v6;
  const __CFAllocator **v7;
  const __CFString *v8;
  CFTypeID v9;
  char *v10;
  const void *v11;
  char **v12;
  const char *v13;
  char v14;
  const __CFAllocator *v15;
  const char *v16;
  size_t v17;
  CFURLRef v18;
  int DoesFileExist;
  char *v20;
  unsigned int AppIntegerValue;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v23;
  unsigned int v24;
  int *v25;
  FILE *v26;
  unsigned int v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  int v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  unsigned int v39;
  unsigned int v40;
  CFTypeRef cf;
  Boolean keyExistsAndHasValidFormat[7];
  os_log_type_t type;
  CFStringRef string;
  tm v45;
  time_t v46;
  int v47;
  const char *v48;
  __int16 v49;
  char *v50;
  __int16 v51;
  unsigned int v52;
  int v53;
  const char *v54;
  __int16 v55;
  unsigned int v56;
  char buffer[1024];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v46 = 0;
  memset(&v45, 0, sizeof(v45));
  string = 0;
  time(&v46);
  localtime_r(&v46, &v45);
  if (!a2)
  {
    keyExistsAndHasValidFormat[0] = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("iq_trace_cadence"), CFSTR("com.apple.coremedia"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
    {
      a2 = AppIntegerValue;
      if (AppIntegerValue - 1 < 0xA)
        goto LABEL_2;
      v47 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v23 = v47;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if (v24)
      {
        v53 = 136315394;
        v54 = "FigImageQueueDisplayCountHistory_StartTracingDisplayCount";
        v55 = 1024;
        v56 = a2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v11 = 0;
    goto LABEL_54;
  }
LABEL_2:
  v6 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("iq_trace_cadence_dir"), CFSTR("com.apple.coremedia"));
  v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v6)
  {
    v8 = v6;
    v9 = CFGetTypeID(v6);
    if (v9 == CFStringGetTypeID())
    {
      CFStringGetCString(v8, buffer, 1024, 0);
      CFRelease(v8);
LABEL_7:
      v11 = 0;
      goto LABEL_8;
    }
  }
  v10 = getenv("CFFIXED_USER_HOME");
  if (v10)
  {
    snprintf(buffer, 0x400uLL, "%s/Library/Logs", v10);
    goto LABEL_7;
  }
  v11 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
  if (!v11 || FigCFURLCopyCanonicalPath() || !CFStringGetFileSystemRepresentation(string, buffer, 1024))
  {
LABEL_54:
    v37 = 0;
    goto LABEL_55;
  }
LABEL_8:
  v40 = a2;
  cf = v11;
  if (sFigCadencePathMutexOnce != -1)
    dispatch_once_f(&sFigCadencePathMutexOnce, 0, (dispatch_function_t)FigImageQueueDisplayCountHistory_initCadencePathMutexOnce);
  *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x19402EEEC](sFigCadencePathMutex);
  strcpy((char *)&v53, "-A");
  v12 = (char **)(a1 + 16);
  v39 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 8)
    v13 = "csv";
  else
    v13 = "txt";
  v14 = 65;
  BYTE1(v53) = 65;
  v15 = *v7;
  while (1)
  {
    if (v14 <= 65)
      v16 = "";
    else
      v16 = (const char *)&v53;
    asprintf(v12, "%s/coremedia-%s-cadence-%04d-%02d-%02d-%02d-%02d-%02d%s.%s", buffer, a3, v45.tm_year + 1900, v45.tm_mon + 1, v45.tm_mday, v45.tm_hour, v45.tm_min, v45.tm_sec, v16, v13);
    v17 = strlen(*v12);
    v18 = CFURLCreateFromFileSystemRepresentation(v15, (const UInt8 *)*v12, v17, 0);
    DoesFileExist = FigFileDoesFileExist();
    if (v18)
      CFRelease(v18);
    v20 = *v12;
    if (!DoesFileExist)
      break;
    free(v20);
    *v12 = 0;
    v14 = ++BYTE1(v53);
    if (SBYTE1(v53) >= 91)
      goto LABEL_30;
  }
  *(_QWORD *)(a1 + 24) = fopen(v20, "w");
LABEL_30:
  MEMORY[0x19402EF04](sFigCadencePathMutex);
  v25 = __error();
  v26 = *(FILE **)(a1 + 24);
  if (v26)
  {
    v27 = v40;
    if ((v40 & 2) != 0)
    {
      setvbuf(v26, 0, 1, 0);
      v27 = v39;
    }
    if (v27 == 8)
      fwrite("imageTime, localTime, renderCount, displayCount", 0x2FuLL, 1uLL, *(FILE **)(a1 + 24));
    *(_DWORD *)(a1 + 32) = v27;
    bzero((void *)(a1 + 40), 0x780uLL);
    *(_DWORD *)(a1 + 36) = 1;
    *(_OWORD *)(a1 + 1960) = 0u;
    *(_DWORD *)keyExistsAndHasValidFormat = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v29 = *(_DWORD *)keyExistsAndHasValidFormat;
    if (os_log_type_enabled(v28, type))
      v30 = v29;
    else
      v30 = v29 & 0xFFFFFFFE;
    if (v30)
    {
      v31 = *v12;
      v47 = 136315650;
      v48 = "FigImageQueueDisplayCountHistory_StartTracingDisplayCount";
      v49 = 2080;
      v50 = v31;
      v51 = 1024;
      v52 = v27;
      _os_log_send_and_compose_impl();
    }
    v37 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_QWORD *)(a1 + 2232) = 0;
    *(_DWORD *)(a1 + 2240) = 0;
  }
  else
  {
    v32 = *v25;
    *(_DWORD *)keyExistsAndHasValidFormat = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v34 = *(_DWORD *)keyExistsAndHasValidFormat;
    if (os_log_type_enabled(v33, type))
      v35 = v34;
    else
      v35 = v34 & 0xFFFFFFFE;
    if (v35)
    {
      v36 = *v12;
      v47 = 136315650;
      v48 = "FigImageQueueDisplayCountHistory_StartTracingDisplayCount";
      v49 = 2080;
      v50 = v36;
      v51 = 1024;
      v52 = v32;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    free(*v12);
    v37 = 0;
    *v12 = 0;
  }
  v11 = cf;
LABEL_55:
  if (string)
    CFRelease(string);
  if (v11)
    CFRelease(v11);
  return v37;
}

uint64_t FigImageQueueDisplayCountHistory_initCadencePathMutexOnce()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  sFigCadencePathMutex = result;
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_TraceFlush(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    ++*(_DWORD *)(result + 36);
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_TraceDisplayCountUsingHostTime(uint64_t result, CMTime *a2, int a3, int a4, uint64_t a5, double a6, double a7)
{
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  CMTimeEpoch epoch;
  int v20;
  CMTimeEpoch v21;
  CMTime v22;
  CMTime time1;

  if (*(_QWORD *)(result + 24))
  {
    v13 = result;
    for (i = 0; i != 1920; i += 64)
    {
      v15 = v13 + i;
      time1 = *(CMTime *)(v13 + i + 40);
      v22 = *a2;
      result = CMTimeCompare(&time1, &v22);
      if (!(_DWORD)result)
      {
        v18 = *(_DWORD *)(v13 + 36);
        epoch = a2->epoch;
        *(_OWORD *)(v15 + 40) = *(_OWORD *)&a2->value;
        *(_QWORD *)(v15 + 56) = epoch;
        *(double *)(v15 + 64) = a7;
        *(_QWORD *)(v15 + 72) = a5;
        *(double *)(v15 + 80) = a6;
        *(_DWORD *)(v15 + 92) = v18;
        *(_DWORD *)(v15 + 96) = a4;
        *(_DWORD *)(v15 + 88) = a3;
        return result;
      }
    }
    if (*(_DWORD *)(v13 + 1960) == 30)
      result = FigImageQueueDisplayCountHistory_WriteAndRemoveOldestDisplayCountTraceEntry(v13);
    v16 = 0;
    while (1)
    {
      v17 = v13 + v16;
      if ((*(_BYTE *)(v13 + v16 + 52) & 1) == 0)
        break;
      v16 += 64;
      if (v16 == 1920)
        return result;
    }
    v20 = *(_DWORD *)(v13 + 36);
    v21 = a2->epoch;
    *(_OWORD *)(v17 + 40) = *(_OWORD *)&a2->value;
    *(_QWORD *)(v17 + 56) = v21;
    *(double *)(v17 + 64) = a7;
    *(_QWORD *)(v17 + 72) = a5;
    *(double *)(v17 + 80) = a6;
    *(_DWORD *)(v17 + 92) = v20;
    *(_DWORD *)(v17 + 96) = a4;
    *(_DWORD *)(v17 + 88) = a3;
    ++*(_DWORD *)(v13 + 1960);
  }
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_WriteAndRemoveOldestDisplayCountTraceEntry(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  CMTimeValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  float v15;
  int v16;
  double v17;
  int v18;
  int v19;
  CMTimeValue v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  FILE *v39;
  uint64_t v40;
  CMTime v41;
  CMTime time;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v1 = result;
  v2 = 0;
  v45 = *MEMORY[0x1E0C80C00];
  v3 = -1;
  v4 = 52;
  v5 = -1;
  do
  {
    if ((*(_BYTE *)(v1 + v4) & 1) == 0)
      goto LABEL_8;
    if (v3 == -1)
    {
      v5 = -1;
      goto LABEL_7;
    }
    result = FigImageQueueDisplayCountHistory_EntryIsOlderThanEntry(v1, v2, v3);
    if ((_DWORD)result)
    {
      v5 = v3;
LABEL_7:
      v3 = v2;
      goto LABEL_8;
    }
    if (v5 == -1 || (result = FigImageQueueDisplayCountHistory_EntryIsOlderThanEntry(v1, v2, v5), (_DWORD)result))
      v5 = v2;
LABEL_8:
    ++v2;
    v4 += 64;
  }
  while (v2 != 30);
  if ((v3 & 0x80000000) != 0)
  {
    *(_DWORD *)(v1 + 1960) = 0;
  }
  else
  {
    v6 = v3;
    v7 = v1 + ((unint64_t)v3 << 6);
    v8 = (CMTimeValue *)(v7 + 40);
    if ((v5 & 0x80000000) == 0)
    {
      v9 = v5;
      v10 = v1 + 40 + (v6 << 6);
      v11 = v1 + 40 + (v9 << 6);
      if (*(_DWORD *)(v10 + 52) == *(_DWORD *)(v11 + 52))
      {
        v13 = *(double *)(v10 + 40);
        v12 = (double *)(v10 + 40);
        v14 = *(double *)(v11 + 40);
        if (v13 == v14 && v14 != 0.0)
        {
          v15 = (double)FigHostTimeToNanoseconds() * 0.000000001 / *v12;
          v16 = (int)(v15 + 0.5);
          v17 = (float)((float)v16 - v15);
          if (v17 <= 0.1 && v17 >= -0.1)
            *(_DWORD *)(v1 + (v6 << 6) + 88) = v16;
        }
      }
    }
    v18 = *(_DWORD *)(v7 + 92);
    v19 = *(_DWORD *)(v7 + 88);
    v20 = *v8;
    v21 = *(int *)(v7 + 48);
    v43 = *(_QWORD *)(v7 + 52);
    v44 = *(_DWORD *)(v7 + 60);
    v22 = v1 + 1976;
    if (*(_DWORD *)(v1 + 1964) != v18 && *(_DWORD *)(v1 + 32) != 8)
      fwrite("\n[FLUSHED]", 0xAuLL, 1uLL, *(FILE **)(v1 + 24));
    v23 = *(_DWORD *)(v1 + 2232);
    v24 = *(_DWORD *)(v1 + 2236);
    if (v24 + v23 <= 0)
      v25 = --(char)(v24 + v23);
    else
      v25 = (v24 + v23);
    *(_BYTE *)(v22 + v25) = v19;
    v26 = v24 + 1;
    *(_DWORD *)(v1 + 2236) = v24 + 1;
    if (v24 >= 256)
    {
      v26 = 256;
      *(_DWORD *)(v1 + 2236) = 256;
      if (v23 == 255)
        v23 = 0;
      else
        ++v23;
      *(_DWORD *)(v1 + 2232) = v23;
    }
    v27 = *(_DWORD *)(v1 + 2240);
    if (v27 < v26)
      v28 = v27 + 1;
    else
      v28 = v26;
    *(_DWORD *)(v1 + 2240) = v28;
    v29 = *(_DWORD *)(v1 + 32);
    if (v29 == 8)
    {
      time.value = v20;
      time.timescale = v21;
      *(_QWORD *)&time.flags = v43;
      HIDWORD(time.epoch) = v44;
      CMTimeGetSeconds(&time);
      fprintf(*(FILE **)(v1 + 24), "\n%13.6f, %13.6f, %d,");
    }
    else if (v29 == 5)
    {
      time.value = v20;
      time.timescale = v21;
      *(_QWORD *)&time.flags = v43;
      HIDWORD(time.epoch) = v44;
      CMTimeGetSeconds(&time);
      fprintf(*(FILE **)(v1 + 24), "\n%13.6f, %13.6f, %+9.6f,");
    }
    else
    {
      v30 = v20 / v21;
      if (v29 == 1)
      {
        v31 = *(_DWORD *)(v1 + 1968);
        if (v31 != (_DWORD)v30)
        {
          if (v24 >= 255)
            v24 = 255;
          v32 = v23 + v24 - v28;
          v33 = v32 + 1;
          v34 = 1;
          while (1)
          {
            if (v28 >= 2 * v34 && v34 + v28 <= v26)
            {
              if (v28 < 1)
              {
                v35 = 0;
              }
              else
              {
                v35 = 0;
                while (1)
                {
                  v36 = v32 + v35 <= 0 ? --(char)(v32 + v35) : (v32 + v35);
                  v37 = *(unsigned __int8 *)(v22 + v36);
                  v38 = v33 + v35 <= 0 ? --(char)(v33 + v35) : (v33 + v35);
                  if (v37 != *(unsigned __int8 *)(v22 + v38))
                    break;
                  if (v28 == ++v35)
                    goto LABEL_63;
                }
              }
              if (v35 == v28)
                break;
            }
            ++v34;
            --v32;
            if (v34 == 6)
              goto LABEL_64;
          }
LABEL_63:
          fprintf(*(FILE **)(v1 + 24), " (repeating, period %d)", v34);
          v31 = *(_DWORD *)(v1 + 1968);
LABEL_64:
          *(_DWORD *)(v1 + 2240) = 0;
          if (v31 != (_DWORD)v30)
            goto LABEL_66;
        }
        if (*(_DWORD *)(v1 + 1964) != v18)
        {
LABEL_66:
          if (*(int *)(v1 + 1972) >= 1)
            fprintf(*(FILE **)(v1 + 24), " [total %d]", *(_DWORD *)(v1 + 1972));
          *(_DWORD *)(v1 + 1972) = 0;
          fprintf(*(FILE **)(v1 + 24), "\n[%02d:%02d:%02d]", (int)v30 / 3600, (int)v30 / 60 % 60, (int)v30 % 60);
        }
        *(_DWORD *)(v1 + 1968) = v30;
        *(_DWORD *)(v1 + 1972) += v19;
      }
      else
      {
        v39 = *(FILE **)(v1 + 24);
        v41.value = v20;
        v41.timescale = v21;
        *(_QWORD *)&v41.flags = v43;
        HIDWORD(v41.epoch) = v44;
        CMTimeConvertScale(&time, &v41, 1000, kCMTimeRoundingMethod_RoundTowardZero);
        fprintf(v39, "\n[%02d:%02d:%02d.%03d]");
      }
    }
    *(_DWORD *)(v1 + 1964) = v18;
    result = fprintf(*(FILE **)(v1 + 24), " %d", v19);
    v40 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)v8 = *MEMORY[0x1E0CA2E18];
    v8[2] = *(_QWORD *)(v40 + 16);
    --*(_DWORD *)(v1 + 1960);
  }
  return result;
}

void FigImageQueueDisplayCountHistory_CancelTracingDisplayCount(uint64_t a1)
{
  FILE *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = *(FILE **)(a1 + 24);
  if (v1)
  {
    fwrite("\n\n# ABANDONING -- this image queue is for scrubbing only.\n", 0x3AuLL, 1uLL, v1);
    fclose(*(FILE **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    unlink(*(const char **)(a1 + 16));
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(uint64_t a1)
{
  FILE *v1;

  v1 = *(FILE **)(a1 + 24);
  if (v1)
  {
    if (*(_DWORD *)(a1 + 1960))
    {
      do
        FigImageQueueDisplayCountHistory_WriteAndRemoveOldestDisplayCountTraceEntry(a1);
      while (*(_DWORD *)(a1 + 1960));
      v1 = *(FILE **)(a1 + 24);
    }
    fputc(10, v1);
    if (*(_DWORD *)(a1 + 32) != 8)
      fwrite("\n# END\n", 7uLL, 1uLL, *(FILE **)(a1 + 24));
    fclose(*(FILE **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void FigImageQueueDisplayCountHistory_Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x8B8uLL);
}

void FigImageQueueDisplayCountHistory_Finalize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(a1);
}

__CFString *FigImageQueueDisplayCountHistory_CopyDebugDesc(_QWORD *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  CFIndex v4;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = a1[2];
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigImageQueueDisplayCountHistory %p %s> RC %d"), a1, v3, v4);
  return Mutable;
}

BOOL FigImageQueueDisplayCountHistory_EntryIsOlderThanEntry(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  CMTime v8;
  CMTime time1;

  v3 = a1 + 40 + ((uint64_t)a3 << 6);
  v4 = *(_DWORD *)(v3 + 52);
  v5 = a1 + 40 + ((uint64_t)a2 << 6);
  v6 = *(_DWORD *)(v5 + 52);
  if (v4 > v6)
    return 1;
  if (v4 != v6)
    return 0;
  time1 = *(CMTime *)v3;
  v8 = *(CMTime *)v5;
  return CMTimeCompare(&time1, &v8) > 0;
}

const __CFString *FigCSSTokenMapTokenTypeToName(int a1)
{
  uint64_t v2;
  const __CFString *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFTypeID TypeID;
  CFTypeRef cf;
  uint64_t valuePtr;

  cf = 0;
  MEMORY[0x19402F294](&figcss_GetCSSTokenInfo_sBuildCSSTokenInfoOnce, figcss_BuildCSSTokenInfo);
  if (sCSSTokenInfoCount != 1)
    return CFSTR("<invalid-token>");
  v2 = 0;
  v3 = CFSTR("<invalid-token>");
  while (*(_DWORD *)(sCSSTokenInfo + v2 + 8) != a1)
  {
    v2 += 24;
    if (v2 == 792)
      return v3;
  }
  valuePtr = *(_QWORD *)(sCSSTokenInfo + v2);
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
  if (!v4)
    return CFSTR("<invalid-token>");
  v5 = v4;
  MEMORY[0x19402F294](&figcss_GetCSSTokenMappingsDictionaries_sBuildCSSTokenNameMappingsOnce, figcss_BuildCSSTokenNameMappingDictionaries);
  if (sCSSTypeToNameMappingDictionary)
  {
    v3 = CFSTR("<invalid-token>");
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)sCSSTypeToNameMappingDictionary, v5, &cf))
    {
      TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(cf))
        v3 = (const __CFString *)cf;
    }
  }
  else
  {
    v3 = CFSTR("<invalid-token>");
  }
  CFRelease(v5);
  return v3;
}

char *figcss_BuildCSSTokenInfo()
{
  char *result;
  uint64_t v1;
  _QWORD *v2;

  result = (char *)malloc_type_calloc(0x21uLL, 0x18uLL, 0x106004067290D6BuLL);
  v1 = 0;
  v2 = result + 16;
  do
  {
    *(v2 - 2) = v1;
    *((_DWORD *)v2 - 2) = dword_1932FC388[v1];
    *v2 = off_1E2F9C258[v1];
    v2 += 3;
    ++v1;
  }
  while (v1 != 33);
  sCSSTokenInfo = (uint64_t)result;
  sCSSTokenInfoCount = 1;
  return result;
}

void figcss_BuildCSSTokenNameMappingDictionaries()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  const __CFAllocator *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  CFNumberRef v6;
  uint64_t valuePtr;

  MEMORY[0x19402F294](&figcss_GetCSSTokenInfo_sBuildCSSTokenInfoOnce, figcss_BuildCSSTokenInfo);
  v0 = sCSSTokenInfoCount;
  if (sCSSTokenInfoCount)
    v1 = 33;
  else
    v1 = 0;
  v2 = sCSSTokenInfo;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  sCSSTypeToNameMappingDictionary = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sCSSNameToTypeMappingDictionary = (uint64_t)CFDictionaryCreateMutable(v3, 0, v4, v5);
  valuePtr = 0;
  if (v0 == 1)
  {
    do
    {
      v6 = CFNumberCreate(v3, kCFNumberCFIndexType, &valuePtr);
      CFDictionarySetValue((CFMutableDictionaryRef)sCSSTypeToNameMappingDictionary, v6, *(const void **)(v2 + 24 * valuePtr + 16));
      CFDictionarySetValue((CFMutableDictionaryRef)sCSSNameToTypeMappingDictionary, *(const void **)(v2 + 24 * valuePtr + 16), v6);
      if (v6)
        CFRelease(v6);
      ++valuePtr;
    }
    while (valuePtr < v1);
  }
}

uint64_t FigRenderPipelineCreateForWritingTrack(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  CFTypeRef cf;

  cf = 0;
  if (!a6 || !a2)
    return FigSignalErrorAt();
  FigRenderPipelineGetClassID();
  v11 = CMDerivedObjectCreate();
  if ((_DWORD)v11)
  {
    v13 = v11;
LABEL_5:
    if (cf)
      CFRelease(cf);
    return v13;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 16) = a3;
  v17 = *a4;
  v18 = *((_QWORD *)a4 + 2);
  v15 = *(_OWORD *)a5;
  v16 = *(_QWORD *)(a5 + 16);
  v13 = FigSampleBufferConsumerCreateForFormatWriter(a2, a3, (uint64_t)&v17, &v15, (_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)v13)
    goto LABEL_5;
  *a6 = cf;
  return v13;
}

uint64_t figRenderPipelineForFormatWriterInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      v2 = *(const void **)(DerivedStorage + 24);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(v1 + 24) = 0;
      }
      v3 = *(const void **)(v1 + 8);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(v1 + 8) = 0;
      }
    }
  }
  return 0;
}

__CFString *figRenderPipelineForFormatWriterCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRenderPipelineForFormatWriter %p: "), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("formatWriter %@, trackID %d, sampleBufferConsumer %@"), *(_QWORD *)(DerivedStorage + 8), *(unsigned int *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 24));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t figRenderPipelineForFormatWriterCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, const __CFString *, _QWORD, _QWORD *);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    v9 = *((_QWORD *)v7 + 1);
    v10 = *((unsigned int *)v7 + 4);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
    if (v11)
      return v11(v9, v10, CFSTR("SourceSampleBufferQueue"), *MEMORY[0x1E0C9AE00], a4);
    else
      return 4294954514;
  }
  else if (CFEqual(CFSTR("SourceSampleBufferConsumer"), a2))
  {
    *a4 = *((_QWORD *)v7 + 3);
    result = *((_QWORD *)v7 + 3);
    if (result)
    {
      CFRetain((CFTypeRef)result);
      return 0;
    }
  }
  else
  {
    return 4294954446;
  }
  return result;
}

uint64_t figRenderPipelineForFormatWriterSetProperty()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*DerivedStorage)
    return 4294954446;
  else
    return FigSignalErrorAt();
}

uint64_t FigCaptionRendererIntervalCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;

  *a1 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererIntervalGetClassID_sRegisterFigCaptionRendererIntervalBaseTypeOnce, RegisterFigCaptionRendererIntervalBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(double *)DerivedStorage = FigBytePumpGetFigBaseObject(DerivedStorage);
    *(_QWORD *)(DerivedStorage + 8) = v4;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCaptionRendererIntervalSetValue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererIntervalGetValue()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t FigCaptionRendererParentIntervalCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;

  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionRendererParentIntervalGetClassID_sRegisterFigCaptionRendererParentIntervalBaseTypeOnce, RegisterFigCaptionRendererParentIntervalBaseType);
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
    return v3;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  DerivedStorage[2] = 0;
  DerivedStorage[3] = 0x4018000000000000;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage[2] = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  FigCaptionRendererIntervalCreate(DerivedStorage);
  v6 = 0;
  *a1 = 0;
  return v6;
}

__CFString *FigCaptionRendererIntervalCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererInterval: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererInterval_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererInterval <FigCaptionRendererIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererInterval_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCaptionRendererInterval_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  double *DerivedStorage;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = a1;
  DerivedStorage[1] = a2;
  return 0;
}

uint64_t RegisterFigCaptionRendererIntervalBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererIntervalBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererInterval]"));
}

void FigCaptionRendererParentIntervalFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
}

__CFString *FigCaptionRendererParentIntervalCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererParentInterval: <%p>"), DerivedStorage);
  return Mutable;
}

__CFString *FigCaptionRendererParentInterval_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererParentInterval <FigCaptionRendererIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v5 = *(_QWORD *)(ProtocolVTable + 16);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6)
        v6(v3, a2);
    }
  }
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7)
        v7(v4, a1, a2);
    }
  }
  return 0;
}

__CFString *FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererParentInterval <FigCaptionRendererParentIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_AddChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  const CFArrayCallBacks *v13;
  CFStringRef v14;
  void *Value;
  CFMutableArrayRef Mutable;
  double FigBaseObject;
  double v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  v19 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) == 0
    || v7(a2, &FigBaseObject))
  {
    FigSignalErrorAt();
    return 0;
  }
  v8 = *(double *)(DerivedStorage + 24);
  v9 = (uint64_t)(FigBaseObject / v8);
  v10 = (uint64_t)((FigBaseObject + v19) / v8);
  if (v9 <= v10)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = v10 + 1;
    v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v14 = CFStringCreateWithFormat(v11, 0, CFSTR("%ld"), v9);
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v14);
      if (!Value)
      {
        Mutable = CFArrayCreateMutable(v11, 0, v13);
        if (!Mutable)
        {
          FigSignalErrorAt();
          if (v14)
            CFRelease(v14);
          return 0;
        }
        Value = Mutable;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v14, Mutable);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, a2);
      if (v14)
        CFRelease(v14);
      ++v9;
    }
    while (v12 != v9);
  }
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_RemoveChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  CFStringRef v13;
  const __CFArray *Value;
  const __CFArray *v15;
  CFIndex FirstIndexOfValue;
  double FigBaseObject;
  double v19;
  CFRange v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  v19 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a2, &FigBaseObject))
  {
    v8 = *(double *)(DerivedStorage + 24);
    v9 = (uint64_t)(FigBaseObject / v8);
    v10 = (uint64_t)((FigBaseObject + v19) / v8);
    if (v9 <= v10)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = v10 + 1;
      while (1)
      {
        v13 = CFStringCreateWithFormat(v11, 0, CFSTR("%ld"), v9);
        Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v13);
        if (Value)
        {
          v15 = Value;
          v20.length = CFArrayGetCount(Value);
          v20.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v15, v20, a2);
          if ((FirstIndexOfValue & 0x8000000000000000) == 0)
            CFArrayRemoveValueAtIndex(v15, FirstIndexOfValue);
          if (!CFArrayGetCount(v15))
            break;
        }
        if (v13)
          goto LABEL_12;
LABEL_13:
        if (v12 == ++v9)
          return 0;
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v13);
      if (!v13)
        goto LABEL_13;
LABEL_12:
      CFRelease(v13);
      goto LABEL_13;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_RemoveAllChildIntervals()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_GetChildIntervalsAt(double a1, double a2, uint64_t a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  CFStringRef v20;
  const __CFArray *Value;
  const __CFArray *v22;
  CFIndex v23;
  int v24;
  const void *ValueAtIndex;
  CFIndex LastIndexOfValue;
  _QWORD context[5];
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2 >= 0.0)
  {
    v10 = copySubIntervalsAt_0(a1);
    if (v10)
    {
      v11 = v10;
      v30.length = CFArrayGetCount(v10);
      v30.location = 0;
      CFArrayAppendArray(Mutable, v11, v30);
      CFRelease(v11);
    }
    v12 = copySubIntervalsAt_0(a1 + a2);
    if (v12)
    {
      v13 = v12;
      v31.length = CFArrayGetCount(v12);
      v31.location = 0;
      CFArrayAppendArray(Mutable, v13, v31);
      CFRelease(v13);
    }
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 16));
    v15 = *(double *)(DerivedStorage + 24);
    v16 = (uint64_t)(a1 / v15);
    v17 = (a1 + a2) / v15;
    v18 = (uint64_t)v17;
    if ((uint64_t)v17 - v16 + 1 >= Count)
    {
      context[1] = (uint64_t)v17;
      context[2] = Mutable;
      context[0] = v16;
      *(double *)&context[3] = a1;
      *(double *)&context[4] = a2;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 16), (CFDictionaryApplierFunction)fcri_getIntervalsByRange, context);
    }
    else if (v18 - 1 > v16)
    {
      v19 = v16 + 1;
      do
      {
        v20 = CFStringCreateWithFormat(v8, 0, CFSTR("%ld"), v19);
        Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v20);
        if (Value)
        {
          v22 = Value;
          v32.length = CFArrayGetCount(Value);
          v32.location = 0;
          CFArrayAppendArray(Mutable, v22, v32);
        }
        if (v20)
          CFRelease(v20);
        ++v19;
      }
      while (v18 != v19);
    }
    do
    {
      if (CFArrayGetCount(Mutable) < 1)
        break;
      v23 = 0;
      v24 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
        v29.length = CFArrayGetCount(Mutable);
        v29.location = 0;
        LastIndexOfValue = CFArrayGetLastIndexOfValue(Mutable, v29, ValueAtIndex);
        if (LastIndexOfValue > v23)
        {
          CFArrayRemoveValueAtIndex(Mutable, LastIndexOfValue);
          v24 = 1;
        }
        ++v23;
      }
      while (CFArrayGetCount(Mutable) > v23);
    }
    while (v24);
  }
  *a4 = Mutable;
  return 0;
}

CFMutableArrayRef copySubIntervalsAt_0(double a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  CFStringRef v5;
  const __CFArray *Value;
  const __CFArray *v7;
  _QWORD context[2];
  CFRange v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = CFStringCreateWithFormat(v3, 0, CFSTR("%ld"), (uint64_t)(a1 / *(double *)(DerivedStorage + 24)));
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v5);
  if (Value)
  {
    v7 = Value;
    *(double *)context = a1;
    context[1] = Mutable;
    v10.length = CFArrayGetCount(Value);
    v10.location = 0;
    CFArrayApplyFunction(v7, v10, (CFArrayApplierFunction)findAndSaveCoveringIntervalsApplier_0, context);
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  if (v5)
    CFRelease(v5);
  return Mutable;
}

void fcri_getIntervalsByRange(const __CFString *a1, const __CFArray *a2, uint64_t a3)
{
  SInt32 IntValue;
  __int128 v6;
  uint64_t v7;
  CFRange v8;

  IntValue = CFStringGetIntValue(a1);
  if (*(_QWORD *)a3 <= IntValue && a2 && *(_QWORD *)(a3 + 8) >= IntValue)
  {
    v6 = *(_OWORD *)(a3 + 24);
    v7 = *(_QWORD *)(a3 + 16);
    v8.length = CFArrayGetCount(a2);
    v8.location = 0;
    CFArrayApplyFunction(a2, v8, (CFArrayApplierFunction)findAndSaveOverlappingIntervalsApplier_0, &v6);
  }
}

void findAndSaveCoveringIntervalsApplier_0(const void *a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double FigBaseObject;
  double v9;

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v9 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    if (FigBaseObject <= *(double *)a2 && *(double *)a2 <= FigBaseObject + v9)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void findAndSaveOverlappingIntervalsApplier_0(const void *a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double v8;
  double v9;
  BOOL v11;
  double v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  double FigBaseObject;
  double v17;

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v17 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    v8 = FigBaseObject + v17;
    v9 = *(double *)a2;
    if (FigBaseObject <= *(double *)a2 && v9 <= v8)
      goto LABEL_21;
    v11 = v9 > v8;
    v12 = v9 + *(double *)(a2 + 8);
    v13 = v9 > FigBaseObject;
    v14 = FigBaseObject > v12;
    if (FigBaseObject > v12)
      v13 = 1;
    if (v12 > v8)
      v14 = 1;
    if (v8 > v12)
      v11 = 1;
    v15 = !v14 || !v13;
    if (v15 || !v11)
LABEL_21:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t RegisterFigCaptionRendererParentIntervalBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererParentIntervalBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererParentInterval]"));
}

uint64_t FigCDSIntervalProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSIntervalProtocolGetProtocolID_sRegisterFigCDSIntervalProtocolTypeOnce, RegisterFigCDSIntervalProtocolType);
  return sFigCDSIntervalProtocolID;
}

uint64_t RegisterFigCDSIntervalProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCDSParentIntervalProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSParentIntervalProtocolGetProtocolID_sRegisterFigCDSParentIntervalProtocolTypeOnce, RegisterFigCDSParentIntervalProtocolType);
  return sFigCDSParentIntervalProtocolID;
}

uint64_t RegisterFigCDSParentIntervalProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t DeMoofMovieFile(const void *a1)
{
  uint64_t CurrentAtomGlobalOffset;
  const __CFAllocator *v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *);
  uint64_t v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *FileTypeForMovieFamilyExtension;
  uint64_t v11;
  uint64_t v12;
  OpaqueCMBlockBuffer *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *);
  uint64_t v16;
  uint64_t appended;
  char *v18;
  int v19;
  int v20;
  uint64_t CurrentAtomTypeAndDataLength;
  char *v22;
  uint64_t (*v23)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *);
  char *v24;
  uint64_t v25;
  CFTypeRef v26;
  int Atom;
  char *v28;
  uint64_t (*v29)(const void *, uint64_t, char *, uint64_t *, uint64_t *);
  char *v30;
  unsigned int v31;
  uint64_t (*v32)(const void *, uint64_t, char *, uint64_t *, uint64_t *);
  int v33;
  char *v34;
  uint64_t (*v35)(const void *, uint64_t, char *, CFNumberRef *, CFURLRef *);
  _QWORD *v36;
  void (*v37)(const void *, uint64_t);
  unsigned int v38;
  uint64_t (*v39)(const void *, uint64_t, char *, uint64_t *, CFURLRef *);
  CFURLRef v40;
  _QWORD *v41;
  void (*v42)(const void *, uint64_t);
  uint64_t (*v43)(const void *, uint64_t, char *, const char *, CFURLRef *);
  unint64_t v44;
  uint64_t (*v45)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *);
  _QWORD *v46;
  void (*v47)(const void *, uint64_t);
  uint64_t (*v48)(const void *, uint64_t, char *, unint64_t *, CFURLRef *);
  uint64_t (*v49)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *);
  CMBlockBufferRef theBuffer;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t valuePtr;
  CFNumberRef number;
  int v64;
  CFURLRef url;
  CFTypeRef cf;
  CFTypeRef v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  const __CFAllocator **v74[5];

  v74[2] = *(const __CFAllocator ***)MEMORY[0x1E0C80C00];
  v56 = 0;
  CurrentAtomGlobalOffset = MovieUsesFragments((uint64_t)a1, (_BYTE *)&v56 + 1, (char *)&v56);
  if ((_DWORD)CurrentAtomGlobalOffset)
    return CurrentAtomGlobalOffset;
  if (!HIBYTE(v56))
  {
    if (!(_BYTE)v56)
      return 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    *(_OWORD *)v67 = 0u;
    v74[0] = (const __CFAllocator **)0x6D7665786D6F6F76;
    CurrentAtomGlobalOffset = FigAtomStreamInitWithByteStream();
    if (!(_DWORD)CurrentAtomGlobalOffset)
    {
      if (FigAtomStreamPositionViaAtomPath())
        return 0;
      url = 0;
      cf = 0;
      LODWORD(number) = 1701147238;
      CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
      if (!(_DWORD)CurrentAtomGlobalOffset)
      {
        v34 = (char *)cf;
        v35 = *(uint64_t (**)(const void *, uint64_t, char *, CFNumberRef *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 16);
        if (!v35)
          return 4294954514;
        CurrentAtomGlobalOffset = v35(a1, 4, v34 + 4, &number, &url);
        if (!(_DWORD)CurrentAtomGlobalOffset)
        {
          if (url == (CFURLRef)4)
          {
            if (shouldSyncByteStreamWhenComplete())
            {
              v36 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v36 >= 2uLL)
              {
                v37 = (void (*)(const void *, uint64_t))v36[5];
                if (v37)
                  v37(a1, 1);
              }
            }
            return 0;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return CurrentAtomGlobalOffset;
  }
  cf = 0;
  v67[0] = 0;
  v74[0] = 0;
  url = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, *MEMORY[0x1E0CA2098], v3, &url);
    if (!(_DWORD)v6)
    {
      if (url)
      {
        v7 = CFSTR("com.apple.quicktime-movie");
        v8 = CFURLCopyPathExtension(url);
        v9 = v8;
        if (v8)
        {
          FileTypeForMovieFamilyExtension = FigGetFileTypeForMovieFamilyExtension(v8);
          if (FileTypeForMovieFamilyExtension)
            v7 = FileTypeForMovieFamilyExtension;
        }
        v11 = MovieInformationCreate((uint64_t)v3, 0, (uint64_t *)v67);
        if ((_DWORD)v11
          || (v11 = MoovParseByteStream((uint64_t)v67[0], 10, a1, 0), (_DWORD)v11)
          || (v11 = MovieHeaderMakerCreateWithMovieInformation(v3, v67[0], 2, v74), (_DWORD)v11))
        {
          v12 = v11;
        }
        else
        {
          v12 = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)v74[0], v3, (uint64_t)v7, url, (CMBlockBufferRef *)&cf);
          if (!(_DWORD)v12)
          {
            v13 = (OpaqueCMBlockBuffer *)cf;
            cf = 0;
            goto LABEL_14;
          }
        }
        v13 = 0;
LABEL_14:
        MovieHeaderMakerRelease(v74[0]);
        if (v9)
          CFRelease(v9);
        goto LABEL_22;
      }
      v6 = FigSignalErrorAt();
    }
    v12 = v6;
  }
  else
  {
    v12 = 4294954514;
  }
  MovieHeaderMakerRelease(0);
  v13 = 0;
LABEL_22:
  if (cf)
    CFRelease(cf);
  if (url)
    CFRelease(url);
  if (v67[0])
    CFRelease(v67[0]);
  if ((_DWORD)v12)
    goto LABEL_115;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  *(_OWORD *)v67 = 0u;
  v14 = CMByteStreamGetCMBaseObject();
  v15 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (!v15)
    goto LABEL_114;
  v16 = *MEMORY[0x1E0CA2070];
  v64 = 0;
  url = 0;
  cf = 0;
  valuePtr = 0;
  number = 0;
  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  appended = v15(v14, v16, v3, &number);
  if ((_DWORD)appended)
    goto LABEL_119;
  if (!number)
  {
LABEL_118:
    appended = FigSignalErrorAt();
    goto LABEL_119;
  }
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  CFRelease(number);
  number = 0;
  appended = FigAtomStreamInitWithByteStream();
  if ((_DWORD)appended)
    goto LABEL_119;
  theBuffer = v13;
  v52 = 0;
  v18 = 0;
  v53 = 0;
  v54 = 0;
  v19 = 0;
  v20 = 0;
  v55 = 0;
  while (1)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_123;
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomGlobalOffset();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_123;
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomHeaderSize();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_123;
    if (v64 == 1835295092)
    {
      if (v19)
      {
        v19 = 1;
      }
      else
      {
        v19 = 1;
        v52 = (uint64_t)cf;
        v53 = v61;
      }
      goto LABEL_52;
    }
    if (v64 != 1836019574)
    {
      if (v64 == 2003395685)
      {
        if (!v55)
          v18 = v61;
        v55 = 1;
      }
      goto LABEL_52;
    }
    if (!v20)
    {
      v20 = 1;
      v54 = v61;
      goto LABEL_52;
    }
    LODWORD(v74[0]) = 1701147238;
    v22 = v61;
    v23 = *(uint64_t (**)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v23)
    {
      v12 = 4294954514;
      goto LABEL_124;
    }
    CurrentAtomTypeAndDataLength = v23(a1, 4, v22 + 4, v74, &url);
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_123;
    if (url != (CFURLRef)4)
      break;
    v20 = 1;
LABEL_52:
    v25 = v60;
    v24 = v61;
    v26 = cf;
    Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom)
    {
      if (Atom == -12890)
      {
        v13 = theBuffer;
        if (v64 != 1835295092)
          goto LABEL_82;
        v28 = v61;
        v29 = *(uint64_t (**)(const void *, uint64_t, char *, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
        if (!v29)
          goto LABEL_114;
        appended = v29(a1, 8, v28, &v58, &v59);
        if ((_DWORD)appended)
          goto LABEL_119;
        if (v59 != 8)
          goto LABEL_118;
        if ((_DWORD)v58)
        {
LABEL_82:
          CMBlockBufferGetDataLength(v13);
          appended = CMByteStreamAppendBlockBuffer();
          if ((_DWORD)appended)
            goto LABEL_119;
          v40 = url;
          if (v40 != (CFURLRef)CMBlockBufferGetDataLength(v13))
            goto LABEL_118;
          v41 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v41 >= 2uLL)
          {
            v42 = (void (*)(const void *, uint64_t))v41[5];
            if (v42)
              v42(a1, 1);
          }
          if (!v20)
            goto LABEL_100;
          v43 = *(uint64_t (**)(const void *, uint64_t, char *, const char *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
          if (!v43)
            goto LABEL_114;
          appended = v43(a1, 1, v54 + 4, "h", &url);
          if ((_DWORD)appended)
            goto LABEL_119;
          if (url != (CFURLRef)1)
            goto LABEL_118;
          if (!v19)
            goto LABEL_96;
          v44 = valuePtr - (_QWORD)v53;
          if (valuePtr - (uint64_t)v53 <= 0xFFFFFFFFLL)
          {
            LODWORD(v74[0]) = bswap32(v44);
            v45 = *(uint64_t (**)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (!v45)
              goto LABEL_114;
            appended = v45(a1, 4, v53, v74, &url);
            if (!(_DWORD)appended)
            {
              if (url != (CFURLRef)4)
                goto LABEL_118;
              goto LABEL_96;
            }
LABEL_119:
            v12 = appended;
            goto LABEL_115;
          }
          if (v52 < 0x100000000)
          {
            if (!v55 || v18 != v53 - 8)
              goto LABEL_118;
            v74[0] = (const __CFAllocator **)0x7461646D01000000;
            v74[1] = (const __CFAllocator **)bswap64(v44 + 8);
            v49 = *(uint64_t (**)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v49)
            {
              appended = v49(a1, 16, v18, v74, &url);
              if ((_DWORD)appended)
                goto LABEL_119;
              if (url != (CFURLRef)16)
                goto LABEL_118;
              goto LABEL_96;
            }
          }
          else
          {
            v57 = bswap64(v44);
            v48 = *(uint64_t (**)(const void *, uint64_t, char *, unint64_t *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v48)
            {
              appended = v48(a1, 8, v53 + 8, &v57, &url);
              if ((_DWORD)appended)
                goto LABEL_119;
              if (url != (CFURLRef)8)
                goto LABEL_118;
LABEL_96:
              if (shouldSyncByteStreamWhenComplete())
              {
                v46 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                if (*v46 >= 2uLL)
                {
                  v47 = (void (*)(const void *, uint64_t))v46[5];
                  if (v47)
                    v47(a1, 1);
                }
              }
LABEL_100:
              v12 = 0;
              goto LABEL_115;
            }
          }
LABEL_114:
          v12 = 4294954514;
          goto LABEL_115;
        }
        v30 = v61;
        v31 = bswap32(valuePtr - (_DWORD)v61);
      }
      else
      {
        v30 = &v24[v25 + (_QWORD)v26];
        v32 = *(uint64_t (**)(const void *, uint64_t, char *, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
        v13 = theBuffer;
        if (v32)
          v33 = v32(a1, 8, v30, &v58, &v59);
        else
          v33 = -12782;
        v38 = valuePtr - (_DWORD)v30;
        if (v33 || v59 != 8 || HIDWORD(v58) != 1952539757)
        {
          if ((((_DWORD)valuePtr - (_DWORD)v30) & 0xFFFFFFF8) == 0)
            v38 = 8;
          v58 = bswap32(v38) | 0x6565726600000000;
          goto LABEL_79;
        }
        v31 = bswap32(v38);
      }
      LODWORD(v58) = v31;
LABEL_79:
      v39 = *(uint64_t (**)(const void *, uint64_t, char *, uint64_t *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
      if (!v39)
        goto LABEL_114;
      appended = v39(a1, 8, v30, &v58, &url);
      if ((_DWORD)appended)
        goto LABEL_119;
      if (url != (CFURLRef)8)
        goto LABEL_118;
      goto LABEL_82;
    }
  }
  CurrentAtomTypeAndDataLength = FigSignalErrorAt();
LABEL_123:
  v12 = CurrentAtomTypeAndDataLength;
LABEL_124:
  v13 = theBuffer;
LABEL_115:
  if (v13)
    CFRelease(v13);
  return v12;
}

uint64_t MovieUsesFragments(uint64_t a1, _BYTE *a2, char *a3)
{
  uint64_t result;
  char v6;

  *a2 = 0;
  result = FigAtomStreamInitWithByteStream();
  if ((_DWORD)result
    || (result = FigAtomStreamGetCurrentAtomTypeAndDataLength(), (_DWORD)result)
    || (result = FigAtomStreamAdvanceToNextAtomWithType(), (_DWORD)result)
    || (result = FigAtomStreamInitWithParent(), (_DWORD)result))
  {
LABEL_7:
    v6 = 0;
    if (!a3)
      return result;
    goto LABEL_11;
  }
  if (FigAtomStreamAdvanceToNextAtomWithType())
  {
    result = 0;
    goto LABEL_7;
  }
  result = FigAtomStreamAdvanceToNextAtomWithType();
  v6 = 1;
  if ((_DWORD)result)
  {
    result = 0;
    if (!a3)
      return result;
  }
  else
  {
    *a2 = 1;
    if (!a3)
      return result;
  }
LABEL_11:
  *a3 = v6;
  return result;
}

BOOL shouldSyncByteStreamWhenComplete()
{
  uint64_t CMBaseObject;
  unsigned int (*v1)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  CFURLRef v2;
  CFURLRef v3;
  int IsFileOnExternalStorageDevice;
  CFURLRef relativeURL;

  relativeURL = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v1 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v1 && !v1(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &relativeURL))
  {
    if (relativeURL)
    {
      v2 = CFURLCopyAbsoluteURL(relativeURL);
      if (v2)
      {
        v3 = v2;
        IsFileOnExternalStorageDevice = FigFileIsFileOnExternalStorageDevice();
        CFRelease(v3);
        goto LABEL_8;
      }
    }
    FigSignalErrorAt();
  }
  IsFileOnExternalStorageDevice = 0;
LABEL_8:
  if (relativeURL)
    CFRelease(relativeURL);
  return IsFileOnExternalStorageDevice != 0;
}

uint64_t FigTTMLDocumentWriterCreateDivBuilder(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    DerivedStorage[1] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterDivBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterDivBuilder_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
}

CFStringRef figTTMLDocumentWriterDivBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigTTMLDocumentWriterDivBuilder[%p]"), a1);
}

uint64_t figTTMLDocumentWriterDivBuilder_StartElement(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *value;
  CFTypeRef cf;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  cf = 0;
  v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], a2, *(_QWORD *)(DerivedStorage + 24), (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v9 = v4;
  }
  else
  {
    v5 = *(_QWORD *)(DerivedStorage + 24);
    if (v5)
    {
      FigTTMLDocumentWriterElementAddChildElement(v5, cf);
    }
    else
    {
      if (cf)
        v6 = CFRetain(cf);
      else
        v6 = 0;
      *(_QWORD *)(DerivedStorage + 16) = v6;
    }
    if (a2 != 3)
    {
      v8 = 0;
LABEL_12:
      v9 = 0;
      *(_QWORD *)(DerivedStorage + 24) = cf;
      if (!v8)
        goto LABEL_14;
      goto LABEL_13;
    }
    v7 = FigTTMLDocumentWriterRegionTimelineCreate(&value);
    v8 = value;
    if (!(_DWORD)v7)
    {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(DerivedStorage + 8), cf, value);
      v8 = value;
      goto LABEL_12;
    }
    v9 = v7;
    if (value)
LABEL_13:
      CFRelease(v8);
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t figTTMLDocumentWriterDivBuilder_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ParentElement;
  uint64_t v8;
  uint64_t v9;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 24);
  if (v3 != *(_QWORD *)(DerivedStorage + 16))
    goto LABEL_5;
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v4 = CMBaseObjectGetDerivedStorage();
  v8 = a1;
  v9 = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v4 + 8), (CFDictionaryApplierFunction)synthesizeDivAttributes, &v8);
  result = v9;
  if (!(_DWORD)v9)
  {
    FigTTMLDocumentWriterGetCMBaseObject(a1);
    v6 = CMBaseObjectGetDerivedStorage();
    FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(v6 + 16), (uint64_t (*)(CFArrayRef *, uint64_t))removeUnnecessaryChildDivElements, 0, 0, 0);
    result = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 16), *(_QWORD *)DerivedStorage);
    if (!(_DWORD)result)
    {
      v3 = *(_QWORD *)(DerivedStorage + 24);
LABEL_5:
      ParentElement = FigTTMLDocumentWriterElementGetParentElement(v3);
      result = 0;
      *(_QWORD *)(DerivedStorage + 24) = ParentElement;
    }
  }
  return result;
}

uint64_t figTTMLDocumentWriterDivBuilder_AddCaptionData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *ParentElement;
  __int128 v7;
  const void *Attribute;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t CMBaseObject;
  uint64_t (*v18)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  const void *Value;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CMTimeRange v28;
  CMTimeRange v29;
  CFTypeRef cf;
  CFTypeRef v31;
  CFTypeRef v32;
  CMTime end;
  CMTime start;
  CMTime v35;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v5 = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  v32 = 0;
  cf = 0;
  ParentElement = *(const void **)(v5 + 24);
  if (FigTTMLDocumentWriterElementGetElementType((uint64_t)ParentElement) != 4)
    goto LABEL_12;
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v29.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v29.start.epoch = v7;
  *(_OWORD *)&v29.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  Attribute = FigTTMLDocumentWriterElementGetAttribute((uint64_t)ParentElement, CFSTR("begin"));
  v9 = FigTTMLDocumentWriterElementGetAttribute((uint64_t)ParentElement, CFSTR("end"));
  if (Attribute)
  {
    v10 = v9;
    v11 = CFGetTypeID(Attribute);
    if (v11 == CFDictionaryGetTypeID() && v10 != 0)
    {
      v13 = CFGetTypeID(v10);
      if (v13 == CFDictionaryGetTypeID())
      {
        memset(&v28, 0, 24);
        CMTimeMakeFromDictionary(&v28.start, (CFDictionaryRef)Attribute);
        memset(&v35, 0, sizeof(v35));
        CMTimeMakeFromDictionary(&v35, (CFDictionaryRef)v10);
        if ((v28.start.flags & 0x1D) == 1 && (v35.flags & 0x1D) == 1)
        {
          start = v28.start;
          end = v35;
          CMTimeRangeFromTimeToTime(&v29, &start, &end);
        }
      }
    }
  }
  if ((v29.start.flags & 1) == 0 || (v29.duration.flags & 1) == 0 || v29.duration.epoch || v29.duration.value < 0)
    goto LABEL_12;
  for (; ParentElement; ParentElement = (const void *)FigTTMLDocumentWriterElementGetParentElement((uint64_t)ParentElement))
  {
    if (FigTTMLDocumentWriterElementGetElementType((uint64_t)ParentElement) == 3)
      break;
  }
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v18 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v18)
  {
    v19 = *MEMORY[0x1E0C9AE00];
    v14 = v18(CMBaseObject, *MEMORY[0x1E0CA3340], *MEMORY[0x1E0C9AE00], &v31);
    if ((_DWORD)v14)
      v20 = 1;
    else
      v20 = v31 == 0;
    if (v20)
      goto LABEL_13;
    v21 = *MEMORY[0x1E0CA3418];
    v22 = *MEMORY[0x1E0CA3400];
    while (ParentElement && FigTTMLDocumentWriterElementGetElementType((uint64_t)ParentElement) == 3)
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v23 = FigCaptionRegionGetCMBaseObject();
      v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (!v24)
        goto LABEL_49;
      v14 = v24(v23, v21, v19, &cf);
      if ((_DWORD)v14)
        goto LABEL_13;
      if (!FigCFEqual())
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 8), ParentElement);
        v28 = v29;
        v14 = FigTTMLDocumentWriterRegionTimelineAddRegionSlice((uint64_t)Value, (__int128 *)&v28.start.value, (uint64_t)v31);
        if ((_DWORD)v14)
          goto LABEL_13;
        v26 = FigCaptionRegionGetCMBaseObject();
        v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
        if (!v27)
          goto LABEL_49;
        v14 = v27(v26, v22, v19, &v32);
        if ((_DWORD)v14)
          goto LABEL_13;
        if (v31)
          CFRelease(v31);
        v31 = v32;
        ParentElement = (const void *)FigTTMLDocumentWriterElementGetParentElement((uint64_t)ParentElement);
        if (v31)
          continue;
      }
      v15 = 0;
      goto LABEL_14;
    }
LABEL_12:
    v14 = FigSignalErrorAt();
LABEL_13:
    v15 = v14;
    goto LABEL_14;
  }
LABEL_49:
  v15 = 4294954514;
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v32)
    CFRelease(v32);
  if (!(_DWORD)v15)
    FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)(DerivedStorage + 24), a2);
  return v15;
}

uint64_t figTTMLDocumentWriterDivBuilder_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(_QWORD *)(DerivedStorage + 24), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterDivBuilder_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[3])
    return 4294950721;
  else
    return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t synthesizeDivAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  MEMORY[0x19402F294](&initPropertyToAttributeMapOnce, initPropertyToAttributeMap);
  result = FigTTMLDocumentWriterRegionTimelineWriteAttributesAndSetElements(a2, a1, sPropertyToAttributeMap);
  if ((_DWORD)result)
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

void initPropertyToAttributeMap()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA33E8], FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3430], FigTTMLDocumentWriterMapPropertyToAttribute_Hidden);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3470], FigTTMLDocumentWriterMapPropertyToAttribute_Invisible);
  sPropertyToAttributeMap = (uint64_t)Mutable;
}

uint64_t removeUnnecessaryChildDivElements(uint64_t a1)
{
  CFIndex ChildrenCount;
  CFIndex v3;
  CFIndex v4;
  int v5;
  _QWORD *ChildAtIndex;
  _QWORD *v7;
  CFTypeID v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  BOOL v12;
  const void *v13;
  uint64_t v14;
  CFTypeID v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex i;
  _QWORD *v19;

  do
  {
    ChildrenCount = FigTTMLDocumentWriterElementGetChildrenCount(a1);
    if (ChildrenCount < 1)
      break;
    v3 = ChildrenCount;
    v4 = 0;
    v5 = 0;
    do
    {
      ChildAtIndex = FigTTMLDocumentWriterElementGetChildAtIndex(a1, v4);
      if (ChildAtIndex)
      {
        v7 = ChildAtIndex;
        v8 = CFGetTypeID(ChildAtIndex);
        if (v8 == FigTTMLDocumentWriterElementGetTypeID()
          && FigTTMLDocumentWriterElementGetElementType((uint64_t)v7) == 3
          && !FigTTMLDocumentWriterElementGetAttributeCount((uint64_t)v7))
        {
          v9 = FigTTMLDocumentWriterElementGetChildrenCount((uint64_t)v7);
          if (v9 < 1)
          {
LABEL_15:
            v16 = FigTTMLDocumentWriterElementGetChildrenCount((uint64_t)v7);
            if (v16 >= 1)
            {
              v17 = v16;
              for (i = 0; i != v17; ++i)
              {
                v19 = FigTTMLDocumentWriterElementGetChildAtIndex((uint64_t)v7, i);
                FigTTMLDocumentWriterElementInsertChildNodeBeforeNode(a1, v19, v7);
              }
            }
            FigTTMLDocumentWriterElementRemoveChildNode(a1, v7);
            v5 = 1;
          }
          else
          {
            v10 = v9;
            v11 = 0;
            v12 = 1;
            while (1)
            {
              v13 = FigTTMLDocumentWriterElementGetChildAtIndex((uint64_t)v7, v11);
              if (!v13)
                break;
              v14 = (uint64_t)v13;
              v15 = CFGetTypeID(v13);
              if (v15 != FigTTMLDocumentWriterElementGetTypeID())
                break;
              if (FigTTMLDocumentWriterElementGetElementType(v14) != 3)
              {
                if (v12)
                  break;
                goto LABEL_15;
              }
              v12 = ++v11 < v10;
              if (v10 == v11)
                goto LABEL_15;
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  while (v5);
  return 0;
}

uint64_t FigRemakerGetClassID()
{
  MEMORY[0x19402F294](&FigRemakerGetClassID_sRegisterFigRemakerTypeOnce, RegisterFigRemakerType);
  return sFigRemakerClassID;
}

uint64_t RegisterFigRemakerType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigRemakerGetTypeID()
{
  MEMORY[0x19402F294](&FigRemakerGetClassID_sRegisterFigRemakerTypeOnce, RegisterFigRemakerType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetReaderGetClassID()
{
  MEMORY[0x19402F294](&FigAssetReaderGetClassID_sRegisterFigAssetReaderTypeOnce, RegisterFigAssetReaderType);
  return sFigAssetReaderClassID;
}

uint64_t RegisterFigAssetReaderType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetReaderGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetReaderGetClassID_sRegisterFigAssetReaderTypeOnce, RegisterFigAssetReaderType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetWriterGetClassID()
{
  MEMORY[0x19402F294](&FigAssetWriterGetClassID_sRegisterFigAssetWriterTypeOnce, RegisterFigAssetWriterType);
  return sFigAssetWriterClassID;
}

uint64_t RegisterFigAssetWriterType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetWriterGetClassID_sRegisterFigAssetWriterTypeOnce, RegisterFigAssetWriterType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigRemakerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRemaker %p]"), a1);
}

CFStringRef FigAssetReaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetReader %p]"), a1);
}

CFStringRef FigAssetWriterCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetWriter %p]"), a1);
}

uint64_t FigTTMLLayoutCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFTypeRef v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  if (!a4)
    goto LABEL_16;
  FigTTMLNodeGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    goto LABEL_17;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
  if ((_DWORD)v8)
    goto LABEL_17;
  v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
  if ((_DWORD)v8)
    goto LABEL_17;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 136) = Mutable;
  if (!Mutable)
  {
LABEL_16:
    v8 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v11 = cf;
  *(_QWORD *)a3 = cf;
  *(_QWORD *)(a3 + 8) = v11;
  v8 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLLayoutConsumeChildNode, (uint64_t *)a3);
  if ((_DWORD)v8)
  {
LABEL_17:
    v14 = v8;
    goto LABEL_13;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136)))
  {
    v12 = 0;
    goto LABEL_11;
  }
  v13 = FigTTMLRegionCreateDefault(a1, (__int128 *)a3, &value);
  v12 = value;
  if (!(_DWORD)v13)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
    v12 = value;
LABEL_11:
    v14 = 0;
    *a4 = cf;
    cf = 0;
    if (!v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  v14 = v13;
  if (value)
LABEL_12:
    CFRelease(v12);
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t figTTMLLayoutConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_8;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_18;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLRegionCreate(v9, a1, (uint64_t)a2, &value);
    if (!(_DWORD)v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_9:
      v10 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  v10 = v8;
LABEL_11:
  if (cf)
    CFRelease(cf);
LABEL_13:
  if (v13)
    CFRelease(v13);
  if (value)
    CFRelease(value);
  return v10;
}

uint64_t FigTTMLLayoutCreateDefault(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFTypeRef v9;
  uint64_t v10;
  void *v11;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  if (!a3)
    goto LABEL_12;
  FigTTMLNodeGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    goto LABEL_13;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a2);
  if ((_DWORD)v6)
    goto LABEL_13;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 136) = Mutable;
  if (!Mutable)
  {
LABEL_12:
    v6 = FigSignalErrorAt();
LABEL_13:
    v10 = v6;
    goto LABEL_9;
  }
  v9 = cf;
  *(_QWORD *)a2 = cf;
  *(_QWORD *)(a2 + 8) = v9;
  v10 = FigTTMLRegionCreateDefault(a1, (__int128 *)a2, &value);
  v11 = value;
  if (!(_DWORD)v10)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
    v11 = value;
    *a3 = cf;
    cf = 0;
  }
  if (v11)
    CFRelease(v11);
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v10;
}

void figTTMLLayout_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLLayout_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("layout: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLLayout_CopyChildNodeArray(const void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v6 = CFGetAllocator(a1);
  *a2 = CFArrayCreateCopy(v6, *(CFArrayRef *)(v5 + 136));
  return 0;
}

uint64_t figTTMLLayout_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 9;
  return 0;
}

uint64_t FigMediaRequestSchedulerAddResourceToReadQueue(uint64_t a1, const void *a2)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v6;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  Mutable = *(__CFArray **)(a1 + 112);
  if (Mutable
    || (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]),
        (*(_QWORD *)(a1 + 112) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, a2);
    v6 = 0;
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v6;
}

uint64_t FigMediaRequestSchedulerStart(uint64_t a1)
{
  uint64_t NextResource;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 128))
  {
    NextResource = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 128) = 1;
    NextResource = mrs_readNextResource(a1);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return NextResource;
}

uint64_t mrs_readNextResource(uint64_t a1)
{
  const __CFArray *Count;
  uint64_t v3;
  const __CFArray *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t *v10;
  CFTypeID v11;
  int AllocatorForMedia;
  uint64_t v13;
  const void *v14;
  malloc_zone_t *MallocZoneForMedia;
  _QWORD *v16;
  _QWORD *v17;
  CFTypeRef v18;
  uint64_t v19;
  void (*v20)(uint64_t);

  if (!*(_QWORD *)(a1 + 72))
    *(_QWORD *)(a1 + 72) = FigCopyCommonMemoryPool();
  Count = *(const __CFArray **)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if (v3 >= (uint64_t)Count)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16))
      return 0;
    v14 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();
    v16 = malloc_type_zone_calloc(MallocZoneForMedia, 1uLL, 0x18uLL, 0xE004018F04884uLL);
    if (v16)
    {
      v17 = v16;
      v16[2] = *(_QWORD *)(a1 + 96);
      *v16 = CFRetain((CFTypeRef)a1);
      if (v14)
        v18 = CFRetain(v14);
      else
        v18 = 0;
      v17[1] = v18;
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 104), v17, (dispatch_function_t)mrs_issueDidFinishReadQueueCallbackOnCallbackQueue);
      v13 = 0;
      if (!v14)
        return v13;
    }
    else
    {
      v13 = FigSignalErrorAt();
      if (!v14)
        return v13;
    }
    CFRelease(v14);
    return v13;
  }
  v4 = *(const __CFArray **)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v5 + 1;
  ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
  v7 = ValueAtIndex;
  v8 = *(const void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = ValueAtIndex;
  if (ValueAtIndex)
    CFRetain(ValueAtIndex);
  if (v8)
    CFRelease(v8);
  v10 = (uint64_t *)(a1 + 136);
  v9 = *(const void **)(a1 + 136);
  if (v9)
  {
    CFRelease(v9);
    *v10 = 0;
  }
  v11 = CFGetTypeID(v7);
  if (v11 == FigSessionDataSpecifierGetTypeID())
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    v13 = FigMediaRequestCreateForSessionData(AllocatorForMedia, (uint64_t)v7, *(const void **)(a1 + 80), *(const void **)(a1 + 24), *(const void **)(a1 + 32), *(const void **)(a1 + 40), 0, *(const void **)(a1 + 48), *(_DWORD *)(a1 + 56), 0, *(const void **)(a1 + 64), *(const void **)(a1 + 72), a1, (uint64_t)mrs_readNextResource_outputCallbacks, *(NSObject **)(a1 + 104), (_QWORD *)(a1 + 136));
    if ((_DWORD)v13)
      return v13;
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  v19 = *v10;
  v20 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v20)
    v20(v19);
  return v13;
}

uint64_t FigMediaRequestSchedulerCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const void *a7, const void *a8, const void *a9, uint64_t a10, uint64_t a11, NSObject *a12, uint64_t *a13)
{
  uint64_t Instance;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 context;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a13)
    return FigSignalErrorAt();
  context = xmmword_1E2F9CCD0;
  if (mrs_getTypeID_once != -1)
    dispatch_once_f(&mrs_getTypeID_once, &context, (dispatch_function_t)mrstUtil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v17 = Instance;
  if (a2)
    v18 = CFRetain(a2);
  else
    v18 = 0;
  *(_QWORD *)(v17 + 24) = v18;
  if (a3)
    v19 = CFRetain(a3);
  else
    v19 = 0;
  *(_QWORD *)(v17 + 32) = v19;
  if (a4)
    v20 = CFRetain(a4);
  else
    v20 = 0;
  *(_QWORD *)(v17 + 40) = v20;
  v21 = a5;
  if (a5)
    v21 = CFRetain(a5);
  *(_QWORD *)(v17 + 48) = v21;
  v22 = a7;
  if (a7)
    v22 = CFRetain(a7);
  *(_QWORD *)(v17 + 64) = v22;
  v23 = a8;
  if (a8)
    v23 = CFRetain(a8);
  *(_QWORD *)(v17 + 72) = v23;
  v24 = a9;
  if (a9)
    v24 = CFRetain(a9);
  *(_QWORD *)(v17 + 80) = v24;
  *(_QWORD *)(v17 + 96) = a11;
  *(_QWORD *)(v17 + 104) = a12;
  *(_DWORD *)(v17 + 56) = a6;
  if (a12)
    dispatch_retain(a12);
  v25 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(v17 + 88) = v25;
  if (v25 && (v26 = FigSimpleMutexCreate(), (*(_QWORD *)(v17 + 16) = v26) != 0))
  {
    v27 = 0;
    *a13 = v17;
  }
  else
  {
    v27 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v17);
  }
  return v27;
}

void mrs_resourceLoadDidProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  const void *v14;

  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 16));
  v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v13)
  {
    FigSignalErrorAt();
    JUMPOUT(0x19402EF04);
  }
  v14 = (const void *)v13;
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 16));
  (**(void (***)(uint64_t, _QWORD, const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 96))(a2, *(_QWORD *)(a2 + 144), v14, a3, a4, a5, a6, a7);
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 16));
  if ((_DWORD)a7)
    mrs_readNextResource(a2);
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 16));
  CFRelease(v14);
}

void mrs_resourceLoadDidFail(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;

  MEMORY[0x19402EEEC](a2[2]);
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    FigSignalErrorAt();
    JUMPOUT(0x19402EF04);
  }
  v6 = (const void *)v5;
  MEMORY[0x19402EF04](a2[2]);
  (*(void (**)(_QWORD *, _QWORD, const void *, uint64_t))(a2[12] + 8))(a2, a2[18], v6, a3);
  MEMORY[0x19402EEEC](a2[2]);
  mrs_readNextResource((uint64_t)a2);
  MEMORY[0x19402EF04](a2[2]);
  CFRelease(v6);
}

void mrs_issueDidFinishReadQueueCallbackOnCallbackQueue(_QWORD *a1)
{
  const void *v2;
  malloc_zone_t *MallocZoneForMedia;

  (*(void (**)(_QWORD, _QWORD))(a1[2] + 16))(*a1, a1[1]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();
  malloc_zone_free(MallocZoneForMedia, a1);
}

void mrs_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  NSObject *v13;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
  v7 = (const void *)a1[9];
  if (v7)
  {
    CFRelease(v7);
    a1[9] = 0;
  }
  v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  v9 = (const void *)a1[11];
  if (v9)
  {
    CFRelease(v9);
    a1[11] = 0;
  }
  v10 = (const void *)a1[14];
  if (v10)
  {
    CFRelease(v10);
    a1[14] = 0;
  }
  v11 = (const void *)a1[17];
  if (v11)
  {
    CFRelease(v11);
    a1[17] = 0;
  }
  v12 = (const void *)a1[18];
  if (v12)
  {
    CFRelease(v12);
    a1[18] = 0;
  }
  FigSimpleMutexDestroy();
  v13 = a1[13];
  if (v13)
  {
    dispatch_release(v13);
    a1[13] = 0;
  }
}

CFStringRef mrs_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigMediaRequestScheduler %p %@>"), a1, *(_QWORD *)(a1 + 112));
}

uint64_t mrstUtil_registerClass(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t FigMediaPlaylistRemoveContentKeySpecifierRemote(_BYTE *XPCClientObject, uint64_t a2)
{
  uint64_t v3;
  const char *CStringPtrAndBufferToFree;
  uint64_t CryptKeyParsedIndex;
  uint64_t v6;

  if (!XPCClientObject
    || (XPCClientObject = (_BYTE *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    v6 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    v3 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3)
  {
LABEL_9:
    v6 = v3;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  CryptKeyParsedIndex = FigContentKeySpecifierGetCryptKeyParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, CryptKeyParsedIndex);
  v6 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  FigXPCRelease();
  return v6;
}

uint64_t FigMediaPlaylistRemoveMediaSegmentSpecifierRemote(_BYTE *XPCClientObject, uint64_t a2)
{
  uint64_t v3;
  const char *CStringPtrAndBufferToFree;
  uint64_t MediaParsedIndex;
  uint64_t v6;

  if (!XPCClientObject
    || (XPCClientObject = (_BYTE *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    v6 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    v3 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3)
  {
LABEL_9:
    v6 = v3;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  MediaParsedIndex = FigMediaSegmentSpecifierGetMediaParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, MediaParsedIndex);
  v6 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  FigXPCRelease();
  return v6;
}

uint64_t FigMediaPlaylistRemovePartSegmentSpecifierRemote(_BYTE *XPCClientObject, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *CStringPtrAndBufferToFree;
  const char *v7;
  uint64_t MediaParsedIndex;
  uint64_t v9;
  uint64_t v10;

  if (!XPCClientObject
    || (XPCClientObject = (_BYTE *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    v10 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
  {
LABEL_9:
    v10 = v5;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  v7 = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  MediaParsedIndex = FigMediaSegmentSpecifierGetMediaParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, MediaParsedIndex);
  v9 = FigMediaSegmentSpecifierGetMediaParsedIndex(a3);
  xpc_dictionary_set_uint64(0, v7, v9);
  v10 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  free(0);
  FigXPCRelease();
  return v10;
}

uint64_t FigMediaPlaylistRemoveMapSegmentSpecifierRemote(_BYTE *XPCClientObject, uint64_t a2)
{
  uint64_t v3;
  const char *CStringPtrAndBufferToFree;
  uint64_t MediaParsedIndex;
  uint64_t v6;

  if (!XPCClientObject
    || (XPCClientObject = (_BYTE *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    v6 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    v3 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3)
  {
LABEL_9:
    v6 = v3;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  MediaParsedIndex = FigMediaSegmentSpecifierGetMediaParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, MediaParsedIndex);
  v6 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  FigXPCRelease();
  return v6;
}

uint64_t FigStreamPlaylistParseRemote(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, int a6, int a7, int a8, CFMutableArrayRef *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, CFTypeRef *a14)
{
  _BYTE *XPCClientObject;
  int v19;
  uint64_t OSStatus;
  uint64_t v21;
  int v22;
  const __CFArray *DateRangeSpecifiers;
  uint64_t UpTimeNanoseconds;
  uint64_t v25;
  CFTypeRef v26;
  char HasIndependentSegments;
  CFTypeRef v28;
  double StartTimeValue;
  CFTypeRef v30;
  char IsStartTimePrecise;
  CFTypeRef v32;
  char HasStartTime;
  CFTypeRef v34;
  int Version;
  uint64_t uint64;
  uint64_t v37;
  uint64_t Instance;
  _QWORD *v39;
  uint64_t started;
  CFTypeRef v41;
  int64_t int64;
  const __CFArray *v43;
  const __CFAllocator *v44;
  CFIndex Count;
  CFIndex v46;
  CFIndex v47;
  const __CFDictionary *ValueAtIndex;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v51;
  CFTypeRef cf;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFArrayRef theArray;
  xpc_object_t v59;
  xpc_object_t xdict;
  _QWORD block[5];
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;

  v59 = 0;
  xdict = 0;
  v57 = 0;
  theArray = 0;
  v55 = 0;
  v56 = 0;
  if (!a14)
  {
    XPCClientObject = 0;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  XPCClientObject = *a14;
  if (!*a14)
    goto LABEL_7;
  v55 = CFRetain(XPCClientObject);
  XPCClientObject = (_BYTE *)FigMediaPlaylistGetXPCClientObject((uint64_t)v55);
  if (!XPCClientObject)
    goto LABEL_7;
  if (XPCClientObject[24])
    goto LABEL_77;
  v19 = 0;
LABEL_8:
  cf = XPCClientObject;
  v62 = 0;
  v63 = &v62;
  v64 = 0x2000000000;
  v65 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __streamPlaylistParserRemote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2F9CD28;
  block[4] = &v62;
  if (streamPlaylistParserRemote_ensureClientEstablished_sFigStreamPlaylistParserRemoteClientSetupOnce != -1)
    dispatch_once(&streamPlaylistParserRemote_ensureClientEstablished_sFigStreamPlaylistParserRemoteClientSetupOnce, block);
  OSStatus = *((unsigned int *)v63 + 6);
  _Block_object_dispose(&v62, 8);
  if (!(_DWORD)OSStatus)
  {
    v21 = FigXPCCreateBasicMessage();
    if ((_DWORD)v21)
      goto LABEL_78;
    v21 = FigXPCMessageSetBlockBuffer();
    if ((_DWORD)v21)
      goto LABEL_78;
    v21 = FigXPCMessageSetCFURL();
    if ((_DWORD)v21)
      goto LABEL_78;
    v21 = FigXPCMessageSetCFURL();
    if ((_DWORD)v21)
      goto LABEL_78;
    xpc_dictionary_set_BOOL(xdict, "ContinueParsingAfterError", a5 != 0);
    xpc_dictionary_set_BOOL(xdict, "AddWarningsToErrorLog", a6 != 0);
    xpc_dictionary_set_BOOL(xdict, "AllowAverageBandwidth", a7 != 0);
    xpc_dictionary_set_BOOL(xdict, "OKToLogURLs", a8 != 0);
    v21 = FigXPCMessageSetCFArray();
    if ((_DWORD)v21)
      goto LABEL_78;
    v21 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v21)
      goto LABEL_78;
    v21 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v21)
      goto LABEL_78;
    v22 = v55 ? v19 : 0;
    if (v22 == 1)
    {
      DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers((uint64_t)v55);
      if (DateRangeSpecifiers)
      {
        if (CFArrayGetCount(DateRangeSpecifiers) >= 1)
        {
          v21 = FigStreamPlaylistParserSerializeDateRangeSpecifiers((uint64_t)v55, (__CFArray **)&v57);
          if ((_DWORD)v21)
            goto LABEL_78;
          v21 = FigXPCMessageSetCFArray();
          if ((_DWORD)v21)
            goto LABEL_78;
        }
      }
    }
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v21 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if ((_DWORD)v21)
      goto LABEL_78;
    v21 = FigXPCMessageCopyCFArray();
    if ((_DWORD)v21)
      goto LABEL_78;
    OSStatus = FigXPCMessageGetOSStatus();
    if ((_DWORD)OSStatus)
      goto LABEL_51;
    if (xpc_dictionary_get_BOOL(v59, "IsMultivariantPlaylist"))
    {
      v21 = FigStreamPlaylistParserDeserializeMultivariantPlaylist((uint64_t)v59, &v56);
      if ((_DWORD)v21)
        goto LABEL_78;
LABEL_51:
      if (a13 && !*a13)
      {
        *a13 = (uint64_t)v56;
        v56 = 0;
      }
      if (a14 && !*a14)
      {
        *a14 = v55;
        v55 = 0;
        if (a9)
        {
LABEL_57:
          v43 = theArray;
          if (theArray)
          {
            if (*a9
              || (v44 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                  *a9 = CFArrayCreateMutable(v44, 0, MEMORY[0x1E0C9B378]),
                  (v43 = theArray) != 0))
            {
              Count = CFArrayGetCount(v43);
              if (Count >= 1)
              {
                v46 = Count;
                v47 = 0;
                do
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v47);
                  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
                  MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, ValueAtIndex);
                  if (!MutableCopy)
                    goto LABEL_77;
                  v51 = MutableCopy;
                  CFArrayAppendValue(*a9, MutableCopy);
                  CFRelease(v51);
                }
                while (v46 != ++v47);
              }
            }
          }
        }
      }
      else if (a9)
      {
        goto LABEL_57;
      }
      if (a4)
        *a4 = FigXPCMessageGetInt32();
      goto LABEL_66;
    }
    if (!v55)
    {
      v25 = FigGetAllocatorForMedia();
      v21 = FigMediaPlaylistCreateEmpty(v25, &v55);
      if ((_DWORD)v21)
        goto LABEL_78;
    }
    if (a13 && *a13)
    {
      v26 = v55;
      HasIndependentSegments = FigMultivariantPlaylistHasIndependentSegments(*a13);
      FigMediaPlaylistSetHasIndependentSegments((uint64_t)v26, HasIndependentSegments);
      v28 = v55;
      StartTimeValue = FigMultivariantPlaylistGetStartTimeValue(*a13);
      FigMediaPlaylistSetStartTimeValue((uint64_t)v28, StartTimeValue);
      v30 = v55;
      IsStartTimePrecise = FigMultivariantPlaylistIsStartTimePrecise(*a13);
      FigMediaPlaylistSetIsStartTimePrecise((uint64_t)v30, IsStartTimePrecise);
      v32 = v55;
      HasStartTime = FigMultivariantPlaylistHasStartTime(*a13);
      FigMediaPlaylistSetHasStartTime((uint64_t)v32, HasStartTime);
      v34 = v55;
      Version = FigMultivariantPlaylistGetVersion(*a13);
      FigMediaPlaylistSetVersion((uint64_t)v34, Version);
    }
    v21 = FigStreamPlaylistParserDeserializeMediaPlaylist((uint64_t)v59, &v55);
    if ((_DWORD)v21)
      goto LABEL_78;
    if (!v19)
      goto LABEL_47;
    uint64 = xpc_dictionary_get_uint64(v59, (const char *)*MEMORY[0x1E0CA36A0]);
    if (uint64)
    {
      v37 = uint64;
      FigGetAllocatorForMedia();
      if (FigStreamPlaylistParserRemoteGetTypeID_once != -1)
        dispatch_once(&FigStreamPlaylistParserRemoteGetTypeID_once, &__block_literal_global_40);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v39 = (_QWORD *)Instance;
        started = FigXPCRemoteClientAssociateObject();
        if ((_DWORD)started || (v39[2] = v37, started = FigStartMonitoringMediaServicesProcessDeath(), (_DWORD)started))
        {
          OSStatus = started;
          CFRelease(v39);
          goto LABEL_66;
        }
        FigMediaPlaylistSetXPCClientObject((uint64_t)v55, v39);
        cf = v39;
      }
      else
      {
        v21 = FigSignalErrorAt();
        if ((_DWORD)v21)
          goto LABEL_78;
        FigMediaPlaylistSetXPCClientObject((uint64_t)v55, cf);
        if (!cf)
          goto LABEL_47;
      }
      CFRelease(cf);
LABEL_47:
      if (!FigStreamPlaylistParserHTTPServerMayMutatePlaylist((uint64_t)v55)
        || FigMediaPlaylistHasEndTag((uint64_t)v55))
      {
        FigMediaPlaylistSetXPCClientObject((uint64_t)v55, 0);
      }
      v41 = v55;
      int64 = xpc_dictionary_get_int64(v59, "ParserMessageReceiveTime");
      FigMediaPlaylistSetMessagingDelayTime((uint64_t)v41, int64 - UpTimeNanoseconds);
      goto LABEL_51;
    }
LABEL_77:
    v21 = FigSignalErrorAt();
LABEL_78:
    OSStatus = v21;
  }
LABEL_66:
  if (v57)
    CFRelease(v57);
  if (v55)
    CFRelease(v55);
  if (v56)
    CFRelease(v56);
  FigXPCRelease();
  FigXPCRelease();
  if (theArray)
    CFRelease(theArray);
  return OSStatus;
}

uint64_t __streamPlaylistParserRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = FigXPCRemoteClientCreate();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t streamPlaylistParserRemote_deadConnectionCallback(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t streamPlaylistParserRemote_finalize(uint64_t a1)
{
  FigStopMonitoringMediaServicesProcessDeath();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(a1 + 24) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  return FigXPCRelease();
}

CFStringRef streamPlaylistParserRemote_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigStreamPlaylistParserRemoteRef %p objectID %lld]"), a1, *(_QWORD *)(a1 + 16));
}

uint64_t FigXMLServiceStartServer()
{
  if (FigXMLServiceStartServer_sFigXMLServiceServerSetupOnce != -1)
    dispatch_once(&FigXMLServiceStartServer_sFigXMLServiceServerSetupOnce, &__block_literal_global_41);
  return FigXMLServiceStartServer_err;
}

uint64_t fxs_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t fxs_serializeXMLNode(uint64_t a1, void *a2, int a3)
{
  xpc_object_t v6;
  void *v7;
  uint64_t v8;
  xpc_object_t v9;
  CFIndex v10;
  const void *ChildAtIndex;
  xpc_object_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3)
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    v7 = v6;
    if (!v6)
    {
      v8 = FigSignalErrorAt();
LABEL_20:
      v15 = v8;
      goto LABEL_17;
    }
  }
  else
  {
    v7 = 0;
    v6 = a2;
  }
  FigXMLNodeGetTag(a1);
  v8 = FigXPCMessageSetCFString();
  if ((_DWORD)v8)
    goto LABEL_20;
  FigXMLNodeGetContentAsCFString(a1);
  v8 = FigXPCMessageSetCFString();
  if ((_DWORD)v8)
    goto LABEL_20;
  FigXMLNodeGetAllAttributes(a1);
  v8 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v8)
    goto LABEL_20;
  v9 = xpc_array_create(0, 0);
  if (v9)
  {
    if ((uint64_t)FigXMLNodeGetCountOfChildren(a1) < 1)
    {
LABEL_14:
      xpc_dictionary_set_value(v6, "children", v9);
      if (a3)
        xpc_dictionary_set_value(a2, "root", v7);
      v15 = 0;
      goto LABEL_17;
    }
    v10 = 0;
    while (1)
    {
      ChildAtIndex = FigXMLNodeGetChildAtIndex(a1, v10);
      v12 = xpc_dictionary_create(0, 0, 0);
      if (!v12)
        break;
      v13 = v12;
      v14 = fxs_serializeXMLNode(ChildAtIndex, v12, 0);
      if ((_DWORD)v14)
        goto LABEL_19;
      xpc_array_append_value(v9, v13);
      xpc_release(v13);
      if (++v10 >= (uint64_t)FigXMLNodeGetCountOfChildren(a1))
        goto LABEL_14;
    }
  }
  v14 = FigSignalErrorAt();
LABEL_19:
  v15 = v14;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

CFStringRef CopyKeyStringForTrackReferenceOSType(const __CFAllocator *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 > 1919837297)
  {
    if (a2 > 1936945762)
    {
      if (a2 == 1936945763)
        return (CFStringRef)CFRetain(CFSTR("ssrc"));
      if (a2 == 1953325924)
        return (CFStringRef)CFRetain(CFSTR("tmcd"));
    }
    else
    {
      if (a2 == 1919837298)
        return (CFStringRef)CFRetain(CFSTR("rndr"));
      if (a2 == 1935832172)
        return (CFStringRef)CFRetain(CFSTR("sbtl"));
    }
    return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2, v2, v3);
  }
  if (a2 > 1667785071)
  {
    if (a2 == 1667785072)
      return (CFStringRef)CFRetain(CFSTR("chap"));
    if (a2 == 1717660780)
      return (CFStringRef)CFRetain(CFSTR("fall"));
    return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2, v2, v3);
  }
  if (a2 == 1667523952)
    return (CFStringRef)CFRetain(CFSTR("cdep"));
  if (a2 != 1667527523)
    return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c%c"), HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2, v2, v3);
  return (CFStringRef)CFRetain(CFSTR("cdsc"));
}

uint64_t GetTrackReferenceOSTypeFromKeyString(const __CFString *cf2)
{
  uint64_t v2;
  CFIndex Bytes;
  unsigned int v4;
  UInt8 buffer[4];
  CFRange v7;

  if (CFEqual(CFSTR("chap"), cf2))
    return 1667785072;
  if (CFEqual(CFSTR("sbtl"), cf2))
    return 1935832172;
  if (CFEqual(CFSTR("tmcd"), cf2))
    return 1953325924;
  if (CFEqual(CFSTR("ssrc"), cf2))
    return 1936945763;
  if (CFEqual(CFSTR("fall"), cf2))
    return 1717660780;
  v2 = 1667523952;
  if (CFEqual(CFSTR("cdsc"), cf2))
    return 1667527523;
  if (CFEqual(CFSTR("rndr"), cf2))
    return 1919837298;
  if (!CFEqual(CFSTR("cdep"), cf2))
  {
    if (CFStringGetLength(cf2) == 4)
    {
      *(_DWORD *)buffer = 0;
      v7.location = 0;
      v7.length = 4;
      Bytes = CFStringGetBytes(cf2, v7, 0, 0, 0, buffer, 4, 0);
      v4 = bswap32(*(unsigned int *)buffer);
      if (Bytes)
        return v4;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t FigTTMLExtensionGetDesignation()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
}

uint64_t FigTTMLExtensionCreate(const __CFAllocator *a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  const char *v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t v15;

  v8 = FigTTMLGetLibXMLAccess();
  if (v8)
  {
    v9 = v8;
    if (a4)
    {
      FigTTMLNodeGetClassID();
      v10 = CMDerivedObjectCreate();
      if (!(_DWORD)v10)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v10 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a3);
        if (!(_DWORD)v10)
        {
          v10 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
          if (!(_DWORD)v10)
          {
            v12 = (const char *)(*(uint64_t (**)(uint64_t))(v9 + 104))(a2);
            v13 = CFStringCreateWithCString(a1, v12, 0x8000100u);
            if (!v13)
            {
              v15 = FigSignalErrorAt();
              goto LABEL_10;
            }
            v14 = v13;
            if (CFStringGetLength(v13))
            {
              v15 = FigTTMLSkipNode(a2, (uint64_t *)a3, *(__CFArray **)(DerivedStorage + 128));
              if (!(_DWORD)v15)
              {
                *(_QWORD *)(DerivedStorage + 144) = v14;
                *a4 = 0;
LABEL_10:
                (*(void (**)(const char *))(v9 + 112))(v12);
                return v15;
              }
            }
            else
            {
              v15 = FigSignalErrorAt();
            }
            CFRelease(v14);
            goto LABEL_10;
          }
        }
      }
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    v15 = v10;
    v12 = 0;
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

void figTTMLExtension_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLExtension_CopyDebugDesc()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFStringRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFCopyCompactDescription();
  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("extension[%@] : %@(%@)"), v1, *(_QWORD *)(DerivedStorage + 144), *(_QWORD *)(DerivedStorage + 136));
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t figTTMLExtension_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v3;

  if (!a2)
    return FigSignalErrorAt();
  v3 = CFGetAllocator(a1);
  *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  return 0;
}

uint64_t figTTMLExtension_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 19;
  return 0;
}

uint64_t FigRemakerRemoteCreateWithURLs(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const __CFURL *a16, uint64_t a17, const __CFDictionary *a18, _DWORD *a19, _DWORD *a20,_QWORD *a21)
{
  uint64_t v25;
  const __CFURL *Value;
  uint64_t v27;
  const void *v28;
  int int64;
  int v31;
  uint64_t uint64;
  const void *v33;
  CFTypeRef cf;
  const void *v35;
  const void *v36;
  xpc_object_t v37;
  xpc_object_t v38;
  const void *v39;

  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  cf = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (gRemakerRemoteClient)
  {
    if (!a2 || !FigCFURLIsLocalResource() || !a16 || !remakerFamily_CFURLSchemeIsFile(a16) || !a21)
      return FigSignalErrorAt();
    if (a19)
      *a19 = 0;
    if (a20)
      *a20 = 0;
    v25 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v25)
    {
      v25 = FigXPCMessageSetCFURL();
      if (!(_DWORD)v25)
      {
        v25 = FigXPCMessageSetCFString();
        if (!(_DWORD)v25)
        {
          v25 = FigXPCMessageSetCFDictionary();
          if (!(_DWORD)v25)
          {
            xpc_dictionary_set_int64(v38, "Width", a5);
            xpc_dictionary_set_int64(v38, "Height", a6);
            v25 = FigXPCMessageSetCFDictionary();
            if (!(_DWORD)v25)
            {
              xpc_dictionary_set_uint64(v38, "VideoCodecType", a8);
              v25 = FigXPCMessageSetCFDictionary();
              if (!(_DWORD)v25)
              {
                v25 = FigXPCMessageSetCFDictionary();
                if (!(_DWORD)v25)
                {
                  v25 = FigXPCMessageSetCFDictionary();
                  if (!(_DWORD)v25)
                  {
                    v25 = FigXPCMessageSetCFDictionary();
                    if (!(_DWORD)v25)
                    {
                      v25 = FigXPCMessageSetCMTime();
                      if (!(_DWORD)v25)
                      {
                        v25 = FigXPCMessageSetCMTimeRange();
                        if (!(_DWORD)v25)
                        {
                          v25 = FigXPCMessageSetCFURL();
                          if (!(_DWORD)v25)
                          {
                            v25 = FigXPCMessageSetCFDictionary();
                            if (!(_DWORD)v25)
                            {
                              v25 = FigXPCMessageSetCFDictionary();
                              if (!(_DWORD)v25)
                              {
                                v25 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 1, (uint64_t)v38, 0x1932C9595, &v36);
                                if (!(_DWORD)v25)
                                {
                                  v25 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a16, 0, (uint64_t)v38, 0x1932C95B5, &v35);
                                  if (!(_DWORD)v25)
                                  {
                                    if (!CFDictionaryContainsKey(a18, CFSTR("Remaker_TemporaryDirectoryURL"))
                                      || (Value = (const __CFURL *)CFDictionaryGetValue(a18, CFSTR("Remaker_TemporaryDirectoryURL")), v25 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(Value, 0, (uint64_t)v38, 0x1932C95D3, &cf), !(_DWORD)v25))
                                    {
                                      v25 = FigXPCRemoteClientSendSyncMessageCreatingReply();
                                      if (!(_DWORD)v25)
                                      {
                                        int64 = xpc_dictionary_get_int64(v37, "WriterAudioTrackIDOut");
                                        v31 = xpc_dictionary_get_int64(v37, "WriterVideoTrackIDOut");
                                        uint64 = xpc_dictionary_get_uint64(v37, (const char *)*MEMORY[0x1E0CA36A0]);
                                        if (uint64)
                                        {
                                          v33 = frr_CreateEmptyWrapper(1, uint64, &v39);
                                          v28 = v39;
                                          if ((_DWORD)v33)
                                          {
                                            v27 = (uint64_t)v33;
                                          }
                                          else
                                          {
                                            remoteRemakerFamily_storeSandboxRegistration((uint64_t)v39, v36);
                                            remoteRemakerFamily_storeSandboxRegistration((uint64_t)v28, v35);
                                            remoteRemakerFamily_storeSandboxRegistration((uint64_t)v28, cf);
                                            *a21 = v28;
                                            if (a19)
                                              *a19 = int64;
                                            v28 = 0;
                                            v27 = 0;
                                            if (a20)
                                              *a20 = v31;
                                          }
                                          goto LABEL_38;
                                        }
                                        v25 = FigSignalErrorAt();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v27 = v25;
    v28 = 0;
  }
  else
  {
    v28 = 0;
    v27 = 4294955196;
  }
LABEL_38:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v28)
    CFRelease(v28);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (cf)
    CFRelease(cf);
  return v27;
}

uint64_t frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(const __CFURL *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return 0;
  if (CFURLHasDirectoryPath(a1))
    v6 = FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration();
  else
    v6 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  v7 = v6;
  if (!(_DWORD)v6)
  {
    v7 = 0;
    *a5 = 0;
  }
  return v7;
}

const void *frr_CreateEmptyWrapper(int a1, uint64_t a2, _QWORD *a3)
{
  const void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectID;
  uint64_t v12;

  if (a1 == 2)
  {
    FigAssetReaderGetClassID();
  }
  else if (a1 == 1)
  {
    FigRemakerGetClassID();
  }
  else
  {
    FigAssetWriterGetClassID();
  }
  v6 = (const void *)CMDerivedObjectCreate();
  if (!(_DWORD)v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 4) = a1;
    *(_DWORD *)(DerivedStorage + 36) = 0;
    v8 = FigXPCRemoteClientAssociateObject();
    if ((_DWORD)v8)
    {
      return (const void *)v8;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 8) = a2;
      *(_QWORD *)(DerivedStorage + 128) = 0;
      if (sRemoteRemakerPixelBufferOrigin != -1)
        dispatch_once(&sRemoteRemakerPixelBufferOrigin, &__block_literal_global_42);
      v12 = 0;
      if (frr_shouldUseFigPixelBufferMemorySharing_onceToken != -1)
        dispatch_once(&frr_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_23_0);
      MEMORY[0x19402EEEC](qword_1ECDC8648);
      v9 = CMBaseObjectGetDerivedStorage();
      if (qword_1ECDC8650)
      {
        FigPixelBufferOriginServerCopyPixelBufferOriginForObjectID();
        qword_1ECDC8650 = 0;
      }
      ObjectID = remoteRemakerFamily_CreateXPCMessage(0, 2003136610, &v12);
      if ((_DWORD)ObjectID
        || (ObjectID = FigPixelBufferOriginBeginEstablishingPixelBufferRecipientByFillingInXPCMessage1(),
            (_DWORD)ObjectID)
        || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID)
        || (ObjectID = FigPixelBufferOriginCompleteEstablishingPixelBufferRecipientUsingXPCMessage2(), (_DWORD)ObjectID)
        || (ObjectID = FigPixelBufferOriginGetObjectID(), (_DWORD)ObjectID))
      {
        v6 = (const void *)ObjectID;
      }
      else
      {
        v6 = *(const void **)(v9 + 16);
        *(_QWORD *)(v9 + 16) = 0;
        if (v6)
        {
          CFRelease(v6);
          v6 = 0;
        }
      }
      MEMORY[0x19402EF04](qword_1ECDC8648);
      FigXPCRelease();
      FigXPCRelease();
      if (!(_DWORD)v6)
        *a3 = 0;
    }
  }
  return v6;
}

uint64_t FigRemakerRemoteCreateBaseWithURLs(uint64_t a1, const __CFURL *a2, uint64_t a3, const __CFURL *a4, uint64_t a5, uint64_t a6, const __CFDictionary *a7, _QWORD *a8)
{
  const void *v13;
  BOOL v14;
  char v15;
  uint64_t ObjectID;
  const __CFURL *v17;
  uint64_t uint64;
  uint64_t v19;
  const void *v20;
  uint64_t value;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef cf;
  xpc_object_t v26;
  xpc_object_t xdict;
  const void *v28;

  xdict = 0;
  v28 = 0;
  cf = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    v20 = 0;
    v19 = 4294955196;
    goto LABEL_31;
  }
  if (a7)
  {
    v13 = (const void *)*MEMORY[0x1E0C9AE50];
    v14 = v13 == CFDictionaryGetValue(a7, CFSTR("Remaker_PermitNonLocalSourceURLs"));
  }
  else
  {
    v14 = 0;
  }
  if (!((unint64_t)a2 | a3))
    return FigSignalErrorAt();
  if (a2)
  {
    v15 = FigCFURLIsLocalResource() || v14;
    if ((v15 & 1) == 0)
      return FigSignalErrorAt();
  }
  if (!a4 || !remakerFamily_CFURLSchemeIsFile(a4) || !a8)
    return FigSignalErrorAt();
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  if (a3)
  {
    value = 0;
    ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &value);
    if ((_DWORD)ObjectID)
    {
LABEL_44:
      v19 = ObjectID;
      goto LABEL_30;
    }
    xpc_dictionary_set_uint64(xdict, "SourceFormatReaderToken", value);
  }
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  ObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  ObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 1, (uint64_t)xdict, 0x1932C9595, &cf);
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a4, 0, (uint64_t)xdict, 0x1932C95B5, &v24);
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  v17 = (const __CFURL *)FigCFDictionaryGetValue();
  if (v17)
  {
    ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(v17, 0, (uint64_t)xdict, 0x1932C95D3, &v23);
    if ((_DWORD)ObjectID)
      goto LABEL_44;
  }
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_44;
  uint64 = xpc_dictionary_get_uint64(v26, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_44;
  }
  v19 = (uint64_t)frr_CreateEmptyWrapper(1, uint64, &v28);
  v20 = v28;
  if (!(_DWORD)v19)
  {
    remoteRemakerFamily_storeSandboxRegistration((uint64_t)v28, cf);
    remoteRemakerFamily_storeSandboxRegistration((uint64_t)v20, v24);
    remoteRemakerFamily_storeSandboxRegistration((uint64_t)v20, v23);
    *a8 = v20;
LABEL_30:
    v20 = 0;
  }
LABEL_31:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v20)
    CFRelease(v20);
  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  if (v23)
    CFRelease(v23);
  return v19;
}

uint64_t FigRemakerRemoteCreateWithAsset(uint64_t a1, uint64_t a2, const __CFURL *a3, uint64_t a4, const __CFDictionary *a5, _QWORD *a6)
{
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t ObjectID;
  const __CFURL *v13;
  uint64_t v14;
  uint64_t uint64;
  const void *v16;
  CFTypeRef v18;
  CFTypeRef v19;
  xpc_object_t v20;
  xpc_object_t xdict;
  unsigned __int8 v22;
  uint64_t value;
  CFTypeRef cf;
  const void *v25;

  cf = 0;
  v25 = 0;
  value = 0;
  v22 = 0;
  v20 = 0;
  xdict = 0;
  v18 = 0;
  v19 = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (gRemakerRemoteClient)
  {
    FigCFDictionaryGetBooleanIfPresent();
    if (a2)
    {
      CMBaseObject = FigAssetGetCMBaseObject(a2);
      v11 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (!v11)
      {
        v16 = 0;
        v14 = 4294954514;
        goto LABEL_25;
      }
      ObjectID = v11(CMBaseObject, CFSTR("assetProperty_CreationURL"), *MEMORY[0x1E0C9AE00], &cf);
      if ((_DWORD)ObjectID)
        goto LABEL_18;
      if ((!cf || FigCFURLIsLocalResource() | v22) && a3 && remakerFamily_CFURLSchemeIsFile(a3) && a6)
      {
        ObjectID = FigXPCCreateBasicMessage();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value);
          if (!(_DWORD)ObjectID)
          {
            xpc_dictionary_set_uint64(xdict, "AssetToken", value);
            ObjectID = FigXPCMessageSetCFURL();
            if (!(_DWORD)ObjectID)
            {
              ObjectID = FigXPCMessageSetCFDictionary();
              if (!(_DWORD)ObjectID)
              {
                ObjectID = FigXPCMessageSetCFDictionary();
                if (!(_DWORD)ObjectID)
                {
                  FigSandboxRegisterURLWithProcessAndCopyRegistration();
                  ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a3, 0, (uint64_t)xdict, 0x1932C95B5, &v19);
                  if (!(_DWORD)ObjectID)
                  {
                    if (!CFDictionaryContainsKey(a5, CFSTR("Remaker_TemporaryDirectoryURL"))
                      || (v13 = (const __CFURL *)CFDictionaryGetValue(a5, CFSTR("Remaker_TemporaryDirectoryURL")),
                          ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(v13, 0, (uint64_t)xdict, 0x1932C95D3, &v18), !(_DWORD)ObjectID))
                    {
                      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
                      if (!(_DWORD)ObjectID)
                      {
                        uint64 = xpc_dictionary_get_uint64(v20, (const char *)*MEMORY[0x1E0CA36A0]);
                        if (uint64)
                        {
                          v14 = (uint64_t)frr_CreateEmptyWrapper(1, uint64, &v25);
                          v16 = v25;
                          if ((_DWORD)v14)
                            goto LABEL_25;
                          remoteRemakerFamily_storeSandboxRegistration((uint64_t)v25, 0);
                          remoteRemakerFamily_storeSandboxRegistration((uint64_t)v16, v19);
                          remoteRemakerFamily_storeSandboxRegistration((uint64_t)v16, v18);
                          *a6 = v16;
                          goto LABEL_23;
                        }
                        ObjectID = FigSignalErrorAt();
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_18:
        v14 = ObjectID;
LABEL_23:
        v16 = 0;
        goto LABEL_25;
      }
    }
    FigSignalErrorAt();
    v16 = 0;
    v14 = 0;
  }
  else
  {
    v16 = 0;
    v14 = 4294955196;
  }
LABEL_25:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  return v14;
}

uint64_t FigAssetReaderRemoteCreateWithURLAndFormatReader(const __CFAllocator *a1, const __CFURL *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, _QWORD *a6)
{
  const void *v11;
  BOOL v12;
  char v13;
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  uint64_t v18;
  const void *v19;
  CFTypeRef cf;
  xpc_object_t xdict;
  xpc_object_t v23;
  uint64_t v24;
  const void *v25;

  v24 = 0;
  v25 = 0;
  xdict = 0;
  v23 = 0;
  cf = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    v19 = 0;
    Mutable = 0;
    v18 = 4294955196;
    goto LABEL_25;
  }
  if (a5)
  {
    v11 = (const void *)*MEMORY[0x1E0C9AE50];
    v12 = v11 == CFDictionaryGetValue(a5, CFSTR("AssetReader_PermitNonLocalSourceURLs"));
  }
  else
  {
    v12 = 0;
  }
  if (!((unint64_t)a2 | a3))
    return FigSignalErrorAt();
  if (a2)
  {
    v13 = FigCFURLIsLocalResource() || v12;
    if ((v13 & 1) == 0)
      return FigSignalErrorAt();
  }
  if (!a6)
    return FigSignalErrorAt();
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_36;
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID)
    goto LABEL_36;
  if (a3)
  {
    ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &v24);
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_uint64(v23, "SourceFormatReaderToken", v24);
      goto LABEL_17;
    }
LABEL_36:
    v18 = ObjectID;
    v19 = 0;
    Mutable = 0;
    goto LABEL_25;
  }
LABEL_17:
  ObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ObjectID)
    goto LABEL_36;
  ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 1, (uint64_t)v23, 0x1932C9595, &cf);
  if ((_DWORD)ObjectID)
    goto LABEL_36;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_36;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_36;
  }
  v16 = uint64;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_24;
  }
  v18 = (uint64_t)frr_CreateEmptyWrapper(2, v16, &v25);
  v19 = v25;
  if (!(_DWORD)v18)
  {
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88) = Mutable;
    remoteRemakerFamily_storeSandboxRegistration((uint64_t)v19, cf);
    Mutable = 0;
    *a6 = v19;
LABEL_24:
    v19 = 0;
  }
LABEL_25:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v18;
}

uint64_t FigAssetReaderRemoteCreateWithAsset(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t uint64;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  uint64_t v13;
  const void *v14;
  uint64_t value;
  CFTypeRef cf;
  const void *v18;

  cf = 0;
  v18 = 0;
  value = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    v14 = 0;
    Mutable = 0;
    v13 = 4294955196;
    goto LABEL_18;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (!a2)
    goto LABEL_25;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_26;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v9)
  {
    v14 = 0;
    Mutable = 0;
    v13 = 4294954514;
    goto LABEL_18;
  }
  ObjectID = v9(CMBaseObject, CFSTR("assetProperty_CreationURL"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)ObjectID)
    goto LABEL_26;
  if (cf && !FigCFURLIsLocalResource())
  {
    FigSignalErrorAt();
    v14 = 0;
    v13 = 0;
    goto LABEL_27;
  }
  if (!a4)
    goto LABEL_25;
  ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_26;
  xpc_dictionary_set_uint64(0, "AssetToken", value);
  ObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ObjectID)
    goto LABEL_26;
  FigSandboxRegisterURLWithProcessAndCopyRegistration();
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_26;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_25:
    ObjectID = FigSignalErrorAt();
LABEL_26:
    v13 = ObjectID;
    v14 = 0;
LABEL_27:
    Mutable = 0;
    goto LABEL_18;
  }
  v11 = uint64;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v13 = (uint64_t)frr_CreateEmptyWrapper(2, v11, &v18);
    v14 = v18;
    if ((_DWORD)v13)
      goto LABEL_18;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88) = Mutable;
    remoteRemakerFamily_storeSandboxRegistration((uint64_t)v14, 0);
    Mutable = 0;
    *a4 = v14;
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  v14 = 0;
LABEL_18:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v14)
    CFRelease(v14);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v13;
}

uint64_t FigAssetWriterRemoteCreateWithURL(uint64_t a1, const __CFURL *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  const __CFURL *Value;
  uint64_t v11;
  uint64_t uint64;
  CFTypeRef v13;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v17;
  CFTypeRef v18;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFTypeRef v21;

  cf = 0;
  v21 = 0;
  v18 = 0;
  xdict = 0;
  v17 = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    v11 = 4294955196;
    goto LABEL_17;
  }
  if (!a2 || !remakerFamily_CFURLSchemeIsFile(a2) || !a6)
    return FigSignalErrorAt();
  v9 = FigXPCCreateBasicMessage();
  if ((_DWORD)v9)
    goto LABEL_31;
  v9 = FigXPCMessageSetCFURL();
  if ((_DWORD)v9)
    goto LABEL_31;
  v9 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v9)
    goto LABEL_31;
  v9 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v9)
    goto LABEL_31;
  v9 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 0, (uint64_t)cf, 0x1932C95B5, &v18);
  if ((_DWORD)v9)
    goto LABEL_31;
  if (CFDictionaryContainsKey(a4, CFSTR("Remaker_TemporaryDirectoryURL")))
  {
    Value = (const __CFURL *)CFDictionaryGetValue(a4, CFSTR("Remaker_TemporaryDirectoryURL"));
    v11 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(Value, 0, (uint64_t)cf, 0x1932C95D3, &v17);
    if ((_DWORD)v11)
      goto LABEL_17;
  }
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v9)
    goto LABEL_31;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_30:
    v9 = FigSignalErrorAt();
    goto LABEL_31;
  }
  v9 = (uint64_t)frr_CreateEmptyWrapper(3, uint64, &v21);
  if ((_DWORD)v9)
  {
LABEL_31:
    v11 = v9;
    goto LABEL_17;
  }
  v13 = v21;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 80) = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 88) = Mutable;
  if (!Mutable)
    goto LABEL_30;
  remoteRemakerFamily_storeSandboxRegistration((uint64_t)v13, v18);
  remoteRemakerFamily_storeSandboxRegistration((uint64_t)v13, v17);
  v11 = 0;
  *a6 = v13;
  v21 = 0;
LABEL_17:
  FigXPCRemoteClientKillServerOnTimeout();
  if (cf)
    CFRelease(cf);
  if (xdict)
    CFRelease(xdict);
  if (v21)
    CFRelease(v21);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  return v11;
}

uint64_t FigAssetWriterRemoteCreateForWritingFragmentedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t a6, _QWORD *a7)
{
  const __CFAllocator *v12;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v14;
  uint64_t v15;
  uint64_t uint64;
  CFTypeRef v17;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  uint64_t v20;
  CFTypeRef v22;

  v22 = 0;
  MEMORY[0x19402F294](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    v20 = 4294955196;
LABEL_19:
    FigXPCRemoteClientKillServerOnTimeout();
    goto LABEL_13;
  }
  if (!a7)
    return FigSignalErrorAt();
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a5);
  if (!MutableCopy)
  {
    v20 = FigSignalErrorAt();
    goto LABEL_19;
  }
  v14 = MutableCopy;
  FigCFDictionarySetValue();
  v15 = FigXPCCreateBasicMessage();
  if ((_DWORD)v15)
    goto LABEL_21;
  v15 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v15)
    goto LABEL_21;
  v15 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v15)
    goto LABEL_21;
  v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v15)
    goto LABEL_21;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
    goto LABEL_20;
  v15 = (uint64_t)frr_CreateEmptyWrapper(3, uint64, &v22);
  if ((_DWORD)v15)
  {
LABEL_21:
    v20 = v15;
    goto LABEL_12;
  }
  v17 = v22;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 120) = 1;
  *(_QWORD *)(DerivedStorage + 96) = a2;
  *(_QWORD *)(DerivedStorage + 104) = a3;
  *(_QWORD *)(DerivedStorage + 112) = a4;
  *(_DWORD *)(DerivedStorage + 80) = 0;
  Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 88) = Mutable;
  if (!Mutable)
  {
LABEL_20:
    v15 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v20 = 0;
  *a7 = v17;
  v22 = 0;
LABEL_12:
  FigXPCRemoteClientKillServerOnTimeout();
  CFRelease(v14);
LABEL_13:
  if (v22)
    CFRelease(v22);
  return v20;
}

void frr_OneTimeInitializationWork()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t frr_HandleDeadServerConnection()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t frr_HandleServerMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t remoteRemakerFamily_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    if (*(_BYTE *)(DerivedStorage + 32))
    {
      v2 = *(const __CFArray **)(DerivedStorage + 64);
      if (v2)
      {
        FigRemote_RemoveSlotIDsFromVideoLayers(v2);
        v3 = *(const void **)(v1 + 64);
        if (v3)
        {
          CFRelease(v3);
          *(_QWORD *)(v1 + 64) = 0;
        }
      }
      FigRemote_RemoveReleaseAndClearRemoteCAContext((id *)(v1 + 48), *(void **)(v1 + 40));
      v4 = *(const void **)(v1 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(v1 + 40) = 0;
      }
      FigRemote_DestroyCARenderServerPort(*(_DWORD *)(v1 + 36));
      *(_DWORD *)(v1 + 36) = 0;
    }
    FigXPCRemoteClientDisassociateObject();
    if (!*(_BYTE *)(v1 + 24))
    {
      FigXPCCreateBasicMessage();
      FigXPCRemoteClientSendSyncMessage();
      FigXPCRelease();
    }
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return 0;
}

void remoteRemakerFamily_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  remoteRemakerFamily_Invalidate();
  v1 = (const void *)DerivedStorage[9];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[9] = 0;
  }
  v2 = (const void *)DerivedStorage[11];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[11] = 0;
  }
  v3 = (const void *)DerivedStorage[16];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[16] = 0;
  }
  v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
}

__CFString *remoteRemaker_CopyDebugDesc(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRemakerRemote %p retainCount: %ld%s allocator: %p>"), a1, v5, v6, v7);
  return Mutable;
}

uint64_t remoteRemakerFamily_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t MetadataFromBinaryPListData;
  CFTypeRef v10;
  uint64_t v11;
  CFTypeRef cf;
  CFTypeRef v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a2 || !a4)
    return FigSignalErrorAt();
  ObjectID = remoteRemakerFamily_GetObjectID(a1, &v15);
  if ((_DWORD)ObjectID)
  {
    v11 = ObjectID;
    goto LABEL_14;
  }
  v8 = FigXPCSendStdCopyPropertyMessage();
  if ((_DWORD)v8)
  {
    v11 = v8;
    v10 = v14;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_Metadata")) || CFEqual(a2, CFSTR("Remaker_Metadata")))
  {
    MetadataFromBinaryPListData = FigRemote_CreateMetadataFromBinaryPListData(v14, *MEMORY[0x1E0C9AE00], (__CFArray **)&cf);
    v10 = v14;
    if (!(_DWORD)MetadataFromBinaryPListData)
    {
      v14 = cf;
      if (cf)
        CFRetain(cf);
      if (v10)
        CFRelease(v10);
      goto LABEL_13;
    }
    v11 = MetadataFromBinaryPListData;
LABEL_21:
    if (v10)
      CFRelease(v10);
    goto LABEL_14;
  }
LABEL_13:
  v11 = 0;
  *a4 = v14;
  v14 = 0;
LABEL_14:
  if (cf)
    CFRelease(cf);
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteRemakerFamily_SetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t ObjectID;
  uint64_t MetadataBinaryPListData;
  CFTypeRef v9;
  uint64_t v10;
  CFTypeRef cf;
  uint64_t v12;

  cf = 0;
  v12 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a2)
    return FigSignalErrorAt();
  ObjectID = remoteRemakerFamily_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID)
  {
    v10 = ObjectID;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("AssetWriter_Metadata")) || CFEqual(a2, CFSTR("Remaker_Metadata")))
  {
    MetadataBinaryPListData = FigRemote_CreateMetadataBinaryPListData(a3, *MEMORY[0x1E0C9AE00], (uint64_t)&cf);
    v9 = cf;
    if ((_DWORD)MetadataBinaryPListData)
    {
      v10 = MetadataBinaryPListData;
      if (!cf)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  v10 = FigXPCSendStdSetPropertyMessage();
  v9 = cf;
  if (cf)
LABEL_9:
    CFRelease(v9);
LABEL_10:
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteRemakerFamily_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 24))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t remoteRemaker_AddAudioTrack(uint64_t a1, int a2, const void *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v15;
  xpc_object_t v16;
  int int64;
  uint64_t v18;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212596, &xdict);
  v16 = xdict;
  if (!(_DWORD)v15)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    xpc_dictionary_set_data(v16, "AudioDestASBD", a3, 0x28uLL);
    if (a4 && a5)
      xpc_dictionary_set_data(v16, "AudioDestChannelLayout", a5, a4);
    v15 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v15)
    {
      v15 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v15)
      {
        v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v15)
        {
          int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            v18 = 0;
            if (a8)
              *a8 = int64;
            goto LABEL_14;
          }
          v15 = FigSignalErrorAt();
        }
      }
    }
  }
  v18 = v15;
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v18;
}

uint64_t remoteRemaker_AddVideoTrack(uint64_t a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  uint64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  int int64;
  uint64_t v22;
  xpc_object_t v23;

  v23 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v18 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212598, &v23);
  v19 = v23;
  if ((_DWORD)v18
    || (xpc_dictionary_set_int64(v23, "TrackID", a2),
        xpc_dictionary_set_int64(v19, "Width", a3),
        xpc_dictionary_set_int64(v19, "Height", a4),
        v18 = FigXPCMessageSetCFDictionary(),
        (_DWORD)v18))
  {
    v22 = v18;
  }
  else
  {
    xpc_dictionary_set_uint64(v19, "VideoCodecType", a6);
    v20 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v20)
    {
      v20 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v20)
      {
        v20 = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)v20)
        {
          v20 = FigXPCMessageSetCFDictionary();
          if (!(_DWORD)v20)
          {
            v20 = FigXPCMessageSetCMTime();
            if (!(_DWORD)v20)
            {
              v20 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)v20)
              {
                int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                if (int64)
                {
                  v22 = 0;
                  if (a12)
                    *a12 = int64;
                  goto LABEL_14;
                }
                v20 = FigSignalErrorAt();
              }
            }
          }
        }
      }
    }
    v22 = v20;
  }
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v22;
}

uint64_t remoteRemaker_AddPassthroughTrack(uint64_t a1, int a2, _DWORD *a3)
{
  return remoteRemaker_AddPassthroughTrackWithOptions(a1, a2, 0, a3);
}

uint64_t remoteRemakerFamily_SetFormatWriterProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a2)
    return FigSignalErrorAt();
  v5 = remoteRemakerFamily_CreateXPCMessage(a1, 1717991280, &v7);
  if (!(_DWORD)v5)
  {
    v5 = FigXPCMessageSetCFString();
    if (!(_DWORD)v5)
    {
      v5 = FigXPCMessageSetCFObject();
      if (!(_DWORD)v5)
        v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  v6 = v5;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteRemakerFamily_SetFormatWriterTrackProperty(uint64_t a1, int a2, const void *a3)
{
  uint64_t PListFromFormatDescriptionCollection;
  uint64_t v8;
  xpc_object_t xdict;
  CFTypeRef cf;

  cf = 0;
  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  PListFromFormatDescriptionCollection = remoteRemakerFamily_CreateXPCMessage(a1, 1717990512, &xdict);
  if (!(_DWORD)PListFromFormatDescriptionCollection)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    PListFromFormatDescriptionCollection = FigXPCMessageSetCFString();
    if (!(_DWORD)PListFromFormatDescriptionCollection)
    {
      if (!CFEqual(a3, CFSTR("FormatDescriptionArray")) && !CFEqual(a3, CFSTR("ReplacementFormatDescriptionArray"))
        || (PListFromFormatDescriptionCollection = FigRemote_CreatePListFromFormatDescriptionCollection(),
            !(_DWORD)PListFromFormatDescriptionCollection))
      {
        PListFromFormatDescriptionCollection = FigXPCMessageSetCFObject();
        if (!(_DWORD)PListFromFormatDescriptionCollection)
          PListFromFormatDescriptionCollection = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  v8 = PListFromFormatDescriptionCollection;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t remoteRemaker_SetTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v8;
  CMTimeRange v9;
  CMTime time2;
  CMTime time1;
  uint64_t v12;

  v12 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || (a2->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  if ((a3->flags & 0x1D) == 1)
  {
    time1 = *a2;
    time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      return FigSignalErrorAt();
  }
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1836282994, &v12);
  if (!(_DWORD)v8)
  {
    time1 = *a2;
    time2 = *a3;
    CMTimeRangeFromTimeToTime(&v9, &time1, &time2);
    v8 = FigXPCMessageSetCMTimeRange();
    if (!(_DWORD)v8)
      v8 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v8;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteRemaker_StartOutput(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v3 = remoteRemakerFamily_CreateXPCMessage(a1, 1836217199, &v5);
  if (!(_DWORD)v3)
    v3 = FigXPCRemoteClientSendSyncMessage();
  v4 = v3;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v4;
}

uint64_t remoteRemaker_EstimateMaxSegmentDurationForFileSize(uint64_t a1, int64_t a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  uint64_t v8;
  uint64_t CMTime;
  uint64_t v10;
  xpc_object_t xdict;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v12 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  xdict = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1835363699, &xdict);
  if ((_DWORD)v8
    || (xpc_dictionary_set_int64(xdict, "TargetFileSize", a2),
        v8 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
        (_DWORD)v8))
  {
    v10 = v8;
  }
  else
  {
    CMTime = FigXPCMessageGetCMTime();
    v10 = CMTime;
    if (a3)
    {
      if (!(_DWORD)CMTime)
      {
        *(_OWORD *)a3 = v12;
        *(_QWORD *)(a3 + 16) = v13;
      }
    }
  }
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t remoteRemaker_GetDefaultSourceAudioTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x61756469u, a2);
}

uint64_t remoteRemaker_GetDefaultSourceVideoTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x76696465u, a2);
}

uint64_t remoteRemaker_AddAudioTrackWithPreset(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  int int64;
  uint64_t v11;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v9 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212592, &xdict);
  if (!(_DWORD)v9)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v9 = FigXPCMessageSetCFString();
    if (!(_DWORD)v9)
    {
      v9 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v9)
      {
        v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v9)
        {
          int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            v11 = 0;
            if (a5)
              *a5 = int64;
            goto LABEL_10;
          }
          v9 = FigSignalErrorAt();
        }
      }
    }
  }
  v11 = v9;
LABEL_10:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v11;
}

uint64_t remoteRemaker_AddAudioMixdownTrack(uint64_t a1, const __CFArray *a2, const void *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  int int64;
  uint64_t v20;
  void *v21;
  const void *v22;

  v21 = 0;
  v22 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212589, &v21);
  if ((_DWORD)v15)
  {
    v20 = v15;
    v17 = 0;
  }
  else
  {
    v16 = frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(a2, CFSTR("RemakerAudioMixdown_AudioProcessingTap"), &v22);
    v18 = v21;
    v17 = v22;
    if (!(_DWORD)v16)
    {
      v16 = FigXPCMessageSetCFArray();
      if (!(_DWORD)v16)
      {
        xpc_dictionary_set_data(v18, "AudioDestASBD", a3, 0x28uLL);
        if (a4 && a5)
          xpc_dictionary_set_data(v18, "AudioDestChannelLayout", a5, a4);
        v16 = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)v16)
        {
          v16 = FigXPCMessageSetCFDictionary();
          if (!(_DWORD)v16)
          {
            v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!(_DWORD)v16)
            {
              int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
              if (int64)
              {
                v20 = 0;
                if (a8)
                  *a8 = int64;
                goto LABEL_16;
              }
              v16 = FigSignalErrorAt();
            }
          }
        }
      }
    }
    v20 = v16;
  }
LABEL_16:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v17)
    CFRelease(v17);
  return v20;
}

uint64_t remoteRemaker_AddAudioMixdownTrackWithPreset(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  int int64;
  uint64_t v13;
  uint64_t v14;
  const void *v15;

  v14 = 0;
  v15 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v9 = remoteRemakerFamily_CreateXPCMessage(a1, 1836215664, &v14);
  if ((_DWORD)v9)
  {
    v13 = v9;
    v11 = 0;
  }
  else
  {
    v10 = frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(a2, CFSTR("RemakerAudioMixdown_AudioProcessingTap"), &v15);
    v11 = v15;
    if (!(_DWORD)v10)
    {
      v10 = FigXPCMessageSetCFArray();
      if (!(_DWORD)v10)
      {
        v10 = FigXPCMessageSetCFString();
        if (!(_DWORD)v10)
        {
          v10 = FigXPCMessageSetCFDictionary();
          if (!(_DWORD)v10)
          {
            v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!(_DWORD)v10)
            {
              int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
              if (int64)
              {
                v13 = 0;
                if (a5)
                  *a5 = int64;
                goto LABEL_12;
              }
              v10 = FigSignalErrorAt();
            }
          }
        }
      }
    }
    v13 = v10;
  }
LABEL_12:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v11)
    CFRelease(v11);
  return v13;
}

uint64_t remoteRemaker_AddVideoCompositionTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8, int a9, const __CFArray *a10, const __CFArray *a11, uint64_t a12, __int128 *a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, unsigned int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25)
{
  uint64_t v26;
  uint64_t v27;
  __int128 v36;
  uint64_t v37;
  void *v38;

  v38 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || (*((_DWORD *)a13 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  v26 = remoteRemakerFamily_CreateXPCMessage(a1, 1835103843, &v38);
  if (!(_DWORD)v26)
  {
    v36 = *a13;
    v37 = *((_QWORD *)a13 + 2);
    v26 = remoteRemakerFamily_AddVideoCompositionTrackCommon(a1, v38, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)&v36, a14, a15, a16, a17, a18,
            a19,
            a20,
            a21,
            a22,
            a23,
            a24,
            a25);
  }
  v27 = v26;
  FigXPCRelease();
  return v27;
}

uint64_t remoteRemaker_AddPassthroughTrackWithOptions(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int int64;
  uint64_t v10;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1836086383, &xdict);
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v8 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v8)
    {
      v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v8)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v10 = 0;
          if (a4)
            *a4 = int64;
          goto LABEL_9;
        }
        v8 = FigSignalErrorAt();
      }
    }
  }
  v10 = v8;
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t remoteRemaker_CanPerformFastFrameRateConversion(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v5 = remoteRemakerFamily_CreateXPCMessage(a1, 1835427427, &xdict);
  if (!(_DWORD)v5)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v5 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v5)
      v5 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v5;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteRemaker_AddTemporalMetadataTrackWithOptions(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int int64;
  uint64_t v10;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1836346740, &xdict);
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v8 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v8)
    {
      v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v8)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v10 = 0;
          if (a4)
            *a4 = int64;
          goto LABEL_9;
        }
        v8 = FigSignalErrorAt();
      }
    }
  }
  v10 = v8;
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t remoteRemakerFamily_CreateXPCMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  ObjectID = remoteRemakerFamily_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
    v5 = ObjectID;
  }
  else
  {
    v5 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v5)
      *a3 = 0;
  }
  FigXPCRelease();
  return v5;
}

uint64_t frr_GetDefaultSourceTrack(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v7;
  uint64_t v8;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  v7 = remoteRemakerFamily_CreateXPCMessage(a1, 1717859188, &xdict);
  if ((_DWORD)v7)
  {
    v8 = v7;
  }
  else
  {
    xpc_dictionary_set_int64(xdict, "MediaType", a2);
    v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v8)
      *a3 = xpc_dictionary_get_int64(0, "TrackIDOut");
  }
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(const __CFArray *a1, const void *a2, _QWORD *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  BOOL v9;
  const __CFDictionary *ValueAtIndex;
  uint64_t v11;
  const __CFAllocator *v12;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v14;
  CFIndex v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const void *Value;
  uint64_t ServerObjectToken;
  __CFDictionary *v22;
  uint64_t valuePtr;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
LABEL_27:
      v11 = 0;
      *a3 = CFRetain(a1);
    }
    else
    {
      v7 = Count;
      v8 = 0;
      v9 = 1;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex)
          return FigSignalErrorAt();
        if (CFDictionaryContainsKey(ValueAtIndex, a2))
          break;
        v9 = ++v8 < v7;
        if (v7 == v8)
          goto LABEL_27;
      }
      if (!v9)
        goto LABEL_27;
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
      if (!MutableCopy)
        return FigSignalErrorAt();
      v14 = MutableCopy;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        valuePtr = 0;
        v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v15);
        if (!v18)
          break;
        v19 = v18;
        Value = CFDictionaryGetValue(v18, a2);
        if (Value)
        {
          ServerObjectToken = MTAudioProcessingTapRemoteGetServerObjectToken((uint64_t)Value, &valuePtr);
          if ((_DWORD)ServerObjectToken)
            goto LABEL_31;
          if (v16)
            CFRelease(v16);
          v16 = CFNumberCreate(v12, kCFNumberSInt64Type, &valuePtr);
          if (!v16)
            break;
          if (v17)
            CFRelease(v17);
          v22 = CFDictionaryCreateMutableCopy(v12, 0, v19);
          v17 = v22;
          if (!v22)
            break;
          CFDictionaryReplaceValue(v22, a2, v16);
          CFArraySetValueAtIndex(v14, v15, v17);
        }
        if (v7 == ++v15)
        {
          v11 = 0;
          *a3 = v14;
          if (!v16)
            goto LABEL_25;
          goto LABEL_24;
        }
      }
      ServerObjectToken = FigSignalErrorAt();
LABEL_31:
      v11 = ServerObjectToken;
      CFRelease(v14);
      if (v16)
LABEL_24:
        CFRelease(v16);
LABEL_25:
      if (v17)
        CFRelease(v17);
    }
  }
  else
  {
    v11 = 0;
    *a3 = 0;
  }
  return v11;
}

uint64_t remoteRemakerFamily_AddVideoCompositionTrackCommon(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8, const void *a9, int a10, const __CFArray *a11, const __CFArray *a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, int a18, int a19, uint64_t a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_DWORD *a26)
{
  _BYTE *DerivedStorage;
  _BYTE *v28;
  CFIndex Count;
  uint64_t v31;
  CFTypeID v32;
  CFTypeID v33;
  uint64_t ObjectID;
  __CFArray *Mutable;
  uint64_t RemoteCAContextAndAttachLayer;
  void *v37;
  int64_t v38;
  uint64_t v39;
  int v40;
  CFTypeRef v41;
  _BYTE *v42;
  uint64_t v43;
  CFTypeRef v44;
  _BYTE *v45;
  const __CFArray *v46;
  int int64;
  uint64_t v48;
  void *v51;
  const __CFArray *v52;
  uint64_t v53[2];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v52 = 0;
  v53[0] = 0;
  v51 = 0;
  if (*DerivedStorage || (*(_DWORD *)(a14 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  if (!a9)
  {
    if (!a10 && !a11)
    {
      v28 = DerivedStorage;
      if (!a12)
        goto LABEL_18;
    }
    return FigSignalErrorAt();
  }
  if (DerivedStorage[32])
    return FigSignalErrorAt();
  if (a10)
  {
    if (!a11)
    {
      v28 = DerivedStorage;
      if (!a12)
        goto LABEL_18;
    }
    return FigSignalErrorAt();
  }
  if (!a11)
    return FigSignalErrorAt();
  v28 = DerivedStorage;
  Count = CFArrayGetCount(a11);
  if (a12)
  {
    if (Count != CFArrayGetCount(a12))
      return FigSignalErrorAt();
  }
  else if (Count <= 0)
  {
    return FigSignalErrorAt();
  }
LABEL_18:
  v31 = FigXPCMessageSetCFArray();
  if ((_DWORD)v31
    || (v31 = FigXPCMessageSetCFArray(), (_DWORD)v31)
    || (v31 = FigXPCMessageSetCFArray(), (_DWORD)v31)
    || (v31 = FigXPCMessageSetCFArray(), (_DWORD)v31))
  {
LABEL_61:
    v39 = v31;
    goto LABEL_58;
  }
  if (!a7)
    goto LABEL_40;
  v32 = CFGetTypeID(a7);
  if (v32 == CFStringGetTypeID())
  {
LABEL_29:
    FigXPCMessageSetCFString();
    xpc_dictionary_set_uint64(a2, "VideoCompositorObjectID", v53[0]);
    v31 = FigXPCMessageSetCFArray();
    if (!(_DWORD)v31)
    {
      v31 = FigXPCMessageSetCMTime();
      if (!(_DWORD)v31)
      {
        xpc_dictionary_set_int64(a2, "SourceTrackIDForFrameTiming", a15);
        xpc_dictionary_set_int64(a2, "RenderWidth", a16);
        xpc_dictionary_set_int64(a2, "RenderHeight", a17);
        xpc_dictionary_set_int64(a2, "Width", a18);
        xpc_dictionary_set_int64(a2, "Height", a19);
        v31 = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)v31)
        {
          xpc_dictionary_set_uint64(a2, "VideoCodecType", a21);
          v31 = FigXPCMessageSetCFDictionary();
          if (!(_DWORD)v31)
          {
            v31 = FigXPCMessageSetCFDictionary();
            if (!(_DWORD)v31)
            {
              v31 = FigXPCMessageSetCFDictionary();
              if (!(_DWORD)v31)
              {
                v31 = FigXPCMessageSetCFDictionary();
                if (!(_DWORD)v31)
                {
                  if (a9)
                  {
                    RemoteCAContextAndAttachLayer = remoteRemakerFamily_CreateXPCMessage(a1, 1836081507, &v51);
                    v37 = v51;
                    if ((_DWORD)RemoteCAContextAndAttachLayer)
                      goto LABEL_63;
                    v38 = a11 ? CFArrayGetCount(a11) : 0;
                    xpc_dictionary_set_int64(v37, "AnimationVideoLayerCount", v38);
                    RemoteCAContextAndAttachLayer = FigXPCRemoteClientSendSyncMessageCreatingReply();
                    if ((_DWORD)RemoteCAContextAndAttachLayer)
                      goto LABEL_63;
                    v40 = xpc_dictionary_copy_mach_send();
                    *((_DWORD *)v28 + 9) = v40;
                    if (!v40)
                      goto LABEL_62;
                    RemoteCAContextAndAttachLayer = FigXPCMessageCopyCFArray();
                    if ((_DWORD)RemoteCAContextAndAttachLayer)
                      goto LABEL_63;
                    v28[32] = 1;
                    v41 = CFRetain(a9);
                    v42 = v28;
                    v43 = (uint64_t)v41;
                    *((_QWORD *)v28 + 5) = v41;
                    v44 = a11;
                    if (a11)
                    {
                      v44 = CFRetain(a11);
                      v42 = v28;
                      v43 = *((_QWORD *)v28 + 5);
                    }
                    *((_QWORD *)v42 + 8) = v44;
                    v45 = v42;
                    RemoteCAContextAndAttachLayer = FigRemote_CreateRemoteCAContextAndAttachLayer(*((unsigned int *)v42 + 9), v43, (_QWORD *)v42 + 6, (_DWORD *)v42 + 14);
                    if ((_DWORD)RemoteCAContextAndAttachLayer)
                      goto LABEL_63;
                    xpc_dictionary_set_uint64(a2, "AnimationRemoteContextID", *((unsigned int *)v45 + 14));
                    v46 = (const __CFArray *)*((_QWORD *)v45 + 8);
                    if (v46)
                    {
                      RemoteCAContextAndAttachLayer = FigRemote_InstallSlotIDsInVideoLayers(v52, v46);
                      if ((_DWORD)RemoteCAContextAndAttachLayer)
                        goto LABEL_63;
                    }
                    xpc_dictionary_set_int64(a2, "AnimationTrackID", a10);
                    RemoteCAContextAndAttachLayer = FigXPCMessageSetCFArray();
                    if ((_DWORD)RemoteCAContextAndAttachLayer)
                      goto LABEL_63;
                    RemoteCAContextAndAttachLayer = FigXPCMessageSetCFDictionary();
                    if ((_DWORD)RemoteCAContextAndAttachLayer)
                      goto LABEL_63;
                  }
                  RemoteCAContextAndAttachLayer = FigXPCRemoteClientSendSyncMessageCreatingReply();
                  if ((_DWORD)RemoteCAContextAndAttachLayer)
                  {
LABEL_63:
                    v39 = RemoteCAContextAndAttachLayer;
                    goto LABEL_58;
                  }
                  int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                  if (int64)
                  {
                    v39 = 0;
                    if (a26)
                      *a26 = int64;
                    goto LABEL_58;
                  }
LABEL_62:
                  RemoteCAContextAndAttachLayer = FigSignalErrorAt();
                  goto LABEL_63;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_61;
  }
  v33 = CFGetTypeID(a7);
  if (v33 != FigVideoCompositorGetTypeID())
    goto LABEL_40;
  ObjectID = FigVideoCompositorRemoteGetObjectID((uint64_t)a7, v53);
  if (!(_DWORD)ObjectID)
  {
    Mutable = (__CFArray *)*((_QWORD *)v28 + 9);
    if (Mutable
      || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
          (*((_QWORD *)v28 + 9) = Mutable) != 0))
    {
      CFArrayAppendValue(Mutable, a7);
      goto LABEL_29;
    }
LABEL_40:
    ObjectID = FigSignalErrorAt();
  }
  v39 = ObjectID;
LABEL_58:
  v48 = v39;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (v52)
    CFRelease(v52);
  return v48;
}

__CFString *remoteReader_CopyDebugDesc(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetReaderRemote %p retainCount: %ld%s allocator: %p>"), a1, v5, v6, v7);
  return Mutable;
}

uint64_t remoteReader_GetDefaultSourceAudioTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x61756469u, a2);
}

uint64_t remoteReader_GetDefaultSourceVideoTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x76696465u, a2);
}

uint64_t remoteReader_EnableOriginalSampleExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int int64;
  uint64_t v10;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1920169065, &xdict);
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v8 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v8)
    {
      v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v8)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v10 = 0;
          if (a4)
            *a4 = int64;
          goto LABEL_9;
        }
        v8 = FigSignalErrorAt();
      }
    }
  }
  v10 = v8;
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t remoteReader_EnableOriginalSampleReferenceExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int int64;
  uint64_t v10;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1920168564, &xdict);
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v8 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v8)
    {
      v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v8)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v10 = 0;
          if (a4)
            *a4 = int64;
          goto LABEL_9;
        }
        v8 = FigSignalErrorAt();
      }
    }
  }
  v10 = v8;
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t remoteReader_EnableDecodedAudioExtractionFromTrack(uint64_t a1, int a2, _OWORD *a3, size_t a4, const void *a5, uint64_t a6, _DWORD *a7)
{
  return remoteReader_EnableDecodedAudioExtractionFromTrackWithAudioOptions(a1, a2, a3, a4, a5, 0, 0, a6, a7);
}

uint64_t remoteReader_EnableDecodedVideoExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, _DWORD *a7)
{
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  CFTypeID TypeID;
  int int64;
  uint64_t v15;
  xpc_object_t xdict;
  CFTypeRef cf;

  xdict = 0;
  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  PixelBufferAttributesWithIOSurfaceSupport = remoteRemakerFamily_CreateXPCMessage(a1, 1920361844, &xdict);
  if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    if (a6)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a6))
      {
        CFDictionaryGetValue(a6, CFSTR("AssetReader_CopyDataBuffers"));
        FigCFEqual();
      }
    }
    PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    {
      PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      {
        PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
        {
          PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCMTime();
          if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
          {
            PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
            if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
            {
              PixelBufferAttributesWithIOSurfaceSupport = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
              {
                int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                if (int64)
                {
                  v15 = 0;
                  if (a7)
                    *a7 = int64;
                  goto LABEL_16;
                }
                PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
              }
            }
          }
        }
      }
    }
  }
  v15 = PixelBufferAttributesWithIOSurfaceSupport;
LABEL_16:
  FigXPCRemoteClientKillServerOnTimeout();
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t remoteReader_EnableAudioMixdownExtraction(uint64_t a1, const __CFArray *a2, const void *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  int int64;
  uint64_t v21;
  void *v22;
  const void *v23;

  v22 = 0;
  v23 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1918987621, &v22);
  if ((_DWORD)v15)
  {
    v21 = v15;
    v17 = 0;
  }
  else
  {
    v16 = frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(a2, CFSTR("AssetReaderSource_AudioProcessingTap"), &v23);
    v18 = v22;
    v17 = v23;
    if ((_DWORD)v16)
      goto LABEL_21;
    v16 = FigXPCMessageSetCFArray();
    if ((_DWORD)v16)
      goto LABEL_21;
    if (a3)
      xpc_dictionary_set_data(v18, "AudioDestASBD", a3, 0x28uLL);
    if (a4 && a5)
      xpc_dictionary_set_data(v18, "AudioDestChannelLayout", a5, a4);
    v16 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v16
      || (v16 = FigXPCMessageSetCFDictionary(), (_DWORD)v16)
      || (v16 = FigXPCMessageSetCFDictionary(), (_DWORD)v16))
    {
LABEL_21:
      v21 = v16;
    }
    else
    {
      v19 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v19)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v21 = 0;
          if (a9)
            *a9 = int64;
          goto LABEL_18;
        }
        v19 = FigSignalErrorAt();
      }
      v21 = v19;
    }
  }
LABEL_18:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v17)
    CFRelease(v17);
  return v21;
}

uint64_t remoteReader_StartExtractionForTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v8;
  CMTimeRange v9;
  CMTime time2;
  CMTime time1;
  uint64_t v12;

  v12 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || (a2->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  if ((a3->flags & 0x1D) == 1)
  {
    time1 = *a2;
    time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      return FigSignalErrorAt();
  }
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1920165234, &v12);
  if (!(_DWORD)v8)
  {
    time1 = *a2;
    time2 = *a3;
    CMTimeRangeFromTimeToTime(&v9, &time1, &time2);
    v8 = FigXPCMessageSetCMTimeRange();
    if (!(_DWORD)v8)
      v8 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v8;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteReader_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, int a3, BOOL *a4, CFTypeRef *a5)
{
  uint64_t v11;
  xpc_object_t v12;
  BOOL v13;
  const __CFAllocator *v14;
  uint64_t BlockBufferData;
  __CFArray *v16;
  CFTypeRef v17;
  IOSurfaceRef v18;
  xpc_object_t value;
  void *v20;
  size_t count;
  size_t v22;
  CFMutableArrayRef Mutable;
  size_t v24;
  xpc_object_t v25;
  IOSurfaceRef v26;
  IOSurfaceRef v27;
  uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray;
  xpc_object_t v29;
  xpc_object_t xdict;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;

  v32 = 0;
  cf = 0;
  xdict = 0;
  v31 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v11 = remoteRemakerFamily_CreateXPCMessage(a1, 1919251298, &xdict);
  if ((_DWORD)v11)
    goto LABEL_36;
  v12 = xdict;
  xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
  xpc_dictionary_set_BOOL(v12, "WaitForSampleBuffer", a3 != 0);
  xpc_dictionary_set_BOOL(v12, "RequestedSampleBuffer", a5 != 0);
  v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v11)
    goto LABEL_36;
  v13 = xpc_dictionary_get_BOOL(0, "ExtractionCompleteOut");
  if (a4)
    *a4 = v13;
  if (a5)
  {
    *a5 = 0;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    BlockBufferData = FigXPCMessageCreateBlockBufferData();
    v16 = 0;
    v17 = cf;
    v18 = 0;
    if ((_DWORD)BlockBufferData || !cf)
      goto LABEL_22;
    v11 = frr_CopyTrackInfo(a1, a2, &v31);
    if (!(_DWORD)v11)
    {
      value = xpc_dictionary_get_value(0, "IOSurfaceArray");
      if (!value)
        goto LABEL_34;
      v20 = value;
      count = xpc_array_get_count(value);
      if (count)
      {
        v22 = count;
        Mutable = CFArrayCreateMutable(v14, count, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v16 = Mutable;
          v24 = 0;
          while (1)
          {
            v25 = xpc_array_get_value(v20, v24);
            v26 = IOSurfaceLookupFromXPCObject(v25);
            if (!v26)
              break;
            v27 = v26;
            CFArrayAppendValue(v16, v26);
            CFRelease(v27);
            if (v22 == ++v24)
            {
              SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurfaceArray();
              v18 = 0;
              if ((_DWORD)SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray)
                goto LABEL_35;
              goto LABEL_18;
            }
          }
          BlockBufferData = FigSignalErrorAt();
          CFRelease(v16);
          if ((_DWORD)BlockBufferData)
            goto LABEL_37;
          goto LABEL_34;
        }
      }
      BlockBufferData = FigSignalErrorAt();
      if (!(_DWORD)BlockBufferData)
      {
LABEL_34:
        v29 = xpc_dictionary_get_value(0, "IOSurface");
        v18 = IOSurfaceLookupFromXPCObject(v29);
        SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
        v16 = 0;
        if ((_DWORD)SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray)
        {
LABEL_35:
          BlockBufferData = SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray;
        }
        else
        {
LABEL_18:
          BlockBufferData = 0;
          *a5 = v32;
          v32 = 0;
        }
        goto LABEL_21;
      }
      goto LABEL_37;
    }
LABEL_36:
    BlockBufferData = v11;
LABEL_37:
    v16 = 0;
    goto LABEL_20;
  }
  v16 = 0;
  BlockBufferData = 0;
LABEL_20:
  v18 = 0;
LABEL_21:
  v17 = cf;
LABEL_22:
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  FigXPCRelease();
  FigXPCRelease();
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v16)
    CFRelease(v16);
  FigXPCRemoteClientKillServerOnTimeout();
  return BlockBufferData;
}

uint64_t remoteReader_EnableDecodedAudioExtractionFromTrackWithAudioOptions(uint64_t a1, int a2, _OWORD *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v15;
  xpc_object_t v16;
  _OWORD *v17;
  uint64_t v18;
  int int64;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  xpc_object_t v23;
  xpc_object_t xdict;

  v23 = 0;
  xdict = 0;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1919251553, &xdict);
  v16 = xdict;
  if ((_DWORD)v15)
    goto LABEL_18;
  v17 = a3 ? a3 : v21;
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  xpc_dictionary_set_data(v16, "AudioDestASBD", v17, 0x28uLL);
  if (a4 && a5)
    xpc_dictionary_set_data(v16, "AudioDestChannelLayout", a5, a4);
  v15 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v15
    || (v15 = FigXPCMessageSetCFDictionary(), (_DWORD)v15)
    || (v15 = FigXPCMessageSetCFDictionary(), (_DWORD)v15))
  {
LABEL_18:
    v20 = v15;
  }
  else
  {
    v18 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v18)
    {
      int64 = xpc_dictionary_get_int64(v23, "TrackIDOut");
      if (int64)
      {
        v20 = 0;
        if (a9)
          *a9 = int64;
        goto LABEL_17;
      }
      v18 = FigSignalErrorAt();
    }
    v20 = v18;
  }
LABEL_17:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v20;
}

uint64_t remoteReader_StartExtractionForTimeRanges(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  xpc_object_t xdict;

  xdict = 0;
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage() && a3 > 0 && a2)
  {
    v6 = a2 + 5;
    v7 = a3;
    while (1)
    {
      v8 = *((_DWORD *)v6 - 7);
      if ((v8 & 0x1D) != 1
        || (v8 & 1) == 0
        || (*((_BYTE *)v6 - 4) & 1) == 0
        || *v6
        || (*(v6 - 2) & 0x8000000000000000) != 0)
      {
        break;
      }
      v6 += 6;
      if (!--v7)
      {
        v9 = remoteRemakerFamily_CreateXPCMessage(a1, 1920168563, &xdict);
        if (!(_DWORD)v9)
        {
          if ((unint64_t)a3 <= 0x555555555555555)
            v10 = 48 * a3;
          else
            v10 = 0;
          xpc_dictionary_set_data(xdict, "TimeRanges", a2, v10);
          v9 = FigXPCRemoteClientSendSyncMessage();
        }
        v11 = v9;
        FigXPCRemoteClientKillServerOnTimeout();
        FigXPCRelease();
        return v11;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t remoteReader_StartExtractionForTimeRangesFromTrack(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  xpc_object_t v12;
  size_t v13;
  uint64_t v14;
  xpc_object_t xdict;

  xdict = 0;
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage() && a4 > 0 && a3)
  {
    v8 = a3 + 5;
    v9 = a4;
    while (1)
    {
      v10 = *((_DWORD *)v8 - 7);
      if ((v10 & 0x1D) != 1
        || (v10 & 1) == 0
        || (*((_BYTE *)v8 - 4) & 1) == 0
        || *v8
        || (*(v8 - 2) & 0x8000000000000000) != 0)
      {
        break;
      }
      v8 += 6;
      if (!--v9)
      {
        v11 = remoteRemakerFamily_CreateXPCMessage(a1, 1920169076, &xdict);
        v12 = xdict;
        if (!(_DWORD)v11)
        {
          xpc_dictionary_set_int64(xdict, "TrackID", a2);
          if ((unint64_t)a4 <= 0x555555555555555)
            v13 = 48 * a4;
          else
            v13 = 0;
          xpc_dictionary_set_data(v12, "TimeRanges", a3, v13);
          v11 = FigXPCRemoteClientSendSyncMessage();
        }
        v14 = v11;
        FigXPCRemoteClientKillServerOnTimeout();
        FigXPCRelease();
        return v14;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t remoteReader_EnableCaptionExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int int64;
  uint64_t v10;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1919115640, &xdict);
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v8 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v8)
    {
      v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v8)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v10 = 0;
          if (a4)
            *a4 = int64;
          goto LABEL_9;
        }
        v8 = FigSignalErrorAt();
      }
    }
  }
  v10 = v8;
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t remoteReader_StartExtractionForTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || (*(_DWORD *)(a2 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  v4 = remoteRemakerFamily_CreateXPCMessage(a1, 1920165236, &v7);
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v4)
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteReader_EnableVideoCompositionExtraction2(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, int a7, const __CFArray *a8, const __CFArray *a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, uint64_t a17, uint64_t a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,const __CFDictionary *a24,_DWORD *a25)
{
  __int128 v26;
  uint64_t v27;

  v26 = *(_OWORD *)a11;
  v27 = *(_QWORD *)(a11 + 16);
  return remoteReader_EnableVideoCompositionExtraction3(a1, a2, a3, 0, 0, a4, a5, a6, a7, a8, a9, a10, &v26, a12, a13, a14, a15, a16, a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t remoteReader_EnableVideoCompositionExtraction3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8, int a9, const __CFArray *a10, const __CFArray *a11, uint64_t a12, __int128 *a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, uint64_t a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const __CFDictionary *a26,_DWORD *a27)
{
  uint64_t v35;
  const void *v36;
  CFTypeID TypeID;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  void *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  CFTypeRef v47;

  v46 = 0;
  v47 = 0;
  v35 = remoteRemakerFamily_CreateXPCMessage(a1, 1920361317, &v46);
  if ((_DWORD)v35)
  {
    v40 = v35;
  }
  else
  {
    v42 = a2;
    v43 = a3;
    v36 = a8;
    if (a26)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a26))
      {
        CFDictionaryGetValue(a26, CFSTR("AssetReader_CopyDataBuffers"));
        FigCFEqual();
      }
    }
    PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    v39 = v46;
    if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    {
      PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      {
        PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
        {
          v44 = *a13;
          v45 = *((_QWORD *)a13 + 2);
          PixelBufferAttributesWithIOSurfaceSupport = remoteRemakerFamily_AddVideoCompositionTrackCommon(a1, v39, v42, v43, a4, a5, a6, a7, v36, a9, a10, a11, a12, (uint64_t)&v44, a14, a15, a16, a17, a18,
                                                        a20,
                                                        a21,
                                                        a22,
                                                        a23,
                                                        a24,
                                                        a25,
                                                        a27);
        }
      }
    }
    v40 = PixelBufferAttributesWithIOSurfaceSupport;
  }
  FigXPCRelease();
  if (v47)
    CFRelease(v47);
  return v40;
}

uint64_t frr_CopyTrackInfo(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t SInt32;
  const void *v6;
  const void *Value;
  const void *Instance;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  SInt32 = FigCFNumberCreateSInt32();
  if (SInt32)
  {
    v6 = (const void *)SInt32;
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 80));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 88), v6);
    if (Value)
    {
      Instance = Value;
      CFRetain(Value);
      if (a3)
        goto LABEL_4;
    }
    else
    {
      MEMORY[0x19402F294](&remoteRemakerTrackInfo_GetTypeID_sRegisterFigRemoteRemakerTrackInfoOnce, remoteRemakerTrackInfo_Register);
      Instance = (const void *)_CFRuntimeCreateInstance();
      if (!Instance)
      {
        v9 = FigSignalErrorAt();
        if ((_DWORD)v9)
          goto LABEL_5;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), v6, Instance);
      if (a3)
      {
LABEL_4:
        v9 = 0;
        *a3 = Instance;
LABEL_5:
        os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 80));
LABEL_11:
        CFRelease(v6);
        return v9;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 80));
    if (Instance)
      CFRelease(Instance);
    v9 = 0;
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t remoteRemakerTrackInfo_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigRemoteRemakerTrackInfoID = result;
  return result;
}

_QWORD *remoteRemakerTrackInfo_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void remoteRemakerTrackInfo_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

CFStringRef remoteRemakerTrackInfo_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRemoteRemakerTrackInfo %p]\n  previousFormatDescription:%@\n  pixelBufferPool:%p"), a1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
}

CFStringRef remoteRemakerTrackInfo_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRemoteRemakerTrackInfo %p]\n  previousFormatDescription:%@\n  pixelBufferPool:%p"), a1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
}

__CFString *remoteWriter_CopyDebugDesc(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetWriterRemote %p retainCount: %ld%s allocator: %p>"), a1, v5, v6, v7);
  return Mutable;
}

uint64_t remoteWriter_AddNativeTrack(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v7;
  int int64;
  uint64_t v9;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = remoteRemakerFamily_CreateXPCMessage(a1, 2002873972, &xdict);
  if (!(_DWORD)v7)
  {
    xpc_dictionary_set_int64(xdict, "MediaType", a2);
    v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v7)
    {
      int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
      if (int64)
      {
        v9 = 0;
        if (a3)
          *a3 = int64;
        goto LABEL_8;
      }
      v7 = FigSignalErrorAt();
    }
  }
  v9 = v7;
LABEL_8:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v9;
}

uint64_t remoteWriter_AddAudioTrackWithCompression(uint64_t a1, const void *a2, size_t a3, const void *a4, uint64_t a5, const __CFDictionary *Copy, _DWORD *a7)
{
  uint64_t v14;
  xpc_object_t v15;
  const __CFAllocator *v16;
  uint64_t SerializableDictionaryForFormatDescription;
  __CFDictionary *MutableCopy;
  uint64_t v19;
  int int64;
  xpc_object_t xdict;
  void *value;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a2)
    return FigSignalErrorAt();
  v14 = remoteRemakerFamily_CreateXPCMessage(a1, 2002875491, &xdict);
  v15 = xdict;
  if ((_DWORD)v14)
    goto LABEL_32;
  xpc_dictionary_set_data(xdict, "AudioDestASBD", a2, 0x28uLL);
  if (a3 && a4)
    xpc_dictionary_set_data(v15, "AudioDestChannelLayout", a4, a3);
  v14 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v14)
  {
LABEL_32:
    SerializableDictionaryForFormatDescription = v14;
LABEL_23:
    Copy = 0;
    goto LABEL_29;
  }
  value = 0;
  if (Copy)
  {
    if (CFDictionaryGetValue(Copy, CFSTR("AssetWriterAudioTrackProcessingOption_SourceAudioFormatDescriptionHint")))
    {
      v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      SerializableDictionaryForFormatDescription = FigRemote_CreateSerializableDictionaryForFormatDescription();
      if (!(_DWORD)SerializableDictionaryForFormatDescription)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(v16, 0, Copy);
        CFDictionarySetValue(MutableCopy, CFSTR("AssetWriterAudioTrackProcessingOption_SourceAudioFormatDescriptionHint"), value);
        Copy = CFDictionaryCreateCopy(v16, MutableCopy);
        goto LABEL_16;
      }
      Copy = 0;
    }
    else
    {
      Copy = (const __CFDictionary *)CFRetain(Copy);
      SerializableDictionaryForFormatDescription = 0;
    }
    MutableCopy = 0;
LABEL_16:
    if (value)
      CFRelease(value);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if ((_DWORD)SerializableDictionaryForFormatDescription)
    {
      if (Copy)
        CFRelease(Copy);
      goto LABEL_23;
    }
  }
  v19 = FigXPCMessageSetCFDictionary();
  if (!(_DWORD)v19)
  {
    v19 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v19)
    {
      int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
      if (int64)
      {
        SerializableDictionaryForFormatDescription = 0;
        if (a7)
          *a7 = int64;
        goto LABEL_29;
      }
      v19 = FigSignalErrorAt();
    }
  }
  SerializableDictionaryForFormatDescription = v19;
LABEL_29:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (Copy)
    CFRelease(Copy);
  return SerializableDictionaryForFormatDescription;
}

uint64_t remoteWriter_AddAudioTrackWithPresetCompression(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  int int64;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = remoteRemakerFamily_CreateXPCMessage(a1, 2002875504, &v10);
  if (!(_DWORD)v7)
  {
    v7 = FigXPCMessageSetCFString();
    if (!(_DWORD)v7)
    {
      v7 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v7)
      {
        v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v7)
        {
          int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            v9 = 0;
            if (a4)
              *a4 = int64;
            goto LABEL_10;
          }
          v7 = FigSignalErrorAt();
        }
      }
    }
  }
  v9 = v7;
LABEL_10:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v9;
}

uint64_t remoteWriter_AddVideoTrackWithCompression(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10, _DWORD *a11)
{
  __int128 v12;
  uint64_t v13;

  v12 = *a9;
  v13 = *((_QWORD *)a9 + 2);
  return remoteWriter_AddVideoTrackWithCompressionAndMediaType(a1, a2, a3, a4, 0x76696465u, a5, a6, a7, a8, (uint64_t)&v12, a10, a11);
}

uint64_t remoteWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFArray *a4)
{
  uint64_t MetadataBinaryPListData;
  uint64_t v10;
  CFTypeRef cf;
  xpc_object_t xdict;

  cf = 0;
  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  MetadataBinaryPListData = remoteRemakerFamily_CreateXPCMessage(a1, 2003989616, &xdict);
  if (!(_DWORD)MetadataBinaryPListData)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    MetadataBinaryPListData = FigXPCMessageSetCFString();
    if (!(_DWORD)MetadataBinaryPListData)
    {
      if (!CFEqual(a3, CFSTR("AssetWriterTrack_Metadata"))
        || (MetadataBinaryPListData = FigRemote_CreateMetadataBinaryPListData(a4, *MEMORY[0x1E0C9AE00], (uint64_t)&cf),
            !(_DWORD)MetadataBinaryPListData))
      {
        MetadataBinaryPListData = FigXPCMessageSetCFObject();
        if (!(_DWORD)MetadataBinaryPListData)
          MetadataBinaryPListData = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  v10 = MetadataBinaryPListData;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t remoteWriter_CopyTrackProperty(uint64_t a1, uint64_t a2, const void *a3, const __CFAllocator *a4, CFTypeRef *a5)
{
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  CVReturn v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFDictionaryRef pixelBufferAttributes;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf[2];
  xpc_object_t xdict;
  CFTypeRef v26;

  xdict = 0;
  v26 = 0;
  cf[1] = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !(_DWORD)a2 || !a3 || !a5)
    return FigSignalErrorAt();
  if (!CFEqual(a3, CFSTR("AssetWriterTrack_PixelBufferPool")))
  {
    v14 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985264, &xdict);
    if (!(_DWORD)v14)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
      v14 = FigXPCMessageSetCFString();
      if (!(_DWORD)v14)
      {
        v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v14)
          v14 = FigXPCMessageCopyCFObject();
      }
    }
    v12 = v14;
    goto LABEL_38;
  }
  v10 = frr_CopyTrackInfo(a1, a2, &v26);
  if ((_DWORD)v10)
  {
LABEL_42:
    v12 = v10;
    goto LABEL_38;
  }
  v11 = (const void *)*((_QWORD *)v26 + 2);
  if (!v11)
  {
    v23 = 0;
    cf[0] = 0;
    pixelBufferAttributes = 0;
    v22 = 0;
    v20 = 0;
    v15 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v15)
    {
      v12 = 4294954514;
      goto LABEL_38;
    }
    v10 = v15(a1, a2, CFSTR("PixelBufferAndPoolAttributes"), a4, cf);
    if (!(_DWORD)v10)
    {
      v12 = FigRemote_CopyPixelBufferAndPoolAttributesFromDictionary((const __CFDictionary *)cf[0], &v23, &v22);
      if (cf[0])
        CFRelease(cf[0]);
      if ((_DWORD)v12)
        goto LABEL_38;
      PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      {
        v12 = PixelBufferAttributesWithIOSurfaceSupport;
        if (v23)
          CFRelease(v23);
        if (v22)
          CFRelease(v22);
        goto LABEL_38;
      }
      if (v22)
        CFRelease(v22);
      v22 = 0;
      v17 = CVPixelBufferPoolCreate(a4, (CFDictionaryRef)v23, pixelBufferAttributes, (CVPixelBufferPoolRef *)&v20);
      if (v23)
        CFRelease(v23);
      if (pixelBufferAttributes)
        CFRelease(pixelBufferAttributes);
      if (!v17)
      {
        v18 = v20;
        *((_QWORD *)v26 + 2) = v20;
        if (v18)
        {
          CFRetain(v18);
          v19 = v20;
        }
        else
        {
          v19 = 0;
        }
        v12 = 0;
        *a5 = v19;
        goto LABEL_38;
      }
      v10 = FigSignalErrorAt();
    }
    goto LABEL_42;
  }
  v12 = 0;
  *a5 = CFRetain(v11);
LABEL_38:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v26)
    CFRelease(v26);
  return v12;
}

uint64_t remoteWriter_BeginSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || (*(_DWORD *)(a2 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  v4 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985011, &v7);
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v4)
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteWriter_AddSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t XPCObject;
  xpc_object_t xdict;
  CFTypeRef cf;
  IOSurfaceRef aSurface;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  aSurface = 0;
  xdict = 0;
  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  v7 = frr_CopyTrackInfo(a1, a2, &cf);
  if ((_DWORD)v7)
  {
    v9 = v7;
  }
  else
  {
    SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
    if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
    {
      v9 = SerializedAtomDataAndSurfaceForSampleBuffer;
      *((_QWORD *)cf + 4) = 0;
    }
    else
    {
      *((_QWORD *)cf + 4) = (v16 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
      v10 = remoteRemakerFamily_CreateXPCMessage(a1, 2003984755, &xdict);
      v11 = xdict;
      if ((_DWORD)v10
        || (xpc_dictionary_set_int64(xdict, "TrackID", (int)a2), v10 = FigXPCMessageSetAndConsumeVMData(), (_DWORD)v10))
      {
        v9 = v10;
      }
      else
      {
        XPCObject = IOSurfaceCreateXPCObject(aSurface);
        xpc_dictionary_set_value(v11, "IOSurface", XPCObject);
        v9 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t remoteWriter_AddPixelBuffer(uint64_t a1, uint64_t a2, __CVBuffer *a3, __int128 *a4)
{
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t SerializedAtomDataAndSurfaceForPixelBuffer;
  xpc_object_t XPCObject;
  xpc_object_t xdict;
  CFTypeRef cf;
  IOSurfaceRef aSurface;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  aSurface = 0;
  xdict = 0;
  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3 || (*((_DWORD *)a4 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  v8 = remoteRemakerFamily_CreateXPCMessage(a1, 2003984752, &xdict);
  if ((_DWORD)v8)
    goto LABEL_23;
  v9 = xdict;
  xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
  if (frr_shouldUseFigPixelBufferMemorySharing_onceToken != -1)
    dispatch_once(&frr_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_23_0);
  if (!CVPixelBufferGetIOSurface(a3))
  {
    if (!CVPixelBufferGetIOSurface(a3))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v8 = frr_CopyTrackInfo(a1, a2, &cf);
    if (!(_DWORD)v8)
    {
      SerializedAtomDataAndSurfaceForPixelBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForPixelBuffer();
      if ((_DWORD)SerializedAtomDataAndSurfaceForPixelBuffer)
      {
        v11 = SerializedAtomDataAndSurfaceForPixelBuffer;
        *((_QWORD *)cf + 4) = 0;
        goto LABEL_18;
      }
      *((_QWORD *)cf + 4) = (v19 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
      v8 = FigXPCMessageSetAndConsumeVMData();
      if (!(_DWORD)v8)
      {
        XPCObject = IOSurfaceCreateXPCObject(aSurface);
        xpc_dictionary_set_value(v9, "IOSurface", XPCObject);
LABEL_9:
        v21 = *a4;
        v22 = *((_QWORD *)a4 + 2);
        v10 = FigXPCMessageSetCMTime();
        if (!(_DWORD)v10)
          v10 = FigXPCRemoteClientSendSyncMessage();
        goto LABEL_11;
      }
    }
LABEL_23:
    v11 = v8;
    goto LABEL_18;
  }
  v10 = FigPixelBufferOriginSetPixelBufferInXPCMessage();
  if (!(_DWORD)v10)
    goto LABEL_9;
LABEL_11:
  v11 = v10;
LABEL_18:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  return v11;
}

BOOL remoteWriter_IsTrackQueueAboveHighWaterLevel(uint64_t a1, int a2)
{
  _BOOL8 v4;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    v4 = !remoteRemakerFamily_CreateXPCMessage(a1, 2003988840, &xdict)
      && (xpc_dictionary_set_int64(xdict, "TrackID", a2), !FigXPCRemoteClientSendSyncMessageCreatingReply())
      && xpc_dictionary_get_BOOL(0, "IsTrackQueueAboveHighWaterLevelOut");
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
  }
  return v4;
}

uint64_t remoteWriter_MarkEndOfDataForTrack(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v5 = remoteRemakerFamily_CreateXPCMessage(a1, 2003136356, &xdict);
  if (!(_DWORD)v5)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v5;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteWriter_EndSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || (*(_DWORD *)(a2 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  v4 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985779, &v7);
  if (!(_DWORD)v4)
  {
    v4 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v4)
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteWriter_Finish(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v3 = remoteRemakerFamily_CreateXPCMessage(a1, 2003986025, &v5);
  if (!(_DWORD)v3)
    v3 = FigXPCRemoteClientSendSyncMessage();
  v4 = v3;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v4;
}

uint64_t remoteWriter_FinishAsync(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v3 = remoteRemakerFamily_CreateXPCMessage(a1, 2003986017, &v5);
  if (!(_DWORD)v3)
    v3 = FigXPCRemoteClientSendSyncMessage();
  v4 = v3;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v4;
}

uint64_t remoteWriter_BeginPass(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v5 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985008, &xdict);
  if (!(_DWORD)v5)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v5 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v5)
      v5 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v5;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteWriter_EndPass(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v5 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985776, &xdict);
  if (!(_DWORD)v5)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
  v6 = v5;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v6;
}

uint64_t remoteWriter_AddCaptionTrack(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  void *v11;
  int int64;
  uint64_t v13;
  void *v14;

  v14 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v10 = remoteRemakerFamily_CreateXPCMessage(a1, 2003001712, &v14);
  v11 = v14;
  if (!(_DWORD)v10)
  {
    v10 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v10)
    {
      xpc_dictionary_set_uint64(v11, "MediaType", a2);
      xpc_dictionary_set_uint64(v11, "MediaSubType", a3);
      v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v10)
      {
        int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          v13 = 0;
          if (a5)
            *a5 = int64;
          goto LABEL_9;
        }
        v10 = FigSignalErrorAt();
      }
    }
  }
  v13 = v10;
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v13;
}

uint64_t remoteWriter_CopyFormatWriterTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t FormatDescriptionCollectionFromPList;
  uint64_t v11;
  CFTypeRef v12;
  xpc_object_t xdict;
  CFTypeRef cf;

  cf = 0;
  xdict = 0;
  v12 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3)
    return FigSignalErrorAt();
  FormatDescriptionCollectionFromPList = remoteRemakerFamily_CreateXPCMessage(a1, 1719104624, &xdict);
  if ((_DWORD)FormatDescriptionCollectionFromPList)
    goto LABEL_17;
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  FormatDescriptionCollectionFromPList = FigXPCMessageSetCFString();
  if ((_DWORD)FormatDescriptionCollectionFromPList)
    goto LABEL_17;
  FormatDescriptionCollectionFromPList = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)FormatDescriptionCollectionFromPList)
    goto LABEL_17;
  FormatDescriptionCollectionFromPList = FigXPCMessageCopyCFObject();
  if ((_DWORD)FormatDescriptionCollectionFromPList)
    goto LABEL_17;
  if (CFEqual(a3, CFSTR("FormatDescriptionArray")))
  {
    FormatDescriptionCollectionFromPList = FigRemote_CreateFormatDescriptionCollectionFromPList();
    if (!(_DWORD)FormatDescriptionCollectionFromPList)
    {
      v12 = cf;
      if (cf)
        CFRetain(cf);
      goto LABEL_12;
    }
LABEL_17:
    v11 = FormatDescriptionCollectionFromPList;
    goto LABEL_13;
  }
LABEL_12:
  v11 = 0;
  *a5 = v12;
LABEL_13:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t remoteWriter_Flush(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v3 = remoteRemakerFamily_CreateXPCMessage(a1, 2003202920, &v5);
  if (!(_DWORD)v3)
    v3 = FigXPCRemoteClientSendSyncMessage();
  v4 = v3;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v4;
}

uint64_t remoteWriter_AddTaggedBufferGroup(uint64_t a1, int a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4)
{
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t xdict;

  xdict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage() || !a3 || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  if (CMTaggedBufferGroupGetCount(a3) >= 1)
  {
    v8 = 0;
    while (CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v8))
    {
      if (++v8 >= CMTaggedBufferGroupGetCount(a3))
        goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
LABEL_8:
  v9 = remoteRemakerFamily_CreateXPCMessage(a1, 2003989607, &xdict);
  if (!(_DWORD)v9)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v9 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v9)
    {
      if (frr_shouldUseFigPixelBufferMemorySharing_onceToken != -1)
        dispatch_once(&frr_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_23_0);
      v9 = FigPixelBufferOriginSetTaggedBufferGroupInXPCMessage();
      if (!(_DWORD)v9)
        v9 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  v10 = v9;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v10;
}

uint64_t remoteWriter_AddVideoTrackWithCompressionAndMediaType(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  uint64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  int int64;
  uint64_t v22;
  xpc_object_t v23;

  v23 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v18 = remoteRemakerFamily_CreateXPCMessage(a1, 2004251747, &v23);
  v19 = v23;
  if ((_DWORD)v18
    || (xpc_dictionary_set_int64(v23, "Width", a2),
        xpc_dictionary_set_int64(v19, "Height", a3),
        v18 = FigXPCMessageSetCFDictionary(),
        (_DWORD)v18))
  {
    v22 = v18;
  }
  else
  {
    xpc_dictionary_set_uint64(v19, "MediaType", a5);
    xpc_dictionary_set_uint64(v19, "VideoCodecType", a6);
    v20 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v20)
    {
      v20 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v20)
      {
        v20 = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)v20)
        {
          v20 = FigXPCMessageSetCMTime();
          if (!(_DWORD)v20)
          {
            v20 = FigXPCMessageSetCFDictionary();
            if (!(_DWORD)v20)
            {
              v20 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)v20)
              {
                int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                if (int64)
                {
                  v22 = 0;
                  if (a12)
                    *a12 = int64;
                  goto LABEL_14;
                }
                v20 = FigSignalErrorAt();
              }
            }
          }
        }
      }
    }
    v22 = v20;
  }
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v22;
}

void remoteRemakerFamily_storeSandboxRegistration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  __CFSet *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = *(__CFSet **)(DerivedStorage + 128);
  if (Mutable
    || (Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]),
        (*(_QWORD *)(DerivedStorage + 128) = Mutable) != 0))
  {
    if (a2)
      CFSetAddValue(Mutable, a2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerCreateKeyRequestForKeyID(uint64_t a1, void *a2, CFDictionaryRef theDict, const void *a4, _QWORD *a5)
{
  const void *Value;
  const void *v11;
  const void *v12;
  const void *v13;
  CFTypeRef v14;
  const void *v15;
  const void *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeID v19;
  uint64_t KeyRequestForEntryInternal;
  const void *v21;
  CFTypeRef v22;
  const void *v23;
  const void *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  CFTypeRef cf;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;

  v36 = 0;
  v37 = 0;
  cf = 0;
  v35 = 0;
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D58]);
  v11 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D38]);
  v12 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D00]);
  v13 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D68]);
  if (v11)
  {
    if (PKDCopyInfoFromPackagedPersistentKey(v11, 0, &v36, &cf, &v35))
    {
      v32 = FigSignalErrorAt();
      v14 = 0;
      goto LABEL_51;
    }
    v14 = 0;
    if (!v36)
    {
LABEL_62:
      v32 = FigSignalErrorAt();
      goto LABEL_51;
    }
  }
  else
  {
    v15 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D18]);
    if (v15)
      v14 = CFRetain(v15);
    else
      v14 = 0;
    v16 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D10]);
    if (v16)
      v17 = CFRetain(v16);
    else
      v17 = 0;
    v36 = v17;
    if (a4)
      v18 = CFRetain(a4);
    else
      v18 = 0;
    cf = v18;
    if (!v17)
      goto LABEL_62;
  }
  if (!cf)
    goto LABEL_62;
  if (v13)
  {
    v19 = CFGetTypeID(v13);
    if (v19 != CFDataGetTypeID())
      goto LABEL_62;
  }
  if (!a5)
    goto LABEL_62;
  *a5 = 0;
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  KeyRequestForEntryInternal = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 0, (uint64_t *)&v37);
  if ((_DWORD)KeyRequestForEntryInternal)
    goto LABEL_63;
  v21 = (const void *)*((_QWORD *)v37 + 4);
  *((_QWORD *)v37 + 4) = v14;
  if (v14)
    CFRetain(v14);
  if (v21)
    CFRelease(v21);
  v22 = v36;
  v23 = (const void *)*((_QWORD *)v37 + 5);
  *((_QWORD *)v37 + 5) = v36;
  if (v22)
    CFRetain(v22);
  if (v23)
    CFRelease(v23);
  v24 = (const void *)*((_QWORD *)v37 + 6);
  v25 = cf;
  *((_QWORD *)v37 + 6) = cf;
  if (v25)
    CFRetain(v25);
  if (v24)
    CFRelease(v24);
  KeyRequestForEntryInternal = keyManager_createKeyRequestForEntryInternal((_QWORD *)a1, v37, (const __CFData *)v36, (CFArrayRef)cf, v14, Value, v35, 0, v13, a5);
  if ((_DWORD)KeyRequestForEntryInternal)
  {
LABEL_63:
    v32 = KeyRequestForEntryInternal;
  }
  else
  {
    v26 = v36;
    v27 = cf;
    v28 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v36;
    if (v26)
      CFRetain(v26);
    if (v28)
      CFRelease(v28);
    v29 = *(const void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v27;
    if (v27)
      CFRetain(v27);
    if (v29)
      CFRelease(v29);
    v30 = *(const void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v14;
    if (v14)
      CFRetain(v14);
    if (v30)
      CFRelease(v30);
    v31 = *(const void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v12;
    if (v12)
      CFRetain(v12);
    if (v31)
      CFRelease(v31);
    v32 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
LABEL_51:
  if (v37)
    CFRelease(v37);
  if (v14)
    CFRelease(v14);
  if (v36)
    CFRelease(v36);
  if (cf)
    CFRelease(cf);
  if (v35)
    CFRelease(v35);
  return v32;
}

uint64_t keyManager_copyEntryForKeyIDInternal(CFDictionaryRef *a1, void *key, int a3, uint64_t *a4)
{
  const void *Value;
  uint64_t Instance;
  CFTypeRef v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 context[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 && key && a4)
  {
    *a4 = 0;
    Value = CFDictionaryGetValue(a1[11], key);
    if (Value)
    {
      Instance = (uint64_t)CFRetain(Value);
      if (a3)
        goto LABEL_17;
    }
    else
    {
      Instance = 0;
      if (a3)
        goto LABEL_17;
    }
    if (!Instance)
    {
      context[0] = xmmword_1E2F9DB18;
      if (keyManagerEntry_getTypeID_once != -1)
        dispatch_once_f(&keyManagerEntry_getTypeID_once, context, (dispatch_function_t)CFRuntimeClassRegisterOnce);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        *(_QWORD *)(Instance + 16) = CFRetain(a1);
        v10 = CFRetain(key);
        v11 = 0;
        *(_QWORD *)(Instance + 128) = 0;
        *(_QWORD *)(Instance + 24) = v10;
        *(_BYTE *)(Instance + 80) = 0;
        *(_QWORD *)(Instance + 88) = 0;
        *(_QWORD *)(Instance + 56) = 0;
        *(_QWORD *)(Instance + 176) = 0;
        *(_DWORD *)(Instance + 168) = 1;
        *(_QWORD *)(Instance + 136) = Instance + 128;
      }
      else
      {
        v11 = FigSignalErrorAt();
      }
      if (dword_1EE2A3080)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if ((_DWORD)v11)
      {
        if (Instance)
          CFRelease((CFTypeRef)Instance);
        return v11;
      }
      CFDictionarySetValue(a1[11], key, (const void *)Instance);
    }
LABEL_17:
    if (!Instance)
      return FigSignalErrorAt();
    v11 = 0;
    *a4 = Instance;
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t keyManager_createKeyRequestForEntryInternal(_QWORD *a1, _QWORD *a2, const __CFData *a3, CFArrayRef theArray, const void *a5, const void *a6, const void *a7, unsigned int a8, const void *a9, _QWORD *a10)
{
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  __CFDictionary *Mutable;
  const __CFDictionary *v20;
  const __CFString *v21;
  __CFDictionary *v22;
  const void *v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  CFTypeRef v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v29;
  void *UInt64;
  _QWORD *v34;

  if (a8 > 5)
    return FigSignalErrorAt();
  if (((1 << a8) & 0x16) != 0)
  {
    if (!a7)
      return 4294955146;
    goto LABEL_10;
  }
  if (((1 << a8) & 0x21) == 0)
  {
    if (a7 || a5)
      return FigSignalErrorAt();
    goto LABEL_10;
  }
  if (a5)
  {
LABEL_10:
    if (a1 && a3 && a10)
    {
      *a10 = 0;
      if (!a2)
        goto LABEL_17;
      if ((_QWORD *)a2[2] == a1)
      {
        v17 = keyManager_ensureMovieIDInternal(a1, a3, theArray);
        if ((_DWORD)v17)
          return v17;
        if (!a2[8])
        {
LABEL_17:
          v34 = a1;
          if (a8 >= 5)
            FigSignalErrorAt();
          v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!Mutable)
          {
            v16 = FigSignalErrorAt();
            v27 = 0;
            v24 = 0;
            v20 = 0;
            goto LABEL_45;
          }
          v20 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!v20 || (UInt64 = (void *)FigCFNumberCreateUInt64()) == 0)
          {
            v16 = FigSignalErrorAt();
            v27 = 0;
            v24 = 0;
            goto LABEL_45;
          }
          if (((1 << a8) & 0x16) != 0)
          {
            if (a7)
            {
              CFDictionarySetValue(Mutable, CFSTR("igoeg"), a7);
LABEL_28:
              v23 = (const void *)v34[13];
              if (!v23)
              {
LABEL_31:
                CFDictionarySetValue(Mutable, CFSTR("Y7bdIsnh7"), a3);
                if (theArray)
                  CFDictionarySetValue(Mutable, CFSTR("P5h3ZgzLxs"), theArray);
                if (a2 && a2[9])
                  FigCFDictionarySetInt64();
                if (a9)
                  CFDictionarySetValue(Mutable, CFSTR("LBV3vEsw"), a9);
                if (a6)
                  CFDictionarySetValue(Mutable, CFSTR("xNJu5eepP"), a6);
                v24 = UInt64;
                CFDictionarySetValue(Mutable, CFSTR("aMII4QYJ"), UInt64);
                FigCFDictionarySetInt32();
                v25 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(v34[4] + 40))(Mutable, v20);
                if ((_DWORD)v25)
                {
                  v16 = v25;
                  v27 = 0;
                }
                else
                {
                  FigCFDictionaryGetInt64IfPresent();
                  v26 = CFDictionaryGetValue(v20, CFSTR("yN1lNULD2GD"));
                  if (v26)
                    v27 = CFRetain(v26);
                  else
                    v27 = 0;
                  v16 = 0;
                }
LABEL_45:
                if (dword_1EE2A3080)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  if (dword_1EE2A3080 >= 2)
                  {
                    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                }
                if (Mutable)
                  CFRelease(Mutable);
                if (v20)
                  CFRelease(v20);
                if (v24)
                  CFRelease(v24);
                if (!(_DWORD)v16)
                {
                  if (((1 << a8) & 0x31) == 0 || !a2)
                  {
                    v16 = 0;
                    *a10 = v27;
                    return v16;
                  }
                  a2[8] = 0;
                  v16 = FigSignalErrorAt();
                }
                if (v27)
                  CFRelease(v27);
                return v16;
              }
              v21 = CFSTR("lGxB4ky");
              v22 = Mutable;
LABEL_30:
              CFDictionarySetValue(v22, v21, v23);
              goto LABEL_31;
            }
          }
          else
          {
            if (((1 << a8) & 0x21) == 0)
              goto LABEL_28;
            if (a5)
            {
              v21 = CFSTR("HJN6grNt");
              v22 = Mutable;
              v23 = a5;
              goto LABEL_30;
            }
          }
          v16 = FigSignalErrorAt();
          v27 = 0;
          v24 = UInt64;
          goto LABEL_45;
        }
      }
    }
    return FigSignalErrorAt();
  }
  return 4294955146;
}

uint64_t PKDKeyManagerSetUsedForLowValueDecryptionForKeyID(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v6 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if (!(_DWORD)v6)
    *((_BYTE *)cf + 96) = a3;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t PKDKeyManagerEnsureAndCopyLowValueKeyAndIVForKeyID(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, &v11);
  if (!(_DWORD)v8)
    v8 = keyManager_ensureAndCopyLowValueKeyAndIVForEntryInternal((_QWORD *)a1, v11, a3, a4);
  v9 = v8;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v9;
}

uint64_t keyManager_ensureAndCopyLowValueKeyAndIVForEntryInternal(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;

  if (*(_QWORD *)(a2 + 104) || *(_QWORD *)(a2 + 112))
    goto LABEL_12;
  if (!*(_QWORD *)(a2 + 64) || !*(_QWORD *)(a2 + 56))
  {
    v7 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (*(_BYTE *)(a2 + 80))
  {
    v7 = keyManager_processOfflineKeyInternal(a1, a2, 6);
    if ((_DWORD)v7)
    {
LABEL_22:
      v9 = v7;
      if (!a3)
        goto LABEL_16;
      goto LABEL_13;
    }
  }
  else
  {
    v7 = keyManager_processOnlineKeyInternal((uint64_t)a1, a2, 3);
    if ((_DWORD)v7)
      goto LABEL_22;
  }
  JE2f6WCx(*(_QWORD *)(a2 + 64));
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *(const void **)(a2 + 56);
  if (!v8)
  {
LABEL_12:
    v9 = 0;
    if (!a3)
      goto LABEL_16;
  }
  else
  {
    CFRelease(v8);
    v9 = 0;
    *(_QWORD *)(a2 + 56) = 0;
    if (!a3)
      goto LABEL_16;
  }
LABEL_13:
  v10 = *(CFTypeRef *)(a2 + 104);
  if (v10)
    v10 = CFRetain(v10);
  *a3 = v10;
LABEL_16:
  if (a4)
  {
    v11 = *(CFTypeRef *)(a2 + 112);
    if (v11)
      v11 = CFRetain(v11);
    *a4 = v11;
  }
  return v9;
}

uint64_t PKDKeyManagerSetKeyRequestResponseForKeyID(uint64_t a1, void *a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v7 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
  if ((_DWORD)v7)
    goto LABEL_28;
  v8 = cf[0];
  if (!*((_QWORD *)cf[0] + 8) || *((_QWORD *)cf[0] + 7))
  {
    v7 = FigSignalErrorAt();
    if (!(_DWORD)v7)
    {
      if (!*(_BYTE *)(a1 + 112))
      {
LABEL_20:
        v20 = 0;
        goto LABEL_21;
      }
LABEL_17:
      v11 = *(_QWORD *)(a1 + 120);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 96);
        v14 = *(_QWORD *)(a1 + 72);
        v13 = *(_QWORD *)(a1 + 80);
        v16 = *(_QWORD *)(a1 + 48);
        v15 = *(_QWORD *)(a1 + 56);
        v17 = **(_QWORD **)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 64);
        v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v19)
          v19(v11, v16, v12, v13, v18, v15, v17, v14);
      }
      goto LABEL_20;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)cf[0] + 96);
    v10 = *((unsigned __int8 *)cf[0] + 80);
    *((_QWORD *)cf[0] + 7) = a3;
    CFRetain(a3);
    if (*((_BYTE *)v8 + 80))
    {
      v7 = keyManager_processOnlineKeyInternal(a1, (uint64_t)v8, 2);
      if ((_DWORD)v7)
        goto LABEL_28;
      JE2f6WCx(v8[8]);
      v8[8] = 0;
    }
    if (v10)
      goto LABEL_16;
    if (v9)
    {
      v7 = keyManager_ensureAndCopyLowValueKeyAndIVForEntryInternal((_QWORD *)a1, (uint64_t)v8, 0, 0);
      if ((_DWORD)v7)
        goto LABEL_28;
      goto LABEL_16;
    }
    v7 = keyManager_ensureDecryptContextForEntryInternal((_QWORD *)a1, (uint64_t)v8, 0);
    if (!(_DWORD)v7)
    {
LABEL_16:
      *(_BYTE *)(a1 + 112) = 1;
      goto LABEL_17;
    }
  }
LABEL_28:
  v20 = v7;
LABEL_21:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf[0])
    CFRelease(cf[0]);
  return v20;
}

uint64_t PKDKeyManagerIsDecryptContextAvailableForKeyID(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v4 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_6;
  }
  if (*((_QWORD *)cf + 9))
    goto LABEL_5;
  if (*((_QWORD *)cf + 8))
  {
    if (!*((_QWORD *)cf + 7))
      goto LABEL_13;
  }
  else if (!*((_QWORD *)cf + 11))
  {
LABEL_13:
    v5 = 4294955138;
    goto LABEL_6;
  }
LABEL_5:
  v5 = 0;
LABEL_6:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t PKDKeyManagerIsReadyToCreateKeyRequestForKeyID(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v4 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v5 = v4;
  }
  else if (*((_QWORD *)cf + 8))
  {
    v5 = 4294955138;
  }
  else
  {
    v5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t PKDKeyManagerGetDecryptContextForKeyID(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v5 = 0;
  result = keyManager_ensureDecryptContextForKeyID(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t keyManager_ensureDecryptContextForKeyID(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef cf;

  v13 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    goto LABEL_5;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 24))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
LABEL_5:
    v6 = FigSignalErrorAt();
    v7 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  if (!keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&v13)
    && v13
    && *((_QWORD *)v13 + 19))
  {
    v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (const void *)*((_QWORD *)v13 + 20);
    if (v9)
    {
      v8 = CFRetain(v9);
      goto LABEL_13;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
LABEL_13:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (!v7 || v7 == (const void *)a1)
  {
    cf = 0;
    if (a3)
    {
      v14 = 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
      v11 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
      if ((_DWORD)v11)
      {
        v6 = v11;
      }
      else
      {
        v6 = keyManager_ensureDecryptContextForEntryInternal((_QWORD *)a1, (uint64_t)cf, &v14);
        *a3 = v14;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
      if (cf)
        CFRelease(cf);
      goto LABEL_22;
    }
    v10 = FigSignalErrorAt();
  }
  else
  {
    v10 = keyManager_ensureDecryptContextForKeyID(v7, v8, a3);
  }
  v6 = v10;
LABEL_22:
  if (v13)
    CFRelease(v13);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  return v6;
}

uint64_t PKDKeyManagerRemoveKeyID(uint64_t a1, void *a2)
{
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v4 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if (!(_DWORD)v4)
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 88), a2);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t PKDKeyManagerCopySessionID(uint64_t a1, CFDataRef *a2)
{
  if (!a1 || !*(_QWORD *)(a1 + 96) || !a2)
    return FigSignalErrorAt();
  *a2 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  *a2 = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(a1 + 96), 0x8000100u, 0);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return 0;
}

uint64_t PKDKeyManagerSetPropertyForKeyID(uint64_t a1, void *a2, const void *a3, const void *a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeID v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  const void *Value;
  const void *v30;
  CFTypeID v31;
  const void *v32;
  const void *v33;
  CFTypeID v34;
  const void *v35;
  uint64_t v36;
  const void *v37;
  CFTypeID v38;
  const void *v39;
  const void *v40;
  const void *v41;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v44;
  int v45;
  const char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  const void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if ((_DWORD)v8)
    goto LABEL_40;
  v9 = (unsigned __int8 *)cf;
  if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA3238]))
  {
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31F8]))
    {
      v9[80] = 1;
      if (dword_1EE2A3080)
      {
        v44 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v16 = v44;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if (v17)
        {
          v18 = *((_QWORD *)v9 + 3);
          v45 = 136315906;
          v46 = "keyManager_setPropertyForEntryInternal";
          v47 = 2048;
          v48 = a1;
          v49 = 2114;
          v50 = v18;
          v51 = 2048;
          v52 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v23 = *((_QWORD *)v9 + 11);
      *((_QWORD *)v9 + 11) = a4;
      CFRetain(a4);
      if (!v23)
        goto LABEL_32;
      CFRelease((CFTypeRef)v23);
      goto LABEL_31;
    }
    if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
    {
      v23 = 4294954512;
      goto LABEL_32;
    }
    v9[80] = 1;
    if (dword_1EE2A3080)
    {
      v44 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v20 = v44;
      if (os_log_type_enabled(v19, type))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if (v21)
      {
        v22 = *((_QWORD *)v9 + 3);
        v45 = 136315906;
        v46 = "keyManager_setPropertyForEntryInternal";
        v47 = 2048;
        v48 = a1;
        v49 = 2114;
        v50 = v22;
        v51 = 2048;
        v52 = a4;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v25 = CFGetTypeID(a4);
    if (v25 != CFDataGetTypeID()
      || (v26 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)a4, 0, 0, 0)) == 0)
    {
      v8 = FigSignalErrorAt();
LABEL_40:
      v23 = v8;
      goto LABEL_32;
    }
    v27 = v26;
    v28 = CFGetTypeID(v26);
    if (v28 != CFDictionaryGetTypeID())
      goto LABEL_47;
    Value = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CA4D40]);
    if (!Value)
      goto LABEL_47;
    v30 = Value;
    v31 = CFGetTypeID(Value);
    if (v31 != CFDataGetTypeID())
      goto LABEL_47;
    v32 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CA4D10]);
    if (v32
      && (v33 = v32, v34 = CFGetTypeID(v32), v34 == CFDataGetTypeID())
      && (v35 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CA4D48])) != 0
      && (v37 = v35, v38 = CFGetTypeID(v35), v38 == CFArrayGetTypeID()))
    {
      v39 = (const void *)*((_QWORD *)v9 + 11);
      *((_QWORD *)v9 + 11) = v30;
      CFRetain(v30);
      if (v39)
        CFRelease(v39);
      v40 = (const void *)*((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 5) = v33;
      CFRetain(v33);
      if (v40)
        CFRelease(v40);
      v41 = (const void *)*((_QWORD *)v9 + 6);
      *((_QWORD *)v9 + 6) = v37;
      CFRetain(v37);
      if (v41)
        CFRelease(v41);
      v36 = keyManager_ensureMovieIDInternal((_QWORD *)a1, (const __CFData *)v33, (CFArrayRef)v37);
      if (!(_DWORD)v36)
      {
        if (!v9[96])
        {
          v23 = 0;
          goto LABEL_49;
        }
        v36 = keyManager_processOfflineKeyInternal((_QWORD *)a1, (uint64_t)v9, 6);
      }
    }
    else
    {
LABEL_47:
      v36 = FigSignalErrorAt();
    }
    v23 = v36;
LABEL_49:
    CFRelease(v27);
    goto LABEL_32;
  }
  v9[80] = CFBooleanGetValue((CFBooleanRef)a4);
  if (dword_1EE2A3080)
  {
    v44 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v11 = v44;
    if (os_log_type_enabled(v10, type))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if (v12)
    {
      v13 = *((_QWORD *)v9 + 3);
      v14 = v9[80];
      v45 = 136315906;
      v46 = "keyManager_setPropertyForEntryInternal";
      v47 = 2048;
      v48 = a1;
      v49 = 2114;
      v50 = v13;
      v51 = 1024;
      LODWORD(v52) = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_31:
  v23 = 0;
LABEL_32:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t PKDKeyManagerCopyPropertyForKeyID(uint64_t a1, void *a2, const void *a3, CFDataRef *a4)
{
  uint64_t v8;
  void *v9;
  CFTypeRef *v10;
  const void *UInt32;
  uint64_t v12;
  uint64_t PackagedPersistentKeyFromEntryInternal;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const void **v22;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v25;
  int v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  const void *v33;
  __int16 v34;
  CFDataRef *v35;
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if (!(_DWORD)v8)
  {
    v9 = (void *)cf;
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA3238]))
    {
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      if (*((_BYTE *)v9 + 80))
        v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      *a4 = (CFDataRef)CFRetain(*v10);
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31F8]))
    {
      UInt32 = (const void *)*((_QWORD *)v9 + 11);
      if (UInt32)
      {
LABEL_12:
        UInt32 = CFRetain(UInt32);
LABEL_13:
        v12 = 0;
        *a4 = (CFDataRef)UInt32;
        goto LABEL_17;
      }
      v12 = 4294955137;
      goto LABEL_17;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
    {
      PackagedPersistentKeyFromEntryInternal = keyManager_createPackagedPersistentKeyFromEntryInternal(a1, (const void **)v9, a4);
LABEL_16:
      v12 = PackagedPersistentKeyFromEntryInternal;
      goto LABEL_17;
    }
    if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA3220]))
    {
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31E0]))
      {
        UInt32 = (const void *)*((_QWORD *)v9 + 15);
        if (!UInt32)
          goto LABEL_13;
        goto LABEL_12;
      }
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31A8]))
      {
        UInt32 = (const void *)*((_QWORD *)v9 + 5);
        if (!UInt32)
          goto LABEL_13;
        goto LABEL_12;
      }
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA31D0]))
      {
        v21 = *((_QWORD *)v9 + 9);
        if (v21 && jSNXSLgDwR(v21) == -42656)
          v22 = (const void **)MEMORY[0x1E0C9AE50];
        else
          v22 = (const void **)MEMORY[0x1E0C9AE40];
        UInt32 = *v22;
        goto LABEL_12;
      }
      v12 = 4294954512;
LABEL_17:
      if (dword_1EE2A3080)
      {
        v25 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v15 = v25;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v16 = v15;
        else
          v16 = v15 & 0xFFFFFFFE;
        if (v16)
        {
          if (v9)
            v17 = *((_QWORD *)v9 + 3);
          else
            v17 = 0;
          v26 = 136316162;
          v27 = "keyManager_copyPropertyForEntryInternal";
          v28 = 2048;
          v29 = a1;
          v30 = 2114;
          v31 = v17;
          v32 = 2114;
          v33 = a3;
          v34 = 2048;
          v35 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_28;
    }
    v36[0] = 0;
    if (!*((_BYTE *)v9 + 148))
    {
      PackagedPersistentKeyFromEntryInternal = keyManager_ensureDecryptContextForEntryInternal((_QWORD *)a1, (uint64_t)v9, 0);
      if ((_DWORD)PackagedPersistentKeyFromEntryInternal)
        goto LABEL_16;
      v19 = *((_QWORD *)v9 + 9);
      if (v19)
      {
        PackagedPersistentKeyFromEntryInternal = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 32)
                                                                                              + 120))(v19, v36);
        if ((_DWORD)PackagedPersistentKeyFromEntryInternal)
          goto LABEL_16;
        if (v36[0] == 0x285A0863BBA8E1D3)
          v20 = 2;
        else
          v20 = v36[0] == 0x40791AC78BD5C571;
        *((_DWORD *)v9 + 36) = v20;
        *((_BYTE *)v9 + 148) = 1;
      }
      else
      {
        PackagedPersistentKeyFromEntryInternal = FigSignalErrorAt();
        if ((_DWORD)PackagedPersistentKeyFromEntryInternal)
          goto LABEL_16;
      }
    }
    UInt32 = (const void *)FigCFNumberCreateUInt32();
    goto LABEL_13;
  }
  v12 = v8;
LABEL_28:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t PKDKeyManagerCreatePackagedPersistentKeyForKeyID(uint64_t a1, void *a2, uint64_t a3, CFDataRef *a4)
{
  uint64_t PackagedPersistentKeyFromEntryInternal;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  PackagedPersistentKeyFromEntryInternal = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
  if (!(_DWORD)PackagedPersistentKeyFromEntryInternal)
    PackagedPersistentKeyFromEntryInternal = keyManager_createPackagedPersistentKeyFromEntryInternal(a1, (const void **)cf, a4);
  v8 = PackagedPersistentKeyFromEntryInternal;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t keyManager_createPackagedPersistentKeyFromEntryInternal(uint64_t a1, const void **a2, CFDataRef *a3)
{
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  int v8;
  const void **v9;
  CFDataRef Data;
  uint64_t v11;

  if (!a2[11])
    return FigSignalErrorAt();
  if (!a2[5])
    return FigSignalErrorAt();
  if (!a2[6])
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4D40], a2[11]);
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA4D10], a2[5]);
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA4D48], a2[6]);
  v8 = FigCFEqual();
  v9 = (const void **)MEMORY[0x1E0CA4D80];
  if (!v8)
    v9 = (const void **)MEMORY[0x1E0CA4D88];
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA4D90], *v9);
  Data = CFPropertyListCreateData(v5, v7, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    v11 = 0;
    *a3 = Data;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  CFRelease(v7);
  return v11;
}

uint64_t PKDKeyManagerGetMovieID(_QWORD *a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const __CFData *Value;
  const __CFData *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  uint64_t v10;

  if (!a1)
    return FigSignalErrorAt();
  if (!theDict)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  Value = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D10]);
  if (!Value)
    return FigSignalErrorAt();
  v7 = Value;
  v8 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4D48]);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  MEMORY[0x19402EEEC](a1[2]);
  v10 = keyManager_ensureMovieIDInternal(a1, v7, v9);
  if (!(_DWORD)v10)
    *a3 = a1[5];
  MEMORY[0x19402EF04](a1[2]);
  return v10;
}

uint64_t keyManager_ensureMovieIDInternal(_QWORD *a1, const __CFData *a2, CFArrayRef theArray)
{
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  char *v9;
  CFIndex v10;
  char *v11;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v13;
  CFTypeID v14;
  uint64_t (*v15)(const UInt8 *, CFIndex, char *, CFIndex, _QWORD *);
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v18;
  CFStringRef v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v22[23];

  v22[21] = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || !theArray)
    return FigSignalErrorAt();
  if (a1[5])
    return 0;
  v22[0] = 0;
  Count = CFArrayGetCount(theArray);
  v8 = Count;
  if ((_DWORD)Count)
  {
    v9 = (char *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
    v10 = 0;
    v11 = v9;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v10);
      if (!ValueAtIndex)
        break;
      v13 = ValueAtIndex;
      v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFNumberGetTypeID() || !CFNumberGetValue(v13, kCFNumberSInt32Type, v11))
        break;
      ++v10;
      v11 += 4;
      if (v8 == v10)
      {
        v15 = *(uint64_t (**)(const UInt8 *, CFIndex, char *, CFIndex, _QWORD *))(a1[4] + 8);
        BytePtr = CFDataGetBytePtr(a2);
        Length = CFDataGetLength(a2);
        v18 = v15(BytePtr, Length, v9, v8, v22);
        if ((_DWORD)v18)
          goto LABEL_21;
        v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%llu"), v22[0]);
        a1[12] = v19;
        if (v19)
        {
          v6 = 0;
          a1[5] = v22[0];
          goto LABEL_16;
        }
        break;
      }
    }
    v18 = FigSignalErrorAt();
LABEL_21:
    v6 = v18;
  }
  else
  {
    v9 = 0;
    v6 = 0;
  }
LABEL_16:
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  free(v9);
  return v6;
}

uint64_t KeyManagerCreateStopSPC(uint64_t a1, const __CFData *a2, const __CFArray *a3, const void *a4, CFStringRef theString, _QWORD *a6)
{
  uint64_t v12;
  uint64_t KeyRequestForEntryInternal;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  _BYTE usedBufLen[12];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const __CFData *v23;
  __int16 v24;
  const __CFArray *v25;
  __int16 v26;
  const void *v27;
  __int16 v28;
  CFStringRef v29;
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  int v33;
  UInt8 buffer[8];
  _QWORD v35[17];
  CFRange v36;

  v35[15] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buffer = 0;
  v35[0] = 0;
  *(_QWORD *)((char *)v35 + 5) = 0;
  v18 = 0;
  *(_QWORD *)usedBufLen = 0;
  if (theString
    && (v36.length = CFStringGetLength(theString),
        v36.location = 0,
        CFStringGetBytes(theString, v36, 0x600u, 0, 0, buffer, 21, (CFIndex *)usedBufLen) >= 1))
  {
    buffer[*(_QWORD *)usedBufLen] = 0;
    sscanf((const char *)buffer, "%llu", &v18);
    v12 = v18;
    if (!a1)
      goto LABEL_18;
  }
  else
  {
    v12 = 0;
    if (!a1)
      goto LABEL_18;
  }
  if (a2 && a3 && a6)
  {
    *a6 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 40) = v12;
    KeyRequestForEntryInternal = keyManager_createKeyRequestForEntryInternal((_QWORD *)a1, 0, a2, a3, a4, 0, 0, 0, 0, a6);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    goto LABEL_10;
  }
LABEL_18:
  KeyRequestForEntryInternal = FigSignalErrorAt();
LABEL_10:
  if (dword_1EE2A3080)
  {
    LODWORD(v18) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v15 = v18;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if (v16)
    {
      *(_DWORD *)usedBufLen = 136316930;
      *(_QWORD *)&usedBufLen[4] = "KeyManagerCreateStopSPC";
      v20 = 2048;
      v21 = a1;
      v22 = 2112;
      v23 = a2;
      v24 = 2112;
      v25 = a3;
      v26 = 2112;
      v27 = a4;
      v28 = 2112;
      v29 = theString;
      v30 = 2048;
      v31 = a6;
      v32 = 1024;
      v33 = KeyRequestForEntryInternal;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return KeyRequestForEntryInternal;
}

uint64_t KeyManagerSetSecureStopManager(uint64_t a1, const void *a2)
{
  const void *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    v4 = *(const void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = a2;
    CFRetain(a2);
    if (v4)
      CFRelease(v4);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5;
}

uint64_t PKDKeyManagerGetKeyRequestStateAndID(uint64_t a1, void *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
  if (!(_DWORD)v8)
  {
    if (a3)
      *a3 = *((_DWORD *)cf[0] + 42);
    if (a4)
      *a4 = *((_QWORD *)cf[0] + 22);
    if (dword_1EE2A3080)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf[0])
    CFRelease(cf[0]);
  return v8;
}

uint64_t PKDKeyManagerTestAndSetKeyRequestState(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, char *a5, _QWORD *a6)
{
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;
  NSObject *v18;
  char v20;
  CFTypeRef cf[29];

  cf[27] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    v12 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
    if ((_DWORD)v12)
    {
      v17 = 0;
      v20 = 0;
    }
    else
    {
      v13 = cf[0];
      if (*((_DWORD *)cf[0] + 42) == a3)
      {
        *((_DWORD *)cf[0] + 42) = a4;
        if (a4 >= a3)
        {
          v14 = a4;
        }
        else
        {
          keyManager_resetKeyRequestContextForEntryInternal(a1, (uint64_t)v13);
          v13 = cf[0];
          v14 = *((_DWORD *)cf[0] + 42);
        }
        if (v14 == 2 && (v15 = PKDGetNewRequestID(), v13 = cf[0], *((_QWORD *)cf[0] + 22) = v15, dword_1EE2A3080))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          v20 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v13 = cf[0];
        }
        else
        {
          v20 = 1;
        }
      }
      else
      {
        v20 = 0;
      }
      v17 = v13[22];
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  }
  else
  {
    v12 = FigSignalErrorAt();
    v17 = 0;
    v20 = 0;
  }
  if (dword_1EE2A3080)
  {
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a5)
    *a5 = v20;
  if (a6)
    *a6 = v17;
  if (cf[0])
    CFRelease(cf[0]);
  return v12;
}

void keyManager_resetKeyRequestContextForEntryInternal(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (*(_QWORD *)(a2 + 64))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
    *(_QWORD *)(a2 + 64) = 0;
  }
  v3 = *(const void **)(a2 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a2 + 56) = 0;
  }
  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v5 = *(const void **)(a2 + 88);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a2 + 88) = 0;
  }
  v6 = *(const void **)(a2 + 104);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a2 + 104) = 0;
  }
  v7 = *(const void **)(a2 + 112);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a2 + 112) = 0;
  }
  v8 = *(const void **)(a2 + 152);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a2 + 152) = 0;
  }
  v9 = *(const void **)(a2 + 160);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a2 + 160) = 0;
  }
  *(_QWORD *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 80) = 0;
}

uint64_t PKDKeyManagerSetKeyRequestError(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    v6 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
    if (!(_DWORD)v6)
    {
      v7 = cf[0];
      *((_DWORD *)cf[0] + 42) = 1;
      v8 = (const void *)v7[15];
      v7[15] = a3;
      CFRetain(a3);
      if (v8)
        CFRelease(v8);
      keyManager_resetKeyRequestContextForEntryInternal(a1, (uint64_t)cf[0]);
      v9 = *((_QWORD *)cf[0] + 16);
      if (v9)
      {
        while (1)
        {
          v10 = *(_QWORD *)(v9 + 40);
          if (!*(_QWORD *)v9 || !*(_QWORD *)(v9 + 32) || !*(_QWORD *)(v9 + 24))
            break;
          v11 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040A8D76046uLL);
          if (!v11)
          {
            FigSignalErrorAt();
            goto LABEL_17;
          }
          v12 = FigCFWeakReferenceHolderCopyReferencedObject();
          *(_QWORD *)v11 = v12;
          if (!v12)
            goto LABEL_17;
          v13 = *(_OWORD *)(v9 + 8);
          *((_QWORD *)v11 + 5) = *(_QWORD *)(v9 + 24);
          *(_OWORD *)(v11 + 24) = v13;
          *((_QWORD *)v11 + 2) = CFRetain(a3);
          dispatch_async_f(*(dispatch_queue_t *)v9, v11, (dispatch_function_t)keyManager_dispatchKeyRequestErrorOccurredCallback);
LABEL_14:
          v9 = v10;
          if (!v10)
            goto LABEL_19;
        }
        v11 = 0;
LABEL_17:
        keyManager_releaseCallbackContext((const void **)v11);
        goto LABEL_14;
      }
    }
LABEL_19:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v6;
}

uint64_t PKDKeyManagerAbsorbKeyRequestContext(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  CFTypeRef v26;
  void *v27;
  uint64_t v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void *value;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  value = 0;
  cf[0] = 0;
  v32 = 0;
  v33 = 0;
  if (!a1 || !a2 || !a3 || !a4)
    goto LABEL_35;
  v33 = &v32;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a3, 1, (uint64_t *)cf);
  if ((_DWORD)v8)
  {
    v28 = v8;
    v31 = *(_QWORD *)(a1 + 16);
    goto LABEL_38;
  }
  v9 = *((_QWORD *)cf[0] + 16);
  if (v9)
  {
    v10 = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v12 = v9;
      v9 = *(_QWORD *)(v9 + 40);
      v13 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v13)
        goto LABEL_13;
      v14 = (const void *)v13;
      v15 = CFAllocatorAllocate(v11, 56, 0);
      if (!v15)
        goto LABEL_18;
      v16 = v15;
      v15[6] = 0;
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)v15 = 0u;
      dispatch_retain(*(dispatch_object_t *)v12);
      *v16 = *(_QWORD *)v12;
      v17 = *(_OWORD *)(v12 + 8);
      v16[3] = *(_QWORD *)(v12 + 24);
      *(_OWORD *)(v16 + 1) = v17;
      v18 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v16[4] = v18;
      if (v18)
      {
        v19 = 0;
        v10 = v16;
      }
      else
      {
LABEL_18:
        v19 = FigSignalErrorAt();
      }
      CFRelease(v14);
      if (!v19)
      {
LABEL_13:
        if (v10)
        {
          v10[5] = 0;
          v20 = v33;
          v10[6] = v33;
          *v20 = (uint64_t)v10;
          v33 = v10 + 5;
        }
      }
    }
    while (v9);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (!cf[0])
  {
LABEL_35:
    v28 = FigSignalErrorAt();
    goto LABEL_28;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 16));
  v21 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a2, a4, 1, (uint64_t *)&value);
  if (!(_DWORD)v21)
  {
    v22 = v32;
    if (v32)
    {
      do
      {
        v23 = *(_QWORD *)(v22 + 40);
        v24 = *(_QWORD **)(v22 + 48);
        if (v23)
        {
          *(_QWORD *)(v23 + 48) = v24;
          v24 = *(_QWORD **)(v22 + 48);
        }
        else
        {
          v33 = *(uint64_t **)(v22 + 48);
        }
        *v24 = v23;
        *(_QWORD *)(v22 + 40) = 0;
        v25 = (_QWORD *)*((_QWORD *)value + 17);
        *(_QWORD *)(v22 + 48) = v25;
        *v25 = v22;
        *((_QWORD *)value + 17) = v22 + 40;
        v22 = v23;
      }
      while (v23);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 16));
    if (value)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
      *((_QWORD *)value + 19) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v26 = CFRetain(a4);
      v27 = value;
      *((_QWORD *)value + 20) = v26;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 88), a3, v27);
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
      v28 = 0;
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  v28 = v21;
  v31 = *(_QWORD *)(a2 + 16);
LABEL_38:
  MEMORY[0x19402EF04](v31);
LABEL_28:
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (value)
    CFRelease(value);
  return v28;
}

uint64_t PKDKeyManagerInstallCallbacksForKeyID(uint64_t a1, void *a2, uint64_t a3, NSObject *a4, __int128 *a5)
{
  uint64_t v10;
  _QWORD *v11;
  NSObject **v12;
  NSObject **v13;
  __int128 v14;
  uint64_t v15;
  NSObject ***v16;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v10 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 0, (uint64_t *)&cf);
  if (!(_DWORD)v10 && a3 && a4 && a5)
  {
    v11 = cf;
    v12 = (NSObject **)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 56, 0);
    if (!v12)
      goto LABEL_14;
    v13 = v12;
    v12[6] = 0;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *(_OWORD *)v12 = 0u;
    dispatch_retain(a4);
    *v13 = a4;
    v14 = *a5;
    v13[3] = *((_QWORD *)a5 + 2);
    *(_OWORD *)(v13 + 1) = v14;
    v15 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v13[4] = v15;
    if (v15)
    {
      v10 = 0;
      v13[5] = 0;
      v16 = (NSObject ***)v11[17];
      v13[6] = v16;
      *v16 = v13;
      v11[17] = v13 + 5;
    }
    else
    {
LABEL_14:
      v10 = FigSignalErrorAt();
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t PKDKeyManagerInvalidate(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v2 = keyManager_invalidateInternal(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t keyManager_invalidateInternal(uint64_t a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t KeyRequestForEntryInternal;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef);
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (*(_BYTE *)(a1 + 24))
    return 0;
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 88)))
  {
    v6 = 4294955138;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      if (dword_1EE2A3080)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v2 = *(_QWORD *)(a1 + 40);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(v2);
    }
    *(_BYTE *)(a1 + 24) = 1;
    if (!*(_BYTE *)(a1 + 112) || !*(_QWORD *)(a1 + 120))
    {
      v6 = 0;
      goto LABEL_17;
    }
    KeyRequestForEntryInternal = keyManager_createKeyRequestForEntryInternal((_QWORD *)a1, 0, *(const __CFData **)(a1 + 48), *(CFArrayRef *)(a1 + 56), *(const void **)(a1 + 64), 0, 0, 0, 0, cf);
    if ((_DWORD)KeyRequestForEntryInternal)
      goto LABEL_15;
    if (dword_1EE2A3080)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v7 = *(_QWORD *)(a1 + 120);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = **(_QWORD **)(a1 + 32);
    v13 = a1 + 72;
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(_QWORD *)(v13 + 8);
    v14 = cf[0];
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v15)
    {
      KeyRequestForEntryInternal = v15(v7, v8, v9, v12, v10, v11, v14);
LABEL_15:
      v6 = KeyRequestForEntryInternal;
      goto LABEL_17;
    }
    v6 = 4294954514;
  }
LABEL_17:
  if (cf[0])
    CFRelease(cf[0]);
  return v6;
}

uint64_t PKDKeyManagerCreateForPastis(uint64_t a1, const __CFDictionary *a2)
{
  void *APIProviderForID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v5[23];

  v5[22] = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  if (!keyManager_createInternal(a1, a2, v5))
  {
    APIProviderForID = APIProviderGetAPIProviderForID(CFSTR("F19BF03B-7470-41A4-9655-86D078307D59"));
    *(_QWORD *)(v5[0] + 32) = APIProviderForID;
  }
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5[0];
}

uint64_t keyManager_createInternal(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const void *Value;
  uint64_t v10;
  __int128 v12;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  v12 = xmmword_1E2F9DB88;
  if (keyManager_getTypeID_once != -1)
    dispatch_once_f(&keyManager_getTypeID_once, &v12, (dispatch_function_t)CFRuntimeClassRegisterOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = (_QWORD *)Instance;
  v7 = FigSimpleMutexCreate();
  v6[2] = v7;
  if (v7
    && (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v6[11] = Mutable) != 0))
  {
    if (a2)
    {
      Value = CFDictionaryGetValue(a2, CFSTR("AuditToken"));
      if (Value)
        Value = CFRetain(Value);
      v6[13] = Value;
    }
    v10 = 0;
    *a3 = v6;
  }
  else
  {
    v10 = FigSignalErrorAt();
    CFRelease(v6);
  }
  return v10;
}

void *APIProviderGetAPIProviderForID(void *a1)
{
  void *v1;
  dispatch_once_t *v3;
  void (__cdecl *v4)(void *);

  v1 = a1;
  if (!a1)
  {
    FigSignalErrorAt();
    return v1;
  }
  if (!FigCFEqual())
  {
    if (!FigCFEqual())
      return 0;
    if (APIProviderGetAPIProviderForID_pastisMSEProviderOnce == -1)
      return &APIProviderGetAPIProviderForID_pastisMSEProvider;
    v3 = &APIProviderGetAPIProviderForID_pastisMSEProviderOnce;
    v1 = &APIProviderGetAPIProviderForID_pastisMSEProvider;
    v4 = (void (__cdecl *)(void *))InitAPIProviderForMSE;
LABEL_13:
    dispatch_once_f(v3, v1, v4);
    return v1;
  }
  if (APIProviderGetAPIProviderForID_pastisProviderOnce != -1)
  {
    v3 = &APIProviderGetAPIProviderForID_pastisProviderOnce;
    v1 = &APIProviderGetAPIProviderForID_pastisProvider;
    v4 = (void (__cdecl *)(void *))InitAPIProviderForPastis;
    goto LABEL_13;
  }
  return &APIProviderGetAPIProviderForID_pastisProvider;
}

uint64_t PKDKeyManagerCreateForMSE(uint64_t a1, const __CFDictionary *a2)
{
  void *APIProviderForID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v5[23];

  v5[22] = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  if (!keyManager_createInternal(a1, a2, v5))
  {
    APIProviderForID = APIProviderGetAPIProviderForID(CFSTR("EC396D13-FB13-4993-9D0D-71518ACF3D6F"));
    *(_QWORD *)(v5[0] + 32) = APIProviderForID;
  }
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5[0];
}

double keyManagerEntry_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void keyManagerEntry_finalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 168) = 0;
  if (*(_QWORD *)(a1 + 72))
  {
    (*(void (**)(void))(*(_QWORD *)(v2 + 32) + 80))();
    *(_QWORD *)(a1 + 72) = 0;
  }
  keyManager_resetKeyRequestContextForEntryInternal(v2, a1);
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = *(const void **)(a1 + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v7 = *(const void **)(a1 + 120);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v10 = *(_QWORD *)(v8 + 40);
      if (*(_QWORD *)v8)
      {
        dispatch_release(*(dispatch_object_t *)v8);
        *(_QWORD *)v8 = 0;
      }
      v11 = *(const void **)(v8 + 32);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v8 + 32) = 0;
      }
      v12 = *(_QWORD *)(v8 + 40);
      v13 = *(_QWORD **)(v8 + 48);
      if (v12)
      {
        *(_QWORD *)(v12 + 48) = v13;
        v13 = *(_QWORD **)(v8 + 48);
      }
      else
      {
        *(_QWORD *)(a1 + 136) = v13;
      }
      *v13 = v12;
      CFAllocatorDeallocate(v9, (void *)v8);
      v8 = v10;
    }
    while (v10);
  }
}

uint64_t CFRuntimeClassRegisterOnce(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t keyManager_processOfflineKeyInternal(_QWORD *a1, uint64_t a2, int a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const __CFDictionary *v8;
  const void *v9;
  uint64_t v10;
  uint64_t PackagedPersistentKeyFromEntryInternal;
  const void *v12;
  const void *Value;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a1[5] || (a3 & 0xFFFFFFFD) != 4)
  {
    v24 = FigSignalErrorAt();
    v8 = 0;
    Mutable = 0;
    goto LABEL_44;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v24 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_44;
  }
  v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v8)
    goto LABEL_57;
  CFDictionarySetValue(Mutable, CFSTR("igoeg"), *(const void **)(a2 + 88));
  v9 = (const void *)a1[13];
  if (v9)
    CFDictionarySetValue(Mutable, CFSTR("lGxB4ky"), v9);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt64();
  v10 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(a1[4] + 64))(Mutable, v8);
  if ((_DWORD)v10)
  {
    PackagedPersistentKeyFromEntryInternal = keyManager_cleanFairPlayStateIfNecessary((uint64_t)a1, v10);
    if ((_DWORD)PackagedPersistentKeyFromEntryInternal)
      goto LABEL_58;
    PackagedPersistentKeyFromEntryInternal = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(a1[4] + 64))(Mutable, v8);
    if ((_DWORD)PackagedPersistentKeyFromEntryInternal)
      goto LABEL_58;
  }
  if (a3 != 4)
  {
    if (a3 == 6)
    {
      v12 = *(const void **)(a2 + 104);
      Value = CFDictionaryGetValue(v8, CFSTR("sPJ8AGu5PT"));
      *(_QWORD *)(a2 + 104) = Value;
      if (Value)
        CFRetain(Value);
      if (v12)
        CFRelease(v12);
      if (!*(_QWORD *)(a2 + 104))
        goto LABEL_57;
      v14 = *(const void **)(a2 + 112);
      v15 = CFDictionaryGetValue(v8, CFSTR("o9YYYJ64ntzC"));
      *(_QWORD *)(a2 + 112) = v15;
      if (v15)
        CFRetain(v15);
      if (v14)
        CFRelease(v14);
      if (!*(_QWORD *)(a2 + 112))
        goto LABEL_57;
    }
    goto LABEL_25;
  }
  v28 = 0;
  if (FigCFDictionaryGetInt64IfPresent())
  {
    *(_QWORD *)(a2 + 72) = v28;
  }
  else if (*(_QWORD *)(a2 + 72))
  {
LABEL_25:
    v16 = CFDictionaryGetValue(v8, CFSTR("igoeg"));
    if (!v16)
      goto LABEL_43;
    v17 = *(const void **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = v16;
    CFRetain(v16);
    if (v17)
      CFRelease(v17);
    PackagedPersistentKeyFromEntryInternal = keyManager_createPackagedPersistentKeyFromEntryInternal((uint64_t)a1, (const void **)a2, (CFDataRef *)&cf);
    if ((_DWORD)PackagedPersistentKeyFromEntryInternal)
      goto LABEL_58;
    v18 = *(_QWORD *)(a2 + 128);
    if (!v18)
    {
LABEL_43:
      v24 = 0;
      goto LABEL_44;
    }
    v19 = cf;
    while (1)
    {
      v20 = *(_QWORD *)(v18 + 40);
      if (!*(_QWORD *)v18 || !*(_QWORD *)(v18 + 32))
        break;
      v21 = 0;
      if (!v19 || !*(_QWORD *)(v18 + 16))
        goto LABEL_42;
      v21 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040A8D76046uLL);
      if (!v21)
      {
        FigSignalErrorAt();
        goto LABEL_42;
      }
      v22 = FigCFWeakReferenceHolderCopyReferencedObject();
      *(_QWORD *)v21 = v22;
      if (!v22)
        goto LABEL_42;
      v23 = *(_OWORD *)(v18 + 8);
      *((_QWORD *)v21 + 5) = *(_QWORD *)(v18 + 24);
      *(_OWORD *)(v21 + 24) = v23;
      *((_QWORD *)v21 + 1) = CFRetain(v19);
      dispatch_async_f(*(dispatch_queue_t *)v18, v21, (dispatch_function_t)keyManager_dispatchPersistentKeyUpdatedCallback);
LABEL_38:
      v18 = v20;
      if (!v20)
        goto LABEL_43;
    }
    v21 = 0;
LABEL_42:
    keyManager_releaseCallbackContext((const void **)v21);
    goto LABEL_38;
  }
LABEL_57:
  PackagedPersistentKeyFromEntryInternal = FigSignalErrorAt();
LABEL_58:
  v24 = PackagedPersistentKeyFromEntryInternal;
LABEL_44:
  if (dword_1EE2A3080)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  if (cf)
    CFRelease(cf);
  return v24;
}

uint64_t keyManager_processOnlineKeyInternal(uint64_t a1, uint64_t a2, int a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFMutableDictionaryRef v9;
  const __CFDictionary *v10;
  const void *v11;
  const void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  NSObject *v18;
  NSObject *v19;
  const void *v20;
  const void *Value;
  NSObject *v22;
  const void *v23;
  const void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v28;

  if (!*(_QWORD *)(a2 + 64))
    return FigSignalErrorAt();
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v9)
  {
    v10 = v9;
    if (a3 == 2)
    {
      v11 = *(const void **)(a2 + 88);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(a2 + 88) = 0;
      }
      v12 = *(const void **)(a1 + 104);
      if (v12)
        CFDictionarySetValue(v8, CFSTR("lGxB4ky"), v12);
    }
    if (*(_QWORD *)(a2 + 72))
      FigCFDictionarySetInt64();
    CFDictionarySetValue(v8, CFSTR("RulIk"), *(const void **)(a2 + 56));
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt64();
    if (dword_1EE2A3080)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(*(_QWORD *)(a1 + 32) + 64))(v8, v10);
    if ((_DWORD)v14)
    {
      v15 = keyManager_cleanFairPlayStateIfNecessary(a1, v14);
      if ((_DWORD)v15)
        goto LABEL_52;
      v15 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(*(_QWORD *)(a1 + 32) + 64))(v8, v10);
      if ((_DWORD)v15)
        goto LABEL_52;
    }
    switch(a3)
    {
      case 1:
        if (FigCFDictionaryGetInt64IfPresent())
          *(_QWORD *)(a2 + 72) = 0;
        if (dword_1EE2A3080)
        {
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_QWORD *)(a2 + 72))
          goto LABEL_51;
        break;
      case 3:
        v20 = *(const void **)(a2 + 104);
        Value = CFDictionaryGetValue(v10, CFSTR("sPJ8AGu5PT"));
        *(_QWORD *)(a2 + 104) = Value;
        if (Value)
          CFRetain(Value);
        if (v20)
          CFRelease(v20);
        if (dword_1EE2A3080)
        {
          v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_QWORD *)(a2 + 104))
          goto LABEL_51;
        v23 = *(const void **)(a2 + 112);
        v24 = CFDictionaryGetValue(v10, CFSTR("o9YYYJ64ntzC"));
        *(_QWORD *)(a2 + 112) = v24;
        if (v24)
          CFRetain(v24);
        if (v23)
          CFRelease(v23);
        if (dword_1EE2A3080)
        {
          v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_QWORD *)(a2 + 112))
          goto LABEL_51;
        break;
      case 2:
        v16 = *(const void **)(a2 + 88);
        v17 = CFDictionaryGetValue(v10, CFSTR("igoeg"));
        *(_QWORD *)(a2 + 88) = v17;
        if (v17)
          CFRetain(v17);
        if (v16)
          CFRelease(v16);
        if (dword_1EE2A3080)
        {
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_QWORD *)(a2 + 88))
        {
LABEL_51:
          v15 = FigSignalErrorAt();
LABEL_52:
          v26 = v15;
          goto LABEL_48;
        }
        break;
    }
    v26 = 0;
LABEL_48:
    CFRelease(v8);
    CFRelease(v10);
    return v26;
  }
  v28 = FigSignalErrorAt();
  CFRelease(v8);
  return v28;
}

uint64_t keyManager_cleanFairPlayStateIfNecessary(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a2 == -42670 || (_DWORD)a2 == -42786)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    v5 = fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 112))(v5);
    a2 = 0;
    if ((_DWORD)v6)
    {
      v8 = v6;
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v8;
    }
  }
  return a2;
}

void keyManager_dispatchPersistentKeyUpdatedCallback(const void **a1)
{
  void (*v2)(const void *, const void *);

  v2 = (void (*)(const void *, const void *))a1[4];
  if (v2)
    v2(*a1, a1[1]);
  keyManager_releaseCallbackContext(a1);
}

void keyManager_releaseCallbackContext(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t keyManager_ensureDecryptContextForEntryInternal(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  if (*(_BYTE *)(a2 + 96))
    return 0;
  v7 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  if (v6)
  {
    if (!v7)
    {
LABEL_11:
      if (*(_BYTE *)(a2 + 80) && !v6 && *(_QWORD *)(a2 + 88))
      {
LABEL_14:
        if (*(_QWORD *)(a2 + 88))
        {
          v8 = keyManager_processOfflineKeyInternal(a1, a2, 4);
LABEL_19:
          v9 = v8;
          if (*(_QWORD *)(a2 + 64))
          {
            (*(void (**)(void))(a1[4] + 72))();
            *(_QWORD *)(a2 + 64) = 0;
          }
          v10 = *(const void **)(a2 + 56);
          if (v10)
          {
            CFRelease(v10);
            *(_QWORD *)(a2 + 56) = 0;
          }
          if (!a3 || (_DWORD)v9)
            return v9;
          v6 = *(_QWORD *)(a2 + 72);
          goto LABEL_26;
        }
LABEL_18:
        v8 = keyManager_processOnlineKeyInternal((uint64_t)a1, a2, 1);
        goto LABEL_19;
      }
      if (a3)
      {
LABEL_26:
        v9 = 0;
        *a3 = v6;
        return v9;
      }
      return 0;
    }
LABEL_7:
    if (*(_QWORD *)(a2 + 56))
    {
      if (!*(_BYTE *)(a2 + 80))
        goto LABEL_18;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if (v7)
  {
    if (*(_QWORD *)(a2 + 56))
      goto LABEL_7;
  }
  else if (*(_QWORD *)(a2 + 88))
  {
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

void keyManager_dispatchKeyRequestErrorOccurredCallback(const void **a1)
{
  void (*v2)(const void *, const void *);

  v2 = (void (*)(const void *, const void *))a1[5];
  if (v2)
    v2(*a1, a1[2]);
  keyManager_releaseCallbackContext(a1);
}

double keyManager_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t keyManager_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  MEMORY[0x19402EEEC](a1[2]);
  keyManager_invalidateInternal((uint64_t)a1);
  v2 = (const void *)a1[6];
  if (v2)
  {
    CFRelease(v2);
    a1[6] = 0;
  }
  v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
    a1[9] = 0;
  }
  v6 = (const void *)a1[10];
  if (v6)
  {
    CFRelease(v6);
    a1[10] = 0;
  }
  v7 = (const void *)a1[12];
  if (v7)
  {
    CFRelease(v7);
    a1[12] = 0;
  }
  v8 = (const void *)a1[15];
  if (v8)
  {
    CFRelease(v8);
    a1[15] = 0;
  }
  v9 = (const void *)a1[13];
  if (v9)
  {
    CFRelease(v9);
    a1[13] = 0;
  }
  v10 = (const void *)a1[11];
  if (v10)
  {
    CFRelease(v10);
    a1[11] = 0;
  }
  MEMORY[0x19402EF04](a1[2]);
  return FigSimpleMutexDestroy();
}

CFTypeRef InitAPIProviderForPastis(_QWORD *a1)
{
  CFTypeRef result;

  *a1 = CFSTR("F19BF03B-7470-41A4-9655-86D078307D59");
  a1[1] = Qhl17oSYJtCJIxM;
  a1[2] = MzdSdcDIXg8COV;
  a1[3] = jomCL4mkolcRMRSf;
  a1[4] = NShFxR7kzzF227Pf;
  a1[6] = ZZUDP2EEn9tLDQ;
  a1[7] = C956s6fM;
  a1[9] = JE2f6WCx;
  a1[10] = N8pdwAfn;
  a1[14] = wnFx1xLULXLA;
  a1[15] = i2DzSgbBIIe95gyG0gW;
  result = PKDCopyDisposeStorageAllocator();
  a1[16] = result;
  a1[11] = MYiCHr2n1RFBPK6tHo;
  a1[12] = Li197SADabUVzZISmm;
  a1[5] = pC3lVfLuVJLMz;
  a1[8] = gojqbvrX305gQO;
  return result;
}

CFTypeRef InitAPIProviderForMSE(_QWORD *a1)
{
  CFTypeRef result;

  *a1 = CFSTR("EC396D13-FB13-4993-9D0D-71518ACF3D6F");
  a1[1] = V2qUlL4PZ5VKVXDsUHg5z;
  a1[2] = WuLaQ4nIoKwZC7KxU;
  a1[3] = CUYrBdafj93R3iI1dW;
  a1[4] = uSB01B1R2Urw8Q1;
  a1[6] = fM8WJGMFB;
  a1[7] = N1tFeTVrKXYK;
  a1[9] = JvfqldDvSIjTyuq;
  a1[10] = Y08TTM99sD0XheA;
  a1[14] = wnFx1xLULXLA;
  a1[15] = VCDDnY3lV491XcWac;
  result = PKDMSECopyDisposeStorageAllocator();
  a1[16] = result;
  a1[11] = AguL7jhmAyDI1Bi;
  a1[12] = oHoupA;
  a1[5] = TnhfdPSFlg;
  a1[8] = YuSm1Tar2l;
  return result;
}

uint64_t FigCaptionDecoderGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionDecoderGetClassID_sRegisterFigCaptionDecoderBaseTypeOnce, RegisterFigCaptionDecoderBaseType);
  return sFigCaptionDecoderClassID;
}

uint64_t RegisterFigCaptionDecoderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionDecoderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionDecoder %p]"), a1);
}

uint64_t FigXPCImageQueueGaugeServerAssociateCopiedNeighborImageQueueGauge(_xpc_connection_s *a1)
{
  void *v1;
  uint64_t v2;
  unsigned int v4;

  xpc_connection_get_pid(a1);
  v1 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v1)
  {
    v2 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
    if ((_DWORD)v2)
      free(v1);
  }
  else
  {
    v2 = FigSignalErrorAt();
    if (!(_DWORD)v2)
    {
      v4 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
      if (v4)
        return v4;
      else
        return 0;
    }
  }
  return v2;
}

void DisposeServedImageQueueGaugeState(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t FigXPCImageQueueGaugeServerCopyImageQueueGaugeForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

const void *FigXPCImageQueueGaugeServerHandlesMessagesForObject(const void *result)
{
  CFTypeID v1;

  if (result)
  {
    v1 = CFGetTypeID(result);
    return (const void *)(v1 == FigImageQueueGaugeGetTypeID());
  }
  return result;
}

uint64_t FigXPCImageQueueGaugeServerHandleMessage(const void *a1)
{
  uint64_t result;

  if (!FigXPCImageQueueGaugeServerHandlesMessagesForObject(a1))
    return FigSignalErrorAt();
  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

uint64_t FigXPCImageQueueGaugeServerHandleNoReplyMessage(const void *a1)
{
  uint64_t result;

  if (!FigXPCImageQueueGaugeServerHandlesMessagesForObject(a1))
    return FigSignalErrorAt();
  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

uint64_t FigXPCImageQueueGaugeServerStartAsSubserver(uint64_t a1)
{
  _QWORD block[5];

  if (gImageQueueGaugeServer || !a1)
    return FigSignalErrorAt();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigXPCImageQueueGaugeServerStartAsSubserver_block_invoke;
  block[3] = &__block_descriptor_tmp_57;
  block[4] = a1;
  if (FigXPCImageQueueGaugeServerStartAsSubserver_onceToken != -1)
    dispatch_once(&FigXPCImageQueueGaugeServerStartAsSubserver_onceToken, block);
  return 0;
}

uint64_t FigDataChannelConfigurationGetTypeID()
{
  if (FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce != -1)
    dispatch_once(&FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce, &__block_literal_global_43);
  return FigDataChannelConfigurationGetTypeID_sDataChannelConfigurationTypeID;
}

double dataChannelConfiguration_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void dataChannelConfiguration_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
    a1[7] = 0;
  }
  v7 = (const void *)a1[8];
  if (v7)
  {
    CFRelease(v7);
    a1[8] = 0;
  }
  v8 = (const void *)a1[9];
  if (v8)
  {
    CFRelease(v8);
    a1[9] = 0;
  }
}

uint64_t dataChannelConfiguration_equal()
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    return FigCFEqual() != 0;
  return result;
}

CFHashCode dataChannelConfiguration_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef dataChannelConfiguration_copyDebugDesc(uint64_t a1)
{
  const void *v2;
  CFStringRef v3;

  if (!a1)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[DataChannelConfiguration %p]"), 0);
  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[DataChannelConfiguration <%p|%@>] Resources: %@ Channels: %@ "), a1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 24), v2);
  CFRelease(v2);
  return v3;
}

uint64_t FigDataChannelConfigurationCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  if (a3)
    return dataChannelConfiguration_createDataChannelConfiguration(a1, a2, a3);
  else
    return FigSignalErrorAt();
}

uint64_t dataChannelConfiguration_createDataChannelConfiguration(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  void *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  v17 = 0;
  v18 = 0;
  if (FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce != -1)
    dispatch_once(&FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce, &__block_literal_global_43);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v7 + 16) = Mutable;
  if (Mutable
    && (v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v7 + 24) = v9) != 0)
    && (v10 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v7 + 32) = v10) != 0))
  {
    *(_DWORD *)(v7 + 40) = 0;
    if (a2)
    {
      if (CFDictionaryGetValueIfPresent(a2, CFSTR("LoggingIdentifier"), (const void **)&value))
      {
        v11 = value;
        if (value)
          v11 = (void *)CFRetain(value);
        *(_QWORD *)(v7 + 48) = v11;
      }
      if (CFDictionaryGetValueIfPresent(a2, CFSTR("PlayerLoggingIdentifier"), &cf))
      {
        v12 = cf;
        if (cf)
          v12 = CFRetain(cf);
        *(_QWORD *)(v7 + 56) = v12;
      }
      if (CFDictionaryGetValueIfPresent(a2, CFSTR("PlaybackItemLoggingIdentifier"), &v18))
      {
        v13 = v18;
        if (v18)
          v13 = CFRetain(v18);
        *(_QWORD *)(v7 + 64) = v13;
      }
      if (CFDictionaryGetValueIfPresent(a2, CFSTR("PlaybackItemUniqueInstanceIdentifier"), &v17))
      {
        v14 = v17;
        if (v17)
          v14 = CFRetain(v17);
        *(_QWORD *)(v7 + 72) = v14;
      }
    }
    *a3 = v7;
    return 0;
  }
  else
  {
    v16 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v7);
    return v16;
  }
}

uint64_t FigDataChannelConfigurationCreateCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DataChannelConfiguration;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  const __CFArray *v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  const __CFDictionary *v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  const __CFDictionary *ValueAtIndex;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v25;
  uint64_t v26;
  CFTypeRef cf;

  cf = 0;
  if (a2 && a3)
  {
    DataChannelConfiguration = dataChannelConfiguration_createDataChannelConfiguration(a1, 0, (uint64_t *)&cf);
    v7 = cf;
    if (!(_DWORD)DataChannelConfiguration)
    {
      *((_DWORD *)cf + 10) = *(_DWORD *)(a2 + 40);
      v8 = *(CFTypeRef *)(a2 + 48);
      if (v8)
        v8 = CFRetain(v8);
      *((_QWORD *)v7 + 6) = v8;
      v9 = *(CFTypeRef *)(a2 + 56);
      if (v9)
        v9 = CFRetain(v9);
      *((_QWORD *)v7 + 7) = v9;
      v10 = *(CFTypeRef *)(a2 + 64);
      if (v10)
        v10 = CFRetain(v10);
      *((_QWORD *)v7 + 8) = v10;
      v11 = *(CFTypeRef *)(a2 + 72);
      if (v11)
        v11 = CFRetain(v11);
      *((_QWORD *)v7 + 9) = v11;
      v12 = *(const __CFArray **)(a2 + 16);
      if (!v12 || (v13 = CFArrayGetCount(v12), v13 < 1))
      {
LABEL_17:
        v19 = *(const __CFArray **)(a2 + 24);
        if (!v19 || (Count = CFArrayGetCount(v19), Count < 1))
        {
LABEL_22:
          FigCFArrayAppendArray();
          v26 = 0;
          *a3 = v7;
          return v26;
        }
        v21 = Count;
        v22 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 24), v22);
          MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, ValueAtIndex);
          if (!MutableCopy)
            break;
          v25 = MutableCopy;
          CFArrayAppendValue(*((CFMutableArrayRef *)v7 + 3), MutableCopy);
          CFRelease(v25);
          if (v21 == ++v22)
            goto LABEL_22;
        }
        v26 = FigSignalErrorAt();
LABEL_28:
        CFRelease(v7);
        return v26;
      }
      v14 = v13;
      v15 = 0;
      while (1)
      {
        v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v15);
        v17 = CFDictionaryCreateMutableCopy(a1, 0, v16);
        if (!v17)
          break;
        v18 = v17;
        CFArrayAppendValue(*((CFMutableArrayRef *)v7 + 2), v17);
        CFRelease(v18);
        if (v14 == ++v15)
          goto LABEL_17;
      }
      DataChannelConfiguration = FigSignalErrorAt();
    }
    v26 = DataChannelConfiguration;
    if (!v7)
      return v26;
    goto LABEL_28;
  }
  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCreateFromList(const __CFAllocator *a1, const __CFDictionary *a2, CFArrayRef theArray, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, const __CFArray *a7, _QWORD *a8)
{
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  CFIndex v19;
  uint64_t DataChannelConfiguration;
  CFIndex v21;
  CFIndex v22;
  CFIndex v23;
  const void *v24;
  const void *ValueAtIndex;
  const void *v26;
  const void *v27;
  const __CFArray *v28;
  uint64_t v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex v32;
  const void *v33;
  CFTypeID v34;
  uint64_t v35;
  _QWORD *v37;
  const __CFArray *theArraya;
  const void *v39;

  v39 = 0;
  if (a8)
  {
    if (theArray)
    {
      if (a4)
      {
        Count = CFArrayGetCount(theArray);
        if (Count == CFArrayGetCount(a4))
        {
          v17 = CFArrayGetCount(theArray);
          v18 = a7 ? CFArrayGetCount(a7) : 0;
          if (v17 == v18)
          {
            if (!a5 || (v19 = CFArrayGetCount(theArray), v19 == CFArrayGetCount(a5)))
            {
              v37 = a8;
              DataChannelConfiguration = dataChannelConfiguration_createDataChannelConfiguration(a1, a2, (uint64_t *)&v39);
              if ((_DWORD)DataChannelConfiguration)
              {
                v35 = DataChannelConfiguration;
                v24 = v39;
                if (!v39)
                  return v35;
                goto LABEL_30;
              }
              theArraya = a6;
              v21 = CFArrayGetCount(theArray);
              if (v21 >= 1)
              {
                v22 = v21;
                v23 = 0;
                v24 = v39;
                while (1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(theArray, v23);
                  v26 = CFArrayGetValueAtIndex(a4, v23);
                  v27 = a5 ? CFArrayGetValueAtIndex(a5, v23) : 0;
                  v28 = (const __CFArray *)CFArrayGetValueAtIndex(a7, v23);
                  v29 = dataChannelConfiguration_addOutputQueueCommon((uint64_t)v24, ValueAtIndex, (uint64_t)v26, (uint64_t)v27, v28);
                  if ((_DWORD)v29)
                    break;
                  if (v22 == ++v23)
                    goto LABEL_19;
                }
LABEL_29:
                v35 = v29;
                if (v24)
LABEL_30:
                  CFRelease(v24);
                return v35;
              }
LABEL_19:
              if (theArraya)
              {
                v30 = CFArrayGetCount(theArraya);
                v24 = v39;
                if (v30 >= 1)
                {
                  v31 = v30;
                  v32 = 0;
                  while (1)
                  {
                    v33 = CFArrayGetValueAtIndex(theArraya, v32);
                    if (!v33)
                      break;
                    v34 = CFGetTypeID(v33);
                    if (v34 != FigDataChannelResourceGetTypeID())
                      break;
                    dataChannelConfiguration_addDataChannelResource((uint64_t)v24);
                    if (v31 == ++v32)
                      goto LABEL_27;
                  }
                  v29 = FigSignalErrorAt();
                  goto LABEL_29;
                }
              }
              else
              {
                v24 = v39;
              }
LABEL_27:
              v35 = 0;
              *v37 = v24;
              return v35;
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t dataChannelConfiguration_addOutputQueueCommon(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  CFTypeID v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v15;
  CFTypeID v16;
  CFIndex Count;
  CFIndex v18;
  uint64_t v19;
  CFTypeRef cf;
  CFRange v22;

  v9 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v11 = Mutable;
    if (a2)
    {
      v12 = CFGetTypeID(a2);
      if (v12 == FigImageQueueGetTypeID())
      {
        cf = 0;
        FigCFDictionarySetValue();
        FigBaseObject = FigImageQueueGetFigBaseObject(a2);
        v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (!v14)
        {
          v19 = 4294954514;
          goto LABEL_17;
        }
        v15 = v14(FigBaseObject, CFSTR("CAImageQueue"), v9, &cf);
        if (!(_DWORD)v15)
        {
          CAImageQueueGetIdentifier();
          FigCFDictionarySetInt64();
          CFRelease(cf);
LABEL_9:
          FigCFDictionarySetValue();
          if (a4)
            FigCFDictionarySetValue();
          if (a5)
          {
            Count = CFArrayGetCount(a5);
            if (Count >= 1)
            {
              v18 = Count;
              CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
              v22.location = 0;
              v22.length = v18;
              CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 32), a5, v22);
              FigCFDictionarySetRange();
            }
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v11);
          v19 = 0;
          goto LABEL_17;
        }
LABEL_16:
        v19 = v15;
LABEL_17:
        CFRelease(v11);
        return v19;
      }
      v16 = CFGetTypeID(a2);
      if (v16 == FigDataQueueGetTypeID())
      {
        FigCFDictionarySetValue();
        goto LABEL_9;
      }
    }
    v15 = FigSignalErrorAt();
    goto LABEL_16;
  }
  return FigSignalErrorAt();
}

uint64_t dataChannelConfiguration_addDataChannelResource(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v3 = Mutable;
  FigCFDictionarySetValue();
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v3);
  CFRelease(v3);
  return 0;
}

uint64_t FigDataChannelConfigurationAddFigImageQueue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  if (a1 && a2 && a3)
    return dataChannelConfiguration_addOutputQueueCommon(a1, a2, a3, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationAddFigDataQueue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  if (a1 && a2 && a3)
    return dataChannelConfiguration_addOutputQueueCommon(a1, a2, a3, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationAddDataChannelResource(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return dataChannelConfiguration_addDataChannelResource(a1);
  else
    return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationSetFormatDescriptions(_QWORD *a1)
{
  uint64_t MutableCopy;
  uint64_t v3;
  const void *v4;

  if (!a1)
    return FigSignalErrorAt();
  CFGetAllocator(a1);
  MutableCopy = FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
    return FigSignalErrorAt();
  v3 = MutableCopy;
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  a1[4] = v3;
  return 0;
}

uint64_t FigDataChannelConfigurationCopyFormatDescriptions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Copy;

  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  Copy = FigCFArrayCreateCopy();
  if (!Copy)
    return FigSignalErrorAt();
  *a3 = Copy;
  return 0;
}

uint64_t FigDataChannelConfigurationSetModificationID(uint64_t a1, int a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t FigDataChannelConfigurationGetModificationID(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 40);
  return result;
}

CFIndex FigDataChannelConfigurationGetChannelCount(uint64_t a1)
{
  const __CFArray *v1;

  if (a1 && (v1 = *(const __CFArray **)(a1 + 16)) != 0)
    return CFArrayGetCount(v1);
  else
    return 0;
}

CFIndex FigDataChannelConfigurationGetResourceCount(uint64_t a1)
{
  const __CFArray *v1;

  if (a1 && (v1 = *(const __CFArray **)(a1 + 24)) != 0)
    return CFArrayGetCount(v1);
  else
    return 0;
}

const void *FigDataChannelConfigurationGetFigImageQueueAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;

  if (!a1 || idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) != 0)
  {
    return CFDictionaryGetValue(ValueAtIndex, CFSTR("FigImageQueue"));
  }
  else
  {
    return 0;
  }
}

const void *FigDataChannelConfigurationGetFigDataQueueAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;

  if (!a1 || idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) != 0)
  {
    return CFDictionaryGetValue(ValueAtIndex, CFSTR("FigDataQueue"));
  }
  else
  {
    return 0;
  }
}

const void *FigDataChannelConfigurationGetFigDataChannelResourceAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;

  if (!a1 || idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 24);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 0;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx);
  return CFDictionaryGetValue(ValueAtIndex, CFSTR("FigDataChannelResource"));
}

uint64_t FigDataChannelConfigurationCopyFormatDescriptionsAtIndex(uint64_t a1, int a2, CFIndex idx, uint64_t *a4)
{
  uint64_t result;
  const __CFArray *Count;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  if ((idx & 0x8000000000000000) == 0 && a1 && a4)
  {
    Count = *(const __CFArray **)(a1 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      result = FigCFDictionaryGetRangeIfPresent();
      if ((_DWORD)result)
      {
        v9 = FigCFArrayCopySubarrayWithRange();
        if (v9)
        {
          v10 = v9;
          result = 0;
          *a4 = v10;
        }
        else
        {
          return FigSignalErrorAt();
        }
      }
    }
  }
  return result;
}

const void *FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;

  if (!a1 || idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) != 0)
  {
    return CFDictionaryGetValue(ValueAtIndex, CFSTR("DescriptionTags"));
  }
  else
  {
    return 0;
  }
}

const void *FigDataChannelConfigurationGetChannelSettingsAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;

  if (!a1 || idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) != 0)
  {
    return CFDictionaryGetValue(ValueAtIndex, CFSTR("Settings"));
  }
  else
  {
    return 0;
  }
}

uint64_t FigDataChannelConfigurationGetOutputQueueTypeAtIndex(uint64_t a1, CFIndex idx)
{
  uint64_t result;
  const __CFArray *Count;
  const __CFDictionary *v6;

  result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      if (result)
      {
        v6 = (const __CFDictionary *)result;
        if (CFDictionaryContainsKey((CFDictionaryRef)result, CFSTR("FigImageQueue"))
          || CFDictionaryContainsKey(v6, CFSTR("CAImageQueueID"))
          || CFDictionaryContainsKey(v6, CFSTR("CAImageQueueReceiver")))
        {
          return 1;
        }
        else
        {
          if (CFDictionaryContainsKey(v6, CFSTR("FigDataQueue")))
            return 2;
          result = CFDictionaryContainsKey(v6, CFSTR("FigDataQueueObjectID"));
          if ((_DWORD)result)
            return 2;
        }
      }
    }
  }
  return result;
}

const void *FigDataChannelConfigurationGetCAImageQueueIDAtIndex(uint64_t a1, CFIndex idx)
{
  const void *result;
  const __CFArray *Count;

  result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      if (result)
      {
        FigCFDictionaryGetInt64IfPresent();
        return 0;
      }
    }
  }
  return result;
}

const void *FigDataChannelConfigurationSetFigDataQueueObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const void *result;

  if (!a1 || idx < 0)
    return (const void *)FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return (const void *)FigSignalErrorAt();
  result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (result)
    return (const void *)FigCFDictionarySetInt64();
  return result;
}

const void *FigDataChannelConfigurationSetFigDataChannelResourceObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const void *result;

  if (!a1 || idx < 0)
    return (const void *)FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 24);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return (const void *)FigSignalErrorAt();
  result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx);
  if (result)
    return (const void *)FigCFDictionarySetInt64();
  return result;
}

uint64_t FigDataChannelConfigurationCopyAsDictionaryWithoutOutputQueues(uint64_t a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  const __CFDictionary *v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  __CFArray *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFArray *v22;
  CFMutableArrayRef v23;
  CFIndex Count;
  CFIndex v25;
  CFIndex v26;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *MutableCopy;
  __CFDictionary *v29;
  __CFDictionary **v31;
  CFMutableArrayRef value;

  v3 = 0;
  if (!a1 || !a3)
    return v3;
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  v9 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!v9 || (v10 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378])) == 0)
  {
    v23 = 0;
    goto LABEL_27;
  }
  v31 = a3;
  value = v10;
  v11 = *(const __CFArray **)(a1 + 16);
  if (!v11 || (v12 = CFArrayGetCount(v11), v12 < 1))
  {
LABEL_14:
    CFDictionarySetValue(v8, CFSTR("ChannelArray"), v9);
    v22 = *(const __CFArray **)(a1 + 24);
    v23 = value;
    if (!v22 || (Count = CFArrayGetCount(v22), Count < 1))
    {
LABEL_19:
      CFDictionarySetValue(v8, CFSTR("ResourceArray"), value);
      v3 = FigCFDictionarySetInt32();
      if (!(_DWORD)v3)
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        *v31 = v8;
        goto LABEL_21;
      }
      goto LABEL_28;
    }
    v25 = Count;
    v26 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v26);
      MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, ValueAtIndex);
      if (!MutableCopy)
        break;
      v29 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, CFSTR("FigDataChannelResource"));
      CFArrayAppendValue(value, v29);
      CFRelease(v29);
      if (v25 == ++v26)
        goto LABEL_19;
    }
LABEL_27:
    v3 = FigSignalErrorAt();
LABEL_28:
    CFRelease(v8);
    goto LABEL_21;
  }
  v13 = v12;
  v14 = 0;
  while (1)
  {
    v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v14);
    v16 = CFDictionaryCreateMutableCopy(allocator, 0, v15);
    if (!v16)
    {
      v23 = value;
      goto LABEL_27;
    }
    v17 = v16;
    CFDictionaryRemoveValue(v16, CFSTR("FigImageQueue"));
    CFDictionaryRemoveValue(v17, CFSTR("FigDataQueue"));
    if (CFDictionaryContainsKey(v17, CFSTR("DescriptionTags")))
      break;
LABEL_13:
    CFArrayAppendValue(v9, v17);
    CFRelease(v17);
    if (v13 == ++v14)
      goto LABEL_14;
  }
  v18 = v9;
  v19 = CFDictionaryGetValue(v17, CFSTR("DescriptionTags"));
  v20 = (const void *)MEMORY[0x19402EFD0](v19, allocator);
  if (v20)
  {
    v21 = v20;
    CFDictionarySetValue(v17, CFSTR("DescriptionTags_SerializedDictionary"), v20);
    CFRelease(v21);
    CFDictionaryRemoveValue(v17, CFSTR("DescriptionTags"));
    v9 = v18;
    goto LABEL_13;
  }
  v3 = FigSignalErrorAt();
  CFRelease(v8);
  CFRelease(v17);
  v23 = value;
LABEL_21:
  if (v9)
    CFRelease(v9);
  if (v23)
    CFRelease(v23);
  return v3;
}

uint64_t FigDataChannelConfigurationCreateFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v13;
  const void *v14;
  uint64_t v15;
  uint64_t DataChannelConfiguration;
  CFTypeRef v17;
  __CFArray *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  const __CFArray *v23;
  CFIndex v24;
  CFIndex j;
  const __CFDictionary *v26;
  CFMutableDictionaryRef v27;
  CFMutableDictionaryRef v28;
  uint64_t v29;
  const __CFDictionary *v30;
  void *value;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef cf;
  int v37;
  CFTypeRef v38;
  CFRange v39;

  v38 = 0;
  v37 = 0;
  v35 = 0;
  cf = 0;
  v33 = 0;
  v34 = 0;
  if (a3
    && theDict
    && (v6 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ChannelArray"))) != 0
    && (v7 = v6,
        FigCFDictionaryGetInt32IfPresent(),
        (Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378])) != 0))
  {
    v9 = Mutable;
    if (CFArrayGetCount(v7) >= 1)
    {
      for (i = 0; i < CFArrayGetCount(v7); ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, i);
        MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, ValueAtIndex);
        if (!MutableCopy)
        {
LABEL_37:
          DataChannelConfiguration = FigSignalErrorAt();
          goto LABEL_38;
        }
        v13 = MutableCopy;
        if (CFDictionaryContainsKey(ValueAtIndex, CFSTR("DescriptionTags_SerializedDictionary")))
        {
          v14 = CFDictionaryGetValue(v13, CFSTR("DescriptionTags_SerializedDictionary"));
          if (v14)
          {
            value = 0;
            v15 = MEMORY[0x19402F00C](v14, a1, &value);
            if ((_DWORD)v15)
            {
              v29 = v15;
              CFRelease(v9);
              v30 = v13;
              goto LABEL_33;
            }
            CFDictionarySetValue(v13, CFSTR("DescriptionTags"), value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            CFDictionaryRemoveValue(v13, CFSTR("DescriptionTags_SerializedDictionary"));
          }
        }
        CFArrayAppendValue(v9, v13);
        CFRelease(v13);
      }
    }
    DataChannelConfiguration = dataChannelConfiguration_createDataChannelConfiguration(a1, 0, (uint64_t *)&v38);
    if ((_DWORD)DataChannelConfiguration)
    {
LABEL_38:
      v29 = DataChannelConfiguration;
    }
    else
    {
      v17 = v38;
      v18 = (__CFArray *)*((_QWORD *)v38 + 2);
      v39.length = CFArrayGetCount(v9);
      v39.location = 0;
      CFArrayAppendArray(v18, v9, v39);
      *((_DWORD *)v17 + 10) = v37;
      CFDictionaryGetValueIfPresent(theDict, CFSTR("LoggingID"), &cf);
      v19 = cf;
      if (cf)
        v19 = CFRetain(cf);
      *((_QWORD *)v17 + 6) = v19;
      CFDictionaryGetValueIfPresent(theDict, CFSTR("PlayerLoggingID"), &v35);
      v20 = v35;
      if (v35)
        v20 = CFRetain(v35);
      *((_QWORD *)v17 + 7) = v20;
      CFDictionaryGetValueIfPresent(theDict, CFSTR("PlaybackItemLoggingID"), &v34);
      v21 = v34;
      if (v34)
        v21 = CFRetain(v34);
      *((_QWORD *)v17 + 8) = v21;
      CFDictionaryGetValueIfPresent(theDict, CFSTR("PlaybackItemUniqueInstanceID"), &v33);
      v22 = v33;
      if (v33)
        v22 = CFRetain(v33);
      *((_QWORD *)v17 + 9) = v22;
      v23 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ResourceArray"));
      v24 = 0;
      if (!v23)
        goto LABEL_26;
LABEL_25:
      for (j = CFArrayGetCount(v23); v24 < j; j = 0)
      {
        v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v24);
        v27 = CFDictionaryCreateMutableCopy(a1, 0, v26);
        if (!v27)
          goto LABEL_37;
        v28 = v27;
        CFArrayAppendValue(*((CFMutableArrayRef *)v17 + 3), v27);
        CFRelease(v28);
        ++v24;
        if (v23)
          goto LABEL_25;
LABEL_26:
        ;
      }
      v29 = 0;
      *a3 = v17;
      v38 = 0;
    }
    v30 = v9;
LABEL_33:
    CFRelease(v30);
  }
  else
  {
    v29 = FigSignalErrorAt();
  }
  if (v38)
    CFRelease(v38);
  return v29;
}

const void *FigDataChannelConfigurationGetFigDataQueueObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  const void *result;
  const __CFArray *Count;

  result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      if (result)
      {
        FigCFDictionaryGetInt64IfPresent();
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigDataChannelConfigurationSetFigDataQueueAtIndex(uint64_t a1, CFIndex idx, uint64_t a3)
{
  const __CFArray *Count;

  if (!a1 || idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx || !a3)
    return FigSignalErrorAt();
  if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx))
    FigCFDictionarySetValue();
  return 0;
}

const void *FigDataChannelConfigurationGetCAImageQueueReceiverAtIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;

  if (!a1 || idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) != 0)
  {
    return CFDictionaryGetValue(ValueAtIndex, CFSTR("CAImageQueueReceiver"));
  }
  else
  {
    return 0;
  }
}

uint64_t FigDataChannelConfigurationSetCAImageQueueReceiverAtIndex(uint64_t a1, CFIndex idx, uint64_t a3)
{
  const __CFArray *Count;

  if (!a1 || idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx || !a3)
    return FigSignalErrorAt();
  if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx))
    FigCFDictionarySetValue();
  return 0;
}

const void *FigDataChannelConfigurationGetFigDataChannelResourceObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  const void *result;
  const __CFArray *Count;

  result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 24);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx);
      if (result)
      {
        FigCFDictionaryGetInt64IfPresent();
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigDataChannelConfigurationSetFigDataChannelResourceAtIndex(uint64_t a1, CFIndex idx, uint64_t a3)
{
  const __CFArray *Count;

  if (!a1 || idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 24);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx || !a3)
    return FigSignalErrorAt();
  if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx))
    FigCFDictionarySetValue();
  return 0;
}

uint64_t FigDataChannelConfigurationCopyLoggingIdentifier(uint64_t a1, CFStringRef *a2)
{
  const __CFString *v3;
  CFStringRef Copy;

  if (a1 && a2)
  {
    v3 = *(const __CFString **)(a1 + 48);
    if (v3)
    {
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
      if (!Copy)
      {
        FigSignalErrorAt();
        return 0;
      }
    }
    else
    {
      Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCopyPlayerLoggingIdentifier(uint64_t a1, CFStringRef *a2)
{
  const __CFString *v3;
  CFStringRef Copy;

  if (a1 && a2)
  {
    v3 = *(const __CFString **)(a1 + 56);
    if (v3)
    {
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
      if (!Copy)
      {
        FigSignalErrorAt();
        return 0;
      }
    }
    else
    {
      Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCopyPlayerItemLoggingIdentifier(uint64_t a1, CFStringRef *a2)
{
  const __CFString *v3;
  CFStringRef Copy;

  if (a1 && a2)
  {
    v3 = *(const __CFString **)(a1 + 64);
    if (v3)
    {
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
      if (!Copy)
      {
        FigSignalErrorAt();
        return 0;
      }
    }
    else
    {
      Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCopyPlaybackItemUniqueInstanceIdentifier(CFStringRef *cf, CFStringRef *a2)
{
  const __CFAllocator *v4;
  CFStringRef Copy;

  if (!cf || !a2)
    return FigSignalErrorAt();
  if (cf[9])
  {
    v4 = CFGetAllocator(cf);
    Copy = CFStringCreateCopy(v4, cf[9]);
  }
  else
  {
    Copy = 0;
  }
  *a2 = Copy;
  return 0;
}

uint64_t FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterParagraphStyleAttributeInserter_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterParagraphStyleAttributeInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterParagraphStyleAttributeInserter[%p]"), a1);
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  __int128 v5;
  uint64_t result;
  CMTime v7;
  CMTime lhs;
  _QWORD context[2];
  __int128 v10;
  __int128 v11;
  CFRange v12;
  CFRange v13;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402F294](&getCaptionPropertyToAttributeMappingArray_once, initMappingArray);
  v4 = (const __CFArray *)sCaptionPropertyToAttributeMappingArray;
  v10 = 0u;
  v11 = 0u;
  context[0] = a2;
  context[1] = *(_QWORD *)DerivedStorage;
  lhs = *(CMTime *)(DerivedStorage + 32);
  v5 = *(_OWORD *)(DerivedStorage + 8);
  v7.epoch = *(_QWORD *)(DerivedStorage + 24);
  *(_OWORD *)&v7.value = v5;
  CMTimeSubtract((CMTime *)&v10, &lhs, &v7);
  DWORD2(v11) = 0;
  v12.length = CFArrayGetCount(v4);
  v12.location = 0;
  CFArrayApplyFunction(v4, v12, (CFArrayApplierFunction)insertAttribute, context);
  result = DWORD2(v11);
  if (!DWORD2(v11))
  {
    v13.length = CFArrayGetCount(v4);
    v13.location = 0;
    CFArrayApplyFunction(v4, v13, (CFArrayApplierFunction)insertSetElement, context);
    result = DWORD2(v11);
    if (!DWORD2(v11))
      return FigTTMLDocumentWriterAddCaptionData(*(_QWORD *)DerivedStorage, a2);
  }
  return result;
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_SetAttribute(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  __int128 v7;
  CMTime v9;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)DerivedStorage, a2, (uint64_t)a3);
  if (!(_DWORD)v6)
  {
    if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      v7 = *(_OWORD *)&v9.value;
      *(_QWORD *)(DerivedStorage + 24) = v9.epoch;
      *(_OWORD *)(DerivedStorage + 8) = v7;
    }
    else if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      *(CMTime *)(DerivedStorage + 32) = v9;
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

void insertAttribute(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const __CFAllocator *v7;
  CFTypeID v8;
  uint64_t TypeID;
  uint64_t InitialValue;
  const __CFDictionary *Mutable;
  int v12;
  uint64_t context;
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  v4 = *a1;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v6 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6(CMBaseObject, v4, *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      v8 = CFGetTypeID(cf);
      TypeID = FigCaptionDynamicStyleGetTypeID();
      InitialValue = (uint64_t)cf;
      if (v8 == TypeID)
        InitialValue = FigCaptionDynamicStyleGetInitialValue();
      Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v12 = ((uint64_t (*)(uint64_t, const __CFDictionary *))a1[1])(InitialValue, Mutable);
      if (v12
        || (context = *(_QWORD *)(a2 + 8),
            v14 = 0,
            CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setEachAttributeToWriter, &context),
            (v12 = v14) != 0))
      {
        *(_DWORD *)(a2 + 40) = v12;
      }
      if (cf)
        CFRelease(cf);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
}

void insertSetElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const __CFAllocator *v7;
  CFTypeID v8;
  uint64_t KeyFrameCount;
  uint64_t v10;
  CFDictionaryRef v11;
  CFMutableDictionaryRef Mutable;
  uint64_t v13;
  int started;
  Float64 Seconds;
  CMTime v16;
  CMTime v17;
  double v18;
  CFTypeRef v19;
  CFTypeRef cf;

  v19 = 0;
  cf = 0;
  v4 = *a1;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v6 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6
    && (v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v6(CMBaseObject, v4, *MEMORY[0x1E0C9AE00], &cf), cf)
    && (v8 = CFGetTypeID(cf), v8 == FigCaptionDynamicStyleGetTypeID())
    && (KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount(), KeyFrameCount >= 2))
  {
    v10 = KeyFrameCount;
    v11 = 0;
    Mutable = 0;
    v13 = 1;
    while (1)
    {
      if (v19)
      {
        CFRelease(v19);
        v19 = 0;
      }
      v18 = 0.0;
      started = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if (started)
        break;
      started = FigTTMLDocumentWriterStartElement(*(_QWORD *)(a2 + 8), 1);
      if (started)
        break;
      memset(&v17, 0, sizeof(v17));
      v16 = *(CMTime *)(a2 + 16);
      Seconds = CMTimeGetSeconds(&v16);
      CMTimeMakeWithSeconds(&v17, Seconds * v18, 1000);
      if (v11)
        CFRelease(v11);
      v16 = v17;
      v11 = CMTimeCopyAsDictionary(&v16, v7);
      started = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)(a2 + 8), (uint64_t)CFSTR("begin"), (uint64_t)v11);
      if (started)
        break;
      if (Mutable)
        CFRelease(Mutable);
      Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      started = ((uint64_t (*)(CFTypeRef, CFMutableDictionaryRef))a1[1])(v19, Mutable);
      if (started)
        break;
      *(_OWORD *)&v16.value = *(unint64_t *)(a2 + 8);
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setEachAttributeToWriter, &v16);
      started = v16.timescale;
      if (v16.timescale)
        break;
      started = FigTTMLDocumentWriterEndElement(*(_QWORD *)(a2 + 8));
      if (started)
        break;
      if (v10 == ++v13)
        goto LABEL_21;
    }
    *(_DWORD *)(a2 + 40) = started;
  }
  else
  {
    v11 = 0;
    Mutable = 0;
  }
LABEL_21:
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (Mutable)
    CFRelease(Mutable);
}

void initMappingArray()
{
  __CFArray *Mutable;
  uint64_t i;
  _OWORD *v2;
  _QWORD v3[15];

  v3[14] = *MEMORY[0x1E0C80C00];
  v3[0] = *MEMORY[0x1E0CA3308];
  v3[1] = FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor;
  v3[2] = *MEMORY[0x1E0CA3320];
  v3[3] = FigTTMLDocumentWriterMapPropertyToAttribute_Hidden;
  v3[4] = *MEMORY[0x1E0CA3378];
  v3[5] = FigTTMLDocumentWriterMapPropertyToAttribute_TextAlign;
  v3[6] = *MEMORY[0x1E0CA3330];
  v3[7] = FigTTMLDocumentWriterMapPropertyToAttribute_LinePadding;
  v3[8] = *MEMORY[0x1E0CA3328];
  v3[9] = FigTTMLDocumentWriterMapPropertyToAttribute_LineHeight;
  v3[10] = *MEMORY[0x1E0CA3338];
  v3[11] = FigTTMLDocumentWriterMapPropertyToAttribute_MultiRowAlign;
  v3[12] = *MEMORY[0x1E0CA3318];
  v3[13] = FigTTMLDocumentWriterMapPropertyToAttribute_FillLineGap;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 7, 0);
  for (i = 0; i != 14; i += 2)
  {
    v2 = malloc_type_malloc(0x10uLL, 0xE00402B90B96AuLL);
    *v2 = *(_OWORD *)&v3[i];
    CFArrayAppendValue(Mutable, v2);
  }
  sCaptionPropertyToAttributeMappingArray = (uint64_t)Mutable;
}

uint64_t setEachAttributeToWriter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8))
  {
    result = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)a3, result, a2);
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t FigStreamAlternateIsValidCodecString(CFStringRef theString, const __CFDictionary *a2, BOOL *a3, _BYTE *a4, _DWORD *a5, const __CFDictionary **a6)
{
  int v13;

  v13 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (figAlternateFeatureDisabledCodecString_onceToken != -1)
    dispatch_once(&figAlternateFeatureDisabledCodecString_onceToken, &__block_literal_global_44);
  if (!figAlternateFeatureDisabledCodecString_hlsDolbyVision10p0Enable && FigCFStringFind()
    || FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(theString, a2, &v13, a6))
  {
    return 0;
  }
  if (a3)
    *a3 = (v13 & 2) != 0;
  if (a4)
    *a4 = v13 & 1;
  if (a5)
    *a5 = v13;
  return 1;
}

__CFString *FigAlternateCreateVideoLayoutLoggingStringFromCollection(uint64_t a1)
{
  __CFString *Mutable;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  int v5;

  if (!a1)
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag())
    {
      v2 = CFSTR("SIDE");
    }
    else if (FigTagEqualToTag())
    {
      v2 = CFSTR("OVER");
    }
    else if (FigTagEqualToTag())
    {
      v2 = CFSTR("NONE");
    }
    else
    {
      v2 = CFSTR("UNKNOWN");
    }
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag())
    {
      v3 = CFSTR("LEFT");
    }
    else if (FigTagEqualToTag())
    {
      v3 = CFSTR("RIGHT");
    }
    else if (FigTagEqualToTag())
    {
      v3 = CFSTR("STEREO");
    }
    else if (FigTagEqualToTag())
    {
      v3 = CFSTR("MONO");
    }
    else
    {
      v3 = CFSTR("UNKNOWN");
    }
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag())
    {
      v4 = CFSTR("RECT");
    }
    else
    {
      v5 = FigTagEqualToTag();
      v4 = CFSTR("FISH");
      if (!v5)
        v4 = CFSTR("UNKNOWN");
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("%@/%@/%@"), v2, v3, v4);
  }
  return Mutable;
}

const __CFString *FigAlternateGetVideoContentTypeStringFromCollection(const __CFString *result)
{
  if (result)
  {
    FigTagCollectionGetTagsWithCategory();
    FigTagCollectionGetTagsWithCategory();
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag() && FigTagEqualToTag() && FigTagEqualToTag())
    {
      return CFSTR("3D");
    }
    else if (FigTagEqualToTag()
           && FigTagEqualToTag()
           && (FigTagEqualToTag() || FigTagEqualToTag()))
    {
      return CFSTR("IM");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("2D");
    }
    else
    {
      return CFSTR("Unknown");
    }
  }
  return result;
}

__CFString *FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(const __CFArray *a1)
{
  __CFString *Mutable;
  CFIndex v3;
  const void *ValueAtIndex;
  __CFString *VideoLayoutLoggingStringFromCollection;

  if (!a1)
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable && CFArrayGetCount(a1) >= 1)
  {
    v3 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      VideoLayoutLoggingStringFromCollection = FigAlternateCreateVideoLayoutLoggingStringFromCollection((uint64_t)ValueAtIndex);
      if (v3)
        CFStringAppendFormat(Mutable, 0, CFSTR(","));
      CFStringAppendFormat(Mutable, 0, CFSTR("%@"), VideoLayoutLoggingStringFromCollection);
      if (VideoLayoutLoggingStringFromCollection)
        CFRelease(VideoLayoutLoggingStringFromCollection);
      ++v3;
    }
    while (v3 < CFArrayGetCount(a1));
  }
  return Mutable;
}

__CFString *FigAlternateCreateVideoContentTypeStringFromCollectionArray(const __CFArray *a1)
{
  __CFString *Mutable;
  CFIndex v3;
  const __CFString *ValueAtIndex;
  const __CFString *VideoContentTypeStringFromCollection;

  if (!a1)
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable && CFArrayGetCount(a1) >= 1)
  {
    v3 = 0;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v3);
      VideoContentTypeStringFromCollection = FigAlternateGetVideoContentTypeStringFromCollection(ValueAtIndex);
      if (v3)
        CFStringAppendFormat(Mutable, 0, CFSTR(","));
      CFStringAppendFormat(Mutable, 0, CFSTR("%@"), VideoContentTypeStringFromCollection);
      ++v3;
    }
    while (v3 < CFArrayGetCount(a1));
  }
  return Mutable;
}

__CFArray *FigAlternateCreateDefaultTagCollectionsArrayForVideo()
{
  CFMutableArrayRef Mutable;
  __CFArray *v1;
  int DefaultTagCollectionForVideo;
  void *v3;
  __CFArray *v4;
  void *value;

  value = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 0;
  v1 = Mutable;
  DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&value);
  v3 = value;
  if (DefaultTagCollectionForVideo)
  {
    v4 = 0;
    if (value)
LABEL_5:
      CFRelease(v3);
  }
  else
  {
    if (!value)
    {
      v4 = 0;
      goto LABEL_7;
    }
    CFArrayAppendValue(v1, value);
    v3 = value;
    v4 = v1;
    v1 = 0;
    if (value)
      goto LABEL_5;
  }
  if (v1)
LABEL_7:
    CFRelease(v1);
  return v4;
}

uint64_t FigAlternateDoAllHostsHaveMatchingAlternates(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  const __CFArray *ValueAtIndex;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  const void *v8;
  double NormalizedPeakBitrate;
  CFIndex v10;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  const void *v15;
  int v16;
  _BOOL4 v17;
  char v18;
  char v19;

  if (!a1)
    return 1;
  Count = CFArrayGetCount(a1);
  if (Count < 2)
    return 1;
  v3 = Count;
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, 0);
  v5 = CFArrayGetCount(ValueAtIndex);
  if (v5 < 1)
    return 1;
  v6 = v5;
  v7 = 0;
LABEL_5:
  v8 = CFArrayGetValueAtIndex(ValueAtIndex, v7);
  NormalizedPeakBitrate = (double)(int)FigAlternateGetNormalizedPeakBitrate((uint64_t)v8);
  v10 = 1;
  while (1)
  {
    v11 = (const __CFArray *)CFArrayGetValueAtIndex(a1, v10);
    v12 = CFArrayGetCount(v11);
    if (v12 < 1)
      return 0;
    v13 = v12;
    v14 = 1;
    do
    {
      v15 = CFArrayGetValueAtIndex(v11, v14 - 1);
      v16 = FigAlternateGetNormalizedPeakBitrate((uint64_t)v15);
      v17 = (double)v16 * 0.95 > NormalizedPeakBitrate;
      if ((double)v16 * 1.05 < NormalizedPeakBitrate)
        v17 = 1;
      if (v14 >= v13)
        break;
      ++v14;
    }
    while (v17);
    v18 = ++v10 >= v3 || v17;
    if ((v18 & 1) != 0)
    {
      v19 = ++v7 >= v6 || v17;
      if ((v19 & 1) != 0)
        return !v17;
      goto LABEL_5;
    }
  }
}

uint64_t FigAlternateAreAllAlternatesOnSameHost(const __CFArray *a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFIndex Count;
  CFIndex v5;
  const __CFURL *v6;
  CFIndex v7;
  const __CFArray *ValueAtIndex;
  const __CFArray *v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  const void *v14;
  const __CFURL *PlaylistAlternateURL;
  const __CFURL *v16;
  const __CFURL *v17;
  BOOL v18;
  int IsMediaGroupOnSameHost;
  CFIndex v20;
  __CFSet *Mutable;
  CFIndex i;
  const void *v23;
  const void *VideoGroupIDString;
  const void *AudioGroupIDString;
  const void *SubtitleGroupIDString;
  const __CFAllocator *allocator;
  const __CFURL *v33;

  Count = CFArrayGetCount(a1);
  v33 = 0;
  if (Count < 1)
  {
    LOBYTE(IsMediaGroupOnSameHost) = 1;
    return IsMediaGroupOnSameHost;
  }
  v5 = Count;
  v6 = 0;
  v7 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v7);
    v9 = ValueAtIndex;
    if (!ValueAtIndex)
    {
      v17 = 0;
      v10 = 0;
LABEL_19:
      v11 = 0;
      v13 = 1;
      goto LABEL_20;
    }
    v10 = CFArrayGetCount(ValueAtIndex);
    if (v10 < 1)
    {
      v17 = 0;
      goto LABEL_19;
    }
    v6 = 0;
    v11 = 0;
    v12 = 1;
    v13 = 1;
    do
    {
      v14 = CFArrayGetValueAtIndex(v9, v12 - 1);
      PlaylistAlternateURL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL((uint64_t)v14);
      if (PlaylistAlternateURL)
      {
        v16 = PlaylistAlternateURL;
        if (!v6)
          v6 = CFURLCopyAbsoluteURL(PlaylistAlternateURL);
        if (FigCFHTTPIsHTTPBasedURL(v16))
        {
          if (!FigCFHTTPDoURLHostsAndPortsMatch(v6, v16))
            v13 = 0;
        }
        else
        {
          ++v11;
        }
      }
      if (v12 >= v10)
        break;
      ++v12;
    }
    while (v13);
    v33 = v6;
    v17 = v6;
LABEL_20:
    v18 = v11 == v10 || v11 < 1;
    LOBYTE(IsMediaGroupOnSameHost) = v18 ? v13 : 0;
    if (!(_BYTE)IsMediaGroupOnSameHost)
      break;
    v20 = CFArrayGetCount(v9);
    Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
    if (v20 >= 1)
    {
      for (i = 0; i != v20; ++i)
      {
        v23 = CFArrayGetValueAtIndex(v9, i);
        if (FigAlternateGetVideoGroupIDString((uint64_t)v23))
        {
          VideoGroupIDString = (const void *)FigAlternateGetVideoGroupIDString((uint64_t)v23);
          CFSetAddValue(Mutable, VideoGroupIDString);
        }
        if (FigAlternateGetAudioGroupIDString((uint64_t)v23))
        {
          AudioGroupIDString = (const void *)FigAlternateGetAudioGroupIDString((uint64_t)v23);
          CFSetAddValue(Mutable, AudioGroupIDString);
        }
        if (FigAlternateGetSubtitleGroupIDString((uint64_t)v23))
        {
          SubtitleGroupIDString = (const void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v23);
          CFSetAddValue(Mutable, SubtitleGroupIDString);
        }
      }
    }
    if (!Mutable)
      goto LABEL_43;
    if (!figStreamAlternate_IsMediaGroupOnSameHost(a2, &v33, Mutable)
      || !figStreamAlternate_IsMediaGroupOnSameHost(a3, &v33, Mutable))
    {
      LOBYTE(IsMediaGroupOnSameHost) = 0;
      goto LABEL_43;
    }
    IsMediaGroupOnSameHost = figStreamAlternate_IsMediaGroupOnSameHost(a4, &v33, Mutable);
    if (v17)
    {
      CFRelease(v17);
      v6 = 0;
      v33 = 0;
    }
    CFRelease(Mutable);
    Mutable = 0;
    if (++v7 >= v5 || !IsMediaGroupOnSameHost)
      goto LABEL_43;
  }
  LOBYTE(IsMediaGroupOnSameHost) = 0;
  Mutable = 0;
LABEL_43:
  if (v6)
    CFRelease(v6);
  if (Mutable)
    CFRelease(Mutable);
  return IsMediaGroupOnSameHost;
}

uint64_t figStreamAlternate_IsMediaGroupOnSameHost(const __CFDictionary *a1, const __CFURL **a2, const __CFSet *a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  int v10;
  const void *ValueAtIndex;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  const __CFDictionary *v17;
  const __CFURL *Value;

  v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v5)
  {
    v6 = v5;
    Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      LOBYTE(v10) = 1;
    }
    else
    {
      v8 = Count;
      v9 = 0;
      v10 = 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
        if (CFSetContainsValue(a3, ValueAtIndex))
        {
          CFDictionaryGetValue(a1, ValueAtIndex);
          v12 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
          if (v12)
          {
            v13 = v12;
            v14 = CFArrayGetCount(v12);
            if (v14 < 1)
            {
              v10 = 1;
            }
            else
            {
              v15 = v14;
              v16 = 1;
              v10 = 1;
              do
              {
                v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16 - 1);
                Value = (const __CFURL *)CFDictionaryGetValue(v17, CFSTR("FBPAEGLMK_URL"));
                if (Value && !FigCFHTTPDoURLHostsAndPortsMatch(*a2, Value))
                  v10 = 0;
                if (v16 >= v15)
                  break;
                ++v16;
              }
              while (v10);
            }
            CFRelease(v13);
          }
          else
          {
            v10 = 1;
          }
        }
        ++v9;
      }
      while (v9 < v8 && v10);
    }
    CFRelease(v6);
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  return v10;
}

uint64_t FPSupportVideoRangeToAlternateVideoRange(int a1)
{
  if ((a1 - 1) > 4)
    return 0;
  else
    return dword_1932FC4B0[a1 - 1];
}

uint64_t FigStreamAlternateGetAudioMaximumDecodeChannelCount(unsigned int a1)
{
  uint64_t Value;
  OSStatus PropertyInfo;
  _DWORD *v4;
  UInt32 v5;
  char *v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  int v10;
  OSStatus Property;
  UInt32 v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  UInt32 outPropertyDataSize;
  _OWORD inSpecifier[2];
  uint64_t v20;

  if (a1)
  {
    MEMORY[0x19402F294](&gCreateAudioFormatLookupOnce, figStreamAlternate_FigCreateAudioFormatLookupOnce);
    if (gAudioFormatDictionary)
    {
      MEMORY[0x19402EEEC](gAudioFormatDictionaryLock);
      if (CFDictionaryContainsKey((CFDictionaryRef)gAudioFormatDictionary, (const void *)a1))
      {
        Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)gAudioFormatDictionary, (const void *)a1);
LABEL_48:
        MEMORY[0x19402EF04](gAudioFormatDictionaryLock);
        return Value;
      }
      outPropertyDataSize = 0;
      memset(inSpecifier, 0, sizeof(inSpecifier));
      v20 = 0;
      DWORD2(inSpecifier[0]) = a1;
      PropertyInfo = AudioFormatGetPropertyInfo(0x61646E63u, 0x28u, inSpecifier, &outPropertyDataSize);
      v4 = 0;
      v5 = outPropertyDataSize;
      if (!PropertyInfo && outPropertyDataSize >= 4)
      {
        v4 = malloc_type_calloc(1uLL, outPropertyDataSize, 0x3829BF39uLL);
        if (!v4)
        {
          FigSignalErrorAt();
          Value = 0;
          goto LABEL_45;
        }
        PropertyInfo = AudioFormatGetProperty(0x61646E63u, 0x28u, inSpecifier, &outPropertyDataSize, v4);
        v5 = outPropertyDataSize;
      }
      v6 = 0;
      Value = 0;
      if (PropertyInfo || v5 < 4)
      {
LABEL_46:
        free(v4);
        free(v6);
        if ((int)Value >= 1)
          CFDictionarySetValue((CFMutableDictionaryRef)gAudioFormatDictionary, (const void *)a1, (const void *)Value);
        goto LABEL_48;
      }
      v7 = v5 >> 2;
      if ((_DWORD)v7 == 1 && *v4 == -1)
      {
        Value = 0x7FFFFFFFLL;
      }
      else
      {
        LODWORD(Value) = 0;
        v8 = v4;
        do
        {
          v10 = *v8++;
          v9 = v10;
          if ((int)Value <= v10)
            Value = v9;
          else
            Value = Value;
          --v7;
        }
        while (v7);
      }
      switch(a1)
      {
        case 0x65632B33u:
LABEL_21:
          v6 = 0;
          if ((int)Value <= 128)
            Value = 128;
          else
            Value = Value;
          goto LABEL_46;
        case 0x6F707573u:
          if ((int)Value >= 3)
          {
            Property = AudioFormatGetPropertyInfo(0x6164636Cu, 0x28u, inSpecifier, &outPropertyDataSize);
            v6 = 0;
            v12 = outPropertyDataSize;
            if (!Property && outPropertyDataSize >= 4)
            {
              v6 = (char *)malloc_type_calloc(1uLL, outPropertyDataSize, 0xBB20F8ABuLL);
              if (!v6)
              {
                FigSignalErrorAt();
                goto LABEL_46;
              }
              Property = AudioFormatGetProperty(0x6164636Cu, 0x28u, inSpecifier, &outPropertyDataSize, v6);
              v12 = outPropertyDataSize;
            }
            if (!Property && v12 >= 4)
            {
              v13 = 0;
              LODWORD(Value) = 0;
              do
              {
                v14 = *(_DWORD *)&v6[v13];
                v15 = (unsigned __int16)v14;
                if (Value > (unsigned __int16)v14)
                  v15 = Value;
                if ((v14 & 0xFFFF0000) == 0x930000 || v14 >= 0xFFFF0000)
                  Value = Value;
                else
                  Value = v15;
                v13 += 4;
              }
              while ((v12 & 0xFFFFFFFC) != v13);
            }
            goto LABEL_46;
          }
          break;
        case 0x65632D33u:
          goto LABEL_21;
      }
LABEL_45:
      v6 = 0;
      goto LABEL_46;
    }
  }
  return 0;
}

uint64_t figStreamAlternate_FigCreateAudioFormatLookupOnce()
{
  uint64_t result;

  gAudioFormatDictionary = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  result = FigSimpleMutexCreate();
  gAudioFormatDictionaryLock = result;
  return result;
}

uint64_t FigStreamAlternateGetPersistentIDForMediaTypeInMediaSelectionArray(const __CFArray *a1, int a2)
{
  CFIndex Count;
  const __CFSet *Mutable;
  uint64_t v6;
  const void *Value;
  uint64_t v8;

  if (!a1)
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
    goto LABEL_14;
  }
  Count = CFArrayGetCount(a1);
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (Count < 1)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v6 = 1;
  do
  {
    CFArrayGetValueAtIndex(a1, v6 - 1);
    Value = (const void *)FigCFDictionaryGetValue();
    FigCFDictionaryGetValue();
    if (!Value || !FigCFStringGetOSTypeValue())
      goto LABEL_9;
    FigCFStringGetOSTypeValue();
    if (CFSetContainsValue(Mutable, Value))
      goto LABEL_14;
    CFSetAddValue(Mutable, Value);
    if (!a2)
      v8 = FigCFDictionaryGetValue();
    else
LABEL_9:
      v8 = 0;
    if (v6 >= Count)
      break;
    ++v6;
  }
  while (!v8);
LABEL_15:
  if (Mutable)
    CFRelease(Mutable);
  return v8;
}

uint64_t FigStreamAlternateSubstreamURLsMatchBetweenVariants(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4)
{
  int v7;
  uint64_t PlaylistAlternateURL;
  uint64_t v9;
  uint64_t result;
  const void **v11;
  uint64_t PersistentIDForMediaTypeInMediaSelectionArray;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  __int128 v19;

  v19 = 0uLL;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  if (a4 == 4)
  {
    v11 = &v16;
    v7 = 1935832172;
    goto LABEL_9;
  }
  if (a4 == 2)
  {
    v11 = &v17;
    v7 = 1936684398;
LABEL_9:
    PersistentIDForMediaTypeInMediaSelectionArray = FigStreamAlternateGetPersistentIDForMediaTypeInMediaSelectionArray(a3, v7);
    *v11 = (const void *)PersistentIDForMediaTypeInMediaSelectionArray;
    if (!PersistentIDForMediaTypeInMediaSelectionArray)
      return 1;
    v14 = v17;
    v13 = v18;
    v15 = v16;
    FigAlternateGetRenditionInfoForMediaType(a1, v7, v18, v17, v16, 0, 0, (_QWORD *)&v19 + 1, 0);
    FigAlternateGetRenditionInfoForMediaType(a2, v7, v13, v14, v15, 0, 0, &v19, 0);
    if (v19 == 0)
      return 1;
    return FigCFHTTPCompareURLs(*((const void **)&v19 + 1), (CFTypeRef)v19) != 0;
  }
  if (a4 != 1)
    return 1;
  v7 = 1986618469;
  PlaylistAlternateURL = FigAlternateGetPlaylistAlternateURL(a1);
  *((_QWORD *)&v19 + 1) = PlaylistAlternateURL;
  v9 = FigAlternateGetPlaylistAlternateURL(a2);
  *(_QWORD *)&v19 = v9;
  if (!(PlaylistAlternateURL | v9)
    || (result = FigCFHTTPCompareURLs((const void *)PlaylistAlternateURL, (CFTypeRef)v9), (_DWORD)result))
  {
    v11 = &v18;
    goto LABEL_9;
  }
  return result;
}

BOOL FigStreamAlternateCanConcurrentlyDecodeAlternates(__CFArray *a1, __CFArray *a2)
{
  if (FigAlternateIs4k((uint64_t)a1))
  {
    if (FigAlternateHasStereoVideo(a1))
    {
      FigAlternateGetFrameRate((uint64_t)a1);
      if (CelestialShouldLimit4kStereoConcurrentPlayback())
        return 0;
    }
  }
  if (!FigAlternateIs4k((uint64_t)a2) || !FigAlternateHasStereoVideo(a2))
    return 1;
  FigAlternateGetFrameRate((uint64_t)a2);
  return CelestialShouldLimit4kStereoConcurrentPlayback() == 0;
}

CFMutableArrayRef FigStreamAlternateCopyAvailableVideoDynamicRanges(const __CFArray *a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;
  int VideoQualityIndex;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v4 = 0;
    if (!a1)
      goto LABEL_4;
LABEL_3:
    for (i = CFArrayGetCount(a1); v4 < i; i = 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(0, v4);
      VideoQualityIndex = FigAlternateGetVideoQualityIndex((uint64_t)ValueAtIndex);
      FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(VideoQualityIndex);
      FigCFArrayAppendInt32();
      ++v4;
      if (a1)
        goto LABEL_3;
LABEL_4:
      ;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigStreamAlternateCopyMaximumVideoResolution(CFArrayRef theArray, double *a2)
{
  CFIndex v4;
  int v5;
  double v6;
  double v7;
  double v8;
  CFIndex i;
  const void *ValueAtIndex;
  double Resolution;
  double v12;

  v4 = 0;
  v5 = 0;
  v6 = *MEMORY[0x1E0C9D820];
  v7 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v8 = 0.0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v4 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
    if (Resolution * v12 > v8)
    {
      v5 = 1;
      v6 = Resolution;
      v7 = v12;
      v8 = Resolution * v12;
    }
    ++v4;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  if (v5)
  {
    *a2 = v6;
    a2[1] = v7;
  }
  return v5;
}

CFNumberRef FigStreamAlternateCopyNominalVideoFrameRate(CFArrayRef theArray)
{
  CFIndex v2;
  float v3;
  CFIndex i;
  const void *ValueAtIndex;
  double FrameRate;
  float v7;
  float v8;
  float valuePtr;

  v2 = 0;
  v3 = 0.0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v2 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    FrameRate = FigAlternateGetFrameRate((uint64_t)ValueAtIndex);
    v7 = FrameRate;
    if (v7 == 0.0)
      goto LABEL_18;
    if (v3 == 0.0)
    {
      v8 = FrameRate;
      goto LABEL_19;
    }
    if (vabds_f32(v3, v7) <= 0.01)
    {
LABEL_18:
      v8 = v3;
    }
    else
    {
      if (v3 <= v7)
        v8 = FrameRate;
      else
        v8 = v3;
      if (v3 < v7)
        v7 = v3;
      if (fabsf(v8 + (float)(v7 * -2.0)) >= 0.01
        && fabsf(v8 + (float)(v7 * -3.0)) >= 0.01
        && fabsf(v8 + (float)(v7 * -4.0)) >= 0.01)
      {
        v8 = 0.0;
      }
    }
LABEL_19:
    ++v2;
    v3 = v8;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  valuePtr = v3;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
}

uint64_t __figAlternateFeatureDisabledCodecString_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  figAlternateFeatureDisabledCodecString_hlsDolbyVision10p0Enable = result;
  return result;
}

uint64_t RegisterFigBandwidthPredictorType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigBandwidthPredictorID = result;
  return result;
}

uint64_t FigBandwidthPredictorCreate(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  const void *Value;

  if (sRegisterFigBandwidthPredictorTypeOnce != -1)
    dispatch_once_f(&sRegisterFigBandwidthPredictorTypeOnce, 0, (dispatch_function_t)RegisterFigBandwidthPredictorType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = (_QWORD *)Instance;
  FigSymptomsManagerTriggerScorecardsUpdate();
  Value = CFDictionaryGetValue(a2, CFSTR("FBP_StoreBagConfiguration"));
  if (Value)
    Value = CFRetain(Value);
  v6[2] = Value;
  *a3 = CFRetain(v6);
  CFRelease(v6);
  return 0;
}

void figBandwidthPredictorFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t HandleRemakerFamilyMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v5;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  MEMORY[0x19402EA0C](gRemakerFamilyServerState_3);
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v4)
    v5 = v4;
  else
    v5 = 4294966630;
  MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
  return v5;
}

uint64_t FigRemakerFamilyServer_RemakerSetProperty()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerCopyProperty()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigRemakerFamilyServer_GetDefaultSourceTrack(const void *a1, xpc_object_t xdict, void *a3)
{
  int int64;
  int v6;
  CFTypeID v7;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t *);
  uint64_t result;
  CFTypeID v11;
  uint64_t v12;
  int64_t value;

  LODWORD(value) = 0;
  int64 = xpc_dictionary_get_int64(xdict, "MediaType");
  if (!a1)
    goto LABEL_10;
  v6 = int64;
  v7 = CFGetTypeID(a1);
  if (v7 != FigRemakerGetTypeID())
  {
    v11 = CFGetTypeID(a1);
    if (v11 == FigAssetReaderGetTypeID())
    {
      v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v6 == 1635083369)
      {
        v9 = *(uint64_t (**)(const void *, int64_t *))(v12 + 8);
        if (!v9)
          return 4294954514;
      }
      else
      {
        v9 = *(uint64_t (**)(const void *, int64_t *))(v12 + 16);
        if (!v9)
          return 4294954514;
      }
      goto LABEL_14;
    }
LABEL_10:
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v6 == 1635083369)
  {
    v9 = *(uint64_t (**)(const void *, int64_t *))(v8 + 72);
    if (!v9)
      return 4294954514;
  }
  else
  {
    v9 = *(uint64_t (**)(const void *, int64_t *))(v8 + 80);
    if (!v9)
      return 4294954514;
  }
LABEL_14:
  result = v9(a1, &value);
  if (!(_DWORD)result)
  {
LABEL_11:
    xpc_dictionary_set_int64(a3, "TrackIDOut", (int)value);
    return 0;
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerSetFormatWriterProperty()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerSetFormatWriterTrackProperty(int a1, xpc_object_t xdict)
{
  uint64_t result;

  if (!xpc_dictionary_get_int64(xdict, "TrackID"))
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerCopyFormatWriterTrackProperty(int a1, xpc_object_t xdict)
{
  uint64_t result;

  if (!xpc_dictionary_get_int64(xdict, "TrackID"))
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigRemakerFamilyServer_Destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  if (*(_QWORD *)(a2 + 32))
  {
    if (FigXPCServerGetConnectionRefcon())
      FigPixelBufferRecipientFlushPixelBufferBackings();
    v3 = *(_QWORD *)(a2 + 32);
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
    }
  }
  return FigXPCServerDisassociateObjectWithConnection();
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  const void *data;
  const void *v9;
  const void *v10;
  uint64_t v11;
  size_t v12;
  uint64_t (*v13)(const void *, int64_t, const void *, size_t, const void *, CFTypeRef, _QWORD, _DWORD *);
  uint64_t v14;
  _DWORD value[3];
  CFTypeRef cf;
  size_t v18;
  size_t length;

  v18 = 0;
  length = 0;
  cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64)
    || (data = xpc_dictionary_get_data(a2, "AudioDestASBD", &length)) == 0
    || length != 40)
  {
    v11 = FigSignalErrorAt();
LABEL_18:
    v14 = v11;
    goto LABEL_12;
  }
  v9 = data;
  v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v18);
  v11 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v11)
    goto LABEL_18;
  v11 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v11)
    goto LABEL_18;
  v12 = v18;
  v13 = *(uint64_t (**)(const void *, int64_t, const void *, size_t, const void *, CFTypeRef, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v13)
  {
    v14 = v13(a1, int64, v9, v12, v10, cf, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v14)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v14 = 4294954514;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v14;
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioTrackWithPreset(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t, CFTypeRef, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];
  CFTypeRef cf;

  cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    v8 = FigSignalErrorAt();
LABEL_16:
    v10 = v8;
    goto LABEL_10;
  }
  v8 = FigXPCMessageCopyCFString();
  if ((_DWORD)v8)
    goto LABEL_16;
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
    goto LABEL_16;
  v9 = *(uint64_t (**)(const void *, int64_t, CFTypeRef, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 88);
  if (v9)
  {
    v10 = v9(a1, int64, cf, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioMixdownTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  uint64_t v7;
  const void *data;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  size_t v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t (*v15)(const void *, CFTypeRef, const void *, size_t, const void *, CFTypeRef, uint64_t, _DWORD *);
  uint64_t v16;
  CFTypeRef v18;
  _DWORD value[3];
  CFTypeRef v20;
  size_t v21;
  size_t length;
  CFTypeRef cf;

  length = 0;
  cf = 0;
  v20 = 0;
  v21 = 0;
  memset(value, 0, sizeof(value));
  v18 = 0;
  if (!a1)
    goto LABEL_22;
  v6 = CFGetTypeID(a1);
  if (v6 != FigRemakerGetTypeID())
    goto LABEL_22;
  v7 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v7)
    goto LABEL_23;
  v7 = frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects((const __CFArray *)cf, CFSTR("RemakerAudioMixdown_AudioProcessingTap"), &v18);
  if ((_DWORD)v7)
    goto LABEL_23;
  data = xpc_dictionary_get_data(a2, "AudioDestASBD", &length);
  if (!data || length != 40)
  {
LABEL_22:
    v7 = FigSignalErrorAt();
LABEL_23:
    v16 = v7;
    goto LABEL_13;
  }
  v9 = data;
  v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v21);
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
    goto LABEL_23;
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
    goto LABEL_23;
  v11 = v18;
  v13 = v20;
  v12 = v21;
  v14 = *(_QWORD *)&value[1];
  v15 = *(uint64_t (**)(const void *, CFTypeRef, const void *, size_t, const void *, CFTypeRef, uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v15)
  {
    v16 = v15(a1, v11, v9, v12, v10, v13, v14, value);
    if (!(_DWORD)v16)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v16 = 4294954514;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  if (v18)
    CFRelease(v18);
  return v16;
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioMixdownTrackWithPreset(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t (*v10)(const void *, CFTypeRef, CFTypeRef, uint64_t, _DWORD *);
  uint64_t v11;
  CFTypeRef v13;
  _DWORD value[3];
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  memset(value, 0, sizeof(value));
  v13 = 0;
  if (!a1 || (v5 = CFGetTypeID(a1), v5 != FigRemakerGetTypeID()))
  {
    v6 = FigSignalErrorAt();
LABEL_21:
    v11 = v6;
    goto LABEL_11;
  }
  v6 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v6)
    goto LABEL_21;
  v6 = frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects((const __CFArray *)cf, CFSTR("RemakerAudioMixdown_AudioProcessingTap"), &v13);
  if ((_DWORD)v6)
    goto LABEL_21;
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_21;
  v6 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v6)
    goto LABEL_21;
  v7 = v13;
  v9 = *(_QWORD *)&value[1];
  v8 = v15;
  v10 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 104);
  if (v10)
  {
    v11 = v10(a1, v7, v8, v9, value);
    if (!(_DWORD)v11)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v11 = 4294954514;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t FigRemakerFamilyServer_RemakerAddVideoTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  int64_t v8;
  int64_t v9;
  uint64_t CMTime;
  uint64_t uint64;
  uint64_t (*v12)(const void *, int64_t, int64_t, int64_t, CFTypeRef, uint64_t, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, __int128 *, _DWORD *);
  uint64_t v13;
  _DWORD value[5];
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;
  CFTypeRef v21;
  __int128 v22;
  uint64_t v23;

  v21 = 0;
  v19 = 0;
  cf = 0;
  v18 = 0;
  *(_OWORD *)&value[1] = *MEMORY[0x1E0CA2E18];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v17 = 0;
  value[0] = 0;
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    CMTime = FigSignalErrorAt();
LABEL_26:
    v13 = CMTime;
    goto LABEL_14;
  }
  v8 = xpc_dictionary_get_int64(a2, "Width");
  v9 = xpc_dictionary_get_int64(a2, "Height");
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_26;
  uint64 = xpc_dictionary_get_uint64(a2, "VideoCodecType");
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_26;
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_26;
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_26;
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_26;
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    goto LABEL_26;
  v12 = *(uint64_t (**)(const void *, int64_t, int64_t, int64_t, CFTypeRef, uint64_t, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, __int128 *, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v12)
  {
    v22 = *(_OWORD *)&value[1];
    v23 = v16;
    v13 = v12(a1, int64, v8, v9, v21, uint64, cf, v19, v18, v17, &v22, value);
    if (!(_DWORD)v13)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v13 = 4294954514;
  }
LABEL_14:
  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (v17)
    CFRelease(v17);
  return v13;
}

uint64_t FigRemakerFamilyServer_RemakerPrepareToAddVideoCompositionTrack(uint64_t a1, xpc_object_t xdict)
{
  int int64;
  uint64_t result;
  int v5;

  v5 = 0;
  int64 = xpc_dictionary_get_int64(xdict, "AnimationVideoLayerCount");
  result = FigRemote_StartCARenderServerAndReturnPort(&v5);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 88) = 1;
    result = FigRemote_CreateLocalCAContext((_QWORD *)(a1 + 96));
    if (!(_DWORD)result)
    {
      if (int64 < 1
        || (result = FigRemote_CreateCAImageQueuesAndSlotIDs(int64, *(void **)(a1 + 96), (__CFArray **)(a1 + 112), (__CFArray **)(a1 + 120)), !(_DWORD)result))
      {
        xpc_dictionary_set_mach_send();
        return FigXPCMessageSetCFArray();
      }
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerAddVideoCompositionTrack(const void *a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeID v8;
  uint64_t CMTime;
  uint64_t v10;
  unsigned int int64;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t (*v16)(const void *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, int, uint64_t, CFTypeRef, CFMutableDictionaryRef, __int128 *, unint64_t, unint64_t, int, CFTypeRef, int, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, int *);
  CFMutableDictionaryRef Mutable;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int uint64;
  int v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  CFMutableDictionaryRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  __int128 v40;
  uint64_t v41;

  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  v25 = *MEMORY[0x1E0CA2E18];
  v26 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v27 = 0;
  v24 = 0;
  if (!a1)
    goto LABEL_56;
  v8 = CFGetTypeID(a1);
  if (v8 != FigRemakerGetTypeID())
    goto LABEL_56;
  CMTime = FigXPCMessageCopyCFArray();
  if ((_DWORD)CMTime)
    goto LABEL_57;
  CMTime = FigXPCMessageCopyCFArray();
  if ((_DWORD)CMTime)
    goto LABEL_57;
  CMTime = FigXPCMessageCopyCFArray();
  if ((_DWORD)CMTime)
    goto LABEL_57;
  CMTime = FigXPCMessageCopyCFArray();
  if ((_DWORD)CMTime)
    goto LABEL_57;
  CMTime = FigXPCMessageCopyCFString();
  if ((_DWORD)CMTime)
    goto LABEL_57;
  if (!FigCFEqual()
    || (xpc_dictionary_get_uint64(a3, "VideoCompositorObjectID"),
        v10 = FigVideoCompositorServerRetainVideoCompositorForID(),
        !(_DWORD)v10))
  {
    CMTime = FigXPCMessageCopyCFArray();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    CMTime = FigXPCMessageGetCMTime();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    int64 = xpc_dictionary_get_int64(a3, "SourceTrackIDForFrameTiming");
    v12 = xpc_dictionary_get_int64(a3, "RenderWidth");
    v13 = xpc_dictionary_get_int64(a3, "RenderHeight");
    v14 = xpc_dictionary_get_int64(a3, "Width");
    v23 = xpc_dictionary_get_int64(a3, "Height");
    CMTime = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    uint64 = xpc_dictionary_get_uint64(a3, "VideoCodecType");
    CMTime = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    CMTime = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    CMTime = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    CMTime = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    v21 = xpc_dictionary_get_int64(a3, "AnimationTrackID");
    CMTime = FigXPCMessageCopyCFArray();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    CMTime = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)CMTime)
      goto LABEL_57;
    if (*(_QWORD *)(a2 + 96))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v27 = Mutable;
      if (!Mutable)
      {
LABEL_56:
        CMTime = FigSignalErrorAt();
LABEL_57:
        v10 = CMTime;
        goto LABEL_28;
      }
      CFDictionarySetValue(Mutable, CFSTR("RenderCAContext"), *(const void **)(a2 + 96));
    }
    v15 = xpc_dictionary_get_uint64(a3, "AnimationRemoteContextID");
    if ((_DWORD)v15)
    {
      CMTime = FigRemote_CreateLayerHostForRemoteContext(v15, (_QWORD *)(a2 + 104));
      if ((_DWORD)CMTime)
        goto LABEL_57;
    }
    v19 = *(_QWORD *)(a2 + 112);
    v20 = *(_QWORD *)(a2 + 104);
    v16 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, int, uint64_t, CFTypeRef, CFMutableDictionaryRef, __int128 *, unint64_t, unint64_t, int, CFTypeRef, int, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
    if (v16)
    {
      v40 = v25;
      v41 = v26;
      v10 = v16(a1, v39, v38, v36, v35, v37, v34, v20, v21, v19, v28, v27, &v40, __PAIR64__(v12, int64), __PAIR64__(v14, v13), v23, v33, uint64, v32,
              v31,
              v30,
              v29,
              &v24);
      if (!(_DWORD)v10)
        xpc_dictionary_set_int64(a4, "TrackIDOut", v24);
    }
    else
    {
      v10 = 4294954514;
    }
  }
LABEL_28:
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (v37)
    CFRelease(v37);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  return v10;
}

uint64_t FigRemakerFamilyServer_RemakerAddPassthroughTrackWithOptions(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = v8;
    goto LABEL_9;
  }
  v9 = *(uint64_t (**)(const void *, int64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 120);
  if (v9)
  {
    v10 = v9(a1, int64, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_9:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_RemakerAddTemporalMetadataTrackWithOptions(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = v8;
    goto LABEL_9;
  }
  v9 = *(uint64_t (**)(const void *, int64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 136);
  if (v9)
  {
    v10 = v9(a1, int64, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_9:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_RemakerEstimateMaxSegmentDurationForFileSize(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  uint64_t (*v6)(const void *, int64_t, __int128 *);
  uint64_t result;
  __int128 v8;
  uint64_t v9;

  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigRemakerGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TargetFileSize");
  v6 = *(uint64_t (**)(const void *, int64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v6)
    return 4294954514;
  result = v6(a1, int64, &v8);
  if (!(_DWORD)result)
    return FigXPCMessageSetCMTime();
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerSetTimeRange(const void *a1)
{
  __int128 v1;
  CFTypeID v3;
  uint64_t result;
  uint64_t (*v5)(const void *, CMTimeRange *, CMTime *);
  __int128 v6;
  CMTimeEpoch epoch;
  CMTimeRange range;
  CMTime v9;
  CMTimeRange v10;
  CMTime v11;

  v1 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v10.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v10.start.epoch = v1;
  *(_OWORD *)&v10.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != FigRemakerGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetCMTimeRange();
  if (!(_DWORD)result)
  {
    range = v10;
    CMTimeRangeGetEnd(&v9, &range);
    v6 = *(_OWORD *)&v10.start.value;
    epoch = v10.start.epoch;
    v5 = *(uint64_t (**)(const void *, CMTimeRange *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 48);
    if (v5)
    {
      *(_OWORD *)&range.start.value = v6;
      range.start.epoch = epoch;
      v11 = v9;
      return v5(a1, &range, &v11);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerStartOutput(const void *a1)
{
  CFTypeID v2;
  uint64_t (*v3)(const void *);

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigRemakerGetTypeID())
    return FigSignalErrorAt();
  v3 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v3)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_RemakerCanPerformFastFrameRateConversion(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  uint64_t result;
  uint64_t (*v7)(const void *, int64_t, __int128 *);
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigRemakerGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  result = FigXPCMessageGetCMTime();
  if (!(_DWORD)result)
  {
    v7 = *(uint64_t (**)(const void *, int64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
    if (v7)
    {
      v10 = v8;
      v11 = v9;
      return v7(a1, int64, &v10);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_ReaderEnableOriginalSampleExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = v8;
    goto LABEL_9;
  }
  v9 = *(uint64_t (**)(const void *, int64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
  if (v9)
  {
    v10 = v9(a1, int64, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_9:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_ReaderEnableOriginalSampleReferenceExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = v8;
    goto LABEL_9;
  }
  v9 = *(uint64_t (**)(const void *, int64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 32);
  if (v9)
  {
    v10 = v9(a1, int64, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_9:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_ReaderEnableDecodedAudioExtractionFromTrackWithAudioOptions(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  const void *data;
  const void *v9;
  const void *v10;
  uint64_t v11;
  size_t v12;
  uint64_t (*v13)(const void *, int64_t, const void *, size_t, const void *, CFTypeRef, CFTypeRef, _QWORD, _DWORD *);
  uint64_t v14;
  _DWORD value[3];
  CFTypeRef v17;
  CFTypeRef cf;
  size_t v19;
  size_t length;

  v19 = 0;
  length = 0;
  v17 = 0;
  cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64)
    || (data = xpc_dictionary_get_data(a2, "AudioDestASBD", &length)) == 0
    || length != 40)
  {
    v11 = FigSignalErrorAt();
LABEL_21:
    v14 = v11;
    goto LABEL_13;
  }
  v9 = data;
  v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v19);
  v11 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v11)
    goto LABEL_21;
  v11 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v11)
    goto LABEL_21;
  v11 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v11)
    goto LABEL_21;
  v12 = v19;
  v13 = *(uint64_t (**)(const void *, int64_t, const void *, size_t, const void *, CFTypeRef, CFTypeRef, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v13)
  {
    v14 = v13(a1, int64, v9, v12, v10, cf, v17, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v14)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v14 = 4294954514;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v14;
}

uint64_t FigRemakerFamilyServer_ReaderEnableDecodedVideoExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t CMTime;
  uint64_t (*v9)(const void *, int64_t, CFTypeRef, CFTypeRef, __int128 *, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];
  __int128 v13;
  uint64_t v14;
  CFTypeRef v15;
  CFTypeRef cf;
  __int128 v17;
  uint64_t v18;

  v15 = 0;
  cf = 0;
  v13 = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    CMTime = FigSignalErrorAt();
LABEL_20:
    v10 = CMTime;
    goto LABEL_12;
  }
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_20;
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_20;
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    goto LABEL_20;
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_20;
  v9 = *(uint64_t (**)(const void *, int64_t, CFTypeRef, CFTypeRef, __int128 *, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v9)
  {
    v17 = v13;
    v18 = v14;
    v10 = v9(a1, int64, cf, v15, &v17, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_ReaderEnableVideoCompositionExtraction(const void *a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeID v8;
  uint64_t LayerHostForRemoteContext;
  uint64_t v10;
  int int64;
  uint64_t uint64;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t (*v17)(const void *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, int, uint64_t, CFTypeRef, CFMutableDictionaryRef, __int128 *, unint64_t, unint64_t, int, CFTypeRef, CFTypeRef, int, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, _DWORD *);
  CFMutableDictionaryRef Mutable;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _DWORD value[5];
  uint64_t v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFMutableDictionaryRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  __int128 v41;
  uint64_t v42;

  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  *(_OWORD *)&value[1] = *MEMORY[0x1E0CA2E18];
  v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v26 = 0;
  value[0] = 0;
  if (!a1)
    goto LABEL_62;
  v8 = CFGetTypeID(a1);
  if (v8 != FigAssetReaderGetTypeID())
    goto LABEL_62;
  LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if ((_DWORD)LayerHostForRemoteContext)
    goto LABEL_63;
  LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if ((_DWORD)LayerHostForRemoteContext)
    goto LABEL_63;
  LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if ((_DWORD)LayerHostForRemoteContext)
    goto LABEL_63;
  LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if ((_DWORD)LayerHostForRemoteContext)
    goto LABEL_63;
  LayerHostForRemoteContext = FigXPCMessageCopyCFString();
  if ((_DWORD)LayerHostForRemoteContext)
    goto LABEL_63;
  if (!FigCFEqual()
    || (xpc_dictionary_get_uint64(a3, "VideoCompositorObjectID"),
        v10 = FigVideoCompositorServerRetainVideoCompositorForID(),
        !(_DWORD)v10))
  {
    LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    int64 = xpc_dictionary_get_int64(a3, "AnimationTrackID");
    LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    if (*(_QWORD *)(a2 + 96))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v33 = Mutable;
      if (!Mutable)
      {
LABEL_62:
        LayerHostForRemoteContext = FigSignalErrorAt();
LABEL_63:
        v10 = LayerHostForRemoteContext;
        goto LABEL_30;
      }
      CFDictionarySetValue(Mutable, CFSTR("RenderCAContext"), *(const void **)(a2 + 96));
    }
    uint64 = xpc_dictionary_get_uint64(a3, "AnimationRemoteContextID");
    if ((_DWORD)uint64)
    {
      LayerHostForRemoteContext = FigRemote_CreateLayerHostForRemoteContext(uint64, (_QWORD *)(a2 + 104));
      if ((_DWORD)LayerHostForRemoteContext)
        goto LABEL_63;
    }
    LayerHostForRemoteContext = FigXPCMessageGetCMTime();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    v13 = xpc_dictionary_get_int64(a3, "SourceTrackIDForFrameTiming");
    v14 = xpc_dictionary_get_int64(a3, "RenderWidth");
    v15 = xpc_dictionary_get_int64(a3, "RenderHeight");
    v16 = xpc_dictionary_get_int64(a3, "Width");
    v23 = xpc_dictionary_get_int64(a3, "Height");
    v22 = xpc_dictionary_get_uint64(a3, "VideoCodecType");
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)LayerHostForRemoteContext)
      goto LABEL_63;
    v20 = *(_QWORD *)(a2 + 112);
    v21 = *(_QWORD *)(a2 + 104);
    v17 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, int, uint64_t, CFTypeRef, CFMutableDictionaryRef, __int128 *, unint64_t, unint64_t, int, CFTypeRef, CFTypeRef, int, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (v17)
    {
      v41 = *(_OWORD *)&value[1];
      v42 = v25;
      v10 = v17(a1, v40, v39, v38, v37, v36, v35, v21, int64, v20, v34, v33, &v41, __PAIR64__(v14, v13), __PAIR64__(v16, v15), v23, v32, v31, v22,
              v30,
              v29,
              v28,
              v27,
              v26,
              value);
      if (!(_DWORD)v10)
        xpc_dictionary_set_int64(a4, "TrackIDOut", value[0]);
    }
    else
    {
      v10 = 4294954514;
    }
  }
LABEL_30:
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  return v10;
}

uint64_t FigRemakerFamilyServer_ReaderEnableAudioMixdownExtraction(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  uint64_t v7;
  const void *data;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  size_t v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t (*v16)(const void *, CFTypeRef, const void *, size_t, const void *, CFTypeRef, CFTypeRef, uint64_t, _DWORD *);
  uint64_t v17;
  CFTypeRef v19;
  _DWORD value[3];
  CFTypeRef v21;
  CFTypeRef v22;
  size_t v23;
  size_t length;
  CFTypeRef cf;

  length = 0;
  cf = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  memset(value, 0, sizeof(value));
  v19 = 0;
  if (!a1)
    goto LABEL_25;
  v6 = CFGetTypeID(a1);
  if (v6 != FigAssetReaderGetTypeID())
    goto LABEL_25;
  v7 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v7)
    goto LABEL_26;
  v7 = frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects((const __CFArray *)cf, CFSTR("AssetReaderSource_AudioProcessingTap"), &v19);
  if ((_DWORD)v7)
    goto LABEL_26;
  data = xpc_dictionary_get_data(a2, "AudioDestASBD", &length);
  if (!data || length != 40)
  {
LABEL_25:
    v7 = FigSignalErrorAt();
LABEL_26:
    v17 = v7;
    goto LABEL_14;
  }
  v9 = data;
  v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v23);
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
    goto LABEL_26;
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
    goto LABEL_26;
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
    goto LABEL_26;
  v11 = v19;
  v12 = v22;
  v13 = v23;
  v15 = *(_QWORD *)&value[1];
  v14 = v21;
  v16 = *(uint64_t (**)(const void *, CFTypeRef, const void *, size_t, const void *, CFTypeRef, CFTypeRef, uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v16)
  {
    v17 = v16(a1, v11, v9, v13, v10, v12, v14, v15, value);
    if (!(_DWORD)v17)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v17 = 4294954514;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t FigRemakerFamilyServer_ReaderExtractAndRetainNextSampleBuffer(const void *a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeID v8;
  int64_t int64;
  _BOOL8 v10;
  _BOOL4 v11;
  uint64_t (*v12)(const void *, int64_t, _BOOL8, char *, CMSampleBufferRef *);
  uint64_t v13;
  _BOOL4 v14;
  void *v15;
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer;
  __CFDictionary *v19;
  OpaqueCMTaggedBufferGroup *TaggedBufferGroup;
  CMItemCount Count;
  CMItemCount v23;
  xpc_object_t v24;
  uint64_t v25;
  __CVBuffer *CVPixelBufferAtIndex;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  void *v29;
  xpc_object_t v30;
  void *value;
  CMSampleBufferRef sbuf;
  char v33;

  v33 = 0;
  sbuf = 0;
  if (!a1
    || (v8 = CFGetTypeID(a1), v8 != FigAssetReaderGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a3, "TrackID"), !(_DWORD)int64))
  {
    v13 = FigSignalErrorAt();
LABEL_36:
    SerializedAtomDataAndSurfaceForSampleBuffer = v13;
    goto LABEL_17;
  }
  v10 = xpc_dictionary_get_BOOL(a3, "WaitForSampleBuffer");
  v11 = xpc_dictionary_get_BOOL(a3, "RequestedSampleBuffer");
  v12 = *(uint64_t (**)(const void *, int64_t, _BOOL8, char *, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 104);
  if (!v12)
  {
    SerializedAtomDataAndSurfaceForSampleBuffer = 4294954514;
    goto LABEL_17;
  }
  v13 = v12(a1, int64, v10, &v33, &sbuf);
  if ((_DWORD)v13)
    goto LABEL_36;
  xpc_dictionary_set_BOOL(a4, "ExtractionCompleteOut", v33 != 0);
  if (sbuf)
    v14 = v11;
  else
    v14 = 0;
  if (!v14)
  {
    SerializedAtomDataAndSurfaceForSampleBuffer = 0;
    goto LABEL_17;
  }
  v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 128), (const void *)(int)int64);
  value = v15;
  if (v15)
    CFRetain(v15);
  CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 136), (const void *)(int)int64);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
  v19 = *(__CFDictionary **)(a2 + 128);
  if (value)
  {
    CFDictionarySetValue(v19, (const void *)(int)int64, value);
    CFRelease(value);
    if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
    {
LABEL_14:
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 136), (const void *)(int)int64);
      goto LABEL_17;
    }
  }
  else
  {
    CFDictionaryRemoveValue(v19, (const void *)(int)int64);
    if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
      goto LABEL_14;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 136), (const void *)(int)int64, (const void *)((*MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8]));
  v13 = FigXPCMessageSetAndConsumeVMData();
  if ((_DWORD)v13)
    goto LABEL_36;
  if (MediaType == 1952606066)
  {
    TaggedBufferGroup = (OpaqueCMTaggedBufferGroup *)FigSampleBufferGetTaggedBufferGroup();
    if (TaggedBufferGroup)
    {
      Count = CMTaggedBufferGroupGetCount(TaggedBufferGroup);
      if (Count >= 1)
      {
        v23 = Count;
        v24 = xpc_array_create(0, 0);
        if (v24)
        {
          v25 = 0;
          while (1)
          {
            CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex)
              break;
            IOSurface = CVPixelBufferGetIOSurface(CVPixelBufferAtIndex);
            if (!IOSurface)
              break;
            XPCObject = IOSurfaceCreateXPCObject(IOSurface);
            if (!XPCObject)
              break;
            v29 = XPCObject;
            xpc_array_append_value(v24, XPCObject);
            xpc_release(v29);
            if (v23 == ++v25)
            {
              SerializedAtomDataAndSurfaceForSampleBuffer = 0;
              goto LABEL_32;
            }
          }
        }
      }
    }
    SerializedAtomDataAndSurfaceForSampleBuffer = FigSignalErrorAt();
    v24 = 0;
LABEL_32:
    FigXPCRelease();
    FigXPCRelease();
    if (!(_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
      xpc_dictionary_set_value(a4, "IOSurfaceArray", v24);
  }
  else
  {
    v30 = IOSurfaceCreateXPCObject(0);
    xpc_dictionary_set_value(a4, "IOSurface", v30);
    SerializedAtomDataAndSurfaceForSampleBuffer = 0;
  }
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (sbuf)
    CFRelease(sbuf);
  return SerializedAtomDataAndSurfaceForSampleBuffer;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTime(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  uint64_t (*v4)(const void *, __int128 *);
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v5 = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetReaderGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetCMTime();
  if (!(_DWORD)result)
  {
    v4 = *(uint64_t (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
    if (v4)
    {
      v7 = v5;
      v8 = v6;
      return v4(a1, &v7);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTimeRange(const void *a1)
{
  __int128 v1;
  CFTypeID v3;
  uint64_t result;
  uint64_t (*v5)(const void *, CMTimeRange *, CMTime *);
  __int128 v6;
  CMTimeEpoch epoch;
  CMTimeRange range;
  CMTime v9;
  CMTimeRange v10;
  CMTime v11;

  v1 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v10.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v10.start.epoch = v1;
  *(_OWORD *)&v10.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != FigAssetReaderGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetCMTimeRange();
  if (!(_DWORD)result)
  {
    range = v10;
    CMTimeRangeGetEnd(&v9, &range);
    v6 = *(_OWORD *)&v10.start.value;
    epoch = v10.start.epoch;
    v5 = *(uint64_t (**)(const void *, CMTimeRange *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 96);
    if (v5)
    {
      *(_OWORD *)&range.start.value = v6;
      range.start.epoch = epoch;
      v11 = v9;
      return v5(a1, &range, &v11);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTimeRanges(const void *a1, void *a2)
{
  CFTypeID v4;
  const void *data;
  size_t v6;
  uint64_t (*v7)(const void *, const void *, size_t);
  size_t length;

  length = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigAssetReaderGetTypeID())
    return FigSignalErrorAt();
  data = xpc_dictionary_get_data(a2, "TimeRanges", &length);
  v6 = length;
  v7 = *(uint64_t (**)(const void *, const void *, size_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v7)
    return v7(a1, data, v6 / 0x30);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTimeRangesFromTrack(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  const void *data;
  size_t v7;
  uint64_t (*v8)(const void *, int64_t, const void *, size_t);
  size_t length;

  length = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigAssetReaderGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  data = xpc_dictionary_get_data(a2, "TimeRanges", &length);
  v7 = length;
  v8 = *(uint64_t (**)(const void *, int64_t, const void *, size_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 128);
  if (v8)
    return v8(a1, int64, data, v7 / 0x30);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_ReaderEnableCaptionExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t v8;
  uint64_t (*v9)(const void *, int64_t, _QWORD, _DWORD *);
  uint64_t v10;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"), !(_DWORD)int64))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
  {
LABEL_13:
    v10 = v8;
    goto LABEL_9;
  }
  v9 = *(uint64_t (**)(const void *, int64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 136);
  if (v9)
  {
    v10 = v9(a1, int64, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v10)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v10 = 4294954514;
  }
LABEL_9:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v10;
}

uint64_t FigRemakerFamilyServer_WriterAddCaptionTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t uint64;
  uint64_t v9;
  uint64_t (*v10)(const void *, uint64_t, uint64_t, _QWORD, _DWORD *);
  uint64_t v11;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  if (!a1 || (v6 = CFGetTypeID(a1), v6 != FigAssetWriterGetTypeID()))
  {
    v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
  {
LABEL_12:
    v11 = v7;
    goto LABEL_8;
  }
  uint64 = xpc_dictionary_get_uint64(a2, "MediaType");
  v9 = xpc_dictionary_get_uint64(a2, "MediaSubType");
  v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 152);
  if (v10)
  {
    v11 = v10(a1, uint64, v9, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v11)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v11 = 4294954514;
  }
LABEL_8:
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v11;
}

uint64_t FigRemakerFamilyServer_WriterAddNativeTrack(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  uint64_t (*v8)(const void *, int64_t, int64_t *);
  uint64_t result;
  int64_t value;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "MediaType");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(const void *, int64_t, int64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
    return 4294954514;
  LODWORD(value) = 0;
  result = v8(a1, int64, &value);
  if (!(_DWORD)result)
  {
    xpc_dictionary_set_int64(a3, "TrackIDOut", (int)value);
    return 0;
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterAddAudioTrackWithCompression(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  const void *data;
  const void *v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t (*v12)(const void *, const void *, size_t, const void *, CFTypeRef, _QWORD, _DWORD *);
  uint64_t v13;
  _DWORD v15[3];
  CFTypeRef cf;
  size_t v17;
  size_t length[2];

  v17 = 0;
  length[0] = 0;
  cf = 0;
  memset(v15, 0, sizeof(v15));
  if (!a1
    || (v6 = CFGetTypeID(a1), v6 != FigAssetWriterGetTypeID())
    || (data = xpc_dictionary_get_data(a2, "AudioDestASBD", length)) == 0
    || length[0] != 40)
  {
    v10 = FigSignalErrorAt();
LABEL_17:
    v13 = v10;
    goto LABEL_11;
  }
  v8 = data;
  v9 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v17);
  v10 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v10)
    goto LABEL_17;
  v10 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v10)
    goto LABEL_17;
  length[1] = 0;
  v11 = v17;
  v12 = *(uint64_t (**)(const void *, const void *, size_t, const void *, CFTypeRef, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v12)
  {
    v13 = v12(a1, v8, v11, v9, cf, *(_QWORD *)&v15[1], v15);
    if (!(_DWORD)v13)
      xpc_dictionary_set_int64(a3, "TrackIDOut", v15[0]);
  }
  else
  {
    v13 = 4294954514;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)&v15[1])
    CFRelease(*(CFTypeRef *)&v15[1]);
  return v13;
}

uint64_t FigRemakerFamilyServer_WriterAddAudioTrackWithPresetCompression(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID v5;
  uint64_t v6;
  uint64_t (*v7)(const void *, CFTypeRef, _QWORD, _DWORD *);
  uint64_t v8;
  _DWORD value[3];
  CFTypeRef cf;

  cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1 || (v5 = CFGetTypeID(a1), v5 != FigAssetWriterGetTypeID()))
  {
    v6 = FigSignalErrorAt();
LABEL_15:
    v8 = v6;
    goto LABEL_9;
  }
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_15;
  v6 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v6)
    goto LABEL_15;
  v7 = *(uint64_t (**)(const void *, CFTypeRef, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
  if (v7)
  {
    v8 = v7(a1, cf, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v8)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v8 = 4294954514;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v8;
}

uint64_t FigRemakerFamilyServer_WriterAddVideoTrackWithCompression(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  int64_t v8;
  uint64_t CMTime;
  uint64_t uint64;
  uint64_t v11;
  uint64_t (*v12)(const void *, int64_t, int64_t, CFTypeRef, uint64_t, uint64_t, CFTypeRef, CFTypeRef, CFTypeRef, __int128 *, _QWORD, _DWORD *);
  uint64_t v13;
  _DWORD value[3];
  __int128 v16;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef cf;
  CFTypeRef v20;
  CFTypeRef v21;
  __int128 v22;
  uint64_t v23;

  v20 = 0;
  v21 = 0;
  v18 = 0;
  cf = 0;
  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  memset(value, 0, sizeof(value));
  if (!a1 || (v6 = CFGetTypeID(a1), v6 != FigAssetWriterGetTypeID()))
  {
    CMTime = FigSignalErrorAt();
LABEL_22:
    v13 = CMTime;
    goto LABEL_10;
  }
  int64 = xpc_dictionary_get_int64(a2, "Width");
  v8 = xpc_dictionary_get_int64(a2, "Height");
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  uint64 = xpc_dictionary_get_uint64(a2, "MediaType");
  v11 = xpc_dictionary_get_uint64(a2, "VideoCodecType");
  FigXPCMessageCopyCFDictionary();
  FigXPCMessageCopyCFDictionary();
  FigXPCMessageCopyCFDictionary();
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  CMTime = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)CMTime)
    goto LABEL_22;
  v12 = *(uint64_t (**)(const void *, int64_t, int64_t, CFTypeRef, uint64_t, uint64_t, CFTypeRef, CFTypeRef, CFTypeRef, __int128 *, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
  if (v12)
  {
    v22 = v16;
    v23 = v17;
    v13 = v12(a1, int64, v8, v21, uint64, v11, v20, cf, v18, &v22, *(_QWORD *)&value[1], value);
    if (!(_DWORD)v13)
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
  }
  else
  {
    v13 = 4294954514;
  }
LABEL_10:
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v13;
}

uint64_t FigRemakerFamilyServer_WriterCopyTrackProperty(const void *a1, void *a2)
{
  CFTypeID v3;
  uint64_t v4;
  uint64_t v5;
  CVPixelBufferPoolRef pool;
  CFTypeRef cf;
  CFTypeRef cf1;

  cf = 0;
  cf1 = 0;
  pool = 0;
  if (!a1
    || (v3 = CFGetTypeID(a1), v3 != FigAssetWriterGetTypeID())
    || !xpc_dictionary_get_int64(a2, "TrackID")
    || (v4 = FigXPCMessageCopyCFString(), !(_DWORD)v4))
  {
    v4 = FigSignalErrorAt();
  }
  v5 = v4;
  if (pool)
    CFRelease(pool);
  if (cf1)
    CFRelease(cf1);
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t FigRemakerFamilyServer_WriterIsTrackQueueAboveHighWaterLevel(const void *a1, void *a2, void *a3)
{
  CFTypeID v6;
  int64_t int64;
  unsigned int (*v8)(const void *, int64_t);
  BOOL v9;

  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  v8 = *(unsigned int (**)(const void *, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v8)
    v9 = v8(a1, int64) != 0;
  else
    v9 = 0;
  xpc_dictionary_set_BOOL(a3, "IsTrackQueueAboveHighWaterLevelOut", v9);
  return 0;
}

uint64_t FigRemakerFamilyServer_WriterSetTrackProperty(const void *a1, void *a2)
{
  CFTypeID v3;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  if (!xpc_dictionary_get_int64(a2, "TrackID"))
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigRemakerFamilyServer_WriterBeginSession(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  uint64_t (*v4)(const void *, __int128 *);
  __int128 v5;
  uint64_t v6;

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetCMTime();
  if (!(_DWORD)result)
  {
    v4 = *(uint64_t (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v4)
    {
      v5 = 0uLL;
      v6 = 0;
      return v4(a1, &v5);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterAddSampleBuffer(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID v5;
  int int64;
  const void *Value;
  const void *v8;
  xpc_object_t v9;
  IOSurfaceRef v10;
  uint64_t v11;

  if (a1
    && (v5 = CFGetTypeID(a1), v5 == FigAssetWriterGetTypeID())
    && (int64 = xpc_dictionary_get_int64(a3, "TrackID")) != 0)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 128), (const void *)int64);
    v8 = Value;
    if (Value)
      CFRetain(Value);
    v9 = xpc_dictionary_get_value(a3, "IOSurface");
    v10 = IOSurfaceLookupFromXPCObject(v9);
    FigXPCMessageCreateBlockBufferData();
    if (v8)
      CFRelease(v8);
    v11 = FigSignalErrorAt();
  }
  else
  {
    v11 = FigSignalErrorAt();
    v10 = 0;
  }
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t FigRemakerFamilyServer_WriterAddPixelBuffer(int a1, CFTypeRef cf, void *a3)
{
  CFTypeID v5;
  int64_t int64;
  uint64_t CMTime;
  uint64_t v8;
  IOSurfaceRef v9;
  xpc_object_t value;
  uint64_t BlockBufferData;
  uint64_t (*v12)(CFTypeRef, int64_t, _QWORD, __int128 *);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v14 = *MEMORY[0x1E0CA2E18];
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!cf)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(cf);
  if (v5 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a3, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    return CMTime;
  if (xpc_dictionary_get_value(a3, "PixelBuffer"))
  {
    FigXPCServerGetConnectionRefcon();
    v8 = FigPixelBufferRecipientCopyPixelBufferFromXPCMessage();
    if ((_DWORD)v8)
      return v8;
    v9 = 0;
  }
  else
  {
    value = xpc_dictionary_get_value(a3, "IOSurface");
    v9 = IOSurfaceLookupFromXPCObject(value);
    BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if ((_DWORD)BlockBufferData
      || (BlockBufferData = FigRemote_CreatePixelBufferFromSerializedAtomDataAndSurface(), (_DWORD)BlockBufferData))
    {
LABEL_12:
      v8 = BlockBufferData;
      if (!v9)
        return v8;
      goto LABEL_15;
    }
  }
  v12 = *(uint64_t (**)(CFTypeRef, int64_t, _QWORD, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 88);
  if (v12)
  {
    v16 = v14;
    v17 = v15;
    BlockBufferData = v12(cf, int64, 0, &v16);
    goto LABEL_12;
  }
  v8 = 4294954514;
  if (v9)
LABEL_15:
    CFRelease(v9);
  return v8;
}

uint64_t FigRemakerFamilyServer_WriterAddTaggedBufferGroup(int a1, CFTypeRef cf, void *a3)
{
  CFTypeID v5;
  int64_t int64;
  uint64_t CMTime;
  uint64_t v8;
  uint64_t (*v10)(CFTypeRef, int64_t, _QWORD, __int128 *);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v12 = *MEMORY[0x1E0CA2E18];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!cf)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(cf);
  if (v5 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a3, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    return CMTime;
  if (frs_shouldUseFigPixelBufferMemorySharing_onceToken != -1)
    dispatch_once(&frs_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_45);
  FigXPCServerGetConnectionRefcon();
  v8 = FigPixelBufferRecipientCopyTaggedBufferGroupFromXPCMessage();
  if ((_DWORD)v8)
    return v8;
  v10 = *(uint64_t (**)(CFTypeRef, int64_t, _QWORD, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 176);
  if (!v10)
    return 4294954514;
  v14 = v12;
  v15 = v13;
  return v10(cf, int64, 0, &v14);
}

uint64_t FigRemakerFamilyServer_EstablishPixelBufferRecipient()
{
  uint64_t result;

  if (FigXPCServerGetConnectionRefcon())
    return FigSignalErrorAt();
  result = FigPixelBufferRecipientCreateWithXPCMessage1AndUpdateXPCMessage2();
  if (!(_DWORD)result)
    return FigXPCServerSetConnectionRefcon();
  return result;
}

uint64_t FigRemakerFamilyServer_WriterMarkEndOfDataForTrack(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  uint64_t (*v6)(const void *, int64_t);

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(const void *, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v6)
    return v6(a1, int64);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_WriterEndSession(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  uint64_t (*v4)(const void *, __int128 *);
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v5 = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetCMTime();
  if (!(_DWORD)result)
  {
    v4 = *(uint64_t (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
    if (v4)
    {
      v7 = v5;
      v8 = v6;
      return v4(a1, &v7);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterFinish(const void *a1)
{
  CFTypeID v2;
  uint64_t (*v3)(const void *);

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  v3 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v3)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_WriterFinishAsync(const void *a1)
{
  CFTypeID v2;
  uint64_t (*v3)(const void *);

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  v3 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v3)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_WriterBeginPass(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  uint64_t v6;
  uint64_t (*v7)(const void *, int64_t, _QWORD);

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  v6 = FigXPCMessageCopyCFDictionary();
  if (!(_DWORD)v6)
  {
    v7 = *(uint64_t (**)(const void *, int64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
    if (!v7)
      return 4294954514;
    return v7(a1, int64, 0);
  }
  return v6;
}

uint64_t FigRemakerFamilyServer_WriterEndPass(const void *a1, void *a2)
{
  CFTypeID v4;
  int64_t int64;
  uint64_t (*v6)(const void *, int64_t);

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!(_DWORD)int64)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(const void *, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (v6)
    return v6(a1, int64);
  else
    return 4294954514;
}

uint64_t FigRemakerFamilyServer_WriterFlush(const void *a1)
{
  CFTypeID v2;
  uint64_t (*v3)(const void *);

  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigAssetWriterGetTypeID())
    return FigSignalErrorAt();
  v3 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v3)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t frs_SandboxRegistrationRetrieveFromMessageAndAssociateToURL()
{
  FigXPCMessageCopySandboxRegistration();
  return 0;
}

uint64_t frs_MakeWrapperForRemakerFamilyInternal(uint64_t a1, void *a2, const void *a3, uint64_t *a4, int a5, __int128 *a6, int a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  const __CFAllocator *v19;
  uint64_t *v20;
  uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, const __CFString *);
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, _QWORD);
  CFNumberRef v28;
  CFNumberRef v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, CFNumberRef);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, const __CFAllocator *, CFNumberRef *);
  int v35;
  int v36;
  const void *v37;
  CFTypeID v38;
  uint64_t TypeID;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, __CFString *, _QWORD);
  __CFString **v42;
  uint64_t v43;
  CFTypeID v45;
  uint64_t v46;
  CFTypeID v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  const void *v51;
  CFNumberRef number;

  v14 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E00402B22BBBCuLL);
  if (!v14)
  {
    v43 = FigSignalErrorAt();
    if (!(_DWORD)v43)
      return v43;
    v48 = a1;
    v49 = 0;
LABEL_67:
    FigRemakerFamilyServer_Destroy(v48, v49);
    return v43;
  }
  v15 = (uint64_t)v14;
  v14[4] = a3;
  CFRetain(a3);
  *(_DWORD *)(v15 + 16) = a5;
  v16 = FigSandboxAssertionCreateForPID();
  if ((_DWORD)v16
    || (*(_QWORD *)(v15 + 40) = os_retain(a2), v16 = FigXPCServerAssociateObjectWithConnection(), (_DWORD)v16))
  {
    v43 = v16;
    v48 = a1;
    v49 = v15;
    goto LABEL_67;
  }
  MEMORY[0x19402EA0C](gRemakerFamilyServerState_3);
  *(_QWORD *)v15 = gRemakerFamilyServerState_1;
  gRemakerFamilyServerState_1 = v15;
  ++gRemakerFamilyServerState_0;
  *(_BYTE *)(v15 + 49) = a7;
  if (!a7)
    goto LABEL_49;
  v17 = *a6;
  *(_OWORD *)(v15 + 68) = a6[1];
  *(_OWORD *)(v15 + 52) = v17;
  v18 = &gRemakerFamilyServerState_2;
  do
  {
    v18 = (uint64_t *)*v18;
    if (!v18)
    {
      v51 = 0;
      number = 0;
      v20 = (uint64_t *)malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
      if (!v20)
        goto LABEL_61;
      v18 = v20;
      *((_DWORD *)v20 + 2) = *(_DWORD *)(v15 + 16);
      if (in_audio_mx_server_process())
      {
        UsingPrimaryAVAudioSessionSiblingForAuditToken = CMSessionCreate();
        if ((_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
          goto LABEL_64;
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateWithCMSession(*MEMORY[0x1E0C9AE00], v51, v18 + 2);
        if ((_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
          goto LABEL_64;
      }
      else
      {
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v22 = *(_OWORD *)(v15 + 68);
        v50[0] = *(_OWORD *)(v15 + 52);
        v50[1] = v22;
        UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken((uint64_t)v19, v50, CFSTR("FigRemaker"), v18 + 2);
        if ((_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
        {
LABEL_64:
          v43 = UsingPrimaryAVAudioSessionSiblingForAuditToken;
          free(v18);
          goto LABEL_62;
        }
      }
      v23 = v18[2];
      LODWORD(v50[0]) = *((_DWORD *)v18 + 2);
      if (in_audio_mx_server_process())
      {
        if (v23)
        {
          v24 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v24)
          {
            v25 = *(void (**)(uint64_t, _QWORD, const __CFString *))(v24 + 56);
            if (v25)
              v25(v23, *MEMORY[0x1E0D495D8], CFSTR("RemakerServer"));
          }
          v26 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v26)
          {
            v27 = *(void (**)(uint64_t, _QWORD, _QWORD))(v26 + 56);
            if (v27)
              v27(v23, *MEMORY[0x1E0D494F8], *MEMORY[0x1E0D48EB0]);
          }
          v28 = CFNumberCreate(v19, kCFNumberSInt32Type, v50);
          if (v28)
          {
            v29 = v28;
            v30 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v30)
            {
              v31 = *(void (**)(uint64_t, _QWORD, CFNumberRef))(v30 + 56);
              if (v31)
                v31(v23, *MEMORY[0x1E0D495E8], v29);
            }
            goto LABEL_28;
          }
        }
        else
        {
          v29 = CFNumberCreate(v19, kCFNumberSInt32Type, v50);
          if (v29)
LABEL_28:
            CFRelease(v29);
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      UsingPrimaryAVAudioSessionSiblingForAuditToken = CMNotificationCenterAddListener();
      if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
      {
        UsingPrimaryAVAudioSessionSiblingForAuditToken = FigStartForwardingMediaServicesProcessDeathNotification();
        if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
        {
          *v18 = gRemakerFamilyServerState_2;
          gRemakerFamilyServerState_2 = (uint64_t)v18;
          goto LABEL_32;
        }
      }
      goto LABEL_64;
    }
  }
  while (*((_DWORD *)v18 + 2) != *(_DWORD *)(v15 + 16));
  v51 = 0;
  number = 0;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_32:
  v32 = v18[2];
  if (!v32
    || (v33 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0
    || (v34 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFNumberRef *))(v33 + 48)) == 0
    || (v34(v32, *MEMORY[0x1E0D494E8], v19, &number), !number))
  {
    ++*((_DWORD *)v18 + 3);
    goto LABEL_49;
  }
  LODWORD(v50[0]) = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, v50))
    v35 = v50[0];
  else
    v35 = 0;
  CFRelease(number);
  ++*((_DWORD *)v18 + 3);
  if ((v35 & 0xFFFFFFEF) != 0)
    v36 = v35;
  else
    v36 = 8;
  if (v36 != 8 && v36 != 32)
  {
    v37 = *(const void **)(v15 + 32);
    if (v37)
    {
      v38 = CFGetTypeID(v37);
      TypeID = FigRemakerGetTypeID();
      v40 = *(_QWORD *)(v15 + 32);
      if (v38 == TypeID)
      {
        v41 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
        if (v41)
        {
          v42 = kFigRemakerProperty_ThrottleForBackground;
LABEL_60:
          if (!v41(v40, *v42, *MEMORY[0x1E0C9AE50]))
            goto LABEL_49;
        }
        goto LABEL_61;
      }
      if (!v40)
        goto LABEL_49;
      v45 = CFGetTypeID(*(CFTypeRef *)(v15 + 32));
      v46 = FigAssetReaderGetTypeID();
      v40 = *(_QWORD *)(v15 + 32);
      if (v45 == v46)
      {
        v41 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
        if (v41)
        {
          v42 = kFigAssetReaderProperty_ThrottleForBackground;
          goto LABEL_60;
        }
LABEL_61:
        v43 = FigSignalErrorAt();
        if (!(_DWORD)v43)
          goto LABEL_49;
LABEL_62:
        FigRemakerFamilyServer_Destroy(a1, v15);
        MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
        return v43;
      }
      if (v40)
      {
        v47 = CFGetTypeID(*(CFTypeRef *)(v15 + 32));
        if (v47 == FigAssetWriterGetTypeID())
        {
          v40 = *(_QWORD *)(v15 + 32);
          v41 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
          if (v41)
          {
            v42 = kFigAssetWriterProperty_ThrottleForBackground;
            goto LABEL_60;
          }
          goto LABEL_61;
        }
      }
    }
  }
LABEL_49:
  MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
  v43 = 0;
  if (a4)
    *a4 = v15;
  return v43;
}

void frs_FinalizeClient(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  const void *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *i;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *j;
  const void *v15;
  const void *v16;
  const void *v17;
  void *v18;
  void **v19;
  void *v20;
  const void *v21;

  *((_BYTE *)a1 + 48) = 1;
  if (a1[4])
  {
    MEMORY[0x19402EA0C](gRemakerFamilyServerState_3);
    v2 = &gRemakerFamilyServerState_2;
    do
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
      {
        MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
        goto LABEL_8;
      }
    }
    while (*((_DWORD *)v2 + 2) != *((_DWORD *)a1 + 4));
    MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
    if (v2[2])
      FigStopForwardingMediaServicesProcessDeathNotification();
LABEL_8:
    v3 = a1[4];
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
      v5 = (const void *)a1[4];
      if (v5)
      {
        CFRelease(v5);
        a1[4] = 0;
      }
    }
  }
  if (*((_BYTE *)a1 + 88))
  {
    FigRemote_RemoveReleaseAndClearLayerHost((id *)a1 + 13);
    if (a1[15])
      FigRemote_RemoveReleaseAndClearCAImageQueuesAndSlotIDs((void *)a1[12], (CFTypeRef *)a1 + 14, (CFArrayRef *)a1 + 15);
    FigRemote_ReleaseAndClearLocalCAContextAndShutDownCAServer((id *)a1 + 12, MEMORY[0x1E0C80D38]);
  }
  MEMORY[0x19402EA0C](gRemakerFamilyServerState_3);
  v6 = &gRemakerFamilyServerState_1;
  v7 = &gRemakerFamilyServerState_1;
  do
  {
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_39;
  }
  while (v7 != a1);
  if (*((_BYTE *)a1 + 49))
    v8 = *((_DWORD *)a1 + 4);
  else
    v8 = 0;
  for (i = (uint64_t *)gRemakerFamilyServerState_1; i != a1; i = (uint64_t *)*i)
    v6 = i;
  *v6 = *a1;
  --gRemakerFamilyServerState_0;
  MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
  if (v8)
  {
    MEMORY[0x19402EA0C](gRemakerFamilyServerState_3);
    v10 = &gRemakerFamilyServerState_2;
    do
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
      {
        FigSignalErrorAt();
        goto LABEL_39;
      }
    }
    while (*((_DWORD *)v10 + 2) != v8);
    v11 = *((_DWORD *)v10 + 3) - 1;
    *((_DWORD *)v10 + 3) = v11;
    if (v11 || !v10[2])
    {
LABEL_39:
      MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
      goto LABEL_40;
    }
    v12 = &gRemakerFamilyServerState_2;
    v13 = &gRemakerFamilyServerState_2;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v10 == v13)
      {
        for (j = (uint64_t *)gRemakerFamilyServerState_2; j != v10; j = (uint64_t *)*j)
          v12 = j;
        *v12 = *v10;
        --gRemakerFamilyServerState_0;
        break;
      }
    }
    MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v21 = (const void *)v10[2];
    if (v21)
    {
      CFRelease(v21);
      v10[2] = 0;
    }
    free(v10);
  }
LABEL_40:
  a1[1] = 0;
  v15 = (const void *)a1[16];
  if (v15)
  {
    CFRelease(v15);
    a1[16] = 0;
  }
  v16 = (const void *)a1[17];
  if (v16)
  {
    CFRelease(v16);
    a1[17] = 0;
  }
  v17 = (const void *)a1[3];
  if (v17)
  {
    CFRelease(v17);
    a1[3] = 0;
  }
  v18 = (void *)a1[5];
  if (v18)
  {
    os_release(v18);
    a1[5] = 0;
  }
  v19 = (void **)a1[18];
  if (v19)
  {
    v20 = *v19;
    if (!*v19 || (*v19 = 0, xpc_release(v20), (v19 = (void **)a1[18]) != 0))
    {
      a1[18] = 0;
      free(v19);
    }
  }
  a1[18] = 0;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  free(a1);
}

uint64_t frs_FilterClientNotifications()
{
  return 0;
}

uint64_t frs_appStateChangeListener(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  int v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  const void *v12;
  CFTypeID v13;
  int v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  CFTypeID v22;
  uint64_t TypeID;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, uint64_t);
  uint64_t v26;
  const __CFString *v27;
  CFTypeID v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeID v31;
  uint64_t v32;
  int v33;
  int valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D492C0]);
  if (Value)
  {
    valuePtr = 0;
    if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
      v7 = valuePtr;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  MEMORY[0x19402EA0C](gRemakerFamilyServerState_3);
  v8 = &gRemakerFamilyServerState_2;
  do
  {
    v8 = (uint64_t *)*v8;
    if (v8)
      v9 = v8 == (uint64_t *)a2;
    else
      v9 = 1;
  }
  while (!v9);
  if (v8)
  {
    v10 = (uint64_t *)MEMORY[0x1E0C9AE50];
    switch(v7)
    {
      case 0:
      case 8:
        goto LABEL_34;
      case 1:
      case 3:
      case 5:
      case 6:
      case 7:
        return MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
      case 2:
        v11 = gRemakerFamilyServerState_1;
        if (!gRemakerFamilyServerState_1)
          return MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
        while (1)
        {
          if (!*(_BYTE *)(v11 + 49) || *(_DWORD *)(v11 + 16) != *(_DWORD *)(a2 + 8))
            goto LABEL_29;
          v12 = *(const void **)(v11 + 32);
          if (!v12)
            goto LABEL_27;
          v13 = CFGetTypeID(v12);
          if (v13 == FigRemakerGetTypeID())
          {
            v14 = -16101;
          }
          else
          {
            v15 = *(const void **)(v11 + 32);
            if (!v15)
              goto LABEL_27;
            v16 = CFGetTypeID(v15);
            if (v16 != FigAssetReaderGetTypeID())
            {
              v17 = *(const void **)(v11 + 32);
              if (v17)
              {
                v18 = CFGetTypeID(v17);
                if (v18 == FigAssetWriterGetTypeID())
                  v14 = -16121;
                else
                  v14 = 0;
                goto LABEL_28;
              }
LABEL_27:
              v14 = 0;
              goto LABEL_28;
            }
            v14 = -16111;
          }
LABEL_28:
          frs_stopAndFailClient(v11, v14);
LABEL_29:
          v11 = *(_QWORD *)v11;
          if (!v11)
            return MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
        }
      case 4:
        goto LABEL_35;
      default:
        if (v7 == 16)
        {
LABEL_34:
          v10 = (uint64_t *)MEMORY[0x1E0C9AE40];
        }
        else if (v7 != 32)
        {
          return MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
        }
LABEL_35:
        v19 = gRemakerFamilyServerState_1;
        if (!gRemakerFamilyServerState_1)
          return MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
        v20 = *v10;
        break;
    }
    do
    {
      if (*(_DWORD *)(v19 + 16) == *(_DWORD *)(a2 + 8))
      {
        v21 = *(const void **)(v19 + 32);
        if (v21)
        {
          v22 = CFGetTypeID(v21);
          TypeID = FigRemakerGetTypeID();
          v24 = *(_QWORD *)(v19 + 32);
          if (v22 == TypeID)
          {
            v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
            if (v25)
            {
              v26 = v24;
              v27 = CFSTR("Remaker_ThrottleForBackground");
LABEL_50:
              v33 = v25(v26, v27, v20);
              if (v33 == -12125 || v33 == -12139)
                frs_stopAndFailClient(v19, v33);
            }
          }
          else if (v24)
          {
            v28 = CFGetTypeID(*(CFTypeRef *)(v19 + 32));
            v29 = FigAssetReaderGetTypeID();
            v30 = *(_QWORD *)(v19 + 32);
            if (v28 == v29)
            {
              v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
              if (v25)
              {
                v26 = v30;
                v27 = CFSTR("AssetReader_ThrottleForBackground");
                goto LABEL_50;
              }
            }
            else if (v30)
            {
              v31 = CFGetTypeID(*(CFTypeRef *)(v19 + 32));
              if (v31 == FigAssetWriterGetTypeID())
              {
                v32 = *(_QWORD *)(v19 + 32);
                v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                if (v25)
                {
                  v26 = v32;
                  v27 = CFSTR("AssetWriter_ThrottleForBackground");
                  goto LABEL_50;
                }
              }
            }
          }
        }
      }
      v19 = *(_QWORD *)v19;
    }
    while (v19);
  }
  return MEMORY[0x19402EA24](gRemakerFamilyServerState_3);
}

void frs_stopAndFailClient(uint64_t a1, int a2)
{
  const __CFAllocator *v3;
  void *v4;
  const void *v5;
  CFTypeID v6;
  const __CFString *v7;
  __CFString **v8;
  const void *v9;
  CFTypeID v10;
  const void *v11;
  CFTypeID v12;
  __CFString *v13;
  uint64_t FigBaseObject;
  uint64_t v15;
  void (*v16)(uint64_t);
  CFDictionaryRef v17;
  void *values;
  void *keys;
  int valuePtr;

  valuePtr = a2;
  if (*(_BYTE *)(a1 + 84))
    return;
  keys = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  values = v4;
  v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    v6 = CFGetTypeID(v5);
    if (v6 == FigAssetReaderGetTypeID())
    {
      v7 = CFSTR("AssetReader_Failed");
      v8 = kFigAssetReaderNotificationParameter_OSStatus;
LABEL_11:
      v13 = *v8;
      keys = *v8;
      goto LABEL_13;
    }
    v9 = *(const void **)(a1 + 32);
    if (v9)
    {
      v10 = CFGetTypeID(v9);
      if (v10 == FigAssetWriterGetTypeID())
      {
        v7 = CFSTR("AssetWriter_Failed");
        v8 = kFigAssetWriterNotificationParameter_OSStatus;
        goto LABEL_11;
      }
      v11 = *(const void **)(a1 + 32);
      if (v11)
      {
        v12 = CFGetTypeID(v11);
        if (v12 == FigRemakerGetTypeID())
        {
          v7 = CFSTR("Remaker_Failed");
          v8 = kFigRemakerNotificationParameter_OSStatus;
          goto LABEL_11;
        }
      }
    }
  }
  v13 = 0;
  v7 = 0;
LABEL_13:
  FigBaseObject = FigRemakerGetFigBaseObject(*(_QWORD *)(a1 + 32));
  if (FigBaseObject)
  {
    v15 = FigBaseObject;
    v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v16)
      v16(v15);
  }
  v17 = 0;
  if (v13 && v7)
  {
    v17 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    *(_BYTE *)(a1 + 84) = 1;
    v4 = values;
  }
  if (v4)
    CFRelease(v4);
  if (v17)
    CFRelease(v17);
}

uint64_t fragmentedHeaderDataCallback(uint64_t a1, xpc_connection_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = FigXPCCreateBasicMessage();
  if ((_DWORD)v3)
  {
    v4 = v3;
  }
  else
  {
    v4 = FigXPCMessageSetBlockBuffer();
    if (!(_DWORD)v4)
      xpc_connection_send_message(*a2, 0);
  }
  FigXPCRelease();
  return v4;
}

uint64_t fragmentedMediaDataCallback(uint64_t a1, uint64_t a2, xpc_connection_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4 || (v4 = FigXPCMessageSetBlockBuffer(), (_DWORD)v4))
  {
    v5 = v4;
  }
  else
  {
    v5 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v5)
      xpc_connection_send_message(*a3, 0);
  }
  FigXPCRelease();
  return v5;
}

uint64_t frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects(const __CFArray *a1, const void *a2, _QWORD *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  BOOL v9;
  const __CFDictionary *ValueAtIndex;
  uint64_t v11;
  const __CFAllocator *v12;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v14;
  CFIndex v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFNumber *v18;
  uint64_t v19;
  __CFDictionary *v20;
  __CFDictionary *v21;
  uint64_t v23;
  void *value;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
LABEL_19:
      v11 = 0;
      *a3 = CFRetain(a1);
    }
    else
    {
      v7 = Count;
      v8 = 0;
      v9 = 1;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex)
          return FigSignalErrorAt();
        if (CFDictionaryContainsKey(ValueAtIndex, a2))
          break;
        v9 = ++v8 < v7;
        if (v7 == v8)
          goto LABEL_19;
      }
      if (!v9)
        goto LABEL_19;
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
      if (!MutableCopy)
        return FigSignalErrorAt();
      v14 = MutableCopy;
      v15 = 0;
      while (1)
      {
        v23 = 0;
        value = 0;
        v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v15);
        if (!v16)
          break;
        v17 = v16;
        v18 = (const __CFNumber *)CFDictionaryGetValue(v16, a2);
        if (v18)
        {
          CFNumberGetValue(v18, kCFNumberSInt64Type, &v23);
          v19 = MTAudioProcessingTapXPCServerCopyTapForID(v23, &value);
          if ((_DWORD)v19)
            goto LABEL_23;
          v20 = CFDictionaryCreateMutableCopy(v12, 0, v17);
          if (!v20)
            break;
          v21 = v20;
          CFDictionaryReplaceValue(v20, a2, value);
          CFRelease(value);
          CFArraySetValueAtIndex(v14, v15, v21);
          CFRelease(v21);
        }
        if (v7 == ++v15)
        {
          v11 = 0;
          *a3 = v14;
          return v11;
        }
      }
      v19 = FigSignalErrorAt();
LABEL_23:
      v11 = v19;
      CFRelease(v14);
    }
  }
  else
  {
    v11 = 0;
    *a3 = 0;
  }
  return v11;
}

void fsr_ConnectionRefconDestructor(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID()
{
  if (FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce, &__block_literal_global_46);
  return FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sFigBufferedAirPlaySubPipeManagerForRenderPipelineClassID;
}

CFStringRef FigBufferedAirPlaySubPipeManagerForRenderPipelineBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBufferedAirPlaySubPipeManagerForRenderPipeline %p]"), a1);
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineGetTypeID()
{
  if (FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce, &__block_literal_global_46);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineCreate(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, const void *a5, const __CFDictionary *a6, _QWORD *a7)
{
  const void *v12;
  const __CFAllocator *v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  const __CFAllocator *v20;
  uint64_t v21;
  Boolean v22;
  uint64_t v23;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void (*)(), uint64_t, uint64_t);
  const CMBufferCallbacks *v29;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v31;
  CFBooleanRef BOOLean;
  CMTime v36;
  CMTime v37;
  void *value;
  uint64_t v39;
  CMTime v40;
  CMTime v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  value = 0;
  v39 = 0;
  memset(&v37, 0, sizeof(v37));
  CMTimeMake(&v37, 0, 1000);
  memset(&v36, 0, sizeof(v36));
  CMTimeMake(&v36, 1, 1000);
  BOOLean = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  v12 = a2;
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4 || !a3 || !a7)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_35;
  }
  if (FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce, &__block_literal_global_46);
  v13 = a1;
  CMDerivedObjectCreate();
  if (!v39)
    goto LABEL_36;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 144) = CFRetain(a4);
  *(_QWORD *)(DerivedStorage + 152) = 0;
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a3);
  v15 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 72) = v15;
  if (!v15)
    goto LABEL_36;
  v16 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 32) = v16;
  if (!v16)
    goto LABEL_36;
  v17 = a5;
  if (a5)
    v17 = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 48) = v17;
  *(_QWORD *)(DerivedStorage + 56) = 0xC12E847FC0000000;
  *(_QWORD *)(DerivedStorage + 64) = 0;
  *(_QWORD *)(DerivedStorage + 168) = 0;
  *(_BYTE *)(DerivedStorage + 178) = 0;
  CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v19 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (!v19)
    goto LABEL_29;
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v21 = v19(CMBaseObject, CFSTR("ALACIsAllowed"), *MEMORY[0x1E0C9AE00], &BOOLean);
  if ((_DWORD)v21)
  {
LABEL_35:
    v31 = v21;
    goto LABEL_31;
  }
  v22 = BOOLean;
  if (BOOLean)
    v22 = CFBooleanGetValue(BOOLean);
  *(_BYTE *)(DerivedStorage + 177) = v22;
  v23 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 24) = v23;
  if (!v23)
  {
LABEL_36:
    v31 = 4294954510;
    goto LABEL_31;
  }
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v21 = CMBufferQueueCreate(v13, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 112));
  if ((_DWORD)v21)
    goto LABEL_35;
  v25 = *(_QWORD *)(DerivedStorage + 112);
  v41 = v36;
  v40 = v37;
  v21 = FigSampleBufferConsumerCreateForBufferQueue(v25, (uint64_t)&v41, (uint64_t)&v40, (_QWORD *)(DerivedStorage + 80));
  if ((_DWORD)v21)
    goto LABEL_35;
  v21 = CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(DerivedStorage + 112), (CMBufferQueueTriggerCallback)bapspManager_sourceDataBecameReady, *(void **)(DerivedStorage + 24), 11, 0, (CMBufferQueueTriggerToken *)(DerivedStorage + 120));
  if ((_DWORD)v21)
    goto LABEL_35;
  v21 = FigSampleBufferConsumerCreateForSampleBufferConsumer("sbcMediator", (_QWORD *)(DerivedStorage + 88));
  if ((_DWORD)v21)
    goto LABEL_35;
  v26 = *(_QWORD *)(DerivedStorage + 88);
  v27 = *(_QWORD *)(DerivedStorage + 24);
  v28 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
  if (!v28)
  {
LABEL_29:
    v31 = 4294954514;
    goto LABEL_31;
  }
  v21 = v28(v26, bapspManager_mediatorLowWaterTriggerCallback, v27, DerivedStorage + 128);
  if ((_DWORD)v21)
    goto LABEL_35;
  v29 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v21 = CMBufferQueueCreate(v20, 0, v29, (CMBufferQueueRef *)(DerivedStorage + 160));
  if ((_DWORD)v21)
    goto LABEL_35;
  *(_QWORD *)(DerivedStorage + 96) = CFRetain(v12);
  *(_BYTE *)(DerivedStorage + 136) = 0;
  *(_BYTE *)DerivedStorage = 0;
  if (a6 && CFDictionaryGetValueIfPresent(a6, CFSTR("LoggingID"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)DerivedStorage, 20, 0x600u);
  if (dword_1EE2A30A0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v31 = 0;
  *a7 = v39;
  v39 = 0;
LABEL_31:
  if (BOOLean)
    CFRelease(BOOLean);
  bapspManager_releaseAsync(v39);
  return v31;
}

void bapspManager_sourceDataBecameReady()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[5];

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 178))
    {
      v3 = DerivedStorage;
      CFRetain(v1);
      v4 = *(NSObject **)(v3 + 72);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __bapspManager_sourceDataBecameReady_block_invoke;
      block[3] = &__block_descriptor_tmp_93_1;
      block[4] = v1;
      dispatch_async(v4, block);
    }
    CFRelease(v1);
  }
}

void bapspManager_mediatorLowWaterTriggerCallback()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[5];

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 178))
    {
      v3 = DerivedStorage;
      CFRetain(v1);
      v4 = *(NSObject **)(v3 + 72);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __bapspManager_mediatorLowWaterTriggerCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_94_1;
      block[4] = v1;
      dispatch_async(v4, block);
    }
    CFRelease(v1);
  }
}

void bapspManager_releaseAsync(uint64_t a1)
{
  NSObject *global_queue;
  _QWORD block[5];

  if (a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __bapspManager_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_95_0;
    block[4] = a1;
    dispatch_async(global_queue, block);
  }
}

uint64_t bapspManager_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  uint64_t v5;
  void (*v6)(uint64_t, const __CFString *, _QWORD);
  NSObject *v7;
  opaqueCMBufferQueueTriggerToken *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  _QWORD block[6];
  os_log_type_t type;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A30A0)
  {
    v26 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 178))
  {
    *(_BYTE *)(DerivedStorage + 178) = 1;
    v4 = *(NSObject **)(DerivedStorage + 72);
    if (v4)
      dispatch_sync(v4, &__block_literal_global_79_0);
    v5 = *(_QWORD *)(DerivedStorage + 88);
    v6 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v6)
      v6(v5, CFSTR("DownstreamConsumer"), 0);
    *((_DWORD *)v28 + 6) = 0;
    v7 = *(NSObject **)(DerivedStorage + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __bapspManager_invalidate_block_invoke_2;
    block[3] = &unk_1E2F9E2F0;
    block[4] = &v27;
    block[5] = a1;
    dispatch_sync(v7, block);
    v8 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 120);
    if (v8)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 112), v8);
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
    v9 = *(_QWORD *)(DerivedStorage + 128);
    if (v9)
    {
      v10 = *(_QWORD *)(DerivedStorage + 88);
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v11)
        v11(v10, v9);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 40);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 48);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 144);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 152);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 80);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 80) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 112);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 88);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 96);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v20 = *(const void **)(DerivedStorage + 160);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
    v21 = *(const void **)(DerivedStorage + 64);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 168);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
  }
  _Block_object_dispose(&v27, 8);
  return 0;
}

void bapspManager_finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A30A0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bapspManager_invalidate(a1);
  v4 = DerivedStorage[9];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[9] = 0;
  }
  v5 = DerivedStorage[4];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[4] = 0;
  }
  v6 = (const void *)DerivedStorage[3];
  if (v6)
    CFRelease(v6);
}

__CFString *bapspManager_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigBufferedAirPlaySubPipeManagerForRenderPipelinet %p>"), a1);
  return Mutable;
}

uint64_t bapspManager_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  uint64_t v10;
  _QWORD block[9];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 178))
  {
    v9 = *(NSObject **)(DerivedStorage + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __bapspManager_copyProperty_block_invoke;
    block[3] = &unk_1E2F9E428;
    block[4] = &v13;
    block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync(v9, block);
  }
  v10 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t bapspManager_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(NSObject **)(DerivedStorage + 72);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __bapspManager_setProperty_block_invoke;
  block[3] = &unk_1E2F9E450;
  block[6] = a2;
  block[7] = a3;
  block[4] = &v11;
  block[5] = DerivedStorage;
  block[8] = a1;
  dispatch_sync(v7, block);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t __bapspManager_invalidate_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = bapspManager_clearCurrentSubPipe(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t bapspManager_clearCurrentSubPipe(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 104);
  if (!v3)
    return 0;
  v4 = DerivedStorage;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5)
    return 4294954514;
  result = v5(v3);
  if ((_DWORD)result)
    return result;
  v7 = *(_QWORD *)(v4 + 104);
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v8)
    return 4294954514;
  result = v8(v7);
  if ((_DWORD)result)
    return result;
  result = bapspManager_removeListenersForSubPipe(a1, *(_QWORD *)(v4 + 104));
  if ((_DWORD)result)
    return result;
  CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(*(_QWORD *)(v4 + 104));
  if (!CMBaseObject)
    return 4294954516;
  v10 = CMBaseObject;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (!v11)
    return 4294954514;
  result = v11(v10);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(v4 + 104);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      result = 0;
      *(_QWORD *)(v4 + 104) = 0;
    }
  }
  return result;
}

uint64_t bapspManager_removeListenersForSubPipe(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListeners();
}

void bapspManager_subPipeDecoderError(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  _QWORD block[6];
  os_log_type_t type;
  int v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 178))
  {
    v4 = DerivedStorage;
    if (dword_1EE2A30A0)
    {
      v9 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_BYTE *)(v4 + 136))
    {
      if (a2)
        CFRetain(a2);
      v6 = *(NSObject **)(v4 + 72);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __bapspManager_subPipeDecoderError_block_invoke;
      block[3] = &unk_1E2F9E358;
      block[4] = v10;
      block[5] = a2;
      dispatch_async(v6, block);
    }
  }
  _Block_object_dispose(v10, 8);
}

uint64_t bapspManager_notificationsFromSubPipe()
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

void bapspManager_subPipeFinishedProcessingData(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  _QWORD block[7];
  os_log_type_t type;
  int v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 178))
  {
    v6 = DerivedStorage;
    if (dword_1EE2A30A0)
    {
      v11 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2)
      CFRetain(a2);
    v8 = *(NSObject **)(v6 + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __bapspManager_subPipeFinishedProcessingData_block_invoke;
    block[3] = &unk_1E2F9E400;
    block[5] = a3;
    block[6] = a2;
    block[4] = v12;
    dispatch_async(v8, block);
  }
  _Block_object_dispose(v12, 8);
}

void __bapspManager_subPipeDecoderError_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = bapspManager_disconnectSbufBridge();
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = bapspManager_clearCurrentSubPipe(*(_QWORD *)(a1 + 40));
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      bapspManager_setSubPipeTerminationInFlight(*(_QWORD *)(a1 + 40), 0);
      bapspManager_scheduleProcessingDataIfPossible(*(const void **)(a1 + 40));
    }
  }
  bapspManager_releaseAsync(*(_QWORD *)(a1 + 40));
}

uint64_t bapspManager_disconnectSbufBridge()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, const __CFString *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A30A0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(DerivedStorage + 178))
    return 0;
  v2 = *(_QWORD *)(DerivedStorage + 88);
  v3 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v3)
    return v3(v2, CFSTR("DownstreamConsumer"), 0);
  else
    return 4294954514;
}

uint64_t bapspManager_setSubPipeTerminationInFlight(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 136) != a2)
  {
    *(_BYTE *)(result + 136) = a2;
    return CMBaseObjectGetDerivedStorage();
  }
  return result;
}

void bapspManager_scheduleProcessingDataIfPossible(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD v4[6];

  CMBaseObjectGetDerivedStorage();
  if (bapspManager_dataFlowIsAllowed())
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1)
      CFRetain(a1);
    v3 = *(NSObject **)(DerivedStorage + 72);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = __bapspManager_dequeueInspectSendSampleBuffer_block_invoke;
    v4[3] = &__block_descriptor_tmp_82_1;
    v4[4] = DerivedStorage;
    v4[5] = a1;
    dispatch_async(v3, v4);
  }
}

BOOL bapspManager_dataFlowIsAllowed()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _BOOL4 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = *(uint64_t (**)(uint64_t))(DerivedStorage + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(DerivedStorage + 88);
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v2)
      LODWORD(v2) = v2(v3) != 0;
  }
  v4 = *(double *)(v1 + 56) != -999999.875 && *(_BYTE *)(v1 + 136) == 0;
  return !(_DWORD)v2 && v4;
}

void __bapspManager_dequeueInspectSendSampleBuffer_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CFAllocator *v3;
  const __CFString *v4;
  opaqueCMSampleBuffer *v5;
  opaqueCMSampleBuffer *v6;
  const void *v7;
  uint64_t DerivedStorage;
  __int128 v9;
  CMTimeEpoch v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  CMTimeValue v19;
  unsigned int (*v20)(uint64_t, CMTimeValue, char *);
  uint64_t ASBD;
  char v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t Decryptor;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CFBooleanRef *);
  uint64_t v34;
  unsigned int (*v35)(uint64_t, const __CFString *, const __CFAllocator *, CFBooleanRef *);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  double v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _BOOL4 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  CMSampleTimingInfo *sampleTimingArray;
  CMItemCount v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const __CFAllocator *v63;
  CMFormatDescriptionRef v64;
  int v65;
  __CFDictionary *MutableCopy;
  const char *v67;
  CMSampleTimingInfo *v68;
  __int128 v69;
  int v70;
  CFTypeRef v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, CFTypeRef);
  int v74;
  CMFormatDescriptionRef v75;
  int v76;
  uint64_t v77;
  CFTypeRef v78;
  uint64_t (*v79)(uint64_t, CFTypeRef, CFBooleanRef *);
  int v80;
  const char *v81;
  uint64_t *v82;
  int v83;
  const void *v84;
  CFTypeRef v85;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v87;
  unsigned int v88;
  const char *v89;
  int v90;
  CFStringRef v91;
  int v92;
  __CFDictionary *v93;
  uint64_t v94;
  CFStringRef v95;
  __CFString **v96;
  CFDictionaryRef v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  int v100;
  uint64_t v101;
  NSObject *v102;
  unsigned int v103;
  unsigned int v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v111;
  uint64_t v112;
  CFTypeRef v113;
  uint64_t (*v114)(uint64_t, const __CFString *, CFTypeRef);
  int v115;
  uint64_t v116;
  uint64_t v117;
  CMBufferRef v118;
  CMBufferRef v119;
  uint64_t v120;
  void (*v121)(uint64_t, CMBufferRef);
  double v122;
  _QWORD *v123;
  CFTypeRef v124;
  CFTypeRef v125;
  CFTypeRef v126;
  NSObject *v127;
  NSObject *v128;
  uint64_t v129;
  _BOOL4 isMarkerSbuf;
  opaqueCMBufferQueue *v131;
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v133;
  const opaqueCMFormatDescription *v134;
  const void *v135;
  const void *v136;
  CFBooleanRef v137;
  char v138;
  const void *AllocatorForMedia;
  int v140;
  int v141;
  const void *v142;
  CFBooleanRef v143;
  NSObject *v144;
  unsigned int v145;
  unsigned int v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, opaqueCMSampleBuffer *);
  CMBufferRef v151;
  const void *v152;
  CFStringRef v153;
  CMFormatDescriptionRef v154;
  __CFDictionary *v155;
  CFStringRef v156;
  uint64_t v157;
  CFTypeRef value;
  const __CFString *v159;
  __int128 v161;
  uint64_t v162;
  const __CFString *v163;
  const __CFAllocator *alloc;
  const __CFString *key;
  CFTypeRef v166;
  CMTime v167;
  char v168;
  CFTypeRef v169;
  CFBooleanRef BOOLean;
  CFBooleanRef v171;
  CFTypeRef target;
  CMTime cf;
  const char *v174;
  _BYTE v175[10];
  __int16 v176;
  uint64_t v177;
  CMTime block;
  void *v179;
  const void *v180;
  uint64_t v181;

  v1 = a1;
  v181 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 178))
  {
    v2 = 0;
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = (const __CFString *)*MEMORY[0x1E0CA4E48];
    key = (const __CFString *)*MEMORY[0x1E0CA4E50];
    v157 = *MEMORY[0x1E0CA3228];
    value = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v159 = (const __CFString *)*MEMORY[0x1E0CA4E60];
    v163 = (const __CFString *)*MEMORY[0x1E0CA4E48];
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v5 = (opaqueCMSampleBuffer *)CMBufferQueueCopyHead(*(CMBufferQueueRef *)(*(_QWORD *)(v1 + 32) + 112));
      if (!v5)
        goto LABEL_290;
      v6 = v5;
      CMSampleBufferGetOutputPresentationTimeStamp(&block, v5);
      v7 = *(const void **)(v1 + 40);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v167.value = *MEMORY[0x1E0CA2E18];
      v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v167.epoch = v10;
      v166 = 0;
      if (!*(_BYTE *)(DerivedStorage + 178))
        break;
LABEL_266:
      v149 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 88);
      v150 = *(void (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v150)
        v150(v149, v6);
      v151 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(*(_QWORD *)(v1 + 32) + 112));
      if (v151)
        CFRelease(v151);
LABEL_270:
      CFRelease(v6);
      if (!bapspManager_dataFlowIsAllowed())
        goto LABEL_290;
      if (++v2 == 5)
      {
        bapspManager_scheduleProcessingDataIfPossible(*(_QWORD *)(v1 + 40));
        goto LABEL_290;
      }
    }
    v11 = DerivedStorage;
    if (*(double *)(DerivedStorage + 56) == -999999.875)
    {
      FigSignalErrorAt();
      goto LABEL_262;
    }
    v161 = v9;
    CMSampleBufferGetOutputPresentationTimeStamp(&v167, v6);
    v12 = *(_QWORD *)(v11 + 104);
    if (v12)
    {
      CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v12);
      v14 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v14 || v14(CMBaseObject, CFSTR("SubPipeType"), v3, &v166))
        goto LABEL_262;
    }
    CMBaseObjectGetDerivedStorage();
    CMSampleBufferGetOutputPresentationTimeStamp(&block, v6);
    v15 = CMGetAttachment(v6, v4, 0);
    v16 = CMGetAttachment(v6, key, 0);
    if (v15)
      bapspManager_setSubPipeTerminationInFlight((uint64_t)v7, 1);
    if (v16)
      bapspManager_setSubPipeTerminationInFlight((uint64_t)v7, 1);
    v17 = CMBaseObjectGetDerivedStorage();
    target = 0;
    cf.value = 0;
    BOOLean = 0;
    v171 = 0;
    v169 = 0;
    v168 = 0;
    if (bapspManager_isMarkerSbuf(v6))
      goto LABEL_86;
    if (CMSampleBufferGetFormatDescription(v6))
    {
      if (FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription())
      {
LABEL_86:
        v22 = 1;
        v23 = CFSTR("SubPipeTypeTranscode");
        goto LABEL_90;
      }
      v18 = *(_QWORD *)(v17 + 40);
      v19 = cf.value;
      v20 = *(unsigned int (**)(uint64_t, CMTimeValue, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 80);
      if (!v20)
      {
        v22 = 1;
        v23 = CFSTR("SubPipeTypeTranscode");
        v3 = alloc;
        goto LABEL_90;
      }
      if (v20(v18, v19, &v168))
      {
        v22 = 1;
        v23 = CFSTR("SubPipeTypeTranscode");
        v4 = v163;
        v3 = alloc;
        goto LABEL_90;
      }
      ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD();
      v3 = alloc;
      if (!ASBD)
      {
        v22 = 1;
        v23 = CFSTR("SubPipeTypeTranscode");
LABEL_39:
        v4 = v163;
        goto LABEL_90;
      }
    }
    else
    {
      ASBD = 0;
    }
    v24 = *(_QWORD *)(v17 + 104);
    if (v24)
    {
      v25 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v24);
      v26 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v26)
        v26(v25, CFSTR("SubPipeType"), v3, &v169);
    }
    Decryptor = FigSampleBufferGetDecryptor();
    v31 = 1;
    if (Decryptor)
    {
      v28 = Decryptor;
      v29 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (!v29 || (!v29(v28, v157, v3, &target) ? (v30 = target == value) : (v30 = 0), !v30))
        v31 = 0;
    }
    v32 = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(v17 + 40));
    v33 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v33
      || v33(v32, CFSTR("ALACIsAllowed"), v3, &BOOLean)
      || (v34 = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(v17 + 40)),
          (v35 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
      || v35(v34, CFSTR("SupportsReceiverSideSoundCheck"), v3, &v171))
    {
      v22 = 1;
      v23 = CFSTR("SubPipeTypeTranscode");
      v1 = a1;
      goto LABEL_39;
    }
    v36 = *(unsigned __int8 *)(v17 + 177);
    if (v36 == CFBooleanGetValue(BOOLean))
    {
      LODWORD(v37) = 0;
      goto LABEL_65;
    }
    *(_BYTE *)(v17 + 177) = CFBooleanGetValue(BOOLean);
    v38 = CMBaseObjectGetDerivedStorage();
    block.value = 0;
    if (!*(_QWORD *)(v38 + 104))
    {
      LODWORD(v37) = 0;
      v3 = alloc;
      goto LABEL_65;
    }
    v39 = v38;
    if (CMSampleBufferGetFormatDescription(v6)
      && !FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription())
    {
      v37 = FigEndpointStreamAudioFormatDescriptionGetASBD();
      if (!v37)
      {
LABEL_275:
        v3 = alloc;
LABEL_63:
        if (block.value)
          CFRelease((CFTypeRef)block.value);
LABEL_65:
        *(_BYTE *)(v17 + 176) = CFBooleanGetValue(v171);
        v47 = *(double *)(v17 + 56);
        v48 = CFBooleanGetValue(BOOLean);
        v49 = 1;
        if (ASBD && !v48)
        {
          v49 = 0;
          v50 = *(_DWORD *)(ASBD + 8);
          if (v50 > 1902928226)
          {
            if (v50 != 1902928227)
            {
              v51 = 2053923171;
LABEL_72:
              if (v50 != v51)
                v49 = 1;
            }
          }
          else if (v50 != 1634492771)
          {
            v51 = 1668047203;
            goto LABEL_72;
          }
        }
        v54 = v47 == 1.0 && v168 != 0 && v31 && *(_QWORD *)(v17 + 64) == 0;
        v1 = a1;
        v4 = v163;
        v55 = v49 & v54;
        if (v169 && !FigCFEqual() && !(_DWORD)v37)
          goto LABEL_86;
        v22 = 0;
        if (v55)
          v23 = CFSTR("SubPipeTypePassthrough");
        else
          v23 = CFSTR("SubPipeTypeTranscode");
LABEL_90:
        if (cf.value)
          CFRelease((CFTypeRef)cf.value);
        if (v169)
          CFRelease(v169);
        if (target)
          CFRelease(target);
        if (v171)
          CFRelease(v171);
        if (BOOLean)
          CFRelease(BOOLean);
        if ((v22 & 1) != 0)
        {
LABEL_212:
          v123 = (_QWORD *)CMBaseObjectGetDerivedStorage();
          v124 = CMGetAttachment(v6, v4, 0);
          v125 = CMGetAttachment(v6, key, 0);
          v126 = v125;
          if (v124 && !v123[13])
          {
            if (v7)
              CFRetain(v7);
            v128 = v123[4];
            block.value = MEMORY[0x1E0C809B0];
            *(_QWORD *)&block.timescale = 0x40000000;
            block.epoch = (CMTimeEpoch)__bapspManager_PostInspectSampleBuffer_block_invoke;
            v179 = &__block_descriptor_tmp_84_0;
            v180 = v7;
            dispatch_async(v128, &block);
            if (!v126)
              goto LABEL_222;
          }
          else if (!v125)
          {
LABEL_222:
            v129 = CMBaseObjectGetDerivedStorage();
            isMarkerSbuf = bapspManager_isMarkerSbuf(v6);
            v131 = *(opaqueCMBufferQueue **)(v129 + 160);
            if (isMarkerSbuf)
              CMBufferQueueEnqueue(v131, v6);
            else
              CMBufferQueueReset(v131);
            FormatDescription = CMSampleBufferGetFormatDescription(v6);
            if (FormatDescription)
            {
              v133 = FormatDescription;
              v134 = (const opaqueCMFormatDescription *)v123[18];
              if (v134)
              {
                if (!CMAudioFormatDescriptionEqual(FormatDescription, v134, 7u, 0))
                {
                  v135 = (const void *)v123[18];
                  v123[18] = v133;
                  CFRetain(v133);
                  if (v135)
                    CFRelease(v135);
                }
              }
              else
              {
                v123[18] = FormatDescription;
                CFRetain(FormatDescription);
              }
            }
            v74 = 1;
            v3 = alloc;
LABEL_263:
            if (v166)
              CFRelease(v166);
            if (!v74)
              goto LABEL_270;
            goto LABEL_266;
          }
          if (!v123[13])
          {
            bapspManager_postNotification(v7, (uint64_t)CFSTR("PlayResourceReleased"), 0);
            if (v7)
              CFRetain(v7);
            v127 = v123[4];
            cf.value = MEMORY[0x1E0C809B0];
            *(_QWORD *)&cf.timescale = 0x40000000;
            cf.epoch = (CMTimeEpoch)__bapspManager_PostInspectSampleBuffer_block_invoke_2;
            v174 = (const char *)&__block_descriptor_tmp_85_0;
            *(_QWORD *)v175 = v7;
            dispatch_async(v127, &cf);
          }
          goto LABEL_222;
        }
        if (*(_QWORD *)(v11 + 104))
        {
          v56 = CMBaseObjectGetDerivedStorage();
          if (!*(_QWORD *)(v56 + 104))
            goto LABEL_131;
          v57 = v56;
          CMSampleBufferGetOutputPresentationTimeStamp(&cf, v6);
          target = 0;
          if ((cf.flags & 1) != 0)
          {
            v68 = (CMSampleTimingInfo *)CFAllocatorAllocate(v3, 72, 0);
            if (!v68)
            {
              v70 = FigSignalErrorAt();
              v71 = 0;
              goto LABEL_121;
            }
            sampleTimingArray = v68;
            CMTimeMake(&block, 0, 1);
            v69 = *(_OWORD *)&block.value;
            sampleTimingArray->duration.epoch = block.epoch;
            *(_OWORD *)&sampleTimingArray->duration.value = v69;
            sampleTimingArray->presentationTimeStamp = cf;
            *(_OWORD *)&sampleTimingArray->decodeTimeStamp.value = v161;
            sampleTimingArray->decodeTimeStamp.epoch = v10;
            v59 = 1;
          }
          else
          {
            sampleTimingArray = 0;
            v59 = 0;
          }
          v70 = CMSampleBufferCreate(v3, 0, 1u, 0, 0, 0, 0, v59, sampleTimingArray, 0, 0, (CMSampleBufferRef *)&target);
          if (v70)
            goto LABEL_119;
          if (v163)
            CMSetAttachment(target, v163, value, 1u);
          if (!target)
          {
LABEL_119:
            v71 = 0;
            if (!sampleTimingArray)
              goto LABEL_121;
          }
          else
          {
            v71 = CFRetain(target);
            if (!sampleTimingArray)
            {
LABEL_121:
              v1 = a1;
              if (target)
                CFRelease(target);
              if (!v70)
              {
                bapspManager_setSubPipeTerminationInFlight((uint64_t)v7, 1);
                v72 = *(_QWORD *)(v57 + 88);
                v73 = *(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (!v73)
                {
                  v70 = -12782;
                  if (!v71)
                  {
LABEL_129:
                    if (v70)
                    {
                      v74 = 1;
LABEL_132:
                      v4 = v163;
                      goto LABEL_263;
                    }
LABEL_131:
                    v74 = 0;
                    goto LABEL_132;
                  }
LABEL_128:
                  CFRelease(v71);
                  goto LABEL_129;
                }
                v70 = v73(v72, v71);
                if (!v70)
                  bapspManager_postNotification(v7, (uint64_t)CFSTR("FinishingSubPipe"), 0);
              }
              if (!v71)
                goto LABEL_129;
              goto LABEL_128;
            }
          }
          CFAllocatorDeallocate(v3, sampleTimingArray);
          goto LABEL_121;
        }
        v60 = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(v60 + 104))
        {
          if (FigSignalErrorAt())
            goto LABEL_262;
          goto LABEL_176;
        }
        v162 = v60;
        v61 = CFEqual(v23, CFSTR("SubPipeTypePassthrough"));
        v62 = CMBaseObjectGetDerivedStorage();
        if (v61)
        {
          target = 0;
          v63 = v3;
          v64 = CMSampleBufferGetFormatDescription(v6);
          v65 = FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription();
          if (v65)
          {
            v90 = v65;
            MutableCopy = 0;
            v95 = 0;
            v3 = v63;
          }
          else
          {
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (MutableCopy)
            {
              if (v7)
                v67 = (const char *)CMBaseObjectGetDerivedStorage();
              else
                v67 = "";
              v156 = CFStringCreateWithCString(alloc, v67, 0x8000100u);
              CFDictionarySetValue(MutableCopy, CFSTR("LoggingID"), v156);
              v82 = (uint64_t *)(v62 + 104);
              v83 = FigBufferedAirPlayAudioChainSubPipePassthroughCreate((uint64_t)alloc, *(const void **)(v62 + 96), (uint64_t)v64, MutableCopy, (uint64_t *)(v62 + 104));
              if (v83 || (v83 = bapspManager_addListenersForSubPipe((uint64_t)v7, *v82)) != 0)
              {
                v90 = v83;
              }
              else
              {
                v84 = *(const void **)(v62 + 152);
                v85 = target;
                *(_QWORD *)(v62 + 152) = target;
                if (v85)
                  CFRetain(v85);
                if (v84)
                  CFRelease(v84);
                if (dword_1EE2A30A0)
                {
                  LODWORD(v171) = 0;
                  LOBYTE(BOOLean) = 0;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v87 = v171;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)BOOLean))
                    v88 = v87;
                  else
                    v88 = v87 & 0xFFFFFFFE;
                  if (v88)
                  {
                    if (v7)
                      v89 = (const char *)CMBaseObjectGetDerivedStorage();
                    else
                      v89 = "";
                    v94 = *v82;
                    LODWORD(cf.value) = 136315906;
                    *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"bapspManager_createAndConfigurePipeForPassthrough";
                    LOWORD(cf.flags) = 2048;
                    *(_QWORD *)((char *)&cf.flags + 2) = v7;
                    HIWORD(cf.epoch) = 2082;
                    v174 = v89;
                    *(_WORD *)v175 = 2048;
                    *(_QWORD *)&v175[2] = v94;
                    _os_log_send_and_compose_impl();
                  }
                  v3 = alloc;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v90 = 0;
                  goto LABEL_164;
                }
                v90 = 0;
              }
              v3 = alloc;
LABEL_164:
              v95 = v156;
              goto LABEL_165;
            }
            v95 = 0;
            v90 = -12786;
            v3 = alloc;
          }
LABEL_165:
          if (target)
            CFRelease(target);
          if (MutableCopy)
            CFRelease(MutableCopy);
          if (v95)
            CFRelease(v95);
          v96 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProcessingMode_Passthrough;
          v4 = v163;
          if (!v90)
            goto LABEL_172;
          goto LABEL_260;
        }
        v171 = 0;
        target = 0;
        v155 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        v75 = CMSampleBufferGetFormatDescription(v6);
        v76 = FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription();
        if (v76)
        {
          v92 = v76;
          v91 = 0;
        }
        else
        {
          v77 = *(_QWORD *)(v62 + 40);
          v78 = target;
          v79 = *(uint64_t (**)(uint64_t, CFTypeRef, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 72);
          if (v79)
          {
            v80 = v79(v77, v78, &v171);
            if (!v80)
            {
              v154 = v75;
              if (v7)
                v81 = (const char *)CMBaseObjectGetDerivedStorage();
              else
                v81 = "";
              v93 = v155;
              v153 = CFStringCreateWithCString(alloc, v81, 0x8000100u);
              CFDictionarySetValue(v155, CFSTR("LoggingID"), v153);
              v136 = *(const void **)(v62 + 96);
              v137 = v171;
              v138 = *(_BYTE *)(v62 + 176);
              AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
              v140 = FigBufferedAirPlayAudioChainSubPipeTranscodeCreate(alloc, v136, v154, v137, v138, AllocatorForMedia, v155, (_QWORD *)(v62 + 104));
              if (!v140)
              {
                v141 = bapspManager_addListenersForSubPipe((uint64_t)v7, *(_QWORD *)(v62 + 104));
                v4 = v163;
                if (v141)
                {
                  v92 = v141;
                }
                else
                {
                  v142 = *(const void **)(v62 + 152);
                  v143 = v171;
                  *(_QWORD *)(v62 + 152) = v171;
                  if (v143)
                    CFRetain(v143);
                  if (v142)
                    CFRelease(v142);
                  if (dword_1EE2A30A0)
                  {
                    LODWORD(BOOLean) = 0;
                    LOBYTE(v169) = 0;
                    v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v145 = BOOLean;
                    if (os_log_type_enabled(v144, (os_log_type_t)v169))
                      v146 = v145;
                    else
                      v146 = v145 & 0xFFFFFFFE;
                    if (v146)
                    {
                      if (v7)
                        v147 = (const char *)CMBaseObjectGetDerivedStorage();
                      else
                        v147 = "";
                      v148 = *(_QWORD *)(v62 + 104);
                      LODWORD(cf.value) = 136315906;
                      *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"bapspManager_createAndConfigurePipeForTranscode";
                      LOWORD(cf.flags) = 2048;
                      *(_QWORD *)((char *)&cf.flags + 2) = v7;
                      HIWORD(cf.epoch) = 2082;
                      v174 = v147;
                      *(_WORD *)v175 = 2048;
                      *(_QWORD *)&v175[2] = v148;
                      _os_log_send_and_compose_impl();
                    }
                    v3 = alloc;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v92 = 0;
LABEL_251:
                    v91 = v153;
                    if (!v155)
                      goto LABEL_253;
                    goto LABEL_252;
                  }
                  v92 = 0;
                }
                v3 = alloc;
                goto LABEL_251;
              }
              v92 = v140;
              v4 = v163;
              v3 = alloc;
              goto LABEL_251;
            }
            v92 = v80;
            v91 = 0;
          }
          else
          {
            v91 = 0;
            v92 = -12782;
          }
          v3 = alloc;
        }
        v93 = v155;
        if (!v155)
        {
LABEL_253:
          if (v91)
            CFRelease(v91);
          if (target)
            CFRelease(target);
          if (v171)
            CFRelease(v171);
          v96 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProcessingMode_Transcode;
          if (!v92)
          {
LABEL_172:
            v97 = CFDictionaryCreate(v3, (const void **)kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_ProcessingMode, (const void **)v96, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            bapspManager_postNotification(v7, (uint64_t)CFSTR("ProcessingModeChanged"), v97);
            bapspManager_setLoudnessInfoOnSubPipe();
            bapspManager_setAudioProcessingTapOnSubPipe();
            v98 = *(_QWORD *)(v162 + 88);
            v99 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
            if (v99)
            {
              v100 = v99(v98);
              if (!v97)
                goto LABEL_175;
            }
            else
            {
              v100 = -12782;
              if (!v97)
              {
LABEL_175:
                v1 = a1;
                if (v100)
                  goto LABEL_262;
LABEL_176:
                v101 = CMBaseObjectGetDerivedStorage();
                target = 0;
                if (dword_1EE2A30A0)
                {
                  LODWORD(v171) = 0;
                  LOBYTE(BOOLean) = 0;
                  v102 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v103 = v171;
                  if (os_log_type_enabled(v102, (os_log_type_t)BOOLean))
                    v104 = v103;
                  else
                    v104 = v103 & 0xFFFFFFFE;
                  if (v104)
                  {
                    if (v7)
                      v105 = (const char *)CMBaseObjectGetDerivedStorage();
                    else
                      v105 = "";
                    v106 = *(_QWORD *)(v101 + 88);
                    v107 = *(_QWORD *)(v101 + 104);
                    LODWORD(cf.value) = 136316162;
                    *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"bapspManager_connectSbufBridge";
                    LOWORD(cf.flags) = 2048;
                    *(_QWORD *)((char *)&cf.flags + 2) = v7;
                    HIWORD(cf.epoch) = 2082;
                    v174 = v105;
                    *(_WORD *)v175 = 2048;
                    *(_QWORD *)&v175[2] = v106;
                    v176 = 2048;
                    v177 = v107;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v4 = v163;
                  v3 = alloc;
                }
                if (*(_BYTE *)(v101 + 178))
                {
                  v115 = 0;
                }
                else
                {
                  v108 = *(_QWORD *)(v101 + 104);
                  if (!v108)
                  {
                    v111 = FigSignalErrorAt();
                    goto LABEL_195;
                  }
                  v109 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v108);
                  v110 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v110)
                  {
                    v111 = v110(v109, CFSTR("SourceSampleBufferConsumer"), v3, &target);
                    if (v111)
                    {
LABEL_195:
                      v115 = v111;
                      goto LABEL_197;
                    }
                    v112 = *(_QWORD *)(v101 + 88);
                    v113 = target;
                    v114 = *(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 56);
                    if (v114)
                    {
                      v111 = v114(v112, CFSTR("DownstreamConsumer"), v113);
                      goto LABEL_195;
                    }
                  }
                  v115 = -12782;
                }
LABEL_197:
                if (target)
                  CFRelease(target);
                if (!v115)
                {
                  v116 = CMBaseObjectGetDerivedStorage();
                  if (*(_QWORD *)(v116 + 104))
                  {
                    v117 = v116;
                    if (!CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(v116 + 160)))
                    {
                      v118 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v117 + 160));
                      if (v118)
                      {
                        v119 = v118;
                        do
                        {
                          if (!CMGetAttachment(v119, v4, 0)
                            && !CMGetAttachment(v119, key, 0)
                            && !CMGetAttachment(v119, v159, 0))
                          {
                            v120 = *(_QWORD *)(v117 + 88);
                            v121 = *(void (**)(uint64_t, CMBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
                            if (v121)
                              v121(v120, v119);
                          }
                          CFRelease(v119);
                          v119 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v117 + 160));
                        }
                        while (v119);
                      }
                      CMBufferQueueReset(*(CMBufferQueueRef *)(v117 + 160));
                    }
                  }
                  v122 = *(double *)(v11 + 56);
                  block = v167;
                  if (!bapspManager_startAudioChainForSubPipe(v122, (uint64_t)v7, (__int128 *)&block.value, MEMORY[0x1E0CA2E18]))goto LABEL_212;
                }
LABEL_262:
                v74 = 1;
                goto LABEL_263;
              }
            }
            CFRelease(v97);
            goto LABEL_175;
          }
LABEL_260:
          v74 = 1;
          v1 = a1;
          goto LABEL_263;
        }
LABEL_252:
        CFRelease(v93);
        goto LABEL_253;
      }
      v40 = FigEndpointStreamAudioFormatDescriptionGetASBD();
      if (v40)
      {
        v41 = *(unsigned __int8 *)(v39 + 177);
        if (!*(_BYTE *)(v39 + 177))
        {
          v3 = alloc;
          goto LABEL_55;
        }
        v42 = *(_DWORD *)(v37 + 8);
        v41 = 1;
        if (v42 > 1902928226)
        {
          v3 = alloc;
          if (v42 == 1902928227)
            goto LABEL_55;
          v43 = 2053923171;
        }
        else
        {
          v3 = alloc;
          if (v42 == 1634492771)
            goto LABEL_55;
          v43 = 1668047203;
        }
        if (v42 != v43)
          v41 = 0;
LABEL_55:
        v44 = *(_DWORD *)(v40 + 8);
        v45 = 1;
        if (v44 > 1902928226)
        {
          if (v44 != 1902928227)
          {
            v46 = 2053923171;
LABEL_60:
            if (v44 != v46)
              v45 = 0;
          }
        }
        else if (v44 != 1634492771)
        {
          v46 = 1668047203;
          goto LABEL_60;
        }
        LODWORD(v37) = v41 != v45;
        goto LABEL_63;
      }
    }
    LODWORD(v37) = 0;
    goto LABEL_275;
  }
LABEL_290:
  v152 = *(const void **)(v1 + 40);
  if (v152)
    CFRelease(v152);
}

uint64_t bapspManager_startAudioChainForSubPipe(double a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t DerivedStorage;
  int isSubPipeStarted;
  uint64_t v9;
  BOOL v10;
  uint64_t (*v11)(uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void (*v15)(uint64_t, __int128 *, __int128 *, float);
  float v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  isSubPipeStarted = bapspManager_isSubPipeStarted();
  v9 = *(_QWORD *)(DerivedStorage + 104);
  if (v9)
    v10 = isSubPipeStarted == 0;
  else
    v10 = 0;
  if (!v10)
    return 0;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v11)
    return 4294954514;
  result = v11(v9);
  if ((_DWORD)result)
    return result;
  v13 = *(_QWORD *)(DerivedStorage + 104);
  if (a1 == 0.0)
  {
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v14)
      return v14(v13);
    return 4294954514;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  v17 = *a4;
  v18 = *((_QWORD *)a4 + 2);
  v15 = *(void (**)(uint64_t, __int128 *, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v15)
  {
    v16 = a1;
    v23 = v19;
    v24 = v20;
    v21 = v17;
    v22 = v18;
    v15(v13, &v23, &v21, v16);
  }
  return 0;
}

BOOL bapspManager_isMarkerSbuf(opaqueCMSampleBuffer *a1)
{
  char flags;
  CMFormatDescriptionRef FormatDescription;
  CMTime v6;

  CMSampleBufferGetOutputPresentationTimeStamp(&v6, a1);
  flags = v6.flags;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return (flags & 1) == 0 && FormatDescription == 0;
}

void bapspManager_postNotification(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
    CFRetain(a3);
  if (a1)
    CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __bapspManager_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_83_0;
  block[4] = a2;
  block[5] = a1;
  block[6] = a3;
  dispatch_async(v7, block);
}

void __bapspManager_postNotification_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  bapspManager_releaseAsync(*(_QWORD *)(a1 + 40));
}

uint64_t bapspManager_setLoudnessInfoOnSubPipe()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 104);
  if (result)
  {
    v2 = *(_QWORD *)(DerivedStorage + 168);
    if (v2)
    {
      CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject();
      result = CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
      if (v4)
        return v4(CMBaseObject, CFSTR("LoudnessInfo"), v2);
    }
  }
  return result;
}

uint64_t bapspManager_setAudioProcessingTapOnSubPipe()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 104);
  if (result)
  {
    v2 = *(_QWORD *)(DerivedStorage + 64);
    CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject();
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
    if (v4)
      return v4(CMBaseObject, CFSTR("AudioProcessingTap"), v2);
  }
  return result;
}

uint64_t bapspManager_addListenersForSubPipe(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterAddWeakListeners();
}

uint64_t bapspManager_isSubPipeStarted()
{
  uint64_t CMBaseObject;
  uint64_t (*v1)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  int v2;
  CFBooleanRef v3;
  uint64_t Value;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104))
    return 0;
  CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject();
  v1 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v1)
    return 0;
  v2 = v1(CMBaseObject, CFSTR("IsStarted"), *MEMORY[0x1E0C9AE00], &BOOLean);
  v3 = BOOLean;
  if (v2)
  {
    Value = 0;
    if (!BOOLean)
      return Value;
    goto LABEL_5;
  }
  Value = CFBooleanGetValue(BOOLean);
  v3 = BOOLean;
  if (BOOLean)
LABEL_5:
    CFRelease(v3);
  return Value;
}

void __bapspManager_subPipeFinishedProcessingData_block_invoke(uint64_t a1)
{
  if (FigCFEqual())
    bapspManager_postNotification(*(const void **)(a1 + 48), (uint64_t)CFSTR("PlayResourceReleased"), 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = bapspManager_disconnectSbufBridge();
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = bapspManager_clearCurrentSubPipe(*(_QWORD *)(a1 + 48));
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      bapspManager_setSubPipeTerminationInFlight(*(_QWORD *)(a1 + 48), 0);
      bapspManager_scheduleProcessingDataIfPossible(*(_QWORD *)(a1 + 48));
    }
  }
  bapspManager_releaseAsync(*(_QWORD *)(a1 + 48));
}

uint64_t __bapspManager_copyProperty_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  uint64_t Float64;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const void *, uint64_t, uint64_t *);

  v3 = (const void *)a1[6];
  v2 = a1[7];
  v4 = (uint64_t *)a1[8];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 178))
  {
LABEL_15:
    result = 0;
    goto LABEL_10;
  }
  v6 = DerivedStorage;
  if (CFEqual(v3, CFSTR("SourceSampleBufferConsumer")))
  {
    v7 = *(const void **)(v6 + 80);
    if (!v7)
    {
      v9 = 0;
      goto LABEL_9;
    }
    Float64 = (uint64_t)CFRetain(v7);
LABEL_7:
    v9 = Float64;
LABEL_9:
    result = 0;
    *v4 = v9;
    goto LABEL_10;
  }
  if (CFEqual(v3, CFSTR("CurrentRate")))
  {
    Float64 = FigCFNumberCreateFloat64();
    goto LABEL_7;
  }
  v11 = CFEqual(v3, CFSTR("CurrentSubpipeType"));
  result = *(_QWORD *)(v6 + 104);
  if (v11)
  {
    if (!result)
    {
      *v4 = 0;
      goto LABEL_10;
    }
    CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(result);
    v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v13)
      v13(CMBaseObject, CFSTR("SubPipeType"), v2, v4);
    goto LABEL_15;
  }
  if (result)
  {
    v14 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(result);
    v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v15)
      result = v15(v14, v3, v2, v4);
    else
      result = 4294954514;
  }
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void __bapspManager_setProperty_block_invoke(uint64_t a1)
{
  const void *v2;
  CFTypeID v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t);
  int v8;
  const void *v9;
  CFTypeID v10;
  const void *v11;
  CFTypeID v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  CFTypeID v15;
  const void *v16;
  const void *v17;
  CFTypeID TypeID;
  const void *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 178))
    return;
  if (CFEqual(CFSTR("ThreadPriority"), *(CFTypeRef *)(a1 + 48)))
  {
    v2 = *(const void **)(a1 + 56);
    if (v2)
    {
      v3 = CFGetTypeID(v2);
      if (v3 == CFNumberGetTypeID())
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
        if (!v4)
          return;
        v5 = *(_QWORD *)(a1 + 56);
        CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v4);
        v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (v7)
          v8 = v7(CMBaseObject, CFSTR("ThreadPriority"), v5);
        else
          v8 = -12782;
        goto LABEL_23;
      }
    }
LABEL_22:
    v8 = FigSignalErrorAt();
LABEL_23:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
    return;
  }
  if (CFEqual(CFSTR("DecodeForPrerollRate"), *(CFTypeRef *)(a1 + 48)))
  {
    v9 = *(const void **)(a1 + 56);
    if (v9)
    {
      v10 = CFGetTypeID(v9);
      if (v10 == CFNumberGetTypeID())
      {
        CFNumberGetValue(*(CFNumberRef *)(a1 + 56), kCFNumberFloat64Type, (void *)(*(_QWORD *)(a1 + 40) + 56));
        bapspManager_startDataFlowIfRateIsValid(*(const void **)(a1 + 64));
        return;
      }
    }
    goto LABEL_22;
  }
  if (CFEqual(CFSTR("PipelineRate"), *(CFTypeRef *)(a1 + 48)))
  {
    v11 = *(const void **)(a1 + 56);
    if (v11)
    {
      v12 = CFGetTypeID(v11);
      if (v12 == CFNumberGetTypeID())
      {
        CFNumberGetValue(*(CFNumberRef *)(a1 + 56), kCFNumberFloat64Type, (void *)(*(_QWORD *)(a1 + 40) + 56));
        if (dword_1EE2A30A0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        bapspManager_startDataFlowIfRateIsValid(*(const void **)(a1 + 64));
        return;
      }
    }
LABEL_21:
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      return;
    goto LABEL_22;
  }
  if (CFEqual(CFSTR("LoudnessInfo"), *(CFTypeRef *)(a1 + 48)))
  {
    v14 = *(const void **)(a1 + 56);
    if (!v14 || (v15 = CFGetTypeID(v14), v15 == CFDictionaryGetTypeID()) || !*(_QWORD *)(a1 + 56))
    {
      v16 = *(const void **)(*(_QWORD *)(a1 + 40) + 168);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168) = 0;
      }
      v17 = *(const void **)(a1 + 56);
      if (v17)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168) = CFRetain(v17);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168) = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 168))
          goto LABEL_22;
      }
      bapspManager_setLoudnessInfoOnSubPipe();
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      return;
    }
    goto LABEL_21;
  }
  if (!CFEqual(CFSTR("AudioProcessingTap"), *(CFTypeRef *)(a1 + 48)))
    return;
  if (*(_QWORD *)(a1 + 56))
  {
    TypeID = MTAudioProcessingTapGetTypeID();
    if (TypeID != CFGetTypeID(*(CFTypeRef *)(a1 + 56)))
      return;
    v19 = *(const void **)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(const void **)(v20 + 64);
    *(_QWORD *)(v20 + 64) = v19;
    if (v19)
      CFRetain(v19);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 40);
    v21 = *(const void **)(v22 + 64);
    *(_QWORD *)(v22 + 64) = 0;
  }
  if (v21)
    CFRelease(v21);
  bapspManager_setAudioProcessingTapOnSubPipe();
}

void bapspManager_startDataFlowIfRateIsValid(const void *a1)
{
  if (*(double *)(CMBaseObjectGetDerivedStorage() + 56) != -999999.875)
  {
    CMBaseObjectGetDerivedStorage();
    bapspManager_scheduleProcessingDataIfPossible(a1);
  }
}

uint64_t bapspManager_setRateAndAnchorTime(const void *a1, __int128 *a2, __int128 *a3, double a4)
{
  uint64_t DerivedStorage;
  char *v9;
  char *v10;
  CFTypeRef v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 178))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    v13 = *a3;
    v14 = *((_QWORD *)a3 + 2);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = (char *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 64, 0);
    if (v9)
    {
      v10 = v9;
      if (a1)
        v11 = CFRetain(a1);
      else
        v11 = 0;
      *(_QWORD *)v10 = v11;
      *((double *)v10 + 7) = a4;
      *(_OWORD *)(v10 + 8) = v15;
      *((_QWORD *)v10 + 3) = v16;
      *((_OWORD *)v10 + 2) = v13;
      *((_QWORD *)v10 + 6) = v14;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), v10, (dispatch_function_t)bapspManager_setRateAndAnchorTimeDispatch);
    }
  }
  return 0;
}

uint64_t bapspManager_reset(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[7];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(NSObject **)(DerivedStorage + 72);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __bapspManager_reset_block_invoke;
  v8[3] = &unk_1E2F9E478;
  v8[4] = &v10;
  v8[5] = DerivedStorage;
  v8[6] = a1;
  v9 = a2;
  dispatch_sync(v5, v8);
  v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t bapspManager_flush(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[7];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(NSObject **)(DerivedStorage + 72);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __bapspManager_flush_block_invoke;
  v8[3] = &unk_1E2F9E4A0;
  v8[4] = &v11;
  v8[5] = DerivedStorage;
  v8[6] = a1;
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  dispatch_sync(v5, v8);
  v6 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void bapspManager_setRateAndAnchorTimeDispatch(uint64_t a1)
{
  const void *v2;
  double v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  double v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v2 = *(const void **)a1;
  v3 = *(double *)(a1 + 56);
  v15 = *(_OWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 24);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 48);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 178))
  {
    v5 = DerivedStorage;
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = v6;
    if (!*(_QWORD *)(v6 + 104) && *(double *)(v6 + 56) != -999999.875)
      goto LABEL_20;
    if (!bapspManager_isSubPipeStarted())
    {
      v8 = *(double *)(v7 + 56);
      if (v3 != 0.0 || v8 != -999999.875)
      {
        if (v3 != 0.0 && v8 == -999999.875
          || (v3 != 0.0 || v8 != 0.0)
          && ((v9 = v3 == 0.0, v8 != 0.0) ? (v10 = 1) : (v9 = 0, v10 = v3 == 0.0), v10 ? (v11 = !v9) : (v11 = 0), !v11))
        {
LABEL_20:
          *(double *)(v5 + 56) = v3;
          bapspManager_startDataFlowIfRateIsValid(v2);
          v12 = *(double *)(v5 + 56);
          v19 = v15;
          v20 = v16;
          v17 = v13;
          v18 = v14;
          bapspManager_startAudioChainForSubPipe(v12, (uint64_t)v2, &v19, &v17);
        }
      }
    }
  }
  bapspManager_releaseAsync(*(_QWORD *)a1);
  CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (void *)a1);
}

uint64_t __bapspManager_reset_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __int128 *);
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t v9;
  void (*v10)(uint64_t);
  const void *v11;
  __int128 v12;
  uint64_t v13;

  if (!*(_BYTE *)(*(_QWORD *)(result + 40) + 178))
  {
    v1 = result;
    result = bapspManager_disconnectSbufBridge();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
    {
      if (!*(_BYTE *)(v1 + 56))
        goto LABEL_11;
      result = bapspManager_flushAllSampleBufferConsumers();
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
      {
        if (!*(_BYTE *)(v1 + 56)
          || (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 104)) == 0
          || ((v3 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40)) == 0
            ? (result = 4294954514)
            : (v12 = *MEMORY[0x1E0CA2E68], v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16), result = v3(v2, &v12)),
              (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result) == 0))
        {
LABEL_11:
          v4 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 104);
          if (!v4)
            return bapspManager_setSubPipeTerminationInFlight(*(_QWORD *)(v1 + 48), 0);
          v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v5)
            result = v5(v4);
          else
            result = 4294954514;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 104);
            v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            result = v7 ? v7(v6) : 4294954514;
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
            if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
            {
              result = bapspManager_removeListenersForSubPipe(*(_QWORD *)(v1 + 48), *(_QWORD *)(*(_QWORD *)(v1 + 40) + 104));
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
              if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
              {
                CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(*(_QWORD *)(*(_QWORD *)(v1 + 40)
                                                                                            + 104));
                if (CMBaseObject)
                {
                  v9 = CMBaseObject;
                  v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
                  if (v10)
                    v10(v9);
                }
                v11 = *(const void **)(*(_QWORD *)(v1 + 40) + 104);
                if (v11)
                {
                  CFRelease(v11);
                  *(_QWORD *)(*(_QWORD *)(v1 + 40) + 104) = 0;
                }
                return bapspManager_setSubPipeTerminationInFlight(*(_QWORD *)(v1 + 48), 0);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bapspManager_flushAllSampleBufferConsumers()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 178))
    return 0;
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 80);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v3)
  {
    result = v3(v2);
    if ((_DWORD)result)
      return result;
    v5 = *(_QWORD *)(v1 + 88);
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v6)
      return v6(v5);
  }
  return 4294954514;
}

uint64_t __bapspManager_flush_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __int128 *);
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (!*(_BYTE *)(*(_QWORD *)(result + 40) + 178))
  {
    v1 = result;
    result = bapspManager_flushAllSampleBufferConsumers();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 104);
      if (v2)
      {
        v4 = *(_OWORD *)(v1 + 56);
        v5 = *(_QWORD *)(v1 + 72);
        v3 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v3)
        {
          v6 = v4;
          v7 = v5;
          result = v3(v2, &v6);
        }
        else
        {
          result = 4294954514;
        }
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
      }
    }
  }
  return result;
}

void __bapspManager_sourceDataBecameReady_block_invoke(uint64_t a1)
{
  bapspManager_scheduleProcessingDataIfPossible(*(const void **)(a1 + 32));
  bapspManager_releaseAsync(*(_QWORD *)(a1 + 32));
}

void __bapspManager_mediatorLowWaterTriggerCallback_block_invoke(uint64_t a1)
{
  bapspManager_scheduleProcessingDataIfPossible(*(const void **)(a1 + 32));
  bapspManager_releaseAsync(*(_QWORD *)(a1 + 32));
}

void __bapspManager_releaseAsync_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t FigMediaProcessorCreateForVideoRotation(const __CFAllocator *a1, int a2, int a3, int a4, const void *a5, const void *a6, void *a7, uint64_t a8, __int128 *a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, int a14, uint64_t *a15)
{
  uint64_t v19;
  const __CFAllocator *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef cf;
  const void *v35;

  v35 = 0;
  v33 = 0;
  cf = 0;
  v32 = 0;
  if ((a6 == 0) != (a7 != 0) || !a10)
    return FigSignalErrorAt();
  if (a2 > 179)
  {
    if (a2 != 180 && a2 != 270)
      return FigSignalErrorAt();
  }
  else if (a2)
  {
    if (a2 != 90)
      return FigSignalErrorAt();
  }
  else if (!(a4 | a3))
  {
    return FigSignalErrorAt();
  }
  if (a3 && a4)
    return FigSignalErrorAt();
  v19 = FigSampleBufferProcessorCreateForVideoRotation((uint64_t)a1, a2, a3, a4, a5, &v35);
  if (!(_DWORD)v19)
  {
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a6)
    {
      v21 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v20, a6, &cf);
    }
    else
    {
      v22 = *(_OWORD *)a8;
      v31 = *(_QWORD *)(a8 + 16);
      v23 = a9[1];
      v27 = *a9;
      v28 = v23;
      v29 = a9[2];
      v30 = v22;
      v21 = FigSampleBufferProviderCreateForVisualContext(v20, a7, &v30, &v27, &cf);
    }
    v24 = v21;
    if ((_DWORD)v21)
      goto LABEL_26;
    v27 = *(_OWORD *)a11;
    *(_QWORD *)&v28 = *(_QWORD *)(a11 + 16);
    v30 = *(_OWORD *)a12;
    v31 = *(_QWORD *)(a12 + 16);
    v24 = FigSampleBufferConsumerCreateForBufferQueue(a10, (uint64_t)&v27, (uint64_t)&v30, &v33);
    if ((_DWORD)v24)
      goto LABEL_26;
    v25 = a13
        ? FigActivitySchedulerCreateForCFRunLoop(a1, a13, &v32)
        : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a14, CFSTR("com.apple.coremedia.mediaprocessor.videorotation"), &v32);
    v24 = v25;
    if ((_DWORD)v25)
      goto LABEL_26;
    v19 = FigMediaProcessorCreate((uint64_t)a1, v35, cf, v33, v32, a15);
  }
  v24 = v19;
LABEL_26:
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  if (v35)
    CFRelease(v35);
  if (v33)
    CFRelease(v33);
  return v24;
}

uint64_t FigAlternateFilterMonitorTriggerSetBoss(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  if (!a2)
  {
    v5 = *(const void **)(DerivedStorage + 32);
    *(_QWORD *)(DerivedStorage + 32) = 0;
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v4)
    return FigSignalErrorAt();
  a2 = v4;
  v5 = *(const void **)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = v4;
  CFRetain(v4);
  if (v5)
LABEL_4:
    CFRelease(v5);
LABEL_5:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  if (a2)
    CFRelease(a2);
  return 0;
}

uint64_t FigAlternateFilterMonitorTriggerInvoke(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  CFArrayRef v6;
  const __CFArray *v7;
  uint64_t v8;
  CFIndex v9;
  void (**ValueAtIndex)(const void *, uint64_t, uint64_t, _QWORD);
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  if (*(_QWORD *)(DerivedStorage + 32))
    v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v5 = 0;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  v6 = famt_copyObserverEntries(a1);
  if (!v6)
  {
    v13 = FigSignalErrorAt();
    if (!v5)
      return v13;
    goto LABEL_13;
  }
  v7 = v6;
  v8 = FigAlternateSelectionBossLockForConfiguration((uint64_t)v5);
  if (!(_DWORD)v8)
  {
    if (CFArrayGetCount(v7) >= 1)
    {
      v9 = 0;
      do
      {
        ValueAtIndex = (void (**)(const void *, uint64_t, uint64_t, _QWORD))CFArrayGetValueAtIndex(v7, v9);
        v11 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v11)
        {
          v12 = (const void *)v11;
          ValueAtIndex[1](a1, v11, a2, ValueAtIndex[2]);
          CFRelease(v12);
        }
        ++v9;
      }
      while (v9 < CFArrayGetCount(v7));
    }
    v8 = (uint64_t)FigAlternateSelectionBossUnlockForConfiguration(v5);
  }
  v13 = v8;
  CFRelease(v7);
  if (v5)
LABEL_13:
    CFRelease(v5);
  return v13;
}

CFArrayRef famt_copyObserverEntries(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFArrayRef Copy;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  v3 = CFGetAllocator(a1);
  Copy = CFArrayCreateCopy(v3, *(CFArrayRef *)(DerivedStorage + 40));
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  return Copy;
}

uint64_t FigAlternateFilterMonitorTriggerAddObserver(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef value[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value[0] = (CFTypeRef)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!value[0])
    return FigSignalErrorAt();
  value[1] = a3;
  value[2] = a4;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 40), value);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  if (value[0])
    CFRelease(value[0]);
  return 0;
}

uint64_t FigAlternateFilterMonitorTriggerRemoveObserver()
{
  uint64_t DerivedStorage;
  CFIndex i;
  const __CFArray *Count;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 40);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
      return 0;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), i);
    v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (FigCFEqual())
      break;
    if (v3)
      CFRelease(v3);
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 40), i);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t FigAlternateFilterMonitorTriggerCreateForNotification(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_queue_t v13;
  CFMutableArrayRef Mutable;
  uint64_t v15;

  MEMORY[0x19402F294](&FigAlternateFilterMonitorTriggerGetClassID_sRegisterFigAlternateFilterMonitorTriggerTypeOnce, RegisterFigAlternateFilterMonitorTriggerType);
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  *DerivedStorage = v10;
  v11 = FigReentrantMutexCreate();
  DerivedStorage[3] = v11;
  if (!v11)
    return FigSignalErrorAt();
  v12 = a3 ? FigCFWeakReferenceHolderCreateWithReferencedObject() : 0;
  DerivedStorage[1] = v12;
  v13 = dispatch_queue_create("com.apple.coremedia.alternateFilterMonitorTrigger.callback", 0);
  DerivedStorage[2] = v13;
  if (!v13)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable(a1, 0, &kObserverEntryCFArrayValueCallbacks);
  DerivedStorage[5] = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  v15 = FigNotificationCenterAddWeakListener();
  if (!(_DWORD)v15)
    *a4 = 0;
  return v15;
}

uint64_t famt_notificationHandler(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FigAlternateFilterMonitorTriggerInvoke(a2, a5);
}

uint64_t famt_equal()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
    return 0;
  if (*(_QWORD *)(DerivedStorage + 8))
    v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v2 = 0;
  if (*(_QWORD *)(v1 + 8))
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v4 = 0;
  v3 = FigCFEqual();
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  return v3;
}

uint64_t famt_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8))
    v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v1 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (v1)
    CFRelease(v1);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
    CFRelease(v4);
  v5 = *(NSObject **)(DerivedStorage + 16);
  if (v5)
    dispatch_release(v5);
  return FigSimpleMutexDestroy();
}

CFStringRef famt_copyDebugDesc(const void *a1)
{
  uint64_t *DerivedStorage;
  const __CFArray *v3;
  const __CFAllocator *v4;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFStringRef v8;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = famt_copyObserverEntries(a1);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *DerivedStorage;
  if (!v3)
    return CFStringCreateWithFormat(v4, 0, CFSTR("[FigAlternateFilterMonitorTrigger<%p> \"%@\" numObservers:%d]"), a1, v5, 0);
  v6 = v3;
  Count = CFArrayGetCount(v3);
  v8 = CFStringCreateWithFormat(v4, 0, CFSTR("[FigAlternateFilterMonitorTrigger<%p> \"%@\" numObservers:%d]"), a1, v5, Count);
  CFRelease(v6);
  return v8;
}

uint64_t RegisterFigAlternateFilterMonitorTriggerType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigAlternateFilterMonitorTriggerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterMonitorTrigger <%p>]"), a1);
}

_QWORD *famt_observerEntryCFArrayRetainCallBack(const __CFAllocator *a1, __int128 *a2)
{
  _QWORD *v3;
  const void *v4;
  __int128 v5;

  v3 = CFAllocatorAllocate(a1, 24, 0);
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v4 = (const void *)*((_QWORD *)a2 + 2);
  if (v4)
    CFRetain(v4);
  v5 = *a2;
  v3[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)v3 = v5;
  return v3;
}

void famt_observerEntryCFArrayReleaseCallBack(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  CFTypeRef v4;

  if (*ptr)
    CFRelease(*ptr);
  v4 = ptr[2];
  if (v4)
    CFRelease(v4);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigCPERemoteInitializeWithOptions()
{
  uint64_t v0;
  uint64_t v1;

  v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if ((_DWORD)v0
    || (v0 = FigXPCCreateBasicMessage(), (_DWORD)v0)
    || (v0 = FigXPCMessageSetCFString(), (_DWORD)v0)
    || (v0 = FigXPCMessageSetCFDictionary(), (_DWORD)v0))
  {
    v1 = v0;
  }
  else
  {
    v1 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v1)
      v1 = FigXPCMessageCopyCFString();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v1;
}

uint64_t remoteXPCCPEClient_EnsureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __remoteXPCCPEClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E2F9E620;
  block[4] = &v3;
  if (remoteXPCCPEClient_EnsureClientEstablished_gCPERemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCCPEClient_EnsureClientEstablished_gCPERemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigCPERemoteUninitialize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if ((_DWORD)v0)
  {
    v2 = v0;
  }
  else
  {
    v1 = FigXPCCreateBasicMessage();
    if ((_DWORD)v1 || (v1 = FigXPCMessageSetCFString(), (_DWORD)v1) || (v1 = FigXPCMessageSetCFString(), (_DWORD)v1))
      v2 = v1;
    else
      v2 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigCPERemoteSetStorageLocation()
{
  uint64_t v0;
  uint64_t v1;

  if (FigCPERemoteSetStorageLocation_onceToken != -1)
    dispatch_once(&FigCPERemoteSetStorageLocation_onceToken, &__block_literal_global_47);
  v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if ((_DWORD)v0
    || (v0 = FigSandboxRegisterURLWithProcessAndCopyRegistration(), (_DWORD)v0)
    || (v0 = FigXPCCreateBasicMessage(), (_DWORD)v0)
    || (v0 = FigXPCMessageSetCFData(), (_DWORD)v0)
    || (v0 = FigXPCMessageSetCFURL(), (_DWORD)v0))
  {
    v1 = v0;
  }
  else
  {
    v1 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v1)
      FigCFDictionarySetValue();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v1;
}

uint64_t FigCPERemoteCopySessionRecords()
{
  uint64_t v0;
  uint64_t v1;

  v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if (!(_DWORD)v0)
  {
    v0 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v0)
    {
      v0 = FigXPCMessageSetCFData();
      if (!(_DWORD)v0)
      {
        v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v0)
          v0 = FigXPCMessageCopyCFDictionary();
      }
    }
  }
  v1 = v0;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v1;
}

uint64_t FigCPERemoteRemoveSessionRecords()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if ((_DWORD)v0)
  {
    v2 = v0;
  }
  else
  {
    v1 = FigXPCCreateBasicMessage();
    if ((_DWORD)v1 || (v1 = FigXPCMessageSetCFData(), (_DWORD)v1) || (v1 = FigXPCMessageSetCFArray(), (_DWORD)v1))
      v2 = v1;
    else
      v2 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigAlternateSelectionBossGetClassID()
{
  if (sRegisterFigAlternateSelectionBossClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigAlternateSelectionBossClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateSelectionBossType);
  return sFigAlternateSelectionBossClassID;
}

uint64_t RegisterFigAlternateSelectionBossType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateSelectionBossGetTypeID()
{
  if (sRegisterFigAlternateSelectionBossClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigAlternateSelectionBossClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateSelectionBossType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternateSelectionBossAddFilter(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v6 = fasb_addFilterGuts(a1, a2);
  MEMORY[0x19402EA24](*v5);
  return v6;
}

uint64_t fasb_addFilterGuts(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  void (*v4)(const void *);
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(const void *);
  int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v4(a2);
  result = fasb_removeFilter();
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(DerivedStorage + 48);
    v7 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v7)
      v8 = v7(a2);
    else
      v8 = -1;
    result = FigAlternateFilterTreeInsertLeaf(v6, a2, v8);
    if (!(_DWORD)result)
      return fasb_rebuildFilterTree();
  }
  return result;
}

uint64_t FigAlternateSelectionBossRemoveFilter(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  uint64_t v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v5 = fasb_removeFilter();
  MEMORY[0x19402EA24](*v4);
  return v5;
}

uint64_t fasb_removeFilter()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = FigAlternateFilterTreeRemoveLeaf();
  if (!(_DWORD)result)
    return fasb_rebuildFilterTree();
  return result;
}

uint64_t FigAlternateSelectionBossHasFilter(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  CFIndex v5;
  const __CFArray *Count;
  const void *ValueAtIndex;
  void (*v8)(const void *);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    v5 = 0;
    while (1)
    {
      Count = (const __CFArray *)v4[5];
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (v5 >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4[5], v5);
      v8 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v8)
        v8(ValueAtIndex);
      ++v5;
      if (FigCFEqual())
      {
        a2 = 1;
        goto LABEL_11;
      }
    }
    a2 = 0;
LABEL_11:
    MEMORY[0x19402EA24](*v4);
  }
  else
  {
    FigSignalErrorAt();
  }
  return a2;
}

uint64_t FigAlternateSelectionBossCopyProperty(uint64_t a1, __CFString *a2, uint64_t a3, const __CFArray **a4)
{
  _QWORD *DerivedStorage;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray **v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (CFEqual(a2, CFSTR("AlternateList")))
  {
    v7 = (CFTypeRef)DerivedStorage[3];
    if (!v7)
      goto LABEL_3;
LABEL_13:
    v7 = CFRetain(v7);
LABEL_14:
    v9 = 0;
    *a4 = (const __CFArray *)v7;
    goto LABEL_15;
  }
  if (CFEqual(a2, CFSTR("FilteredAlternateList")))
  {
    v10 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v10 + 24))
    {
      v11 = v10;
      while (*(_DWORD *)(v11 + 80) && !*(_BYTE *)(v11 + 122))
      {
        v8 = FigConditionVariableWaitRelative();
        if ((_DWORD)v8)
          goto LABEL_4;
      }
      v7 = *(CFTypeRef *)(v11 + 32);
      if (!v7)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    if (!CFEqual(a2, CFSTR("MediaSelectionArray")))
    {
      if (CFEqual(a2, CFSTR("HasHDRAlternates"))
        || CFEqual(a2, CFSTR("HasAtmosAlternates"))
        || CFEqual(a2, CFSTR("HasMultiChannelAudio"))
        || CFEqual(a2, CFSTR("HasPlayableMultiChannelAudio"))
        || CFEqual(a2, CFSTR("HighestVideoResolutionAlternateWithMultiChannelAudio"))
        || CFEqual(a2, CFSTR("HasLosslessAudio"))
        || CFEqual(a2, CFSTR("HasBinauralAudio")))
      {
        fasb_copyInitialAlternateListProperty((const __CFArray *)DerivedStorage[3], a2, a4);
        v9 = 0;
      }
      else if (CFEqual(a2, CFSTR("Paused")))
      {
        v9 = 0;
        if (*((_BYTE *)DerivedStorage + 122))
          v13 = (const __CFArray **)MEMORY[0x1E0C9AE50];
        else
          v13 = (const __CFArray **)MEMORY[0x1E0C9AE40];
        *a4 = *v13;
      }
      else
      {
        v9 = 4294954509;
      }
      goto LABEL_15;
    }
    if (DerivedStorage[3])
    {
      v7 = (CFTypeRef)DerivedStorage[2];
      if (!v7)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
LABEL_3:
  v8 = FigSignalErrorAt();
LABEL_4:
  v9 = v8;
LABEL_15:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v9;
}

const __CFArray *fasb_copyInitialAlternateListProperty(const __CFArray *result, __CFString *a2, const __CFArray **a3)
{
  int HasHDRAlternate;
  CFTypeRef *v5;

  if (a2 == CFSTR("HasHDRAlternates"))
  {
    HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasHDRAlternate(result);
LABEL_14:
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!HasHDRAlternate)
      v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    result = (const __CFArray *)CFRetain(*v5);
    goto LABEL_17;
  }
  if (a2 == CFSTR("HasAtmosAlternates"))
  {
    HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasATMOSAlternate(result);
    goto LABEL_14;
  }
  if (a2 == CFSTR("HasMultiChannelAudio"))
    goto LABEL_11;
  if (a2 == CFSTR("HasLosslessAudio"))
  {
    HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasLosslessAudioAlternate(result);
    goto LABEL_14;
  }
  if (a2 == CFSTR("HasBinauralAudio"))
  {
    HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasBinauralAudioAlternate(result);
    goto LABEL_14;
  }
  if (a2 == CFSTR("HasPlayableMultiChannelAudio"))
  {
LABEL_11:
    HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasMultiChannelAudioAlternate(result);
    goto LABEL_14;
  }
  if (a2 != CFSTR("HighestVideoResolutionAlternateWithMultiChannelAudio"))
    return result;
  result = FigAlternateSelectionUtility_HighestVideoResolutionAlternateWithMultiChannelAudio(result);
LABEL_17:
  *a3 = result;
  return result;
}

uint64_t FigAlternateSelectionBossSetProperty(const void *a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (FigCFEqual())
    {
      v8 = v7[13];
      v7[13] = a3;
      if (a3)
        CFRetain(a3);
      if (!v8)
        goto LABEL_16;
      CFRelease((CFTypeRef)v8);
    }
    else
    {
      if (!FigCFEqual())
      {
        v8 = 4294954509;
        goto LABEL_16;
      }
      v9 = (const void *)*MEMORY[0x1E0C9AE50];
      v10 = CMBaseObjectGetDerivedStorage();
      if (v9 == a3)
      {
        if (!*(_BYTE *)(v10 + 122))
        {
          FigAlternateSelectionBossLockForConfiguration((uint64_t)a1);
          v8 = 0;
          *(_BYTE *)(v10 + 122) = 1;
          goto LABEL_16;
        }
      }
      else if (*(_BYTE *)(v10 + 122))
      {
        v8 = (uint64_t)FigAlternateSelectionBossUnlockForConfiguration(a1);
        if (!(_DWORD)v8)
          *(_BYTE *)(v10 + 122) = 0;
        goto LABEL_16;
      }
    }
    v8 = 0;
LABEL_16:
    MEMORY[0x19402EA24](*v7);
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t FigAlternateSelectionBossAddMonitor(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  uint64_t v6;
  CFAllocatorRef v7;
  uint64_t (*v8)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v9;
  uint64_t v10;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFAllocatorRef v14;
  unsigned int (*v15)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v16;
  uint64_t (*v17)(const void *, CFTypeRef *);
  CFTypeRef v19;
  uint64_t (*v20)(const void *, const __CFString *, CFTypeRef);
  CFTypeRef v21;
  CFTypeRef cf;
  CFTypeRef v23;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v21 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v6 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v23 = 0;
  v7 = CFGetAllocator(a1);
  v8 = *(uint64_t (**)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v8 || (v9 = v8(a2, CFSTR("AlternateFilterMonitorProperty_Trigger"), v7, &v23), !v23))
  {
LABEL_16:
    v9 = 0;
    goto LABEL_17;
  }
  if (!(_DWORD)v9)
  {
    v10 = FigAlternateFilterMonitorTriggerSetBoss((uint64_t)v23, a1);
    if ((_DWORD)v10)
    {
LABEL_34:
      v9 = v10;
      goto LABEL_17;
    }
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(v6 + 64);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 64), i);
      v14 = CFGetAllocator(a1);
      v15 = *(unsigned int (**)(const void *, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v15
        && !v15(ValueAtIndex, CFSTR("AlternateFilterMonitorProperty_Trigger"), v14, &cf)
        && FigCFEqual())
      {
        v19 = cf;
        v20 = *(uint64_t (**)(const void *, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
        if (v20)
        {
          v10 = v20(a2, CFSTR("AlternateFilterMonitorProperty_Trigger"), v19);
          goto LABEL_34;
        }
        v9 = 4294954514;
        goto LABEL_17;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    goto LABEL_16;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  if (!(_DWORD)v9)
  {
    CFArrayAppendValue((CFMutableArrayRef)v5[8], a2);
    CMNotificationCenterGetDefaultLocalCenter();
    v16 = FigNotificationCenterAddWeakListener();
    if ((_DWORD)v16
      || (CMNotificationCenterGetDefaultLocalCenter(), v16 = FigNotificationCenterAddWeakListener(), (_DWORD)v16))
    {
      v9 = v16;
    }
    else
    {
      v17 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v17)
      {
        v9 = v17(a2, &v21);
        if (!(_DWORD)v9 && v21)
        {
          fasb_addFilterGuts((uint64_t)a1, v21);
          v9 = 0;
        }
      }
      else
      {
        v9 = 4294954514;
      }
    }
  }
  MEMORY[0x19402EA24](*v5);
  if (v21)
    CFRelease(v21);
  return v9;
}

void fasb_monitorStateChangedNotificationHandler(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  _QWORD *DerivedStorage;
  const void *Value;
  const void *v9;
  void (*v10)(const void *);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a5, CFSTR("AlternateFilterMonitorParameter_OldFilter"));
  v9 = CFDictionaryGetValue(a5, CFSTR("AlternateFilterMonitorParameter_NewFilter"));
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (v9 != Value)
  {
    if (Value)
    {
      v10 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v10)
        v10(Value);
      fasb_removeFilter();
    }
    if (v9)
      fasb_addFilterGuts((uint64_t)a2, v9);
    fasb_applyFiltersGuts(a2);
  }
  JUMPOUT(0x19402EA24);
}

void fasb_monitorExpandersAddedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFArray *v8;
  CFRange v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v7 && !v7(a4, CFSTR("AlternateFilterMonitorProperty_Expanders"), *MEMORY[0x1E0C9AE00], &v13))
  {
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (!fasb_applyExpandersGuts(a2, (const __CFArray *)v13, (__CFArray **)&cf))
    {
      v10 = a2;
      v11 = cf;
      v8 = (const __CFArray *)DerivedStorage[1];
      if (v8)
        v9.length = CFArrayGetCount((CFArrayRef)DerivedStorage[1]);
      else
        v9.length = 0;
      v9.location = 0;
      CFArrayApplyFunction(v8, v9, (CFArrayApplierFunction)fasb_dispatchAlternatesAddedDelegateFn, &v10);
    }
    MEMORY[0x19402EA24](*DerivedStorage);
    if (cf)
      CFRelease(cf);
  }
  if (v13)
    CFRelease(v13);
}

uint64_t FigAlternateSelectionBossApplyFilters(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v3 = fasb_applyFiltersGuts(a1);
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t fasb_applyFiltersGuts(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  __CFDictionary *Mutable;
  uint64_t v5;
  void (*v6)(uint64_t, __CFDictionary *, CFArrayRef *, CFTypeRef *);
  CFArrayRef Copy;
  void (*v8)(uint64_t, __CFDictionary *, CFArrayRef *);
  CFIndex i;
  CFArrayRef Count;
  const __CFData *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  const __CFArray *v15;
  CFIndex v16;
  void *v17;
  unint64_t v18;
  const __CFData *v19;
  const void *v20;
  int v21;
  const void *v22;
  const __CFArray *v23;
  _BOOL4 v24;
  __CFString *v25;
  const __CFString *v26;
  const __CFAllocator *v27;
  __CFArray *v28;
  const __CFAllocator *v29;
  CFMutableStringRef v30;
  const __CFAllocator *v31;
  CFStringRef LineFromString;
  const __CFString *v33;
  uint64_t v34;
  CFIndex Length;
  CFIndex v36;
  CFIndex v37;
  const __CFAllocator *v38;
  CFIndex v39;
  const __CFArray *v40;
  const __CFArray *v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  const __CFString *v46;
  const __CFArray *v47;
  CFRange v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const __CFString *cf;
  const __CFString *theString;
  const void *context;
  CFArrayRef v56;
  void *v57;
  CFTypeRef v58;
  CFArrayRef v59;
  os_log_type_t type;
  unsigned int v61;
  _OWORD v62[2];
  CFArrayRef theArray[2];
  void *key[2];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  v59 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  context = 0;
  v56 = 0;
  v57 = 0;
  if (*(_DWORD *)(DerivedStorage + 80))
  {
    Mutable = 0;
    Copy = 0;
    v12 = 0;
    *(_BYTE *)(DerivedStorage + 96) = 1;
    goto LABEL_79;
  }
  context = a1;
  Mutable = *(__CFDictionary **)(DerivedStorage + 24);
  if (!Mutable)
  {
    Copy = 0;
    goto LABEL_30;
  }
  v56 = 0;
  v57 = 0;
  v5 = *(_QWORD *)(DerivedStorage + 56);
  v6 = *(void (**)(uint64_t, __CFDictionary *, CFArrayRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 32);
  if (v6)
  {
    v6(v5, Mutable, &v59, &v58);
  }
  else
  {
    v8 = *(void (**)(uint64_t, __CFDictionary *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
    if (v8)
      v8(v5, Mutable, &v59);
  }
  theArray[0] = 0;
  memset(v62, 0, sizeof(v62));
  FigAlternateFilterApplyInfoGetStorage((const __CFData *)v58, (uint64_t)v62);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    for (i = 0; ; ++i)
    {
      Count = theArray[0];
      if (theArray[0])
        Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray[0], i);
      v66 = 0;
      *(_OWORD *)key = 0u;
      v65 = 0u;
      FigAlternateFilterApplyInfoGetStorage(ValueAtIndex, (uint64_t)key);
      CFDictionarySetValue(Mutable, key[0], ValueAtIndex);
    }
  }
  else
  {
    v13 = FigSignalErrorAt();
    if ((_DWORD)v13)
    {
      v12 = v13;
      Mutable = 0;
      Copy = 0;
      goto LABEL_79;
    }
  }
  v14 = CFGetAllocator(a1);
  Copy = CFArrayCreateCopy(v14, v59);
  if (Copy)
  {
    if (v58)
    {
      theArray[0] = 0;
      memset(v62, 0, sizeof(v62));
      FigAlternateFilterApplyInfoGetStorage((const __CFData *)v58, (uint64_t)v62);
      v15 = theArray[0];
      v57 = 0;
      if (theArray[0])
      {
        v16 = CFArrayGetCount(theArray[0]);
        if (v16 >= 1)
        {
          v17 = 0;
          v18 = v16 + 1;
          do
          {
            if (v17)
              break;
            v19 = (const __CFData *)CFArrayGetValueAtIndex(v15, v18 - 2);
            v66 = 0;
            *(_OWORD *)key = 0u;
            v65 = 0u;
            FigAlternateFilterApplyInfoGetStorage(v19, (uint64_t)key);
            v17 = key[1];
            if (key[1])
            {
              v17 = key[0];
              v57 = key[0];
            }
            --v18;
          }
          while (v18 > 1);
        }
      }
    }
    v20 = *(const void **)(v3 + 112);
    *(_QWORD *)(v3 + 112) = Mutable;
    if (Mutable)
      CFRetain(Mutable);
    if (v20)
      CFRelease(v20);
LABEL_30:
    v21 = FigCFEqual();
    if (!v21)
    {
      v22 = *(const void **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = Copy;
      if (Copy)
        CFRetain(Copy);
      if (v22)
        CFRelease(v22);
    }
    v23 = *(const __CFArray **)(v3 + 40);
    if (!v23 || CFArrayGetCount(v23) < 1)
    {
LABEL_72:
      if (!v21)
        goto LABEL_74;
      goto LABEL_73;
    }
    if (v21 && *(_BYTE *)(v3 + 120) && !*(_BYTE *)(v3 + 121) && !*(_BYTE *)(v3 + 123))
    {
LABEL_73:
      if (!*(_BYTE *)(v3 + 97))
      {
LABEL_78:
        v12 = 0;
        goto LABEL_79;
      }
LABEL_74:
      *(_BYTE *)(v3 + 97) = 0;
      v56 = Copy;
      v47 = *(const __CFArray **)(v3 + 8);
      if (v47)
        v48.length = CFArrayGetCount(*(CFArrayRef *)(v3 + 8));
      else
        v48.length = 0;
      v48.location = 0;
      CFArrayApplyFunction(v47, v48, (CFArrayApplierFunction)fasb_dispatchAlternateChangedDelegateFn, &context);
      goto LABEL_78;
    }
    v24 = *(unsigned __int8 *)(v3 + 120) == 0;
    v52 = CMBaseObjectGetDerivedStorage();
    v25 = fasb_copyVerboseDescriptionInternal(a1, v24);
    if (!v25)
    {
      FigSignalErrorAt();
LABEL_71:
      *(_WORD *)(v3 + 120) = 1;
      goto LABEL_72;
    }
    v26 = v25;
    v27 = CFGetAllocator(a1);
    v28 = CFArrayCreateMutable(v27, 0, MEMORY[0x1E0C9B378]);
    v51 = v21;
    if (v28)
    {
      v29 = CFGetAllocator(a1);
      v30 = CFStringCreateMutable(v29, 0);
      if (v30)
      {
        v31 = CFGetAllocator(a1);
        theString = CFStringCreateWithFormat(v31, 0, CFSTR("[%p:%@]"), a1, *(_QWORD *)(v52 + 104));
        if (theString)
        {
          cf = v26;
          LineFromString = fasb_copyNextLineFromString(v26, 0);
          if (LineFromString)
          {
            v33 = LineFromString;
            v34 = 0;
            while (1)
            {
              Length = CFStringGetLength(v33);
              v36 = CFStringGetLength(v30);
              v37 = CFStringGetLength(v33) + v36;
              if (v37 + CFStringGetLength(theString) >= 980 && CFStringGetLength(v30) >= 1)
              {
                CFArrayAppendValue(v28, v30);
                CFRelease(v30);
                v38 = CFGetAllocator(a1);
                v30 = CFStringCreateMutable(v38, 0);
                if (!v30)
                  break;
              }
              v34 += Length;
              CFStringAppend(v30, v33);
              CFRelease(v33);
              v33 = fasb_copyNextLineFromString(cf, v34);
              if (!v33)
                goto LABEL_51;
            }
            FigSignalErrorAt();
          }
          else
          {
LABEL_51:
            v50 = v3;
            if (CFStringGetLength(v30) >= 1)
            {
              CFStringAppend(v30, CFSTR("\nLOG COMPLETE"));
              CFArrayAppendValue(v28, v30);
              CFRelease(v30);
              v30 = 0;
            }
            if (CFArrayGetCount(v28) < 1)
            {
              v33 = 0;
            }
            else
            {
              v39 = 0;
              do
              {
                v40 = (const __CFArray *)CFArrayGetValueAtIndex(v28, v39);
                if (dword_1EE2A30C8)
                {
                  v41 = v40;
                  v61 = 0;
                  type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v43 = v61;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                    v44 = v43;
                  else
                    v44 = v43 & 0xFFFFFFFE;
                  if (v44)
                  {
                    v45 = *(_QWORD *)(v52 + 104);
                    LODWORD(v62[0]) = 136315906;
                    *(_QWORD *)((char *)v62 + 4) = "fasb_log";
                    WORD6(v62[0]) = 2048;
                    *(_QWORD *)((char *)v62 + 14) = a1;
                    WORD3(v62[1]) = 2114;
                    *((_QWORD *)&v62[1] + 1) = v45;
                    LOWORD(theArray[0]) = 2114;
                    *(CFArrayRef *)((char *)theArray + 2) = v41;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                ++v39;
              }
              while (v39 < CFArrayGetCount(v28));
              v33 = 0;
              v3 = v50;
            }
          }
          CFRelease(cf);
          CFRelease(theString);
          v46 = v33;
          if (!v33)
            goto LABEL_67;
          goto LABEL_66;
        }
      }
    }
    else
    {
      v30 = 0;
    }
    FigSignalErrorAt();
    v46 = v26;
LABEL_66:
    CFRelease(v46);
LABEL_67:
    if (v28)
      CFRelease(v28);
    v21 = v51;
    if (v30)
      CFRelease(v30);
    goto LABEL_71;
  }
  v12 = FigSignalErrorAt();
LABEL_79:
  if (v58)
    CFRelease(v58);
  if (Mutable)
    CFRelease(Mutable);
  if (v59)
    CFRelease(v59);
  if (Copy)
    CFRelease(Copy);
  return v12;
}

uint64_t FigAlternateSelectionLogNextFilterOperation()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  *((_BYTE *)DerivedStorage + 121) = 1;
  MEMORY[0x19402EA24](*DerivedStorage);
  return 0;
}

uint64_t FigAlternateSelectionBossInitializeAlternateList(void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, CFTypeRef *a5)
{
  _QWORD *DerivedStorage;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;
  const __CFAllocator *v14;
  CFMutableArrayRef MutableCopy;
  uint64_t v16;
  _BOOL4 v17;
  const void *v18;
  const __CFAllocator *v19;
  CFArrayRef Copy;
  const __CFArray *v21;
  CFRange v22;
  uint64_t v23;
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v11 = DerivedStorage[3];
  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  *((_BYTE *)v12 + 97) = 1;
  v13 = (const void *)v12[3];
  if (v13)
  {
    CFRelease(v13);
    v12[3] = 0;
  }
  v14 = CFGetAllocator(a1);
  MutableCopy = CFArrayCreateMutableCopy(v14, 0, a2);
  v12[3] = MutableCopy;
  if (MutableCopy)
  {
    if (a4)
    {
      if (CFArrayGetCount(a4) >= 1)
      {
        v16 = fasb_applyExpandersGuts((uint64_t)a1, a4, (__CFArray **)&cf);
        if ((_DWORD)v16)
          goto LABEL_26;
      }
    }
    if (!a3)
    {
      v17 = 0;
      if (!v11)
      {
LABEL_16:
        v21 = (const __CFArray *)v12[1];
        if (v21)
          v22.length = CFArrayGetCount((CFArrayRef)v12[1]);
        else
          v22.length = 0;
        v22.location = 0;
        CFArrayApplyFunction(v21, v22, (CFArrayApplierFunction)fasb_dispatchMediaSelectionArrayChangedDelegateFn, a1);
LABEL_20:
        v23 = fasb_applyFiltersGuts(a1);
        if (a5)
        {
          *a5 = cf;
          cf = 0;
        }
        goto LABEL_22;
      }
LABEL_15:
      if (!v17)
        goto LABEL_20;
      goto LABEL_16;
    }
    v17 = FigCFEqual() == 0;
    v18 = (const void *)v12[2];
    if (v18)
    {
      CFRelease(v18);
      v12[2] = 0;
    }
    v19 = CFGetAllocator(a1);
    Copy = CFArrayCreateCopy(v19, a3);
    v12[2] = Copy;
    if (Copy)
    {
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  v16 = FigSignalErrorAt();
LABEL_26:
  v23 = v16;
LABEL_22:
  MEMORY[0x19402EA24](*v12);
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t fasb_applyExpandersGuts(uint64_t a1, const __CFArray *a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFAllocator *v7;
  __CFArray *MutableCopy;
  __CFArray *Mutable;
  uint64_t v10;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v14)(const void *, __CFArray *, CFArrayRef *);
  const __CFArray *v15;
  CFRange v16;
  const __CFArray *v17;
  CFRange v18;
  const void *v19;
  uint64_t v20;
  CFArrayRef theArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!a3)
  {
    v20 = FigSignalErrorAt();
    MutableCopy = 0;
LABEL_25:
    Mutable = 0;
    goto LABEL_27;
  }
  v6 = DerivedStorage;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(DerivedStorage + 24));
  if (!MutableCopy)
  {
    v20 = FigSignalErrorAt();
    goto LABEL_25;
  }
  Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v10 = FigCFArrayCopyValuesAsCFSet();
    if (!(_DWORD)v10)
    {
      v11 = 0;
      if (!a2)
        goto LABEL_7;
LABEL_6:
      for (i = CFArrayGetCount(a2); v11 < i; i = 0)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v11);
        if (!CFSetContainsValue(0, ValueAtIndex))
        {
          v14 = *(uint64_t (**)(const void *, __CFArray *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
          if (!v14)
          {
            v20 = 4294954514;
            goto LABEL_27;
          }
          v10 = v14(ValueAtIndex, MutableCopy, &theArray);
          if ((_DWORD)v10)
            goto LABEL_37;
          v15 = theArray;
          if (theArray)
            v16.length = CFArrayGetCount(theArray);
          else
            v16.length = 0;
          v16.location = 0;
          CFArrayAppendArray(MutableCopy, v15, v16);
          v17 = theArray;
          if (theArray)
            v18.length = CFArrayGetCount(theArray);
          else
            v18.length = 0;
          v18.location = 0;
          CFArrayAppendArray(Mutable, v17, v18);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v6 + 72), ValueAtIndex);
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
        }
        ++v11;
        if (a2)
          goto LABEL_6;
LABEL_7:
        ;
      }
      v19 = *(const void **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = MutableCopy;
      CFRetain(MutableCopy);
      if (v19)
        CFRelease(v19);
      v20 = 0;
      *a3 = Mutable;
      goto LABEL_25;
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
LABEL_37:
  v20 = v10;
LABEL_27:
  if (theArray)
    CFRelease(theArray);
  if (Mutable)
    CFRelease(Mutable);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v20;
}

void fasb_dispatchMediaSelectionArrayChangedDelegateFn(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  CFTypeRef v9;
  CFTypeRef v10;
  _OWORD v11[2];
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = DerivedStorage;
    v6 = malloc_type_calloc(1uLL, 0x38uLL, 0xE00400D89C4A7uLL);
    if (v6)
    {
      v7 = v6;
      v8 = *(_OWORD *)(a1 + 16);
      v11[0] = *(_OWORD *)a1;
      v11[1] = v8;
      v12 = *(_QWORD *)(a1 + 32);
      fasb_copyDelegateEntryValues((uint64_t)v11, (uint64_t)(v6 + 1));
      v9 = *(CFTypeRef *)(v5 + 16);
      if (v9)
        v9 = CFRetain(v9);
      v7[6] = v9;
      if (a2)
        v10 = CFRetain(a2);
      else
        v10 = 0;
      *v7 = v10;
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v7, (dispatch_function_t)fasb_mediaSelectionArrayChangedDispatchFn);
    }
  }
}

uint64_t FigAlternateSelectionBossAddDelegate(const void *a1, uint64_t a2, __int128 *a3, NSObject *a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v9;
  const __CFAllocator *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    v10 = CFGetAllocator(a1);
    v11 = (uint64_t *)CFAllocatorAllocate(v10, 40, 0);
    if (v11 && (v12 = v11, v13 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*v12 = v13) != 0))
    {
      v14 = *a3;
      v12[3] = *((_QWORD *)a3 + 2);
      *(_OWORD *)(v12 + 1) = v14;
      if (a4)
        dispatch_retain(a4);
      else
        a4 = FigDispatchQueueCreateWithPriority();
      v12[4] = (uint64_t)a4;
      CFArrayAppendValue((CFMutableArrayRef)v9[1], v12);
      v15 = 0;
    }
    else
    {
      v15 = FigSignalErrorAt();
    }
    MEMORY[0x19402EA24](*v9);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v15;
}

uint64_t FigAlternateSelectionBossLockForConfiguration(uint64_t a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    ++*((_DWORD *)v3 + 20);
    MEMORY[0x19402EA24](*v3);
  }
  return 0;
}

const void *FigAlternateSelectionBossUnlockForConfiguration(const void *a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    v4 = *((_DWORD *)v3 + 20);
    if (v4 <= 0)
    {
      v6 = FigSignalErrorAt();
    }
    else
    {
      v5 = v4 - 1;
      *((_DWORD *)v3 + 20) = v5;
      if (v5)
      {
        a1 = 0;
LABEL_9:
        MEMORY[0x19402EA24](*v3);
        return a1;
      }
      if (!*((_BYTE *)v3 + 96) || (*((_BYTE *)v3 + 96) = 0, v6 = fasb_applyFiltersGuts(a1), !(_DWORD)v6))
        v6 = MEMORY[0x19402D920](v3[11]);
    }
    a1 = (const void *)v6;
    goto LABEL_9;
  }
  return a1;
}

__CFString *FigAlternateSelectionBossCopyVerboseDescription(const void *a1)
{
  return fasb_copyVerboseDescriptionInternal(a1, 1);
}

__CFString *fasb_copyVerboseDescriptionInternal(const void *a1, int a2)
{
  _QWORD *DerivedStorage;
  __CFString *v5;
  __CFString *v6;
  const __CFAllocator *v7;
  __CFString *Mutable;
  __CFString *v9;
  const __CFArray *v10;
  CFRange v11;
  const __CFArray *v12;
  CFRange v13;
  const __CFArray *v14;
  CFRange v15;
  const __CFArray *v16;
  CFRange v17;
  const void *context;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v21 = 0;
  v22 = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  context = a1;
  v5 = fasb_copyDesc(a1);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetAllocator(a1);
    Mutable = CFStringCreateMutable(v7, 0);
    v9 = Mutable;
    if (Mutable)
    {
      v20 = Mutable;
      CFStringAppendFormat(Mutable, 0, CFSTR("%@"), v6);
      CFStringAppendFormat(v9, 0, CFSTR("\n%sMonitors:\n%s{"), "  ", "  ");
      v10 = (const __CFArray *)DerivedStorage[8];
      if (v10)
        v11.length = CFArrayGetCount((CFArrayRef)DerivedStorage[8]);
      else
        v11.length = 0;
      v11.location = 0;
      CFArrayApplyFunction(v10, v11, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
      CFStringAppendFormat(v9, 0, CFSTR("\n%s}"), "  ");
      CFStringAppendFormat(v9, 0, CFSTR("\n%sFilters:\n%s{"), "  ", "  ");
      CFStringAppendFormat(v9, 0, CFSTR("\n%s%sTo decode base64 encoded filter output, run:\n%s%s%% B64=\"ENCODEDVALUE\";python3 -c\"import base64,sys;n=int.from_bytes(base64.b64decode(sys.argv[1]),'little');print([i for i in range(0,n.bit_length())if 0!=(n&(1<<i))])\" $B64"),
        "  ",
        "  ",
        "  ",
        "  ",
        context);
      v12 = (const __CFArray *)DerivedStorage[5];
      if (v12)
        v13.length = CFArrayGetCount((CFArrayRef)DerivedStorage[5]);
      else
        v13.length = 0;
      v13.location = 0;
      CFArrayApplyFunction(v12, v13, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
      CFStringAppendFormat(v9, 0, CFSTR("\n%s}"), "  ");
      if (a2)
      {
        CFStringAppendFormat(v9, 0, CFSTR("\n%sAlternates:\n%s{"), "  ", "  ");
        v14 = (const __CFArray *)DerivedStorage[3];
        if (v14)
          v15.length = CFArrayGetCount((CFArrayRef)DerivedStorage[3]);
        else
          v15.length = 0;
        v15.location = 0;
        CFArrayApplyFunction(v14, v15, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
        CFStringAppendFormat(v9, 0, CFSTR("\n%s}"), "  ");
      }
      CFStringAppendFormat(v9, 0, CFSTR("\n%sFiltered Alternates:\n%s{"), "  ", "  ");
      v16 = (const __CFArray *)DerivedStorage[4];
      if (v16)
        v17.length = CFArrayGetCount((CFArrayRef)DerivedStorage[4]);
      else
        v17.length = 0;
      v17.location = 0;
      CFArrayApplyFunction(v16, v17, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
      CFStringAppendFormat(v9, 0, CFSTR("\n%s}"), "  ");
    }
    MEMORY[0x19402EA24](*DerivedStorage);
    CFRelease(v6);
  }
  else
  {
    MEMORY[0x19402EA24](*DerivedStorage);
    return 0;
  }
  return v9;
}

uint64_t FigAlternateSelectionBossCreate(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  uint64_t AllocatorForMedia;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  uint64_t v13;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2)
    return FigSignalErrorAt();
  if (sRegisterFigAlternateSelectionBossClassIDOnce != -1)
    dispatch_once_f(&sRegisterFigAlternateSelectionBossClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateSelectionBossType);
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
    return v4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v6;
  if (!v6)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable(a1, 0, &kDelegateEntryCFArrayValueCallbacks);
  *(_QWORD *)(DerivedStorage + 8) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  AllocatorForMedia = FigGetAllocatorForMedia();
  v4 = FigAlternateFilterTreeCreate(AllocatorForMedia, (_QWORD *)(DerivedStorage + 48));
  if ((_DWORD)v4)
    return v4;
  v4 = fasb_rebuildFilterTree();
  if ((_DWORD)v4)
    return v4;
  v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 64) = v9;
  if (!v9)
    return FigSignalErrorAt();
  v10 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 72) = v10;
  if (!v10)
    return FigSignalErrorAt();
  v11 = CFDictionaryCreate(a1, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 112) = v11;
  if (!v11)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 104) = &stru_1E2FD85F8;
  v12 = FigConditionVariableCreate();
  *(_QWORD *)(DerivedStorage + 88) = v12;
  if (!v12)
    return FigSignalErrorAt();
  v13 = 0;
  *(_BYTE *)(DerivedStorage + 123) = FigGetCFPreferenceNumberWithDefault();
  *a2 = 0;
  return v13;
}

uint64_t fasb_rebuildFilterTree()
{
  uint64_t DerivedStorage;
  const void *v1;
  __CFArray **v2;
  uint64_t result;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = (__CFArray **)(DerivedStorage + 40);
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *v2 = 0;
  }
  result = FigAlternateFilterTreeCopyLeaves(*(const void **)(DerivedStorage + 48), v2);
  if (!(_DWORD)result)
  {
    v4 = *(const void **)(DerivedStorage + 56);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    return FigAlternateFilterTreeCreateFilter(*(const void **)(DerivedStorage + 48), CFSTR("FigAlternateSelectionBoss"), -1, (_QWORD *)(DerivedStorage + 56));
  }
  return result;
}

BOOL FigAlternateSelectionUtility_AlternateListHasIFrameAlternate(_BOOL8 a1)
{
  _BOOL8 v1;
  CFTypeRef v2;
  uint64_t (*v3)(CFTypeRef, _BOOL8, CFArrayRef *);
  int v4;
  CFArrayRef v5;
  CFTypeRef cf;
  CFArrayRef theArray;

  v1 = a1;
  cf = 0;
  theArray = 0;
  if (!a1)
    return v1;
  if (FigAlternateIFramesOnlyFilterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &cf)
    || (v2 = cf,
        (v3 = *(uint64_t (**)(CFTypeRef, _BOOL8, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24)) == 0))
  {
LABEL_8:
    v1 = 0;
    goto LABEL_9;
  }
  v4 = v3(v2, v1, &theArray);
  v5 = theArray;
  if (!v4)
  {
    if (theArray)
    {
      v1 = CFArrayGetCount(theArray) > 0;
      v5 = theArray;
      if (!theArray)
        goto LABEL_9;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  v1 = 0;
  if (theArray)
LABEL_7:
    CFRelease(v5);
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v1;
}

BOOL FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(CFArrayRef theArray)
{
  _BOOL8 v2;
  CFIndex v3;
  CFIndex v4;
  const void *ValueAtIndex;

  if (theArray)
    v2 = CFArrayGetCount(theArray) > 0;
  else
    v2 = 0;
  v3 = 0;
  while (1)
  {
    v4 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v3 >= v4)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3++);
    if (!FigAlternateIsAudioOnly((uint64_t)ValueAtIndex))
      return 0;
  }
  return v2;
}

CFIndex FigAlternateSelectionUtility_GetLowestRequiredHDCPLevel(const __CFArray *a1, char *a2, int *a3, char *a4, int *a5)
{
  CFIndex result;
  char v7;
  char v8;
  CFIndex v9;
  int v10;
  int v11;
  const void *ValueAtIndex;
  uint64_t CodecString;
  int HDCPLevel;
  int IsIFrameOnly;
  int v17;
  int v19;

  result = CFArrayGetCount(a1);
  if (result < 1)
  {
    v8 = 0;
    v7 = 0;
    v11 = -2;
    v10 = -2;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = -2;
    v11 = -2;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
      CodecString = FigAlternateGetCodecString((uint64_t)ValueAtIndex);
      if (FigAlternateHasVideo((uint64_t)ValueAtIndex) || !CodecString)
      {
        HDCPLevel = FigAlternateGetHDCPLevel((uint64_t)ValueAtIndex);
        IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex);
        if (HDCPLevel < v11 || v11 == -2)
          v17 = HDCPLevel;
        else
          v17 = v11;
        if (HDCPLevel < v10 || v10 == -2)
          v19 = HDCPLevel;
        else
          v19 = v10;
        if (IsIFrameOnly)
        {
          v7 = 1;
        }
        else
        {
          v8 = 1;
          v11 = v17;
        }
        if (IsIFrameOnly)
          v10 = v19;
      }
      ++v9;
      result = CFArrayGetCount(a1);
    }
    while (v9 < result);
  }
  *a2 = v8;
  *a4 = v7;
  *a3 = v11;
  *a5 = v10;
  return result;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasHDRAlternate(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = 0;
  while (1)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateGetVideoRange((uint64_t)ValueAtIndex) >= 2)
      return 1;
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasMultiChannelAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = 0;
  while (1)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if ((int)FigAlternateGetMaxAudioChannelCount(ValueAtIndex) >= 3)
      return 1;
  }
  return 0;
}

CFDictionaryRef FigAlternateSelectionUtility_HighestVideoResolutionAlternateWithMultiChannelAudio(CFArrayRef theArray)
{
  CFIndex v2;
  double v3;
  double v4;
  double v5;
  double v6;
  CFIndex i;
  const void *ValueAtIndex;
  double Resolution;
  double v10;
  CGSize v13;

  v2 = 0;
  v3 = *MEMORY[0x1E0C9D820];
  v4 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v5 = *MEMORY[0x1E0C9D820];
  v6 = v4;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v2 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    if ((int)FigAlternateGetMaxAudioChannelCount(ValueAtIndex) >= 3)
    {
      Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
      if (Resolution > v5 && v10 > v6)
      {
        v5 = Resolution;
        v6 = v10;
      }
    }
    ++v2;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  if (v3 == v5 && v4 == v6)
    return 0;
  v13.width = v5;
  v13.height = v6;
  return CGSizeCreateDictionaryRepresentation(v13);
}

uint64_t FigAlternateSelectionUtility_AlternateListHasPlayableMultiChannelAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = 0;
  while (1)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if ((int)FigAlternateGetMaxPlayableAudioChannelCount((uint64_t)ValueAtIndex) >= 3)
      return 1;
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasLosslessAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = 0;
  while (1)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateHasLosslessAudio((uint64_t)ValueAtIndex))
      return 1;
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasBinauralAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = 0;
  while (1)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateHasBinauralAudio((uint64_t)ValueAtIndex))
      return 1;
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasATMOSAlternate(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex v3;
  const void *ValueAtIndex;

  v2 = 0;
  while (1)
  {
    v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateHasAudioFormat((uint64_t)ValueAtIndex, 7))
      return 1;
  }
  return 0;
}

__CFString *figAlternateSelectionBossCopyFormattingDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  __CFString *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v3 = fasb_copyDesc(a1);
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

__CFString *fasb_copyDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const __CFArray *v5;
  CFIndex Count;
  const __CFArray *v7;
  CFIndex v8;
  const __CFArray *v9;
  CFIndex v10;
  const __CFArray *v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = (const __CFArray *)DerivedStorage[5];
  if (v5)
    Count = CFArrayGetCount(v5);
  else
    Count = 0;
  v7 = (const __CFArray *)DerivedStorage[3];
  if (v7)
    v8 = CFArrayGetCount(v7);
  else
    v8 = 0;
  v9 = (const __CFArray *)DerivedStorage[4];
  if (v9)
    v10 = CFArrayGetCount(v9);
  else
    v10 = 0;
  v11 = (const __CFArray *)DerivedStorage[2];
  if (v11)
    v11 = (const __CFArray *)CFArrayGetCount(v11);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAlternateSelectionBoss:%p [filterCount %d] [alternateCount %d] [filteredAlternateCount %d] [mediaSelectionArrayCount %d]>"), a1, Count, v8, v10, v11);
  return Mutable;
}

void fasb_dispatchAlternatesAddedDelegateFn(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  CFTypeRef v7;
  CFTypeRef v8;
  _OWORD v9[2];
  uint64_t v10;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = malloc_type_calloc(1uLL, 0x38uLL, 0xE00400D89C4A7uLL);
    if (v4)
    {
      v5 = v4;
      v6 = *(_OWORD *)(a1 + 16);
      v9[0] = *(_OWORD *)a1;
      v9[1] = v6;
      v10 = *(_QWORD *)(a1 + 32);
      fasb_copyDelegateEntryValues((uint64_t)v9, (uint64_t)(v4 + 1));
      v7 = *(CFTypeRef *)(a2 + 8);
      if (v7)
        v7 = CFRetain(v7);
      v5[6] = v7;
      v8 = *(CFTypeRef *)a2;
      if (*(_QWORD *)a2)
        v8 = CFRetain(v8);
      *v5 = v8;
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v5, (dispatch_function_t)fasb_alternatesAddedDispatchFn);
    }
  }
}

void fasb_copyDelegateEntryValues(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  __int128 v5;
  NSObject *v6;

  v4 = *(CFTypeRef *)a1;
  if (v4)
    v4 = CFRetain(v4);
  *(_QWORD *)a2 = v4;
  v5 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  v6 = *(NSObject **)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
    dispatch_retain(v6);
}

void fasb_alternatesAddedDispatchFn(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1 + 8;
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
    (*(void (**)(_QWORD, const void *, _QWORD))(a1 + 32))(*(_QWORD *)a1, v3, *(_QWORD *)(a1 + 48));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  fasb_delegateEntryReleaseAndClearValues(v2);
  free((void *)a1);
}

void fasb_delegateEntryReleaseAndClearValues(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void fasb_dispatchAlternateChangedDelegateFn(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  CFTypeRef v10;
  CFTypeRef v11;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  const void *v15;
  _OWORD v16[2];
  uint64_t v17;

  v4 = *(const void **)(a2 + 8);
  if (v4 && CFArrayGetCount(*(CFArrayRef *)(a2 + 8)))
  {
    v5 = 0;
  }
  else
  {
    v5 = *(const void **)(a2 + 16);
    *(_QWORD *)&v16[0] = 0;
    if (v5)
    {
      if (CFEqual(v5, CFSTR("OfflinePlayable")))
      {
        v6 = 4294951781;
      }
      else if (CFEqual(v5, CFSTR("SupportedAudioFormat")))
      {
        v6 = 4294951780;
      }
      else if (CFEqual(v5, CFSTR("NeroSupportedVideoFormat"))
             || CFEqual(v5, CFSTR("SupportedVideoRange"))
             || CFEqual(v5, CFSTR("HDCP"))
             || CFEqual(v5, CFSTR("VideoRangeAndFrameRateBucket")))
      {
        v6 = 4294950073;
      }
      else if (CFEqual(v5, CFSTR("AllowedCPC")))
      {
        v6 = 4294950068;
      }
      else if (CFEqual(v5, CFSTR("MediaValidation")))
      {
        v6 = 4294951779;
      }
      else if (CFEqual(v5, CFSTR("MediaSelectionAudible")))
      {
        v6 = 4294951778;
      }
      else if (CFEqual(v5, CFSTR("NetworkPermanentError")) || CFEqual(v5, CFSTR("NetworkTemporaryError")))
      {
        v6 = 4294951777;
      }
      else if (CFEqual(v5, CFSTR("CombinedAudioPreference")))
      {
        v6 = 4294951486;
      }
      else if (CFEqual(v5, CFSTR("PreferBestFormatForVideoRange"))
             || CFEqual(v5, CFSTR("DisplaySize"))
             || CFEqual(v5, CFSTR("PreferredVideoFormat")))
      {
        v6 = 4294951485;
      }
      else
      {
        v6 = 4294951485;
        if (!CFEqual(v5, CFSTR("ResolutionCap")))
        {
          if (CFEqual(v5, CFSTR("ResolutionFloor")))
            v6 = 4294951485;
          else
            v6 = 4294954371;
        }
      }
      FigCreateErrorForOSStatus(v6, (CFErrorRef *)v16);
      v5 = *(const void **)&v16[0];
    }
  }
  if (*(_QWORD *)(a1 + 8) && (v7 = malloc_type_calloc(1uLL, 0x40uLL, 0xE00403F872FD1uLL)) != 0)
  {
    v8 = v7;
    v9 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v9;
    v17 = *(_QWORD *)(a1 + 32);
    fasb_copyDelegateEntryValues((uint64_t)v16, (uint64_t)(v7 + 1));
    if (v4)
      v10 = CFRetain(v4);
    else
      v10 = 0;
    v8[6] = v10;
    v11 = *(CFTypeRef *)a2;
    if (*(_QWORD *)a2)
      v11 = CFRetain(v11);
    *v8 = v11;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = Mutable;
    v15 = *(const void **)(a2 + 16);
    if (v15)
      CFDictionarySetValue(Mutable, CFSTR("FASBFIK_StoppedAtFilterName"), v15);
    if (v5)
      CFDictionarySetValue(v14, CFSTR("FASBFIK_StoppedFilterError"), v5);
    v8[7] = CFDictionaryCreateCopy(v12, v14);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v8, (dispatch_function_t)fasb_alternateChangedDispatchFn);
    if (v5)
      goto LABEL_27;
  }
  else
  {
    v14 = 0;
    if (v5)
LABEL_27:
      CFRelease(v5);
  }
  if (v14)
    CFRelease(v14);
}

CFStringRef fasb_copyNextLineFromString(const __CFString *a1, uint64_t a2)
{
  CFIndex v4;
  const __CFAllocator *v5;
  CFRange v7;
  CFRange v8;
  CFRange v9;

  v4 = CFStringGetLength(a1) - a2;
  if (v4 < 1)
    return 0;
  v7.location = 0;
  v7.length = 0;
  v8.location = a2;
  v8.length = v4;
  if (CFStringFindWithOptions(a1, CFSTR("\n"), v8, 0, &v7))
    v4 = v7.location - a2 + 1;
  v5 = CFGetAllocator(a1);
  v9.location = a2;
  v9.length = v4;
  return CFStringCreateWithSubstring(v5, a1, v9);
}

void fasb_alternateChangedDispatchFn(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = a1 + 8;
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
    (*(void (**)(_QWORD, const void *, _QWORD, _QWORD))(a1 + 16))(*(_QWORD *)a1, v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
  fasb_delegateEntryReleaseAndClearValues(v2);
  free((void *)a1);
}

void fasb_mediaSelectionArrayChangedDispatchFn(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1 + 8;
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
    (*(void (**)(_QWORD, const void *, _QWORD))(a1 + 24))(*(_QWORD *)a1, v3, *(_QWORD *)(a1 + 48));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  fasb_delegateEntryReleaseAndClearValues(v2);
  free((void *)a1);
}

void fasb_appendDescriptionApplierFn(CFTypeRef cf, uint64_t a2)
{
  __CFString *v3;
  const void *v5;
  CFTypeID v6;
  uint64_t DerivedStorage;
  const __CFString *v8;
  const __CFString *v9;
  __CFString *MutableCopy;
  CFIndex *v11;
  uint64_t *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(CFTypeRef);
  const __CFString *v15;
  const __CFData *Value;
  uint64_t v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  CFIndex v24;

  v3 = *(__CFString **)(a2 + 8);
  if (!cf || (v5 = *(const void **)a2, v6 = CFGetTypeID(cf), v6 != FigAlternateFilterGetTypeID()))
  {
    MutableCopy = (__CFString *)CFCopyDescription(cf);
    if (!MutableCopy)
      return;
    goto LABEL_14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v8 = CFCopyDescription(cf);
  if (v8)
  {
    v9 = v8;
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v8);
    if (MutableCopy)
    {
      v11 = (CFIndex *)(a2 + 16);
      v12 = (uint64_t *)(a2 + 24);
      v13 = *(const __CFDictionary **)(DerivedStorage + 112);
      v14 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v14)
        v15 = (const __CFString *)v14(cf);
      else
        v15 = &stru_1E2FD85F8;
      Value = (const __CFData *)CFDictionaryGetValue(v13, v15);
      if (Value)
        FigAlternateFilterApplyInfoGetStorage(Value, (uint64_t)&v19);
      v22[0] = v19;
      v22[1] = v20;
      v23 = v21;
      v24 = 0;
      fasb_insertFilteringInfoToDescriptionHelper(v5, MutableCopy, (uint64_t)v22, &v24, v11, v12, 1);
    }
    CFRelease(v9);
    if (MutableCopy)
    {
LABEL_14:
      v17 = FigCFStringCopyWithIndent();
      if (v17)
      {
        v18 = (const void *)v17;
        CFStringAppendFormat(v3, 0, CFSTR("\n%@"), v17);
        CFRelease(v18);
      }
      CFRelease(MutableCopy);
    }
  }
}

uint64_t fasb_insertFilteringInfoToDescriptionHelper(const void *a1, __CFString *a2, uint64_t a3, CFIndex *a4, CFIndex *a5, uint64_t *a6, int a7)
{
  const __CFArray *v13;
  _BOOL4 v14;
  uint64_t Count;
  const __CFBitVector *v16;
  const __CFBitVector *v17;
  UInt8 *v18;
  const __CFString *v19;
  unint64_t v20;
  CFRange v21;
  CFMutableStringRef MutableCopy;
  uint64_t v23;
  const __CFAllocator *v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex Length;
  CFIndex v28;
  const __CFArray *v29;
  const __CFData *ValueAtIndex;
  uint64_t inserted;
  _BOOL4 v33;
  _OWORD v35[2];
  uint64_t v36;
  CFTypeRef cf[2];
  __int128 v38;
  uint64_t v39;

  if (*(uint64_t *)(a3 + 8) < 1)
  {
    v14 = 0;
  }
  else
  {
    v13 = *(const __CFArray **)(a3 + 32);
    if (v13)
      v14 = CFArrayGetCount(v13) == 0;
    else
      v14 = 1;
  }
  Count = *a6;
  if (*a6)
  {
LABEL_9:
    if (v14)
      goto LABEL_10;
    goto LABEL_26;
  }
  v16 = *(const __CFBitVector **)(a3 + 24);
  if (v16)
  {
    Count = CFBitVectorGetCount(v16);
    *a6 = Count;
    goto LABEL_9;
  }
  Count = 0;
  if (v14)
  {
LABEL_10:
    v33 = v14;
    v17 = *(const __CFBitVector **)(a3 + 24);
    cf[0] = &stru_1E2FD85F8;
    if (CFBitVectorGetCount(v17) >= Count)
      Count = CFBitVectorGetCount(v17);
    v18 = 0;
    v19 = &stru_1E2FD85F8;
    if (v17 && Count >= 1)
    {
      v20 = (unint64_t)(Count - 1) >> 3;
      if (v20 >= 0x41)
        v20 = 65;
      v18 = (UInt8 *)malloc_type_calloc(1uLL, v20 + 1, 0xC13B0B56uLL);
      if (v18)
      {
        if ((unint64_t)CFBitVectorGetCount(v17) <= 0x210)
          v21.length = CFBitVectorGetCount(v17);
        else
          v21.length = 528;
        v21.location = 0;
        CFBitVectorGetBits(v17, v21, v18);
        FigCreateBase64EncodedStringFromBytes();
        v19 = (const __CFString *)cf[0];
      }
    }
    free(v18);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v19);
    if (cf[0])
      CFRelease(cf[0]);
    v14 = v33;
    if (!MutableCopy)
      return FigSignalErrorAt();
LABEL_27:
    v25 = *a5;
    if (!*a5)
    {
      v25 = CFStringGetLength(MutableCopy) + 4;
      *a5 = v25;
    }
    CFStringPad(MutableCopy, CFSTR(" "), v25, 0);
    if (v14)
    {
      CFStringAppendFormat(MutableCopy, 0, CFSTR("%3ld ->%3ld: "), *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
    }
    else
    {
      v26 = *a5;
      Length = CFStringGetLength(CFSTR("000 ->000: "));
      CFStringPad(MutableCopy, CFSTR(" "), Length + v26, 0);
    }
    CFStringInsert(a2, *a4, MutableCopy);
    v28 = 0;
    *a4 += CFStringGetLength(MutableCopy);
    while (1)
    {
      v29 = *(const __CFArray **)(a3 + 32);
      if (v29)
        v29 = (const __CFArray *)CFArrayGetCount(v29);
      if (v28 >= (uint64_t)v29)
        break;
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 32), v28);
      v39 = 0;
      *(_OWORD *)cf = 0u;
      v38 = 0u;
      FigAlternateFilterApplyInfoGetStorage(ValueAtIndex, (uint64_t)cf);
      if (!fasb_insertFilteringInfo_iterateToNextNewLine(a2, a4))
        break;
      v35[0] = *(_OWORD *)cf;
      v35[1] = v38;
      v36 = v39;
      inserted = fasb_insertFilteringInfoToDescriptionHelper(a1, a2, v35, a4, a5, a6, 0);
      if ((_DWORD)inserted)
      {
LABEL_42:
        v23 = inserted;
        goto LABEL_44;
      }
      ++v28;
    }
    if (a7)
    {
      while (fasb_insertFilteringInfo_iterateToNextNewLine(a2, a4))
      {
        v39 = 0;
        *(_OWORD *)cf = 0u;
        v38 = 0u;
        inserted = fasb_insertFilteringInfoToDescriptionHelper(a1, a2, cf, a4, a5, a6, 0);
        if ((_DWORD)inserted)
          goto LABEL_42;
      }
    }
    v23 = 0;
LABEL_44:
    CFRelease(MutableCopy);
    return v23;
  }
LABEL_26:
  v24 = CFGetAllocator(a1);
  MutableCopy = CFStringCreateMutable(v24, 0);
  if (MutableCopy)
    goto LABEL_27;
  return FigSignalErrorAt();
}

uint64_t fasb_insertFilteringInfo_iterateToNextNewLine(const __CFString *a1, CFIndex *a2)
{
  CFIndex v4;
  uint64_t result;
  CFRange v6;
  CFRange v7;

  v6.location = 0;
  v6.length = 0;
  v4 = *a2;
  v7.length = CFStringGetLength(a1) - *a2;
  v7.location = v4;
  result = CFStringFindWithOptions(a1, CFSTR("\n"), v7, 0, &v6);
  if ((_DWORD)result)
  {
    *a2 = v6.location + 1;
    return 1;
  }
  return result;
}

uint64_t fasb_finalize()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  CFIndex i;
  const __CFArray *Count;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(v1 + 64);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 64), i);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v4 = (const void *)DerivedStorage[3];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[2];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)DerivedStorage[4];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)DerivedStorage[5];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)DerivedStorage[6];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)DerivedStorage[7];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)DerivedStorage[8];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)DerivedStorage[9];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)DerivedStorage[1];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)DerivedStorage[13];
  if (v13)
    CFRelease(v13);
  v14 = (const void *)DerivedStorage[14];
  if (v14)
    CFRelease(v14);
  FigConditionVariableDestroy();
  return FigSimpleMutexDestroy();
}

__CFString *fasb_copyDebugDesc(const void *a1)
{
  return fasb_copyVerboseDescriptionInternal(a1, 1);
}

void fasb_delegateEntryCFArrayReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  fasb_delegateEntryReleaseAndClearValues((uint64_t)a2);
  CFAllocatorDeallocate(a1, a2);
}

uint64_t FigSampleBufferProcessorCreateForVideoRotation(uint64_t a1, int a2, int a3, int a4, const void *a5, _QWORD *a6)
{
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t DerivedStorage;
  uint64_t v15;
  const void *v16;
  const __CFArray *Value;
  const __CFArray *v18;
  CFTypeID v19;
  uint64_t Count;
  const void *ValueAtIndex;
  const __CFArray *MutableCopy;
  int v23;
  uint64_t v24;
  const __CFNumber *v25;
  uint64_t v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  const __CFAllocator *v29;
  const __CFDictionary *v30;
  CFTypeID v31;
  uint64_t v32;
  __CFDictionary *v33;
  uint64_t v34;
  const __CFDictionary *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  uint64_t v41;
  VTSessionRef *v42;
  CFTypeRef *v43;
  CFMutableArrayRef Mutable;
  uint64_t i;
  CFNumberRef v46;
  CFNumberRef v47;
  const __CFAllocator *v48;
  uint64_t v49;
  __CFDictionary *v50;
  __CFDictionary *v51;
  __CFDictionary *v52;
  uint64_t v53;
  void *key;
  _QWORD *v55;
  CFTypeRef v56;
  uint64_t v57;
  int valuePtr;

  if (!a6)
    return FigSignalErrorAt();
  if (a2 > 179)
  {
    if (a2 != 180 && a2 != 270)
      return FigSignalErrorAt();
  }
  else if (a2)
  {
    if (a2 != 90)
      return FigSignalErrorAt();
  }
  else if (!(a4 | a3))
  {
    return FigSignalErrorAt();
  }
  if (a3 && a4 || !a5)
    return FigSignalErrorAt();
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferProcessorGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
    return v12;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)DerivedStorage = a2;
  *(_QWORD *)(DerivedStorage + 40) = a5;
  CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 16) = 0;
  v55 = (_QWORD *)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 24) = 0;
  v15 = CMBaseObjectGetDerivedStorage();
  v16 = (const void *)*MEMORY[0x1E0CA9040];
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 40), (const void *)*MEMORY[0x1E0CA9040]);
  v18 = Value;
  valuePtr = 0;
  v57 = DerivedStorage;
  if (!Value)
  {
LABEL_38:
    v56 = 0;
    goto LABEL_39;
  }
  v19 = CFGetTypeID(Value);
  if (v19 != CFArrayGetTypeID() || CFArrayGetCount(v18) < 1)
  {
    v31 = CFGetTypeID(v18);
    if (v31 == CFNumberGetTypeID())
    {
      v56 = CFRetain(v18);
      CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
      v32 = 0;
      while (*(_DWORD *)&kSupportedPixelFormats[v32] != valuePtr)
      {
        v32 += 4;
        if (v32 == 40)
          goto LABEL_70;
      }
      v18 = 0;
      goto LABEL_39;
    }
    v18 = 0;
    goto LABEL_38;
  }
  Count = CFArrayGetCount(v18);
  ValueAtIndex = CFArrayGetValueAtIndex(v18, 0);
  v56 = CFRetain(ValueAtIndex);
  MutableCopy = CFArrayCreateMutableCopy(v11, 0, v18);
  if (!MutableCopy)
    goto LABEL_82;
  v18 = MutableCopy;
  if (Count < 1)
  {
    if (CFArrayGetCount(MutableCopy))
    {
      DerivedStorage = v57;
      goto LABEL_39;
    }
  }
  else
  {
    v53 = v15;
    v23 = 0;
    do
    {
      v24 = Count--;
      v25 = (const __CFNumber *)CFArrayGetValueAtIndex(v18, Count);
      CFNumberGetValue(v25, kCFNumberSInt32Type, &valuePtr);
      v26 = 0;
      while (*(_DWORD *)&kSupportedPixelFormats[v26] != valuePtr)
      {
        v26 += 4;
        if (v26 == 40)
        {
          CFArrayRemoveValueAtIndex(v18, Count);
          v23 = 1;
          break;
        }
      }
    }
    while (v24 > 1);
    v15 = v53;
    if (CFArrayGetCount(v18))
    {
      DerivedStorage = v57;
      if (v23)
      {
        v27 = CFDictionaryCreateMutableCopy(v11, 0, *(CFDictionaryRef *)(v53 + 40));
        if (!v27)
        {
          v12 = FigSignalErrorAt();
          v33 = 0;
          goto LABEL_50;
        }
        v28 = v27;
        CFDictionarySetValue(v27, v16, v18);
        CFRelease(*(CFTypeRef *)(v53 + 40));
        *(_QWORD *)(v53 + 40) = v28;
        v29 = v11;
        v30 = v28;
        goto LABEL_40;
      }
LABEL_39:
      v30 = *(const __CFDictionary **)(v15 + 40);
      v29 = v11;
LABEL_40:
      v33 = CFDictionaryCreateMutableCopy(v29, 0, v30);
      if (!v33)
        goto LABEL_81;
LABEL_41:
      v34 = v15;
      if (*(_DWORD *)v15 == 270 || *(_DWORD *)v15 == 90)
      {
        v35 = *(const __CFDictionary **)(v15 + 40);
        v36 = (const void *)*MEMORY[0x1E0CA90E0];
        v37 = CFDictionaryGetValue(v35, (const void *)*MEMORY[0x1E0CA90E0]);
        v38 = (const void *)*MEMORY[0x1E0CA8FD8];
        v39 = CFDictionaryGetValue(*(CFDictionaryRef *)(v34 + 40), (const void *)*MEMORY[0x1E0CA8FD8]);
        if (v37 && v39 != 0)
        {
          CFDictionarySetValue(v33, v36, v39);
          CFDictionarySetValue(v33, v38, v37);
        }
      }
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E0CA8FB0]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E0CA8FC0]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E0CA8FB8]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E0CA8FA0]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E0CA8F68]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E0CA8F98]);
      v12 = 0;
      *(_QWORD *)(v34 + 32) = CFRetain(v33);
LABEL_49:
      DerivedStorage = v57;
      goto LABEL_50;
    }
  }
  CFRelease(v18);
LABEL_70:
  key = (void *)v16;
  Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_82:
    v12 = FigSignalErrorAt();
    DerivedStorage = v57;
    goto LABEL_54;
  }
  v18 = Mutable;
  for (i = 0; i != 40; i += 4)
  {
    valuePtr = *(_DWORD *)&kSupportedPixelFormats[i];
    v46 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
    if (!v46)
    {
      v49 = FigSignalErrorAt();
      goto LABEL_79;
    }
    v47 = v46;
    CFArrayAppendValue(v18, v46);
    CFRelease(v47);
  }
  v48 = CFGetAllocator(0);
  v49 = VTPixelTransferSessionCreate(v48, (VTPixelTransferSessionRef *)(v15 + 16));
  if ((_DWORD)v49)
  {
LABEL_79:
    v12 = v49;
    v33 = 0;
    goto LABEL_49;
  }
  v50 = CFDictionaryCreateMutableCopy(v11, 0, *(CFDictionaryRef *)(v15 + 40));
  v33 = v50;
  DerivedStorage = v57;
  if (v50)
  {
    CFDictionarySetValue(v50, key, v18);
    v51 = CFDictionaryCreateMutableCopy(v11, 0, *(CFDictionaryRef *)(v15 + 40));
    if (v51)
    {
      v52 = v51;
      CFDictionarySetValue(v51, key, v56);
      CFRelease(*(CFTypeRef *)(v15 + 40));
      *(_QWORD *)(v15 + 40) = v52;
      goto LABEL_41;
    }
  }
LABEL_81:
  v12 = FigSignalErrorAt();
LABEL_50:
  if (v18)
    CFRelease(v18);
  if (v33)
    CFRelease(v33);
LABEL_54:
  if (v56)
    CFRelease(v56);
  if (!(_DWORD)v12)
  {
    if (*v55)
    {
      v41 = sbp_vrot_ensurePoolUpToDate(0, 0);
      if ((_DWORD)v41)
        return v41;
    }
    v42 = (VTSessionRef *)(DerivedStorage + 8);
    v41 = VTImageRotationSessionCreate();
    if ((_DWORD)v41)
      return v41;
    v43 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (a4)
    {
      v41 = VTSessionSetProperty(*v42, (CFStringRef)*MEMORY[0x1E0CED6D8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      if ((_DWORD)v41)
        return v41;
    }
    if (a3 && (v41 = VTSessionSetProperty(*v42, (CFStringRef)*MEMORY[0x1E0CED6E0], *v43), (_DWORD)v41))
    {
      return v41;
    }
    else
    {
      v12 = 0;
      *a6 = 0;
    }
  }
  return v12;
}

uint64_t sbp_vrot_ensurePoolUpToDate(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  CVPixelBufferPoolRef *v6;
  uint64_t v7;
  CFDictionaryRef v8;
  char v9;
  __CFDictionary *MutableCopy;
  CFNumberRef v11;
  CFNumberRef v12;
  const void *v13;
  const __CFAllocator *v14;
  const __CFAllocator *v15;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (CVPixelBufferPoolRef *)(DerivedStorage + 48);
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    if (!a2 || *(_DWORD *)(DerivedStorage + 56) == a2)
      return 0;
    CFRelease(v5);
    *v6 = 0;
  }
  if (VTAvoidIOSurfaceBackings())
  {
    if (a2)
    {
LABEL_8:
      v8 = 0;
      v9 = 1;
      goto LABEL_9;
    }
LABEL_15:
    v13 = *(const void **)(DerivedStorage + 40);
    if (v13)
    {
      MutableCopy = (__CFDictionary *)CFRetain(v13);
      a2 = 0;
      v8 = 0;
    }
    else
    {
      a2 = 0;
      v8 = 0;
      MutableCopy = 0;
    }
    goto LABEL_20;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 40), (const void *)*MEMORY[0x1E0CA8FF0]))
  {
    if (a2)
      goto LABEL_8;
    goto LABEL_15;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
  {
    v9 = 0;
LABEL_9:
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(DerivedStorage + 40));
    valuePtr = a2;
    v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v11)
    {
      v12 = v11;
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9040], v11);
      CFRelease(v12);
    }
    if ((v9 & 1) != 0)
      goto LABEL_20;
    goto LABEL_12;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, *(CFDictionaryRef *)(DerivedStorage + 40));
LABEL_12:
  FigCFDictionarySetValue();
LABEL_20:
  *(_DWORD *)(DerivedStorage + 56) = a2;
  v15 = CFGetAllocator(a1);
  v7 = CVPixelBufferPoolCreate(v15, 0, MutableCopy, v6);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t sbp_vrot_invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 72) = 0;
  MEMORY[0x1940303D4](*(_QWORD *)(DerivedStorage + 8));
  return 0;
}

void sbp_vrot_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  OpaqueVTPixelTransferSession *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(OpaqueVTPixelTransferSession **)(DerivedStorage + 16);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 64))
  {
    FigFormatDescriptionRelease();
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
}

__CFString *sbp_vrot_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_VideoRotation %p>"), a1);
  return Mutable;
}

uint64_t sbp_vrot_copyProperty(const void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_SourcePixelBufferAttributes")))
  {
    v8 = *(const void **)(DerivedStorage + 32);
    if (v8)
    {
LABEL_3:
      v9 = CFRetain(v8);
LABEL_7:
      result = 0;
      *a4 = v9;
      return result;
    }
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_OutputPixelBufferPool")))
  {
    sbp_vrot_ensurePoolUpToDate(a1, 0);
    v8 = *(const void **)(DerivedStorage + 48);
    if (v8)
      goto LABEL_3;
    goto LABEL_6;
  }
  return 4294954512;
}

uint64_t sbp_vrot_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 72) = a2;
  *(_QWORD *)(DerivedStorage + 80) = a3;
  return 0;
}

uint64_t sbp_vrot_processSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  __CVBuffer *ImageBuffer;
  OSType PixelFormatType;
  int v7;
  uint64_t OutputSampleTimingInfoArray;
  const __CFAllocator *v9;
  size_t Width;
  size_t Height;
  __CVBuffer *v12;
  CFTypeRef *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  int v17;
  uint64_t IOSurfaceBackedCVPixelBuffer;
  CVPixelBufferRef *p_pixelBufferOut;
  OpaqueVTPixelTransferSession *v20;
  const opaqueCMFormatDescription *v21;
  CMVideoFormatDescriptionRef *v22;
  const __CFAllocator *v23;
  const __CFAllocator *v24;
  void (*v25)(_QWORD, _QWORD, CMSampleBufferRef);
  CMSampleBufferRef sampleBufferOut;
  CMSampleTimingInfo timingArrayOut;
  CVPixelBufferRef pixelBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  pixelBufferOut = 0;
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  sampleBufferOut = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(ImageBuffer);
  if (!ImageBuffer)
    goto LABEL_28;
  v7 = PixelFormatType;
  OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(a2, 1, &timingArrayOut, 0);
  if ((_DWORD)OutputSampleTimingInfoArray)
    goto LABEL_37;
  if (!*(_QWORD *)(DerivedStorage + 16))
    sbp_vrot_ensurePoolUpToDate(a1, v7);
  v9 = CFGetAllocator(a1);
  OutputSampleTimingInfoArray = CVPixelBufferPoolCreatePixelBuffer(v9, *(CVPixelBufferPoolRef *)(DerivedStorage + 48), &pixelBufferOut);
  if ((_DWORD)OutputSampleTimingInfoArray)
  {
LABEL_37:
    IOSurfaceBackedCVPixelBuffer = OutputSampleTimingInfoArray;
    goto LABEL_31;
  }
  if (!*(_QWORD *)(DerivedStorage + 16))
    goto LABEL_18;
  Width = CVPixelBufferGetWidth(pixelBufferOut);
  Height = CVPixelBufferGetHeight(pixelBufferOut);
  v13 = (CFTypeRef *)(DerivedStorage + 24);
  v12 = *(__CVBuffer **)(DerivedStorage + 24);
  if (v12)
  {
    v14 = CVPixelBufferGetIOSurface(v12) == 0;
    v15 = CVPixelBufferGetIOSurface(pixelBufferOut) == 0;
    if (CVPixelBufferGetPixelFormatType((CVPixelBufferRef)*v13) == v7
      && CVPixelBufferGetWidth((CVPixelBufferRef)*v13) == Width
      && ((v16 = v14 ^ v15, CVPixelBufferGetHeight((CVPixelBufferRef)*v13) != Height) ? (v17 = 1) : (v17 = v16), v17 != 1))
    {
      if (*v13)
        goto LABEL_18;
    }
    else
    {
      CFRelease(*v13);
      *v13 = 0;
    }
  }
  if (Width >> 31 || Height >> 31)
  {
    OutputSampleTimingInfoArray = FigSignalErrorAt();
    goto LABEL_37;
  }
  IOSurfaceBackedCVPixelBuffer = FigCreateIOSurfaceBackedCVPixelBuffer();
  if ((_DWORD)IOSurfaceBackedCVPixelBuffer)
    goto LABEL_31;
LABEL_18:
  p_pixelBufferOut = &pixelBufferOut;
  if (*(_QWORD *)(DerivedStorage + 16))
    p_pixelBufferOut = (CVPixelBufferRef *)(DerivedStorage + 24);
  OutputSampleTimingInfoArray = MEMORY[0x1940303EC](*(_QWORD *)(DerivedStorage + 8), ImageBuffer, *p_pixelBufferOut);
  if ((_DWORD)OutputSampleTimingInfoArray)
    goto LABEL_37;
  v20 = *(OpaqueVTPixelTransferSession **)(DerivedStorage + 16);
  if (v20)
  {
    OutputSampleTimingInfoArray = VTPixelTransferSessionTransferImage(v20, *(CVPixelBufferRef *)(DerivedStorage + 24), pixelBufferOut);
    if ((_DWORD)OutputSampleTimingInfoArray)
      goto LABEL_37;
  }
  v22 = (CMVideoFormatDescriptionRef *)(DerivedStorage + 64);
  v21 = *(const opaqueCMFormatDescription **)(DerivedStorage + 64);
  if (!v21 || !CMVideoFormatDescriptionMatchesImageBuffer(v21, pixelBufferOut))
  {
    FigFormatDescriptionRelease();
    *v22 = 0;
    v23 = CFGetAllocator(a1);
    OutputSampleTimingInfoArray = CMVideoFormatDescriptionCreateForImageBuffer(v23, pixelBufferOut, (CMVideoFormatDescriptionRef *)(DerivedStorage + 64));
    if ((_DWORD)OutputSampleTimingInfoArray)
      goto LABEL_37;
  }
  v24 = CFGetAllocator(a1);
  OutputSampleTimingInfoArray = CMSampleBufferCreateForImageBuffer(v24, pixelBufferOut, 1u, 0, 0, *v22, &timingArrayOut, &sampleBufferOut);
  if ((_DWORD)OutputSampleTimingInfoArray)
    goto LABEL_37;
  CMPropagateAttachments(a2, sampleBufferOut);
LABEL_28:
  v25 = *(void (**)(_QWORD, _QWORD, CMSampleBufferRef))(DerivedStorage + 72);
  if (v25)
    v25(*(_QWORD *)(DerivedStorage + 80), 0, sampleBufferOut);
  IOSurfaceBackedCVPixelBuffer = 0;
LABEL_31:
  CVPixelBufferRelease(pixelBufferOut);
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  return IOSurfaceBackedCVPixelBuffer;
}

uint64_t sbp_vrot_finishPendingProcessing()
{
  return 0;
}

uint64_t FigSCCParserCreate(const void *a1, _OWORD *a2, uint64_t a3, int a4, CFAllocatorRef allocator, _QWORD *a6)
{
  _OWORD *v12;
  _QWORD *v13;
  CFTypeRef v14;
  __int128 v15;
  uint64_t v16;

  if (!a1 || !a2 || !a6)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v12 = CFAllocatorAllocate(allocator, 184, 0);
  v13 = v12;
  if (!v12)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_11;
  }
  *((_QWORD *)v12 + 22) = 0;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  if (allocator)
    v14 = CFRetain(allocator);
  else
    v14 = 0;
  *v13 = v14;
  v13[2] = CFRetain(a1);
  v15 = a2[1];
  *((_OWORD *)v13 + 9) = *a2;
  *((_OWORD *)v13 + 10) = v15;
  v13[22] = a3;
  *((_DWORD *)v13 + 2) = a4;
  v16 = FigCEA608DataInspectorCreate(allocator, v13 + 14);
  if (!(_DWORD)v16)
  {
    *a6 = v13;
LABEL_10:
    v13 = 0;
  }
LABEL_11:
  FigSCCParserRelease(v13);
  return v16;
}

void FigSCCParserRelease(void *a1)
{
  const __CFAllocator *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = *(const __CFAllocator **)a1;
    v3 = (const void *)*((_QWORD *)a1 + 2);
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)a1 + 15);
    if (v4)
      CFRelease(v4);
    FigCEA608DataInspectorRelease(*((CFAllocatorRef **)a1 + 14));
    sccParserMalformedDataInfoRelease(v2, *((_QWORD **)a1 + 17));
    CFAllocatorDeallocate(v2, a1);
    if (v2)
      CFRelease(v2);
  }
}

void sccParserMalformedDataInfoRelease(CFAllocatorRef allocator, _QWORD *ptr)
{
  const void *v4;
  const void *v5;

  if (ptr)
  {
    v4 = (const void *)ptr[1];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)ptr[2];
    if (v5)
      CFRelease(v5);
    CFAllocatorDeallocate(allocator, ptr);
  }
}

uint64_t FigSCCParserSetFrameDuration(uint64_t a1, __int128 *a2)
{
  CMTimeValue v4;
  CMTimeScale v5;
  float v6;
  unsigned int v7;
  uint64_t result;
  __int128 v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1 || (*((_DWORD *)a2 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)a2;
  v5 = *((_DWORD *)a2 + 2);
  v14 = *(_QWORD *)((char *)a2 + 12);
  v15 = *((_DWORD *)a2 + 5);
  CMTimeMake(&time1, 1001, 30000);
  time2.value = v4;
  time2.timescale = v5;
  *(_QWORD *)&time2.flags = v14;
  HIDWORD(time2.epoch) = v15;
  if (CMTimeCompare(&time1, &time2)
    && (CMTimeMake(&v11, 100, 2997),
        time2.value = v4,
        time2.timescale = v5,
        *(_QWORD *)&time2.flags = v14,
        HIDWORD(time2.epoch) = v15,
        CMTimeCompare(&v11, &time2)))
  {
    LODWORD(time2.value) = 0;
    v6 = modff((float)v5 / (float)v4, (float *)&time2);
    v7 = (int)*(float *)&time2.value;
    if (v6 != 0.0 || v7 == 0)
    {
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        return result;
      goto LABEL_11;
    }
    if (v7 > 0x1E || ((1 << v7) & 0x43000000) == 0)
    {
LABEL_11:
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = 30;
  }
  *(_DWORD *)(a1 + 104) = v7;
LABEL_15:
  result = 0;
  v10 = *a2;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 80) = v10;
  return result;
}

uint64_t FigSCCParserParse(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v4;
  malloc_type_id_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  unsigned int (*v11)(uint64_t, size_t, _QWORD, void *, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  _BOOL8 v31;
  const __CFBoolean *v32;
  BOOL v33;
  BOOL v34;
  CFTypeRef v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t (*v51)(_QWORD, _QWORD, _QWORD, _QWORD, _BOOL8, _QWORD);
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t i;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int value_high;
  uint64_t timescale;
  uint64_t flags;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  int32_t v76;
  int v77;
  uint64_t (*v78)(_OWORD *, _QWORD);
  uint64_t v79;
  const __CFAllocator *v80;
  _OWORD *v81;
  CFMutableDataRef Mutable;
  CFMutableArrayRef v83;
  int v84;
  uint64_t (*v85)(_OWORD *, _QWORD);
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  uint64_t (*v93)(_QWORD);
  CFIndex v95;
  CFIndex v96;
  void *v97;
  const void *v98;
  const void *v99;
  int v100;
  CMTime *v101;
  __CFString **v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  int v106;
  int32_t v107;
  uint64_t v108;
  uint64_t v109;
  size_t valuePtr;
  CFNumberRef number;
  UInt8 bytes[2];
  char __str[8];
  char __s[4];
  char v115;
  __int16 v116;
  size_t v117;
  int v118;
  char v119;
  char *__endptr;
  char v121[2];
  _BYTE v122[2];
  CMTime time;
  CMTime __dst;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  number = 0;
  v109 = 0;
  if (!a1)
    goto LABEL_173;
  v1 = a1;
  if ((*(_BYTE *)(a1 + 92) & 1) == 0 || *(_BYTE *)(a1 + 12))
    goto LABEL_173;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v3)
  {
    v6 = 0;
    v7 = 4294954514;
    goto LABEL_170;
  }
  v4 = v3(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number);
  if ((_DWORD)v4)
    goto LABEL_174;
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  if ((valuePtr & 0x8000000000000000) != 0
    || (!valuePtr ? (v5 = 1270757447) : (v5 = 1556728742), (v8 = malloc_type_malloc(valuePtr, v5)) == 0))
  {
LABEL_173:
    v4 = FigSignalErrorAt();
LABEL_174:
    v7 = v4;
    v6 = 0;
    goto LABEL_170;
  }
  v97 = v8;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = valuePtr;
  v11 = *(unsigned int (**)(uint64_t, size_t, _QWORD, void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
  if (!v11 || v11(v9, v10, 0, v97, &v109) || (v12 = v109, v109 != valuePtr))
  {
    v89 = FigSignalErrorAt();
    goto LABEL_168;
  }
  v13 = 0;
  v14 = 0;
  *(_QWORD *)(v1 + 24) = v97;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 32) = v12;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  v99 = (const void *)*MEMORY[0x1E0C9AE50];
  v98 = (const void *)*MEMORY[0x1E0C9AE40];
  v105 = (_QWORD *)(v1 + 24);
  v101 = (CMTime *)(v1 + 80);
  v108 = v1;
LABEL_16:
  v15 = v12 - v13;
  if (v12 == v13)
  {
    v16 = 0;
    v19 = 0;
  }
  else
  {
    v16 = 0;
    v17 = *v105 + v13;
    while (1)
    {
      v18 = *(unsigned __int8 *)(v17 + v16);
      if (v18 == 10)
        break;
      if (v18 == 13)
      {
        if ((unint64_t)(v15 - v16) >= 2 && *(_BYTE *)(v17 + v16 + 1) == 10)
        {
          v19 = 2;
          goto LABEL_27;
        }
        break;
      }
      if (v15 == ++v16)
      {
        v19 = 0;
        v16 = v15;
        goto LABEL_27;
      }
    }
    v19 = 1;
  }
LABEL_27:
  *(_QWORD *)(v1 + 48) = v13;
  *(_QWORD *)(v1 + 56) = v13;
  *(_QWORD *)(v1 + 40) = v16;
  v20 = *(_DWORD *)(v1 + 64);
  *(_DWORD *)(v1 + 64) = v20 + 1;
  *(_QWORD *)(v1 + 72) = v16 + v13 + v19;
  if (v20 <= -2)
  {
    v89 = FigSignalErrorAt();
    if ((_DWORD)v89)
      goto LABEL_168;
LABEL_30:
    if (!v14)
    {
      __dst.value = 0;
      *(_QWORD *)&__dst.timescale = 0;
      *(CMTimeFlags *)((char *)&__dst.flags + 3) = 0;
      time.value = 0;
      sccLineStreamSkipSpaces(v105);
      sccLineStreamReadData(v105, 0x12uLL, &__dst, (size_t *)&time);
      if (time.value == 18
        && (__dst.value == 0x736972616E656353
          ? (v33 = *(_QWORD *)&__dst.timescale == 0x3156204343535F74)
          : (v33 = 0),
            v33 ? (v34 = *(_QWORD *)((char *)&__dst.timescale + 3) == 0x302E3156204343) : (v34 = 0),
            v34 && !sccLineStreamSkipSpaces(v105))
        || (v89 = FigSignalErrorAt(), !(_DWORD)v89))
      {
        v14 = 1;
        goto LABEL_135;
      }
      goto LABEL_168;
    }
    sccLineStreamSkipSpaces(v105);
    v21 = *(_DWORD *)(v1 + 64);
    v23 = *(_QWORD *)(v1 + 48);
    v22 = *(_QWORD *)(v1 + 56);
    time.timescale = 0;
    time.value = 0;
    __dst.timescale = 0;
    __dst.value = 0;
    v117 = 0;
    sccLineStreamReadData(v105, 0xBuLL, &__dst, &v117);
    v24 = v117;
    v100 = v14;
    if (v117 == 11)
    {
      __str[2] = 0;
      __endptr = 0;
      *(_WORD *)__str = __dst.value;
      v25 = strtoul(__str, &__endptr, 10);
      v26 = 0;
      if (&__str[2] != __endptr)
        goto LABEL_155;
      v27 = v25;
      v24 = 2;
      if (v25 <= 0x63u)
      {
        if (BYTE2(__dst.value) != 58)
        {
          v26 = 2;
          goto LABEL_153;
        }
        __str[2] = 0;
        __endptr = 0;
        *(_WORD *)__str = *(_WORD *)((char *)&__dst.value + 3);
        v28 = strtoul(__str, &__endptr, 10);
        if (&__str[2] != __endptr)
        {
          v26 = 3;
          goto LABEL_155;
        }
        LOBYTE(v7) = v28;
        v26 = 3;
        v24 = 2;
        if (v28 <= 0x3Bu)
        {
          if (BYTE5(__dst.value) != 58)
          {
            v26 = 5;
            goto LABEL_153;
          }
          __str[2] = 0;
          __endptr = 0;
          *(_WORD *)__str = HIWORD(__dst.value);
          v29 = strtoul(__str, &__endptr, 10);
          if (&__str[2] != __endptr)
          {
            v26 = 6;
            goto LABEL_155;
          }
          v30 = v29;
          v26 = 6;
          v24 = 2;
          if (v29 <= 0x3Bu)
          {
            if (LOBYTE(__dst.timescale) - 60 < 0xFFFFFFFE)
            {
LABEL_43:
              v26 = 8;
LABEL_153:
              v24 = 1;
              goto LABEL_156;
            }
            v31 = LOBYTE(__dst.timescale) == 59;
            v32 = *(const __CFBoolean **)(v108 + 120);
            if (v32)
            {
              if (CFBooleanGetValue(v32) != v31)
                goto LABEL_43;
            }
            else
            {
              if (LOBYTE(__dst.timescale) == 59)
                v35 = v99;
              else
                v35 = v98;
              if (v35)
                v35 = CFRetain(v35);
              *(_QWORD *)(v108 + 120) = v35;
            }
            __str[2] = 0;
            __endptr = 0;
            *(_WORD *)__str = *(_WORD *)((char *)&__dst.timescale + 1);
            LOBYTE(v36) = strtoul(__str, &__endptr, 10);
            if (&__str[2] == __endptr)
            {
              v37 = *(_DWORD *)(v108 + 104);
              if (v37 > v36)
              {
                time.value = __dst.value;
                time.timescale = __dst.timescale;
                goto LABEL_64;
              }
            }
            v26 = 9;
LABEL_155:
            v24 = 2;
          }
        }
      }
    }
    else
    {
      v26 = 0;
    }
LABEL_156:
    v36 = FigSignalErrorAt();
    v7 = v36;
    if ((_DWORD)v36)
    {
      v96 = v24;
      v1 = v108;
      sccParserMalformedDataInfoCreateIfNeeded(v108, v36, "The timecode is malformed.", (uint64_t)&__dst, v21, v23, v22, v90, v26, v96, 0);
      v50 = 0;
LABEL_158:
      v91 = strlen((const char *)&time);
      sccParserMalformedDataInfoCreateIfNeeded(v1, v7, "The timecode overlaps the previous closed caption data.", (uint64_t)&time, v21, v23, v22, v92, 0, v91, v50);
      v39 = 0;
LABEL_77:
      if (*(_QWORD *)(v1 + 136) && sccParserCallMalformedDataCallback(v1))
      {
        v39 = *(_DWORD *)(v1 + 132);
      }
      else if ((_DWORD)v7)
      {
        goto LABEL_169;
      }
      v106 = 0;
      v107 = v39;
      v52 = 0;
      *(_QWORD *)__str = 0;
      v104 = *(_DWORD *)(v1 + 8);
      v53 = __str;
      if ((v104 & 1) != 0)
        v53 = 0;
      v102 = (__CFString **)v53;
      v103 = 0;
      v54 = 0xFFFFFFFFLL;
      for (i = 0xFFFFFFFFLL; ; i = flags)
      {
        *(_WORD *)bytes = 0;
        __dst = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        sccLineStreamSkipSpaces(v105);
        v56 = *(_DWORD *)(v1 + 64);
        v59 = v1 + 48;
        v57 = *(_QWORD *)(v1 + 48);
        v58 = *(_QWORD *)(v59 + 8);
        v116 = 0;
        v115 = 0;
        *(_DWORD *)__s = 0;
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        v119 = 0;
        v118 = 0;
        v117 = 0;
        sccLineStreamReadData(v105, 4uLL, &v118, &v117);
        v60 = v117;
        if (v117 == 2 || v117 == 4)
        {
          v122[0] = 0;
          __endptr = 0;
          *(_WORD *)v121 = v118;
          v72 = strtoul(v121, &__endptr, 16);
          if (v122 == __endptr)
          {
            v73 = v72;
            if (v60 != 4)
            {
              v75 = 0;
              v68 = 1;
              goto LABEL_95;
            }
            v122[0] = 0;
            __endptr = 0;
            *(_WORD *)v121 = HIWORD(v118);
            v74 = strtoul(v121, &__endptr, 16);
            if (v122 == __endptr)
            {
              v75 = v74;
              v68 = 2;
LABEL_95:
              v116 = v73 | (v75 << 8);
              *(_DWORD *)__s = v118;
              v115 = v119;
              goto LABEL_96;
            }
            v61 = 2;
          }
          else
          {
            v61 = 0;
          }
          v60 = 2;
        }
        else
        {
          v61 = 0;
          if (!v117)
          {
            if (!v52)
            {
              v7 = 0;
              v14 = v100;
              v1 = v108;
              goto LABEL_132;
            }
            *((_QWORD *)v52 + 3) = v103 - *((_QWORD *)v52 + 2);
            v84 = v106;
            *((_DWORD *)v52 + 15) = v106;
            v1 = v108;
            v85 = *(uint64_t (**)(_OWORD *, _QWORD))(v108 + 152);
            v14 = v100;
            if (v85)
            {
              v86 = v85(v52, *(_QWORD *)(v108 + 176));
              if ((_DWORD)v86)
              {
                v7 = v86;
                goto LABEL_132;
              }
              v84 = *((_DWORD *)v52 + 15);
            }
            *(_DWORD *)(v108 + 132) = *((_DWORD *)v52 + 8) + v84;
            sccParserCaptionDataInfoRelease(*(CFAllocatorRef *)v108, v52);
            v52 = 0;
            v7 = 0;
            goto LABEL_132;
          }
        }
        v62 = FigSignalErrorAt();
        if ((_DWORD)v62)
        {
          v7 = v62;
          v95 = v60;
          v64 = v108;
          sccParserMalformedDataInfoCreateIfNeeded(v108, v62, "The byte characters are malformed.", (uint64_t)&v118, v56, v57, v58, v63, v61, v95, 0);
          goto LABEL_89;
        }
        v68 = 0;
LABEL_96:
        v7 = FigCEA608DataInspectorInspectBytePair(*(_QWORD *)(v108 + 112), &v116, v68, (uint64_t)&time, v102);
        if (!(_DWORD)v7)
        {
          v66 = v58;
          *(_WORD *)bytes = v116;
          value_high = HIDWORD(time.value);
          timescale = time.timescale;
          flags = time.flags;
          goto LABEL_98;
        }
        v64 = v108;
LABEL_89:
        v65 = strlen(__s);
        v66 = v58;
        sccParserMalformedDataInfoCreateIfNeeded(v64, v7, "The byte characters are not valid.", (uint64_t)__s, v56, v57, v58, v67, 0, v65, 0);
        v68 = 0;
        value_high = 0;
        timescale = 0;
        flags = 0;
LABEL_98:
        v1 = v108;
        if (*(_QWORD *)(v108 + 136) && sccParserCallMalformedDataCallback(v108))
        {
          timescale = 0xFFFFFFFFLL;
          flags = 0xFFFFFFFFLL;
          v76 = v107;
        }
        else
        {
          if ((_DWORD)v7)
            goto LABEL_142;
          if ((_DWORD)v54 == (_DWORD)timescale && (_DWORD)i == (_DWORD)flags)
          {
            flags = i;
            timescale = v54;
            v77 = v106;
            v76 = v107;
            if (!v52)
              goto LABEL_140;
          }
          else
          {
            if (v52)
            {
              *((_QWORD *)v52 + 3) = v103 - *((_QWORD *)v52 + 2);
              v76 = v107;
              *((_DWORD *)v52 + 15) = v106;
              v78 = *(uint64_t (**)(_OWORD *, _QWORD))(v108 + 152);
              if (v78)
              {
                v79 = v78(v52, *(_QWORD *)(v108 + 176));
                if ((_DWORD)v79)
                {
                  v7 = v79;
                  goto LABEL_142;
                }
              }
              sccParserCaptionDataInfoRelease(*(CFAllocatorRef *)v108, v52);
              v77 = 0;
            }
            else
            {
              v77 = v106;
              v76 = v107;
            }
            time = *v101;
            CMTimeMultiply(&__dst, &time, v76);
            v80 = *(const __CFAllocator **)v108;
            time = __dst;
            v81 = CFAllocatorAllocate(v80, 80, 0);
            v52 = v81;
            if (!v81)
              goto LABEL_139;
            v81[3] = 0u;
            v81[4] = 0u;
            v81[1] = 0u;
            v81[2] = 0u;
            *v81 = 0u;
            Mutable = CFDataCreateMutable(v80, 0);
            *((_QWORD *)v52 + 8) = Mutable;
            if (!Mutable
              || (v104 & 1) == 0
              && (v83 = CFArrayCreateMutable(v80, 0, MEMORY[0x1E0C9B378]), (*((_QWORD *)v52 + 9) = v83) == 0))
            {
LABEL_139:
              v7 = FigSignalErrorAt();
              sccParserCaptionDataInfoRelease(v80, v52);
              v1 = v108;
              if (!(_DWORD)v7)
LABEL_140:
                v7 = FigSignalErrorAt();
              v52 = 0;
LABEL_142:
              v14 = v100;
LABEL_132:
              sccParserCaptionDataInfoRelease(*(CFAllocatorRef *)v1, v52);
              if (*(_QWORD *)__str)
                CFRelease(*(CFTypeRef *)__str);
              if ((_DWORD)v7)
                goto LABEL_169;
LABEL_135:
              v13 = *(_QWORD *)(v1 + 72);
              v12 = *(_QWORD *)(v1 + 32);
              goto LABEL_16;
            }
            *(_DWORD *)v52 = value_high;
            *((_DWORD *)v52 + 1) = timescale;
            *((_DWORD *)v52 + 2) = flags;
            *((_QWORD *)v52 + 2) = v66;
            *((_DWORD *)v52 + 8) = v76;
            *(CMTime *)((char *)v52 + 36) = time;
            v1 = v108;
          }
          CFDataAppendBytes(*((CFMutableDataRef *)v52 + 8), bytes, v68);
          if ((v104 & 1) == 0)
          {
            CFArrayAppendValue(*((CFMutableArrayRef *)v52 + 9), *(const void **)__str);
            if (*(_QWORD *)__str)
            {
              CFRelease(*(CFTypeRef *)__str);
              *(_QWORD *)__str = 0;
            }
          }
          v103 = *(_QWORD *)(v1 + 56);
          v106 = v77 + 1;
        }
        v107 = v76 + 1;
        v54 = timescale;
      }
    }
    v31 = 0;
    v27 = 0;
    v30 = 0;
    v37 = *(_DWORD *)(v108 + 104);
LABEL_64:
    v38 = 60 * v37;
    v39 = v37 * v30 + v36 + (60 * v27 + v7) * 60 * v37;
    if (v31)
    {
      v40 = 600 * v37;
      v41 = v39 / (600 * v37);
      v42 = -18 * v41;
      v43 = v39 - v41 * v40;
      v44 = v43 / v38;
      if (v43 >= 2 && v44 >= 1)
      {
        v87 = v42 - 2 * v44 + 2;
        v88 = v43 % v38;
        if (v88 < 2)
          v42 = v87 + ~v88;
        else
          v42 = v87 - 2;
      }
      v46 = v27;
      v47 = v23;
      v48 = v21;
      v39 += v42;
    }
    else
    {
      v46 = v27;
      v47 = v23;
      v48 = v21;
    }
    v49 = v108;
    v50 = *(_DWORD *)(v108 + 132) - v39;
    if (v50 >= 1)
    {
      v36 = FigSignalErrorAt();
      v7 = v36;
      if ((_DWORD)v36)
      {
        v1 = v108;
        v21 = v48;
        v23 = v47;
        goto LABEL_158;
      }
      v39 = 0;
      v31 = 0;
      v46 = 0;
      v30 = 0;
      v49 = v108;
    }
    v51 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BOOL8, _QWORD))(v49 + 144);
    if (v51)
      v7 = v51(v46, v7, v30, v36, v31, *(_QWORD *)(v49 + 176));
    else
      v7 = 0;
    v1 = v49;
    goto LABEL_77;
  }
  if (v16 + v19)
  {
    if (!v16)
      goto LABEL_135;
    goto LABEL_30;
  }
  v93 = *(uint64_t (**)(_QWORD))(v1 + 160);
  if (!v93 || (v89 = v93(*(_QWORD *)(v1 + 176)), !(_DWORD)v89))
  {
    v7 = 0;
    *(_BYTE *)(v1 + 12) = 1;
    goto LABEL_169;
  }
LABEL_168:
  v7 = v89;
LABEL_169:
  v6 = v97;
LABEL_170:
  free(v6);
  if (number)
    CFRelease(number);
  return v7;
}

uint64_t FigSCCParserCaptionDataInfoGetChannel(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
    *a2 = *a1;
  if (a3)
    *a3 = a1[1];
  if (a4)
    *a4 = a1[2];
  return 0;
}

uint64_t FigSCCParserCaptionDataInfoGetFrame(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_DWORD *)(a1 + 32);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 60);
  return 0;
}

uint64_t FigSCCParserCaptionDataInfoGetDTS(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    v2 = *(_OWORD *)(a1 + 36);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 52);
    *(_OWORD *)a2 = v2;
  }
  return 0;
}

uint64_t FigSCCParserCaptionDataInfoGetCaptionData(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(a1 + 64);
  return 0;
}

uint64_t sccLineStreamSkipSpaces(_QWORD *a1)
{
  _QWORD *v1;
  size_t v3;
  char __dst;

  v1 = a1;
  __dst = 0;
  v3 = 0;
  while (1)
  {
    sccLineStreamReadData(a1, 1uLL, &__dst, &v3);
    if (!v3)
      return 0;
    if (__dst != 9 && __dst != 32)
      break;
    __dst = 0;
    v3 = 0;
    a1 = v1;
  }
  v1[4] -= v3;
  return 1;
}

_QWORD *sccLineStreamReadData(_QWORD *result, size_t a2, void *__dst, size_t *a4)
{
  uint64_t v5;
  size_t v6;
  _QWORD *v7;

  v5 = result[4];
  if (result[3] - v5 + result[2] >= a2)
    v6 = a2;
  else
    v6 = result[3] - v5 + result[2];
  if (v6)
  {
    v7 = result;
    result = memcpy(__dst, (const void *)(*result + v5), v6);
    v7[4] += v6;
  }
  *a4 = v6;
  return result;
}

uint64_t sccParserCallMalformedDataCallback(uint64_t a1)
{
  unsigned int *v1;
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v4;

  v1 = *(unsigned int **)(a1 + 136);
  if (!v1)
    return 1;
  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 168);
  if (v3)
  {
    v4 = v3(*v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), v1[6], *((_QWORD *)v1 + 4), *((_QWORD *)v1 + 5), *((_QWORD *)v1 + 6), v1[14], *(_QWORD *)(a1 + 176));
    v1 = *(unsigned int **)(a1 + 136);
  }
  else
  {
    v4 = 1;
  }
  sccParserMalformedDataInfoRelease(*(CFAllocatorRef *)a1, v1);
  *(_QWORD *)(a1 + 136) = 0;
  return v4;
}

void sccParserMalformedDataInfoCreateIfNeeded(uint64_t a1, int a2, const char *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CFIndex a10, int a11)
{
  const __CFAllocator *v17;
  _OWORD *v18;
  _OWORD *v19;
  CFStringRef v20;
  CFStringRef v21;

  if ((a2 + 16563) >= 0xFFFFFFFE && !*(_QWORD *)(a1 + 136))
  {
    v17 = *(const __CFAllocator **)a1;
    v18 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, 64, 0);
    v19 = v18;
    if (!v18)
      goto LABEL_8;
    v18[2] = 0u;
    v18[3] = 0u;
    *v18 = 0u;
    v18[1] = 0u;
    v20 = CFStringCreateWithCString(v17, a3, 0x8000100u);
    *((_QWORD *)v19 + 1) = v20;
    if (!v20)
      goto LABEL_8;
    v21 = CFStringCreateWithBytes(v17, (const UInt8 *)(a4 + a9), a10, 0x8000100u, 0);
    *((_QWORD *)v19 + 2) = v21;
    if (v21)
    {
      *(_DWORD *)v19 = a2;
      *((_DWORD *)v19 + 6) = a5;
      *((_QWORD *)v19 + 4) = a6;
      *((_QWORD *)v19 + 5) = a9 + a7;
      *((_QWORD *)v19 + 6) = a10;
      *((_DWORD *)v19 + 14) = a11;
      *(_QWORD *)(a1 + 136) = v19;
      v19 = 0;
    }
    else
    {
LABEL_8:
      FigSignalErrorAt();
    }
    sccParserMalformedDataInfoRelease(v17, v19);
  }
}

void sccParserCaptionDataInfoRelease(CFAllocatorRef allocator, _QWORD *ptr)
{
  const void *v4;
  const void *v5;

  if (ptr)
  {
    v4 = (const void *)ptr[8];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)ptr[9];
    if (v5)
      CFRelease(v5);
    CFAllocatorDeallocate(allocator, ptr);
  }
}

uint64_t FigVenueDescriptionMetadataSupplierCreate(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  CFAbsoluteTime Current;
  CFDateRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4)
    goto LABEL_17;
  FigStaticMetadataSupplierGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
LABEL_18:
    v15 = v7;
    goto LABEL_14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v11 = CFDateCreate(v9, Current);
  *(_QWORD *)(DerivedStorage + 88) = v11;
  if (!v11
    || (v12 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 32) = v12) == 0)
    || (v13 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 40) = v13) == 0))
  {
LABEL_17:
    v7 = FigSignalErrorAt();
    goto LABEL_18;
  }
  *(_QWORD *)(DerivedStorage + 48) = 0;
  *(_QWORD *)(DerivedStorage + 56) = DerivedStorage + 48;
  *(_QWORD *)DerivedStorage = CFRetain(a2);
  if (a3)
    v14 = CFRetain(a3);
  else
    v14 = 0;
  *(_QWORD *)(DerivedStorage + 8) = v14;
  v7 = FigRetainProxyCreate();
  if ((_DWORD)v7)
    goto LABEL_18;
  *(_DWORD *)(DerivedStorage + 16) = 1;
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (!FigNotificationCenterAddWeakListener())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  vdms_reevaluateProcessingStateAndNotify(0, 0);
  v15 = 0;
  *a4 = 0;
LABEL_14:
  if (dword_1EE2A30E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v15;
}

void vdms_reevaluateProcessingStateAndNotify(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  __CFError *v7;
  const __CFAllocator *v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, CFArrayRef *);
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const __CFString *, char *, uint64_t *, _QWORD);
  uint64_t CMBaseObject;
  uint64_t (*v28)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFIndex v29;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFTypeID v33;
  char v34;
  int AllDataChannelResourceProcessingStatus;
  int v36;
  int v37;
  BOOL v38;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v40;
  uint64_t v41;
  uint64_t v42;
  CFAbsoluteTime Current;
  const __CFDate *v44;
  const __CFDate *v45;
  double TimeIntervalSinceDate;
  uint64_t v47;
  double v48;
  void (*v49)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, _QWORD, uint64_t);
  int v53;
  uint64_t v54;
  CFArrayRef theArray;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = *(_DWORD *)(DerivedStorage + 16);
  if (a2 && v6 == 6)
    *(_DWORD *)(DerivedStorage + 16) = 4;
  v53 = v6;
  v7 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (2)
  {
    v9 = *(_DWORD *)(v5 + 16);
    switch(v9)
    {
      case 1:
        LOBYTE(theArray) = 0;
        v10 = *(_QWORD *)v5;
        v11 = *(uint64_t (**)(uint64_t, const __CFString *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 24);
        if (!v11)
        {
          v12 = 4294954514;
LABEL_22:
          cf = 0;
          FigCreateErrorForOSStatus(v12, (CFErrorRef *)&cf);
          v7 = (__CFError *)cf;
          vdms_RTCReportingUpdatePayloadTransferError(a1, (__CFError *)cf);
          v13 = 1;
          v14 = 7;
          goto LABEL_49;
        }
        v12 = v11(v10, CFSTR("assetProperty_HLSMetadata"), &theArray);
        if ((_DWORD)v12)
          goto LABEL_22;
        if (!(_BYTE)theArray)
          goto LABEL_59;
        v13 = 0;
        v14 = 4;
        goto LABEL_49;
      case 3:
        if (!*(_QWORD *)(v5 + 64))
          goto LABEL_56;
        cf = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v5 + 32));
        FigBytePumpGetFigBaseObject(*(_QWORD *)(v5 + 64));
        v16 = v15;
        v17 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v17)
          v17(v16, CFSTR("FBSP_Metadata"), v8, &cf);
        MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 32));
        *(_DWORD *)(v5 + 16) = 4;
        if (cf)
          CFRelease(cf);
        continue;
      case 4:
        v54 = 0;
        theArray = 0;
        v18 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v18 + 16) != 4)
          goto LABEL_40;
        v19 = (_QWORD *)v18;
        v20 = *(_QWORD *)(v18 + 64);
        if (v20)
        {
          FigBytePumpGetFigBaseObject(v20);
          v22 = v21;
          v23 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v23)
            goto LABEL_38;
          v24 = v23(v22, CFSTR("FBSP_Metadata"), v8, &theArray);
          if ((_DWORD)v24)
            goto LABEL_39;
        }
        else
        {
          v25 = *v19;
          v26 = *(uint64_t (**)(uint64_t, const __CFString *, char *, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 8);
          if (!v26)
            goto LABEL_38;
          v24 = v26(v25, CFSTR("assetProperty_HLSMetadata"), (char *)&v54 + 4, &v54, 0);
          if ((_DWORD)v24)
            goto LABEL_39;
          v24 = v54;
          if ((_DWORD)v54)
            goto LABEL_39;
          if (HIDWORD(v54) != 2)
          {
            cf = 0;
            v24 = 4294951443;
            goto LABEL_42;
          }
          CMBaseObject = FigAssetGetCMBaseObject(*v19);
          v28 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v28)
          {
LABEL_38:
            v24 = 4294954514;
LABEL_39:
            cf = 0;
            goto LABEL_42;
          }
          v24 = v28(CMBaseObject, CFSTR("assetProperty_HLSMetadata"), v8, &theArray);
          if ((_DWORD)v24)
            goto LABEL_39;
          if (!theArray)
            goto LABEL_64;
        }
        v29 = 0;
        do
        {
          Count = (CFIndex)theArray;
          if (theArray)
            Count = CFArrayGetCount(theArray);
          if (v29 >= Count)
          {
LABEL_40:
            v7 = 0;
            goto LABEL_43;
          }
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v29);
          CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
          ++v29;
        }
        while (!FigCFEqual());
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
        if (Value)
        {
          v33 = CFGetTypeID(Value);
          if (v33 == CFDataGetTypeID())
          {
            v34 = 0;
            v7 = 0;
            goto LABEL_44;
          }
        }
        cf = 0;
        v24 = 4294951441;
LABEL_42:
        FigCreateErrorForOSStatus(v24, (CFErrorRef *)&cf);
        v7 = (__CFError *)cf;
LABEL_43:
        v34 = 1;
LABEL_44:
        if (theArray)
          CFRelease(theArray);
        if (!v7)
        {
          if ((v34 & 1) != 0)
          {
LABEL_64:
            v7 = 0;
LABEL_65:
            v9 = 6;
LABEL_66:
            *(_DWORD *)(v5 + 16) = v9;
            goto LABEL_67;
          }
          vdms_updateResourcesAndTransferMetadata(a1);
          v7 = 0;
          v13 = 0;
          v14 = 5;
LABEL_49:
          *(_DWORD *)(v5 + 16) = v14;
          if (v13)
          {
LABEL_59:
            v9 = *(_DWORD *)(v5 + 16);
LABEL_67:
            v36 = v53;
            goto LABEL_68;
          }
          continue;
        }
        v36 = v53;
        if (*(_QWORD *)(v5 + 64)
          || !FigCFErrorIsEqualToOSStatus(v7, (uint64_t)CFSTR("CoreMediaErrorDomain"), -12785))
        {
          vdms_RTCReportingUpdatePayloadTransferError(a1, v7);
          goto LABEL_62;
        }
        FigRetainProxyRetain();
        v50 = *(_QWORD *)v5;
        v51 = *(_QWORD *)(v5 + 72);
        v52 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
        if (v52 && !v52(v50, vdms_pumpTransferCallback, v51))
        {
          v9 = 2;
        }
        else
        {
          FigRetainProxyRelease();
LABEL_62:
          v9 = 7;
        }
        *(_DWORD *)(v5 + 16) = v9;
LABEL_68:
        if (v36 == v9)
          goto LABEL_85;
        if (v9 == 7)
          v37 = 2;
        else
          v37 = v9 == 6;
        v38 = v37 == (v36 == 6);
        if (v36 == 7)
          v38 = v9 == 7;
        if (v38)
          goto LABEL_85;
        Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v40 = Mutable;
          FigCFDictionarySetInt32();
          FigCFDictionarySetValue();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v9 != 6)
            goto LABEL_84;
          v41 = CMBaseObjectGetDerivedStorage();
          if (!a1)
            goto LABEL_95;
          v42 = v41;
          if (!*(_QWORD *)(v41 + 80))
            goto LABEL_84;
          Current = CFAbsoluteTimeGetCurrent();
          v44 = CFDateCreate(v8, Current);
          if (v44)
          {
            v45 = v44;
            TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v44, *(CFDateRef *)(v42 + 96));
            v47 = *(_QWORD *)(v42 + 80);
            if (v47)
            {
              v48 = TimeIntervalSinceDate;
              v49 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v49)
                v49(v47, CFSTR("vdmsStats"), CFSTR("vdmsReqToDataProcessedTime"), (uint64_t)(v48 * 1000.0), 0);
            }
            CFRelease(v45);
          }
          else
          {
LABEL_95:
            FigSignalErrorAt();
          }
LABEL_84:
          CFRelease(v40);
LABEL_85:
          if (v7)
LABEL_86:
            CFRelease(v7);
        }
        else
        {
          FigSignalErrorAt();
          if (v7)
            goto LABEL_86;
        }
        return;
      case 5:
        vdms_updateResourcesAndTransferMetadata(a1);
        AllDataChannelResourceProcessingStatus = vdms_getAllDataChannelResourceProcessingStatus();
        if (AllDataChannelResourceProcessingStatus == 2)
          goto LABEL_65;
        if (AllDataChannelResourceProcessingStatus != 3)
          goto LABEL_59;
        cf = 0;
        FigCreateErrorForOSStatus(4294951440, (CFErrorRef *)&cf);
        v7 = (__CFError *)cf;
        vdms_RTCReportingUpdatePayloadTransferError(a1, (__CFError *)cf);
LABEL_56:
        v9 = 7;
        goto LABEL_66;
      case 6:
        if (vdms_getAllDataChannelResourceProcessingStatus() != 1)
          goto LABEL_59;
        v9 = 5;
        goto LABEL_66;
      default:
        goto LABEL_67;
    }
  }
}

void vdms_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  const void *v17;
  NSObject *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  vdms_removeFVTNotificationListeners(*(CFArrayRef *)(DerivedStorage + 24));
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (!FigNotificationCenterRemoveWeakListener())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD **)(v3 + 48);
  if (v4)
  {
    v5 = (_QWORD *)*v4;
    if (*v4)
    {
      do
      {
        v6 = v5;
        v5[1] = v4[1];
        *(_QWORD *)v4[1] = v5;
        vdms_destroyResourceEntry(v4);
        v5 = (_QWORD *)*v6;
        v4 = v6;
      }
      while (*v6);
    }
    else
    {
      v6 = *(_QWORD **)(v3 + 48);
    }
    v7 = (_QWORD *)v6[1];
    *(_QWORD *)(v3 + 56) = v7;
    *v7 = 0;
    vdms_destroyResourceEntry(v6);
  }
  v8 = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v9 = v8;
    v10 = *(const void **)(v8 + 80);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v9 + 80) = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 96);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 64));
  if (v14)
  {
    v15 = v14;
    v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v16)
      v16(v15);
  }
  FigBytePumpRelease(*(CFTypeRef *)(DerivedStorage + 64));
  FigRetainProxyRelease();
  *(_QWORD *)(DerivedStorage + 72) = 0;
  v17 = *(const void **)(DerivedStorage + 8);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  FigSimpleMutexDestroy();
  v18 = *(NSObject **)(DerivedStorage + 40);
  if (v18)
  {
    dispatch_release(v18);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
}

__CFString *vdms_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVenueDescriptionMetadataSupplier %p: "), a1);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  CFStringAppendFormat(Mutable, 0, CFSTR("VideoTargetArray %@,"), *(_QWORD *)(DerivedStorage + 24), 0);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t vdms_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v8;
  CFArrayRef Copy;
  int v10;
  int v11;
  uint64_t v12;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (CFEqual(CFSTR("SMS_VideoTargetArray"), a2))
  {
    v8 = *(const __CFArray **)(DerivedStorage + 24);
    if (!v8)
    {
      v12 = 0;
      *a4 = 0;
      goto LABEL_12;
    }
    Copy = CFArrayCreateCopy(a3, v8);
  }
  else
  {
    if (!CFEqual(CFSTR("SMS_ProcessingStatus"), a2))
    {
      v12 = 4294951446;
      goto LABEL_12;
    }
    v10 = *(_DWORD *)(DerivedStorage + 16);
    if (v10 == 7)
      v11 = 2;
    else
      v11 = v10 == 6;
    valuePtr = v11;
    Copy = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  }
  v12 = 0;
  *a4 = Copy;
LABEL_12:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  return v12;
}

uint64_t vdms_setProperty(const void *a1, const void *a2, CFArrayRef Copy)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, _QWORD);
  uint64_t v15;
  uint64_t v16;
  const __CFArray *v17;
  CFMutableArrayRef Mutable;
  __CFArray *v19;
  CFMutableArrayRef v20;
  CFIndex v21;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v24;
  CFIndex j;
  const void *v26;
  CFIndex v27;
  const void *v28;
  CFAbsoluteTime Current;
  uint64_t v30;
  uint64_t v31;
  CFAbsoluteTime v32;
  const __CFDate *v33;
  const __CFDate *v34;
  double TimeIntervalSinceDate;
  uint64_t v36;
  double v37;
  void (*v38)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  const void *v39;
  BOOL v40;
  NSObject *v41;
  uint64_t v43;
  _QWORD block[6];
  BOOL v45;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (!CFEqual(CFSTR("SMS_VideoTargetArray"), a2))
  {
    if (!CFEqual(CFSTR("SMS_ReportingAgent"), a2))
    {
      v16 = 4294951446;
      goto LABEL_66;
    }
    if (Copy)
    {
      v10 = CMBaseObjectGetDerivedStorage();
      if (v10)
      {
        v11 = v10;
        if (!*(_QWORD *)(v10 + 80))
        {
          v12 = CFRetain(Copy);
          *(_QWORD *)(v11 + 80) = v12;
          if (!v12)
          {
            v16 = 4294955296;
            goto LABEL_66;
          }
          v13 = v12;
          v14 = *(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
          if (!v14)
          {
            v16 = 4294954514;
            goto LABEL_66;
          }
          v15 = v14(v13, 0);
          goto LABEL_13;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      v16 = 0;
      goto LABEL_66;
    }
LABEL_12:
    v15 = FigSignalErrorAt();
LABEL_13:
    v16 = v15;
    goto LABEL_66;
  }
  if (Copy)
  {
    v7 = CFGetTypeID(Copy);
    if (v7 == CFArrayGetTypeID())
    {
      v8 = CMBaseObjectGetDerivedStorage();
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Copy);
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_15:
  v17 = *(const __CFArray **)(v8 + 24);
  Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v19 = Mutable;
    v20 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v20)
    {
      v16 = (uint64_t)v20;
      if (!FigCFEqual())
      {
        v21 = 0;
        if (!v17)
          goto LABEL_20;
LABEL_19:
        for (i = CFArrayGetCount(v17); v21 < i; i = 0)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v17, v21);
          if (!FigCFArrayContainsValue())
            CFArrayAppendValue(v19, ValueAtIndex);
          ++v21;
          if (v17)
            goto LABEL_19;
LABEL_20:
          ;
        }
        v24 = 0;
        if (!Copy)
          goto LABEL_28;
LABEL_27:
        for (j = CFArrayGetCount(Copy); v24 < j; j = 0)
        {
          v26 = CFArrayGetValueAtIndex(Copy, v24);
          if (!FigCFArrayContainsValue())
            CFArrayAppendValue((CFMutableArrayRef)v16, v26);
          ++v24;
          if (Copy)
            goto LABEL_27;
LABEL_28:
          ;
        }
      }
LABEL_40:
      vdms_removeFVTNotificationListeners(v19);
      if (!v16)
        goto LABEL_54;
      v43 = DerivedStorage;
      if (CFArrayGetCount((CFArrayRef)v16) >= 1)
      {
        v27 = 0;
        do
        {
          CFArrayGetValueAtIndex((CFArrayRef)v16, v27);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          ++v27;
        }
        while (v27 < CFArrayGetCount((CFArrayRef)v16));
      }
      DerivedStorage = v43;
      if (!CFArrayGetCount((CFArrayRef)v16))
        goto LABEL_54;
      v28 = *(const void **)(v8 + 96);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(v8 + 96) = 0;
      }
      Current = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)(v8 + 96) = CFDateCreate(v9, Current);
      v30 = CMBaseObjectGetDerivedStorage();
      if (a1)
      {
        v31 = v30;
        if (!*(_QWORD *)(v30 + 80))
        {
LABEL_54:
          v39 = *(const void **)(v8 + 24);
          *(_QWORD *)(v8 + 24) = Copy;
          if (Copy)
            CFRetain(Copy);
          if (v39)
            CFRelease(v39);
          v40 = *(_DWORD *)(v8 + 16) == 6;
          if (a1)
            CFRetain(a1);
          v41 = *(NSObject **)(v8 + 40);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = __vdms_gracefullySetVideoTargetArray_block_invoke;
          block[3] = &__block_descriptor_tmp_63;
          block[4] = v8;
          block[5] = a1;
          v45 = v40;
          dispatch_async(v41, block);
          if (v19)
            CFRelease(v19);
          if (v16)
          {
            CFRelease((CFTypeRef)v16);
            v16 = 0;
          }
          goto LABEL_64;
        }
        v32 = CFAbsoluteTimeGetCurrent();
        v33 = CFDateCreate(v9, v32);
        if (v33)
        {
          v34 = v33;
          TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v33, *(CFDateRef *)(v31 + 88));
          v36 = *(_QWORD *)(v31 + 80);
          if (v36)
          {
            v37 = TimeIntervalSinceDate;
            v38 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v38)
              v38(v36, CFSTR("vdmsStats"), CFSTR("vdmsCreateToReqTime"), (uint64_t)(v37 * 1000.0), 0);
          }
          CFRelease(v34);
          goto LABEL_54;
        }
      }
      FigSignalErrorAt();
      goto LABEL_54;
    }
    v16 = FigSignalErrorAt();
    CFRelease(v19);
  }
  else
  {
    v16 = FigSignalErrorAt();
  }
  if (!(_DWORD)v16)
  {
    v16 = 0;
    v19 = 0;
    goto LABEL_40;
  }
LABEL_64:
  if (Copy)
    CFRelease(Copy);
LABEL_66:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  return v16;
}

CFIndex vdms_removeFVTNotificationListeners(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex result;

  v2 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (result = CFArrayGetCount(theArray); v2 < result; result = 0)
  {
    CFArrayGetValueAtIndex(theArray, v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    ++v2;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return result;
}

uint64_t vdms_deferredFVTPreferredDataChannelGroupsChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  result = FigCFArrayContainsValue();
  if ((_DWORD)result)
  {
    vdms_reevaluateProcessingStateAndNotify(a2, *(_DWORD *)(DerivedStorage + 16) == 6);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t vdms_deferredAssetPropertyLoadedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFAbsoluteTime Current;
  const __CFDate *v15;
  const __CFDate *v16;
  double TimeIntervalSinceDate;
  uint64_t v18;
  double v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (!FigCFEqual() && !FigCFEqual())
    return FigSignalErrorAt();
  if (*(_QWORD *)v9 != a4)
    return FigSignalErrorAt();
  CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 32));
    if (*(_DWORD *)(v9 + 16) == 1)
    {
      if (FigCFEqual())
      {
        v11 = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(v11 + 80))
        {
          v12 = v11;
          v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Current = CFAbsoluteTimeGetCurrent();
          v15 = CFDateCreate(v13, Current);
          if (v15)
          {
            v16 = v15;
            TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v15, *(CFDateRef *)(v12 + 96));
            v18 = *(_QWORD *)(v12 + 80);
            if (v18)
            {
              v19 = TimeIntervalSinceDate;
              v20 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v20)
                v20(v18, CFSTR("vdmsStats"), CFSTR("vdmsReqToDataLoadTime"), (uint64_t)(v19 * 1000.0), 0);
            }
            CFRelease(v16);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
      }
      vdms_reevaluateProcessingStateAndNotify(a2, 0);
    }
    JUMPOUT(0x19402EF04);
  }
  return result;
}

void vdms_destroyResourceEntry(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[2];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

void __vdms_gracefullySetVideoTargetArray_block_invoke(uint64_t a1)
{
  const void *v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  vdms_reevaluateProcessingStateAndNotify(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  MEMORY[0x19402EF04](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

uint64_t vdms_updateDataChannelConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  _QWORD *DataChannelResourceEntryByTarget;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3 || !a5)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (*(int *)(v9 + 16) < 4)
  {
    v12 = 4294951442;
  }
  else
  {
    DataChannelResourceEntryByTarget = vdms_findDataChannelResourceEntryByTarget();
    if (DataChannelResourceEntryByTarget && (v11 = DataChannelResourceEntryByTarget[3]) != 0)
      v12 = FigDataChannelConfigurationAddDataChannelResource(a3, v11);
    else
      v12 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 32));
  return v12;
}

_QWORD *vdms_findDataChannelResourceEntryByTarget()
{
  _QWORD *v0;

  v0 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  do
    v0 = (_QWORD *)*v0;
  while (v0 && !FigCFEqual());
  return v0;
}

void vdms_RTCReportingUpdatePayloadTransferError(uint64_t a1, __CFError *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFErrorDomain Domain;
  CFStringRef v7;
  CFIndex Code;
  uint64_t v9;
  CFIndex v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD);
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (a2)
    {
      v5 = DerivedStorage;
      if (*(_QWORD *)(DerivedStorage + 80))
      {
        Domain = CFErrorGetDomain(a2);
        v7 = CFErrorCopyDescription(a2);
        Code = CFErrorGetCode(a2);
        v9 = *(_QWORD *)(v5 + 80);
        if (v9)
        {
          v10 = Code;
          v11 = *(void (**)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 48);
          if (v11)
            v11(v9, CFSTR("vdmsStats"), CFSTR("vdmsPayloadTransferErrorDom"), Domain, 0);
          v12 = *(_QWORD *)(v5 + 80);
          if (v12)
          {
            v13 = *(void (**)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 48);
            if (v13)
              v13(v12, CFSTR("vdmsStats"), CFSTR("vdmsPayloadTransferErrorStr"), v7, 0);
            v14 = *(_QWORD *)(v5 + 80);
            if (v14)
            {
              v15 = *(void (**)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v15)
                v15(v14, CFSTR("vdmsStats"), CFSTR("vdmsPayloadTransferErrorCode"), v10, 0);
            }
          }
        }
        if (v7)
          CFRelease(v7);
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void vdms_updateResourcesAndTransferMetadata(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t);
  uint64_t v10;
  _QWORD *v11;
  CFIndex v12;
  const __CFAllocator *v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(const void *, _QWORD, _QWORD, CFTypeRef *);
  _QWORD *v19;
  CFTypeRef v20;
  int v21;
  CFTypeRef v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t CMBaseObject;
  uint64_t (*v27)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  const __CFString *v28;
  int v29;
  CFIndex v30;
  CFArrayRef Count;
  const __CFDictionary *v32;
  const void *Value;
  CFTypeRef v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeID v38;
  int BlockBufferWithCFDataNoCopy;
  CFArrayRef v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, CFArrayRef);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  CFAbsoluteTime Current;
  const __CFDate *v49;
  const __CFDate *v50;
  double TimeIntervalSinceDate;
  uint64_t v52;
  double v53;
  void (*v54)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CFTypeRef cf;
  CFArrayRef theArray[3];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 16) - 7) < 0xFFFFFFFD)
    return;
  v3 = *(const __CFArray **)(DerivedStorage + 24);
  v4 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 48);
  v5 = 0;
  while (v4)
  {
    v6 = v4;
    v4 = (uint64_t *)*v4;
    if (!vdms_supportsVenueDescriptionDataDelivery(v6[2]) || !FigCFArrayContainsValue())
    {
      v7 = CMBaseObjectGetDerivedStorage();
      v8 = v6[3];
      if (!v8
        || (v9 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48)) != 0
        && !v9(v8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        v10 = *v6;
        v11 = (_QWORD *)v6[1];
        if (*v6)
        {
          *(_QWORD *)(v10 + 8) = v11;
          v11 = (_QWORD *)v6[1];
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v11;
        }
        *v11 = v10;
        vdms_destroyResourceEntry(v6);
      }
      v5 = 1;
    }
  }
  v12 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!v3)
    goto LABEL_16;
LABEL_15:
  for (i = CFArrayGetCount(v3); v12 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v12);
    if (!vdms_supportsVenueDescriptionDataDelivery((uint64_t)ValueAtIndex)
      || vdms_findDataChannelResourceEntryByTarget())
    {
      goto LABEL_36;
    }
    v16 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    *(_OWORD *)theArray = *MEMORY[0x1E0CA5270];
    v17 = FigTagCollectionCreate();
    if (v17)
    {
LABEL_38:
      v21 = v17;
      v19 = 0;
      goto LABEL_32;
    }
    v18 = *(uint64_t (**)(const void *, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
    if (v18)
    {
      v17 = v18(ValueAtIndex, 0, 0, &cf);
      if (v17)
        goto LABEL_38;
      v19 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004003E9C36BuLL);
      if (v19)
      {
        if (ValueAtIndex)
          v20 = CFRetain(ValueAtIndex);
        else
          v20 = 0;
        v19[2] = v20;
        v22 = cf;
        if (cf)
          v22 = CFRetain(cf);
        v21 = 0;
        v19[3] = v22;
        *((_DWORD *)v19 + 9) = 0;
        goto LABEL_32;
      }
    }
    else
    {
      v19 = 0;
    }
    v21 = -12782;
LABEL_32:
    if (cf)
      CFRelease(cf);
    if (v21)
    {
      vdms_destroyResourceEntry(v19);
      return;
    }
    *v19 = 0;
    v23 = *(_QWORD **)(v16 + 56);
    v19[1] = v23;
    *v23 = v19;
    *(_QWORD *)(v16 + 56) = v19;
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = 1;
    FigNotificationCenterAddWeakListener();
LABEL_36:
    ++v12;
    if (v3)
      goto LABEL_15;
LABEL_16:
    ;
  }
  if (!v5)
    return;
  theArray[0] = 0;
  v24 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!v24[8])
  {
    CMBaseObject = FigAssetGetCMBaseObject(*v24);
    v27 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v27)
    {
      v28 = CFSTR("assetProperty_HLSMetadata");
      goto LABEL_45;
    }
    goto LABEL_55;
  }
  FigBytePumpGetFigBaseObject(v24[8]);
  CMBaseObject = v25;
  v27 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v27)
  {
LABEL_55:
    v34 = 0;
    v35 = -12782;
    goto LABEL_56;
  }
  v28 = CFSTR("FBSP_Metadata");
LABEL_45:
  v29 = v27(CMBaseObject, v28, v13, theArray);
  if (v29)
  {
    v35 = v29;
    v34 = 0;
  }
  else
  {
    v30 = 0;
    while (1)
    {
      Count = theArray[0];
      if (theArray[0])
        Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
      if (v30 >= (uint64_t)Count)
        break;
      v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray[0], v30);
      CFDictionaryGetValue(v32, CFSTR("key"));
      ++v30;
      if (FigCFEqual())
      {
        Value = CFDictionaryGetValue(v32, CFSTR("value"));
        if (Value)
        {
          v34 = CFRetain(Value);
          goto LABEL_54;
        }
        break;
      }
    }
    v34 = 0;
LABEL_54:
    v35 = 0;
  }
LABEL_56:
  if (theArray[0])
    CFRelease(theArray[0]);
  if (v35)
  {
LABEL_81:
    if (!v34)
      return;
    goto LABEL_82;
  }
  v36 = CMBaseObjectGetDerivedStorage();
  if (!v34)
    goto LABEL_73;
  v37 = v36;
  theArray[0] = 0;
  v38 = CFGetTypeID(v34);
  if (v38 != CFDataGetTypeID())
  {
LABEL_82:
    CFRelease(v34);
    return;
  }
  CFDataGetLength((CFDataRef)v34);
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  v40 = theArray[0];
  if (BlockBufferWithCFDataNoCopy)
  {
    if (theArray[0])
      CFRelease(theArray[0]);
    goto LABEL_82;
  }
  v41 = *(uint64_t **)(v37 + 48);
  if (!v41)
  {
LABEL_69:
    v45 = 0;
    goto LABEL_70;
  }
  while (2)
  {
    v42 = v41[3];
    if (!v42 || *((_BYTE *)v41 + 32))
    {
LABEL_68:
      v41 = (uint64_t *)*v41;
      if (!v41)
        goto LABEL_69;
      continue;
    }
    break;
  }
  v43 = *(uint64_t (**)(uint64_t, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v43)
  {
    v45 = -12782;
    goto LABEL_70;
  }
  v44 = v43(v42, v40);
  if (!v44)
  {
    *((_BYTE *)v41 + 32) = 1;
    goto LABEL_68;
  }
  v45 = v44;
LABEL_70:
  if (v40)
    CFRelease(v40);
  if (v45)
    goto LABEL_81;
LABEL_73:
  CMNotificationCenterGetDefaultLocalCenter();
  if (CMNotificationCenterPostNotification())
    goto LABEL_81;
  v46 = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v47 = v46;
    if (!*(_QWORD *)(v46 + 80))
      goto LABEL_81;
    Current = CFAbsoluteTimeGetCurrent();
    v49 = CFDateCreate(v13, Current);
    if (v49)
    {
      v50 = v49;
      TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v49, *(CFDateRef *)(v47 + 96));
      v52 = *(_QWORD *)(v47 + 80);
      if (v52)
      {
        v53 = TimeIntervalSinceDate;
        v54 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v54)
          v54(v52, CFSTR("vdmsStats"), CFSTR("vdmsReqToPayloadDeliveryTime"), (uint64_t)(v53 * 1000.0), 0);
      }
      CFRelease(v50);
      goto LABEL_81;
    }
  }
  FigSignalErrorAt();
  if (v34)
    goto LABEL_82;
}

void vdms_pumpTransferCallback(uint64_t a1, const void *a2, const void *a3)
{
  const void *Owner;
  CFTypeRef v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[9];

  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v7 = CFRetain(Owner);
  else
    v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 16) == 2)
  {
    v9 = DerivedStorage;
    if (a3)
      CFRetain(a3);
    FigBytePumpRetain(a2);
    FigRetainProxyRetain();
    FigRetainProxyRetainOwner();
    v10 = *(NSObject **)(v9 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdms_pumpTransferCallback_block_invoke;
    block[3] = &unk_1E2F9E8B8;
    block[6] = a3;
    block[7] = a2;
    block[8] = v7;
    block[4] = a1;
    block[5] = v9;
    dispatch_async(v10, block);
  }
  FigRetainProxyRelease();
  if (v7)
    CFRelease(v7);
}

uint64_t vdms_getAllDataChannelResourceProcessingStatus()
{
  uint64_t DerivedStorage;
  uint64_t *v1;
  char v2;
  int v3;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 16) - 7) < 0xFFFFFFFE)
    return 1;
  v1 = *(uint64_t **)(DerivedStorage + 48);
  if (!v1)
    return 2;
  v2 = 0;
  LOBYTE(v3) = 1;
  do
  {
    v4 = *((_DWORD *)v1 + 9);
    v3 = (v4 == 1) & v3;
    v2 |= v4 == 2;
    v1 = (uint64_t *)*v1;
  }
  while (v1);
  if (v2)
    return 3;
  if (v3)
    return 2;
  return 1;
}

uint64_t vdms_supportsVenueDescriptionDataDelivery(uint64_t a1)
{
  unsigned int (*v2)(uint64_t, _QWORD, CFArrayRef *);
  CFIndex v3;
  unsigned __int8 v4;
  uint64_t v5;
  CMTagValue v6;
  CFIndex Count;
  const void *ValueAtIndex;
  CFIndex v9;
  const OpaqueCMTagCollection *DataChannelByIndex;
  CFArrayRef theArray;
  CMTag v13;

  theArray = 0;
  v2 = *(unsigned int (**)(uint64_t, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v2 || v2(a1, *MEMORY[0x1E0C9AE00], &theArray))
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = *MEMORY[0x1E0CA5270];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA5270] + 8);
    while (1)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (v3 >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      if (FigDataChannelGroupGetCountOfDataChannels((uint64_t)ValueAtIndex) >= 1)
      {
        v9 = 0;
        while (1)
        {
          DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)ValueAtIndex, v9);
          *(_QWORD *)&v13.category = v5;
          v13.value = v6;
          if (CMTagCollectionContainsTag(DataChannelByIndex, v13))
            break;
          if (++v9 >= FigDataChannelGroupGetCountOfDataChannels((uint64_t)ValueAtIndex))
            goto LABEL_13;
        }
        v4 = 1;
      }
LABEL_13:
      ++v3;
    }
  }
  if (theArray)
    CFRelease(theArray);
  return v4;
}

uint64_t vdms_dataChannelResourceProcessingStateChangedNotificationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  _QWORD *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
    if ((*(_DWORD *)(v4 + 16) - 7) >= 0xFFFFFFFE)
    {
      FigCFDictionaryGetInt32IfPresent();
      v5 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
      do
        v5 = (_QWORD *)*v5;
      while (v5 && !FigCFEqual());
      vdms_reevaluateProcessingStateAndNotify(a2, 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(v4 + 32));
}

void __vdms_pumpTransferCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  const void *v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  v2 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16) = 3;
  if (!v2)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64) = FigBytePumpRetain(*(CFTypeRef *)(a1 + 56));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v4)
      v4(v3);
  }
  vdms_reevaluateProcessingStateAndNotify(*(_QWORD *)(a1 + 64), 0);
  MEMORY[0x19402EF04](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  FigRetainProxyReleaseOwner();
  FigRetainProxyRelease();
  FigBytePumpRelease(*(CFTypeRef *)(a1 + 56));
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
}

uint64_t FigMediaValidatorMIMETypeIsShoutcastAudio(const __CFString *a1)
{
  return mv_IsStringInCArrayList(a1, (CFStringRef **)audioMimeTypes);
}

uint64_t mv_IsStringInCArrayList(CFStringRef theString1, CFStringRef **a2)
{
  CFStringRef *v2;
  CFStringRef **i;
  uint64_t v5;
  CFStringRef *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  for (i = a2 + 1; ; ++i)
  {
    v5 = 1;
    if (CFStringCompare(theString1, *v2, 1uLL) == kCFCompareEqualTo)
      break;
    v6 = *i;
    v2 = v6;
    if (!v6)
      return 0;
  }
  return v5;
}

uint64_t FigMediaValidatorUTIIsShoutcastAudio(const __CFString *a1)
{
  return mv_IsStringInCArrayList(a1, (CFStringRef **)audioUTIs);
}

uint64_t FigMediaValidatorIsNonByteStreamURLStreaming(int a1, const __CFURL *a2, const __CFURL *a3, __CFHTTPMessage *a4, _BYTE *a5)
{
  CFIndex ResponseStatusCode;
  const __CFURL *v11;
  __int16 v12;

  if (a5)
    *a5 = 0;
  if (a1 == -12939)
  {
    if (mv_IsStreaming(a2, a3, a4))
      return 1;
    if (a4)
    {
      ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(a4);
      if (ResponseStatusCode == 200 || ResponseStatusCode == 416 || ResponseStatusCode == 206)
      {
        v12 = 0;
        if (mv_IsMimeTypeInList(a4, (CFStringRef **)audioMimeTypes, &v12))
          goto LABEL_11;
        v11 = a3 ? a3 : a2;
        if (v11)
        {
          if (mv_IsExtensionInList(v11, a4, (CFStringRef **)audioExtensions, (_BYTE *)&v12 + 1))
          {
LABEL_11:
            if (a5)
              *a5 = 1;
            return 1;
          }
          if (!(v12 | HIBYTE(v12)))
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t FigMediaValidatorValidateByteStream(unint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t result;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const __CFDictionary *v11;

  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  v5[0] = 0u;
  v5[1] = a1;
  v11 = a3;
  LODWORD(result) = mv_GetValidationType(a3, (int *)&v10 + 2);
  if (!(_DWORD)result)
    LODWORD(result) = mv_ValidateFileFromByteStream((uint64_t)v5, a2);
  if (result | BYTE9(v6))
    return result;
  else
    return 4294954346;
}

uint64_t mv_GetValidationType(const __CFDictionary *a1, int *a2)
{
  const void *Value;
  const void *v4;
  int v5;
  uint64_t result;

  Value = CFDictionaryGetValue(a1, CFSTR("ValidationType"));
  if (Value)
  {
    v4 = Value;
    if (CFEqual(Value, CFSTR("RejectIfUnrecognized")))
    {
      v5 = 0;
LABEL_8:
      result = 0;
      *a2 = v5;
      return result;
    }
    if (CFEqual(v4, CFSTR("RequireOneRecognized")))
    {
      v5 = 1;
      goto LABEL_8;
    }
    if (CFEqual(v4, CFSTR("IgnoreUnrecognized")))
    {
      v5 = 2;
      goto LABEL_8;
    }
  }
  return 4294954334;
}

uint64_t mv_ValidateFileFromByteStream(uint64_t a1, const void *a2)
{
  CFTypeRef v2;
  uint64_t v4;
  uint64_t (*v5)(CFTypeRef, uint64_t *);
  uint64_t v6;
  const void *Value;
  const void *v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v11;
  uint64_t v12;
  CFTypeRef v13;
  const void *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t (*v17)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  const __CFBoolean *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFNumber *v24;
  const __CFNumber *v25;
  CFTypeRef v27;
  uint64_t valuePtr;
  CFTypeRef cf;
  CFTypeRef v30;
  uint64_t v31;

  v2 = a2;
  v27 = 0;
  if (!a2)
  {
    v4 = FigFormatReaderCreateForStream(*(_QWORD *)(a1 + 16), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &v27);
    if ((_DWORD)v4)
    {
LABEL_61:
      v12 = v4;
      goto LABEL_56;
    }
    v2 = v27;
  }
  v30 = 0;
  v31 = 0;
  v4 = mv_CheckIfFormatReaderIsSupported(a1, (uint64_t)v2);
  if ((_DWORD)v4)
    goto LABEL_61;
  v5 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
  {
LABEL_30:
    v12 = 4294954514;
    goto LABEL_31;
  }
  v6 = v5(v2, &v31);
  if ((_DWORD)v6)
    goto LABEL_63;
  if (v31 <= 0)
  {
    v6 = FigSignalErrorAt();
LABEL_63:
    v12 = v6;
    goto LABEL_31;
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), CFSTR("MaxMovieMatrixType"));
  if (!Value)
  {
LABEL_18:
    v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), CFSTR("AllowMultipleEdits"));
    if (v14)
      v15 = CFEqual(v14, (CFTypeRef)*MEMORY[0x1E0C9AE40]) == 0;
    else
      v15 = 1;
    if (v31 < 1)
    {
LABEL_29:
      v12 = 0;
      goto LABEL_31;
    }
    v16 = 0;
    while (1)
    {
      v17 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 48);
      if (!v17)
        goto LABEL_30;
      v6 = v17(v2, v16, &v30, 0, 0);
      if ((_DWORD)v6)
        goto LABEL_63;
      v6 = mv_ValidateTrackWithTrackReader(a1, (uint64_t)v2, (uint64_t)v30, v15, 0, 0);
      if ((_DWORD)v6)
        goto LABEL_63;
      if (v30)
      {
        CFRelease(v30);
        v30 = 0;
      }
      if (++v16 >= v31)
        goto LABEL_29;
    }
  }
  v8 = Value;
  cf = 0;
  FigBaseObject = FigFormatReaderGetFigBaseObject(v2);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v10)
  {
    v12 = 0;
    goto LABEL_14;
  }
  v11 = v10(FigBaseObject, CFSTR("MovieMatrix"), *MEMORY[0x1E0C9AE00], &cf);
  v12 = 0;
  v13 = cf;
  if (!v11 && cf)
  {
    v12 = mv_CheckIfMatrixIsSupported(v8, (CFArrayRef)cf);
LABEL_14:
    v13 = cf;
  }
  if (v13)
    CFRelease(v13);
  if (!(_DWORD)v12)
    goto LABEL_18;
LABEL_31:
  if (v30)
    CFRelease(v30);
  if (!(_DWORD)v12)
  {
    if (!*(_BYTE *)(a1 + 41) || *(_DWORD *)(a1 + 104) != 1)
    {
LABEL_45:
      cf = 0;
      v21 = FigFormatReaderGetFigBaseObject(v2);
      v22 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v22)
      {
        if (!v22(v21, CFSTR("ImportantResourceLocation"), *MEMORY[0x1E0C9AE00], &cf) && cf != 0)
        {
          valuePtr = 0;
          v24 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationOffset"));
          if (v24)
          {
            CFNumberGetValue(v24, kCFNumberSInt64Type, &valuePtr);
            *(_QWORD *)(a1 + 24) = valuePtr;
          }
          valuePtr = 0;
          v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationSize"));
          if (v25)
          {
            CFNumberGetValue(v25, kCFNumberSInt64Type, &valuePtr);
            *(_QWORD *)(a1 + 32) = valuePtr;
          }
          CFRelease(cf);
        }
      }
      v12 = 0;
      goto LABEL_56;
    }
    v18 = *(const __CFBoolean **)(a1 + 8);
    if (v18)
    {
      v19 = CFBooleanGetValue(v18);
      v20 = *(_QWORD *)(a1 + 48);
      if (v19 == 1)
      {
        if (v20 && *(_QWORD *)(a1 + 56))
          goto LABEL_43;
      }
      else if (v20 < 1)
      {
        goto LABEL_43;
      }
      v12 = FigSignalErrorAt();
      if ((_DWORD)v12)
        goto LABEL_56;
    }
LABEL_43:
    if (*(uint64_t *)(a1 + 48) >= 1 && !*(_QWORD *)(a1 + 56))
    {
      v12 = FigSignalErrorAt();
      if ((_DWORD)v12)
        goto LABEL_56;
    }
    goto LABEL_45;
  }
LABEL_56:
  if (v27)
    CFRelease(v27);
  return v12;
}

uint64_t FigMediaValidatorValidateIndividualTrack(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  return mv_ValidateIndividualTrack(a1, a2, a3, 0);
}

uint64_t mv_ValidateIndividualTrack(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4)
{
  uint64_t result;
  const void *Value;
  _BOOL4 v10;
  _OWORD v11[7];
  const __CFDictionary *v12;

  memset(v11, 0, sizeof(v11));
  v12 = a3;
  result = mv_CheckIfFormatReaderIsSupported((uint64_t)v11, a1);
  if (!(_DWORD)result)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("AllowMultipleEdits"));
    if (Value)
      v10 = CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0C9AE40]) == 0;
    else
      v10 = 1;
    return mv_ValidateTrackWithTrackReader((uint64_t)v11, a1, a2, v10, 1, a4);
  }
  return result;
}

uint64_t FigMediaValidatorValidateIndividualTrackForDecoding(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  return mv_ValidateIndividualTrack(a1, a2, a3, 1);
}

uint64_t FigMediaValidatorValidateFormatDescription(const opaqueCMFormatDescription *a1, const __CFDictionary *a2)
{
  signed int MediaType;
  CFStringRef CFStringFrom4CC;
  __CFString *v6;
  unsigned int IsValueInArrayInDictionary;
  FourCharCode MediaSubType;
  CFStringRef v9;
  CFStringRef v10;
  unsigned int v11;
  char v12;
  BOOL v13;
  Boolean v15;
  __int16 v16;
  _OWORD v17[7];
  const __CFDictionary *v18;
  __int16 v19;

  v16 = 0;
  v15 = 0;
  memset(v17, 0, sizeof(v17));
  v18 = a2;
  MediaType = CMFormatDescriptionGetMediaType(a1);
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaType);
  if (CFStringFrom4CC)
  {
    v6 = (__CFString *)CFStringFrom4CC;
    IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(a2, CFStringFrom4CC, CFSTR("TrackTypes"), &v15, &v16);
    if (IsValueInArrayInDictionary)
    {
LABEL_21:
      v11 = IsValueInArrayInDictionary;
LABEL_22:
      CFRelease(v6);
      v13 = HIBYTE(v16) != 0;
      goto LABEL_23;
    }
    if ((_BYTE)v16 && v15)
    {
      if (MediaType <= 1936684397)
      {
        if (MediaType == 1668047728)
        {
          IsValueInArrayInDictionary = mv_CheckIfClosedCaptionsPlayable((uint64_t)v17, v6, a1, 0, (char *)&v16 + 1);
          goto LABEL_21;
        }
        if (MediaType == 1935832172)
        {
          IsValueInArrayInDictionary = mv_CheckIfSubTitlesPlayable((uint64_t)v17, v6, a1, 0, (char *)&v16 + 1);
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      if (MediaType == 1936684398)
      {
        IsValueInArrayInDictionary = mv_CheckIfAudioPlayable((uint64_t)v17, v6, a1, 0, 0, (BOOL *)&v16 + 1);
        goto LABEL_21;
      }
      if (MediaType != 1953325924)
      {
        if (MediaType == 1986618469)
        {
          IsValueInArrayInDictionary = mv_CheckIfVideoPresentable((uint64_t)v17, v6, a1, 0, 0, 0, 0, (BOOL *)&v16 + 1);
          goto LABEL_21;
        }
LABEL_20:
        IsValueInArrayInDictionary = mv_CheckIfOtherMediaTypePlayable((uint64_t)v17, v6, a1, (char *)&v16 + 1);
        goto LABEL_21;
      }
      MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
      v9 = mv_CreateCFStringFrom4CC(MediaSubType);
      if (v9)
      {
        v10 = v9;
        v19 = 0;
        v11 = mv_IsValueInArrayInDictionary(a2, v9, v6, (Boolean *)&v19 + 1, &v19);
        if (!v11)
        {
          if ((_BYTE)v19)
          {
            v12 = 0;
            if (!HIBYTE(v19))
            {
              v11 = FigSignalErrorAt();
              v12 = 1;
            }
          }
          else
          {
            v12 = 0;
          }
          HIBYTE(v16) = v12;
        }
        CFRelease(v10);
        goto LABEL_22;
      }
    }
    IsValueInArrayInDictionary = FigSignalErrorAt();
    goto LABEL_21;
  }
  v11 = FigSignalErrorAt();
  v13 = 0;
LABEL_23:
  if (v11 == 0 && v13)
    return 4294954346;
  else
    return v11;
}

uint64_t mv_CheckIfVideoPresentable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, uint64_t a4, uint64_t a5, int a6, _BYTE *a7, BOOL *a8)
{
  FourCharCode MediaSubType;
  CFStringRef CFStringFrom4CC;
  CFStringRef v18;
  uint64_t IsValueInArrayInDictionary;
  FourCharCode v20;
  const __CFAllocator *v21;
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  const __CFArray *v24;
  CFTypeID v25;
  _BOOL4 v26;
  CFTypeID v27;
  CFIndex v28;
  uint64_t v29;
  signed int v30;
  CFStringRef v31;
  CFStringRef v32;
  uint64_t v33;
  __CFDictionary *Mutable;
  int VideoDecoderInstance;
  unsigned int CodecProperty;
  unsigned int v37;
  BOOL v38;
  CMVideoDimensions Dimensions;
  const __CFDictionary *v40;
  CFTypeID TypeID;
  const __CFDictionary *v42;
  CFTypeID v43;
  const __CFDictionary *v44;
  CFTypeID v45;
  uint64_t v46;
  const __CFDictionary *v47;
  CFTypeID v48;
  uint64_t FigBaseObject;
  void (*v50)(uint64_t, const __CFString *, uint64_t, void **);
  int v51;
  unsigned int VideoProfileAndLevelConstraints;
  const __CFNumber *v53;
  const __CFArray *v54;
  int v55;
  int v56;
  CFPropertyListRef v57;
  const void *v58;
  CFTypeID v59;
  const __CFArray *v60;
  const __CFArray *v61;
  CFTypeID v62;
  const __CFArray *v63;
  int v64;
  int v65;
  CFPropertyListRef v66;
  const void *v67;
  CFTypeID v68;
  const __CFArray *v69;
  const __CFArray *ValueAtIndex;
  CFTypeID v71;
  const __CFArray *v72;
  const __CFDictionary *v73;
  const __CFDictionary *v74;
  CFTypeID v75;
  const __CFArray *v76;
  const __CFArray *v77;
  CFTypeID v78;
  const __CFDictionary *Extension;
  const __CFDictionary *v80;
  CFTypeID v81;
  const __CFArray *v82;
  const __CFArray *v83;
  CFTypeID v84;
  CFTypeID v85;
  const UInt8 *v86;
  int v87;
  int v88;
  CFTypeID v89;
  const UInt8 *BytePtr;
  CFIndex v91;
  _BYTE *v92;
  CFTypeID v93;
  const UInt8 *v94;
  uint64_t v95;
  int v96;
  int v97;
  CFTypeID v98;
  uint64_t v99;
  int v100;
  int IsIntInCFArray;
  int v103;
  int v104;
  int v105;
  _BOOL4 v106;
  CMVideoDimensions v107;
  double v108;
  uint64_t v109;
  CMVideoDimensions v110;
  double v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  const __CFDictionary *v117;
  CFTypeID v118;
  int v119;
  const __CFDictionary *Extensions;
  const __CFDictionary *v121;
  const __CFDictionary *v122;
  CFTypeID v123;
  const __CFData *v124;
  const __CFData *v125;
  CFTypeID v126;
  CFTypeID v127;
  const __CFDictionary *v128;
  CFTypeID v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, const __CFString *, uint64_t, void **);
  int v132;
  const void *v133;
  CFTypeRef v134;
  CFTypeRef v135;
  int v136;
  int v137;
  int v138;
  int v139;
  const __CFArray *v140;
  uint64_t v141;
  BOOL *v142;
  uint64_t v143;
  const __CFString *cf;
  __int16 v145;
  uint64_t v146;
  CFNumberRef v147;
  CFNumberRef v148;
  const void *v149;
  const __CFArray *v150;
  int32_t v151;
  int v152[2];
  CFNumberRef number;
  const __CFBoolean *valuePtr;
  unsigned __int8 v155;
  __int16 v156;
  void *value;
  int v158;
  CFDictionaryRef resolvedDictionaryOut;
  void *values[2];

  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (a7)
    *a7 = FigCPEIsSupportedFormatDescription((uint64_t)desc);
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (!CFStringFrom4CC)
    return FigSignalErrorAt();
  v18 = CFStringFrom4CC;
  v145 = 0;
  IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v145 + 1, &v145);
  if ((_DWORD)IsValueInArrayInDictionary
    || !(_BYTE)v145
    && (IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), v18, CFSTR("VideoCodecs"), (Boolean *)&v145 + 1, &v145), (_DWORD)IsValueInArrayInDictionary))
  {
    v29 = IsValueInArrayInDictionary;
    goto LABEL_150;
  }
  resolvedDictionaryOut = 0;
  values[0] = 0;
  value = 0;
  v143 = a5;
  if (CMFormatDescriptionGetMediaType(desc) != 1986618469)
  {
LABEL_32:
    if (!(_BYTE)v145)
    {
      v29 = FigSignalErrorAt();
      goto LABEL_147;
    }
    if (HIBYTE(v145))
    {
      v142 = a8;
      v30 = CMFormatDescriptionGetMediaSubType(desc);
      v31 = mv_CreateCFStringFrom4CC(v30);
      v149 = 0;
      v150 = 0;
      v147 = 0;
      v148 = 0;
      if (v31)
      {
        v32 = v31;
        v33 = *MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCA8], (const void *)*MEMORY[0x1E0C9AE50]);
        VideoDecoderInstance = VTSelectAndCreateVideoDecoderInstance();
        if (Mutable)
          CFRelease(Mutable);
        number = 0;
        valuePtr = 0;
        *(_QWORD *)v152 = 0;
        v151 = 0;
        if (VideoDecoderInstance)
          goto LABEL_38;
        Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
        v40 = *(const __CFDictionary **)(a1 + 112);
        TypeID = CFNumberGetTypeID();
        CodecProperty = mv_GetCodecProperty(v40, v32, CFSTR("VideoCodecProfiles"), CFSTR("VideoMaxWidth"), TypeID, (const void **)&number);
        if (CodecProperty)
          goto LABEL_39;
        if (number && CFNumberGetValue(number, kCFNumberSInt32Type, &v151) && v151 < Dimensions.width)
          goto LABEL_38;
        v141 = v33;
        v42 = *(const __CFDictionary **)(a1 + 112);
        v43 = CFNumberGetTypeID();
        CodecProperty = mv_GetCodecProperty(v42, v32, CFSTR("VideoCodecProfiles"), CFSTR("VideoMaxHeight"), v43, (const void **)&number);
        if (CodecProperty)
          goto LABEL_39;
        if (number && CFNumberGetValue(number, kCFNumberSInt32Type, &v151) && v151 < Dimensions.height)
          goto LABEL_38;
        v44 = *(const __CFDictionary **)(a1 + 112);
        v45 = CFNumberGetTypeID();
        CodecProperty = mv_GetCodecProperty(v44, v32, CFSTR("VideoCodecProfiles"), CFSTR("VideoMaxPixelsPerFrame"), v45, (const void **)&number);
        if (CodecProperty)
          goto LABEL_39;
        if (number
          && CFNumberGetValue(number, kCFNumberSInt32Type, &v151)
          && v151 < Dimensions.height * Dimensions.width)
        {
          goto LABEL_38;
        }
        v46 = v143;
        if (v143)
        {
          v47 = *(const __CFDictionary **)(a1 + 112);
          v48 = CFBooleanGetTypeID();
          mv_GetCodecProperty(v47, v32, CFSTR("VideoCodecProfiles"), CFSTR("VideoNoFrameReordering"), v48, (const void **)&valuePtr);
          if (valuePtr)
          {
            if (CFBooleanGetValue(valuePtr))
            {
              values[0] = 0;
              FigBaseObject = FigTrackReaderGetFigBaseObject(v143);
              v50 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
              if (v50)
                v50(FigBaseObject, CFSTR("TrackFrameReorderingRequired"), v141, values);
              if (values[0])
              {
                v51 = CFBooleanGetValue((CFBooleanRef)values[0]);
                CFRelease(values[0]);
                if (v51)
                  goto LABEL_38;
              }
            }
          }
        }
        cf = v18;
        VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(*(const __CFDictionary **)(a1 + 112), v32, &v150, 0, &v149, &v148, &v147, 0);
        if (VideoProfileAndLevelConstraints)
          goto LABEL_256;
        v53 = v147;
        if (v147 && (unint64_t)v150 | (unint64_t)v148)
        {
          v146 = 0;
          if (v148)
          {
            CFNumberGetValue(v148, kCFNumberSInt32Type, (char *)&v146 + 4);
            v53 = v147;
          }
          CFNumberGetValue(v53, kCFNumberSInt32Type, &v146);
          if (v30 > 1752589104)
          {
            if (v30 == 1752589105)
            {
              v140 = v150;
              v134 = v149;
              v136 = HIDWORD(v146);
              v138 = v146;
              Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
              if (!Extension)
                goto LABEL_154;
              v80 = Extension;
              v81 = CFGetTypeID(Extension);
              if (v81 != CFDictionaryGetTypeID())
                goto LABEL_154;
              v82 = (const __CFArray *)CFDictionaryGetValue(v80, CFSTR("hvcC"));
              if (!v82)
                goto LABEL_154;
              v83 = v82;
              v84 = CFGetTypeID(v82);
              if (v84 == CFArrayGetTypeID())
              {
                if (!CFArrayGetValueAtIndex(v83, 0))
                  goto LABEL_154;
              }
              else
              {
                v98 = CFGetTypeID(v83);
                if (v98 != CFDataGetTypeID())
                  goto LABEL_154;
              }
              resolvedDictionaryOut = 0;
              value = 0;
              v156 = 0;
              v155 = 0;
              if (FigHEVCBridge_GetHEVCParameterSetAtIndex()
                || FigHEVCBridge_GetSPSProfileTierLevel())
              {
                goto LABEL_154;
              }
              v99 = HIBYTE(v156);
              v100 = v155;
              values[0] = 0;
              if (v140)
                IsIntInCFArray = mv_IsIntInCFArray(HIBYTE(v156), v140);
              else
                IsIntInCFArray = v136 >= HIBYTE(v156);
              if (!IsIntInCFArray)
                goto LABEL_153;
              if (!a6)
              {
                if (v143 && v134 && mv_isMovieFamilyFormatReader(a4))
                {
                  v158 = v138;
                  v103 = mv_EvaluateProfileConstraints(v99, v134, v143, (uint64_t)&v158, (double *)values);
                  if (a4 && !v103)
                  {
                    if (!mv_isMovieFamilyFormatReader(a4))
                      goto LABEL_153;
                    CMVideoFormatDescriptionGetDimensions(desc);
                    v103 = mv_CheckIfDroppingHEVCTemporalLevelsEnablesPlayability(v143, 0.0, *(double *)values);
                  }
                  v104 = v138;
                  if (v158 < v138)
                    v104 = v158;
                  v138 = v104;
                  v46 = v143;
                  if (!v103)
                    goto LABEL_153;
                }
                if (v138 < v100)
                {
                  if (!a4 || !v46 || !mv_isMovieFamilyFormatReader(a4))
                    goto LABEL_153;
                  v110 = CMVideoFormatDescriptionGetDimensions(desc);
                  v111 = 0.0;
                  if (v138 <= 122)
                  {
                    if (v138 > 89)
                    {
                      switch(v138)
                      {
                        case 'Z':
                          v111 = 16588800.0;
                          break;
                        case ']':
                          v111 = 33177600.0;
                          break;
                        case 'x':
                          v111 = 66846720.0;
                          break;
                      }
                    }
                    else
                    {
                      switch(v138)
                      {
                        case 30:
                          v111 = 552960.0;
                          break;
                        case 60:
                          v111 = 3686400.0;
                          break;
                        case 63:
                          v111 = 7372800.0;
                          break;
                      }
                    }
                  }
                  else if (v138 <= 155)
                  {
                    switch(v138)
                    {
                      case 123:
                        v111 = 133693440.0;
                        break;
                      case 150:
                        v111 = 267386880.0;
                        break;
                      case 153:
                        v111 = 534773760.0;
                        break;
                    }
                  }
                  else if (v138 > 182)
                  {
                    if (v138 == 183)
                    {
                      v111 = 2139095040.0;
                    }
                    else if (v138 == 186)
                    {
                      v111 = 4278190080.0;
                    }
                  }
                  else if (v138 == 156 || v138 == 180)
                  {
                    v111 = 1069547520.0;
                  }
                  v46 = v143;
                  if (!mv_CheckIfDroppingHEVCTemporalLevelsEnablesPlayability(v143, v111 / (double)(v110.height * v110.width), 0.0))goto LABEL_153;
                }
              }
              goto LABEL_232;
            }
            if (v30 != 1836070006)
              goto LABEL_232;
            v63 = v150;
            v64 = v146;
            v65 = HIDWORD(v146);
            v66 = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
            if (!v66)
              goto LABEL_154;
            v67 = v66;
            v68 = CFDictionaryGetTypeID();
            if (v68 != CFGetTypeID(v67))
              goto LABEL_154;
            v69 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v67, CFSTR("esds"));
            if (!v69)
              goto LABEL_154;
            ValueAtIndex = v69;
            v71 = CFArrayGetTypeID();
            if (v71 == CFGetTypeID(ValueAtIndex))
            {
              ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
              if (!ValueAtIndex)
                goto LABEL_154;
            }
            else
            {
              v89 = CFDataGetTypeID();
              if (v89 != CFGetTypeID(ValueAtIndex))
                goto LABEL_154;
            }
            BytePtr = CFDataGetBytePtr(ValueAtIndex);
            v91 = CFDataGetLength(ValueAtIndex) - 4;
            if (!BytePtr)
              v91 = -4;
            if (v91 < 1)
              goto LABEL_153;
            v92 = BytePtr + 2;
            while (*(v92 - 2) || *(v92 - 1) || *v92 != 1 || v92[1] != 176)
            {
              ++v92;
              if (!--v91)
                goto LABEL_153;
            }
            v112 = 0;
            while (v92[2] != MPEG4ProfileCheck[v112])
            {
              v112 += 3;
              if (v112 == 45)
                goto LABEL_154;
            }
            v113 = MPEG4ProfileCheck[v112 + 1];
            if (v63)
            {
              if (!mv_IsIntInCFArray(v113, v63))
                goto LABEL_153;
            }
            else if (v65 < v113)
            {
              goto LABEL_153;
            }
            if (v64 < MPEG4ProfileCheck[v112 + 2])
              goto LABEL_153;
            v46 = v143;
            goto LABEL_232;
          }
          if (v30 != 1635148593)
          {
            if (v30 != 1748121139)
              goto LABEL_232;
            v54 = v150;
            v55 = v146;
            v56 = HIDWORD(v146);
            v57 = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
            if (!v57)
              goto LABEL_154;
            v58 = v57;
            v59 = CFDictionaryGetTypeID();
            if (v59 != CFGetTypeID(v58))
              goto LABEL_154;
            v60 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v58, CFSTR("d263"));
            if (!v60)
              goto LABEL_154;
            v61 = v60;
            v62 = CFArrayGetTypeID();
            if (v62 == CFGetTypeID(v61))
            {
              v61 = (const __CFArray *)CFArrayGetValueAtIndex(v61, 0);
              if (!v61)
                goto LABEL_154;
            }
            else
            {
              v85 = CFDataGetTypeID();
              if (v85 != CFGetTypeID(v61))
                goto LABEL_154;
            }
            if (CFDataGetLength(v61) >= 7)
            {
              v86 = CFDataGetBytePtr(v61);
              v87 = v86[6];
              v88 = v86[5];
              if (v54)
              {
                v46 = v143;
                if (!mv_IsIntInCFArray(v87, v54))
                  goto LABEL_153;
              }
              else
              {
                v46 = v143;
                if (v56 < v87)
                {
LABEL_153:
                  FigSignalErrorAt();
                  goto LABEL_154;
                }
              }
              if (v55 < v88)
                goto LABEL_153;
              goto LABEL_232;
            }
LABEL_154:
            v37 = -12955;
            goto LABEL_40;
          }
          v72 = v150;
          v135 = v149;
          v137 = HIDWORD(v146);
          v139 = v146;
          v73 = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
          if (v73)
          {
            v74 = v73;
            v75 = CFDictionaryGetTypeID();
            if (v75 == CFGetTypeID(v74))
            {
              v76 = (const __CFArray *)CFDictionaryGetValue(v74, CFSTR("avcC"));
              if (v76)
              {
                v77 = v76;
                v78 = CFArrayGetTypeID();
                if (v78 == CFGetTypeID(v77))
                {
                  v77 = (const __CFArray *)CFArrayGetValueAtIndex(v77, 0);
                  if (!v77)
                    goto LABEL_232;
                }
                else
                {
                  v93 = CFDataGetTypeID();
                  if (v93 != CFGetTypeID(v77))
                    goto LABEL_232;
                }
                if (CFDataGetLength(v77) < 5)
                  goto LABEL_232;
                v94 = CFDataGetBytePtr(v77);
                v95 = v94[1];
                v96 = v94[3];
                if (v72)
                  v97 = mv_IsIntInCFArray(v94[1], v72);
                else
                  v97 = v137 >= (int)v95;
                if (v97)
                {
                  if (a6)
                    goto LABEL_232;
                  if (!v143 || !v135 || !mv_isMovieFamilyFormatReader(a4))
                    goto LABEL_164;
                  v105 = v139;
                  LODWORD(values[0]) = v139;
                  v106 = mv_EvaluateProfileConstraints(v95, v135, v143, (uint64_t)values, 0);
                  if (SLODWORD(values[0]) < v139)
                    v105 = (int)values[0];
                  v139 = v105;
                  if (v106)
                  {
LABEL_164:
                    v46 = v143;
                    if (v139 >= v96)
                      goto LABEL_232;
                    if (a4 && v143 && mv_isMovieFamilyFormatReader(a4))
                    {
                      v107 = CMVideoFormatDescriptionGetDimensions(desc);
                      v108 = 0.0;
                      switch(v139)
                      {
                        case 30:
                          v108 = 40500.0;
                          goto LABEL_227;
                        case 31:
                          v108 = 108000.0;
                          goto LABEL_227;
                        case 32:
                          v108 = 216000.0;
                          goto LABEL_227;
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                          goto LABEL_227;
                        case 40:
                        case 41:
                          v109 = 0x410E000000000000;
                          goto LABEL_226;
                        case 42:
                          v108 = 522240.0;
                          goto LABEL_227;
                        default:
                          if (v139 == 50)
                          {
                            v109 = 0x4122000000000000;
                          }
                          else
                          {
                            if (v139 != 51)
                              goto LABEL_227;
                            v109 = 0x412E000000000000;
                          }
LABEL_226:
                          v108 = *(double *)&v109;
LABEL_227:
                          v114 = v107.height + 30;
                          if (v107.height >= -15)
                            v114 = v107.height + 15;
                          v115 = v114 >> 4;
                          v116 = v107.width + 15;
                          if (v107.width < -15)
                            v116 = v107.width + 30;
                          v46 = v143;
                          if (mv_CheckIfDroppingFramesEnablesPlayability(v143, v108 / (double)(v115 * (v116 >> 4)), 0.0))goto LABEL_232;
                          break;
                      }
                    }
                  }
                }
                v37 = -12955;
                FigSignalErrorAt();
LABEL_257:
                a8 = v142;
                v18 = cf;
                goto LABEL_41;
              }
            }
          }
        }
LABEL_232:
        v117 = *(const __CFDictionary **)(a1 + 112);
        v118 = CFBooleanGetTypeID();
        VideoProfileAndLevelConstraints = mv_GetCodecProperty(v117, v32, CFSTR("VideoCodecProfiles"), CFSTR("VideoNoInterlacing"), v118, (const void **)&valuePtr);
        if (!VideoProfileAndLevelConstraints)
        {
          v18 = cf;
          if (!valuePtr)
            goto LABEL_246;
          v119 = CFBooleanGetValue(valuePtr);
          if (v30 != 1635148593 || !v119)
            goto LABEL_246;
          LOBYTE(value) = 0;
          resolvedDictionaryOut = 0;
          values[0] = 0;
          Extensions = CMFormatDescriptionGetExtensions(desc);
          if (Extensions)
          {
            v121 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240]);
            if (v121)
            {
              v122 = v121;
              v123 = CFDictionaryGetTypeID();
              if (v123 == CFGetTypeID(v122))
              {
                v124 = (const __CFData *)CFDictionaryGetValue(v122, CFSTR("avcC"));
                if (v124)
                {
                  v125 = v124;
                  v126 = CFArrayGetTypeID();
                  if (v126 != CFGetTypeID(v125) || (v125 = (const __CFData *)CFArrayGetValueAtIndex(v125, 0)) != 0)
                  {
                    v127 = CFDataGetTypeID();
                    if (v127 == CFGetTypeID(v125))
                    {
                      CFDataGetBytePtr(v125);
                      CFDataGetLength(v125);
                      if (!FigH264Bridge_GetSPSFromAVCC()
                        && !FigH264Bridge_GetSPSIsInterlaced()
                        && !(_BYTE)value)
                      {
LABEL_246:
                        v128 = *(const __CFDictionary **)(a1 + 112);
                        v129 = CFStringGetTypeID();
                        v37 = mv_GetCodecProperty(v128, v32, CFSTR("VideoCodecProfiles"), CFSTR("MaxVideoTrackMatrixType"), v129, (const void **)v152);
                        if (v37)
                          goto LABEL_40;
                        a8 = v142;
                        if (*(_QWORD *)v152)
                        {
                          values[0] = 0;
                          v130 = FigTrackReaderGetFigBaseObject(v46);
                          v131 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (v131)
                          {
                            v132 = v131(v130, CFSTR("TrackMatrix"), v141, values);
                            v37 = 0;
                            v133 = values[0];
                            if (!v132 && values[0])
                            {
                              v37 = mv_CheckIfMatrixIsSupported(*(const void **)v152, (CFArrayRef)values[0]);
                              v133 = values[0];
                            }
                            if (v133)
                              CFRelease(v133);
                          }
                          else
                          {
                            v37 = 0;
                          }
                        }
LABEL_41:
                        CFRelease(v32);
                        if (!v37)
                          goto LABEL_146;
LABEL_45:
                        v38 = *(_DWORD *)(a1 + 104) == 1;
                        if (*(_DWORD *)(a1 + 104) == 1)
                          v29 = 0;
                        else
                          v29 = v37;
                        if (!a8)
                          goto LABEL_150;
                        goto LABEL_148;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_38:
          CodecProperty = FigSignalErrorAt();
LABEL_39:
          v37 = CodecProperty;
LABEL_40:
          a8 = v142;
          goto LABEL_41;
        }
LABEL_256:
        v37 = VideoProfileAndLevelConstraints;
        goto LABEL_257;
      }
      v37 = FigSignalErrorAt();
      a8 = v142;
      if (v37)
        goto LABEL_45;
    }
    else
    {
      v37 = FigSignalErrorAt();
      if (v37)
        goto LABEL_45;
    }
LABEL_146:
    v29 = 0;
LABEL_147:
    v38 = 0;
    if (!a8)
      goto LABEL_150;
LABEL_148:
    if (!(_DWORD)v29)
      *a8 = v38;
    goto LABEL_150;
  }
  v20 = CMFormatDescriptionGetMediaSubType(desc);
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20);
  if (!v22)
  {
    v26 = 0;
    goto LABEL_28;
  }
  v23 = v22;
  values[0] = CFDictionaryCreateMutable(v21, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue((CFMutableDictionaryRef)values[0], (const void *)*MEMORY[0x1E0CA8FE8], (const void *)*MEMORY[0x1E0C9AE50]);
  v24 = CFArrayCreate(v21, (const void **)values, 1, MEMORY[0x1E0C9B378]);
  CVPixelBufferCreateResolvedAttributesDictionary(v21, v24, &resolvedDictionaryOut);
  if (!resolvedDictionaryOut)
    goto LABEL_23;
  CFDictionaryGetValueIfPresent(resolvedDictionaryOut, (const void *)*MEMORY[0x1E0CA9040], (const void **)&value);
  if (!value)
    goto LABEL_23;
  v25 = CFGetTypeID(value);
  if (v25 != CFNumberGetTypeID())
  {
    if (value)
    {
      v27 = CFGetTypeID(value);
      if (v27 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)value) >= 1)
      {
        v28 = 0;
        while (1)
        {
          LODWORD(valuePtr) = 0;
          if (FigCFArrayGetInt32AtIndex())
          {
            if (VTPixelTransferSessionCanTransfer())
              break;
          }
          ++v28;
          v26 = 0;
          if (CFArrayGetCount((CFArrayRef)value) <= v28)
            goto LABEL_24;
        }
        v26 = 1;
        goto LABEL_24;
      }
    }
    goto LABEL_23;
  }
  LODWORD(valuePtr) = 0;
  if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
  {
LABEL_23:
    v26 = 0;
    goto LABEL_24;
  }
  v26 = VTPixelTransferSessionCanTransfer() != 0;
LABEL_24:
  CFRelease(v23);
  if (values[0])
  {
    CFRelease(values[0]);
    values[0] = 0;
  }
  if (v24)
    CFRelease(v24);
LABEL_28:
  if (resolvedDictionaryOut)
    CFRelease(resolvedDictionaryOut);
  if (!v26)
    goto LABEL_32;
  v29 = 0;
LABEL_150:
  CFRelease(v18);
  return v29;
}

uint64_t mv_CheckIfAudioPlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, _BYTE *a4, _BYTE *a5, BOOL *a6)
{
  FourCharCode MediaSubType;
  CFStringRef CFStringFrom4CC;
  CFStringRef v14;
  uint64_t IsValueInArrayInDictionary;
  unsigned int AudioCodecStringFromFormatDescription;
  unsigned int v17;
  CFNumberRef v18;
  FourCharCode v19;
  CFStringRef v20;
  CFStringRef v21;
  const AudioStreamBasicDescription *StreamBasicDescription;
  double *p_mSampleRate;
  const __CFDictionary *v24;
  CFTypeID TypeID;
  unsigned int CodecProperty;
  const __CFDictionary *v27;
  CFTypeID v28;
  BOOL v29;
  uint64_t v30;
  __int16 v32;
  double valuePtr;
  CFBooleanRef BOOLean;
  CFNumberRef number;

  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (a5)
    *a5 = FigCPEIsSupportedFormatDescription((uint64_t)desc);
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (CFStringFrom4CC)
  {
    v14 = CFStringFrom4CC;
    v32 = 0;
    IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v32 + 1, &v32);
    if (!(_DWORD)IsValueInArrayInDictionary)
    {
      if ((_BYTE)v32)
        goto LABEL_8;
      IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), v14, CFSTR("AudioCodecs"), (Boolean *)&v32 + 1, &v32);
      if (!(_DWORD)IsValueInArrayInDictionary)
      {
        if (!(_BYTE)v32)
        {
          v30 = FigSignalErrorAt();
LABEL_37:
          v29 = 0;
          if (a6)
          {
LABEL_38:
            if (!(_DWORD)v30)
              *a6 = v29;
          }
LABEL_40:
          CFRelease(v14);
          return v30;
        }
LABEL_8:
        if (MediaSubType == 1634754915)
        {
          number = 0;
          AudioCodecStringFromFormatDescription = FigCreateAudioCodecStringFromFormatDescription();
          if (!AudioCodecStringFromFormatDescription)
            AudioCodecStringFromFormatDescription = mv_ValidateAudioCodecsParameterValue((uint64_t)number);
          v17 = AudioCodecStringFromFormatDescription;
          v18 = number;
          if (!number)
          {
LABEL_28:
            if (v17)
              goto LABEL_29;
LABEL_35:
            v30 = 0;
            goto LABEL_37;
          }
LABEL_27:
          CFRelease(v18);
          goto LABEL_28;
        }
        if (!HIBYTE(v32)
          || (v19 = CMFormatDescriptionGetMediaSubType(desc), (v20 = mv_CreateCFStringFrom4CC(v19)) == 0))
        {
          v17 = FigSignalErrorAt();
          if (v17)
          {
LABEL_29:
            v29 = *(_DWORD *)(a1 + 104) == 1;
            if (*(_DWORD *)(a1 + 104) == 1)
              v30 = 0;
            else
              v30 = v17;
            if (!a6)
              goto LABEL_40;
            goto LABEL_38;
          }
          goto LABEL_35;
        }
        v21 = v20;
        BOOLean = 0;
        number = 0;
        valuePtr = 0.0;
        StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
        if (StreamBasicDescription)
        {
          p_mSampleRate = &StreamBasicDescription->mSampleRate;
          v24 = *(const __CFDictionary **)(a1 + 112);
          TypeID = CFNumberGetTypeID();
          CodecProperty = mv_GetCodecProperty(v24, v21, CFSTR("AudioCodecProfiles"), CFSTR("AudioMaxSampleRate"), TypeID, (const void **)&number);
          if (!CodecProperty)
          {
            if (!number || !CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr) || *p_mSampleRate <= valuePtr)
            {
              if (!a4)
                goto LABEL_25;
              v27 = *(const __CFDictionary **)(a1 + 112);
              v28 = CFBooleanGetTypeID();
              v17 = mv_GetCodecProperty(v27, v21, CFSTR("AudioCodecProfiles"), CFSTR("TrackMustBeDisabled"), v28, (const void **)&BOOLean);
              if (v17 || !BOOLean)
                goto LABEL_26;
              if (!*a4 || !CFBooleanGetValue(BOOLean))
              {
LABEL_25:
                v17 = 0;
LABEL_26:
                v18 = (CFNumberRef)v21;
                goto LABEL_27;
              }
            }
            CodecProperty = FigSignalErrorAt();
          }
          v17 = CodecProperty;
          goto LABEL_26;
        }
        v17 = -12957;
        goto LABEL_26;
      }
    }
    v30 = IsValueInArrayInDictionary;
    goto LABEL_40;
  }
  return FigSignalErrorAt();
}

uint64_t mv_CheckIfSubTitlesPlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, _BYTE *a4, char *a5)
{
  FourCharCode MediaSubType;
  CFStringRef CFStringFrom4CC;
  CFStringRef v12;
  uint64_t IsValueInArrayInDictionary;
  char v14;
  __int16 v16;

  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (a4)
    *a4 = FigCPEIsSupportedFormatDescription((uint64_t)desc);
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (!CFStringFrom4CC)
    return FigSignalErrorAt();
  v12 = CFStringFrom4CC;
  v16 = 0;
  IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v16 + 1, &v16);
  if (!(_DWORD)IsValueInArrayInDictionary)
  {
    if ((_BYTE)v16)
    {
      v14 = 0;
      if (!HIBYTE(v16))
      {
        if (*(_DWORD *)(a1 + 104))
          IsValueInArrayInDictionary = 0;
        else
          IsValueInArrayInDictionary = FigSignalErrorAt();
        v14 = 1;
      }
    }
    else
    {
      v14 = 0;
    }
    if (a5)
      *a5 = v14;
  }
  CFRelease(v12);
  return IsValueInArrayInDictionary;
}

uint64_t mv_CheckIfClosedCaptionsPlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, BOOL *a4, char *a5)
{
  FourCharCode MediaSubType;
  FourCharCode v10;
  CFStringRef CFStringFrom4CC;
  CFStringRef v12;
  uint64_t IsValueInArrayInDictionary;
  char v14;
  __int16 v16;

  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v10 = MediaSubType;
  if (a4)
    *a4 = MediaSubType == 1882599480;
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (!CFStringFrom4CC)
    return FigSignalErrorAt();
  v12 = CFStringFrom4CC;
  v16 = 0;
  IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v16 + 1, &v16);
  if (!(_DWORD)IsValueInArrayInDictionary)
  {
    if ((_BYTE)v16)
    {
      v14 = 0;
      if (!HIBYTE(v16))
      {
        if (*(_DWORD *)(a1 + 104))
          IsValueInArrayInDictionary = 0;
        else
          IsValueInArrayInDictionary = FigSignalErrorAt();
        v14 = 1;
      }
    }
    else
    {
      v14 = 0;
    }
    if (v10 != 1664495672 && v10 != 1664561208 && v10 != 1882599480)
    {
      IsValueInArrayInDictionary = FigSignalErrorAt();
      v14 = 1;
    }
    if (a5)
      *a5 = v14;
  }
  CFRelease(v12);
  return IsValueInArrayInDictionary;
}

uint64_t mv_CheckIfOtherMediaTypePlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, char *a4)
{
  FourCharCode MediaSubType;
  CFStringRef CFStringFrom4CC;
  CFStringRef v9;
  uint64_t IsValueInArrayInDictionary;
  char v11;
  __int16 v13;

  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (!CFStringFrom4CC)
    return FigSignalErrorAt();
  v9 = CFStringFrom4CC;
  v13 = 0;
  IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v13 + 1, &v13);
  if (!(_DWORD)IsValueInArrayInDictionary)
  {
    if ((_BYTE)v13)
    {
      v11 = 0;
      if (!HIBYTE(v13))
      {
        if (*(_DWORD *)(a1 + 104))
          IsValueInArrayInDictionary = 0;
        else
          IsValueInArrayInDictionary = FigSignalErrorAt();
        v11 = 1;
      }
    }
    else
    {
      v11 = 0;
    }
    if (a4)
      *a4 = v11;
  }
  CFRelease(v9);
  return IsValueInArrayInDictionary;
}

uint64_t FigMediaValidatorCreateInternal(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = malloc_type_calloc(1uLL, 0xE8uLL, 0x10E00405F25D67FuLL);
  if (v2 && (v3 = FigReentrantMutexCreate(), (v2[26] = v3) != 0))
  {
    v4 = 0;
    v2[8] = v2;
    *a1 = v2;
  }
  else
  {
    v4 = FigSignalErrorAt();
    if ((_DWORD)v4)
      free(v2);
  }
  return v4;
}

uint64_t FigMediaValidatorValidateAsyncInternal(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, unint64_t a6)
{
  CFDictionaryRef v12;
  _BOOL4 v13;
  _BOOL4 v14;
  const void *Value;
  uint64_t ValidationType;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  const void *v25[2];

  v25[0] = CFSTR("com.apple.coremedia.mediavalidator");
  v25[1] = 0;
  v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], v25, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a3
    || !a5
    || !(a2 | a6)
    || !CFDictionaryGetValue(a5, CFSTR("TrackTypes"))
    || (!CFDictionaryGetValue(a5, CFSTR("vide"))
      ? (v13 = CFDictionaryGetValue(a5, CFSTR("VideoCodecs")) != 0)
      : (v13 = 1),
        !CFDictionaryGetValue(a5, CFSTR("soun"))
      ? (v14 = CFDictionaryGetValue(a5, CFSTR("AudioCodecs")) != 0)
      : (v14 = 1),
        !v14 || !v13))
  {
    v21 = FigSignalErrorAt();
    if (!v12)
      return v21;
    goto LABEL_37;
  }
  Value = CFDictionaryGetValue(a5, CFSTR("DiskCacheURL"));
  if (Value)
    Value = CFRetain(Value);
  *(_QWORD *)(a1 + 48) = Value;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 176) = CFRetain(a5);
  if (a6)
    *(_QWORD *)(a1 + 56) = CFRetain((CFTypeRef)a6);
  ValidationType = mv_GetValidationType(a5, (int *)(a1 + 168));
  if (!(_DWORD)ValidationType)
  {
    if (a2)
      *(_QWORD *)a1 = CFRetain((CFTypeRef)a2);
    v17 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("RefMovieSecurityPolicy"));
    if (v17
      && ((v18 = v17, v19 = CFGetTypeID(v17), v19 != CFNumberGetTypeID())
       || !CFNumberGetValue(v18, kCFNumberSInt32Type, (void *)(a1 + 184)))
      || (*(_QWORD *)(a1 + 72) = CFDictionaryGetValue(a5, CFSTR("VideoTrackPresent")),
          v20 = FigSemaphoreCreate(),
          (*(_QWORD *)(a1 + 216) = v20) == 0))
    {
LABEL_25:
      v21 = FigSignalErrorAt();
      if (!(_DWORD)v21)
        goto LABEL_36;
      goto LABEL_26;
    }
    ValidationType = FigThreadCreate();
    if (!(_DWORD)ValidationType)
    {
      if (!FigSemaphoreWaitRelative())
      {
        v21 = 0;
        goto LABEL_36;
      }
      goto LABEL_25;
    }
  }
  v21 = ValidationType;
LABEL_26:
  if (*(_QWORD *)(a1 + 216))
    FigSemaphoreDestroy();
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v22 = *(const void **)(a1 + 176);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v23 = *(const void **)(a1 + 56);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 56) = 0;
    if (!v12)
      return v21;
    goto LABEL_37;
  }
LABEL_36:
  if (v12)
LABEL_37:
    CFRelease(v12);
  return v21;
}

uint64_t FigMediaValidatorCreateSync(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  v3 = 0;
  result = FigMediaValidatorCreateInternal(&v3);
  *a1 = v3;
  return result;
}

uint64_t FigMediaValidatorValidateURL(uint64_t a1, unint64_t a2, const __CFDictionary *a3, _DWORD *a4, _OWORD *a5)
{
  uint64_t v6;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (!a1)
    return 4294954511;
  if (*(_QWORD *)(a1 + 200) || *(_BYTE *)(a1 + 44) || *(_DWORD *)(a1 + 40))
    return 4294954342;
  v12 = 0;
  v13 = 0uLL;
  v14 = FigSemaphoreCreate();
  v6 = FigMediaValidatorValidateAsyncInternal(a1, a2, (uint64_t)completeSync, (uint64_t)&v12, a3, 0);
  if (!(_DWORD)v6)
  {
    FigSemaphoreWaitRelative();
    v6 = v12;
    *a4 = HIDWORD(v12);
    *a5 = v13;
  }
  FigSemaphoreDestroy();
  return v6;
}

uint64_t completeSync(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a4;
  *(_QWORD *)(a2 + 8) = a5;
  *(_QWORD *)(a2 + 16) = a6;
  return FigSemaphoreSignal();
}

uint64_t FigMediaValidatorCreateWithByteStream(unint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  void *v15;

  v15 = 0;
  v10 = FigMediaValidatorCreateInternal(&v15);
  v11 = v10;
  v12 = v15;
  if (v15)
    v13 = (_DWORD)v10 == 0;
  else
    v13 = 0;
  if (v13)
  {
    v11 = FigMediaValidatorValidateAsyncInternal((uint64_t)v15, 0, a2, a3, a4, a1);
    if ((_DWORD)v11)
      free(v12);
    else
      *a5 = v12;
  }
  return v11;
}

uint64_t FigMediaValidatorGetStatus(uint64_t a1, float *a2)
{
  float v2;
  uint64_t result;

  if (!a1)
    return 4294954511;
  v2 = 1.0;
  if (!*(_BYTE *)(a1 + 44))
  {
    v2 = 0.3;
    if (!*(_QWORD *)(a1 + 80))
      v2 = 0.0;
  }
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t FigMediaValidatorValidateRFC4281ExtendedMIMEType(const __CFString *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = mv_validateRFC4281ExtendedMIMETypeAndCopyStandardMIMEType(a1, a2, a3, 0, &cf);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t mv_validateRFC4281ExtendedMIMETypeAndCopyStandardMIMEType(const __CFString *a1, const __CFArray *a2, const __CFDictionary *a3, int a4, CFTypeRef *a5)
{
  char *v5;
  unint64_t Length;
  CFIndex v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  const __CFAllocator *v21;
  CFStringRef v22;
  const __CFString *v23;
  unint64_t v24;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  const __CFString *v33;
  char v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  CFRange v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFAllocator *alloc;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  CFRange v48;

  v5 = 0;
  if (a1)
  {
    if (a2)
    {
      Length = CFStringGetLength(a1);
      v5 = (char *)malloc_type_calloc(Length + 1, 1uLL, 0x100004077774924uLL);
      if (v5)
      {
        if (CFStringGetCString(a1, v5, Length + 1, 0x8000100u))
        {
          v12 = 0;
          if (Length)
          {
            v13 = MEMORY[0x1E0C80978];
            do
            {
              v14 = v5[v12];
              if ((v14 & 0x80000000) != 0)
              {
                if (!__maskrune(v14, 0x4000uLL))
                  goto LABEL_13;
              }
              else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
              {
                goto LABEL_13;
              }
              ++v12;
            }
            while (Length != v12);
            goto LABEL_35;
          }
LABEL_13:
          if (v12 != Length)
          {
            v45 = a4;
            v15 = 0;
            v16 = &v5[v12];
            do
            {
              v17 = v15;
              if (v12 + v15 + 1 >= Length)
                break;
              v18 = v16[v15 + 1];
              v19 = (v18 & 0x80000000) != 0
                  ? __maskrune(v16[v15 + 1], 0x4000uLL)
                  : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18 + 60) & 0x4000;
              v15 = v17 + 1;
            }
            while (v18 != 59 && v19 == 0);
            v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v48.length = v17 + 1;
            v48.location = v12;
            v22 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v48);
            if (v22)
            {
              v23 = v22;
              if (a5)
                *a5 = CFRetain(v22);
              if (mv_IsStringInCFArrayList(v23, a2))
              {
                alloc = v21;
                v24 = v12 + v17 + 2;
                if (v24 >= Length)
                {
                  v25 = 0;
                }
                else
                {
                  v25 = 0;
                  do
                  {
                    v26 = v5[v24];
                    if (v26 == 42)
                    {
                      v25 = 1;
                    }
                    else if (v26 == 61)
                    {
                      goto LABEL_39;
                    }
                    ++v24;
                  }
                  while (v24 < Length);
                  v24 = Length;
                }
LABEL_39:
                v29 = v24 + 1;
                while (1)
                {
                  v30 = v29;
                  if (v29 >= Length)
                    break;
                  v31 = v5[v29];
                  if ((v31 & 0x80000000) != 0)
                    v32 = __maskrune(v31, 0x4000uLL);
                  else
                    v32 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v31 + 60) & 0x4000;
                  v29 = v30 + 1;
                  if (!v32)
                  {
                    if (v25)
                    {
                      v33 = v23;
                      v46 = 0;
                      v43 = 0;
                      v44 = 0;
                      v34 = 0;
                      v35 = v30;
                      while (1)
                      {
                        v36 = v5[v35];
                        if ((v36 & 0x80000000) != 0)
                        {
                          if (__maskrune(v5[v35], 0x4000uLL))
                            goto LABEL_60;
                        }
                        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x4000) != 0)
                        {
                          goto LABEL_60;
                        }
                        if (v36 == 39)
                        {
                          v37 = v46;
                          if (v44)
                            v37 = 1;
                          v46 = v37;
                          v44 = 1;
                        }
                        else if (v36 == 34)
                        {
                          if (v43)
                          {
                            v34 = 1;
                            goto LABEL_66;
                          }
                          v30 = v35 + 1;
                          v43 = 1;
                        }
                        else if (v34 == 0 && v46 != 0)
                        {
                          v34 = 1;
                          v30 = v35;
                        }
LABEL_60:
                        if (++v35 >= Length)
                          goto LABEL_65;
                      }
                    }
LABEL_64:
                    v33 = v23;
                    v34 = 1;
LABEL_65:
                    v35 = Length;
LABEL_66:
                    v27 = 0;
                    if (v34 && v30 < Length)
                    {
                      v39.length = v35 - v30;
                      v38 = v35 > v30;
                      v23 = v33;
                      if (v38)
                      {
                        v39.location = v30;
                        v40 = CFStringCreateWithSubstring(alloc, a1, v39);
                        if (v40)
                        {
                          v41 = v40;
                          v47 = 0;
                          v27 = FigMediaValidatorValidateRFC4281Codecs(v33, v40, v25, a3, v45, &v47);
                          CFRelease(v41);
                        }
                        else
                        {
                          v27 = 4294954344;
                        }
                      }
                    }
                    else
                    {
                      v23 = v33;
                    }
                    goto LABEL_74;
                  }
                }
                if (!v25)
                  goto LABEL_64;
                v27 = 0;
LABEL_74:
                free(v5);
              }
              else
              {
                free(v5);
                v27 = 4294954344;
              }
              CFRelease(v23);
              return v27;
            }
          }
        }
      }
    }
  }
LABEL_35:
  free(v5);
  return 4294954344;
}

uint64_t FigMediaValidatorValidateRFC4281ExtendedMIMETypeForStreaming(const __CFString *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  return mv_validateRFC4281ExtendedMIMETypeAndCopyStandardMIMEType(a1, a2, a3, 1, 0);
}

uint64_t FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(CFStringRef theString, const __CFDictionary *a2, _DWORD *a3, const __CFDictionary **a4)
{
  CFIndex v8;
  char *v9;
  char *v10;
  char *v11;
  CFAllocatorRef *v12;
  const __CFDictionary *Mutable;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  char v18;
  int v19;
  char *v20;
  const __CFDictionary *v21;
  signed int v22;
  char v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  int v30;
  const __CFDictionary *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  const __CFDictionary *v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  const __CFString *v39;
  const void *Value;
  CFMutableArrayRef v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  _DWORD v47[3];
  CFAllocatorRef allocator;
  const __CFDictionary **v49;
  void *v50;
  int v51;
  char *__stringp;
  int v53;
  char *v54;
  char v55;
  uint64_t v56;

  v51 = 1;
  if (FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_onceToken == -1)
  {
    if (!a2)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_onceToken, &__block_literal_global_48);
    if (!a2)
      goto LABEL_4;
  }
  if (mv_GetValidationType(a2, &v51))
    return FigSignalErrorAt();
LABEL_4:
  if (!theString)
    return FigSignalErrorAt();
  v8 = CFStringGetLength(theString) + 1;
  v9 = (char *)malloc_type_malloc(v8, 0x65F103C6uLL);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  if (!CFStringGetCString(theString, v9, v8, 0x600u))
  {
    v27 = FigSignalErrorAt();
    goto LABEL_191;
  }
  __stringp = v10;
  if (*v10 == 34)
  {
    __stringp = v10 + 1;
    v11 = strchr(v10 + 1, 34);
    if (!v11 || !*v11)
    {
      v27 = 4294954344;
      goto LABEL_191;
    }
    *v11 = 0;
  }
  v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a4)
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  else
    Mutable = 0;
  v49 = a4;
  v50 = v10;
  if (a3)
    *a3 = 0;
  v14 = MEMORY[0x1E0C80978];
  allocator = *v12;
  qmemcpy(v47, "tcaarcaamcaa", sizeof(v47));
  do
  {
    v15 = strsep(&__stringp, ",");
    v16 = v15;
    v17 = v51;
    if (FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_enableRefactoring)
    {
      v18 = *v15;
      if (*v15)
      {
        do
        {
          if (v18 < 0)
          {
            if (!__maskrune(v18, 0x4000uLL))
              break;
          }
          else if ((*(_DWORD *)(v14 + 4 * v18 + 60) & 0x4000) == 0)
          {
            break;
          }
          v19 = *++v16;
          v18 = v19;
        }
        while (v19);
      }
      v54 = v16;
      if (*v16)
      {
        v20 = strsep(&v54, ".");
        v21 = a2;
        if (a2)
        {
          v21 = a2;
          if (v17 == 2)
          {
            if (mv_IsPlistRequiredforRFC4281IdValidation(a2, v20))
              v21 = a2;
            else
              v21 = 0;
          }
        }
        if (strlen(v20) == 4)
          v22 = bswap32(*(_DWORD *)v20);
        else
          v22 = 0;
        v26 = mv_ValidateRFC4281IdEvaluationFn(v22, (uint64_t)v54, 2, 1u, v21, a3, Mutable);
      }
      else
      {
LABEL_39:
        v26 = FigSignalErrorAt();
      }
      v27 = v26;
      goto LABEL_43;
    }
    v54 = v15;
    v53 = 0;
    v23 = *v15;
    if (!*v15)
      goto LABEL_39;
    v24 = v15 + 1;
    while ((v23 & 0x80) == 0)
    {
      if ((*(_DWORD *)(v14 + 4 * v23 + 60) & 0x4000) == 0)
        goto LABEL_46;
LABEL_38:
      v54 = v24;
      v25 = *v24++;
      v23 = v25;
      if (!v25)
        goto LABEL_39;
    }
    if (__maskrune(v23, 0x4000uLL))
      goto LABEL_38;
LABEL_46:
    if (!*(v24 - 1))
      goto LABEL_39;
    v28 = strsep(&v54, ".");
    v27 = (uint64_t)a2;
    if (a2)
    {
      v27 = (uint64_t)a2;
      if (v17 == 2)
      {
        if (mv_IsPlistRequiredforRFC4281IdValidation(a2, v28))
          v27 = (uint64_t)a2;
        else
          v27 = 0;
      }
    }
    if (!strcmp("mp4a", v28))
    {
      if (!v54)
        goto LABEL_108;
      v56 = 0;
      v55 = 0;
      if (sscanf(v54, "%x.%d%c", (char *)&v56 + 4, &v56, &v55) != 2)
        goto LABEL_123;
      if (HIDWORD(v56) == 64)
      {
        switch((int)v56)
        {
          case 29:
LABEL_94:
            v31 = (const __CFDictionary *)v27;
            v32 = 1633772320;
            goto LABEL_121;
          case 30:
          case 31:
          case 35:
          case 36:
          case 37:
          case 38:
          case 40:
          case 41:
            goto LABEL_108;
          case 32:
            v31 = (const __CFDictionary *)v27;
            v32 = 778924081;
            goto LABEL_121;
          case 33:
            v32 = 778924082;
            goto LABEL_116;
          case 34:
            v32 = 778924083;
            goto LABEL_116;
          case 39:
            v37 = 69;
            goto LABEL_115;
          case 42:
            v31 = (const __CFDictionary *)v27;
            v32 = 1970495843;
            goto LABEL_121;
          default:
            switch((int)v56)
            {
              case 1:
                v31 = (const __CFDictionary *)v27;
                v32 = v47[2];
                goto LABEL_121;
              case 2:
              case 5:
                goto LABEL_94;
              case 3:
                v31 = (const __CFDictionary *)v27;
                v32 = v47[1];
                goto LABEL_121;
              case 4:
                v31 = (const __CFDictionary *)v27;
                v32 = v47[0];
                goto LABEL_121;
              default:
                if ((_DWORD)v56 != 23)
                  goto LABEL_108;
                v37 = 76;
                break;
            }
LABEL_115:
            v32 = v37 | 0x61616320;
LABEL_116:
            v31 = (const __CFDictionary *)v27;
LABEL_121:
            v38 = mv_ValidateRFC4281AudioFromCodecType(v31, v32);
            break;
        }
      }
      else
      {
LABEL_108:
        v38 = FigSignalErrorAt();
      }
      v27 = v38;
      if ((_DWORD)v38)
      {
LABEL_128:
        v29 = 0;
        goto LABEL_129;
      }
LABEL_123:
      v56 = 0;
      v55 = 0;
      if (!v54)
        goto LABEL_39;
      if (sscanf(v54, "%x.%d%c", (char *)&v56 + 4, &v56, &v55) == 2)
      {
        if (HIDWORD(v56) == 64)
          v27 = 0;
        else
          v27 = FigSignalErrorAt();
        v29 = 0;
        if ((int)v56 <= 28)
        {
          switch((_DWORD)v56)
          {
            case 2:
              v29 = 1633772320;
              break;
            case 5:
              v29 = 1633772392;
              break;
            case 0x17:
              v42 = 76;
LABEL_154:
              v29 = v42 | 0x61616320;
              break;
          }
        }
        else
        {
          switch((int)v56)
          {
            case 29:
              v42 = 80;
              goto LABEL_154;
            case 32:
              v29 = 778924081;
              break;
            case 33:
              v29 = 778924082;
              break;
            case 34:
              v29 = 778924083;
              break;
            case 39:
              v42 = 69;
              goto LABEL_154;
            case 42:
              v29 = 1970495843;
              break;
            default:
              goto LABEL_129;
          }
        }
        goto LABEL_129;
      }
      v27 = 0;
      goto LABEL_128;
    }
    if (!strcmp("avc1", v28) || !strcmp("avc3", v28))
    {
      if (v27)
        v27 = mv_ValidateRFC4281_avc1_avc3(v54, (const __CFDictionary *)v27);
      v29 = bswap32(*(_DWORD *)v28);
      goto LABEL_78;
    }
    if (!strcmp("hvc1", v28) || !strcmp("hev1", v28))
    {
      if (v27)
      {
        v33 = mv_ValidateRFC4281_hvc1_hev1(v54, (const __CFDictionary *)v27, &v53);
LABEL_86:
        if (v33 == -16055)
          v27 = 4294954341;
        else
          v27 = v33;
      }
      if (v53 == 1)
        v30 = 26;
      else
        v30 = 18;
      v29 = bswap32(*(_DWORD *)v28);
      goto LABEL_130;
    }
    if (!strcmp("av01", v28))
    {
      v29 = 1635135537;
      v34 = mv_ValidateRFC4281_av01(v54, (const __CFDictionary *)v27, &v53);
LABEL_96:
      if (v34 == -16055)
        v27 = 4294954341;
      else
        v27 = v34;
      if (v53)
      {
        if (v53 == 1)
          v30 = 26;
        else
          v30 = 18;
        goto LABEL_130;
      }
LABEL_78:
      v30 = 2;
      goto LABEL_130;
    }
    if (!strcmp("ac-3", v28))
    {
      v29 = 1633889587;
      if (v27)
      {
        v35 = (const __CFDictionary *)v27;
        v36 = 1633889587;
        goto LABEL_162;
      }
LABEL_129:
      v30 = 1;
      goto LABEL_130;
    }
    if (!strcmp("ec-3", v28))
    {
      v29 = 1700998451;
      if (!v27)
        goto LABEL_129;
      v35 = (const __CFDictionary *)v27;
      v36 = 1700998451;
      goto LABEL_162;
    }
    if (!strcmp("fLaC", v28))
    {
      v29 = 1718378851;
      if (!v27)
        goto LABEL_129;
      v35 = (const __CFDictionary *)v27;
      v36 = 1718378851;
      goto LABEL_162;
    }
    if (!strcmp("Opus", v28))
    {
      v29 = 1869641075;
      if (!v27)
        goto LABEL_129;
      v35 = (const __CFDictionary *)v27;
      v36 = 1869641075;
LABEL_162:
      v43 = mv_ValidateRFC4281AudioFromCodecType(v35, v36);
LABEL_163:
      v27 = v43;
      goto LABEL_129;
    }
    if (!strcmp("alac", v28))
    {
      v29 = 1634492771;
      if (!v27)
        goto LABEL_129;
      v35 = (const __CFDictionary *)v27;
      v36 = 1634492771;
      goto LABEL_162;
    }
    if (!strcmp("apac", v28))
    {
      v29 = 1634754915;
      v43 = mv_ValidateRFC4281_apac(0x61706163u, (uint64_t)v54);
      goto LABEL_163;
    }
    if (!strcmp("wvtt", v28))
    {
      v27 = 0;
      v30 = 0;
      v29 = 2004251764;
      goto LABEL_130;
    }
    if (!strcmp("xvtt", v28))
    {
      v27 = (uint64_t)mv_ValidateRFC4281_xvtt(v54);
      v30 = 0;
      v29 = 2021028980;
      goto LABEL_130;
    }
    if (!strcmp("stpp", v28))
    {
      v27 = mv_ValidateRFC4281_ttml(v54);
      v30 = 0;
      v29 = 1937010800;
      goto LABEL_130;
    }
    if (!strcmp("dvhe", v28) || !strcmp("dvh1", v28))
    {
      v33 = mv_ValidateRFC4281_dvhe_dvh1(v54, (const __CFDictionary *)v27, &v53);
      goto LABEL_86;
    }
    if (!strcmp("dav1", v28))
    {
      v29 = 1684108849;
      v34 = mv_ValidateRFC4281_dav1(v54, (const __CFDictionary *)v27, &v53);
      goto LABEL_96;
    }
    if (!strcmp("vp09", v28))
    {
      if (v27)
      {
        v44 = mv_ValidateRFC4281_vp9(v54, (const __CFDictionary *)v27, (_BOOL4 *)&v53);
        if (v44 == -16055)
          v27 = 4294954341;
        else
          v27 = v44;
      }
      if (v53 == 1)
        v30 = 26;
      else
        v30 = 18;
      v29 = 1987063865;
      goto LABEL_130;
    }
    v29 = 1785750887;
    if (!strcmp("jpeg", v28) || !strcmp("mjpg", v28))
      goto LABEL_184;
    if (strcmp("mp4v", v28))
      goto LABEL_74;
    HIDWORD(v56) = 0;
    LOBYTE(v56) = 0;
    if (!v54)
      goto LABEL_39;
    v45 = sscanf(v54, "%x%c", (char *)&v56 + 4, &v56);
    if (HIDWORD(v56) == 108)
    {
      if (v45 != 1)
        goto LABEL_39;
LABEL_184:
      v27 = 0;
      goto LABEL_78;
    }
    if (HIDWORD(v56) == 32)
    {
      if (v45 != 2)
        goto LABEL_39;
LABEL_74:
      v27 = 0;
      v29 = 0;
      v30 = 4;
    }
    else
    {
      v27 = FigSignalErrorAt();
      v30 = 0;
      v29 = 0;
    }
LABEL_130:
    if (a3)
      *a3 |= v30;
    if (Mutable)
    {
      v39 = CFSTR("soun");
      if ((v30 & 1) != 0 || (v39 = CFSTR("vide"), (v30 & 2) != 0))
      {
        if (CFDictionaryContainsKey(Mutable, v39))
        {
          Value = CFDictionaryGetValue(Mutable, v39);
          if (!Value)
            goto LABEL_43;
        }
        else
        {
          v41 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          if (!v41)
            goto LABEL_43;
          Value = v41;
          CFDictionarySetValue(Mutable, v39, v41);
          CFRelease(Value);
        }
        if (!mv_IsIntInCFArray(v29, (const __CFArray *)Value))
          FigCFArrayAppendInt32();
      }
    }
LABEL_43:
    if ((_DWORD)v27)
      goto LABEL_188;
  }
  while (__stringp);
  if (v49)
  {
    v27 = 0;
    *v49 = Mutable;
    goto LABEL_190;
  }
LABEL_188:
  if (Mutable)
    CFRelease(Mutable);
LABEL_190:
  v10 = (char *)v50;
LABEL_191:
  free(v10);
  return v27;
}

uint64_t FigMediaValidatorValidateRFC4281CodecsForStreaming(const __CFString *a1, const __CFDictionary *a2, _DWORD *a3)
{
  return FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(a1, a2, a3, 0);
}

uint64_t FigCopySetOfAudioSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  CFMutableSetRef Mutable;
  __CFSet *v4;
  const void **v5;
  __CFString ***v6;
  const void **v7;

  if (!a2)
    return FigSignalErrorAt();
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0CA3678]);
  if (!Mutable)
    return FigSignalErrorAt();
  v4 = Mutable;
  v5 = (const void **)audioMimeTypes[0];
  if (audioMimeTypes[0])
  {
    v6 = off_1EE2878A0;
    do
    {
      CFSetAddValue(v4, *v5);
      v7 = (const void **)*v6++;
      v5 = v7;
    }
    while (v7);
  }
  *a2 = v4;
  return 0;
}

uint64_t FigCopySetOfPlaylistSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  CFMutableSetRef Mutable;
  __CFSet *v4;
  const void **v5;
  __CFString ***v6;
  const void **v7;

  if (!a2)
    return FigSignalErrorAt();
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0CA3678]);
  if (!Mutable)
    return FigSignalErrorAt();
  v4 = Mutable;
  v5 = (const void **)streamingMimeType[0];
  if (streamingMimeType[0])
  {
    v6 = off_1EE287930;
    do
    {
      CFSetAddValue(v4, *v5);
      v7 = (const void **)*v6++;
      v5 = v7;
    }
    while (v7);
  }
  *a2 = v4;
  return 0;
}

uint64_t FigCopySetOfStreamingSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  CFMutableSetRef Mutable;
  __CFSet *v4;
  const void **v5;
  __CFString ***v6;
  const void **v7;
  const void **v8;
  __CFString ***v9;
  const void **v10;

  if (!a2)
    return FigSignalErrorAt();
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0CA3678]);
  if (!Mutable)
    return FigSignalErrorAt();
  v4 = Mutable;
  v5 = (const void **)streamingMimeType[0];
  if (streamingMimeType[0])
  {
    v6 = off_1EE287930;
    do
    {
      CFSetAddValue(v4, *v5);
      v7 = (const void **)*v6++;
      v5 = v7;
    }
    while (v7);
  }
  v8 = (const void **)audioMimeTypes[0];
  if (audioMimeTypes[0])
  {
    v9 = off_1EE2878A0;
    do
    {
      CFSetAddValue(v4, *v8);
      v10 = (const void **)*v9++;
      v8 = v10;
    }
    while (v10);
  }
  *a2 = v4;
  return 0;
}

uint64_t FigCopySetOfStreamingSupportedUTIs(const __CFAllocator *a1, __CFSet **a2)
{
  CFMutableSetRef Mutable;
  __CFSet *v4;
  uint64_t i;
  const void **v6;
  __CFString ***v7;
  const void **v8;

  if (!a2)
    return FigSignalErrorAt();
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0CA3678]);
  if (!Mutable)
    return FigSignalErrorAt();
  v4 = Mutable;
  for (i = 0; i != 2; ++i)
    CFSetAddValue(v4, *streamingUTIs[i]);
  v6 = (const void **)audioUTIs[0];
  if (audioUTIs[0])
  {
    v7 = &off_1EE2878F8;
    do
    {
      CFSetAddValue(v4, *v6);
      v8 = (const void **)*v7++;
      v6 = v8;
    }
    while (v8);
  }
  *a2 = v4;
  return 0;
}

const __CFDictionary *FigMediaValidatorGetMaxFrameRate(const __CFDictionary *result)
{
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("MaxFrameRate"));
  return result;
}

uint64_t FigMediaValidatorCreateMediaValidatorPropertyList(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = MEMORY[0x19402DAA0](*MEMORY[0x1E0C9AE00], CFSTR("com.apple.MediaToolbox"), a1);
  return 0;
}

uint64_t mv_CheckIfFormatReaderIsSupported(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const __CFArray *v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, void **);
  int v7;
  void *value;
  CFRange v9;

  result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), CFSTR("AllowedFormatReaders"));
  if (result)
  {
    v4 = (const __CFArray *)result;
    value = 0;
    FigBaseObject = FigFormatReaderGetFigBaseObject(a2);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v6)
    {
      result = v6(FigBaseObject, CFSTR("Identifier"), *MEMORY[0x1E0C9AE00], &value);
      if (!(_DWORD)result)
      {
        v9.length = CFArrayGetCount(v4);
        v9.location = 0;
        v7 = CFArrayContainsValue(v4, v9, value);
        if (value)
          CFRelease(value);
        if (v7)
          return 0;
        else
          return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t mv_CheckIfMatrixIsSupported(const void *a1, CFArrayRef theArray)
{
  CFIndex v4;
  __int128 *v5;
  const __CFNumber *ValueAtIndex;
  int v7;
  int v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  _BOOL4 v14;
  int v18;
  __int128 v19;
  __int128 v20;
  float v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21 = 0.0;
  v19 = 0u;
  v20 = 0u;
  if (CFArrayGetCount(theArray) != 9)
    return 4294954344;
  v4 = 0;
  v5 = &v19;
  do
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v4);
    CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, v5);
    ++v4;
    v5 = (__int128 *)((char *)v5 + 4);
  }
  while (v4 != 9);
  v7 = 8;
  if (*((float *)&v19 + 2) == 0.0 && *((float *)&v20 + 1) == 0.0 && v21 == 1.0)
  {
    v9 = *((float *)&v20 + 2) != 0.0;
    if (*((float *)&v20 + 3) != 0.0)
      v9 = 1;
    v10 = *((float *)&v19 + 1);
    if (*(float *)&v19 == 0.0)
    {
      v12 = *((float *)&v19 + 3);
      v11 = *(float *)&v20;
      v13 = *((float *)&v19 + 1) == 1.0 && *((float *)&v19 + 3) == -1.0;
      if (v13 && *(float *)&v20 == 0.0)
        goto LABEL_29;
      if (*((float *)&v19 + 1) == -1.0)
      {
        v14 = 0;
        v10 = -1.0;
        if (*((float *)&v19 + 3) != 1.0 || *(float *)&v20 != 0.0)
          goto LABEL_35;
        goto LABEL_29;
      }
    }
    else
    {
      v12 = *((float *)&v19 + 3);
      v11 = *(float *)&v20;
    }
    v14 = *((float *)&v19 + 1) == 0.0;
    if (*(float *)&v19 != -1.0 || *((float *)&v19 + 1) != 0.0 || v11 != -1.0 || v12 != 0.0)
    {
      if (*(float *)&v19 != 0.0)
        goto LABEL_37;
      if (*((float *)&v19 + 1) > 0.0 && v12 < 0.0 && v11 == 0.0)
      {
LABEL_41:
        if (*(float *)&v19 != v11 || v10 != (float)-v12)
          v9 |= 0x20u;
        v7 = v9 | 0x50;
        goto LABEL_63;
      }
      if (*((float *)&v19 + 1) >= 0.0)
        goto LABEL_37;
LABEL_35:
      if (v12 <= 0.0 || v11 != 0.0)
      {
LABEL_37:
        if (*(float *)&v19 >= 0.0 || !v14 || v11 >= 0.0 || v12 != 0.0)
        {
          if (v10 == 0.0 && v12 == 0.0)
          {
            if (*(float *)&v19 != v11)
              v9 |= 0x20u;
            if (*(float *)&v19 <= 0.0 || v11 <= 0.0 || *(float *)&v19 == 1.0 && v11 == 1.0)
            {
              if (v11 == 1.0 && *(float *)&v19 == 1.0)
                v7 = v9;
              else
                v7 = v9 | 2;
            }
            else
            {
              v7 = v9 | 0x10;
            }
          }
          else
          {
            v7 = v9 | 4;
          }
          goto LABEL_63;
        }
        goto LABEL_41;
      }
      goto LABEL_41;
    }
LABEL_29:
    v7 = v9 | 0x40;
  }
LABEL_63:
  if (CFEqual(a1, CFSTR("Identity")))
  {
    v18 = -1;
  }
  else if (CFEqual(a1, CFSTR("UprightUniformScale")))
  {
    v18 = -18;
  }
  else if (CFEqual(a1, CFSTR("UprightScale")))
  {
    v18 = -50;
  }
  else if (CFEqual(a1, CFSTR("Scale")))
  {
    v18 = -52;
  }
  else if (CFEqual(a1, CFSTR("OrthogonalRotationAndUniformScale")))
  {
    v18 = -82;
  }
  else if (CFEqual(a1, CFSTR("OrthogonalRotationAndUprightScale")))
  {
    v18 = -114;
  }
  else if (CFEqual(a1, CFSTR("OrthogonalRotationAndScale")))
  {
    v18 = -116;
  }
  else if (CFEqual(a1, CFSTR("OrthogonalRotation")))
  {
    v18 = -66;
  }
  else if (CFEqual(a1, CFSTR("Linear")))
  {
    v18 = -120;
  }
  else
  {
    v18 = -1;
  }
  if ((v18 & v7) != 0)
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t mv_ValidateTrackWithTrackReader(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t (*v12)(uint64_t, int *, int *);
  uint64_t v13;
  BOOL v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD, int **);
  int *v17;
  void (*v18)(int *, CFArrayRef *, CFTypeRef *);
  uint64_t v19;
  CFTypeRef v20;
  unsigned int (*v21)(CFTypeRef, CFArrayRef *);
  CFTypeRef v22;
  unsigned int (*v23)(CFTypeRef, uint64_t);
  void *CFStringFrom4CC;
  int TrackBoolean;
  unsigned int v26;
  CFArrayRef v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t IsValueInArrayInDictionary;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  uint64_t v37;
  const __CFArray *v38;
  CFIndex v39;
  char v40;
  const opaqueCMFormatDescription *v41;
  const __CFArray *v42;
  const __CFArray *v44;
  CFIndex v45;
  char v46;
  const opaqueCMFormatDescription *v47;
  const __CFArray *v48;
  CFIndex v49;
  const opaqueCMFormatDescription *v50;
  CFIndex v51;
  const opaqueCMFormatDescription *v52;
  const __CFArray *v53;
  CFIndex v54;
  const opaqueCMFormatDescription *ValueAtIndex;
  uint64_t v56;
  uint64_t v57;
  int v58;
  CFArrayRef v59;
  __int16 v60;
  int v61;
  int v62;
  Boolean v63;
  CFArrayRef theArray[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  CFTypeRef v70;
  int *v71;

  v63 = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v59 = 0;
  v12 = *(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v12)
  {
    CFStringFrom4CC = 0;
    goto LABEL_70;
  }
  v13 = v12(a3, &v61, &v62);
  if ((_DWORD)v13)
    v14 = 1;
  else
    v14 = v62 == 1751740020;
  if (v14)
  {
LABEL_40:
    v30 = v13;
    goto LABEL_41;
  }
  if (a4)
    goto LABEL_28;
  v70 = 0;
  v71 = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
  v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, int **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v16)
  {
    v16(FigBaseObject, CFSTR("EditCursorService"), *MEMORY[0x1E0C9AE00], &v71);
    v17 = v71;
    if (!v71)
    {
      v19 = 0;
      goto LABEL_25;
    }
    v18 = *(void (**)(int *, CFArrayRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v18)
    {
      *(_OWORD *)theArray = *MEMORY[0x1E0CA2E28];
      *(_QWORD *)&v65 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
      v18(v17, theArray, &v70);
      if (v70)
      {
        v19 = 0;
        while (1)
        {
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          *(_OWORD *)theArray = 0u;
          v65 = 0u;
          v20 = v70;
          v21 = *(unsigned int (**)(CFTypeRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v21 && !v21(v20, theArray) && (BYTE4(theArray[1]) & 1) != 0)
          {
            if (v19 > 0)
            {
              v19 = 2;
              goto LABEL_22;
            }
            ++v19;
          }
          v22 = v70;
          v23 = *(unsigned int (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (!v23 || v23(v22, 1))
            goto LABEL_22;
        }
      }
    }
  }
  v19 = 0;
LABEL_22:
  if (v71)
  {
    CFRelease(v71);
    v71 = 0;
  }
LABEL_25:
  if (v70)
    CFRelease(v70);
  if (v19 >= 2)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_40;
  }
LABEL_28:
  TrackBoolean = mv_GetTrackBoolean(a3, (uint64_t)CFSTR("TrackEnabled"), 1);
  if (!TrackBoolean && !a5 && *(_DWORD *)(a1 + 104) == 1)
  {
    v30 = 0;
LABEL_41:
    CFStringFrom4CC = 0;
    goto LABEL_71;
  }
  v26 = v62;
  if (v62 == 1952807028)
  {
    theArray[0] = 0;
    v71 = 0;
    CFStringFrom4CC = 0;
    if (!FCSupport_GetListOfChapterTitleTrackIDs(a2, (uint64_t *)theArray, &v71, 0))
    {
      v27 = theArray[0];
      if ((uint64_t)theArray[0] < 1)
      {
LABEL_35:
        CFStringFrom4CC = 0;
      }
      else
      {
        v28 = v71;
        while (1)
        {
          v29 = *v28++;
          if (v29 == v61)
            break;
          v27 = (CFArrayRef)((char *)v27 - 1);
          if (!v27)
            goto LABEL_35;
        }
        CFStringFrom4CC = (void *)CFRetain(CFSTR("ChapterName"));
      }
    }
    if (v71)
      free(v71);
    if (CFStringFrom4CC)
      goto LABEL_48;
    v26 = v62;
  }
  CFStringFrom4CC = (void *)mv_CreateCFStringFrom4CC(v26);
  if (!CFStringFrom4CC)
    goto LABEL_87;
LABEL_48:
  IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, CFSTR("TrackTypes"), &v63, (_BYTE *)&v60 + 1);
  if ((_DWORD)IsValueInArrayInDictionary)
  {
LABEL_88:
    v30 = IsValueInArrayInDictionary;
    goto LABEL_71;
  }
  if (!HIBYTE(v60))
    goto LABEL_87;
  if (!v63 && (a5 || !*(_DWORD *)(a1 + 104)))
  {
    if (!CFEqual(CFStringFrom4CC, CFSTR("ChapterName")))
    {
      v30 = 4294954335;
      goto LABEL_71;
    }
    goto LABEL_87;
  }
  FigCFDictionaryGetBooleanIfPresent();
  v32 = mv_GetTrackBoolean(a3, (uint64_t)CFSTR("TrackIsSelfContained"), 1);
  v33 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!v32)
  {
LABEL_87:
    IsValueInArrayInDictionary = FigSignalErrorAt();
    goto LABEL_88;
  }
  v34 = FigTrackReaderGetFigBaseObject(a3);
  v35 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v35)
  {
LABEL_70:
    v30 = 4294954514;
    goto LABEL_71;
  }
  IsValueInArrayInDictionary = v35(v34, CFSTR("TrackFormatDescriptionArray"), *v33, &v59);
  if ((_DWORD)IsValueInArrayInDictionary)
    goto LABEL_88;
  if (!v59)
    goto LABEL_87;
  Count = CFArrayGetCount(v59);
  if (!Count)
    goto LABEL_87;
  v37 = Count;
  if (v62 <= 1936684397)
  {
    if (v62 == 1668047728)
    {
      v53 = v59;
      LOBYTE(theArray[0]) = 0;
      LOBYTE(v71) = 0;
      if (Count >= 1)
      {
        v54 = 0;
        v46 = 0;
        while (1)
        {
          ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v53, v54);
          IsValueInArrayInDictionary = mv_CheckIfClosedCaptionsPlayable(a1, CFStringFrom4CC, ValueAtIndex, (BOOL *)theArray, (char *)&v71);
          if ((_DWORD)IsValueInArrayInDictionary)
            goto LABEL_88;
          if ((_BYTE)v71)
            goto LABEL_134;
          if (LOBYTE(theArray[0]))
            v46 = 1;
          if (v37 == ++v54)
            goto LABEL_128;
        }
      }
      v46 = 0;
LABEL_128:
      if (!TrackBoolean)
        goto LABEL_134;
      v57 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v57 + 1;
    }
    else
    {
      if (v62 != 1935832172)
        goto LABEL_98;
      v44 = v59;
      LOBYTE(theArray[0]) = 0;
      LOBYTE(v71) = 0;
      if (Count >= 1)
      {
        v45 = 0;
        v46 = 0;
        while (1)
        {
          v47 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v44, v45);
          IsValueInArrayInDictionary = mv_CheckIfSubTitlesPlayable(a1, CFStringFrom4CC, v47, &v71, (char *)theArray);
          if ((_DWORD)IsValueInArrayInDictionary)
            goto LABEL_88;
          if (LOBYTE(theArray[0]))
            goto LABEL_134;
          if ((_BYTE)v71)
            v46 = 1;
          if (v37 == ++v45)
            goto LABEL_122;
        }
      }
      v46 = 0;
LABEL_122:
      if (!TrackBoolean)
        goto LABEL_134;
      v57 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v57 + 1;
    }
    if (v57 < 1 || *(_DWORD *)(a1 + 104))
    {
      v30 = 0;
      goto LABEL_133;
    }
    goto LABEL_87;
  }
  switch(v62)
  {
    case 1936684398:
      v48 = v59;
      LOBYTE(theArray[0]) = TrackBoolean;
      LOBYTE(v71) = 0;
      LOBYTE(v70) = 0;
      ++*(_QWORD *)(a1 + 64);
      if (Count >= 1)
      {
        v49 = 0;
        v46 = 0;
        while (1)
        {
          v50 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v48, v49);
          IsValueInArrayInDictionary = mv_CheckIfAudioPlayable(a1, CFStringFrom4CC, v50, theArray, &v71, (BOOL *)&v70);
          if ((_DWORD)IsValueInArrayInDictionary)
            goto LABEL_88;
          if ((_BYTE)v70)
            goto LABEL_134;
          if ((_BYTE)v71)
            v46 = 1;
          if (v37 == ++v49)
          {
            TrackBoolean = LOBYTE(theArray[0]);
            goto LABEL_125;
          }
        }
      }
      v46 = 0;
LABEL_125:
      if (!TrackBoolean)
        goto LABEL_134;
      v30 = 0;
      ++*(_QWORD *)(a1 + 72);
      *(_WORD *)(a1 + 41) = 257;
LABEL_133:
      *(_BYTE *)(a1 + 40) = v46;
      goto LABEL_71;
    case 1952807028:
      if (CFEqual(CFStringFrom4CC, CFSTR("ChapterName")))
        goto LABEL_134;
      break;
    case 1986618469:
      v58 = TrackBoolean;
      v38 = v59;
      LOBYTE(theArray[0]) = 0;
      LOBYTE(v71) = 0;
      ++*(_QWORD *)(a1 + 48);
      if (Count >= 1)
      {
        v39 = 0;
        v40 = 0;
        while (1)
        {
          v41 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v38, v39);
          IsValueInArrayInDictionary = mv_CheckIfVideoPresentable(a1, CFStringFrom4CC, v41, a2, a3, a6, theArray, (BOOL *)&v71);
          if ((_DWORD)IsValueInArrayInDictionary)
            goto LABEL_88;
          if ((_BYTE)v71)
            goto LABEL_134;
          if (LOBYTE(theArray[0]))
            v40 = 1;
          if (v37 == ++v39)
            goto LABEL_115;
        }
      }
      v40 = 0;
LABEL_115:
      if (v58)
      {
        v56 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v56 + 1;
        if (v56 < 1 || *(_DWORD *)(a1 + 104))
        {
          *(_BYTE *)(a1 + 42) = 1;
          if (!a6)
            *(_BYTE *)(a1 + 41) = 1;
          v30 = 0;
          *(_BYTE *)(a1 + 40) = v40;
LABEL_71:
          v42 = v59;
          if (!v59)
            goto LABEL_73;
          goto LABEL_72;
        }
        goto LABEL_87;
      }
LABEL_134:
      v30 = 0;
      goto LABEL_71;
  }
LABEL_98:
  v42 = v59;
  if (v37 >= 1)
  {
    v51 = 0;
    while (1)
    {
      LOBYTE(theArray[0]) = 0;
      v52 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v42, v51);
      IsValueInArrayInDictionary = mv_CheckIfOtherMediaTypePlayable(a1, CFStringFrom4CC, v52, (char *)theArray);
      if ((_DWORD)IsValueInArrayInDictionary)
        goto LABEL_88;
      if (v37 == ++v51)
        goto LABEL_134;
    }
  }
  v30 = 0;
  if (v59)
  {
LABEL_72:
    CFRelease(v42);
    v59 = 0;
  }
LABEL_73:
  if (CFStringFrom4CC)
    CFRelease(CFStringFrom4CC);
  return v30;
}

uint64_t mv_GetVideoProfileAndLevelConstraints(const __CFDictionary *a1, const void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  CFTypeID TypeID;
  uint64_t CodecProperty;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  CFTypeID v22;
  uint64_t v23;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;

  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  TypeID = CFArrayGetTypeID();
  CodecProperty = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("SupportedProfiles"), TypeID, &v30);
  if (!(_DWORD)CodecProperty)
  {
    if (v30
      || (v18 = CFNumberGetTypeID(),
          CodecProperty = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("MaxProfile"), v18, &v27),
          !(_DWORD)CodecProperty))
    {
      v19 = CFDictionaryGetTypeID();
      CodecProperty = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("PerProfileConstraints"), v19, &v28);
      if (!(_DWORD)CodecProperty)
      {
        v20 = CFArrayGetTypeID();
        CodecProperty = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("SupportedLevels"), v20, &v29);
        if (!(_DWORD)CodecProperty)
        {
          if (v29
            || (v21 = CFNumberGetTypeID(),
                CodecProperty = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("MaxLevel"), v21, &v26),
                !(_DWORD)CodecProperty))
          {
            v22 = CFNumberGetTypeID();
            CodecProperty = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("MaxTier"), v22, &v25);
          }
        }
      }
    }
  }
  v23 = CodecProperty;
  if (!(_DWORD)CodecProperty && !v27 && !v30)
    FigCFDictionaryGetBooleanIfPresent();
  if (a5)
    *a5 = v28;
  if (a3)
    *a3 = v30;
  if (a6)
    *a6 = v27;
  if (a4)
    *a4 = v29;
  if (a7)
    *a7 = v26;
  if (a8)
    *a8 = v25;
  return v23;
}

uint64_t mv_IsIntInCFArray(int a1, const __CFArray *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  uint64_t v5;
  int valuePtr;
  CFRange v8;

  valuePtr = a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (!v3)
    return 0;
  v4 = v3;
  v8.length = CFArrayGetCount(a2);
  v8.location = 0;
  v5 = CFArrayContainsValue(a2, v8, v4);
  CFRelease(v4);
  return v5;
}

uint64_t mv_isMovieFamilyFormatReader(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(FigBaseObject, CFSTR("Identifier"), *MEMORY[0x1E0C9AE00], &cf);
  v3 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v3;
}

BOOL mv_EvaluateProfileConstraints(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, double *a5)
{
  CFTypeID v10;
  uint64_t v11;
  CFStringRef v12;
  CFStringRef v13;
  const void *Value;
  CFTypeID v15;
  float v16;
  uint64_t FigBaseObject;
  void (*v18)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  _BOOL8 v19;
  float valuePtr;
  CFNumberRef number;
  int v23;

  v10 = CFGetTypeID(cf);
  if (v10 != CFDictionaryGetTypeID())
    return 1;
  v11 = *MEMORY[0x1E0C9AE00];
  v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), a1);
  if (!v12)
    return 1;
  v13 = v12;
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, v12);
  if (Value && (v23 = 0, v15 = CFGetTypeID(Value), v15 == CFDictionaryGetTypeID()))
  {
    if (!FigCFDictionaryGetInt32IfPresent())
      goto LABEL_12;
    number = 0;
    v16 = (double)v23 * 1000000.0;
    if (a5)
      *a5 = v16;
    FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
    v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v18 && (v18(FigBaseObject, CFSTR("EstimatedDataRate"), v11, &number), number))
    {
      valuePtr = 0.0;
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      v19 = (float)(valuePtr * 8.0) <= v16;
      if (number)
        CFRelease(number);
    }
    else
    {
LABEL_12:
      v19 = 1;
    }
    if (a4)
      FigCFDictionaryGetInt32IfPresent();
  }
  else
  {
    v19 = 1;
  }
  CFRelease(v13);
  return v19;
}

uint64_t mv_CheckIfDroppingFramesEnablesPlayability(uint64_t a1, double a2, double a3)
{
  _BOOL4 v7;
  _BOOL4 v8;
  CMTime v9;
  double v10;
  double v11;
  CMTime v12;

  memset(&v12, 0, sizeof(v12));
  CMTimeMake(&v12, 2, 1);
  if (a2 <= 0.0 && a3 <= 0.0)
    return 0;
  v10 = 0.0;
  v11 = 0.0;
  v9 = v12;
  if (mv_ComputeDroppableFrameRate(a1, &v9, -1, &v11, &v10))
    return 0;
  v7 = a3 > 0.0;
  v8 = a2 > 0.0;
  if (v11 > a2)
    v8 = 0;
  if (v10 > a3)
    v7 = 0;
  return v7 | v8;
}

uint64_t mv_ComputeDroppableFrameRate(uint64_t a1, CMTime *a2, int a3, double *a4, double *a5)
{
  uint64_t (*v10)(uint64_t, CFTypeRef *);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t FigBaseObject;
  unsigned int (*v20)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  BOOL v21;
  CFTypeID v22;
  _BOOL4 v23;
  CFTypeRef v24;
  uint64_t (*v25)(CFTypeRef, _QWORD, _QWORD, _QWORD, BOOL *);
  CFTypeRef v26;
  uint64_t (*v27)(CFTypeRef, CMTime *);
  CFTypeRef v28;
  uint64_t (*v29)(CFTypeRef, uint64_t, uint64_t *);
  int32_t v30;
  CFTypeRef v31;
  unsigned int (*v32)(CFTypeRef, _QWORD, CMTime *, _QWORD, _QWORD);
  uint64_t v33;
  double Seconds;
  double v36;
  void *key;
  CMTime rhs;
  CMTime lhs;
  void *value;
  BOOL v41;
  uint64_t v42;
  CMTime time1;
  CFTypeRef cf;
  CFTypeRef v45;
  CFTypeRef v46;
  CMTime v47;

  v46 = 0;
  v47 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  cf = 0;
  v45 = 0;
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10)
    goto LABEL_36;
  v11 = v10(a1, &v46);
  if ((_DWORD)v11)
  {
LABEL_48:
    v33 = v11;
    goto LABEL_37;
  }
  v12 = v46;
  v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v13)
  {
LABEL_36:
    v33 = 4294954514;
    goto LABEL_37;
  }
  v11 = v13(v12, &v45);
  if ((_DWORD)v11)
    goto LABEL_48;
  v14 = 0;
  v15 = 0;
  v16 = *MEMORY[0x1E0C9AE00];
  key = (void *)*MEMORY[0x1E0CA2600];
  v17 = 1;
  do
  {
    v18 = v17;
    memset(&time1, 0, sizeof(time1));
    v42 = 0;
    v41 = 0;
    value = 0;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    FigBaseObject = FigSampleCursorGetFigBaseObject(v45);
    v20 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v20
      && (!v20(FigBaseObject, CFSTR("SampleDependencyAttributes"), v16, &cf) ? (v21 = cf == 0) : (v21 = 1),
          !v21 && (v22 = CFGetTypeID(cf), v22 == CFDictionaryGetTypeID())))
    {
      LODWORD(lhs.value) = -1;
      if (a3 == -1 || !CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, key, (const void **)&value))
      {
        v23 = v41;
        if (!v41)
        {
LABEL_35:
          LOBYTE(rhs.value) = 1;
          FigCFDictionaryGetBooleanIfPresent();
          v23 = LOBYTE(rhs.value) == 0;
          v41 = LOBYTE(rhs.value) == 0;
        }
      }
      else
      {
        FigCFDictionaryGetIntIfPresent();
        v23 = SLODWORD(lhs.value) > 0;
        v41 = SLODWORD(lhs.value) > 0;
        if (SLODWORD(lhs.value) <= 0)
          goto LABEL_35;
      }
    }
    else
    {
      v24 = v45;
      v25 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, BOOL *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 64);
      if (!v25)
        goto LABEL_36;
      v11 = v25(v24, 0, 0, 0, &v41);
      if ((_DWORD)v11)
        goto LABEL_48;
      v23 = v41;
    }
    if (v23)
    {
      ++v14;
    }
    else
    {
      lhs.value = 0;
      if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144))
      {
        v31 = v45;
        v32 = *(unsigned int (**)(CFTypeRef, _QWORD, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 144);
        if (v32)
        {
          if (!v32(v31, 0, &lhs, 0, 0))
            v15 += 8 * lhs.value;
        }
      }
    }
    v26 = v45;
    v27 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v27)
      goto LABEL_36;
    v11 = v27(v26, &time1);
    if ((_DWORD)v11)
      goto LABEL_48;
    lhs = v47;
    rhs = time1;
    CMTimeAdd(&v47, &lhs, &rhs);
    v28 = v45;
    v29 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v29)
      goto LABEL_36;
    v11 = v29(v28, 1, &v42);
    if ((_DWORD)v11)
      goto LABEL_48;
    if (v42 != 1)
      break;
    time1 = v47;
    lhs = *a2;
    v30 = CMTimeCompare(&time1, &lhs);
    v17 = v18 + 1;
  }
  while (v30 < 0);
  time1 = v47;
  Seconds = CMTimeGetSeconds(&time1);
  time1 = v47;
  v36 = CMTimeGetSeconds(&time1);
  if (a4)
    *a4 = (double)(v18 - v14) / Seconds;
  v33 = 0;
  if (a5)
    *a5 = (double)v15 / v36;
LABEL_37:
  if (v46)
    CFRelease(v46);
  if (v45)
    CFRelease(v45);
  if (cf)
    CFRelease(cf);
  return v33;
}

uint64_t mv_CheckIfDroppingHEVCTemporalLevelsEnablesPlayability(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t FigBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  _BOOL4 v9;
  _BOOL4 v10;
  CMTime v12;
  double v13;
  double v14;
  CFArrayRef theArray;
  CMTime v16;

  memset(&v16, 0, sizeof(v16));
  CMTimeMake(&v16, 2, 1);
  theArray = 0;
  if (a2 <= 0.0 && a3 <= 0.0)
    return 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v8 && !v8(FigBaseObject, CFSTR("HEVCTemporalLevelInfoCombinations"), *MEMORY[0x1E0C9AE00], &theArray))
  {
    if (!theArray || CFArrayGetCount(theArray) < 1)
    {
      v6 = mv_CheckIfDroppingFramesEnablesPlayability(a1, a2, a3);
      goto LABEL_16;
    }
    v13 = 0.0;
    v14 = 0.0;
    v12 = v16;
    if (!mv_ComputeDroppableFrameRate(a1, &v12, 0, &v14, &v13))
    {
      v9 = a3 > 0.0;
      v10 = a2 > 0.0;
      if (v14 > a2)
        v10 = 0;
      if (v13 > a3)
        v9 = 0;
      v6 = v9 | v10;
      goto LABEL_16;
    }
  }
  v6 = 0;
LABEL_16:
  if (theArray)
    CFRelease(theArray);
  return v6;
}

uint64_t mv_ValidateAudioCodecsParameterValue(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  _QWORD inSpecifier[2];
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  ioPropertyDataSize = 4;
  outPropertyData = 0;
  inSpecifier[0] = a1;
  inSpecifier[1] = 1836069990;
  LODWORD(result) = AudioFormatGetProperty(*(AudioFormatPropertyID *)TEMP_kAudioFormatProperty_CanDecodeAudioFormatIndicatedByCodecsParameterValue, 0x10u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (outPropertyData)
    v2 = 0;
  else
    v2 = -12957;
  if ((_DWORD)result)
    return result;
  else
    return v2;
}

BOOL mv_IsStringInCFArrayList(const __CFString *a1, CFArrayRef theArray)
{
  CFIndex v4;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFString *v7;
  CFTypeID v8;

  v4 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v4 < i; i = 0)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v4);
    if (ValueAtIndex)
    {
      v7 = ValueAtIndex;
      v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID() && CFStringCompare(v7, a1, 1uLL) == kCFCompareEqualTo)
        break;
    }
    ++v4;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return v4 < i;
}

uint64_t FigMediaValidatorValidateRFC4281Codecs(const __CFString *a1, CFStringRef theString, int a3, const __CFDictionary *a4, int a5, _DWORD *a6)
{
  CFIndex v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  CFTypeID v18;
  const void *v19;
  size_t v20;
  unsigned int *v21;
  char *v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  int v26;
  unsigned int *v27;
  size_t v28;
  char *v29;
  signed int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  CFStringRef CFStringFrom4CC;
  char *v37;
  int v39;
  int v40;
  char *__stringp;
  int v42;
  unint64_t v43;
  void *value;
  char *__s;

  v11 = CFStringGetLength(theString) + 1;
  v12 = (char *)malloc_type_malloc(v11, 0x7718C2ABuLL);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  v37 = v12;
  if (CFStringGetCString(theString, v12, v11, 0x8000100u))
  {
    __stringp = v13;
    if (*v13 != 34)
    {
LABEL_7:
      if (a6)
        *a6 = 0;
      if (a5)
        v15 = 3;
      else
        v15 = 1;
      v40 = v15;
      v39 = a3;
      while (1)
      {
        v16 = strsep(&__stringp, ", \t");
        v17 = (uint64_t)v16;
        if (!v16)
          goto LABEL_48;
        if (!*v16)
        {
          v17 = 0;
          goto LABEL_48;
        }
        value = 0;
        __s = v16;
        if (!CFDictionaryGetValueIfPresent(a4, CFSTR("MIMETypesToTreatAsISOBMFFMediaFormatContainers"), (const void **)&value)|| !value|| (v18 = CFGetTypeID(value), v18 != CFArrayGetTypeID())|| !mv_IsStringInCFArrayList(a1, (CFArrayRef)value)|| !CFSTR("video/mp4")|| (v19 = CFRetain(CFSTR("video/mp4"))) == 0)
        {
          v19 = FigFormatReaderUtilityCopyRepresentativeMIMETypeForMIMEType(a1);
          if (!v19 && (!a1 || (v19 = CFRetain(a1)) == 0))
          {
            v17 = FigSignalErrorAt();
            v21 = 0;
            goto LABEL_47;
          }
        }
        if (a3)
        {
          v43 = 0;
          v20 = strlen((const char *)v17);
          v21 = (unsigned int *)malloc_type_calloc(v20 + 1, 1uLL, 0x100004077774924uLL);
          if (!__s || !*__s)
          {
            v33 = FigSignalErrorAt();
            goto LABEL_45;
          }
          v22 = strsep(&__s, ".");
          if (!v22)
          {
            v17 = 0;
            goto LABEL_46;
          }
          v23 = (uint64_t)v22;
          v24 = strlen(v22);
          mv_ConvertTokenToCString(v23, v24, (uint64_t)v21, v20 + 1, &v43);
          v25 = v43;
          if (v43 == 4)
            v26 = bswap32(*v21);
          else
            v26 = 0;
          if (__s)
          {
            v28 = strlen(__s);
            mv_ConvertTokenToCString((uint64_t)__s, v28, (uint64_t)v21 + v43 + 1, v20 - v43, 0);
            __s = (char *)v21 + v25 + 1;
          }
          v27 = v21;
          a3 = v39;
        }
        else
        {
          v27 = (unsigned int *)strsep(&__s, ".");
          v21 = 0;
          if (strlen((const char *)v27) == 4)
            v26 = bswap32(*v27);
          else
            v26 = 0;
        }
        if (FigCFEqual())
        {
          v29 = __s;
          v30 = v26;
          v31 = v40;
          v32 = 1;
        }
        else if (FigCFEqual())
        {
          v29 = __s;
          v30 = v26;
          v31 = v40;
          v32 = 2;
        }
        else if (FigCFEqual())
        {
          if (!a5)
          {
            v17 = 4294954332;
            goto LABEL_46;
          }
          v29 = __s;
          v30 = v26;
          v31 = 3;
          v32 = 4;
        }
        else
        {
          if (!FigCFEqual())
          {
            v42 = 0;
            LODWORD(v43) = 0;
            v34 = FigFormatReaderUtilityConvertCodecElementsToMediaSubType((uint64_t)v19, v26, (char *)v27, (uint64_t)__s, 0, (int *)&v43, &v42);
            if (v34)
              v17 = 0;
            else
              v17 = 4294954346;
            if (v34)
            {
              if (a4)
              {
                CFStringFrom4CC = mv_CreateCFStringFrom4CC(v43);
                v17 = mv_LookupCodecSupport(CFStringFrom4CC, a4, a6);
                if (CFStringFrom4CC)
                  CFRelease(CFStringFrom4CC);
              }
            }
            goto LABEL_46;
          }
          v29 = __s;
          v30 = v26;
          v31 = v40;
          v32 = 8;
        }
        v33 = mv_ValidateRFC4281IdEvaluationFn(v30, (uint64_t)v29, v31, v32, a4, a6, 0);
LABEL_45:
        v17 = v33;
LABEL_46:
        CFRelease(v19);
LABEL_47:
        free(v21);
LABEL_48:
        if ((_DWORD)v17 || !__stringp)
          goto LABEL_69;
      }
    }
    __stringp = v13 + 1;
    v14 = strchr(v13 + 1, 34);
    if (v14 && *v14)
    {
      *v14 = 0;
      goto LABEL_7;
    }
    v17 = 4294954344;
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
LABEL_69:
  free(v37);
  return v17;
}

uint64_t mv_ConvertTokenToCString(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t i;
  int v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  unint64_t v22;

  if (a3)
  {
    v5 = 0;
    if (a2)
    {
      for (i = 0; i < a2; ++i)
      {
        v7 = *(unsigned __int8 *)(result + i);
        if (*(_BYTE *)(result + i))
          v8 = v5 >= a4;
        else
          v8 = 1;
        if (v8)
          break;
        if (v7 == 37)
        {
          v9 = i + 2;
          if (i + 2 < a2
            && (v10 = *(char *)(i + result + 1), *(_BYTE *)(i + result + 1))
            && (v11 = *(char *)(result + v9), *(_BYTE *)(result + v9)))
          {
            v12 = v10 - 48;
            v13 = v10 - 65;
            if ((v10 - 97) >= 6)
              v14 = -1;
            else
              v14 = v10 - 87;
            v15 = v10 - 55;
            if (v13 > 5)
              v15 = v14;
            if (v12 < 0xA)
              v15 = v12;
            v16 = v11 - 48;
            v17 = v11 - 65;
            if ((v11 - 97) >= 6)
              v18 = -1;
            else
              v18 = v11 - 87;
            v19 = v11 - 55;
            if (v17 > 5)
              v19 = v18;
            if (v16 < 0xA)
              v19 = v16;
            v20 = v19 >= 0;
            if (v19 >= 0)
              v21 = v19 + 16 * v15;
            else
              v21 = 63;
            if (v20)
              v22 = i + 2;
            else
              v22 = i;
            if (v15 >= 0)
              LOBYTE(v7) = v21;
            else
              LOBYTE(v7) = 63;
            if (v15 >= 0)
              i = v22;
          }
          else
          {
            LOBYTE(v7) = 63;
          }
        }
        *(_BYTE *)(a3 + v5++) = v7;
      }
    }
    if (v5 >= a4)
      v5 = a4 - 1;
    *(_BYTE *)(a3 + v5) = 0;
    if (a5)
      *a5 = v5;
  }
  return result;
}

uint64_t mv_ValidateRFC4281IdEvaluationFn(signed int a1, uint64_t a2, int a3, unsigned int a4, const __CFDictionary *a5, _DWORD *a6, CFDictionaryRef theDict)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned __int16 v15;
  const __CFString *v16;
  const void *Value;
  CFMutableArrayRef Mutable;
  int v20;
  CFStringRef CFStringFrom4CC;
  int v22;
  const __CFDictionary *v23;
  signed int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v30 = 0;
  v29 = 0;
  if (!a1)
  {
    v11 = FigSignalErrorAt();
    v30 = 4;
    if (!a6)
      return v11;
    goto LABEL_32;
  }
  v10 = 0;
  v27 = a2;
  v28 = 0;
  v23 = a5;
  v24 = a1;
  v25 = a3;
  v26 = a4;
  do
  {
    if (*(_DWORD *)&mv_ISO_CodecsTable[v10] == a1 && (a4 & ~*(_DWORD *)&mv_ISO_CodecsTable[v10 + 4]) == 0)
    {
      v22 = 0;
      v13 = *(_DWORD *)&mv_ISO_CodecsTable[v10 + 16];
      LODWORD(v28) = v13;
      if (v10 == 816)
      {
        v14 = 0;
        v11 = 0;
        v29 = v13;
      }
      else
      {
        v11 = (*(uint64_t (**)(const __CFDictionary **, int *, int *))&mv_ISO_CodecsTable[v10 + 8])(&v23, &v29, &v22);
        v14 = v22;
      }
      v12 = v14 | *(_DWORD *)&mv_ISO_CodecsTable[v10 + 20];
      goto LABEL_18;
    }
    v10 += 24;
  }
  while (v10 != 888);
  if (a3 == 2)
  {
    v11 = 0;
    v12 = 4;
LABEL_18:
    v30 = v12;
    goto LABEL_19;
  }
  if ((a4 & 2) != 0)
    goto LABEL_41;
  v11 = 4294954346;
  if (a1 <= 1634743415)
  {
    if (a1 != 1634742376 && a1 != 1634742888)
    {
      v15 = 13416;
LABEL_37:
      if (a1 != (v15 | 0x61700000))
        goto LABEL_19;
    }
  }
  else if (((a1 - 1634755432) > 0xB || ((1 << (a1 - 104)) & 0x8C1) == 0)
         && ((a1 - 1634759272) > 6 || ((1 << (a1 - 104)) & 0x51) == 0))
  {
    v15 = 13432;
    goto LABEL_37;
  }
  if ((a4 & 1) == 0)
    goto LABEL_19;
LABEL_41:
  v11 = 4294954346;
  if (a1 > 1752589104)
  {
    if (a1 <= 1902207855)
    {
      if (a1 > 1885430639)
      {
        if (a1 == 1885430640 || a1 == 1886745441)
          goto LABEL_19;
        v20 = 1902207848;
      }
      else
      {
        if (a1 == 1752589105 || a1 == 1885430115)
          goto LABEL_19;
        v20 = 1885430632;
      }
    }
    else if (a1 <= 1987063864)
    {
      if (a1 == 1902207856 || a1 == 1903522657)
        goto LABEL_19;
      v20 = 1970495843;
    }
    else if (a1 > 2053202799)
    {
      if (a1 == 2053202800)
        goto LABEL_19;
      v20 = 2054517601;
    }
    else
    {
      if (a1 == 1987063865)
        goto LABEL_19;
      v20 = 2053202792;
    }
  }
  else if (a1 > 1635135536)
  {
    if (a1 > 1668641632)
    {
      if (a1 == 1668641633 || a1 == 1684108849)
        goto LABEL_19;
      v20 = 1685481521;
    }
    else
    {
      if (a1 == 1635135537 || a1 == 1667326824)
        goto LABEL_19;
      v20 = 1667326832;
    }
  }
  else
  {
    if ((a1 - 1633772389) <= 0xB && ((1 << (a1 - 101)) & 0x80F) != 0 || a1 == 1633771875)
      goto LABEL_19;
    v20 = 1633772320;
  }
  if (a1 != v20)
  {
    CFStringFrom4CC = mv_CreateCFStringFrom4CC(a1);
    v11 = mv_LookupCodecSupport(CFStringFrom4CC, a5, &v30);
    if (CFStringFrom4CC)
      CFRelease(CFStringFrom4CC);
  }
LABEL_19:
  if (!theDict)
    goto LABEL_31;
  if ((v30 & 1) != 0)
  {
    v16 = CFSTR("soun");
  }
  else
  {
    if ((v30 & 2) == 0)
      goto LABEL_31;
    v16 = CFSTR("vide");
  }
  if (CFDictionaryContainsKey(theDict, v16))
  {
    Value = CFDictionaryGetValue(theDict, v16);
    if (!Value)
      goto LABEL_31;
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      goto LABEL_31;
    Value = Mutable;
    CFDictionarySetValue(theDict, v16, Mutable);
    CFRelease(Value);
  }
  if (!mv_IsIntInCFArray(v29, (const __CFArray *)Value))
    FigCFArrayAppendInt32();
LABEL_31:
  if (a6)
LABEL_32:
    *a6 |= v30;
  return v11;
}

uint64_t mv_LookupCodecSupport(const void *a1, const __CFDictionary *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  const __CFNumber *v8;
  int v9;
  int v10;
  int valuePtr;
  CFNumberRef v12;
  CFNumberRef number;
  uint64_t v14;
  const __CFArray *v15;
  __int16 v16;

  v16 = 0;
  result = 4294954344;
  if (!a1)
    return result;
  if (!a2)
    return result;
  result = mv_IsValueInArrayInDictionary(a2, a1, CFSTR("vide"), (Boolean *)&v16, (_BYTE *)&v16 + 1);
  if ((_DWORD)result)
    return result;
  if ((_BYTE)v16 && HIBYTE(v16))
    goto LABEL_8;
  result = mv_IsValueInArrayInDictionary(a2, a1, CFSTR("VideoCodecs"), (Boolean *)&v16, (_BYTE *)&v16 + 1);
  if ((_DWORD)result)
    return result;
  if ((_BYTE)v16)
  {
LABEL_8:
    if (a3)
    {
      v7 = 2;
LABEL_10:
      *a3 |= v7;
    }
  }
  else
  {
    result = mv_IsValueInArrayInDictionary(a2, a1, CFSTR("soun"), (Boolean *)&v16, (_BYTE *)&v16 + 1);
    if ((_DWORD)result)
      return result;
    v9 = v16;
    if (!(_BYTE)v16 || !HIBYTE(v16))
    {
      result = mv_IsValueInArrayInDictionary(a2, a1, CFSTR("AudioCodecs"), (Boolean *)&v16, (_BYTE *)&v16 + 1);
      if ((_DWORD)result)
        return result;
      v9 = v16;
    }
    if (a3 && v9)
    {
      v7 = 1;
      goto LABEL_10;
    }
    if (!v9)
      return 4294954344;
  }
  v14 = 0;
  v15 = 0;
  v12 = 0;
  number = 0;
  v10 = -1;
  valuePtr = -1;
  mv_GetVideoProfileAndLevelConstraints(a2, a1, &v15, 0, &v14, &number, &v12, 0);
  result = 0;
  if ((unint64_t)number | (unint64_t)v15)
  {
    v8 = v12;
    if (v12)
    {
      if (number)
      {
        if (!v15)
        {
          CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
          v8 = v12;
        }
      }
      CFNumberGetValue(v8, kCFNumberSInt32Type, &v10);
      if (v10 < 0)
        return 4294954344;
      if (v15)
      {
        if (!mv_IsIntInCFArray(0, v15))
          return 4294954344;
        return 0;
      }
      if (valuePtr >= 0)
        return 0;
      return 4294954344;
    }
  }
  return result;
}

uint64_t mv_ValidateRFC4281_avc1_avc3_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  const char *v4;
  uint64_t result;

  if (*(_DWORD *)(a1 + 32) != 1635148595 || (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) == 2)
  {
    v4 = *(const char **)(a1 + 24);
    if (v4)
    {
      result = mv_ValidateRFC4281_avc1_avc3(v4, *(const __CFDictionary **)a1);
      if ((_DWORD)result != -16055)
      {
        if ((_DWORD)result)
        {
LABEL_8:
          *a2 = *(_DWORD *)(a1 + 8);
          return result;
        }
        if (*(_DWORD *)(a1 + 32) != 1635148595)
        {
          result = 0;
          goto LABEL_8;
        }
      }
    }
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x61766331u);
    goto LABEL_8;
  }
  return 4294954340;
}

uint64_t mv_ValidateRFC4281_hvc1_hev1_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  const char *v6;
  uint64_t result;
  int v8;
  int v9;

  v9 = 0;
  if (*(_DWORD *)(a1 + 32) == 1751479857 && (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) != 2)
    return 4294954340;
  v6 = *(const char **)(a1 + 24);
  if (!v6 || (result = mv_ValidateRFC4281_hvc1_hev1(v6, *(const __CFDictionary **)a1, &v9), (_DWORD)result == -16055))
  {
LABEL_7:
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x68766331u);
    goto LABEL_8;
  }
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 32) != 1751479857)
    {
      result = 0;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  v8 = *a3;
  *a3 |= 0x10u;
  if (v9 == 1)
    *a3 = v8 | 0x18;
  *a2 = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mv_ValidateRFC4281_dvhe_dvh1_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  char *v6;
  uint64_t result;
  int v8;
  int v9;

  v9 = 0;
  if (*(_DWORD *)(a1 + 32) == 1685481573 && (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) != 2)
    return 4294954340;
  v6 = *(char **)(a1 + 24);
  if (!v6 || (result = mv_ValidateRFC4281_dvhe_dvh1(v6, *(const __CFDictionary **)a1, &v9), (_DWORD)result == -16055))
  {
LABEL_7:
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x64766831u);
    goto LABEL_8;
  }
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 32) != 1685481573)
    {
      result = 0;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  v8 = *a3;
  *a3 |= 0x10u;
  if (v9 == 1)
    *a3 = v8 | 0x18;
  *a2 = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mv_ValidateRFC4281_av01_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  const char *v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;

  v10 = 0;
  v6 = *(const char **)(a1 + 24);
  if (!v6 || (result = mv_ValidateRFC4281_av01(v6, *(const __CFDictionary **)a1, &v10), (_DWORD)result == -16055))
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x61763031u);
  v8 = v10;
  if (v10)
  {
    v9 = *a3;
    *a3 |= 0x10u;
    if (v8 == 1)
      *a3 = v9 | 0x18;
  }
  *a2 = 1635135537;
  return result;
}

uint64_t mv_ValidateRFC4281_dav1_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  const char *v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;

  v10 = 0;
  v6 = *(const char **)(a1 + 24);
  if (!v6 || (result = mv_ValidateRFC4281_dav1(v6, *(const __CFDictionary **)a1, &v10), (_DWORD)result == -16055))
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x64617631u);
  v8 = v10;
  if (v10)
  {
    v9 = *a3;
    *a3 |= 0x10u;
    if (v8 == 1)
      *a3 = v9 | 0x18;
  }
  *a2 = 1684108849;
  return result;
}

const __CFDictionary *mv_ValidateRFC4281_video_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)a1;
  if (result)
    result = (const __CFDictionary *)mv_ValidateRFC4281VideoFromCodecType(result, *(_DWORD *)(a1 + 32));
  *a2 = *(_DWORD *)(a1 + 32);
  return result;
}

const __CFDictionary *mv_ValidateRFC4281_restricted_video_evaluation_fn(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  const __CFDictionary *result;

  if (*(_DWORD *)(a1 + 12) == 2)
  {
    result = 0;
    *a2 = *(_DWORD *)(a1 + 32);
    *a3 |= 4u;
  }
  else
  {
    result = *(const __CFDictionary **)a1;
    if (*(_QWORD *)a1)
      result = (const __CFDictionary *)mv_ValidateRFC4281VideoFromCodecType(result, *(_DWORD *)(a1 + 32));
    *a2 = *(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t mv_ValidateRFC4281_mp2v_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  const char *v4;
  int v5;
  char v8;
  int v9;

  v9 = 0;
  v4 = *(const char **)(a1 + 24);
  if (v4)
  {
    v8 = 0;
    v5 = sscanf(v4, "%x%c", &v9, &v8);
    if ((v9 - 96) > 5 || ((1 << (v9 - 96)) & 0x23) == 0)
      return 4294954340;
    if (v5 >= 2)
      return FigSignalErrorAt();
  }
  else
  {
    v9 = 97;
  }
  *a2 = 1836069494;
  return mv_ValidateRFC4281VideoFromCodecType(*(const __CFDictionary **)a1, 0x6D703276u);
}

uint64_t mv_ValidateRFC4281_mp4v_evaluation_fn(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  const char *v6;
  int v7;
  unsigned int v8;
  const char *v9;
  const __CFDictionary *v10;
  int v11;
  uint64_t result;
  const __CFArray *v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  const __CFNumber *v19;
  CFNumberRef number;
  uint64_t v21;
  const __CFArray *v22;
  char v23;
  uint64_t v24;

  v18 = 0;
  v6 = *(const char **)(a1 + 24);
  if (!v6)
  {
    v8 = 1836070006;
    HIDWORD(v18) = 32;
    *a3 |= 4u;
    goto LABEL_30;
  }
  LOBYTE(v22) = 0;
  v7 = sscanf(v6, "%x.%d%c", (char *)&v18 + 4, &v18, &v22);
  if (HIDWORD(v18) == 108)
  {
    if (v7 != 1)
      return FigSignalErrorAt();
    if ((*(_BYTE *)(a1 + 16) & 2) != 0)
      goto LABEL_34;
    v8 = 1785750887;
LABEL_30:
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, v8);
    goto LABEL_31;
  }
  if (HIDWORD(v18) == 32)
  {
    if (v7 < 3)
    {
      v8 = 1836070006;
      *a3 |= 4u;
      if (v7 == 2)
      {
        v9 = *(const char **)(a1 + 24);
        v10 = *(const __CFDictionary **)a1;
        v24 = 0;
        v23 = 0;
        v21 = 0;
        v22 = 0;
        v19 = 0;
        number = 0;
        v11 = sscanf(v9, "%x.%d%c", (char *)&v24 + 4, &v24, &v23);
        result = 0;
        if (v10)
        {
          if (v11 == 2)
          {
            result = mv_GetVideoProfileAndLevelConstraints(v10, CFSTR("mp4v"), &v22, 0, &v21, &number, &v19, 0);
            if (!(_DWORD)result)
            {
              v13 = v22;
              if ((unint64_t)number | (unint64_t)v22 && v19)
              {
                v14 = v24;
                if (v22)
                {
                  v15 = 0;
                }
                else
                {
                  v16 = 0;
                  while ((_DWORD)v24 != MPEG4ProfileCheck[v16])
                  {
                    v16 += 3;
                    if (v16 == 45)
                    {
                      result = FigSignalErrorAt();
                      goto LABEL_31;
                    }
                  }
                  v17 = &MPEG4ProfileCheck[v16];
                  v14 = v17[1];
                  v15 = v17[2];
                  v13 = 0;
                }
                result = mv_ValidateVideoProfileLevelTier(v13, number, v19, 0, v14, v15, 0);
              }
              else
              {
                result = 0;
              }
            }
          }
        }
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    return FigSignalErrorAt();
  }
  if (*(_DWORD *)(a1 + 12) == 2)
  {
LABEL_18:
    LODWORD(result) = FigSignalErrorAt();
    v8 = 0;
    if ((_DWORD)result)
      result = result;
    else
      result = 4294954340;
    goto LABEL_31;
  }
  if ((HIDWORD(v18) - 96) < 2 || HIDWORD(v18) == 101)
  {
    if (v7 != 1)
      return FigSignalErrorAt();
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
    {
      v8 = 1836069494;
      goto LABEL_30;
    }
  }
  else
  {
    if (HIDWORD(v18) != 106)
      goto LABEL_18;
    if (v7 != 1)
      return FigSignalErrorAt();
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
    {
      v8 = 1836069238;
      goto LABEL_30;
    }
  }
LABEL_34:
  v8 = 0;
  result = 4294954340;
LABEL_31:
  if (a2)
    *a2 = v8;
  return result;
}

uint64_t mv_ValidateRFC4281_vp9_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  const char *v6;
  uint64_t result;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;

  v10 = 0;
  v6 = *(const char **)(a1 + 24);
  if (!v6
    || (result = (uint64_t)mv_ValidateRFC4281_vp9(v6, *(const __CFDictionary **)a1, &v10), (_DWORD)result == -16055))
  {
    result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x76703039u);
  }
  v8 = v10;
  if (v10)
  {
    v9 = *a3;
    *a3 |= 0x10u;
    if (v8)
      *a3 = v9 | 0x18;
  }
  *a2 = 1987063865;
  return result;
}

uint64_t mv_ValidateRFC4281_mp4a_evaluation_fn(uint64_t a1, int *a2)
{
  const char *v3;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  char v10;
  int v11;
  int v12;

  v3 = *(const char **)(a1 + 24);
  if (!v3)
    return FigSignalErrorAt();
  v5 = *(_DWORD *)(a1 + 12);
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v6 = sscanf(v3, "%x.%d%c", &v12, &v11, &v10);
  if (v6 == 2)
  {
    if (v12 != 107 && v12 != 105)
    {
      if (v12 != 64)
        goto LABEL_58;
      if (v11 <= 28)
      {
        switch(v11)
        {
          case 2:
            v7 = 1633772320;
            goto LABEL_48;
          case 5:
            v7 = 1633772392;
            goto LABEL_48;
          case 23:
            v7 = 1633772396;
            goto LABEL_48;
        }
      }
      else if (v11 > 38)
      {
        if (v11 == 39)
        {
          v7 = 1633772389;
          goto LABEL_48;
        }
        if (v11 == 42)
        {
          v7 = 1970495843;
          goto LABEL_48;
        }
      }
      else
      {
        if (v11 == 29)
        {
          v7 = 1633772400;
          goto LABEL_48;
        }
        if (v11 == 34)
        {
          if (v5 == 2)
            v7 = 778924083;
          else
            v7 = 1836069684;
          goto LABEL_48;
        }
      }
      if (v5 != 2)
      {
        v7 = 1633772397;
        switch(v11)
        {
          case 1:
            goto LABEL_48;
          case 2:
          case 5:
          case 6:
            goto LABEL_58;
          case 3:
            v7 = 1633772402;
            goto LABEL_48;
          case 4:
            v7 = 1633772404;
            goto LABEL_48;
          case 7:
            v7 = 1953986161;
            goto LABEL_48;
          case 8:
            v7 = 1667591280;
            goto LABEL_48;
          case 9:
            v7 = 1752594531;
            goto LABEL_48;
          default:
            switch(v11)
            {
              case ' ':
                v7 = 778924081;
                goto LABEL_48;
              case '!':
                v7 = 778924082;
                goto LABEL_48;
              case '$':
                v7 = 1634497332;
                goto LABEL_48;
              case '&':
                v7 = 1936487278;
                goto LABEL_48;
              default:
                goto LABEL_58;
            }
        }
      }
      goto LABEL_58;
    }
    if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    {
LABEL_20:
      v7 = 0;
      result = 4294954339;
      if (!a2)
        return result;
      goto LABEL_55;
    }
    v7 = 778924081;
    if (v11 == 3)
    {
      v7 = 778924083;
    }
    else
    {
      if (v5 == 2)
        goto LABEL_58;
      if (v11 != 1)
      {
        if (v11 != 2)
          goto LABEL_58;
        v7 = 778924082;
      }
    }
LABEL_48:
    result = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v9 = 1633772320;
      if (v7 != 1633772320 && v7 != 1633772392 && v7 != 1633772400)
        v9 = v7;
      result = mv_ValidateRFC4281AudioFromCodecType((const __CFDictionary *)result, v9);
    }
    if (a2)
      goto LABEL_55;
    return result;
  }
  if (v6 != 1)
    goto LABEL_20;
  v7 = 1633772320;
  switch(v12)
  {
    case 103:
      goto LABEL_48;
    case 166:
      if (v5 == 2)
      {
        v7 = 1700998451;
        goto LABEL_48;
      }
      break;
    case 165:
      if (v5 == 2)
      {
        v7 = 1633889587;
        goto LABEL_48;
      }
      break;
    default:
      if (v5 == 2)
        goto LABEL_58;
      break;
  }
  switch(v11)
  {
    case 102:
      v7 = 1633772397;
      goto LABEL_48;
    case 225:
      v7 = 1365470320;
      goto LABEL_48;
    case 104:
      v7 = 1633772402;
      goto LABEL_48;
  }
LABEL_58:
  LODWORD(result) = FigSignalErrorAt();
  v7 = 0;
  if ((_DWORD)result)
    result = result;
  else
    result = 4294954339;
  if (a2)
LABEL_55:
    *a2 = v7;
  return result;
}

uint64_t mv_ValidateRFC4281_audio_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = mv_ValidateRFC4281AudioFromCodecType(*(const __CFDictionary **)a1, *(_DWORD *)(a1 + 32));
  *a2 = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t mv_ValidateRFC4281_restricted_audio_evaluation_fn(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 12) == 2)
  {
    *a2 = *(_DWORD *)(a1 + 32);
    *a3 |= 4u;
    return 0;
  }
  else
  {
    result = mv_ValidateRFC4281AudioFromCodecType(*(const __CFDictionary **)a1, *(_DWORD *)(a1 + 32));
    *a2 = *(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t mv_ValidateRFC4281_mp1a_mp2a_evaluation_fn(uint64_t a1)
{
  const char *v2;
  int v3;
  unsigned int v4;
  int v5;
  BOOL v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;

  v2 = *(const char **)(a1 + 24);
  if (!v2)
    return FigSignalErrorAt();
  v13 = 0;
  v12 = 0;
  v3 = sscanf(v2, "%x.%x%c", (char *)&v13 + 4, &v13, &v12);
  if (v3 < 1)
    return 4294954339;
  v4 = v3;
  v5 = *(_DWORD *)(a1 + 8);
  v7 = v3 == 1 && v5 == 1836069473;
  result = 4294954339;
  switch(HIDWORD(v13))
  {
    case 'f':
      if (v7)
      {
        v11 = 77;
        goto LABEL_29;
      }
      break;
    case 'g':
      if (v7)
      {
        v9 = 1633772320;
        goto LABEL_30;
      }
      break;
    case 'h':
      if (v7)
      {
        v11 = 82;
LABEL_29:
        v9 = v11 | 0x61616320;
        goto LABEL_30;
      }
      break;
    case 'i':
    case 'k':
      if (v4 <= 2
        && (*(_BYTE *)(a1 + 16) & 4) != 0
        && (v5 == 1836069473 && HIDWORD(v13) == 105 || v5 == 1836069217 && HIDWORD(v13) == 107))
      {
        v9 = 778924083;
        if (v4 == 2)
        {
          v10 = 778924082;
          if ((_DWORD)v13 != 2)
            v10 = 778924083;
          if ((_DWORD)v13 == 1)
            v9 = 778924081;
          else
            v9 = v10;
        }
LABEL_30:
        result = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          result = mv_ValidateRFC4281AudioFromCodecType((const __CFDictionary *)result, v9);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mv_ValidateRFC4281_apac_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = mv_ValidateRFC4281_apac(*(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
  *a2 = 1634754915;
  return result;
}

char *mv_ValidateRFC4281_xvtt_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  char *result;

  result = mv_ValidateRFC4281_xvtt(*(char **)(a1 + 24));
  *a2 = 2021028980;
  return result;
}

uint64_t mv_ValidateRFC4281_stpp_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = mv_ValidateRFC4281_ttml(*(char **)(a1 + 24));
  *a2 = 1937010800;
  return result;
}

uint64_t mv_ValidateRFC4281_avc1_avc3(const char *a1, const __CFDictionary *a2)
{
  int v4;
  uint64_t result;
  __int16 v6;
  const __CFNumber *v7;
  CFNumberRef number;
  uint64_t v9;
  const __CFArray *v10;
  char v11;
  int v12;

  if (!a1)
    return FigSignalErrorAt();
  v12 = 0;
  v11 = 0;
  v9 = 0;
  v10 = 0;
  v7 = 0;
  number = 0;
  v6 = 0;
  if (strlen(a1) == 6 && sscanf(a1, "%x%c", &v12, &v11) == 1)
  {
    HIBYTE(v6) = BYTE2(v12);
    LOBYTE(v6) = v12;
    if (!a2)
      return 0;
  }
  else
  {
    v4 = sscanf(a1, "%hhu.%hhu%c", (char *)&v6 + 1, &v6, &v11);
    result = 0;
    if (!a2 || v4 != 2)
      return result;
  }
  result = mv_GetVideoProfileAndLevelConstraints(a2, CFSTR("avc1"), &v10, 0, &v9, &number, &v7, 0);
  if (!(_DWORD)result)
  {
    if (!((unint64_t)number | (unint64_t)v10) || !v7)
      return 0;
    return mv_ValidateVideoProfileLevelTier(v10, number, v7, 0, HIBYTE(v6), v6, 0);
  }
  return result;
}

uint64_t CheckVideoCodecAvailable(const __CFDictionary **a1, unsigned int a2)
{
  CFStringRef CFStringFrom4CC;
  unsigned int IsValueInArrayInDictionary;
  int v5;
  BOOL v6;
  uint64_t v7;
  __int16 v9;

  if (!*a1)
    return 0;
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(a2);
  v9 = 0;
  IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*a1, CFStringFrom4CC, CFSTR("vide"), (Boolean *)&v9 + 1, &v9);
  v5 = HIBYTE(v9);
  if (HIBYTE(v9))
    v6 = v9 == 0;
  else
    v6 = 1;
  if (v6)
  {
    IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*a1, CFStringFrom4CC, CFSTR("VideoCodecs"), (Boolean *)&v9 + 1, &v9);
    v5 = HIBYTE(v9);
  }
  if (v5)
    v7 = IsValueInArrayInDictionary;
  else
    v7 = 4294954344;
  if (CFStringFrom4CC)
    CFRelease(CFStringFrom4CC);
  return v7;
}

uint64_t mv_ValidateVideoProfileLevelTier(const __CFArray *a1, CFNumberRef number, const __CFNumber *a3, const __CFNumber *a4, int a5, int a6, int a7)
{
  int v13;
  int IsIntInCFArray;
  int v16;
  int v17;
  int valuePtr;

  if (!((unint64_t)a1 | (unint64_t)number))
    return 0;
  valuePtr = 0;
  if (!a1 && number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    v13 = valuePtr;
LABEL_8:
    IsIntInCFArray = v13 >= a5;
    goto LABEL_9;
  }
  if (!a1)
  {
    v13 = 0;
    goto LABEL_8;
  }
  IsIntInCFArray = mv_IsIntInCFArray(a5, a1);
LABEL_9:
  if (!IsIntInCFArray)
    return FigSignalErrorAt();
  v17 = 0;
  if (a3)
  {
    CFNumberGetValue(a3, kCFNumberSInt32Type, &v17);
    if (v17 < a6)
      return FigSignalErrorAt();
    if (a1)
    {
      if (!mv_IsIntInCFArray(a5, a1))
        return FigSignalErrorAt();
    }
    else if (valuePtr < a5)
    {
      return FigSignalErrorAt();
    }
  }
  v16 = 0;
  if (a4)
  {
    CFNumberGetValue(a4, kCFNumberSInt32Type, &v16);
    if (v16 < a7)
      return FigSignalErrorAt();
  }
  return 0;
}

uint64_t mv_ValidateRFC4281_hvc1_hev1(const char *a1, const __CFDictionary *a2, int *a3)
{
  int v4;
  int v6;
  uint64_t result;
  int v8;
  CFStringRef v9;
  const __CFDictionary *Value;
  int BooleanIfPresent;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  CFNumberRef number;
  CFDictionaryRef theDict;
  int v17[2];
  char v18;
  unsigned int v19;
  uint64_t v20;

  if (!a1)
    goto LABEL_8;
  v4 = *(unsigned __int8 *)a1;
  if ((v4 - 65) < 3)
    goto LABEL_8;
  if ((v4 - 48) >= 0xA)
    goto LABEL_8;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  theDict = 0;
  *(_QWORD *)v17 = 0;
  v14 = 0;
  number = 0;
  v13 = 0;
  if (sscanf(a1, "%u.%x.%c%d*", &v19, (char *)&v20 + 4, &v18, &v20) != 4)
    goto LABEL_8;
  if (v18 != 76)
  {
    if (v18 == 72)
    {
      v6 = 1;
      goto LABEL_14;
    }
LABEL_8:
    result = FigSignalErrorAt();
    goto LABEL_9;
  }
  v6 = 0;
LABEL_14:
  if (!a2)
  {
    result = 0;
    goto LABEL_9;
  }
  result = mv_GetVideoProfileAndLevelConstraints(a2, CFSTR("hvc1"), v17, 0, &theDict, &number, &v14, &v13);
  if ((_DWORD)result)
  {
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  if (!theDict || !*(_QWORD *)v17 || !mv_IsIntInCFArray(v19, *(const __CFArray **)v17))
    goto LABEL_25;
  v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), v19);
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v9);
  BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  v8 = 1;
  if (Value)
  {
    v12 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("MaxLevel"));
    if (v12)
      v14 = v12;
  }
  if (v9)
    CFRelease(v9);
  if (!BooleanIfPresent)
  {
LABEL_25:
    if (mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce != -1)
      dispatch_once(&mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce, &__block_literal_global_197);
    if (sHEVCDecoderIsHardwareAccelerated)
      v8 = 2;
    else
      v8 = 1;
  }
  if ((unint64_t)number | *(_QWORD *)v17)
    result = mv_ValidateVideoProfileLevelTier(*(const __CFArray **)v17, number, v14, v13, v19, v20, v6);
  else
    result = FigSignalErrorAt();
LABEL_10:
  if (a3)
    *a3 = v8;
  return result;
}

uint64_t mv_ValidateRFC4281_dvhe_dvh1(char *a1, const __CFDictionary *a2, int *a3)
{
  char *v5;
  const __CFAllocator **v6;
  char *v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  const __CFString *v10;
  char *v11;
  char *v12;
  CFStringRef v13;
  const __CFString *v14;
  int v15;
  CFTypeRef v16;
  uint64_t VideoProfileAndLevelConstraints;
  const __CFArray *v18;
  uint64_t v19;
  const __CFArray *v20;
  const __CFAllocator *v21;
  uint64_t IntValue;
  CFStringRef v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  CFDictionaryRef theDict;
  CFArrayRef v29;
  CFArrayRef theArray;
  char *__stringp;
  CFRange v32;
  CFRange v33;

  v29 = 0;
  theArray = 0;
  theDict = 0;
  if (!a1)
  {
    v19 = FigSignalErrorAt();
LABEL_65:
    v14 = 0;
    v16 = 0;
LABEL_69:
    v24 = 0;
    goto LABEL_42;
  }
  __stringp = a1;
  v5 = strsep(&__stringp, ".");
  v6 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!v5 || (v7 = v5, !*v5))
  {
    v19 = FigSignalErrorAt();
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v24 = 0;
    if ((_DWORD)v19)
      goto LABEL_42;
    goto LABEL_22;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 0x8000100u);
  v10 = v9;
  if (!__stringp)
  {
    v12 = 0;
    v13 = 0;
    if (v9)
      goto LABEL_11;
    goto LABEL_50;
  }
  v11 = strsep(&__stringp, ".");
  v12 = v11;
  if (v11 && *v11)
    v13 = CFStringCreateWithCString(v8, v11, 0x8000100u);
  else
    v13 = 0;
  if (!__stringp)
  {
    if (v10)
    {
LABEL_11:
      if (CFStringGetLength(v10) == 2
        && (*v7 - 48) <= 9
        && (v7[1] - 48) <= 9
        && v13
        && CFStringGetLength(v13) == 2
        && (*v12 - 48) <= 9
        && (v12[1] - 48) <= 9)
      {
        v14 = (const __CFString *)CFRetain(v10);
        v15 = 1;
LABEL_19:
        v16 = CFRetain(v13);
        CFRelease(v10);
LABEL_20:
        v10 = v13;
LABEL_21:
        CFRelease(v10);
        goto LABEL_22;
      }
      goto LABEL_52;
    }
LABEL_50:
    v26 = FigSignalErrorAt();
    if ((_DWORD)v26)
    {
      v19 = v26;
LABEL_55:
      if (v13)
        CFRelease(v13);
      goto LABEL_65;
    }
    goto LABEL_62;
  }
LABEL_52:
  v27 = FigSignalErrorAt();
  if ((_DWORD)v27)
  {
    v19 = v27;
    if (v10)
      CFRelease(v10);
    goto LABEL_55;
  }
  if (v10)
  {
    v14 = (const __CFString *)CFRetain(v10);
    v15 = 0;
    if (!v13)
    {
      v16 = 0;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_62:
  if (v13)
  {
    v16 = CFRetain(v13);
    v14 = 0;
    v15 = 0;
    goto LABEL_20;
  }
  v16 = 0;
  v15 = 0;
  v14 = 0;
LABEL_22:
  if (!a2)
  {
    v24 = 0;
    v19 = 0;
    goto LABEL_42;
  }
  VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(a2, CFSTR("dvh1"), &theArray, &v29, &theDict, 0, 0, 0);
  if ((_DWORD)VideoProfileAndLevelConstraints)
    goto LABEL_68;
  v18 = theArray;
  if (!theArray)
  {
    VideoProfileAndLevelConstraints = FigSignalErrorAt();
LABEL_68:
    v19 = VideoProfileAndLevelConstraints;
    goto LABEL_69;
  }
  v32.length = CFArrayGetCount(theArray);
  v32.location = 0;
  if (!CFArrayContainsValue(v18, v32, v14))
  {
    __stringp = 0;
    FigCFStringGetCStringPtrAndBufferToFree();
    v19 = FigSignalErrorAt();
    free(__stringp);
    if ((_DWORD)v19)
      goto LABEL_69;
  }
  if (!v15
    || v16
    && (v20 = v29) != 0
    && (v33.length = CFArrayGetCount(v29), v33.location = 0, CFArrayContainsValue(v20, v33, v16)))
  {
    v19 = 0;
  }
  else
  {
    __stringp = 0;
    FigCFStringGetCStringPtrAndBufferToFree();
    v19 = FigSignalErrorAt();
    free(__stringp);
  }
  if (theDict)
  {
    if (v14)
    {
      v21 = *v6;
      IntValue = CFStringGetIntValue(v14);
      v23 = CFStringCreateWithFormat(v21, 0, CFSTR("%d"), IntValue);
      CFDictionaryGetValue(theDict, v23);
      LOBYTE(__stringp) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (v23)
        CFRelease(v23);
    }
  }
  if (mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce != -1)
    dispatch_once(&mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce, &__block_literal_global_197);
  if (sHEVCDecoderIsHardwareAccelerated)
    v24 = 2;
  else
    v24 = 1;
LABEL_42:
  if (a3)
    *a3 = v24;
  if (v14)
    CFRelease(v14);
  if (v16)
    CFRelease(v16);
  return v19;
}

uint64_t mv_ValidateRFC4281_av01(const char *a1, const __CFDictionary *a2, int *a3)
{
  int v5;
  uint64_t result;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  const __CFDictionary *Value;
  const __CFNumber *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFStringRef v17;
  int v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFStringRef v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFNumberRef v30;
  CFDictionaryRef v31;
  const __CFArray *v32;
  CFRange v33;
  CFRange v34;

  v27 = 0;
  v26 = 32;
  v24 = 0;
  v25 = 0;
  v23 = 272;
  if (!a1)
    goto LABEL_4;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v5 = sscanf(a1, "%1u.%2u%c.%2u.%1d.%03x", (char *)&v27 + 4, &v27, &v26, &v25, &v24, &v23);
  if (v5 < 4 || HIDWORD(v27) >= 3 || (v25 & 0xFFFFFFFD) != 8 && (HIDWORD(v27) != 2 || v25 != 12))
    goto LABEL_4;
  if (v26 == 77)
  {
    v8 = 0;
  }
  else
  {
    if (v26 != 72)
      goto LABEL_4;
    v8 = 1;
  }
  if (v5 >= 5 && v24 >= 2)
    goto LABEL_4;
  if (v5 < 6)
    goto LABEL_37;
  if ((v23 & 0xFFFFFF00) > 0x100
    || (v23 & 0xF0u) > 0x10
    || (v23 & 0xFu) > 3
    || ((v23 & 0xFF0) != 0x110 ? (v9 = (v23 & 0xF) == 0) : (v9 = 1),
        v9 ? (v10 = 0) : (v10 = 1),
        (v23 & 0xFF0) == 0x10 || v10 || v24 && (v23 & 0xFFF) != 0x110))
  {
LABEL_4:
    result = FigSignalErrorAt();
    goto LABEL_5;
  }
  if (!HIDWORD(v27))
  {
    if ((v23 & 0xFFFFFEFF) != 0)
      goto LABEL_37;
    goto LABEL_4;
  }
  if (HIDWORD(v27) == 1 && v23 == 256)
    goto LABEL_4;
LABEL_37:
  if (!a2)
  {
    v7 = 0;
    goto LABEL_60;
  }
  result = mv_GetVideoProfileAndLevelConstraints(a2, CFSTR("av01"), &v32, 0, &v31, &v30, &v29, &v28);
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v7 = 0;
  if (v31 && v32)
  {
    if (!mv_IsIntInCFArray(SHIDWORD(v27), v32))
      goto LABEL_56;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), HIDWORD(v27));
    Value = (const __CFDictionary *)CFDictionaryGetValue(v31, v12);
    if (v12)
      CFRelease(v12);
    if (Value)
    {
      v7 = FigCFDictionaryGetBooleanIfPresent() != 0;
      v14 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("MaxLevel"));
      if (v14)
        v29 = v14;
      v15 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ChromaSubsampling"));
      if (v15)
      {
        v16 = v15;
        v17 = CFStringCreateWithFormat(v11, 0, CFSTR("%03x"), v23 & 0xFF0 | v24);
        v33.length = CFArrayGetCount(v16);
        v33.location = 0;
        v18 = CFArrayContainsValue(v16, v33, v17);
        if (v17)
          CFRelease(v17);
        if (!v18)
          goto LABEL_67;
      }
      v19 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ColorDepth"));
      if (v19)
      {
        v20 = v19;
        v21 = CFStringCreateWithFormat(v11, 0, CFSTR("%02d"), v25);
        v34.length = CFArrayGetCount(v20);
        v34.location = 0;
        v22 = CFArrayContainsValue(v20, v34, v21);
        if (v21)
          CFRelease(v21);
        if (!v22)
          goto LABEL_67;
      }
    }
    else
    {
LABEL_56:
      v7 = 0;
    }
  }
  if (!((unint64_t)v30 | (unint64_t)v32))
  {
LABEL_67:
    result = FigSignalErrorAt();
    goto LABEL_6;
  }
  result = mv_ValidateVideoProfileLevelTier(v32, v30, v29, v28, SHIDWORD(v27), v27, v8);
  if ((_DWORD)result)
    goto LABEL_6;
  if (v7)
  {
LABEL_60:
    result = 0;
    goto LABEL_6;
  }
  if (mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce != -1)
    dispatch_once(&mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce, &__block_literal_global_205);
  result = 0;
  if (sAV1DecoderIsHardwareAccelerated)
    v7 = 2;
  else
    v7 = 1;
LABEL_6:
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t mv_ValidateRFC4281_dav1(const char *a1, const __CFDictionary *a2, int *a3)
{
  uint64_t VideoProfileAndLevelConstraints;
  const __CFAllocator *v6;
  const __CFArray *v7;
  CFStringRef v8;
  const __CFArray *v9;
  int BooleanIfPresent;
  int v11;
  uint64_t v12;
  CFDictionaryRef theDict;
  CFArrayRef v15;
  CFArrayRef theArray;
  uint64_t v17;
  CFRange v18;
  CFRange v19;

  v17 = 0;
  v15 = 0;
  theArray = 0;
  theDict = 0;
  if (!a1 || sscanf(a1, "%02u.%02u", (char *)&v17 + 4, &v17) != 2 || HIDWORD(v17) != 10 || v17 >= 0xE)
    goto LABEL_15;
  if (!a2)
  {
    v11 = 0;
    v8 = 0;
    goto LABEL_13;
  }
  VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(a2, CFSTR("dav1"), &theArray, &v15, &theDict, 0, 0, 0);
  if ((_DWORD)VideoProfileAndLevelConstraints)
    goto LABEL_16;
  if (!theArray)
  {
LABEL_15:
    VideoProfileAndLevelConstraints = FigSignalErrorAt();
LABEL_16:
    v12 = VideoProfileAndLevelConstraints;
    v11 = 0;
    v8 = 0;
    a2 = 0;
    if (a3)
      goto LABEL_21;
    goto LABEL_22;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  a2 = (const __CFDictionary *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), HIDWORD(v17));
  v7 = theArray;
  v18.length = CFArrayGetCount(theArray);
  v18.location = 0;
  if (!CFArrayContainsValue(v7, v18, a2))
  {
    v12 = FigSignalErrorAt();
    v11 = 0;
    v8 = 0;
    if (!a3)
      goto LABEL_22;
    goto LABEL_21;
  }
  v8 = CFStringCreateWithFormat(v6, 0, CFSTR("%02d"), v17);
  v9 = v15;
  if (v15 && (v19.length = CFArrayGetCount(v15), v19.location = 0, CFArrayContainsValue(v9, v19, v8)))
  {
    if (theDict)
    {
      CFDictionaryGetValue(theDict, a2);
      BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
      v11 = 1;
      if (BooleanIfPresent)
      {
LABEL_13:
        v12 = 0;
        if (!a3)
          goto LABEL_22;
LABEL_21:
        *a3 = v11;
        goto LABEL_22;
      }
    }
    if (mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce != -1)
      dispatch_once(&mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce, &__block_literal_global_205);
    v12 = 0;
    if (sAV1DecoderIsHardwareAccelerated)
      v11 = 2;
    else
      v11 = 1;
    if (a3)
      goto LABEL_21;
  }
  else
  {
    v12 = FigSignalErrorAt();
    v11 = 0;
    if (a3)
      goto LABEL_21;
  }
LABEL_22:
  if (a2)
    CFRelease(a2);
  if (v8)
    CFRelease(v8);
  return v12;
}

uint64_t mv_ValidateRFC4281VideoFromCodecType(const __CFDictionary *a1, unsigned int a2)
{
  const __CFDictionary *IsValueInArrayInDictionary;
  CFStringRef CFStringFrom4CC;
  CFStringRef v4;
  int v5;
  __int16 v7;

  IsValueInArrayInDictionary = a1;
  v7 = 0;
  if (!a1)
    return (uint64_t)IsValueInArrayInDictionary;
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(a2);
  if (CFStringFrom4CC)
  {
    v4 = CFStringFrom4CC;
    if (!mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, CFStringFrom4CC, CFSTR("vide"), (Boolean *)&v7 + 1, &v7))
    {
      if (HIBYTE(v7))
      {
        v5 = v7;
        if ((_BYTE)v7)
          goto LABEL_8;
      }
    }
    IsValueInArrayInDictionary = (const __CFDictionary *)mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, v4, CFSTR("VideoCodecs"), (Boolean *)&v7 + 1, &v7);
    if ((_DWORD)IsValueInArrayInDictionary)
    {
LABEL_11:
      CFRelease(v4);
      return (uint64_t)IsValueInArrayInDictionary;
    }
    v5 = v7;
    if (HIBYTE(v7))
    {
LABEL_8:
      if (v5)
      {
        IsValueInArrayInDictionary = 0;
        goto LABEL_11;
      }
    }
    IsValueInArrayInDictionary = (const __CFDictionary *)FigSignalErrorAt();
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

const __CFDictionary *mv_ValidateRFC4281_vp9(const char *a1, const __CFDictionary *a2, _BOOL4 *a3)
{
  uint64_t VideoProfileAndLevelConstraints;
  const __CFAllocator *v6;
  CFStringRef v7;
  const __CFArray *v8;
  CFStringRef v9;
  const __CFDictionary *Value;
  _BOOL4 v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef v16;
  const __CFNumber *v17;
  const __CFArray *v18;
  CFDictionaryRef theDict;
  CFArrayRef v21;
  CFArrayRef theArray;
  uint64_t valuePtr;
  unsigned int v24;
  unsigned int v25;
  CFRange v26;
  CFRange v27;
  CFRange v28;
  CFRange v29;

  v25 = 0;
  v24 = 0;
  theArray = 0;
  valuePtr = 0;
  theDict = 0;
  v21 = 0;
  if (!a1 || sscanf(a1, "%u.%u.%u", (char *)&valuePtr + 4, &v24, &v25) != 3)
    goto LABEL_12;
  if (!a2)
    goto LABEL_13;
  VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(a2, CFSTR("vp09"), &theArray, &v21, &theDict, 0, 0, 0);
  if (!theArray)
  {
LABEL_12:
    a2 = (const __CFDictionary *)FigSignalErrorAt();
LABEL_13:
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v7 = 0;
    if (!a3)
      goto LABEL_21;
    goto LABEL_20;
  }
  a2 = (const __CFDictionary *)VideoProfileAndLevelConstraints;
  if (!theDict)
    goto LABEL_13;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%02d"), HIDWORD(valuePtr));
  v8 = theArray;
  v26.length = CFArrayGetCount(theArray);
  v26.location = 0;
  if (!CFArrayContainsValue(v8, v26, v7))
  {
    a2 = (const __CFDictionary *)FigSignalErrorAt();
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    if (!a3)
      goto LABEL_21;
LABEL_20:
    *a3 = v11;
    goto LABEL_21;
  }
  v9 = CFStringCreateWithFormat(v6, 0, CFSTR("%d"), HIDWORD(valuePtr));
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v9);
  if (v9)
    CFRelease(v9);
  v11 = FigCFDictionaryGetBooleanIfPresent() != 0;
  v12 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ColorDepth"));
  if (v12)
  {
    v13 = v12;
    v14 = CFStringCreateWithFormat(v6, 0, CFSTR("%02d"), v25);
    v27.length = CFArrayGetCount(v13);
    v27.location = 0;
    if (!CFArrayContainsValue(v13, v27, v14))
    {
      v15 = 0;
      v16 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = 0;
  }
  v17 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("MaxLevel"));
  CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
  v15 = CFStringCreateWithFormat(v6, 0, CFSTR("%02d"), valuePtr);
  v16 = CFStringCreateWithFormat(v6, 0, CFSTR("%02d"), v24);
  v18 = v21;
  v28.length = CFArrayGetCount(v21);
  v28.location = 0;
  v29.length = CFArrayGetFirstIndexOfValue(v18, v28, v15) + 1;
  v29.location = 0;
  if (CFArrayContainsValue(v21, v29, v16))
  {
    if (!a3)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_32:
  a2 = (const __CFDictionary *)FigSignalErrorAt();
  if (a3)
    goto LABEL_20;
LABEL_21:
  if (v7)
    CFRelease(v7);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  return a2;
}

uint64_t mv_ValidateRFC4281AudioFromCodecType(const __CFDictionary *a1, unsigned int a2)
{
  const __CFDictionary *IsValueInArrayInDictionary;
  CFStringRef CFStringFrom4CC;
  CFStringRef v4;
  int v5;
  __int16 v7;

  IsValueInArrayInDictionary = a1;
  v7 = 0;
  if (!a1)
    return (uint64_t)IsValueInArrayInDictionary;
  CFStringFrom4CC = mv_CreateCFStringFrom4CC(a2);
  if (CFStringFrom4CC)
  {
    v4 = CFStringFrom4CC;
    if (!mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, CFStringFrom4CC, CFSTR("soun"), (Boolean *)&v7 + 1, &v7))
    {
      if (HIBYTE(v7))
      {
        v5 = v7;
        if ((_BYTE)v7)
          goto LABEL_8;
      }
    }
    IsValueInArrayInDictionary = (const __CFDictionary *)mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, v4, CFSTR("AudioCodecs"), (Boolean *)&v7 + 1, &v7);
    if ((_DWORD)IsValueInArrayInDictionary)
    {
LABEL_11:
      CFRelease(v4);
      return (uint64_t)IsValueInArrayInDictionary;
    }
    v5 = v7;
    if (HIBYTE(v7))
    {
LABEL_8:
      if (v5)
      {
        IsValueInArrayInDictionary = 0;
        goto LABEL_11;
      }
    }
    IsValueInArrayInDictionary = (const __CFDictionary *)FigSignalErrorAt();
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t mv_ValidateRFC4281_apac(unsigned int a1, uint64_t a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t v7;

  v3 = HIBYTE(a1);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
    v5 = CFStringCreateWithFormat(v4, 0, CFSTR("%c%c%c%c.%s"), v3, BYTE2(a1), BYTE1(a1), a1, a2);
  else
    v5 = CFStringCreateWithFormat(v4, 0, CFSTR("%c%c%c%c"), v3, BYTE2(a1), BYTE1(a1), a1);
  v6 = v5;
  v7 = mv_ValidateAudioCodecsParameterValue((uint64_t)v5);
  if (v6)
    CFRelease(v6);
  return v7;
}

char *mv_ValidateRFC4281_xvtt(char *result)
{
  char *v1;
  int v2;
  char *__stringp;

  __stringp = result;
  if (result)
  {
    v1 = result;
    strsep(&__stringp, ".");
    if (__stringp)
      return (char *)FigSignalErrorAt();
    while (1)
    {
      v2 = *v1;
      if ((v2 - 114) > 6 || ((1 << (v2 - 114)) & 0x53) == 0)
        break;
      ++v1;
    }
    if (*v1)
      return (char *)FigSignalErrorAt();
    else
      return 0;
  }
  return result;
}

uint64_t mv_ValidateRFC4281_ttml(char *a1)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  __int16 *v7;
  __int16 *v8;
  __int16 *v9;
  __int16 v11;
  char *v12;
  char *__stringp;

  v11 = 0;
  if (!a1)
    return FigSignalErrorAt();
  __stringp = a1;
  strsep(&__stringp, ".");
  if (strcmp(a1, "ttml") || !__stringp)
    return FigSignalErrorAt();
  v12 = __stringp;
  strsep(&v12, ".");
  v2 = 0;
  v3 = __stringp;
  v4 = MEMORY[0x1E0C80978];
  while (1)
  {
    v5 = *v3;
    if (v5 == 43)
    {
      if (v2)
      {
        v6 = v2 == 1768763764;
        v2 = 0;
        if (v6)
          v7 = (__int16 *)((char *)&v11 + 1);
        else
          v7 = &v11;
        *(_BYTE *)v7 = 1;
      }
      goto LABEL_27;
    }
    if (v5 != 124)
      break;
    if (v2)
    {
      if (v2 == 1768763764)
        v8 = (__int16 *)((char *)&v11 + 1);
      else
        v8 = &v11;
      *(_BYTE *)v8 = 1;
    }
    if (HIBYTE(v11) && !(_BYTE)v11)
      goto LABEL_32;
    v2 = 0;
    v11 = 0;
LABEL_27:
    v3 = ++__stringp;
  }
  if (!v5)
    goto LABEL_28;
  if (((char)v5 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(v4 + 4 * (char)v5 + 60) & 0x4000) != 0)
      goto LABEL_28;
    goto LABEL_25;
  }
  if (!__maskrune((char)v5, 0x4000uLL))
  {
LABEL_25:
    if (HIBYTE(v2))
      goto LABEL_32;
    v2 = *__stringp | (v2 << 8);
    goto LABEL_27;
  }
LABEL_28:
  if (v2)
  {
    v9 = (__int16 *)((char *)&v11 + 1);
    if (v2 != 1768763764)
      v9 = &v11;
    *(_BYTE *)v9 = 1;
  }
LABEL_32:
  ++__stringp;
  if (!(_BYTE)v11 && HIBYTE(v11))
    return 0;
  return FigSignalErrorAt();
}

BOOL mv_IsPlistRequiredforRFC4281IdValidation(const __CFDictionary *a1, const char *a2)
{
  const __CFString *v4;
  unsigned int v5;
  CFStringRef CFStringFrom4CC;
  CFStringRef v7;
  _BOOL8 v8;
  CFStringRef v9;
  _BOOL4 v10;
  CFTypeID TypeID;
  BOOL v13;
  __int16 v14;
  const void *v15;

  if (!strcmp("mp4a", a2))
  {
    v5 = 1633772320;
LABEL_26:
    CFStringFrom4CC = mv_CreateCFStringFrom4CC(v5);
    if (!CFStringFrom4CC)
      return 0;
    v7 = CFStringFrom4CC;
    v14 = 0;
    if (!mv_IsValueInArrayInDictionary(a1, CFStringFrom4CC, CFSTR("soun"), (Boolean *)&v14 + 1, &v14)
      && HIBYTE(v14)
      && (_BYTE)v14
      || !mv_IsValueInArrayInDictionary(a1, v7, CFSTR("AudioCodecs"), (Boolean *)&v14 + 1, &v14))
    {
      goto LABEL_37;
    }
    if (strcmp("mp4a", a2))
    {
      v8 = 0;
LABEL_41:
      CFRelease(v7);
      return v8;
    }
    CFRelease(v7);
    v9 = mv_CreateCFStringFrom4CC(0x2E6D7033u);
    if (!v9)
      return 0;
    v7 = v9;
    if (!mv_IsValueInArrayInDictionary(a1, v9, CFSTR("soun"), (Boolean *)&v14 + 1, &v14)
      && HIBYTE(v14)
      && (_BYTE)v14)
    {
LABEL_37:
      v10 = 1;
    }
    else
    {
      v10 = mv_IsValueInArrayInDictionary(a1, v7, CFSTR("AudioCodecs"), (Boolean *)&v14 + 1, &v14) == 0;
    }
    v8 = 0;
    if (v10 && (_BYTE)v14)
      v8 = HIBYTE(v14) != 0;
    goto LABEL_41;
  }
  if (!strcmp("ac-3", a2))
  {
    v5 = 1633889587;
    goto LABEL_26;
  }
  if (!strcmp("ec-3", a2))
  {
    v5 = 1700998451;
    goto LABEL_26;
  }
  if (!strcmp("fLaC", a2))
  {
    v5 = 1718378851;
    goto LABEL_26;
  }
  if (!strcmp("Opus", a2))
  {
    v5 = 1869641075;
    goto LABEL_26;
  }
  if (!strcmp("alac", a2))
  {
    v5 = 1634492771;
    goto LABEL_26;
  }
  if (!strcmp("avc1", a2) || !strcmp("avc3", a2))
  {
    v4 = CFSTR("avc1");
    goto LABEL_48;
  }
  if (!strcmp("hvc1", a2) || !strcmp("hev1", a2))
  {
    v4 = CFSTR("hvc1");
    goto LABEL_48;
  }
  if (!strcmp("dvhe", a2) || !strcmp("dvh1", a2))
  {
    v4 = CFSTR("dvh1");
    goto LABEL_48;
  }
  if (!strcmp("jpeg", a2) || !strcmp("mjpg", a2))
  {
    v4 = CFSTR("jpeg");
    goto LABEL_48;
  }
  if (!strcmp("av01", a2) || !strcmp("dav1", a2))
    return 1;
  if (strcmp("mp4v", a2))
    return 0;
  v4 = CFSTR("mp4v");
LABEL_48:
  v15 = 0;
  TypeID = CFArrayGetTypeID();
  if (mv_GetCodecProperty(a1, v4, CFSTR("VideoCodecProfiles"), CFSTR("SupportedProfiles"), TypeID, &v15))
    v13 = 1;
  else
    v13 = v15 == 0;
  return !v13;
}

uint64_t FigMetadataRewriterSetValues(const __CFURL *a1, const __CFDictionary *a2)
{
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[7];
  const void *v17;
  const void *v18;
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;

  v17 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  if (!a1)
    return FigSignalErrorAt();
  memset(v16, 0, sizeof(v16));
  if (!a2)
  {
    v8 = 0;
    goto LABEL_35;
  }
  v3 = CFURLCopyPathExtension(a1);
  BYTE8(v15) = FigCFStringIsISOExtension(v3);
  v4 = *MEMORY[0x1E0C9AE00];
  v5 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v5
    || (v5 = FigAtomStreamInitWithByteStream(), (_DWORD)v5)
    || (v5 = figMDRW_ParseChildAtoms((uint64_t)v16, 2, (uint64_t)&FigMetadataRewriterSetValues_atomDispatch, (uint64_t)&v10), (_DWORD)v5))
  {
    v8 = v5;
    if (!v3)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (BYTE9(v15) && !BYTE10(v15) || !BYTE9(v15) && BYTE8(v15))
  {
    v20 = 0;
    v21 = 0;
    v18 = v17;
    v19 = 0;
    v22 = CFSTR("uiso");
    v23 = *((_QWORD *)&v10 + 1);
    v24 = *((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v6 = FigMetadataReaderCreateForISOUserData(v4, (uint64_t)v17, *((uint64_t *)&v10 + 1), (uint64_t)&v20);
      if ((_DWORD)v6)
        goto LABEL_29;
    }
    v6 = FigMetadataSerializerCreateForISOUserData(v4, &v21);
    if ((_DWORD)v6)
      goto LABEL_29;
    goto LABEL_28;
  }
  v20 = 0;
  v21 = 0;
  v18 = v17;
  v19 = 0;
  v22 = CFSTR("udta");
  v23 = *((_QWORD *)&v10 + 1);
  v24 = *((_QWORD *)&v13 + 1);
  if (!*((_QWORD *)&v13 + 1)
    || (v9 = FigMetadataReaderCreateForQuickTimeUserData(v4, (uint64_t)v17, *((uint64_t *)&v10 + 1), (uint64_t)&v20),
        !(_DWORD)v9))
  {
    v9 = FigMetadataSerializerCreateForQuickTimeUserData(v4, &v21);
    if (!(_DWORD)v9)
      v9 = figMDRW_WriteMetadata((uint64_t)&v18, a2);
  }
  v8 = v9;
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  if (!(_DWORD)v8)
  {
    v20 = 0;
    v21 = 0;
    v18 = v17;
    v19 = 0;
    v22 = CFSTR("mdta");
    v23 = v11;
    v24 = v14;
    if ((_QWORD)v14)
    {
      v6 = FigMetadataReaderCreateForQuickTimeMetadata(v4, v17, v11, &v20);
      if ((_DWORD)v6)
        goto LABEL_29;
    }
    v6 = FigMetadataSerializerCreateForQuickTimeMetadata(v4, &v21);
    if ((_DWORD)v6)
      goto LABEL_29;
LABEL_28:
    v6 = figMDRW_WriteMetadata((uint64_t)&v18, a2);
LABEL_29:
    v8 = v6;
    if (v20)
      CFRelease(v20);
    if (v21)
      CFRelease(v21);
  }
  if (v3)
LABEL_34:
    CFRelease(v3);
LABEL_35:
  if (v17)
    CFRelease(v17);
  return v8;
}

uint64_t figMDRW_ParseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t result;
  int v11;
  uint64_t (**v12)(uint64_t, uint64_t);
  int v13;
  int v14;
  char *v15;
  char v16;

  v8 = 0;
  v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a2 >= 1)
    {
      v11 = 0;
      v12 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v12 += 2;
        if (a2 == v11)
          goto LABEL_12;
      }
      v13 = 1 << v11;
      if ((*((_BYTE *)v12 - 4) & 1) != 0 && (v13 & v8) != 0)
        return FigSignalErrorAt();
      v8 |= v13;
      result = (*v12)(a1, a4);
      if ((_DWORD)result == 1937010544)
      {
        result = 0;
        goto LABEL_17;
      }
      if ((_DWORD)result)
        return result;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -12890)
        result = 0;
      else
        result = result;
LABEL_17:
      if (a2 >= 1)
      {
        v14 = 0;
        v15 = (char *)(a3 + 4);
        do
        {
          v16 = *v15;
          v15 += 16;
          if ((v16 & 2) != 0 && ((v8 >> v14) & 1) == 0)
            result = FigSignalErrorAt();
          ++v14;
        }
        while (a2 != v14);
      }
      return result;
    }
  }
}

uint64_t FigRewriteMetadata(const __CFURL *a1, const __CFDictionary *a2, uint64_t a3, char *a4)
{
  const __CFString *v8;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  BOOL v14;
  char v16;
  const void *Value;
  __CFArray *v18;
  const void *v19;
  const __CFArray *v20;
  const void *v21;
  __CFArray *v22;
  const __CFArray *v23;
  uint64_t UserDataBBufWithiTunes;
  OpaqueCMBlockBuffer *v25;
  size_t DataLength;
  CFTypeRef v27;
  _BOOL4 v28;
  size_t v29;
  OpaqueCMBlockBuffer *v30;
  _BOOL4 v31;
  size_t v32;
  __CFArray *v33;
  __CFArray *v34;
  __CFArray *v35;
  CFTypeRef v36;
  uint64_t v37;
  uint64_t (*v38)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  OpaqueCMBlockBuffer *v47;
  uint64_t v48;
  uint64_t v49;
  CFTypeRef v50;
  uint64_t (*v51)(CFTypeRef, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CFTypeRef v57;
  uint64_t (*v58)(CFTypeRef, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *);
  uint64_t v59;
  uint64_t v60;
  CFTypeRef v61;
  uint64_t (*v62)(CFTypeRef, uint64_t);
  uint64_t appended;
  void *v64;
  OpaqueCMBlockBuffer *v65;
  OpaqueCMBlockBuffer *v66;
  size_t v67;
  const __CFArray *v68;
  uint64_t MetadataBBufFromMetadataArray;
  __CFArray *Mutable;
  const __CFArray *v71;
  OpaqueCMBlockBuffer *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  const __CFArray *v77;
  void *v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  CFTypeRef v86[2];
  _OWORD v87[7];
  CFTypeRef cf;
  CFTypeRef v89;
  char v90;
  OpaqueCMBlockBuffer *v91;
  void *v92;
  OpaqueCMBlockBuffer *v93;
  __CFArray *v94;
  __CFArray *v95;
  unsigned int v96;
  OpaqueCMBlockBuffer *v97;
  void *v98;
  __CFArray *v99;
  __CFArray *v100;
  __CFArray *v101;
  OpaqueCMBlockBuffer *v102;
  OpaqueCMBlockBuffer *v103;
  OpaqueCMBlockBuffer *v104;
  CMBlockBufferRef blockBufferOut;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int sourceBytes[3];

  cf = 0;
  v89 = 0;
  *(_OWORD *)v86 = 0u;
  memset(v87, 0, sizeof(v87));
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  if (!a1 || !a2)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_197;
  }
  v8 = CFURLCopyPathExtension(a1);
  BYTE8(v85) = FigCFStringIsISOExtension(v8);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v10
    || (v10 = FigAtomStreamInitWithByteStream(), (_DWORD)v10)
    || (v10 = figMDRW_ParseChildAtoms((uint64_t)v87, 3, (uint64_t)&FigRewriteMetadata_atomDispatch, (uint64_t)&v80),
        (_DWORD)v10))
  {
LABEL_12:
    v11 = v10;
    if (!v8)
      goto LABEL_197;
LABEL_196:
    CFRelease(v8);
    goto LABEL_197;
  }
  if (!LOBYTE(v86[0]))
  {
    if (BYTE9(v85))
    {
      if (BYTE10(v85))
      {
LABEL_16:
        v12 = (void **)&kFigMetadataFormat_QuickTimeUserData;
        goto LABEL_19;
      }
    }
    else if (!BYTE8(v85))
    {
      goto LABEL_16;
    }
    v12 = (void **)&kFigMetadataFormat_ISOUserData;
LABEL_19:
    v13 = *v12;
    v93 = 0;
    v94 = 0;
    v91 = 0;
    v92 = 0;
    v90 = 0;
    if (*((_QWORD *)&v82 + 1))
      v14 = (_QWORD)v85 == 0;
    else
      v14 = 1;
    v16 = v14 || (uint64_t)v82 >= (uint64_t)v80;
    v79 = v16;
    Value = CFDictionaryGetValue(a2, v13);
    if (Value)
      v18 = (__CFArray *)CFRetain(Value);
    else
      v18 = 0;
    v95 = v18;
    v19 = CFDictionaryGetValue(a2, CFSTR("com.apple.quicktime.mdta"));
    if (v19)
      v20 = (const __CFArray *)CFRetain(v19);
    else
      v20 = 0;
    v21 = CFDictionaryGetValue(a2, CFSTR("com.apple.itunes"));
    v78 = v13;
    if (!v21)
    {
      v94 = 0;
      if (!v18)
      {
        v27 = 0;
        v25 = 0;
        v23 = 0;
        goto LABEL_56;
      }
      goto LABEL_39;
    }
    v22 = (__CFArray *)CFRetain(v21);
    v23 = v22;
    v94 = v22;
    if (v18)
    {
      if (!v22)
      {
LABEL_39:
        UserDataBBufWithiTunes = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, CFSTR("com.apple.itunes"), &v94);
        if ((_DWORD)UserDataBBufWithiTunes)
          goto LABEL_207;
        v23 = v94;
      }
LABEL_41:
      UserDataBBufWithiTunes = figMDRW_CreateUserDataBBufWithiTunes(v18, *((uint64_t *)&v83 + 1), v23, v13, (CFTypeRef *)&v93);
      if ((_DWORD)UserDataBBufWithiTunes)
        goto LABEL_207;
      v25 = v93;
      if (v93)
      {
        DataLength = CMBlockBufferGetDataLength(v93);
        v27 = 0;
        v28 = DataLength == *((_QWORD *)&v83 + 1);
LABEL_57:
        v30 = 0;
        v31 = 1;
        if (v28 && v20)
        {
          UserDataBBufWithiTunes = figMDRW_CreateMetadataBBufFromMetadataArray(v20, CFSTR("com.apple.quicktime.mdta"), v84, (CFTypeRef *)&v91);
          if ((_DWORD)UserDataBBufWithiTunes)
            goto LABEL_207;
          v30 = v91;
          if (v91)
          {
            v32 = CMBlockBufferGetDataLength(v91);
            v31 = v32 == (_QWORD)v84;
          }
          else
          {
            v31 = 1;
          }
        }
        if (v28 && v31)
        {
          v108 = 0;
          if (!v30 || (UserDataBBufWithiTunes = CMByteStreamWriteBlockBuffer(), !(_DWORD)UserDataBBufWithiTunes))
          {
            if (v25 || v27)
              v11 = CMByteStreamWriteBlockBuffer();
            else
              v11 = 0;
            v46 = v79;
            if (a4 && !(_DWORD)v11)
            {
              v47 = 0;
LABEL_180:
              v11 = 0;
              *a4 = v46;
              goto LABEL_181;
            }
            goto LABEL_183;
          }
LABEL_207:
          v11 = UserDataBBufWithiTunes;
          goto LABEL_183;
        }
        v97 = 0;
        v98 = 0;
        v96 = 0;
        if (v20)
          v33 = (__CFArray *)CFRetain(v20);
        else
          v33 = 0;
        v101 = v33;
        if (v18)
          v34 = (__CFArray *)CFRetain(v18);
        else
          v34 = 0;
        v100 = v34;
        if (v23)
          v35 = (__CFArray *)CFRetain(v23);
        else
          v35 = 0;
        v99 = v35;
        sourceBytes[0] = 0;
        v108 = 0;
        v104 = 0;
        blockBufferOut = 0;
        v102 = 0;
        v103 = 0;
        if (!*((_QWORD *)&v82 + 1))
          goto LABEL_176;
        v36 = cf;
        v37 = v80;
        v38 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
        if (!v38)
          goto LABEL_118;
        v39 = v38(v36, 4, v37, sourceBytes, &v108);
        if ((_DWORD)v39)
        {
          v11 = v39;
          v66 = 0;
          goto LABEL_121;
        }
        v40 = bswap32(sourceBytes[0]);
        sourceBytes[0] = v40;
        v106 = 0;
        v107 = 0;
        v41 = v84;
        if (*((_QWORD *)&v83 + 1))
        {
          v42 = *((_QWORD *)&v80 + 1);
          if ((_QWORD)v84)
          {
            if (*((uint64_t *)&v80 + 1) <= (uint64_t)v81)
              v43 = v81;
            else
              v43 = *((_QWORD *)&v80 + 1);
            if (*((uint64_t *)&v80 + 1) < (uint64_t)v81)
            {
              v44 = *((_QWORD *)&v83 + 1);
            }
            else
            {
              v42 = v81;
              v44 = v84;
            }
            v107 = v44;
            if (*((uint64_t *)&v80 + 1) >= (uint64_t)v81)
              v41 = *((_QWORD *)&v83 + 1);
            v45 = &v106;
          }
          else
          {
            v43 = 0;
            v45 = &v107;
            v41 = *((_QWORD *)&v83 + 1);
          }
        }
        else
        {
          if (!(_QWORD)v84)
          {
            v48 = 0;
            v42 = 0;
            v43 = 0;
LABEL_101:
            v49 = v80;
            v50 = cf;
            v51 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v51)
            {
              v76 = v43;
              v77 = v20;
              if (v48)
                v52 = v42 - v49;
              else
                v52 = v40;
              v53 = v51(v50, v52, v49, &v104, &v108);
              if ((_DWORD)v53)
                goto LABEL_214;
              v54 = v106;
              v55 = v40;
              if (v48)
              {
                v56 = v80;
                v57 = cf;
                v58 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                if (!v58)
                  goto LABEL_119;
                v59 = v56 + v40;
                if (v54)
                  v59 = v76;
                v49 = v42 + v48;
                v55 = v59 - (v42 + v48);
                v53 = v58(v57, v55, v42 + v48, &v103, &v108);
                if ((_DWORD)v53)
                  goto LABEL_214;
              }
              if (!v54)
              {
LABEL_114:
                if (!v104)
                {
                  v65 = 0;
                  v20 = v77;
                  v64 = v78;
                  goto LABEL_124;
                }
                v53 = CMBlockBufferCreateEmpty(v9, 8u, 1u, &blockBufferOut);
                if (!(_DWORD)v53)
                {
                  appended = CMBlockBufferAppendBufferReference(blockBufferOut, v104, 0, 0, 0);
                  v20 = v77;
                  v64 = v78;
                  if ((_DWORD)appended)
                    goto LABEL_212;
                  v65 = blockBufferOut;
LABEL_124:
                  if (v103)
                  {
                    appended = CMBlockBufferAppendBufferReference(v65, v103, 0, 0, 0);
                    if ((_DWORD)appended)
                      goto LABEL_212;
                    v65 = blockBufferOut;
                  }
                  if (v102)
                  {
                    appended = CMBlockBufferAppendBufferReference(v65, v102, 0, 0, 0);
                    if ((_DWORD)appended)
                      goto LABEL_212;
                    v65 = blockBufferOut;
                  }
                  v67 = CMBlockBufferGetDataLength(v65);
                  if (!HIDWORD(v67))
                  {
                    sourceBytes[0] = bswap32(v67);
                    v11 = CMBlockBufferReplaceDataBytes(sourceBytes, blockBufferOut, 0, 4uLL);
                    if (!(_DWORD)v11)
                    {
                      v66 = blockBufferOut;
                      blockBufferOut = 0;
                      goto LABEL_133;
                    }
LABEL_213:
                    v66 = 0;
LABEL_133:
                    if (v102)
                      CFRelease(v102);
                    if (v103)
                      CFRelease(v103);
                    if (v104)
                      CFRelease(v104);
                    if (blockBufferOut)
                      CFRelease(blockBufferOut);
                    if ((_DWORD)v11)
                      goto LABEL_217;
                    if (v66)
                    {
                      v68 = v101;
                      if (v101)
                        goto LABEL_146;
                      MetadataBBufFromMetadataArray = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, CFSTR("com.apple.quicktime.mdta"), &v101);
                      if ((_DWORD)MetadataBBufFromMetadataArray)
                        goto LABEL_216;
                      v68 = v101;
                      if (v101)
                      {
LABEL_146:
                        MetadataBBufFromMetadataArray = figMDRW_CreateMetadataBBufFromMetadataArray(v68, CFSTR("com.apple.quicktime.mdta"), 0, (CFTypeRef *)&v98);
                        if ((_DWORD)MetadataBBufFromMetadataArray)
                          goto LABEL_216;
                      }
                      Mutable = v100;
                      if (!v100)
                      {
                        MetadataBBufFromMetadataArray = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, v64, &v100);
                        if ((_DWORD)MetadataBBufFromMetadataArray)
                          goto LABEL_216;
                        Mutable = v100;
                        if (!v100)
                        {
                          Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
                          v100 = Mutable;
                          if (!Mutable)
                          {
                            MetadataBBufFromMetadataArray = FigSignalErrorAt();
                            goto LABEL_216;
                          }
                        }
                      }
                      v71 = v99;
                      if (!v99)
                      {
                        MetadataBBufFromMetadataArray = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, CFSTR("com.apple.itunes"), &v99);
                        if ((_DWORD)MetadataBBufFromMetadataArray)
                          goto LABEL_216;
                        v71 = v99;
                      }
                      figMDRW_CreateUserDataBBufWithiTunes(Mutable, 0, v71, v64, (CFTypeRef *)&v97);
                      if (!v98
                        || (MetadataBBufFromMetadataArray = CMBlockBufferAppendBufferReference(v66, (CMBlockBufferRef)v98, 0, 0, 0), !(_DWORD)MetadataBBufFromMetadataArray))
                      {
                        v72 = v97;
                        if (v97)
                        {
                          v73 = CMBlockBufferAppendBufferReference(v66, v97, 0, 0, 0);
                          if ((_DWORD)v73)
                          {
                            v11 = v73;
                            v47 = 0;
LABEL_161:
                            CFRelease(v72);
LABEL_162:
                            if (v98)
                              CFRelease(v98);
                            if (v66)
                              CFRelease(v66);
                            if (v99)
                              CFRelease(v99);
                            if (v100)
                              CFRelease(v100);
                            if (v101)
                              CFRelease(v101);
                            if ((_DWORD)v11)
                            {
LABEL_181:
                              if (!v47)
                                goto LABEL_183;
                              goto LABEL_182;
                            }
                            if (v47)
                            {
                              v74 = figMDRW_RewriteMovieHeader((uint64_t)cf, v80, *((uint64_t *)&v82 + 1));
                              if ((_DWORD)v74)
                              {
                                v11 = v74;
                                goto LABEL_182;
                              }
                            }
LABEL_177:
                            v46 = v79;
                            if (v90)
                              v46 = 0;
                            if (a4)
                              goto LABEL_180;
                            v11 = 0;
                            if (!v47)
                            {
LABEL_183:
                              if (v93)
                                CFRelease(v93);
                              if (v92)
                                CFRelease(v92);
                              if (v91)
                                CFRelease(v91);
                              if (v94)
                                CFRelease(v94);
                              if (v95)
                                CFRelease(v95);
                              if (v20)
                                CFRelease(v20);
                              if (v8)
                                goto LABEL_196;
                              goto LABEL_197;
                            }
LABEL_182:
                            CFRelease(v47);
                            goto LABEL_183;
                          }
                        }
                        v96 = bswap32(CMBlockBufferGetDataLength(v66));
                        v11 = CMBlockBufferReplaceDataBytes(&v96, v66, 0, 4uLL);
                        if (!(_DWORD)v11)
                        {
                          v47 = v66;
                          v66 = 0;
                          goto LABEL_160;
                        }
LABEL_217:
                        v47 = 0;
LABEL_160:
                        v72 = v97;
                        if (!v97)
                          goto LABEL_162;
                        goto LABEL_161;
                      }
LABEL_216:
                      v11 = MetadataBBufFromMetadataArray;
                      goto LABEL_217;
                    }
LABEL_176:
                    v47 = 0;
                    goto LABEL_177;
                  }
                  appended = FigSignalErrorAt();
LABEL_212:
                  v11 = appended;
                  goto LABEL_213;
                }
                goto LABEL_214;
              }
              v60 = v80;
              v61 = cf;
              v62 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (v62)
              {
                v53 = v62(v61, v40 - (v49 + v54 + v55) + v60);
                if (!(_DWORD)v53)
                  goto LABEL_114;
LABEL_214:
                v11 = v53;
                v66 = 0;
                goto LABEL_120;
              }
LABEL_119:
              v66 = 0;
              v11 = 4294954514;
LABEL_120:
              v20 = v77;
              goto LABEL_121;
            }
LABEL_118:
            v66 = 0;
            v11 = 4294954514;
LABEL_121:
            v64 = v78;
            goto LABEL_133;
          }
          v43 = 0;
          v45 = &v107;
          v42 = v81;
        }
        *v45 = v41;
        v48 = v107;
        goto LABEL_101;
      }
      v27 = 0;
LABEL_56:
      v28 = 1;
      goto LABEL_57;
    }
    if (v22)
    {
      UserDataBBufWithiTunes = figMDRW_CreateMetadataBBufFromMetadataArray(v22, CFSTR("com.apple.itunes"), *((uint64_t *)&v84 + 1), (CFTypeRef *)&v92);
      if ((_DWORD)UserDataBBufWithiTunes)
        goto LABEL_207;
      v27 = v92;
      if (v92)
      {
        v29 = CMBlockBufferGetDataLength((CMBlockBufferRef)v92);
        if (v29 != *((_QWORD *)&v84 + 1))
        {
          CFRelease(v27);
          v92 = 0;
          UserDataBBufWithiTunes = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, v13, &v95);
          if ((_DWORD)UserDataBBufWithiTunes)
            goto LABEL_207;
          v18 = v95;
          if (!v95)
          {
            v18 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
            v95 = v18;
            if (!v18)
            {
              UserDataBBufWithiTunes = FigSignalErrorAt();
              goto LABEL_207;
            }
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      v27 = 0;
    }
    v25 = 0;
    v18 = 0;
    goto LABEL_56;
  }
  if (v86[1])
  {
    v10 = figMDRW_RewriteMovieHeader((uint64_t)cf, v80, *((uint64_t *)&v82 + 1));
    if (!(_DWORD)v10)
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v10 = FigRewriteMetadata(a1, a2, a3, a4);
    }
    goto LABEL_12;
  }
  v11 = 4294954709;
  if (v8)
    goto LABEL_196;
LABEL_197:
  if (v86[1])
    CFRelease(v86[1]);
  if (cf)
    CFRelease(cf);
  if (v89)
    CFRelease(v89);
  return v11;
}

uint64_t GetMovieDataAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t figMDRW_RewriteMovieHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  OpaqueCMBlockBuffer *v6;
  OpaqueCMBlockBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t DataLength;
  const __CFAllocator *v16;
  unint64_t v17;
  uint64_t appended;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, _QWORD, const __CFAllocator *, CFNumberRef *);
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t *);
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v29;
  uint64_t i;
  uint64_t valuePtr;
  CFNumberRef number;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;
  _OWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v3;
  v37 = *MEMORY[0x1E0C80C00];
  theBuffer = 0;
  blockBufferOut = 0;
  valuePtr = 0;
  number = 0;
  i = 0;
  DataLength = CMBlockBufferGetDataLength(v6);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = v11 - DataLength;
  if (v11 > DataLength && v17 >= 8)
  {
    v36 = 0;
    memset(v35, 0, sizeof(v35));
    appended = CMBlockBufferCreateEmpty(v16, 8u, 1u, &blockBufferOut);
    if ((_DWORD)appended)
      goto LABEL_35;
    appended = FigAtomWriterInitWithBlockBuffer();
    if ((_DWORD)appended)
      goto LABEL_35;
    appended = FigMetadataAppendFreeAtom((uint64_t)v35, v17);
    if ((_DWORD)appended)
      goto LABEL_35;
    appended = CMBlockBufferCreateWithBufferReference(v16, v7, 0, DataLength, 0, &theBuffer);
    if ((_DWORD)appended)
      goto LABEL_35;
    appended = CMBlockBufferAppendBufferReference(theBuffer, blockBufferOut, 0, 0, 0);
    if ((_DWORD)appended)
      goto LABEL_35;
    DataLength = CMBlockBufferGetDataLength(theBuffer);
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v20 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v20)
    goto LABEL_24;
  appended = v20(CMBaseObject, *MEMORY[0x1E0CA2070], v16, &number);
  if ((_DWORD)appended)
    goto LABEL_35;
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  if (DataLength != v11 && v11 + v13 != valuePtr)
  {
    v29 = 1701147238;
    appended = CMByteStreamAppendBlockBuffer();
    if ((_DWORD)appended)
      goto LABEL_35;
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 16);
    if (v21)
    {
      appended = v21(v14, 4, v13 + 4, &v29, &i);
      if (!(_DWORD)appended)
      {
        bzero(v35, 0x1000uLL);
        v22 = v9 + v13;
        v23 = v13 + 8;
        for (i = 0; v23 < v22; v23 += i)
        {
          v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
          if (!v24)
            goto LABEL_24;
          if (v22 - v23 >= 4096)
            v25 = 4096;
          else
            v25 = v22 - v23;
          appended = v24(v14, v25, v23, v35, &i);
          if ((_DWORD)appended)
            goto LABEL_35;
        }
        v26 = 1;
        goto LABEL_27;
      }
      goto LABEL_35;
    }
LABEL_24:
    v27 = 4294954514;
    goto LABEL_28;
  }
  appended = CMByteStreamWriteBlockBuffer();
  if (!(_DWORD)appended)
  {
    v26 = 0;
LABEL_27:
    v27 = 0;
    *v5 = v26;
    goto LABEL_28;
  }
LABEL_35:
  v27 = appended;
LABEL_28:
  if (number)
    CFRelease(number);
  if (theBuffer)
    CFRelease(theBuffer);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v27;
}

const __CFDictionary *FigMetadataRewriterDictionaryCreateFromFigMetadataPropertyArray(const __CFArray *a1)
{
  uint64_t Count;
  const __CFDictionary *Mutable;
  CFIndex v4;
  const __CFArray *v5;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFArray *v8;
  const __CFArray *v9;
  __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex i;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  char v19;
  char v20;
  const void *v21;
  void *v22;
  const __CFAllocator *allocator;
  _QWORD v25[3];
  CFRange v26;

  v25[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Count >= 1)
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("format"));
      v8 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("items"));
      v9 = v8;
      if (Value)
      {
        v10 = (__CFArray *)CFDictionaryGetValue(Mutable, Value);
        if (v10)
        {
          if (!v9)
            goto LABEL_11;
LABEL_10:
          v26.length = CFArrayGetCount(v9);
          v26.location = 0;
          CFArrayAppendArray(v10, v9, v26);
          goto LABEL_11;
        }
        v10 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        CFDictionaryAddValue(Mutable, Value, v10);
        CFRelease(v10);
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v5 = v8;
      }
LABEL_11:
      if (Count == ++v4)
      {
        if (v5)
        {
          v11 = CFArrayGetCount(v5);
          if (v11 >= 1)
          {
            v12 = v11;
            for (i = 0; i != v12; ++i)
            {
              v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, i);
              if (v14)
              {
                v15 = v14;
                v16 = CFDictionaryGetValue(v14, CFSTR("key"));
                if (v16)
                {
                  v17 = v16;
                  v18 = 0;
                  v25[0] = CFSTR("com.apple.quicktime.mdta");
                  v25[1] = CFSTR("com.apple.quicktime.udta");
                  v19 = 1;
                  while (1)
                  {
                    v20 = v19;
                    v21 = (const void *)v25[v18];
                    if (FigIsCommonKeyMappedToMetadataFormat(v17, (uint64_t)v21))
                      break;
                    v19 = 0;
                    v18 = 1;
                    if ((v20 & 1) == 0)
                      goto LABEL_24;
                  }
                  v22 = (void *)CFDictionaryGetValue(Mutable, v21);
                  if (!v22)
                  {
                    v22 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                    CFDictionaryAddValue(Mutable, v21, v22);
                    CFRelease(v22);
                  }
                  CFArrayAppendValue((CFMutableArrayRef)v22, v15);
                }
              }
LABEL_24:
              ;
            }
          }
        }
        return Mutable;
      }
    }
  }
  return Mutable;
}

uint64_t GetMovieMetaDataAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t GetCompressedMovieAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  if (*(_BYTE *)(a2 + 96))
    return FigSignalErrorAt();
  memset(v4, 0, sizeof(v4));
  *(_BYTE *)(a2 + 96) = 1;
  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
    return figMDRW_ParseChildAtoms((uint64_t)v4, 2, (uint64_t)&GetCompressedMovieAtom_atomDispatch, a2);
  return result;
}

uint64_t GetDataCompressionAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigAtomStreamReadCurrentAtomData();
  *(_DWORD *)(a2 + 100) = bswap32(0);
  return result;
}

uint64_t GetCompressedMovieDataAtom(uint64_t a1, uint64_t a2)
{
  uint64_t BBuf;
  signed int v4;
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  CMBlockBufferRef v9;
  char *v11;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef theBuffer;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  blockBufferOut = 0;
  theBuffer = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  v11 = 0;
  if (*(_DWORD *)(a2 + 100) != 2053925218)
  {
    BBuf = FigSignalErrorAt();
LABEL_28:
    v8 = BBuf;
    goto LABEL_22;
  }
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)BBuf)
    goto LABEL_28;
  CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  v4 = bswap32(*(_DWORD *)dataPointerOut);
  BBuf = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v4, 1u, &blockBufferOut);
  if ((_DWORD)BBuf)
    goto LABEL_28;
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v11);
  v5 = dataPointerOut;
  v6 = totalLengthOut - 4;
  v7 = v11;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  if ((totalLengthOut - 4) >> 32 || v4 < 0)
    goto LABEL_12;
  MEMORY[0x19402F294](&gFigInitInflatorLibOnce, InitInflatorLibrary);
  if (!s_inflateInit_ || !s_inflate || !s_inflateEnd)
  {
    v8 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if (s_inflateInit_(&v16, "1.2.12", 112))
  {
LABEL_12:
    v8 = FigSignalErrorAt();
    if ((_DWORD)v8)
      goto LABEL_22;
  }
  else
  {
    *(_QWORD *)&v16 = v5 + 4;
    DWORD2(v16) = v6;
    *(_QWORD *)&v17 = 0;
    *((_QWORD *)&v17 + 1) = v7;
    LODWORD(v18) = v4;
    *((_QWORD *)&v18 + 1) = 0;
    if (s_inflate(&v16, 4) == 1)
      v8 = 0;
    else
      v8 = FigSignalErrorAt();
    s_inflateEnd(&v16);
    if ((_DWORD)v8)
      goto LABEL_22;
  }
  v8 = *(_QWORD *)(a2 + 104);
  v9 = blockBufferOut;
  *(_QWORD *)(a2 + 104) = blockBufferOut;
  if (v9)
    CFRetain(v9);
  if (v8)
  {
    CFRelease((CFTypeRef)v8);
    v8 = 0;
  }
LABEL_22:
  if (theBuffer)
    CFRelease(theBuffer);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v8;
}

void *InitInflatorLibrary()
{
  void *result;
  void *v1;

  result = dlopen("/usr/lib/libz.dylib", 6);
  if (result)
  {
    v1 = result;
    s_inflateInit_ = dlsym(result, "inflateInit_");
    s_inflate = dlsym(v1, "inflate");
    result = dlsym(v1, "inflateEnd");
    s_inflateEnd = result;
  }
  return result;
}

uint64_t figMDRW_WriteMetadata(uint64_t a1, const __CFDictionary *a2)
{
  const __CFDictionary *v2;
  uint64_t v4;
  CFAllocatorRef *v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *);
  uint64_t v13;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  __CFArray *v19;
  __CFArray *v20;
  CFMutableDictionaryRef v21;
  void (__cdecl *v22)(const void *, const void *, void *);
  uint64_t FigMetadataWriter;
  CFNumberRef v24;
  uint64_t FigBaseObject;
  uint64_t (*v26)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, CMBlockBufferRef *);
  uint64_t v30;
  const void *v31;
  CMBlockBufferRef theBuffer;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  void *value;

  v2 = a2;
  theBuffer = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v4)
  {
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v6 && (v7 = v6(v4, 0, 0), v7 >= 1))
    {
      v8 = v7;
      Mutable = 0;
      v10 = 0;
      v11 = *v5;
      while (1)
      {
        theDict = 0;
        value = 0;
        cf = 0;
        v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v12)
        {
          v30 = 4294954514;
          goto LABEL_51;
        }
        v13 = v12(v4, 0, 0, v10, v11, &value, &theDict);
        if ((_DWORD)v13)
          goto LABEL_50;
        if (!Mutable)
        {
          Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!Mutable)
            break;
        }
        if (theDict)
        {
          MutableCopy = CFDictionaryCreateMutableCopy(v11, 0, theDict);
          if (!MutableCopy)
            break;
          v15 = MutableCopy;
          v16 = CFDictionaryGetValue(MutableCopy, CFSTR("key"));
          if (v16)
          {
            v17 = v16;
            CFDictionaryAddValue(v15, CFSTR("value"), value);
            if (CFDictionaryGetValueIfPresent(Mutable, v17, &cf))
            {
              v18 = CFGetTypeID(cf);
              if (v18 == CFArrayGetTypeID())
              {
                CFArrayAppendValue((CFMutableArrayRef)cf, v15);
              }
              else
              {
                v19 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
                if (!v19)
                  break;
                v20 = v19;
                CFArrayAppendValue(v19, cf);
                CFArrayAppendValue(v20, v15);
                CFDictionarySetValue(Mutable, v17, v20);
                CFRelease(v20);
              }
            }
            else
            {
              CFDictionaryAddValue(Mutable, v17, v15);
            }
          }
        }
        else
        {
          v15 = 0;
        }
        if (value)
          CFRelease(value);
        if (theDict)
          CFRelease(theDict);
        if (v15)
          CFRelease(v15);
        if (v8 == ++v10)
          goto LABEL_28;
      }
      v13 = FigSignalErrorAt();
      v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      v2 = a2;
      if ((_DWORD)v13)
        goto LABEL_50;
    }
    else
    {
      Mutable = 0;
LABEL_28:
      *(_QWORD *)(a1 + 8) = Mutable;
      v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      v2 = a2;
    }
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v21 = CFDictionaryCreateMutable(*v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 8) = v21;
    if (!v21)
      goto LABEL_49;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 32), CFSTR("udta")))
  {
    v22 = (void (__cdecl *)(const void *, const void *, void *))figMDRW_MergeQuickTimeUserDataApplierFunc;
    goto LABEL_37;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 32), CFSTR("mdta")))
  {
    v22 = (void (__cdecl *)(const void *, const void *, void *))figMDRW_MergeQuickTimeMetadataApplierFunc;
    goto LABEL_37;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 32), CFSTR("uiso")))
  {
LABEL_49:
    v13 = FigSignalErrorAt();
LABEL_50:
    v30 = v13;
    goto LABEL_51;
  }
  v22 = (void (__cdecl *)(const void *, const void *, void *))figMDRW_MergeISOUserDataApplierFunc;
LABEL_37:
  CFDictionaryApplyFunction(v2, v22, (void *)a1);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)figMDRW_WriteMetadataApplierFunc, (void *)a1);
  FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(*(_QWORD *)(a1 + 24));
  v24 = CFNumberCreate(*v5, kCFNumberSInt64Type, (const void *)(a1 + 48));
  FigBaseObject = FigMetadataWriterGetFigBaseObject(FigMetadataWriter);
  v26 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (v26)
  {
    v27 = v26(FigBaseObject, CFSTR("minimumSize"), v24);
    if ((_DWORD)v27)
      goto LABEL_46;
    v28 = *(_QWORD *)(a1 + 24);
    v29 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
    if (v29)
    {
      v27 = v29(v28, &theBuffer);
      if (!(_DWORD)v27)
      {
        if (CMBlockBufferGetDataLength(theBuffer) == *(_QWORD *)(a1 + 48))
          v27 = CMByteStreamWriteBlockBuffer();
        else
          v27 = FigSignalErrorAt();
      }
LABEL_46:
      v30 = v27;
      if (!v24)
        goto LABEL_51;
      goto LABEL_47;
    }
  }
  v30 = 4294954514;
  if (v24)
LABEL_47:
    CFRelease(v24);
LABEL_51:
  if (theBuffer)
    CFRelease(theBuffer);
  v31 = *(const void **)(a1 + 8);
  if (v31)
    CFRelease(v31);
  return v30;
}

void figMDRW_MergeQuickTimeUserDataApplierFunc(void *a1, void *a2, uint64_t a3)
{
  CFArrayRef theArray;

  theArray = 0;
  if (!FigUserDataCopyOSTypeKeysFromCommonKey(a1, &theArray))
    figMDRW_MergeUserData(a2, a3, theArray);
}

void figMDRW_MergeQuickTimeMetadataApplierFunc(const void *a1, CFMutableDictionaryRef MutableCopy, uint64_t a3)
{
  const void *ValueAtIndex;
  CFTypeID v6;
  const void *v7;
  CFTypeID v8;
  CFMutableDictionaryRef v9;
  char v10;
  CFTypeID v11;
  CFTypeID TypeID;
  __CFDictionary *ItemFromValue;
  CFTypeID v14;
  CFTypeID v15;
  __CFArray *v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  const __CFDictionary *v20;
  const __CFLocale *v21;
  const __CFLocale *v22;
  __CFArray *Mutable;
  __CFArray *v24;
  CFArrayRef theArray;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  theArray = 0;
  if (!FigQuickTimeMetadataCopyNativeKeysFromCommonKey(a1, &theArray))
  {
    if (!theArray)
      return;
    if (CFArrayGetCount(theArray))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (CFEqual(MutableCopy, (CFTypeRef)*MEMORY[0x1E0C9B0D0]))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 8), ValueAtIndex);
        goto LABEL_34;
      }
      v6 = CFGetTypeID(MutableCopy);
      if (v6 != CFDictionaryGetTypeID())
      {
        v11 = CFGetTypeID(MutableCopy);
        TypeID = CFStringGetTypeID();
        ItemFromValue = figMDRW_CreateItemFromValue(MutableCopy, v11 == TypeID);
        MutableCopy = ItemFromValue;
        if (v11 == TypeID)
        {
          v10 = 0;
          value = (void *)CFDictionaryGetValue(ItemFromValue, CFSTR("locale"));
        }
        else
        {
          v10 = 1;
        }
        goto LABEL_18;
      }
      v7 = CFDictionaryGetValue(MutableCopy, CFSTR("value"));
      if (v7)
      {
        v8 = CFGetTypeID(v7);
        if (v8 != CFStringGetTypeID())
        {
          v9 = 0;
          v10 = 1;
          goto LABEL_19;
        }
        value = (void *)CFDictionaryGetValue(MutableCopy, CFSTR("locale"));
        if (value)
        {
          v9 = 0;
          v10 = 0;
          if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a3 + 8), ValueAtIndex, &cf))
            goto LABEL_29;
LABEL_19:
          v14 = CFGetTypeID(cf);
          v15 = CFArrayGetTypeID();
          v16 = (__CFArray *)cf;
          if (v14 == v15)
          {
            if ((v10 & 1) != 0 || (Count = CFArrayGetCount((CFArrayRef)cf), Count < 1))
            {
LABEL_26:
              CFArrayAppendValue(v16, MutableCopy);
            }
            else
            {
              v18 = Count;
              v19 = 0;
              while (1)
              {
                v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v19);
                v21 = (const __CFLocale *)CFDictionaryGetValue(v20, CFSTR("locale"));
                if (figMDRW_LocaleIsEqual(v21, (const __CFLocale *)value, 0))
                  break;
                if (v18 == ++v19)
                  goto LABEL_26;
              }
              CFArraySetValueAtIndex(v16, v19, MutableCopy);
            }
            goto LABEL_32;
          }
          v22 = (const __CFLocale *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("locale"));
          if ((v10 & 1) != 0 || !figMDRW_LocaleIsEqual(v22, (const __CFLocale *)value, 0))
          {
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            if (Mutable)
            {
              v24 = Mutable;
              CFArrayAppendValue(Mutable, v16);
              CFArrayAppendValue(v24, MutableCopy);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), ValueAtIndex, v24);
              CFRelease(v24);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
LABEL_29:
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), ValueAtIndex, MutableCopy);
          }
LABEL_32:
          if (v9)
            CFRelease(v9);
          goto LABEL_34;
        }
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MutableCopy);
        FigMetadataCopyCurrentLocaleAndLangCode((CFTypeRef *)&value, 0);
        if (value)
        {
          CFDictionaryAddValue(MutableCopy, CFSTR("locale"), value);
          CFRelease(value);
        }
        v10 = 0;
LABEL_18:
        v9 = MutableCopy;
        goto LABEL_19;
      }
      FigSignalErrorAt();
    }
  }
LABEL_34:
  if (theArray)
    CFRelease(theArray);
}

void figMDRW_MergeISOUserDataApplierFunc(void *a1, void *a2, uint64_t a3)
{
  CFArrayRef theArray;

  theArray = 0;
  if (!FigISOUserDataCopyOSTypeKeysFromCommonKey(a1, &theArray))
    figMDRW_MergeUserData(a2, a3, theArray);
}

uint64_t figMDRW_WriteMetadataApplierFunc(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t FigMetadataWriter;
  CFTypeID v7;
  uint64_t result;
  uint64_t v9;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary *);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, const void *);

  FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(*(_QWORD *)(a3 + 24));
  v7 = CFGetTypeID(a2);
  if (v7 == CFArrayGetTypeID())
  {
    result = CFArrayGetCount((CFArrayRef)a2);
    if (result >= 1)
    {
      v9 = result;
      for (i = 0; i != v9; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        result = (uint64_t)CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
        if (result)
        {
          v12 = result;
          v13 = *(_QWORD *)(a3 + 32);
          result = CMBaseObjectGetVTable();
          v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary *))(*(_QWORD *)(result + 16) + 8);
          if (v14)
            result = v14(FigMetadataWriter, v13, a1, v12, ValueAtIndex);
        }
      }
    }
  }
  else
  {
    result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("value"));
    if (result)
    {
      v15 = result;
      v16 = *(_QWORD *)(a3 + 32);
      result = CMBaseObjectGetVTable();
      v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)(result + 16) + 8);
      if (v17)
        return v17(FigMetadataWriter, v16, a1, v15, a2);
    }
  }
  return result;
}

void figMDRW_MergeUserData(void *a1, uint64_t a2, CFArrayRef theArray)
{
  const __CFArray *v3;
  CFIndex v6;
  const __CFAllocator *v7;
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  int v11;
  CFTypeID v12;
  const __CFNumber *v13;
  __CFDictionary *v14;
  __CFDictionary *MutableCopy;
  __CFDictionary *ItemFromValue;
  CFTypeID v17;
  CFTypeID TypeID;
  void *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  const __CFDictionary *ValueAtIndex;
  const __CFLocale *v24;
  const __CFLocale *v25;
  __CFArray *Mutable;
  __CFArray *v27;
  uint64_t v28;
  const __CFNumber *v29;
  const void *v30;
  CFTypeRef v31;
  uint64_t v32;
  const __CFAllocator *allocator;
  const void *v34;
  __int16 v35;
  unsigned int valuePtr;
  CFTypeRef cf;
  void *value;
  CFNumberRef number;

  value = 0;
  number = 0;
  cf = 0;
  valuePtr = 0;
  if (!theArray)
    return;
  v3 = theArray;
  if (CFArrayGetCount(theArray) < 1)
    goto LABEL_58;
  v6 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = (const void *)*MEMORY[0x1E0C9B0D0];
  v32 = a2;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v34 = (const void *)*MEMORY[0x1E0C9B0D0];
  while (1)
  {
    valuePtr = CFArrayGetValueAtIndex(v3, v6);
    v9 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
    if (!v9)
    {
      FigSignalErrorAt();
      goto LABEL_58;
    }
    v10 = v9;
    v11 = HIBYTE(valuePtr) << 24;
    if (!CFEqual(a1, v8))
      break;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 8), v10);
LABEL_33:
    CFRelease(v10);
    if (++v6 >= CFArrayGetCount(v3))
      goto LABEL_58;
  }
  v12 = CFGetTypeID(a1);
  if (v12 != CFDictionaryGetTypeID())
  {
    ItemFromValue = figMDRW_CreateItemFromValue(a1, v11 == -1459617792);
    MutableCopy = ItemFromValue;
    if (v11 == -1459617792)
      cf = CFDictionaryGetValue(ItemFromValue, CFSTR("locale"));
    v14 = MutableCopy;
    goto LABEL_16;
  }
  if (v11 != -1459617792)
  {
    v14 = 0;
    MutableCopy = (__CFDictionary *)a1;
LABEL_16:
    v8 = v34;
    goto LABEL_17;
  }
  cf = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("locale"));
  v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("languageCode"));
  number = v13;
  v8 = v34;
  if (cf && v13)
  {
    v14 = 0;
    MutableCopy = (__CFDictionary *)a1;
    goto LABEL_17;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v7, 0, (CFDictionaryRef)a1);
  v28 = a2;
  if ((unint64_t)cf | (unint64_t)number)
  {
    if (cf)
    {
      v29 = FigMetadataCopyLangCodeFromLocale((const __CFLocale *)cf);
      v30 = 0;
      number = v29;
    }
    else
    {
      if (number && (v35 = 0, CFNumberGetValue(number, kCFNumberSInt16Type, &v35)))
      {
        v30 = (const void *)FigCFLocaleCreateWithMovieLangCode();
        cf = v30;
      }
      else
      {
        v30 = 0;
      }
      v29 = 0;
    }
    v31 = cf;
    if (!cf)
      goto LABEL_47;
  }
  else
  {
    FigMetadataCopyCurrentLocaleAndLangCode(&cf, &number);
    v31 = cf;
    v29 = number;
    v30 = cf;
    if (!cf)
      goto LABEL_47;
  }
  CFDictionaryAddValue(MutableCopy, CFSTR("locale"), v31);
LABEL_47:
  if (number)
    CFDictionaryAddValue(MutableCopy, CFSTR("languageCode"), number);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  v14 = MutableCopy;
  a2 = v28;
LABEL_17:
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 8), v10, (const void **)&value))
  {
LABEL_28:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v10, MutableCopy);
LABEL_31:
    v7 = allocator;
    if (v14)
      CFRelease(v14);
    goto LABEL_33;
  }
  v17 = CFGetTypeID(value);
  TypeID = CFArrayGetTypeID();
  v19 = value;
  if (v17 != TypeID)
  {
    v25 = (const __CFLocale *)CFDictionaryGetValue((CFDictionaryRef)value, CFSTR("locale"));
    if (v11 != -1459617792 || !figMDRW_LocaleIsEqual(v25, (const __CFLocale *)cf, 1))
    {
      Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
      {
        FigSignalErrorAt();
        goto LABEL_55;
      }
      v27 = Mutable;
      CFArrayAppendValue(Mutable, v19);
      CFArrayAppendValue(v27, MutableCopy);
      a2 = v32;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 8), v10, v27);
      CFRelease(v27);
      goto LABEL_31;
    }
    a2 = v32;
    goto LABEL_28;
  }
  if (v11 != -1459617792 || (Count = CFArrayGetCount((CFArrayRef)value), Count < 1))
  {
LABEL_24:
    CFArrayAppendValue((CFMutableArrayRef)v19, MutableCopy);
    a2 = v32;
    v8 = v34;
    goto LABEL_31;
  }
  v21 = Count;
  v22 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v19, v22);
    v24 = (const __CFLocale *)CFDictionaryGetValue(ValueAtIndex, CFSTR("locale"));
    if (figMDRW_LocaleIsEqual(v24, (const __CFLocale *)cf, 1))
      break;
    if (v21 == ++v22)
      goto LABEL_24;
  }
  CFArraySetValueAtIndex((CFMutableArrayRef)v19, v22, MutableCopy);
LABEL_55:
  CFRelease(v3);
  if (v14)
    CFRelease(v14);
  v3 = v10;
LABEL_58:
  CFRelease(v3);
}

__CFDictionary *figMDRW_CreateItemFromValue(const void *a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, CFSTR("value"), a1);
    if (a2)
    {
      FigMetadataCopyCurrentLocaleAndLangCode((CFTypeRef *)&value, (CFNumberRef *)&cf);
      if (value)
        CFDictionaryAddValue(v5, CFSTR("locale"), value);
      if (cf)
        CFDictionaryAddValue(v5, CFSTR("languageCode"), cf);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  return v5;
}

BOOL figMDRW_LocaleIsEqual(const __CFLocale *a1, const __CFLocale *a2, int a3)
{
  const __CFString *v4;
  CFTypeRef Value;
  CFTypeRef v6;

  if (!a1 || !a2)
    return ((unint64_t)a1 | (unint64_t)a2) == 0;
  if (a3)
  {
    v4 = (const __CFString *)*MEMORY[0x1E0C9B088];
    Value = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v6 = CFLocaleGetValue(a2, v4);
  }
  else
  {
    Value = (CFTypeRef)MEMORY[0x194029F3C]();
    v6 = (CFTypeRef)MEMORY[0x194029F3C](a2);
  }
  return CFEqual(Value, v6) != 0;
}

uint64_t figMDRW_CopyMetadataArrayFromByteStream(uint64_t *a1, void *key, __CFArray **a3)
{
  const __CFDictionary *v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  uint64_t (*v23)(const void *, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __CFArray *v27;
  const __CFAllocator *v28;
  const CFArrayCallBacks *v29;
  uint64_t (*v30)(const void *, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *);
  uint64_t v31;
  __CFDictionary *MutableCopy;
  __CFDictionary *v33;
  __CFArray *v35;
  CFDictionaryRef theDict;
  void *value;
  void *keya;
  CFArrayRef theArray;
  CFTypeRef cf;

  theDict = 0;
  value = 0;
  v6 = (const __CFDictionary *)a1[1];
  if (!v6)
  {
    v7 = *a1;
    theArray = 0;
    cf = 0;
    keya = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v10 = FigFormatReaderCreateForStream(v7, v8, 0, &cf);
      if (!(_DWORD)v10)
      {
        FigBaseObject = FigFormatReaderGetFigBaseObject(cf);
        v12 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (!v12)
        {
          v20 = 4294954514;
LABEL_16:
          if (theArray)
            CFRelease(theArray);
          if (cf)
            CFRelease(cf);
          if (Mutable)
            CFRelease(Mutable);
          if ((_DWORD)v20)
            goto LABEL_42;
          v6 = (const __CFDictionary *)a1[1];
          goto LABEL_24;
        }
        v10 = v12(FigBaseObject, CFSTR("MetadataReaders"), v8, &theArray);
        if (!(_DWORD)v10)
        {
          if (theArray && (Count = CFArrayGetCount(theArray), Count >= 1))
          {
            v14 = Count;
            v15 = 0;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
              v17 = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
              v18 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (!v18)
              {
                v20 = 4294954514;
                goto LABEL_51;
              }
              v19 = v18(v17, CFSTR("format"), v8, &keya);
              if ((_DWORD)v19)
                break;
              CFDictionaryAddValue(Mutable, keya, ValueAtIndex);
              if (keya)
              {
                CFRelease(keya);
                keya = 0;
              }
              if (v14 == ++v15)
                goto LABEL_14;
            }
            v20 = v19;
LABEL_51:
            if (keya)
              CFRelease(keya);
          }
          else
          {
LABEL_14:
            v20 = 0;
            a1[1] = (uint64_t)Mutable;
            Mutable = 0;
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    v20 = v10;
    goto LABEL_16;
  }
LABEL_24:
  v21 = CFDictionaryGetValue(v6, key);
  if (!v21
    || (v22 = v21,
        (v23 = *(uint64_t (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40)) == 0)
    || (v24 = v23(v22, 0, 0), v24 < 1))
  {
    v27 = 0;
LABEL_41:
    v20 = 0;
    *a3 = v27;
    goto LABEL_42;
  }
  v25 = v24;
  v26 = 0;
  v27 = 0;
  v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v29 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  while (1)
  {
    v30 = *(uint64_t (**)(const void *, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v30)
    {
      v20 = 4294954514;
      if (!v27)
        goto LABEL_42;
LABEL_48:
      v35 = v27;
LABEL_49:
      CFRelease(v35);
      goto LABEL_42;
    }
    v31 = v30(v22, 0, 0, v26, v28, &value, &theDict);
    if ((_DWORD)v31)
      goto LABEL_54;
    if (!theDict)
      break;
    MutableCopy = CFDictionaryCreateMutableCopy(v28, 0, theDict);
    if (!MutableCopy)
      break;
    v33 = MutableCopy;
    CFDictionaryAddValue(MutableCopy, CFSTR("value"), value);
    if (!v27)
    {
      v27 = CFArrayCreateMutable(v28, 0, v29);
      if (!v27)
      {
        v20 = FigSignalErrorAt();
        v35 = v33;
        goto LABEL_49;
      }
    }
    CFArrayAppendValue(v27, v33);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    if (theDict)
    {
      CFRelease(theDict);
      theDict = 0;
    }
    CFRelease(v33);
    if (v25 == ++v26)
      goto LABEL_41;
  }
  v31 = FigSignalErrorAt();
LABEL_54:
  v20 = v31;
  if (v27)
    goto LABEL_48;
LABEL_42:
  if (theDict)
    CFRelease(theDict);
  if (value)
    CFRelease(value);
  return v20;
}

uint64_t figMDRW_CreateUserDataBBufWithiTunes(CFArrayRef theArray, uint64_t a2, const __CFArray *a3, const void *a4, CFTypeRef *a5)
{
  const __CFAllocator *v9;
  const __CFArray *MutableCopy;
  uint64_t MetadataBBufFromMetadataArray;
  size_t DataLength;
  uint64_t CFDataWithBlockBufferNoCopy;
  __CFString **v14;
  CFDictionaryRef v15;
  uint64_t v16;
  CFIndex Count;
  unint64_t v18;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v21;
  const void *v22;
  CFTypeID TypeID;
  uint64_t v25;
  CFTypeRef *v26;
  CFTypeRef v27;
  CMBlockBufferRef theBuffer;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  void *keys;
  const __CFString *v32;
  const __CFString *v33;
  void *values;
  const __CFString *v35;
  CFTypeRef v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  theBuffer = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  if (!MutableCopy)
  {
    MetadataBBufFromMetadataArray = FigSignalErrorAt();
    goto LABEL_45;
  }
  if (!a3)
    goto LABEL_33;
  MetadataBBufFromMetadataArray = figMDRW_CreateMetadataBBufFromMetadataArray(a3, CFSTR("com.apple.itunes"), 0, (CFTypeRef *)&theBuffer);
  if ((_DWORD)MetadataBBufFromMetadataArray)
  {
LABEL_45:
    v16 = MetadataBBufFromMetadataArray;
    goto LABEL_37;
  }
  a3 = theBuffer;
  if (!theBuffer)
    goto LABEL_33;
  v25 = a2;
  v26 = a5;
  cf = 0;
  blockBufferOut = 0;
  values = 0;
  v35 = 0;
  v36 = 0;
  keys = 0;
  v32 = 0;
  v33 = 0;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  if (!CMBlockBufferIsRangeContiguous(a3, 0, DataLength))
  {
    CFDataWithBlockBufferNoCopy = CMBlockBufferCreateContiguous(v9, a3, v9, 0, 0, DataLength, 0, &blockBufferOut);
    if ((_DWORD)CFDataWithBlockBufferNoCopy)
      goto LABEL_43;
  }
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
    goto LABEL_43;
  keys = CFSTR("keyspace");
  if (CFEqual(CFSTR("com.apple.quicktime.udta"), a4))
  {
    v14 = kFigUserDataKeyspace;
  }
  else
  {
    if (!CFEqual(CFSTR("org.mp4ra"), a4))
    {
LABEL_42:
      CFDataWithBlockBufferNoCopy = FigSignalErrorAt();
LABEL_43:
      v16 = CFDataWithBlockBufferNoCopy;
      a3 = 0;
      goto LABEL_14;
    }
    v14 = kFigISOUserDataKeyspace;
  }
  values = *v14;
  v35 = CFSTR("meta");
  v32 = CFSTR("key");
  v33 = CFSTR("value");
  v36 = cf;
  v15 = CFDictionaryCreate(v9, (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v15)
    goto LABEL_42;
  a3 = v15;
  v16 = 0;
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if ((_DWORD)v16)
    goto LABEL_35;
  Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    v18 = Count + 1;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v18 - 2);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
      v21 = CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
      if (Value)
      {
        v22 = v21;
        if (v21)
        {
          if (CFEqual(CFSTR("uiso"), Value) && CFEqual(a4, CFSTR("org.mp4ra"))
            || CFEqual(CFSTR("udta"), Value) && CFEqual(a4, CFSTR("com.apple.quicktime.udta")))
          {
            if (CFEqual(CFSTR("meta"), v22)
              || (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(v22))
              && (LODWORD(values) = 0,
                  CFNumberGetValue((CFNumberRef)v22, kCFNumberSInt32Type, &values),
                  (_DWORD)values == 1835365473))
            {
              CFArrayRemoveValueAtIndex(MutableCopy, v18 - 2);
            }
          }
        }
      }
      --v18;
    }
    while (v18 > 1);
  }
  CFArrayAppendValue(MutableCopy, a3);
  a2 = v25;
  a5 = v26;
LABEL_33:
  v16 = figMDRW_CreateMetadataBBufFromMetadataArray(MutableCopy, a4, a2, &v27);
  if ((_DWORD)v16)
  {
    if (v27)
      CFRelease(v27);
  }
  else
  {
    *a5 = v27;
    v27 = 0;
  }
LABEL_35:
  if (a3)
    CFRelease(a3);
LABEL_37:
  if (theBuffer)
    CFRelease(theBuffer);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v16;
}

uint64_t figMDRW_CreateMetadataBBufFromMetadataArray(const __CFArray *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  const __CFAllocator *v6;
  uint64_t v7;
  CFTypeRef v8;
  CFIndex Count;
  uint64_t FigMetadataWriter;
  uint64_t v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t (*v18)(uint64_t, const void *, const void *, const void *, const __CFDictionary *);
  uint64_t v20;
  CFNumberRef v21;
  CFNumberRef v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v25;
  CFTypeRef v26;
  uint64_t (*v27)(CFTypeRef, CFTypeRef *);
  const __CFAllocator *allocator;
  uint64_t v31;
  CFTypeRef v33;
  CFTypeRef cf;
  uint64_t valuePtr;

  v33 = 0;
  cf = 0;
  if (CFEqual(CFSTR("com.apple.quicktime.mdta"), a2))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = FigMetadataSerializerCreateForQuickTimeMetadata(*MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v7)
      goto LABEL_37;
  }
  else if (CFEqual(CFSTR("com.apple.quicktime.udta"), a2))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = FigMetadataSerializerCreateForQuickTimeUserData(*MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v7)
      goto LABEL_37;
  }
  else
  {
    if (!CFEqual(CFSTR("com.apple.itunes"), a2))
    {
      if (CFEqual(CFSTR("org.mp4ra"), a2))
      {
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v7 = FigMetadataSerializerCreateForISOUserData(*MEMORY[0x1E0C9AE00], &cf);
        if (!(_DWORD)v7)
          goto LABEL_12;
      }
      else
      {
        v7 = FigSignalErrorAt();
      }
LABEL_37:
      v25 = v7;
      goto LABEL_33;
    }
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = FigMetadataSerializerCreateForiTunes(*MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v7)
      goto LABEL_37;
  }
LABEL_12:
  allocator = v6;
  v31 = a3;
  v8 = cf;
  Count = CFArrayGetCount(a1);
  FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(v8);
  if (Count >= 1)
  {
    v11 = FigMetadataWriter;
    v12 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
      v15 = CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
      v16 = CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
      if (Value)
      {
        if (v15)
        {
          v17 = v16;
          if (v16)
          {
            v18 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v18)
              goto LABEL_32;
            v7 = v18(v11, Value, v15, v17, ValueAtIndex);
            if ((_DWORD)v7 && (_DWORD)v7 != -12583)
              goto LABEL_37;
          }
        }
      }
    }
    while (Count != ++v12);
  }
  valuePtr = v31;
  v20 = FigMetadataSerializerGetFigMetadataWriter(cf);
  v21 = CFNumberCreate(allocator, kCFNumberSInt64Type, &valuePtr);
  if (v21)
  {
    v22 = v21;
    FigBaseObject = FigMetadataWriterGetFigBaseObject(v20);
    v24 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v24)
      v25 = v24(FigBaseObject, CFSTR("minimumSize"), v22);
    else
      v25 = 4294954514;
    CFRelease(v22);
    if ((_DWORD)v25)
      goto LABEL_33;
  }
  else
  {
    v25 = FigSignalErrorAt();
    if ((_DWORD)v25)
      goto LABEL_33;
  }
  v26 = cf;
  v27 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (v27)
  {
    v25 = v27(v26, &v33);
    if ((_DWORD)v25)
    {
      if (v33)
        CFRelease(v33);
    }
    else
    {
      *a4 = v33;
      v33 = 0;
    }
  }
  else
  {
LABEL_32:
    v25 = 4294954514;
  }
LABEL_33:
  if (cf)
    CFRelease(cf);
  return v25;
}

uint64_t FigMetadataReaderCreateForID3(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  return figID3CreateMetadataReaderCommon(a1, a2, a3, 1, a4);
}

uint64_t figID3CreateMetadataReaderCommon(CFAllocatorRef Default, const void *a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t Property;
  uint64_t DerivedStorage;
  uint64_t v12;

  if (!a2 || !a5 || a3 < 0)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  Property = CMDerivedObjectCreate();
  if ((_DWORD)Property)
    return Property;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!Default)
    Default = CFAllocatorGetDefault();
  *(_QWORD *)DerivedStorage = CFRetain(Default);
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 16) = a3;
  Property = ID3ParserOpen();
  if ((_DWORD)Property)
    return Property;
  Property = ID3ParserGetProperty();
  if ((_DWORD)Property)
    return Property;
  *(_QWORD *)(DerivedStorage + 32) = 0;
  *(_BYTE *)(DerivedStorage + 65) = a4;
  v12 = ID3ParserGetProperty();
  if (!(_DWORD)v12)
  {
    *(_DWORD *)(DerivedStorage + 40) = 0;
    *a5 = 0;
  }
  return v12;
}

uint64_t FigMetadataReaderCreateForID3WithBackwardCompatibility(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  return figID3CreateMetadataReaderCommon(a1, a2, a3, 0, a4);
}

uint64_t FigMetadataReaderCreateForTimedID3(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (!a2)
    return FigSignalErrorAt();
  v5 = CMByteStreamCreateForBlockBuffer();
  if ((_DWORD)v5)
    return v5;
  else
    return figID3CreateMetadataReaderCommon(a1, 0, 0, 1, a3);
}

uint64_t FigID3MetadataCallbackProc(uint64_t a1, int a2, unsigned int a3, unsigned int a4, char **a5, unsigned int *a6)
{
  CFAllocatorRef *DerivedStorage;
  CFAllocatorRef *v12;
  CFAllocatorRef v13;
  CFAllocatorRef v14;
  uint64_t DataPointer;
  CFAllocatorRef v16;
  uint64_t (*v17)(CFAllocatorRef, _QWORD, char *, CMBlockBufferRef *, size_t *);
  uint64_t v18;
  OpaqueCMBlockBuffer *v19;
  CFAllocatorRef v20;
  OpaqueCMBlockBuffer *v21;
  size_t dataLength;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef theBuffer;

  DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  v12 = DerivedStorage;
  blockBufferOut = 0;
  theBuffer = 0;
  v13 = DerivedStorage[2];
  dataLength = 0;
  if (a2 == 1)
  {
    v14 = DerivedStorage[6];
    if (v14)
    {
      CFRelease(v14);
      DataPointer = 0;
      v12[6] = 0;
    }
    else
    {
      DataPointer = 0;
    }
    goto LABEL_16;
  }
  v16 = DerivedStorage[1];
  v17 = *(uint64_t (**)(CFAllocatorRef, _QWORD, char *, CMBlockBufferRef *, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 32);
  if (!v17)
  {
    DataPointer = 4294954514;
    goto LABEL_16;
  }
  v18 = v17(v16, a4, (char *)v13 + a3, &theBuffer, &dataLength);
  if ((_DWORD)v18)
    goto LABEL_20;
  if (dataLength != a4)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (!CMBlockBufferIsRangeContiguous(theBuffer, 0, a4))
  {
    v18 = CMBlockBufferCreateContiguous(*v12, theBuffer, *v12, 0, 0, dataLength, 0, &blockBufferOut);
    if (!(_DWORD)v18)
    {
      CFRelease(theBuffer);
      v19 = blockBufferOut;
      blockBufferOut = 0;
      theBuffer = v19;
      goto LABEL_10;
    }
LABEL_20:
    DataPointer = v18;
    goto LABEL_16;
  }
LABEL_10:
  v20 = v12[6];
  if (v20)
    CFRelease(v20);
  v21 = theBuffer;
  v12[6] = theBuffer;
  DataPointer = CMBlockBufferGetDataPointer(v21, 0, 0, 0, a5);
  if (!(_DWORD)DataPointer)
    *a6 = a4;
LABEL_16:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return DataPointer;
}

void FigID3MetadataFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 24))
    ID3ParserClose();
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *FigID3MetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int (*v11)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v12;
  CFStringRef v13;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigID3MetadataReader %p\n"), DerivedStorage);
  v5 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 8));
  if (v5)
  {
    v6 = v5;
    CFStringAppendFormat(Mutable, 0, CFSTR("  ByteStream = %@\n"), v5);
    CFRelease(v6);
  }
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v7)
  {
    v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      v9 = v8;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v8);
      for (i = 0; i != v9; ++i)
      {
        theDict = 0;
        cf = 0;
        v11 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v11 || v11(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v12 = CFCopyDescription(cf);
          if (v12)
          {
            v13 = v12;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v12);
            CFRelease(v13);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_2, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigID3MetadataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, unint64_t *);
  uint64_t Property;
  CFTypeRef *v11;
  void *v12;
  unint64_t valuePtr;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("complete")))
  {
    if (CFEqual(a2, CFSTR("format")))
    {
      v12 = (void *)CFRetain(CFSTR("org.id3"));
    }
    else
    {
      if (CFEqual(a2, CFSTR("formatVersion")))
      {
        LODWORD(valuePtr) = 0;
        Property = ID3ParserGetProperty();
        if ((_DWORD)Property)
          return Property;
        v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
LABEL_15:
        *a4 = v12;
        return Property;
      }
      if (!CFEqual(a2, CFSTR("size")))
        return 4294954512;
      valuePtr = DerivedStorage[4];
      v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    }
    Property = 0;
    goto LABEL_15;
  }
  valuePtr = 0;
  v7 = DerivedStorage[1];
  v8 = DerivedStorage[2];
  v9 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v9)
    return 4294954514;
  Property = v9(v7, v8, &valuePtr);
  if (!(_DWORD)Property)
  {
    if (valuePtr >= DerivedStorage[4])
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v12 = (void *)CFRetain(*v11);
    goto LABEL_15;
  }
  return Property;
}

void metadataPropertiesCallback_2(const void *a1, const void *a2, __CFString *a3)
{
  CFTypeID v5;
  CFTypeID v6;
  signed int valuePtr;

  if (CFEqual(a1, CFSTR("key")))
  {
    v5 = CFGetTypeID(a2);
    if (v5 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr))
      {
        valuePtr = bswap32(valuePtr);
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %c%c%c%c\n"), (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      }
    }
    else
    {
      v6 = CFGetTypeID(a2);
      if (v6 == CFStringGetTypeID())
        CFStringAppendFormat(a3, 0, CFSTR("     Key = %@\n"), a2);
    }
  }
}

uint64_t FigID3MetadataCopyValue(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t (*v14)(uint64_t, CFTypeRef, uint64_t, _QWORD, uint64_t, CFTypeRef *, CFTypeRef *);
  CFTypeRef *v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef cf;

  v19 = 0;
  cf = 0;
  if (!a1 || !a3 || !cf1 || !a6 || !CFEqual(cf1, CFSTR("comn")) && !CFEqual(cf1, CFSTR("org.id3")))
    goto LABEL_17;
  v14 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, _QWORD, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v14)
  {
    v17 = 4294954514;
    goto LABEL_19;
  }
  if (a7)
    v15 = &v19;
  else
    v15 = 0;
  v16 = v14(a1, cf1, a3, 0, a5, &cf, v15);
  if ((_DWORD)v16)
  {
LABEL_18:
    v17 = v16;
LABEL_19:
    if (cf)
      CFRelease(cf);
    goto LABEL_21;
  }
  if (a4 && CFGetTypeID(cf) != a4)
  {
LABEL_17:
    v16 = FigSignalErrorAt();
    goto LABEL_18;
  }
  *a6 = cf;
  cf = 0;
  v17 = 0;
  if (a7)
  {
    *a7 = v19;
    return v17;
  }
LABEL_21:
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t FigID3MetadataHasKey(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t result;
  CFTypeID v6;
  CFTypeID v7;
  int Property;
  int v9;
  unsigned int valuePtr;

  valuePtr = 0;
  v9 = 0;
  if (!CMBaseObjectGetDerivedStorage() || !a3 || !a2)
    goto LABEL_18;
  if (CFEqual(a2, CFSTR("comn")))
  {
    result = FigID3MetadataCommonKeyToOSTypeKey(a3, &valuePtr);
    if (!(_DWORD)result)
      return result;
    goto LABEL_13;
  }
  if (!CFEqual(a2, CFSTR("org.id3")))
    goto LABEL_18;
  v6 = CFGetTypeID(a3);
  if (v6 != CFStringGetTypeID())
  {
    v7 = CFGetTypeID(a3);
    if (v7 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      goto LABEL_13;
LABEL_18:
    FigSignalErrorAt();
    return 0;
  }
  if (!FigID3MetadataStringKeyToOSTypeKey(a3, &valuePtr))
    goto LABEL_18;
LABEL_13:
  Property = ID3ParserGetProperty();
  result = 0;
  if (!Property)
  {
    while (valuePtr)
    {
      ++v9;
      if (ID3ParserGetProperty())
        return 0;
    }
    return 1;
  }
  return result;
}

CFIndex FigID3MetadataGetKeyCount(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFIndex Count;
  __CFSet *Mutable;
  const __CFAllocator *v8;
  int v10;

  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v5 = DerivedStorage, a2) && !CFEqual(a2, CFSTR("org.id3")))
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!*(_BYTE *)(v5 + 64))
  {
    if (!ID3ParserGetProperty())
    {
      Mutable = 0;
      do
      {
        if (!Mutable)
        {
          v8 = CFGetAllocator(a1);
          Mutable = CFSetCreateMutable(v8, 0, 0);
        }
        CFSetAddValue(Mutable, 0);
        ++v10;
      }
      while (!ID3ParserGetProperty());
      if (Mutable)
      {
        Count = CFSetGetCount(Mutable);
        *(_QWORD *)(v5 + 56) = Count;
        *(_BYTE *)(v5 + 64) = 1;
        CFRelease(Mutable);
        return Count;
      }
    }
    return 0;
  }
  return *(_QWORD *)(v5 + 56);
}

uint64_t FigID3MetadataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, CFNumberRef *a5)
{
  uint64_t valuePtr;
  int v10;
  uint64_t v11;

  v11 = 0;
  if (!CMBaseObjectGetDerivedStorage() || !a5 || a2 && !CFEqual(a2, CFSTR("org.id3")))
    return FigSignalErrorAt();
  v10 = 0;
  valuePtr = 0;
  while (!ID3ParserGetProperty())
  {
    if (HIDWORD(v11) == a3)
    {
      *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      return 0;
    }
    ++HIDWORD(v11);
    v10 = 0;
    valuePtr = 0;
  }
  return 0;
}

const __CFString *FigID3MetadataGetItemCount(uint64_t a1, const void *a2, const __CFString *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  uint64_t v8;
  unsigned int valuePtr;

  valuePtr = 0;
  if (!CMBaseObjectGetDerivedStorage())
    goto LABEL_20;
  if (!a2)
  {
    if (a3)
      goto LABEL_20;
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("comn")))
  {
    if (!a3)
    {
      FigSignalErrorAt();
      return a3;
    }
    if (FigID3MetadataCommonKeyToOSTypeKey(a3, &valuePtr))
      goto LABEL_6;
    return 0;
  }
  if (!CFEqual(a2, CFSTR("org.id3")))
  {
LABEL_20:
    FigSignalErrorAt();
    return 0;
  }
  if (!a3)
  {
LABEL_11:
    a3 = 0;
    ID3ParserGetProperty();
    return a3;
  }
  v6 = CFGetTypeID(a3);
  if (v6 == CFStringGetTypeID())
  {
    if (!FigID3MetadataStringKeyToOSTypeKey(a3, &valuePtr))
      goto LABEL_20;
  }
  else
  {
    v7 = CFGetTypeID(a3);
    if (v7 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      goto LABEL_20;
  }
LABEL_6:
  v8 = valuePtr;
  a3 = 0;
  if (!ID3ParserGetProperty())
  {
    a3 = 0;
    do
    {
      ++HIDWORD(v8);
      a3 = (const __CFString *)((char *)a3 + 1);
    }
    while (!ID3ParserGetProperty());
  }
  return a3;
}

uint64_t FigID3MetadataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6, unint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  CFTypeRef *p_cf;
  int v16;
  CFTypeID v17;
  CFTypeRef v18;
  int v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  uint64_t CFStringFor3CCValue;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  uint64_t v27;
  const __CFString *v28;
  CFTypeID v29;
  CFTypeRef Value;
  const void *v31;
  const __CFString *v32;
  const __CFString *v33;
  CFTypeID v34;
  const void *v35;
  const __CFString *v36;
  const __CFString *v37;
  CFTypeID v38;
  CFTypeID v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  const __CFURL *v43;
  const __CFURL *v44;
  const __CFURL *v45;
  CFTypeID TypeID;
  CFComparisonResult v47;
  CFComparisonResult v48;
  CFTypeRef v49;
  CFTypeRef cf;
  int v52;
  const void *v53;
  int v54;
  uint64_t valuePtr;
  int v56;
  uint64_t v57;
  unsigned int v58;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!((unint64_t)a6 | a7))
  {
    v27 = FigSignalErrorAt();
    goto LABEL_92;
  }
  v14 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 65))
    p_cf = &cf;
  else
    p_cf = a6;
  v58 = 0;
  v57 = 0;
  if (!CMBaseObjectGetDerivedStorage())
    goto LABEL_52;
  if (!a2)
  {
    if (a3)
      goto LABEL_52;
    goto LABEL_12;
  }
  if (!CFEqual(a2, CFSTR("comn")))
  {
    if (!CFEqual(a2, CFSTR("org.id3")))
      goto LABEL_52;
    if (a3)
    {
      v17 = CFGetTypeID(a3);
      if (v17 == CFStringGetTypeID())
      {
        if (!FigID3MetadataStringKeyToOSTypeKey(a3, &v58))
          goto LABEL_52;
      }
      else
      {
        v38 = CFGetTypeID(a3);
        if (v38 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v58))
          goto LABEL_52;
      }
LABEL_10:
      LODWORD(v57) = v58;
    }
LABEL_12:
    v56 = 0;
    valuePtr = 0;
    v54 = 12;
    v16 = 0;
    if (!ID3ParserGetProperty())
    {
      while (HIDWORD(v57) != a4)
      {
        ++HIDWORD(v57);
        v56 = 0;
        valuePtr = 0;
        v54 = 12;
        if (ID3ParserGetProperty())
        {
          v16 = 0;
          goto LABEL_26;
        }
      }
      if (p_cf)
      {
        v53 = 0;
        v52 = 8;
        if (ID3ParserGetProperty())
          goto LABEL_52;
        *p_cf = v53;
      }
      v16 = valuePtr;
    }
    goto LABEL_26;
  }
  if (a3)
  {
    if (!FigID3MetadataCommonKeyToOSTypeKey(a3, &v58))
    {
      v27 = 4294954691;
      goto LABEL_92;
    }
    goto LABEL_10;
  }
LABEL_52:
  v27 = FigSignalErrorAt();
  v16 = 0;
  if ((_DWORD)v27)
    goto LABEL_92;
LABEL_26:
  if (!*(_BYTE *)(v14 + 65))
  {
    LODWORD(valuePtr) = v16;
    if (a7)
    {
      Mutable = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)a7 = Mutable;
      if (!Mutable
        || (v24 = Mutable,
            (v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr)) == 0))
      {
LABEL_96:
        v27 = FigSignalErrorAt();
        if (!a6)
          goto LABEL_92;
        goto LABEL_88;
      }
      v26 = v25;
      CFDictionaryAddValue(v24, CFSTR("key"), v25);
      CFRelease(v26);
      CFDictionaryAddValue(v24, CFSTR("keyspace"), CFSTR("org.id3"));
    }
    v27 = 0;
    if (!a6)
      goto LABEL_92;
    goto LABEL_88;
  }
  v18 = cf;
  v19 = *(_DWORD *)(v14 + 40);
  v20 = CFDictionaryCreateMutable(a5, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v20)
    goto LABEL_96;
  v21 = v20;
  if (v19 == 2)
    CFStringFor3CCValue = FigGetCFStringFor3CCValue();
  else
    CFStringFor3CCValue = FigGetCFStringForOSTypeValue();
  v28 = (const __CFString *)CFStringFor3CCValue;
  if (!CFStringFor3CCValue)
  {
    v27 = FigSignalErrorAt();
    goto LABEL_87;
  }
  CFDictionaryAddValue(v21, CFSTR("keyspace"), CFSTR("org.id3"));
  CFDictionaryAddValue(v21, CFSTR("key"), v28);
  if (!v18)
  {
    Value = 0;
    goto LABEL_77;
  }
  v29 = CFGetTypeID(v18);
  if (v29 != CFDictionaryGetTypeID())
  {
    Value = CFRetain(v18);
    v36 = 0;
    v37 = 0;
    goto LABEL_64;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("data"));
  if (Value || (Value = CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("text"))) != 0)
    CFRetain(Value);
  v31 = CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("identifier"));
  if (v31)
    CFDictionaryAddValue(v21, CFSTR("info"), v31);
  v32 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("language"));
  if (v32)
  {
    v33 = v32;
    v34 = CFGetTypeID(v32);
    if (v34 == CFNumberGetTypeID())
    {
      v35 = CFRetain(v33);
      goto LABEL_56;
    }
    v39 = CFGetTypeID(v33);
    if (v39 == CFStringGetTypeID())
    {
      LOWORD(valuePtr) = FigMetadataGetPackedISO639_2T(v33);
      v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
LABEL_56:
      v40 = v35;
      if (v35)
      {
        CFDictionaryAddValue(v21, CFSTR("languageCode"), v35);
        CFRelease(v40);
      }
    }
  }
  v36 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("MIME"));
  if (v36)
  {
    CFDictionaryAddValue(v21, CFSTR("dataType"), v36);
    CFDictionaryAddValue(v21, CFSTR("dataTypeNamespace"), CFSTR("org.iana.media-type"));
  }
  v41 = CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("picturetype"));
  if (v41)
    CFDictionaryAddValue(v21, CFSTR("pictureType"), v41);
  v37 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("filename"));
  if (v37)
    CFDictionaryAddValue(v21, CFSTR("name"), v37);
LABEL_64:
  if (Value)
  {
    v42 = CFURLGetTypeID();
    if (v42 != CFGetTypeID(Value))
    {
      TypeID = CFDataGetTypeID();
      if (TypeID != CFGetTypeID(Value))
        goto LABEL_77;
      v47 = CFStringCompare(v28, CFSTR("GEOB"), 0);
      if (!v36)
        goto LABEL_77;
      if (v47)
        goto LABEL_77;
      v48 = CFStringCompare(v36, CFSTR("application/xml"), 1uLL);
      if (!v37)
        goto LABEL_77;
      if (v48)
        goto LABEL_77;
      if (!CFStringHasSuffix(v37, CFSTR(".plist")))
        goto LABEL_77;
      v45 = (const __CFURL *)CFPropertyListCreateWithData(a5, (CFDataRef)Value, 0, 0, 0);
      v44 = v45;
      if (!v45)
        goto LABEL_77;
      goto LABEL_68;
    }
    v43 = CFURLCopyAbsoluteURL((CFURLRef)Value);
    if (v43)
    {
      v44 = v43;
      v45 = (const __CFURL *)CFURLGetString(v43);
      if (!v45)
      {
LABEL_69:
        CFRelease(v44);
        goto LABEL_77;
      }
LABEL_68:
      CFRetain(v45);
      CFRelease(Value);
      Value = v45;
      goto LABEL_69;
    }
  }
LABEL_77:
  if (a6)
  {
    if (Value)
      v49 = CFRetain(Value);
    else
      v49 = 0;
    *a6 = v49;
  }
  if (a7)
    *(_QWORD *)a7 = CFRetain(v21);
  if (Value)
    CFRelease(Value);
  v27 = 0;
LABEL_87:
  CFRelease(v21);
  if (!a6)
    goto LABEL_92;
LABEL_88:
  if (!(_DWORD)v27)
  {
    if (*a6)
      v27 = 0;
    else
      v27 = 4294954689;
  }
LABEL_92:
  if (cf)
    CFRelease(cf);
  return v27;
}

uint64_t FigPlayerServerStart()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v2;
  uint64_t v3;
  uint64_t started;

  FigPlayerCelesteOneTimeInitialization();
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v2 = Mutable;
  FigCFDictionarySetValue();
  v3 = FigXPCServerStart();
  if ((_DWORD)v3 || (v3 = FigXPCPlaybackCoordinatorServerStartAsSubserver(gPlayerServer), (_DWORD)v3))
  {
    started = v3;
  }
  else
  {
    started = FigXPCImageQueueGaugeServerStartAsSubserver(gPlayerServer);
    if (!(_DWORD)started)
      FigXPCServerActivate();
  }
  CFRelease(v2);
  return started;
}

uint64_t HandlePlayerServerMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int OpCode;
  int v7;
  int CacheFileSize;
  int v9;
  CFTypeID v10;
  CFTypeID v11;
  _BYTE *v12;
  dispatch_queue_t v13;
  uint64_t TargetingWorkloopWithPriority;
  const __CFAllocator *v15;
  uint64_t MutableCopy;
  __CFDictionary *v17;
  CFDataRef v18;
  CFDataRef v19;
  SecTaskRef v20;
  int v21;
  __CFDictionary *v22;
  int v23;
  CFTypeRef v24;
  int v25;
  _BOOL4 v26;
  const void *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  const __CFString *v34;
  CFTypeID v35;
  CFDictionaryRef v36;
  int v37;
  unsigned int v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  CFTypeID v43;
  CFTypeID v44;
  CFTypeID v45;
  int v46;
  CFTypeID v47;
  _BOOL4 v48;
  CFTypeID v49;
  CFTypeID v50;
  CFTypeID v51;
  int64_t int64;
  int64_t v53;
  _BOOL4 v54;
  CFTypeID v55;
  uint64_t v56;
  NSObject **v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  CFTypeID v68;
  CFTypeID v69;
  CFTypeID v70;
  CFTypeID v71;
  int64_t v72;
  int v73;
  CFTypeID v74;
  CFTypeID v75;
  CFTypeID v76;
  const __CFString *v77;
  CFTypeID v78;
  int v79;
  CFTypeID v80;
  CFTypeID v81;
  CFTypeID v82;
  int v83;
  const void *v84;
  CMVideoCodecType uint64;
  int v86;
  int v87;
  int32_t v88;
  int32_t v89;
  OSStatus v90;
  const void *v91;
  CFTypeID v92;
  NSObject *v93;
  const void *v94;
  uint64_t v95;
  int v97;
  xpc_object_t xdict;
  int v99;
  _QWORD block[10];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  audit_token_t bytes;
  CFTypeRef v113;
  CFStringRef theString;
  CFDictionaryRef theDict;
  audit_token_t v116;
  CFTypeRef v117;
  uint64_t v118;
  CFDictionaryRef value[5];
  CFTypeRef v120;
  _OWORD cf[5];
  __int128 __str;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v108 = 0;
  v109 = &v108;
  v110 = 0x2000000000;
  v111 = 0;
  v107 = 0;
  v103 = 0;
  v104 = &v103;
  v105 = 0x2000000000;
  v106 = 0;
  v102 = 0;
  if (!a2 || !a3)
    goto LABEL_243;
  OpCode = FigXPCMessageGetOpCode();
  *((_DWORD *)v109 + 6) = OpCode;
  if (OpCode)
    goto LABEL_245;
  if (xpc_dictionary_get_BOOL(a2, "IsFigSharedMessage"))
  {
    LODWORD(v120) = 0;
    v7 = FigXPCMessageGetOpCode();
    if (v7)
    {
      CacheFileSize = v7;
      goto LABEL_237;
    }
    CacheFileSize = -16158;
    if ((int)v120 <= 1399157346)
    {
      if ((int)v120 <= 1399025523)
      {
        if ((int)v120 <= 1399023981)
        {
          if ((_DWORD)v120 != 1398961507)
          {
            if ((_DWORD)v120 == 1399023219)
            {
              *(_QWORD *)&__str = 0;
              *(_QWORD *)&cf[0] = 0;
              value[0] = 0;
              v9 = FigXPCMessageCopyCFString();
              if (v9)
                goto LABEL_196;
              if (!(_QWORD)__str || (v10 = CFGetTypeID((CFTypeRef)__str), v10 == CFStringGetTypeID()))
              {
                v9 = FigXPCMessageCopyCFString();
                if (!v9)
                {
                  if (*(_QWORD *)&cf[0])
                  {
                    v11 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
                    if (v11 == CFStringGetTypeID())
                    {
                      CacheFileSize = FigShared_GetCacheFileSize((const __CFString *)__str, *(uint64_t *)&cf[0], (int64_t *)value);
                      if (!CacheFileSize)
                        xpc_dictionary_set_int64(a3, "UsedFileSize", (int64_t)value[0]);
LABEL_197:
                      if ((_QWORD)__str)
                        CFRelease((CFTypeRef)__str);
                      v36 = *(CFDictionaryRef *)&cf[0];
                      if (!*(_QWORD *)&cf[0])
                        goto LABEL_237;
                      goto LABEL_236;
                    }
                  }
                  goto LABEL_258;
                }
LABEL_196:
                CacheFileSize = v9;
                goto LABEL_197;
              }
LABEL_258:
              v9 = FigSignalErrorAt();
              goto LABEL_196;
            }
            goto LABEL_237;
          }
          v29 = CMBeginUpdatingIncrementalCodeCoverageData();
          v58 = MXBeginUpdatingIncrementalCodeCoverageData();
          if (!v29)
            v29 = v58;
          v59 = VTBeginUpdatingIncrementalCodeCoverageData();
          if (!v29)
            v29 = v59;
          v32 = MTBeginUpdatingIncrementalCodeCoverageData();
LABEL_134:
          if (v29)
            CacheFileSize = v29;
          else
            CacheFileSize = v32;
          goto LABEL_237;
        }
        if ((_DWORD)v120 != 1399023982)
        {
          if ((_DWORD)v120 != 1399023983)
            goto LABEL_237;
          *(_QWORD *)&__str = 0;
          *(_QWORD *)&cf[0] = 0;
          value[0] = 0;
          *(_QWORD *)v116.val = 0;
          v42 = FigXPCMessageCopyCFString();
          if (v42)
            goto LABEL_163;
          if (!(_QWORD)__str || (v43 = CFGetTypeID((CFTypeRef)__str), v43 == CFStringGetTypeID()))
          {
            v42 = FigXPCMessageCopyCFString();
            if (v42)
              goto LABEL_163;
            if (*(_QWORD *)&cf[0])
            {
              v44 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
              if (v44 == CFStringGetTypeID())
              {
                v42 = FigXPCMessageCopyCFURL();
                if (v42)
                  goto LABEL_163;
                if (value[0])
                {
                  v45 = CFGetTypeID(value[0]);
                  if (v45 == CFURLGetTypeID())
                  {
                    v42 = FigShared_CheckIntoAndOutOfDiskCache((const __CFString *)__str, *(const __CFString **)&cf[0], value[0], (const void **)&v116);
                    if (v42)
                      goto LABEL_163;
                    goto LABEL_162;
                  }
                }
              }
            }
          }
          goto LABEL_262;
        }
        *(_QWORD *)&__str = 0;
        *(_QWORD *)&cf[0] = 0;
        value[0] = 0;
        v73 = FigXPCMessageCopyCFString();
        if (v73)
          goto LABEL_188;
        if ((_QWORD)__str)
        {
          v74 = CFGetTypeID((CFTypeRef)__str);
          if (v74 != CFStringGetTypeID())
            goto LABEL_263;
        }
        v73 = FigXPCMessageCopyCFString();
        if (v73)
          goto LABEL_188;
        if (!*(_QWORD *)&cf[0])
          goto LABEL_263;
        v75 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
        if (v75 != CFStringGetTypeID())
          goto LABEL_263;
        v73 = FigXPCMessageCopyCFURL();
        if (v73)
          goto LABEL_188;
        if (value[0] && (v76 = CFGetTypeID(value[0]), v76 == CFURLGetTypeID()))
          v73 = FigShared_CheckIntoDiskCache((const __CFString *)__str, *(const __CFString **)&cf[0], value[0]);
        else
LABEL_263:
          v73 = FigSignalErrorAt();
LABEL_188:
        CacheFileSize = v73;
        if ((_QWORD)__str)
          CFRelease((CFTypeRef)__str);
        goto LABEL_233;
      }
      if ((int)v120 <= 1399025777)
      {
        if ((_DWORD)v120 == 1399025524)
        {
          *(_QWORD *)&__str = 0;
          *(_QWORD *)&cf[0] = 0;
          value[0] = 0;
          *(_QWORD *)v116.val = 0;
          v42 = FigXPCMessageCopyCFString();
          if (v42)
            goto LABEL_163;
          if (!(_QWORD)__str || (v68 = CFGetTypeID((CFTypeRef)__str), v68 == CFStringGetTypeID()))
          {
            v42 = FigXPCMessageCopyCFString();
            if (v42)
              goto LABEL_163;
            if (*(_QWORD *)&cf[0])
            {
              v69 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
              if (v69 == CFStringGetTypeID())
              {
                v42 = FigShared_CheckOutOfDiskCache((const __CFString *)__str, *(const void **)&cf[0], (CFTypeRef *)value, (const void **)&v116);
                if (v42 || (v42 = FigXPCMessageSetCFURL()) != 0)
                {
LABEL_163:
                  CacheFileSize = v42;
                  if ((_QWORD)__str)
                    CFRelease((CFTypeRef)__str);
                  if (*(_QWORD *)&cf[0])
                    CFRelease(*(CFTypeRef *)&cf[0]);
                  if (value[0])
                    CFRelease(value[0]);
                  v36 = *(CFDictionaryRef *)v116.val;
                  if (!*(_QWORD *)v116.val)
                    goto LABEL_237;
                  goto LABEL_236;
                }
LABEL_162:
                v42 = FigXPCMessageSetCFString();
                goto LABEL_163;
              }
            }
          }
LABEL_262:
          v42 = FigSignalErrorAt();
          goto LABEL_163;
        }
        if ((_DWORD)v120 != 1399025761)
          goto LABEL_237;
        *(_QWORD *)&__str = 0;
        *(_QWORD *)&cf[0] = 0;
        value[0] = 0;
        *(_QWORD *)v116.val = 0;
        LOBYTE(v118) = 0;
        *(_QWORD *)bytes.val = 0;
        v33 = FigXPCMessageCopyCFString();
        if (v33)
          goto LABEL_270;
        v34 = (const __CFString *)__str;
        if ((_QWORD)__str)
        {
          v35 = CFGetTypeID((CFTypeRef)__str);
          if (v35 != CFStringGetTypeID())
          {
            v33 = FigSignalErrorAt();
            goto LABEL_270;
          }
          v34 = (const __CFString *)__str;
        }
        v33 = FigShared_CopyDiskCacheParams(v34, (int64_t *)cf, (int64_t *)value, (int64_t *)&v116, (BOOL *)&v118, &bytes);
        if (!v33)
        {
          CacheFileSize = FigXPCMessageSetCFURL();
          if (!CacheFileSize)
          {
            xpc_dictionary_set_int64(a3, "UsedFileSize", *(int64_t *)&cf[0]);
            xpc_dictionary_set_int64(a3, "TargetSize", (int64_t)value[0]);
            xpc_dictionary_set_int64(a3, "TargetFileSize", *(int64_t *)v116.val);
            xpc_dictionary_set_BOOL(a3, "AutomaticallyManagesSize", (_BYTE)v118 != 0);
          }
LABEL_64:
          if ((_QWORD)__str)
            CFRelease((CFTypeRef)__str);
          v36 = *(CFDictionaryRef *)bytes.val;
          if (!*(_QWORD *)bytes.val)
            goto LABEL_237;
LABEL_236:
          CFRelease(v36);
          goto LABEL_237;
        }
LABEL_270:
        CacheFileSize = v33;
        goto LABEL_64;
      }
      if ((_DWORD)v120 != 1399025778)
      {
        if ((_DWORD)v120 == 1399088739)
        {
          *(_QWORD *)&__str = 0;
          *(_QWORD *)&cf[0] = 0;
          v9 = FigXPCMessageCopyCFString();
          if (v9)
            goto LABEL_196;
          if (!(_QWORD)__str || (v49 = CFGetTypeID((CFTypeRef)__str), v49 == CFStringGetTypeID()))
          {
            v9 = FigXPCMessageCopyCFString();
            if (v9)
              goto LABEL_196;
            if (*(_QWORD *)&cf[0])
            {
              v50 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
              if (v50 == CFStringGetTypeID())
              {
                v9 = FigShared_DeleteFromDiskCache((const __CFString *)__str, *(const __CFString **)&cf[0]);
                goto LABEL_196;
              }
            }
          }
          goto LABEL_258;
        }
LABEL_237:
        *((_DWORD *)v109 + 6) = CacheFileSize;
        goto LABEL_245;
      }
      *(_QWORD *)&__str = 0;
      *(_QWORD *)&cf[0] = 0;
      value[0] = 0;
      *(_QWORD *)v116.val = 0;
      v79 = FigXPCMessageCopyCFString();
      if (v79)
        goto LABEL_265;
      if ((_QWORD)__str)
      {
        v80 = CFGetTypeID((CFTypeRef)__str);
        if (v80 != CFStringGetTypeID())
          goto LABEL_264;
      }
      v79 = FigXPCMessageCopyCFString();
      if (!v79)
      {
        if (!*(_QWORD *)&cf[0] || (v81 = CFGetTypeID(*(CFTypeRef *)&cf[0]), v81 != CFStringGetTypeID()))
        {
LABEL_264:
          v79 = FigSignalErrorAt();
          goto LABEL_265;
        }
        v79 = FigXPCMessageCopyCFString();
        if (!v79)
        {
          if (*(_QWORD *)&cf[0])
          {
            v82 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
            if (v82 == CFStringGetTypeID())
            {
              v83 = FigShared_CopyCacheProperty((const __CFString *)__str, *(const void **)&cf[0], value[0], (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (CFNumberRef *)&v116);
              v84 = *(const void **)v116.val;
              if (v83)
              {
                CacheFileSize = v83;
                if (!*(_QWORD *)v116.val)
                  goto LABEL_213;
              }
              else
              {
                CacheFileSize = FigXPCMessageSetCFObject();
                v84 = *(const void **)v116.val;
                if (!*(_QWORD *)v116.val)
                {
LABEL_213:
                  if (value[0])
                    CFRelease(value[0]);
                  if (*(_QWORD *)&cf[0])
                    CFRelease(*(CFTypeRef *)&cf[0]);
                  goto LABEL_217;
                }
              }
              CFRelease(v84);
              goto LABEL_213;
            }
          }
          goto LABEL_264;
        }
      }
LABEL_265:
      CacheFileSize = v79;
      goto LABEL_213;
    }
    if ((int)v120 <= 1400005473)
    {
      if ((int)v120 > 1399415922)
      {
        if ((_DWORD)v120 == 1399415923)
        {
          *(_QWORD *)&__str = 0;
          *(_QWORD *)&cf[0] = 0;
          v9 = FigXPCMessageCopyCFString();
          if (v9)
            goto LABEL_196;
          v77 = (const __CFString *)__str;
          if ((_QWORD)__str)
          {
            v78 = CFGetTypeID((CFTypeRef)__str);
            if (v78 != CFStringGetTypeID())
              goto LABEL_258;
            v77 = (const __CFString *)__str;
          }
          v9 = FigShared_CopyDiskCacheCheckedInIDs(v77, (CFMutableArrayRef *)cf);
          if (!v9)
            v9 = FigXPCMessageSetCFArray();
          goto LABEL_196;
        }
        if ((_DWORD)v120 != 1399679858)
          goto LABEL_237;
        *(_QWORD *)&__str = 0;
        *(_QWORD *)&cf[0] = 0;
        v46 = FigXPCMessageCopyCFString();
        if (v46)
          goto LABEL_125;
        if (!(_QWORD)__str || (v47 = CFGetTypeID((CFTypeRef)__str), v47 == CFStringGetTypeID()))
        {
          v48 = xpc_dictionary_get_BOOL(a2, "AllAvailable");
          CacheFileSize = FigShared_MakeRoomInDiskCache((const __CFString *)__str, v48, (int64_t *)cf);
          if (!CacheFileSize)
            xpc_dictionary_set_int64(a3, "BytesMadeAvailable", *(int64_t *)&cf[0]);
LABEL_217:
          v36 = (CFDictionaryRef)__str;
          if (!(_QWORD)__str)
            goto LABEL_237;
          goto LABEL_236;
        }
      }
      else
      {
        if ((_DWORD)v120 != 1399157347)
        {
          if ((_DWORD)v120 != 1399223651)
            goto LABEL_237;
          v29 = CMFinishUpdatingIncrementalCodeCoverageData();
          v30 = MXFinishUpdatingIncrementalCodeCoverageData();
          if (!v29)
            v29 = v30;
          v31 = VTFinishUpdatingIncrementalCodeCoverageData();
          if (!v29)
            v29 = v31;
          v32 = MTFinishUpdatingIncrementalCodeCoverageData();
          goto LABEL_134;
        }
        *(_QWORD *)&__str = 0;
        v46 = FigXPCMessageCopyCFString();
        if (v46)
          goto LABEL_125;
        if ((_QWORD)__str)
        {
          v60 = CMSetCodeCoverageFilePathPattern();
          v61 = MXSetCodeCoverageFilePathPattern();
          if (!v60)
            v60 = v61;
          v62 = VTSetCodeCoverageFilePathPattern();
          if (!v60)
            v60 = v62;
          v63 = MTSetCodeCoverageFilePathPattern();
          if (!v60)
            v60 = v63;
          v64 = CMEnsureReadyToCollectIncrementalCoverageData();
          if (!v60)
            v60 = v64;
          v65 = MXEnsureReadyToCollectIncrementalCoverageData();
          if (!v60)
            v60 = v65;
          v66 = VTEnsureReadyToCollectIncrementalCoverageData();
          if (!v60)
            v60 = v66;
          v67 = MTEnsureReadyToCollectIncrementalCoverageData();
          if (v60)
            CacheFileSize = v60;
          else
            CacheFileSize = v67;
          goto LABEL_217;
        }
      }
      goto LABEL_266;
    }
    if ((int)v120 > 1400074336)
    {
      if ((_DWORD)v120 != 1400267632)
      {
        if ((_DWORD)v120 != 1400074337)
          goto LABEL_237;
        *(_QWORD *)&__str = 0;
        v46 = FigXPCMessageCopyCFString();
        if (v46)
          goto LABEL_125;
        if (!(_QWORD)__str || (v51 = CFGetTypeID((CFTypeRef)__str), v51 == CFStringGetTypeID()))
        {
          int64 = xpc_dictionary_get_int64(a2, "TargetSize");
          v53 = xpc_dictionary_get_int64(a2, "TargetFileSize");
          v54 = xpc_dictionary_get_BOOL(a2, "AutomaticallyManagesSize");
          v46 = FigShared_SetDiskCacheParams((const __CFString *)__str, int64, v53, v54);
LABEL_125:
          CacheFileSize = v46;
          goto LABEL_217;
        }
LABEL_266:
        v46 = FigSignalErrorAt();
        goto LABEL_125;
      }
      *(_QWORD *)&cf[0] = 0;
      value[0] = 0;
      v37 = FigXPCMessageCopyCFDictionary();
      if (!v37)
      {
        uint64 = xpc_dictionary_get_uint64(a2, "VideoCodecType");
        v86 = xpc_dictionary_get_int64(a2, "Width");
        v87 = xpc_dictionary_get_int64(a2, "Height");
        *(_QWORD *)&__str = 0;
        if (v86 <= 0)
          v88 = 100;
        else
          v88 = v86;
        if (v87 <= 0)
          v89 = 100;
        else
          v89 = v87;
        v90 = VTCompressionSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v88, v89, uint64, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (VTCompressionOutputCallback)fs_dummyEncodedFrameCallback, 0, (VTCompressionSessionRef *)&__str);
        if (!v90)
          v90 = VTSessionCopySupportedPropertyDictionary((VTSessionRef)__str, value);
        CacheFileSize = v90;
        VTCompressionSessionInvalidate((VTCompressionSessionRef)__str);
        if ((_QWORD)__str)
          CFRelease((CFTypeRef)__str);
        if (CacheFileSize)
        {
LABEL_233:
          if (*(_QWORD *)&cf[0])
            CFRelease(*(CFTypeRef *)&cf[0]);
          v36 = value[0];
          if (!value[0])
            goto LABEL_237;
          goto LABEL_236;
        }
        v37 = FigXPCMessageSetCFDictionary();
      }
    }
    else
    {
      if ((_DWORD)v120 == 1400005474)
      {
        *(_QWORD *)&__str = 0;
        *(_QWORD *)&cf[0] = 0;
        v9 = FigXPCMessageCopyCFString();
        if (v9)
          goto LABEL_196;
        if (!(_QWORD)__str || (v70 = CFGetTypeID((CFTypeRef)__str), v70 == CFStringGetTypeID()))
        {
          v9 = FigXPCMessageCopyCFString();
          if (v9)
            goto LABEL_196;
          if (*(_QWORD *)&cf[0])
          {
            v71 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
            if (v71 == CFStringGetTypeID())
            {
              v72 = xpc_dictionary_get_int64(a2, "DesiredByteSize");
              v9 = FigShared_ReserveDiskCacheBacking((const __CFString *)__str, *(const void **)&cf[0], v72);
              goto LABEL_196;
            }
          }
        }
        goto LABEL_258;
      }
      if ((_DWORD)v120 != 1400009836)
        goto LABEL_237;
      *(_QWORD *)&cf[0] = 0;
      value[0] = 0;
      __str = 0uLL;
      v37 = FigXPCMessageCopyCFString();
      if (!v37)
      {
        FigIsItOKToLogURLs();
        v37 = ObtainSinfInfoFromMedia(*(CFStringRef *)&cf[0], (uint64_t)value);
        if (!v37)
        {
          CacheFileSize = PPGetRentalInfoFromSinfInfo(value[0], (uint64_t)&__str);
          if (!CacheFileSize)
          {
            xpc_dictionary_set_uint64(a3, "RentalStartTime", __str);
            xpc_dictionary_set_uint64(a3, "RentalDuration", DWORD1(__str));
            xpc_dictionary_set_uint64(a3, "PlaybackStartTime", DWORD2(__str));
            xpc_dictionary_set_uint64(a3, "PlaybackDuration", HIDWORD(__str));
          }
          goto LABEL_233;
        }
      }
    }
    CacheFileSize = v37;
    goto LABEL_233;
  }
  if (v107 != 1668441400)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    v25 = FigXPCServerLookupAndRetainAssociatedObject();
    *((_DWORD *)v109 + 6) = v25;
    if (v25)
      goto LABEL_245;
    v26 = FigXPCPlaybackCoordinatorServerHandlesMessagesForObject((const void *)v104[3]);
    v27 = (const void *)v104[3];
    if (v26)
    {
      v28 = FigXPCPlaybackCoordinatorServerHandleMessage(v27);
LABEL_244:
      *((_DWORD *)v109 + 6) = v28;
      goto LABEL_245;
    }
    v38 = FigXPCImageQueueGaugeServerHandlesMessagesForObject(v27);
    v39 = (const void *)v104[3];
    if (v38)
    {
      v28 = FigXPCImageQueueGaugeServerHandleMessage(v39);
      goto LABEL_244;
    }
    if (v39)
    {
      v55 = CFGetTypeID(v39);
      if (v55 == FigPlayerGetTypeID())
      {
        v56 = v102;
        v57 = (NSObject **)(v102 + 24);
        goto LABEL_241;
      }
      v91 = (const void *)v104[3];
      if (v91)
      {
        v92 = CFGetTypeID(v91);
        if (v92 == FigPlaybackItemGetTypeID())
        {
          v56 = v102;
          v57 = (NSObject **)(v102 + 56);
LABEL_241:
          v93 = *v57;
          if (*v57)
          {
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = __HandlePlayerServerMessage_block_invoke;
            block[3] = &unk_1E2F9F8C8;
            v101 = v107;
            block[4] = &v108;
            block[5] = &v103;
            block[6] = v56;
            block[7] = a1;
            block[8] = a2;
            block[9] = a3;
            dispatch_sync(v93, block);
            goto LABEL_245;
          }
        }
      }
    }
LABEL_243:
    v28 = FigSignalErrorAt();
    goto LABEL_244;
  }
  v117 = 0;
  v118 = 0;
  memset(&v116, 0, sizeof(v116));
  theString = 0;
  theDict = 0;
  v113 = 0;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  __str = 0u;
  memset(cf, 0, sizeof(cf));
  v12 = malloc_type_calloc(1uLL, 0x68uLL, 0x10600403C6B92DCuLL);
  if (!v12)
  {
    v97 = FigSignalErrorAt();
    if (v97)
    {
      v21 = v97;
      v12 = 0;
      v22 = 0;
      goto LABEL_81;
    }
  }
  FigXPCMessageCopyCFDictionary();
  v12[80] = 0;
  if (theDict && CFDictionaryGetValueIfPresent(theDict, CFSTR("LoggingIdentifier"), (const void **)&theString))
    CFStringGetCString(theString, v12 + 80, 10, 0x600u);
  snprintf((char *)&__str, 0x50uLL, "com.apple.coremedia.playerserver.invalidation.%s", v12 + 80);
  if (serverXPCPlayer_getSharedInvalidationQueue_onceToken != -1)
    dispatch_once(&serverXPCPlayer_getSharedInvalidationQueue_onceToken, &__block_literal_global_49);
  v13 = dispatch_queue_create_with_target_V2((const char *)&__str, 0, (dispatch_queue_t)serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue);
  *((_QWORD *)v12 + 2) = v13;
  if (!v13
    || (snprintf((char *)&__str, 0x50uLL, "com.apple.coremedia.playerserver.asynccontrol.%s", v12 + 80),
        TargetingWorkloopWithPriority = FigDispatchQueueCreateTargetingWorkloopWithPriority(),
        (*((_QWORD *)v12 + 3) = TargetingWorkloopWithPriority) == 0))
  {
    v22 = 0;
    goto LABEL_251;
  }
  xdict = a3;
  v99 = xpc_dictionary_get_uint64(a2, "EngineTopology");
  xpc_dictionary_get_BOOL(a2, "ClientSDKVersion2015AndLater");
  xpc_connection_get_audit_token();
  FigXPCMessageCopyCFString();
  bytes = v116;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  v120 = 0;
  if (MutableCopy)
  {
    v17 = (__CFDictionary *)MutableCopy;
    FigCFDictionarySetBoolean();
    v18 = CFDataCreate(v15, (const UInt8 *)&bytes, 32);
    if (!v18)
    {
      v21 = FigSignalErrorAt();
      v20 = v17;
      v17 = 0;
      goto LABEL_35;
    }
    v19 = v18;
    CFDictionarySetValue(v17, CFSTR("ClientAuditToken"), v18);
    *(audit_token_t *)value = bytes;
    FigServer_GetClientPIDFromAuditToken();
    FigCFDictionarySetInt32();
    FigCFDictionarySetValue();
    *(audit_token_t *)value = bytes;
    v20 = SecTaskCreateWithAuditToken(v15, (audit_token_t *)value);
    if (v20)
    {
      CFDictionarySetValue(v17, CFSTR("ClientSecTask"), v20);
      FigCFDictionarySetBoolean();
      if (VTIsSecTaskEntitledForVP9Decode())
        CFDictionarySetValue(v17, CFSTR("AllowAlternateDecoderSelection"), (const void *)*MEMORY[0x1E0C9AE50]);
      v21 = FigDispatchQueueHolderCreateWithDispatchQueue();
      if (!v21)
      {
        CFDictionarySetValue(v17, CFSTR("AsynchronousControlQueueHolder"), v120);
        CFRelease(v19);
        goto LABEL_35;
      }
    }
    else
    {
      v21 = FigSignalErrorAt();
    }
    CFRelease(v17);
    CFRelease(v19);
    v17 = 0;
    v22 = 0;
    if (!v20)
    {
LABEL_36:
      if (v120)
        CFRelease(v120);
      if (v21)
        goto LABEL_81;
      goto LABEL_39;
    }
LABEL_35:
    CFRelease(v20);
    v22 = v17;
    goto LABEL_36;
  }
  v21 = FigSignalErrorAt();
  v22 = 0;
  if (v21)
    goto LABEL_81;
LABEL_39:
  v23 = FigSharedPlayerCreateWithOptions(v15, v99 | 0x810u, v22, &v117);
  if (v23)
    goto LABEL_252;
  v24 = v117;
  if (v117)
    v24 = CFRetain(v117);
  *((_QWORD *)v12 + 1) = v24;
  v23 = FigXPCServerAssociateObjectWithConnection();
  if (v23)
    goto LABEL_252;
  *((_QWORD *)v12 + 7) = FigSimpleMutexCreate();
  *((_QWORD *)v12 + 8) = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v40 = v118;
  *(_QWORD *)v12 = v118;
  xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0], v40);
  if (_os_feature_enabled_impl())
  {
    snprintf((char *)cf, 0x50uLL, "Create %s", v12 + 80);
    xpc_connection_get_pid(a1);
    v41 = FigOSTransactionCreateWithProcessName();
    *((_QWORD *)v12 + 12) = v41;
    if (!v41)
    {
LABEL_251:
      v23 = FigSignalErrorAt();
LABEL_252:
      v21 = v23;
      goto LABEL_81;
    }
  }
  v12 = 0;
  v21 = 0;
LABEL_81:
  DisposeServedPlayerState(v12);
  if (v117)
    CFRelease(v117);
  if (v22)
    CFRelease(v22);
  if (theDict)
    CFRelease(theDict);
  if (v113)
    CFRelease(v113);
  *((_DWORD *)v109 + 6) = v21;
LABEL_245:
  v94 = (const void *)v104[3];
  if (v94)
    CFRelease(v94);
  v95 = *((unsigned int *)v109 + 6);
  _Block_object_dispose(&v103, 8);
  _Block_object_dispose(&v108, 8);
  return v95;
}

uint64_t HandlePlayerServerNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[6];
  const void *v8;
  int v9;

  v9 = 0;
  v7[5] = 0;
  v8 = 0;
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    goto LABEL_7;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    goto LABEL_7;
  if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(v8))
  {
    OpCode = FigXPCPlaybackCoordinatorServerHandleNoReplyMessage(v8);
LABEL_7:
    v4 = OpCode;
    goto LABEL_8;
  }
  if (FigXPCImageQueueGaugeServerHandlesMessagesForObject(v8))
  {
    OpCode = FigXPCImageQueueGaugeServerHandleNoReplyMessage(v8);
    goto LABEL_7;
  }
  v4 = 4294951138;
LABEL_8:
  if (serverXPCPlayer_getSharedInvalidationQueue_onceToken != -1)
    dispatch_once(&serverXPCPlayer_getSharedInvalidationQueue_onceToken, &__block_literal_global_49);
  v5 = serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue;
  dispatch_retain((dispatch_object_t)serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __HandlePlayerServerNoReplyMessage_block_invoke;
  v7[3] = &__block_descriptor_tmp_127;
  v7[4] = v8;
  dispatch_async(v5, v7);
  dispatch_release(v5);
  return v4;
}

uint64_t serverXPCItem_HandleCopyImageQueueGaugeMessage(const void *a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4, void *a5)
{
  CFTypeID v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  if (a1 && (v10 = CFGetTypeID(a1), v10 == FigPlaybackItemGetTypeID()) && a4 && a5)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (!v12)
    {
      v14 = 4294954514;
      goto LABEL_12;
    }
    v13 = v12(FigBaseObject, a2, *MEMORY[0x1E0C9AE00], &cf);
    if (!(_DWORD)v13)
    {
      if (!cf || (v13 = FigXPCImageQueueGaugeServerAssociateCopiedNeighborImageQueueGauge(a3), !(_DWORD)v13))
      {
        xpc_dictionary_set_uint64(a5, (const char *)*MEMORY[0x1E0CA36A0], 0);
        v14 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  v14 = v13;
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v14;
}

void DisposeServedPlayerState(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  void *v11;
  _QWORD v12[6];

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      a1[1] = 0;
      v3 = a1[2];
      v4 = a1[3];
      a1[3] = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = __DisposeServedPlayerState_block_invoke;
      v12[3] = &__block_descriptor_tmp_114;
      v12[4] = v4;
      v12[5] = v2;
      dispatch_async(v3, v12);
    }
    v5 = a1[2];
    if (v5)
      dispatch_release(v5);
    v6 = a1[3];
    if (v6)
      dispatch_release(v6);
    FigSimpleMutexDestroy();
    v7 = (const void *)a1[8];
    if (v7)
    {
      CFRelease(v7);
      a1[8] = 0;
    }
    v8 = (const void *)a1[4];
    if (v8)
    {
      CFRelease(v8);
      a1[4] = 0;
    }
    v9 = (const void *)a1[5];
    if (v9)
    {
      CFRelease(v9);
      a1[5] = 0;
    }
    v10 = (const void *)a1[6];
    if (v10)
    {
      CFRelease(v10);
      a1[6] = 0;
    }
    v11 = (void *)a1[12];
    if (v11)
      os_release(v11);
    free(a1);
  }
}

uint64_t __serverXPCPlayer_getSharedInvalidationQueue_block_invoke()
{
  serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue = FigDispatchQueueCreateWithPriority();
  return FigWatchdogMonitorDispatchQueue();
}

uint64_t serverXPCPlayer_handlePlayerSetProperty(const void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  CFTypeID v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cf;
  char v18;

  v18 = 0;
  v16 = 0;
  cf = 0;
  if (!a1 || (v8 = CFGetTypeID(a1), v8 != FigPlayerGetTypeID()))
  {
    v9 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v9 = FPSupport_HandlePlayerSetPropertyAndCopyModification(0, a3, a4, a2, (uint64_t)serverXPCPlayer_handlePlayerSetPropertyGuts, &v18, &cf, &v16);
  if ((_DWORD)v9)
  {
LABEL_7:
    v14 = v9;
    goto LABEL_9;
  }
  if (v18)
  {
    v14 = 0;
  }
  else
  {
    v11 = v16;
    v10 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(a1);
    v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v13)
    {
      v9 = v13(FigBaseObject, v10, v11);
      goto LABEL_7;
    }
    v14 = 4294954514;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v14;
}

uint64_t serverXPCPlayer_handlePlayerSetPropertyGuts(int a1, int a2, const __CFString *a3, CFTypeRef cf, _BYTE *a5, const __CFString **a6, CFTypeRef *a7)
{
  CFTypeRef v11;
  const __CFString *v12;

  if (cf)
    v11 = CFRetain(cf);
  else
    v11 = 0;
  if (CFEqual(a3, CFSTR("Server_DisplayList")))
    v12 = CFSTR("DisplayList");
  else
    v12 = a3;
  *a5 = 0;
  if (v12)
    v12 = (const __CFString *)CFRetain(v12);
  *a6 = v12;
  if (v11)
  {
    *a7 = CFRetain(v11);
    CFRelease(v11);
  }
  else
  {
    *a7 = 0;
  }
  return 0;
}

uint64_t serverXPCItem_handleItemSetPropertyGuts(int a1, uint64_t a2, const __CFString *a3, CFTypeRef cf, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  uint64_t Count;
  CFMutableArrayRef Mutable;
  __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeID v23;
  uint64_t v24;
  __CFString **v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t v28;
  CFTypeID v30;
  uint64_t v31;
  __CFDictionary *MutableCopy;
  __CFDictionary *v33;
  CFTypeID v34;
  CFTypeID v35;
  const __CFAllocator *v36;
  OpaqueCMClock *HostTimeClock;
  CMTime v38;
  CMTime time;
  double v40;
  CMTime value;
  CMTime valuePtr;
  CMTimebaseRef timebaseOut;

  if (cf)
    v13 = CFRetain(cf);
  else
    v13 = 0;
  v14 = *(const void **)(a2 + 64);
  if (!v14)
    goto LABEL_83;
  v15 = CFGetTypeID(v14);
  if (v15 != FigPlaybackItemGetTypeID())
    goto LABEL_83;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      valuePtr.value = 0;
      value.value = 0;
      if (cf)
      {
        v23 = CFGetTypeID(cf);
        if (v23 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
          v24 = FigVideoCompositorServerRetainVideoCompositorForID();
          if (!(_DWORD)v24)
          {
            if (v13)
              CFRelease(v13);
            v13 = (const void *)value.value;
            v25 = kFigPlaybackItemProperty_VideoCompositor;
            goto LABEL_26;
          }
          goto LABEL_84;
        }
      }
LABEL_83:
      v24 = FigSignalErrorAt();
      goto LABEL_84;
    }
    if (!FigCFEqual())
    {
      if (CFEqual(CFSTR("Server_AudioProcessingTapID"), a3))
      {
        valuePtr.value = 0;
        value.value = 0;
        if (cf)
        {
          v34 = CFGetTypeID(cf);
          if (v34 == CFNumberGetTypeID())
            CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
        }
        if (MTAudioProcessingTapServerIsObjectIDLocallyServed())
        {
          if (valuePtr.value)
          {
            v24 = MTAudioProcessingTapXPCServerCopyTapForID(valuePtr.value, &value);
            if ((_DWORD)v24)
              goto LABEL_84;
          }
        }
        else if (valuePtr.value)
        {
          v24 = MTProxyAudioProcessingTapCreate(0, valuePtr.value, &value);
          if ((_DWORD)v24)
            goto LABEL_84;
        }
        if (v13)
          CFRelease(v13);
        v13 = (const void *)value.value;
        v25 = kFigPlaybackItemProperty_AudioProcessingTap;
        goto LABEL_26;
      }
      if (!CFEqual(CFSTR("Server_PriorImageQueueGaugeID"), a3))
      {
        if (!CFEqual(CFSTR("Server-TransientTimebaseDict"), a3))
          goto LABEL_27;
        if (cf)
        {
          timebaseOut = 0;
          valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          value = valuePtr;
          v40 = 0.0;
          FigCFDictionaryGetCMTimeIfPresent();
          FigCFDictionaryGetCMTimeIfPresent();
          FigCFDictionaryGetDoubleIfPresent();
          v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          HostTimeClock = CMClockGetHostTimeClock();
          v24 = CMTimebaseCreateWithSourceClock(v36, HostTimeClock, &timebaseOut);
          if ((_DWORD)v24)
            goto LABEL_84;
          if (v13)
            CFRelease(v13);
          v13 = timebaseOut;
          if (v40 == 0.0)
          {
            v24 = CMTimebaseSetRate(timebaseOut, 0.0);
            if ((_DWORD)v24)
              goto LABEL_84;
            time = valuePtr;
            v24 = CMTimebaseSetTime(timebaseOut, &time);
            if ((_DWORD)v24)
              goto LABEL_84;
          }
          else
          {
            time = valuePtr;
            v38 = value;
            v24 = CMTimebaseSetRateAndAnchorTime(timebaseOut, v40, &time, &v38);
            if ((_DWORD)v24)
              goto LABEL_84;
          }
        }
        v25 = kFigPlaybackItemProperty_TransientTimebaseForCoordinatedPlaybackSynchronization;
LABEL_26:
        a3 = *v25;
        goto LABEL_27;
      }
      valuePtr.value = 0;
      value.value = 0;
      if (!cf
        || (v35 = CFGetTypeID(cf), v35 != CFNumberGetTypeID())
        || (CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr), !valuePtr.value)
        || (v24 = FigXPCImageQueueGaugeServerCopyImageQueueGaugeForID(), !(_DWORD)v24))
      {
        if (v13)
          CFRelease(v13);
        v13 = (const void *)value.value;
        v25 = kFigPlaybackItemProperty_PriorImageQueueGauge;
        goto LABEL_26;
      }
LABEL_84:
      v28 = v24;
      goto LABEL_34;
    }
    valuePtr.value = 0;
    value.value = 0;
    if (cf)
    {
      v30 = CFGetTypeID(cf);
      if (v30 == CFDictionaryGetTypeID())
      {
        if (!FigCFDictionaryGetInt64IfPresent())
        {
          v28 = 0;
          goto LABEL_55;
        }
        v31 = FigVideoCompositorServerRetainVideoCompositorForID();
        if ((_DWORD)v31)
          goto LABEL_90;
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)cf);
        if (MutableCopy)
        {
          v33 = MutableCopy;
          CFDictionaryRemoveValue(MutableCopy, CFSTR("Server_VideoCompositorID"));
          CFDictionarySetValue(v33, CFSTR("VideoCompositor"), (const void *)value.value);
          if (v13)
            CFRelease(v13);
          v28 = 0;
          v13 = v33;
LABEL_55:
          if (!(_DWORD)v28)
            goto LABEL_27;
          goto LABEL_34;
        }
      }
    }
    v31 = FigSignalErrorAt();
LABEL_90:
    v28 = v31;
    goto LABEL_55;
  }
  v16 = CFGetTypeID(v14);
  if (v16 == FigPlaybackItemGetTypeID()
    && cf
    && (v17 = CFGetTypeID(cf), v17 == CFArrayGetTypeID())
    && (Count = CFArrayGetCount((CFArrayRef)cf),
        (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378])) != 0))
  {
    v20 = Mutable;
    if (Count < 1)
    {
LABEL_16:
      if (!v13)
      {
LABEL_18:
        a3 = CFSTR("VisualContextArray");
        v13 = v20;
LABEL_27:
        *a5 = 0;
        if (a3)
          v26 = CFRetain(a3);
        else
          v26 = 0;
        *a6 = v26;
        if (v13)
          v27 = CFRetain(v13);
        else
          v27 = 0;
        v28 = 0;
        *a7 = v27;
        goto LABEL_34;
      }
LABEL_17:
      CFRelease(v13);
      goto LABEL_18;
    }
    v21 = 0;
    while (1)
    {
      valuePtr.value = 0;
      if (!FigCFArrayGetInt64AtIndex())
        break;
      value.value = 0;
      v22 = FigVisualContextServerRetainVisualContextForID();
      if ((_DWORD)v22)
        goto LABEL_38;
      CFArrayAppendValue(v20, (const void *)value.value);
      CFRelease((CFTypeRef)value.value);
      if (Count == ++v21)
        goto LABEL_16;
    }
    v22 = FigSignalErrorAt();
LABEL_38:
    v28 = v22;
    CFRelease(v20);
    if (!(_DWORD)v28)
    {
LABEL_39:
      v20 = 0;
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else
  {
    v28 = FigSignalErrorAt();
    if (!(_DWORD)v28)
      goto LABEL_39;
  }
LABEL_34:
  if (v13)
    CFRelease(v13);
  return v28;
}

void DisposeServedItemState(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  _QWORD v11[6];

  if (a1)
  {
    v2 = a1[8];
    if (v2)
    {
      v3 = a1[7];
      a1[7] = 0;
      a1[8] = 0;
      v4 = a1[10];
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = __DisposeServedItemState_block_invoke;
      v11[3] = &__block_descriptor_tmp_126;
      v11[4] = v3;
      v11[5] = v2;
      dispatch_async(v4, v11);
    }
    v5 = a1[10];
    if (v5)
      dispatch_release(v5);
    v6 = (const void *)a1[3];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a1[4];
    if (v7)
      CFRelease(v7);
    v8 = a1[6];
    if (v8)
      dispatch_release(v8);
    v9 = a1[7];
    if (v9)
      dispatch_release(v9);
    FigSimpleMutexDestroy();
    v10 = (const void *)a1[9];
    if (v10)
      CFRelease(v10);
    free(a1);
  }
}

uint64_t serverXPCItem_NotificationFilter(uint64_t a1, CFTypeRef cf, const void *a3, __CFDictionary *a4, __CFDictionary **a5, void *a6)
{
  CFTypeID v12;
  CFTypeID v13;
  const void *Value;
  CFTypeID v15;
  uint64_t v16;
  const void *v17;
  __CFDictionary *MutableCopy;
  uint64_t FigBaseObject;
  void (*v20)(uint64_t, const __CFString *, _QWORD, _OWORD *);
  _QWORD *v21;
  CFTypeRef v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  _xpc_connection_s *v26;
  uint64_t v27;
  xpc_object_t xdict;
  _OWORD bytes[7];
  uint64_t v31;

  if (!cf || (v12 = CFGetTypeID(cf), v12 != FigPlaybackItemGetTypeID()))
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!a4 || (v13 = CFGetTypeID(a4), v13 != CFDictionaryGetTypeID()))
  {
LABEL_9:
    MutableCopy = 0;
    goto LABEL_11;
  }
  Value = CFDictionaryGetValue(a4, CFSTR("CFError"));
  if (Value)
  {
    v15 = CFGetTypeID(Value);
    if (v15 == CFErrorGetTypeID())
    {
      v16 = FigCFCopyCFErrorAsPropertyList();
      if (v16)
      {
        v17 = (const void *)v16;
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a4);
        CFDictionaryRemoveValue(MutableCopy, CFSTR("CFError"));
        CFDictionarySetValue(MutableCopy, CFSTR("Server_CFError"), v17);
        CFRelease(v17);
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  MutableCopy = (__CFDictionary *)CFRetain(a4);
LABEL_11:
  if (CFEqual(a3, CFSTR("TimebaseChanged")))
  {
    xdict = 0;
    *(_QWORD *)&bytes[0] = 0;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(cf);
    v20 = *(void (**)(uint64_t, const __CFString *, _QWORD, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (!v20)
      goto LABEL_19;
    v20(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], bytes);
    if (!*(_QWORD *)&bytes[0])
      goto LABEL_19;
    v21 = malloc_type_calloc(1uLL, 0x20uLL, 0x102004059E634C0uLL);
    if (v21)
    {
      v22 = *(CFTypeRef *)(a1 + 72);
      if (v22)
        v22 = CFRetain(v22);
      *v21 = v22;
      v21[2] = a1;
      v21[1] = *(_QWORD *)a1;
      goto LABEL_18;
    }
    if (!FigSignalErrorAt())
    {
LABEL_18:
      *((_BYTE *)v21 + 24) = 1;
      FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)fps_TimebaseSynchronizationUpdate_Callback, (uint64_t)v21, (void (*)(uint64_t))fps_destroyTimebaseSyncState, *(const void **)&bytes[0], *(NSObject **)(a1 + 48), (uint64_t *)&xdict);
LABEL_19:
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 40));
      v23 = *(_QWORD *)&bytes[0];
      v25 = *(const void **)(a1 + 24);
      v24 = *(const void **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = xdict;
      *(_QWORD *)(a1 + 32) = v23;
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 40));
      if (v25)
        FigSyncMomentSourceDestroy(v25);
      if (v24)
        CFRelease(v24);
    }
LABEL_30:
    v27 = 1;
    goto LABEL_31;
  }
  if (CFEqual(a3, CFSTR("TimeJumped")))
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      v31 = 0;
      memset(bytes, 0, sizeof(bytes));
      xdict = 0;
      v26 = (_xpc_connection_s *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (v26
        && !serverXPCItem_getSyntheticSyncMomentL((uint64_t)cf, (uint64_t)bytes)
        && !FigXPCCreateBasicMessage())
      {
        xpc_dictionary_set_data(xdict, "TimeBaseSyncMoment", bytes, 0x78uLL);
        xpc_connection_send_message(v26, xdict);
      }
      FigXPCRelease();
      FigXPCRelease();
    }
    goto LABEL_30;
  }
  if (CFEqual(a3, CFSTR("ReadyForPlayback")))
    goto LABEL_35;
  if (!CFEqual(a3, CFSTR("SeekDidComplete")))
  {
    if (CFEqual(a3, CFSTR("MetadataOutputChanged")))
    {
      if (fps_addMetadataOutputChangedNotificationPayloadToMessage(a6, MutableCopy))
        goto LABEL_30;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("LegibleOutputChanged")))
      {
LABEL_35:
        if (MutableCopy != a4)
        {
          *a5 = MutableCopy;
          return 4;
        }
        goto LABEL_41;
      }
      if (fps_addLegibleOutputChangedNotificationPayloadToMessage(a6, MutableCopy))
        goto LABEL_30;
    }
LABEL_40:
    v27 = 2;
    goto LABEL_31;
  }
  if (!serverXPCItem_addTimeSyncUpdateToMessage(cf, a1, a6)
    && !FigXPCMessageSetCFDictionary())
  {
    goto LABEL_40;
  }
LABEL_41:
  v27 = 0;
LABEL_31:
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v27;
}

uint64_t serverXPCItem_addTimeSyncUpdateToMessage(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID v6;
  uint64_t result;
  _OWORD v8[7];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  if (!a1)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a1);
  if (v6 != FigPlaybackItemGetTypeID() || !a3)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a2 + 24))
  {
    result = FigTimebaseGetSyncMoment2(*(OpaqueCMTimebase **)(a2 + 32), (uint64_t)v8);
    if ((_DWORD)result)
      return result;
    goto LABEL_6;
  }
  result = serverXPCItem_getSyntheticSyncMomentL((uint64_t)a1, (uint64_t)v8);
  if (!(_DWORD)result)
  {
LABEL_6:
    xpc_dictionary_set_data(a3, "TimeBaseSyncMoment", v8, 0x78uLL);
    return 0;
  }
  return result;
}

uint64_t fps_addMetadataOutputChangedNotificationPayloadToMessage(void *a1, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const __CFArray *v4;
  CFTypeID v5;
  uint64_t v6;
  __CFDictionary *MutableCopy;
  uint64_t v8;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SampleBuffers"));
  if (!Value)
    return FigSignalErrorAt();
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  v6 = fps_addSampleBuffersToMessage(a1, "MetadataOutputSamples", v4);
  if ((_DWORD)v6)
    return v6;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRemoveValue(MutableCopy, CFSTR("SampleBuffers"));
  v8 = FigXPCMessageSetCFDictionary();
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v8;
}

uint64_t fps_addLegibleOutputChangedNotificationPayloadToMessage(void *a1, const __CFDictionary *a2)
{
  __CFArray *Mutable;
  const __CFArray *v5;
  const void *v6;
  CFIndex v7;
  const void *ValueAtIndex;
  CFTypeID v9;
  uint64_t v10;
  __CFDictionary *MutableCopy;
  uint64_t v12;
  void *value;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("LegibleOutputAttributedString"));
  v6 = CFDictionaryGetValue(a2, CFSTR("LegibleOutputNativeSamples"));
  if (CFArrayGetCount(v5) >= 1)
  {
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v7);
      value = 0;
      if (FigTextMarkupAttributedStringCreatePropertyList(ValueAtIndex, &value))
        goto LABEL_6;
      if (value)
        break;
LABEL_8:
      if (++v7 >= CFArrayGetCount(v5))
        goto LABEL_9;
    }
    CFArrayAppendValue(Mutable, value);
LABEL_6:
    if (value)
      CFRelease(value);
    goto LABEL_8;
  }
LABEL_9:
  if (!v6 || (v9 = CFGetTypeID(v6), v9 != CFArrayGetTypeID()))
  {
    v10 = FigSignalErrorAt();
    goto LABEL_19;
  }
  v10 = fps_addSampleBuffersToMessage(a1, "LegibleOutputSamples", (CFArrayRef)v6);
  if ((_DWORD)v10 || (v10 = FigXPCMessageSetCFArray(), (_DWORD)v10))
  {
LABEL_19:
    v12 = v10;
    if (!Mutable)
      return v12;
    goto LABEL_16;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRemoveValue(MutableCopy, CFSTR("LegibleOutputAttributedString"));
  CFDictionaryRemoveValue(MutableCopy, CFSTR("LegibleOutputNativeSamples"));
  v12 = FigXPCMessageSetCFDictionary();
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (Mutable)
LABEL_16:
    CFRelease(Mutable);
  return v12;
}

uint64_t fps_TimebaseSynchronizationUpdate_Callback(uint64_t a1, uint64_t a2)
{
  _xpc_connection_s *v4;
  int v5;
  int *v6;
  int v7;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];
  __int128 v12;
  uint64_t v13;
  xpc_object_t v14;
  CMTime time;

  v14 = 0;
  v13 = 0;
  v12 = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  v4 = (_xpc_connection_s *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4 && *(_DWORD *)a2 == 120)
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (*(_BYTE *)(a1 + 24))
    {
      v5 |= 4u;
      *(_DWORD *)(a2 + 4) = v5;
      *(_BYTE *)(a1 + 24) = 0;
    }
    LODWORD(v9) = 120;
    DWORD1(v9) = v5;
    *((_QWORD *)&v9 + 1) = *(_QWORD *)(a2 + 8);
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)&v11[0] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)((char *)v11 + 8) = *(_OWORD *)(a2 + 40);
    *((_QWORD *)&v11[1] + 1) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)&v11[2] = *(_QWORD *)(a2 + 64);
    *((_QWORD *)&v11[3] + 1) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)((char *)&v11[2] + 8) = *(_OWORD *)(a2 + 72);
    v13 = *(_QWORD *)(a2 + 112);
    v12 = *(_OWORD *)(a2 + 96);
    v6 = (int *)MEMORY[0x1E0CA1FC0];
    v7 = *MEMORY[0x1E0CA1FC0];
    if ((v5 & 1) != 0 && v7 == 1)
    {
      kdebug_trace();
      v5 = *(_DWORD *)(a2 + 4);
      v7 = *v6;
    }
    if ((v5 & 2) != 0 && v7 == 1)
    {
      time = *(CMTime *)(a2 + 16);
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_data(v14, "TimeBaseSyncMoment", &v9, 0x78uLL);
      xpc_connection_send_message(v4, v14);
    }
  }
  FigXPCRelease();
  return FigXPCRelease();
}

void fps_destroyTimebaseSyncState(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t serverXPCItem_getSyntheticSyncMomentL(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t (*v6)(uint64_t, __int128 *);
  uint64_t result;
  OpaqueCMClock *HostTimeClock;
  __int128 v9;
  CMTime v10;
  __int128 v11;
  uint64_t v12;

  v2 = *MEMORY[0x1E0CA2E18];
  v11 = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v12 = v3;
  if (!a2)
    return FigSignalErrorAt();
  v9 = v2;
  v6 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v6)
    return 4294954514;
  result = v6(a1, &v11);
  if (!(_DWORD)result)
  {
    memset(&v10, 0, sizeof(v10));
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v10, HostTimeClock);
    result = 0;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 56) = v10.epoch;
    *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x200000078;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)&v10.value;
    *(_OWORD *)(a2 + 72) = v9;
    *(_QWORD *)(a2 + 88) = v3;
    *(_QWORD *)(a2 + 112) = v3;
    *(_OWORD *)(a2 + 96) = v9;
  }
  return result;
}

uint64_t fps_addSampleBuffersToMessage(void *a1, const char *a2, CFArrayRef theArray)
{
  CFIndex Count;
  xpc_object_t v7;
  CFIndex v8;
  void *v9;
  uint64_t SerializedAtomDataForSampleBuffer;
  NSObject *v11;
  NSObject *v12;
  xpc_object_t v13;
  uint64_t v14;

  Count = CFArrayGetCount(theArray);
  v7 = xpc_array_create(0, 0);
  if (Count >= 1)
  {
    v8 = 0;
    v9 = (void *)*MEMORY[0x1E0C80CF8];
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v8);
      SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
      if ((_DWORD)SerializedAtomDataForSampleBuffer)
        goto LABEL_11;
      v11 = dispatch_data_create(0, 0, 0, v9);
      if (!v11)
        break;
      v12 = v11;
      v13 = xpc_data_create_with_dispatch_data(v11);
      dispatch_release(v12);
      if (!v13)
        break;
      xpc_array_append_value(v7, v13);
      xpc_release(v13);
      v14 = 0;
LABEL_7:
      if ((_DWORD)v14)
        goto LABEL_13;
      if (Count == ++v8)
        goto LABEL_12;
    }
    SerializedAtomDataForSampleBuffer = FigSignalErrorAt();
LABEL_11:
    v14 = SerializedAtomDataForSampleBuffer;
    goto LABEL_7;
  }
LABEL_12:
  xpc_dictionary_set_value(a1, a2, v7);
  v14 = 0;
LABEL_13:
  FigXPCRelease();
  return v14;
}

uint64_t FPSupport_GetAudioSessionOutputChannelCount(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  const __CFAllocator *v6;
  uint64_t v7;
  CFNumberRef v8;
  __CFData *v9;
  __CFData *v10;
  unint64_t Length;
  UInt32 v12;
  char *BytePtr;
  int HasVerticalHeightChannel;
  int valuePtr;
  CFNumberRef number;

  number = 0;
  valuePtr = 2;
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce == -1)
  {
    if (!a1)
      return 4294948075;
  }
  else
  {
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
    if (!a1)
      return 4294948075;
  }
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v4)
    return 4294948075;
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(v4 + 48);
  if (!v5)
    return 4294948071;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = v5(a1, *MEMORY[0x1E0D49988], *MEMORY[0x1E0C9AE00], &number);
  v8 = number;
  if (!(_DWORD)v7)
  {
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr >= 3)
      {
        v9 = FPSupport_CopyAudioSessionPreferredOutputChannelLayout(v6, a1);
        if (v9)
        {
          v10 = v9;
          Length = CFDataGetLength(v9);
          if (Length <= 0xB)
          {
            CFRelease(v10);
          }
          else
          {
            v12 = Length;
            BytePtr = (char *)CFDataGetBytePtr(v10);
            HasVerticalHeightChannel = FPSupport_AudioChannelLayoutHasVerticalHeightChannel(BytePtr, v12);
            CFRelease(v10);
            if (HasVerticalHeightChannel)
              valuePtr = 16;
          }
        }
      }
    }
    *a2 = valuePtr;
    v8 = number;
  }
  if (v8)
    CFRelease(v8);
  return v7;
}

void FPSupport_CreateMaxSampleRateDictonary(const __CFAllocator *a1, int a2, const __CFData *a3, CFMutableDictionaryRef *a4, double a5)
{
  CFMutableDictionaryRef Mutable;
  CFTypeID v10;
  const UInt8 *BytePtr;
  unint64_t v12;
  const __CFAllocator *v14;
  _DWORD *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  double v18;
  double v20;
  CFNumberRef v21;
  CFNumberRef v22;
  int valuePtr;

  valuePtr = a2;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a3 && (v10 = CFGetTypeID(a3), v10 == CFDataGetTypeID()))
  {
    BytePtr = CFDataGetBytePtr(a3);
    if (BytePtr)
    {
      v12 = CFDataGetLength(a3) / 0x38uLL;
      goto LABEL_7;
    }
  }
  else
  {
    BytePtr = 0;
  }
  v12 = 0;
LABEL_7:
  if (a5 != 0.0 && v12 == 0)
  {
    if (!a2)
      valuePtr = 2;
    v21 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v21)
    {
      v22 = v21;
      FigCFDictionarySetDouble();
      CFRelease(v22);
    }
    else
    {
LABEL_34:
      FigSignalErrorAt();
    }
  }
  else if (v12)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = BytePtr + 28;
    do
    {
      if ((*v15 & 0x80000000) == 0)
      {
        v16 = CFNumberCreate(v14, kCFNumberSInt32Type, v15);
        if (!v16)
          goto LABEL_34;
        v17 = v16;
        v18 = *(double *)(v15 - 7);
        if (v18 == 0.0)
          v18 = *(double *)(v15 + 5);
        if (v18 <= a5 || a5 == 0.0)
          v20 = v18;
        else
          v20 = a5;
        if (!FigCFDictionaryGetDoubleIfPresent() || v20 > 0.0)
          FigCFDictionarySetDouble();
        CFRelease(v17);
      }
      v15 += 14;
      --v12;
    }
    while (v12);
  }
  *a4 = Mutable;
}

void FPSupport_ReleasePassthroughHelper()
{
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce != -1)
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
}

uint64_t FPSupport_GetAudioDeviceUIDFromPassthroughHelper()
{
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce != -1)
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  return 0;
}

uint64_t FPSupport_CreateFigSpatializationCapabilitiesFromSpatialAudioPreferences(uint64_t a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFMutableArrayRef v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;

  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    if (v8)
    {
      if (*(_DWORD *)(a1 + 12))
      {
        v9 = 4;
        do
        {
          FigCFArrayAppendInt32();
          v10 = *(unsigned int *)(a1 + 12);
          v11 = v9 - 3;
          ++v9;
        }
        while (v11 < v10);
        if ((_DWORD)v10 && *(_BYTE *)a1)
          FigCFArrayAppendInt32();
      }
      CFDictionarySetValue(v7, CFSTR("SpatialCapabilitiesKey_spatialAudioSources"), v8);
      v12 = FigCFDictionarySetInt32();
      if (!(_DWORD)v12)
      {
        v13 = (const void *)*MEMORY[0x1E0C9AE50];
        v14 = (const void *)*MEMORY[0x1E0C9AE40];
        if (*(_BYTE *)(a1 + 1))
          v15 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v15 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v7, CFSTR("SpatialCapabilitiesKey_prefersLossyAudioSources"), v15);
        if (*(_BYTE *)(a1 + 2))
          v16 = v13;
        else
          v16 = v14;
        CFDictionarySetValue(v7, CFSTR("SpatialCapabilitiesKey_alwaysSpatialize"), v16);
        v17 = 0;
        *a3 = v7;
LABEL_17:
        CFRelease(v8);
        return v17;
      }
    }
    else
    {
      v12 = FigSignalErrorAt();
    }
    v17 = v12;
    CFRelease(v7);
    if (!v8)
      return v17;
    goto LABEL_17;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateAudioSessionSpatializationCapabilities(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t FigSpatializationCapabilitiesFromSpatialAudioPreferences;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString **v8;
  uint64_t v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (a3)
  {
    if (FigGetCFPreferenceNumberWithDefault())
    {
      FigSpatializationCapabilitiesFromSpatialAudioPreferences = FPSupport_CreateFigSpatializationCapabilitiesFromSpatialAudioPreferences((uint64_t)&unk_1932FC600, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (__CFDictionary **)cf);
      if (!(_DWORD)FigSpatializationCapabilitiesFromSpatialAudioPreferences)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_9:
        v9 = 0;
        *a3 = cf[0];
        return v9;
      }
      goto LABEL_17;
    }
    if (a2 == 1836019574)
    {
      v8 = kFigAudioSessionProperty_AudiovisualSpatializationCapabilities;
      if (!a1)
        goto LABEL_15;
    }
    else
    {
      if (a2 != 1936684398)
      {
        FigSpatializationCapabilitiesFromSpatialAudioPreferences = FigSignalErrorAt();
        goto LABEL_17;
      }
      v8 = kFigAudioSessionProperty_AudioOnlySpatializationCapabilities;
      if (!a1)
        goto LABEL_15;
    }
    v10 = *v8;
    v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v11)
    {
      v12 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(v11 + 8);
      if (!v12)
      {
        v9 = 4294948071;
LABEL_19:
        if (cf[0])
          CFRelease(cf[0]);
        return v9;
      }
      FigSpatializationCapabilitiesFromSpatialAudioPreferences = v12(a1, v10, *MEMORY[0x1E0C9AE00], cf);
      if (!(_DWORD)FigSpatializationCapabilitiesFromSpatialAudioPreferences)
        goto LABEL_9;
LABEL_17:
      v9 = FigSpatializationCapabilitiesFromSpatialAudioPreferences;
      goto LABEL_19;
    }
LABEL_15:
    v9 = 4294948075;
    goto LABEL_19;
  }
  return FigSignalErrorAt();
}

const __CFString *FPSupport_GetAudioSpatializationPreferencesMonitor()
{
  if (FPSupport_GetAudioSpatializationPreferencesMonitor_onceToken != -1)
    dispatch_once(&FPSupport_GetAudioSpatializationPreferencesMonitor_onceToken, &__block_literal_global_50);
  return CFSTR("AudioSpatializationPreferencesChanged");
}

uint64_t FPSupport_CanUseCMSession()
{
  return in_audio_mx_server_process();
}

void FPSupport_AudioSpatializationPreferencesChanged()
{
  if (FPSupport_AudioSpatializationPreferencesChanged_onceToken != -1)
    dispatch_once(&FPSupport_AudioSpatializationPreferencesChanged_onceToken, &__block_literal_global_25_0);
  dispatch_async((dispatch_queue_t)FPSupport_AudioSpatializationPreferencesChanged_sAudioSpatializationPreferencesChangedQueue, &__block_literal_global_28_0);
}

uint64_t FPSupport_AudioChannelLayoutHasVerticalHeightChannel(char *inSpecifier, UInt32 a2)
{
  uint64_t p_outPropertyData;
  AudioFormatPropertyID v3;
  uint64_t v4;
  uint64_t v5;
  UInt32 v6;
  __CFData *Mutable;
  __CFData *v8;
  UInt8 *MutableBytePtr;
  const UInt8 *BytePtr;
  float *v11;
  int v12;
  float v13;
  UInt32 outPropertyDataSize;
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  p_outPropertyData = (uint64_t)inSpecifier;
  v3 = 1668116588;
  outPropertyData = -65536;
  if (*(_DWORD *)inSpecifier == 0x10000)
  {
    p_outPropertyData = (uint64_t)(inSpecifier + 4);
    v3 = 1668116578;
    goto LABEL_11;
  }
  if (*(_DWORD *)inSpecifier)
  {
LABEL_11:
    v6 = 4;
    goto LABEL_12;
  }
  v4 = *((unsigned int *)inSpecifier + 2);
  if ((_DWORD)v4)
  {
    v5 = 0;
    while (!*(_DWORD *)&inSpecifier[v5 + 12] || (inSpecifier[v5 + 16] & 3) == 0)
    {
      v5 += 20;
      if (20 * v4 == v5)
        goto LABEL_8;
    }
    v8 = 0;
    goto LABEL_17;
  }
LABEL_8:
  ioPropertyDataSize = 4;
  if (AudioFormatGetProperty(0x636D7074u, a2, inSpecifier, &ioPropertyDataSize, &outPropertyData))
  {
    FigSignalErrorAt();
    return 0;
  }
  v6 = ioPropertyDataSize;
  p_outPropertyData = (uint64_t)&outPropertyData;
LABEL_12:
  outPropertyDataSize = 0;
  if (AudioFormatGetPropertyInfo(v3, v6, (const void *)p_outPropertyData, &outPropertyDataSize))
  {
    v8 = 0;
LABEL_32:
    FigSignalErrorAt();
    goto LABEL_25;
  }
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], outPropertyDataSize);
  v8 = Mutable;
  if (!Mutable)
    goto LABEL_25;
  CFDataSetLength(Mutable, outPropertyDataSize);
  MutableBytePtr = CFDataGetMutableBytePtr(v8);
  if (AudioFormatGetProperty(v3, v6, (const void *)p_outPropertyData, &outPropertyDataSize, MutableBytePtr))
    goto LABEL_32;
  BytePtr = CFDataGetBytePtr(v8);
  p_outPropertyData = (uint64_t)BytePtr;
  if (!BytePtr)
    goto LABEL_28;
  LODWORD(v4) = *((_DWORD *)BytePtr + 2);
  if (!(_DWORD)v4)
  {
LABEL_25:
    p_outPropertyData = 0;
    if (v8)
      goto LABEL_28;
    return p_outPropertyData;
  }
LABEL_17:
  v4 = v4;
  v11 = (float *)(p_outPropertyData + 28);
  while (1)
  {
    if (!*((_DWORD *)v11 - 4))
      goto LABEL_24;
    v12 = *((_DWORD *)v11 - 3);
    if ((v12 & 1) != 0)
      break;
    if ((v12 & 2) != 0)
    {
      v13 = *(v11 - 1);
      goto LABEL_23;
    }
LABEL_24:
    v11 += 5;
    if (!--v4)
      goto LABEL_25;
  }
  v13 = *v11;
LABEL_23:
  if (v13 <= 0.0)
    goto LABEL_24;
  p_outPropertyData = 1;
  if (v8)
LABEL_28:
    CFRelease(v8);
  return p_outPropertyData;
}

__CFData *FPSupport_CopyAudioSessionPreferredOutputChannelLayout(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *);
  const __CFArray *Value;
  const __CFArray *v7;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  __CFData *Mutable;
  __CFData *v14;
  UInt8 *MutableBytePtr;
  CFDictionaryRef theDict;

  theDict = 0;
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce == -1)
  {
    if (a2)
      goto LABEL_3;
LABEL_18:
    FigSignalErrorAt();
    goto LABEL_19;
  }
  dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  if (!a2)
    goto LABEL_18;
LABEL_3:
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v4)
    goto LABEL_18;
  v5 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *))(v4 + 48);
  if (!v5 || v5(a2, *MEMORY[0x1E0D49730], *MEMORY[0x1E0C9AE00], &theDict))
    goto LABEL_18;
  if (!theDict)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D49EB0]);
  if (!Value)
    goto LABEL_18;
  v7 = Value;
  if (CFArrayGetCount(Value) <= 0)
    goto LABEL_18;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 0);
  v9 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0D49E58]);
  if (!v9)
    goto LABEL_18;
  Count = CFArrayGetCount(v9);
  if (Count <= 0)
    goto LABEL_18;
  v11 = Count;
  v12 = 20 * Count + 12;
  Mutable = CFDataCreateMutable(a1, v12);
  v14 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v12);
    MutableBytePtr = CFDataGetMutableBytePtr(v14);
    *(_DWORD *)MutableBytePtr = 0;
    FigCFArrayApplyFunction();
    if (v11 != *((_DWORD *)MutableBytePtr + 2) && FigSignalErrorAt())
    {
      CFRelease(v14);
LABEL_19:
      v14 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (theDict)
    CFRelease(theDict);
  return v14;
}

uint64_t PopulateACLWithChannelLabels(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;

  result = FigCFDictionaryGetInt32IfPresent();
  v4 = 0;
  if (!(_DWORD)result)
    v4 = -1;
  v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 20 * v5 + 12) = v4;
  *(_DWORD *)(a2 + 8) = v5 + 1;
  return result;
}

uint64_t FPSupport_GetPlaintextAudioFormatForEncryptedFormatID(unsigned int a1)
{
  OSStatus Property;
  BOOL v3;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;
  unsigned int inSpecifier;

  inSpecifier = a1;
  outPropertyData = 0;
  ioPropertyDataSize = 8;
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce != -1)
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  Property = AudioFormatGetProperty(0x66696569u, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (ioPropertyDataSize)
    v3 = Property == 0;
  else
    v3 = 0;
  if (v3)
    return outPropertyData;
  else
    return a1;
}

uint64_t FPSupport_IsAnAudioDeviceAvailable(uint64_t result)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const __CFString *, _QWORD, const void **);
  char v5;
  const void *v6;

  if (result)
  {
    v1 = result;
    v2 = (const void *)*MEMORY[0x1E0C9AE40];
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
    v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v3)
    {
      v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(v3 + 8);
      if (v4)
      {
        v4(v1, CFSTR("FAS_AudioDeviceIsAvailable"), *MEMORY[0x1E0C9AE00], &v6);
        v2 = v6;
      }
    }
    if (v2)
      CFRelease(v2);
    if (fpSupport_isAnAudioDeviceAssumedAvailable_onceToken != -1)
      dispatch_once(&fpSupport_isAnAudioDeviceAssumedAvailable_onceToken, &__block_literal_global_30_2);
    if ((fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaEnvVar & 1) != 0
      || fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaDefaults)
    {
      v5 = 1;
      fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailable = 1;
    }
    else
    {
      v5 = fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailable | (v2 == (const void *)*MEMORY[0x1E0C9AE50]);
    }
    return v5 & 1;
  }
  return result;
}

uint64_t __fpSupport_isAnAudioDeviceAssumedAvailable_block_invoke()
{
  char *v0;
  uint64_t result;

  v0 = getenv("coremedia_assume_audio_device_available");
  if (v0 && !strcmp(v0, "true"))
    fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaEnvVar = 1;
  result = FigGetCFPreferenceBooleanWithDefault();
  fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaDefaults = result;
  return result;
}

uint64_t FigStreamingAssetDownloadCacheTranslatorGetClassID()
{
  MEMORY[0x19402F294](&FigStreamingAssetDownloadCacheTranslatorGetClassID_sRegisterFigStreamingAssetDownloadCacheTranslatorBaseTypeOnce, RegisterFigStreamingAssetDownloadCacheTranslatorBaseType);
  return sFigStreamingAssetDownloadCacheTranslatorClassID;
}

uint64_t RegisterFigStreamingAssetDownloadCacheTranslatorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigStreamingAssetDownloadCacheTranslatorGetTypeID()
{
  MEMORY[0x19402F294](&FigStreamingAssetDownloadCacheTranslatorGetClassID_sRegisterFigStreamingAssetDownloadCacheTranslatorBaseTypeOnce, RegisterFigStreamingAssetDownloadCacheTranslatorBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigStreamingAssetDownloadCacheTranslatorCreate(uint64_t a1, const void *a2, char a3, CFTypeRef *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t DerivedStorage;
  CFAllocatorRef v10;
  uint64_t v11;
  dispatch_queue_t v12;
  NSObject *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t v16;
  CFTypeRef v18;
  CFTypeRef cf;

  v18 = 0;
  cf = 0;
  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (!a2 || !a4 || !FigCFURLIsLocalResource())
    goto LABEL_18;
  MEMORY[0x19402F294](&FigStreamingAssetDownloadCacheTranslatorGetClassID_sRegisterFigStreamingAssetDownloadCacheTranslatorBaseTypeOnce, RegisterFigStreamingAssetDownloadCacheTranslatorBaseType);
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    goto LABEL_19;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 16) = a3;
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
  v10 = CFGetAllocator(cf);
  v8 = FigHLSPersistentStoreCreateAtURL(v10, (uint64_t)a2, 0, 1, &v18);
  if ((_DWORD)v8)
    goto LABEL_19;
  v11 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = v11;
  if (!v11 || (v12 = dispatch_queue_create("com.apple.coremedia.downloadtranslator.ioqueue", 0)) == 0)
  {
LABEL_18:
    v8 = FigSignalErrorAt();
LABEL_19:
    v16 = v8;
    goto LABEL_13;
  }
  v13 = v12;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  v14 = cf;
  if (cf)
    v14 = CFRetain(cf);
  *v7 = v14;
  v15 = v18;
  if (v18)
    v15 = CFRetain(v18);
  v7[1] = v15;
  dispatch_async_f(v13, v7, (dispatch_function_t)fsadct_PrepareOfflinePlayableAlternatesAndWritePlaylistsDispatchFunction);
  *a4 = cf;
  cf = 0;
  dispatch_release(v13);
  v16 = 0;
  v7 = 0;
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  free(v7);
  return v16;
}

void fsadct_PrepareOfflinePlayableAlternatesAndWritePlaylistsDispatchFunction(const __CFString **a1)
{
  const __CFString **v1;
  const __CFString *v2;
  uint64_t DerivedStorage;
  const __CFString *v4;
  uint64_t v5;
  uint64_t (*v6)(const __CFString *, uint64_t, _QWORD);
  int v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  int v12;
  CFURLRef v13;
  const __CFURL *v14;
  uint64_t (*v15)(const __CFString *, const __CFString *, _QWORD, _QWORD, _QWORD, void **);
  int v16;
  int v17;
  CFStringRef v18;
  uint64_t Alternates;
  const __CFArray *v20;
  uint64_t (*v21)(const __CFString *, uint64_t, _QWORD);
  int v22;
  uint64_t v23;
  uint64_t v24;
  CFAllocatorRef v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const __CFString *, CFAllocatorRef, CFStringRef *);
  int v28;
  const __CFAllocator *v29;
  const __CFURL *v30;
  void *v31;
  __CFDictionary *Mutable;
  const __CFDictionary *v33;
  const __CFAllocator *v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t (*v38)(void *, uint64_t, const __CFArray **);
  unsigned int (*v39)(const __CFString *, uint64_t, uint64_t);
  const __CFAllocator *v40;
  const __CFSet *v41;
  const __CFAllocator *v42;
  CFMutableDictionaryRef v43;
  CFMutableDictionaryRef v44;
  uint64_t (*v45)(const __CFString *, CFStringRef *);
  int v46;
  CFIndex i;
  CFStringRef Count;
  const void *ValueAtIndex;
  uint64_t (*v50)(const __CFString *, const void *, void **);
  const __CFDictionary *v51;
  const __CFAllocator *v52;
  __CFString *v53;
  __CFString *v54;
  uint64_t Version;
  const __CFDictionary *AudioGroups;
  int v57;
  const __CFDictionary *SubtitleGroups;
  const __CFDictionary *ClosedCaptionGroups;
  const __CFDictionary *VideoGroups;
  CFIndex v61;
  const __CFString *v62;
  const __CFURL *URLForCacheLookup;
  int MediaPlaylistWriterHelper;
  const __CFAllocator *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  uint64_t PeakBitRate;
  uint64_t AverageBitRate;
  const __CFString *VideoRangeString;
  uint64_t CodecString;
  double v73;
  unint64_t Resolution;
  double v75;
  double v76;
  double FrameRate;
  const void *ClosedCaptionGroupIDString;
  uint64_t v79;
  const void *AudioGroupIDString;
  uint64_t v81;
  const void *SubtitleGroupIDString;
  uint64_t v83;
  const void *VideoGroupIDString;
  uint64_t v85;
  int HDCPLevel;
  const __CFString *PlaylistStringFromHDCPLevel;
  uint64_t StableStreamIdentifier;
  const __CFAllocator *v89;
  int v90;
  const __CFAllocator *v91;
  int appended;
  uint64_t BytesFromCFString;
  void *v94;
  OpaqueCMBlockBuffer *v95;
  size_t v96;
  const __CFAllocator *v97;
  CMBlockBufferRef v98;
  uint64_t (*v99)(const __CFString *, const __CFString *, const __CFString *, _QWORD, CMBlockBufferRef);
  CFURLRef *v100;
  CFURLRef *v101;
  uint64_t (*v102)(const __CFString *, const __CFString *, void **, CFStringRef *, _QWORD, _QWORD);
  int v103;
  CFAllocatorRef v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, const __CFString *, CFAllocatorRef, void **);
  const __CFAllocator *v107;
  CFURLRef v108;
  void (*v109)(const __CFString *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  const __CFString **v112;
  const __CFDictionary *v113;
  const __CFDictionary *v114;
  CFStringRef URLString[2];
  __int128 v116;
  __int128 v117;
  CFStringRef v118;
  const __CFSet *v119;
  uint64_t v120;
  CMBlockBufferRef blockBufferOut;
  const __CFArray *v122;
  void *values;
  void *keys[2];

  v1 = a1;
  v2 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = v1[1];
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(const __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v6)
  {
    v20 = 0;
    v18 = 0;
LABEL_32:
    v17 = -12782;
    goto LABEL_187;
  }
  v7 = v6(v4, 1, 0);
  if (v7)
  {
    v17 = v7;
    v20 = 0;
    v18 = 0;
    goto LABEL_187;
  }
  v8 = CFGetAllocator(v2);
  URLString[0] = 0;
  values = 0;
  keys[0] = 0;
  LODWORD(v122) = 0;
  v9 = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(v4);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (!v11)
  {
    v18 = 0;
    v17 = -12782;
    goto LABEL_16;
  }
  v12 = v11(FigBaseObject, CFSTR("MasterPlaylistNetworkURL"), v8, keys);
  if (!v12)
  {
    v13 = CFURLCreateWithString(v8, (CFStringRef)keys[0], 0);
    if (v13)
    {
      v14 = v13;
      v15 = *(uint64_t (**)(const __CFString *, const __CFString *, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v15)
      {
        v16 = v15(v4, CFSTR("NetworkPlaylist"), 0, 0, 0, &values);
        if (v16)
        {
          v17 = v16;
        }
        else
        {
          v17 = FigStreamPlaylistParse((OpaqueCMBlockBuffer *)values, v14, 0, &v122, 0, 0, 1, *(unsigned __int8 *)(v9 + 16), 0, 0, 0, 0, (uint64_t *)URLString, 0);
          v18 = URLString[0];
          if (!v17)
          {
            if (!URLString[0])
            {
              v17 = 0;
              goto LABEL_15;
            }
            Alternates = FigMultivariantPlaylistGetAlternates((uint64_t)URLString[0]);
            v18 = URLString[0];
            if (Alternates)
            {
              v17 = 0;
              URLString[0] = 0;
LABEL_15:
              CFRelease(v14);
              goto LABEL_16;
            }
          }
          if (!v18)
            goto LABEL_15;
          CFRelease(v18);
        }
        v18 = 0;
        goto LABEL_15;
      }
      v18 = 0;
      v17 = -12782;
      goto LABEL_15;
    }
    v12 = FigSignalErrorAt();
  }
  v17 = v12;
  v18 = 0;
LABEL_16:
  if (values)
    CFRelease(values);
  if (keys[0])
    CFRelease(keys[0]);
  if (v17)
    goto LABEL_225;
  v21 = *(uint64_t (**)(const __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v21)
  {
    v20 = 0;
    goto LABEL_32;
  }
  v22 = v21(v4, 0xFFFFFFFFLL, 0);
  if (v22)
  {
    v17 = v22;
LABEL_225:
    v20 = 0;
    goto LABEL_187;
  }
  v122 = 0;
  v112 = v1;
  if (!v18 || !FigMultivariantPlaylistGetAlternates((uint64_t)v18))
  {
    v20 = 0;
    goto LABEL_53;
  }
  v23 = v5;
  URLString[0] = 0;
  values = 0;
  keys[0] = 0;
  v24 = CMBaseObjectGetDerivedStorage();
  v25 = CFGetAllocator(v2);
  v26 = FigHLSPersistentStoreGetFigBaseObject(v4);
  v27 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (!v27)
  {
    v36 = 0;
    v33 = 0;
    v30 = 0;
    v17 = -12782;
LABEL_34:
    v5 = v23;
    goto LABEL_35;
  }
  v28 = v27(v26, CFSTR("MasterPlaylistNetworkURL"), v25, URLString);
  if (v28)
  {
    v17 = v28;
    v36 = 0;
    v33 = 0;
    v30 = 0;
    goto LABEL_34;
  }
  v29 = CFGetAllocator(v2);
  v30 = CFURLCreateWithString(v29, URLString[0], 0);
  v31 = (void *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v33 = Mutable;
  if (!Mutable)
  {
    v35 = FigSignalErrorAt();
    goto LABEL_210;
  }
  CFDictionarySetValue(Mutable, CFSTR("FSC_DownloadDestinationURL"), *(const void **)(v24 + 8));
  v34 = CFGetAllocator(v2);
  v35 = FigStreamingCacheCreate(v34, v30, v33, (uint64_t *)keys);
  if (v35)
  {
LABEL_210:
    v17 = v35;
    v36 = 0;
    goto LABEL_34;
  }
  v17 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate(v31, (uint64_t)keys[0], 0, 0, &values);
  v5 = v23;
  if (v17)
  {
    v36 = 0;
  }
  else
  {
    v36 = values;
    values = 0;
  }
LABEL_35:
  if (keys[0])
    CFRelease(keys[0]);
  if (v33)
    CFRelease(v33);
  if (values)
    CFRelease(values);
  if (v30)
    CFRelease(v30);
  if (URLString[0])
    CFRelease(URLString[0]);
  if (v17)
  {
    v20 = 0;
  }
  else
  {
    v37 = FigMultivariantPlaylistGetAlternates((uint64_t)v18);
    v38 = *(uint64_t (**)(void *, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
    if (v38)
    {
      v17 = v38(v36, v37, &v122);
      v20 = v122;
      if (v17)
      {
        if (v122)
        {
          CFRelease(v122);
          v20 = 0;
        }
        v5 = v23;
      }
      else
      {
        v122 = 0;
      }
    }
    else
    {
      v20 = 0;
      v17 = -12782;
    }
  }
  v1 = v112;
  if (v36)
    CFRelease(v36);
  if (!v17)
  {
LABEL_53:
    v39 = *(unsigned int (**)(const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 16);
    if (!v39 || v39(v4, 1, 1))
    {
      v17 = FigSignalErrorAt();
      goto LABEL_187;
    }
    v110 = v5;
    v111 = DerivedStorage;
    v40 = CFGetAllocator(v2);
    v41 = CFSetCreateMutable(v40, 0, MEMORY[0x1E0C9B3B0]);
    v42 = CFGetAllocator(v2);
    URLString[0] = 0;
    keys[0] = 0;
    v43 = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v43)
    {
      v44 = v43;
      v45 = *(uint64_t (**)(const __CFString *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
      if (v45)
      {
        v46 = v45(v4, URLString);
        if (!v46)
        {
          for (i = 0; ; ++i)
          {
            Count = URLString[0];
            if (URLString[0])
              Count = (CFStringRef)CFArrayGetCount((CFArrayRef)URLString[0]);
            if (i >= (uint64_t)Count)
              break;
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)URLString[0], i);
            v50 = *(uint64_t (**)(const __CFString *, const void *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 72);
            if (!v50)
              goto LABEL_67;
            v46 = v50(v4, ValueAtIndex, keys);
            if (v46)
              goto LABEL_222;
            FigCFDictionarySetValue();
            if (keys[0])
            {
              CFRelease(keys[0]);
              keys[0] = 0;
            }
          }
          v17 = 0;
          v51 = v44;
          goto LABEL_72;
        }
LABEL_222:
        v17 = v46;
      }
      else
      {
LABEL_67:
        v17 = -12782;
      }
      CFRelease(v44);
    }
    else
    {
      v17 = FigSignalErrorAt();
    }
    v51 = 0;
LABEL_72:
    if (URLString[0])
      CFRelease(URLString[0]);
    if (v17)
      goto LABEL_182;
    if (v18)
    {
      v52 = CFGetAllocator(v2);
      v53 = CFStringCreateMutable(v52, 0);
      if (!v53)
        goto LABEL_213;
      v54 = v53;
      CFStringAppendFormat(v53, 0, CFSTR("%s\n"), "#EXTM3U");
      if (FigMultivariantPlaylistGetVersion((uint64_t)v18))
      {
        Version = FigMultivariantPlaylistGetVersion((uint64_t)v18);
        CFStringAppendFormat(v54, 0, CFSTR("%s:%u\n"), "#EXT-X-VERSION", Version);
      }
      if (FigMultivariantPlaylistHasIndependentSegments((uint64_t)v18))
        CFStringAppendFormat(v54, 0, CFSTR("%s\n"), "#EXT-X-INDEPENDENT-SEGMENTS");
      v117 = 0u;
      URLString[0] = v2;
      URLString[1] = v4;
      *(_QWORD *)&v116 = v51;
      *((_QWORD *)&v116 + 1) = v54;
      v118 = v18;
      v119 = v41;
      v120 = 0;
      AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups((uint64_t)v18);
      v57 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v54, AudioGroups, 1936684398);
      if (v57
        || (SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups((uint64_t)v18),
            (v57 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v54, SubtitleGroups, 1935832172)) != 0)|| (ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups((uint64_t)v18), (v57 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v54, ClosedCaptionGroups, 1668047728)) != 0)|| (VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups((uint64_t)v18), (v57 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v54, VideoGroups, 1986618469)) != 0))
      {
        v17 = v57;
        goto LABEL_181;
      }
    }
    else
    {
      v54 = 0;
    }
    values = 0;
    keys[0] = 0;
    *(_QWORD *)&v117 = 0;
    *(_OWORD *)URLString = 0u;
    v116 = 0u;
    if (!v51)
      goto LABEL_217;
    if (v20)
    {
      if (CFArrayGetCount(v20) >= 1)
      {
        v113 = v51;
        v61 = 0;
        while (1)
        {
          v62 = (const __CFString *)CFArrayGetValueAtIndex(v20, v61);
          URLForCacheLookup = (const __CFURL *)FigAlternateGetURLForCacheLookup((uint64_t)v62);
          MediaPlaylistWriterHelper = fsadct_CopyPersistentStreamIDFromNetworkURL(v113, URLForCacheLookup, (CFTypeRef *)&values);
          if (MediaPlaylistWriterHelper)
            break;
          v65 = CFGetAllocator(v2);
          MediaPlaylistWriterHelper = fsadct_MakeMediaPlaylistWriterHelper(v65, (int)v2, (uint64_t)v4, values, URLString);
          if (MediaPlaylistWriterHelper)
            break;
          MediaPlaylistWriterHelper = fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(v2, URLString[0]);
          if (MediaPlaylistWriterHelper)
            break;
          MediaPlaylistWriterHelper = fsadct_WriteMediaPlaylistAndAddToMovpkg(v2, (uint64_t)URLString, (uint64_t)v18);
          if (MediaPlaylistWriterHelper)
            break;
          if (v18 && FigMultivariantPlaylistGetAlternates((uint64_t)v18))
          {
            if (v41 && v54 && v62)
            {
              if (!FigAlternateGetAudioGroupIDString((uint64_t)v62)
                || FigAlternateIsAudioGroupSynthesized((uint64_t)v62)
                || (v66 = (const void *)FigAlternateGetAudioGroupIDString((uint64_t)v62), CFSetContainsValue(v41, v66)))
              {
                if (!FigAlternateGetSubtitleGroupIDString((uint64_t)v62)
                  || FigAlternateIsSubtitleGroupSynthesized((uint64_t)v62)
                  || (v67 = (const void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v62),
                      CFSetContainsValue(v41, v67)))
                {
                  if (!FigAlternateGetVideoGroupIDString((uint64_t)v62)
                    || FigAlternateIsVideoGroupSynthesized((uint64_t)v62)
                    || (v68 = (const void *)FigAlternateGetVideoGroupIDString((uint64_t)v62), CFSetContainsValue(v41, v68)))
                  {
                    CFStringAppendFormat(v54, 0, CFSTR("%s:"), "#EXT-X-STREAM-INF");
                    PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v62);
                    CFStringAppendFormat(v54, 0, CFSTR("%s=%d"), "BANDWIDTH", PeakBitRate);
                    if ((int)FigAlternateGetAverageBitRate((uint64_t)v62) >= 1)
                    {
                      AverageBitRate = FigAlternateGetAverageBitRate((uint64_t)v62);
                      CFStringAppendFormat(v54, 0, CFSTR(",%s=%d"), "AVERAGE-BANDWIDTH", AverageBitRate);
                    }
                    FigAlternateGetVideoRangeString(v62);
                    if (!FigCFEqual())
                    {
                      VideoRangeString = FigAlternateGetVideoRangeString(v62);
                      CFStringAppendFormat(v54, 0, CFSTR(",%s=%@"), "VIDEO-RANGE", VideoRangeString);
                    }
                    CodecString = FigAlternateGetCodecString((uint64_t)v62);
                    CFStringAppendFormat(v54, 0, CFSTR(",%s=\"%@\""), "CODECS", CodecString);
                    FigAlternateGetResolution((uint64_t)v62);
                    if (v73 != 0.0 && FigAlternateGetResolution((uint64_t)v62) != 0.0)
                    {
                      Resolution = (unint64_t)FigAlternateGetResolution((uint64_t)v62);
                      v75 = FigAlternateGetResolution((uint64_t)v62);
                      CFStringAppendFormat(v54, 0, CFSTR(",%s=%llux%llu"), v75, "RESOLUTION", Resolution, (unint64_t)v76);
                    }
                    if (FigAlternateGetFrameRate((uint64_t)v62) > 0.0)
                    {
                      FrameRate = FigAlternateGetFrameRate((uint64_t)v62);
                      CFStringAppendFormat(v54, 0, CFSTR(",%s=%f"), "FRAME-RATE", *(_QWORD *)&FrameRate);
                    }
                    if (FigAlternateGetClosedCaptionGroupIDString((uint64_t)v62))
                    {
                      ClosedCaptionGroupIDString = (const void *)FigAlternateGetClosedCaptionGroupIDString((uint64_t)v62);
                      if (CFSetContainsValue(v41, ClosedCaptionGroupIDString))
                      {
                        v79 = FigAlternateGetClosedCaptionGroupIDString((uint64_t)v62);
                        CFStringAppendFormat(v54, 0, CFSTR(",%s=\"%@\""), "CLOSED-CAPTIONS", v79);
                      }
                    }
                    if (FigAlternateGetAudioGroupIDString((uint64_t)v62))
                    {
                      AudioGroupIDString = (const void *)FigAlternateGetAudioGroupIDString((uint64_t)v62);
                      if (CFSetContainsValue(v41, AudioGroupIDString))
                      {
                        v81 = FigAlternateGetAudioGroupIDString((uint64_t)v62);
                        CFStringAppendFormat(v54, 0, CFSTR(",%s=\"%@\""), "AUDIO", v81);
                      }
                    }
                    if (FigAlternateGetSubtitleGroupIDString((uint64_t)v62))
                    {
                      SubtitleGroupIDString = (const void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v62);
                      if (CFSetContainsValue(v41, SubtitleGroupIDString))
                      {
                        v83 = FigAlternateGetSubtitleGroupIDString((uint64_t)v62);
                        CFStringAppendFormat(v54, 0, CFSTR(",%s=\"%@\""), "SUBTITLES", v83);
                      }
                    }
                    if (FigAlternateGetVideoGroupIDString((uint64_t)v62))
                    {
                      VideoGroupIDString = (const void *)FigAlternateGetVideoGroupIDString((uint64_t)v62);
                      if (CFSetContainsValue(v41, VideoGroupIDString))
                      {
                        v85 = FigAlternateGetVideoGroupIDString((uint64_t)v62);
                        CFStringAppendFormat(v54, 0, CFSTR(",%s=\"%@\""), "VIDEO", v85);
                      }
                    }
                    HDCPLevel = FigAlternateGetHDCPLevel((uint64_t)v62);
                    if (HDCPLevel != -2)
                    {
                      PlaylistStringFromHDCPLevel = FigAlternateGetPlaylistStringFromHDCPLevel(HDCPLevel);
                      CFStringAppendFormat(v54, 0, CFSTR(",%s=%@"), "HDCP-LEVEL", PlaylistStringFromHDCPLevel);
                    }
                    if (FigAlternateGetStableStreamIdentifier((uint64_t)v62))
                    {
                      StableStreamIdentifier = FigAlternateGetStableStreamIdentifier((uint64_t)v62);
                      CFStringAppendFormat(v54, 0, CFSTR(",%s=\"%@\""), "STABLE-VARIANT-ID", StableStreamIdentifier);
                    }
                    CFStringAppendFormat(v54, 0, CFSTR("\n../%@/%@\n"), URLString[1], (_QWORD)v116);
                  }
                }
              }
            }
            else
            {
              MediaPlaylistWriterHelper = FigSignalErrorAt();
              if (MediaPlaylistWriterHelper)
                break;
            }
          }
          fsadct_DestroyMediaPlaylistWriterHelper((uint64_t)URLString);
          if (values)
          {
            CFRelease(values);
            values = 0;
          }
          if (++v61 >= CFArrayGetCount(v20))
          {
            v17 = 0;
            goto LABEL_143;
          }
        }
        v17 = MediaPlaylistWriterHelper;
LABEL_143:
        v1 = v112;
        v51 = v113;
LABEL_151:
        fsadct_DestroyMediaPlaylistWriterHelper((uint64_t)URLString);
        if (values)
          CFRelease(values);
        if (!v18 || v17)
        {
LABEL_180:
          if (!v54)
          {
LABEL_182:
            if (v51)
              CFRelease(v51);
            DerivedStorage = v111;
            if (v41)
              CFRelease(v41);
            v5 = v110;
            goto LABEL_187;
          }
LABEL_181:
          CFRelease(v54);
          goto LABEL_182;
        }
        blockBufferOut = 0;
        v122 = 0;
        if (v54)
        {
          v114 = v51;
          v91 = CFGetAllocator(v2);
          appended = CMBlockBufferCreateEmpty(v91, 0, 0, &blockBufferOut);
          if (!appended)
          {
            CFGetAllocator(v2);
            BytesFromCFString = FigCreateBytesFromCFString();
            if (BytesFromCFString)
            {
              v94 = (void *)BytesFromCFString;
              v95 = blockBufferOut;
              v96 = (size_t)v122;
              v97 = CFGetAllocator(v2);
              appended = CMBlockBufferAppendMemoryBlock(v95, v94, v96, v97, 0, 0, (size_t)v122, 0);
              if (!appended)
              {
                v98 = blockBufferOut;
                v99 = *(uint64_t (**)(const __CFString *, const __CFString *, const __CFString *, _QWORD, CMBlockBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                if (!v99)
                {
                  v17 = -12782;
LABEL_177:
                  v51 = v114;
LABEL_178:
                  if (blockBufferOut)
                    CFRelease(blockBufferOut);
                  goto LABEL_180;
                }
                appended = v99(v4, CFSTR("OfflineAvailableMedia"), CFSTR("LocallyHostedPlaylist.m3u8"), 0, v98);
                if (!appended)
                {
                  URLString[0] = 0;
                  values = 0;
                  keys[0] = 0;
                  v100 = (CFURLRef *)CMBaseObjectGetDerivedStorage();
                  if (*v100)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if (!v4)
                    {
LABEL_220:
                      v103 = FigSignalErrorAt();
                      goto LABEL_221;
                    }
                    v101 = v100;
                    v102 = *(uint64_t (**)(const __CFString *, const __CFString *, void **, CFStringRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                    if (v102)
                    {
                      v103 = v102(v4, CFSTR("OfflineAvailableMedia"), keys, URLString, 0, 0);
                      if (v103)
                      {
LABEL_221:
                        v17 = v103;
                        goto LABEL_170;
                      }
                      v104 = CFGetAllocator(v2);
                      v105 = FigHLSPersistentStoreGetFigBaseObject(v4);
                      v106 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (v106)
                      {
                        v17 = v106(v105, CFSTR("DataDirectory"), v104, &values);
                        if (v17)
                          goto LABEL_170;
                        v107 = CFGetAllocator(v2);
                        v108 = CFURLCreateCopyAppendingPathComponent(v107, (CFURLRef)values, URLString[0], 0);
                        *v101 = v108;
                        if (v108)
                          goto LABEL_170;
                        goto LABEL_220;
                      }
                    }
                    v17 = -12782;
                  }
LABEL_170:
                  v51 = v114;
                  if (URLString[0])
                    CFRelease(URLString[0]);
                  if (keys[0])
                    CFRelease(keys[0]);
                  if (values)
                    CFRelease(values);
                  goto LABEL_178;
                }
              }
            }
            else
            {
              appended = FigSignalErrorAt();
            }
          }
          v17 = appended;
          goto LABEL_177;
        }
LABEL_213:
        v17 = FigSignalErrorAt();
        goto LABEL_182;
      }
LABEL_142:
      v17 = 0;
      goto LABEL_151;
    }
    if (v18)
      goto LABEL_142;
    if (FigCFDictionaryGetCount() == 1
      && (CFDictionaryGetKeysAndValues(v51, (const void **)keys, (const void **)&values), keys[0])
      && values)
    {
      v89 = CFGetAllocator(v2);
      v90 = fsadct_MakeMediaPlaylistWriterHelper(v89, (int)v2, (uint64_t)v4, values, URLString);
      if (!v90)
      {
        v90 = fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(v2, URLString[0]);
        if (!v90)
        {
          v17 = fsadct_WriteMediaPlaylistAndAddToMovpkg(v2, (uint64_t)URLString, 0);
          if (!v17)
            values = 0;
          goto LABEL_151;
        }
      }
    }
    else
    {
LABEL_217:
      v90 = FigSignalErrorAt();
    }
    v17 = v90;
    goto LABEL_151;
  }
LABEL_187:
  v109 = *(void (**)(const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v109)
    v109(v4, 0xFFFFFFFFLL, 1);
  if (v17)
    *(_DWORD *)(v5 + 20) = v17;
  if (v18)
    CFRelease(v18);
  if (v20)
    CFRelease(v20);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  free(v1);
}

CFStringRef FigStreamingAssetDownloadCacheTranslatorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigStreamingAssetDownloadCacheTranslator %p]"), a1);
}

uint64_t fsadct_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
    CFRelease(v2);
  return FigSimpleMutexDestroy();
}

CFStringRef fsadct_CopyDebugDescription()
{
  CFStringRef v0;

  v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("\tFigStreamingAssetDownloadCacheTranslator : "));
  if (!v0)
    FigSignalErrorAt();
  return v0;
}

uint64_t fsadct_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("FSADCT_MultiVariantPlaylist")))
    return 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_QWORD *)DerivedStorage)
  {
    v7 = 0;
    *a4 = CFRetain(*(CFTypeRef *)DerivedStorage);
  }
  else
  {
    v7 = *(unsigned int *)(DerivedStorage + 20);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  return v7;
}

uint64_t fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(_DWORD *context, __CFString *a2, CFDictionaryRef theDict, int a4)
{
  uint64_t result;

  if (!theDict)
    return 0;
  context[8] = a4;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fsadct_WritePlaylistsForMediaGroupApplierFunction, context);
  result = context[16];
  if (!(_DWORD)result)
  {
    CFStringAppendFormat(a2, 0, CFSTR("\n\n"));
    return 0;
  }
  return result;
}

void fsadct_WritePlaylistsForMediaGroupApplierFunction(uint64_t a1, CFDictionaryRef theDict, _QWORD *a3)
{
  a3[5] = a1;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fsadct_WritePlaylistsForPersistentIDApplierFunction, a3);
}

void fsadct_WritePlaylistsForPersistentIDApplierFunction(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  __CFString *v7;
  const __CFDictionary *v8;
  int v9;
  uint64_t v10;
  const __CFURL *Value;
  __CFSet *v12;
  int MediaPlaylistWriterHelper;
  const __CFAllocator *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const __CFArray *v19;
  int v20;
  const __CFArray *v21;
  const void *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  CFIndex v27;
  const void *ValueAtIndex;
  __CFSet *theSet;
  const void *v30;
  const void *v31;
  CFTypeRef cf;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int16 v37;

  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = *(const __CFDictionary **)(a3 + 16);
  v7 = *(__CFString **)(a3 + 24);
  v9 = *(_DWORD *)(a3 + 32);
  v10 = *(_QWORD *)(a3 + 48);
  v31 = *(const void **)(a3 + 40);
  Value = (const __CFURL *)CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_URL"));
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  cf = 0;
  v12 = *(__CFSet **)(a3 + 56);
  if (!v12)
  {
LABEL_59:
    MediaPlaylistWriterHelper = FigSignalErrorAt();
    goto LABEL_60;
  }
  if (Value)
  {
    MediaPlaylistWriterHelper = fsadct_CopyPersistentStreamIDFromNetworkURL(v8, Value, &cf);
    if (MediaPlaylistWriterHelper)
    {
LABEL_60:
      v20 = MediaPlaylistWriterHelper;
      goto LABEL_56;
    }
    if (!cf)
      goto LABEL_18;
    v14 = CFGetAllocator(v5);
    MediaPlaylistWriterHelper = fsadct_MakeMediaPlaylistWriterHelper(v14, (int)v5, v6, cf, (CFStringRef *)&v33);
    if (MediaPlaylistWriterHelper)
      goto LABEL_60;
    MediaPlaylistWriterHelper = fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(v5, (const void *)v33);
    if (MediaPlaylistWriterHelper)
      goto LABEL_60;
    MediaPlaylistWriterHelper = fsadct_WriteMediaPlaylistAndAddToMovpkg(v5, (uint64_t)&v33, v10);
    if (MediaPlaylistWriterHelper)
      goto LABEL_60;
    if (!cf)
    {
LABEL_18:
      v20 = 0;
      goto LABEL_58;
    }
    v12 = *(__CFSet **)(a3 + 56);
  }
  theSet = v12;
  v30 = CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_Channels"));
  v15 = CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_Name"));
  v16 = CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_UnicodeLanguageIdentifier"));
  v17 = CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_ClosedCaptionType"));
  v18 = CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_StableStreamIdentifier"));
  v19 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("FBPAEGLMK_Characteristics"));
  v20 = 0;
  v37 = 0;
  v36 = 0;
  if (v9 != 1986618469 && v16 && v15)
  {
    if (v7)
    {
      v21 = v19;
      if (v9 == 1668047728)
      {
        v23 = "CLOSED-CAPTIONS";
        v22 = v31;
      }
      else
      {
        v22 = v31;
        if (v9 == 1935832172)
        {
          v23 = "SUBTITLES";
        }
        else
        {
          if (v9 != 1936684398)
          {
LABEL_22:
            if (v22)
              CFStringAppendFormat(v7, 0, CFSTR(",%s=\"%@\""), "GROUP-ID", v22);
            CFStringAppendFormat(v7, 0, CFSTR(",%s=\"%@\""), "LANGUAGE", v16);
            CFStringAppendFormat(v7, 0, CFSTR(",%s=\"%@\""), "NAME", v15);
            if (v17)
              CFStringAppendFormat(v7, 0, CFSTR(",%s=\"%@\""), "INSTREAM-ID", v17);
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if ((_BYTE)v37)
                v24 = "YES";
              else
                v24 = "NO";
              CFStringAppendFormat(v7, 0, CFSTR(",%s=%s"), "AUTOSELECT", v24);
            }
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if (HIBYTE(v37))
                v25 = "YES";
              else
                v25 = "NO";
              CFStringAppendFormat(v7, 0, CFSTR(",%s=%s"), "FORCED", v25);
            }
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if (v36)
                v26 = "YES";
              else
                v26 = "NO";
              CFStringAppendFormat(v7, 0, CFSTR(",%s=%s"), "DEFAULT", v26);
            }
            if (v30)
              CFStringAppendFormat(v7, 0, CFSTR(",%s=\"%@\""), "CHANNELS", v30);
            if (v18)
              CFStringAppendFormat(v7, 0, CFSTR(",%s=\"%@\""), "STABLE-RENDITION-ID", v18);
            if (v21)
            {
              CFStringAppendFormat(v7, 0, CFSTR(",%s=\""), "CHARACTERISTICS");
              if (CFArrayGetCount(v21) >= 1)
              {
                v27 = 0;
                do
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v21, v27);
                  if (v27)
                    CFStringAppendFormat(v7, 0, CFSTR(","));
                  CFStringAppendFormat(v7, 0, CFSTR("%@"), ValueAtIndex);
                  ++v27;
                }
                while (v27 < CFArrayGetCount(v21));
              }
              CFStringAppendFormat(v7, 0, CFSTR("\""));
              v22 = v31;
            }
            if (*((_QWORD *)&v33 + 1) && (_QWORD)v34)
              CFStringAppendFormat(v7, 0, CFSTR(",%s=\"../%@/%@\""), "URI", *((_QWORD *)&v33 + 1), (_QWORD)v34);
            CFStringAppendFormat(v7, 0, CFSTR("\n"));
            CFSetSetValue(theSet, v22);
            v20 = 0;
            goto LABEL_56;
          }
          v23 = "AUDIO";
        }
      }
      CFStringAppendFormat(v7, 0, CFSTR("%s:%s=%s"), "#EXT-X-MEDIA", "TYPE", v23);
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_56:
  if (cf)
    CFRelease(cf);
LABEL_58:
  fsadct_DestroyMediaPlaylistWriterHelper((uint64_t)&v33);
  *(_DWORD *)(a3 + 64) = v20;
}

uint64_t fsadct_CopyPersistentStreamIDFromNetworkURL(const __CFDictionary *a1, const __CFURL *a2, CFTypeRef *a3)
{
  CFTypeRef v5;
  const void *v6;
  const void *Value;

  if (!a2)
    return FigSignalErrorAt();
  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v5 = FigCFHTTPCreateURLString(a2);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  Value = CFDictionaryGetValue(a1, v5);
  if (Value)
    *a3 = CFRetain(Value);
  CFRelease(v6);
  return 0;
}

uint64_t fsadct_MakeMediaPlaylistWriterHelper(const __CFAllocator *a1, int a2, uint64_t a3, CFTypeRef cf, CFStringRef *a5)
{
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  _QWORD *v11;
  __CFDictionary *v12;
  uint64_t (*v13)(uint64_t, CFTypeRef, __CFDictionary *, CFStringRef *);
  uint64_t v14;
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t *);
  uint64_t v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, const __CFAllocator *, CFStringRef *);
  uint64_t v21;
  CFURLRef v22;
  CFStringRef v23;
  uint64_t DerivedStorage;
  uint64_t v25;
  uint64_t (*v26)(CFStringRef, const __CFString *, CFStringRef *, OpaqueCMBlockBuffer **);
  uint64_t v27;
  CFStringRef v28;
  CFStringRef v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, const __CFString *, const __CFAllocator *, OpaqueCMBlockBuffer **);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFString *v35;
  const __CFString *v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  CFStringRef URLString;
  uint64_t v42;
  CFTypeRef cfa;
  OpaqueCMBlockBuffer *v44;

  v39 = *MEMORY[0x1E0C9AE40];
  if (cf && a1 && a3 && a5)
  {
    a5[1] = (CFStringRef)CFRetain(cf);
    URLString = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = (_QWORD *)MEMORY[0x1E0C9AE50];
    if (Mutable)
    {
      v12 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("StreamInfoDemandWriteAccess"), (const void *)*MEMORY[0x1E0C9AE50]);
      v13 = *(uint64_t (**)(uint64_t, CFTypeRef, __CFDictionary *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
      if (v13)
      {
        v14 = v13(a3, cf, v12, &URLString);
        if ((_DWORD)v14)
        {
          if (URLString)
            CFRelease(URLString);
        }
        else
        {
          *a5 = URLString;
          URLString = 0;
        }
      }
      else
      {
        v14 = 4294954514;
      }
      CFRelease(v12);
      if ((_DWORD)v14)
        return v14;
    }
    else
    {
      v14 = FigSignalErrorAt();
      if ((_DWORD)v14)
        return v14;
    }
    FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(*a5);
    v16 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
    if (!v16)
      return 4294954514;
    v17 = v16(FigBaseObject, CFSTR("StreamInfoCompleteState"), a1, &v39);
    if ((_DWORD)v17)
      return v17;
    if (v39 == *v11)
    {
      v18 = *a5;
      URLString = 0;
      if (v18)
      {
        v19 = FigHLSPersistentStreamInfoGetFigBaseObject(v18);
        v20 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v20)
        {
          v21 = v20(v19, CFSTR("StreamInfoMediaPlaylistNetworkURL"), v9, &URLString);
          if ((_DWORD)v21)
          {
            v14 = v21;
            v22 = 0;
          }
          else
          {
            v22 = CFURLCreateWithString(v9, URLString, 0);
            if (v22)
              v14 = 0;
            else
              v14 = FigSignalErrorAt();
          }
        }
        else
        {
          v22 = 0;
          v14 = 4294954514;
        }
        if (URLString)
          CFRelease(URLString);
        if ((_DWORD)v14)
          goto LABEL_60;
      }
      else
      {
        v14 = FigSignalErrorAt();
        v22 = 0;
        if ((_DWORD)v14)
          goto LABEL_60;
      }
      v23 = *a5;
      URLString = 0;
      v44 = 0;
      cfa = 0;
      v40 = 0;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (v22 && v23)
      {
        v25 = DerivedStorage;
        v26 = *(uint64_t (**)(CFStringRef, const __CFString *, CFStringRef *, OpaqueCMBlockBuffer **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v26)
        {
          v14 = 4294954514;
LABEL_31:
          if (URLString)
            CFRelease(URLString);
          if (v44)
            CFRelease(v44);
          if (cfa)
            CFRelease(cfa);
          if ((_DWORD)v14)
            goto LABEL_60;
          if (a5[1])
          {
            v28 = CFStringCreateWithFormat(a1, 0, CFSTR("%@-%s"), a5[1], "LocallyHostedPlaylist.m3u8");
            if (v28)
            {
              a5[2] = v28;
              goto LABEL_41;
            }
          }
          v38 = FigSignalErrorAt();
          if (!(_DWORD)v38)
          {
LABEL_41:
            v29 = *a5;
            v44 = 0;
            v42 = 0;
            cfa = 0;
            URLString = 0;
            if (!v29)
            {
              v32 = FigSignalErrorAt();
              goto LABEL_74;
            }
            v30 = FigHLSPersistentStreamInfoGetFigBaseObject(v29);
            v31 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, OpaqueCMBlockBuffer **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v31)
            {
              v32 = v31(v30, CFSTR("StreamInfoMediaSegmentList"), a1, &v44);
              if ((_DWORD)v32)
                goto LABEL_74;
              v33 = FigHLSPersistentStreamInfoGetFigBaseObject(v29);
              v34 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v34)
              {
                v32 = v34(v33, CFSTR("StreamInfoMediaInitializationSegmentList"), a1, &cfa);
                if (!(_DWORD)v32)
                {
                  v35 = (const __CFString *)CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v36 = v35;
                  if (!v35)
                  {
                    v14 = FigSignalErrorAt();
                    goto LABEL_54;
                  }
                  URLString = v35;
                  if (cfa)
                  {
                    CFDictionaryApplyFunction((CFDictionaryRef)cfa, (CFDictionaryApplierFunction)fsadct_CreateMediaMapKeyToFilePathMappingOutApplierFunction, &URLString);
                    v14 = v42;
                    if ((_DWORD)v42)
                      goto LABEL_54;
                  }
                  if (v44)
                  {
                    CFDictionaryApplyFunction(v44, (CFDictionaryApplierFunction)fsadct_CreateMediaMapKeyToFilePathMappingOutApplierFunction, &URLString);
                    v14 = v42;
                    if ((_DWORD)v42)
                      goto LABEL_54;
                  }
                  v14 = 0;
                  a5[4] = v36;
                  goto LABEL_52;
                }
LABEL_74:
                v14 = v32;
LABEL_52:
                v36 = 0;
LABEL_54:
                if (v44)
                  CFRelease(v44);
                if (cfa)
                  CFRelease(cfa);
                if (v36)
                  CFRelease(v36);
                goto LABEL_60;
              }
            }
            v36 = 0;
            v14 = 4294954514;
            goto LABEL_54;
          }
          v14 = v38;
LABEL_60:
          if (v22)
            CFRelease(v22);
          return v14;
        }
        v27 = v26(v23, CFSTR("NetworkPlaylist"), &URLString, &v44);
        if (!(_DWORD)v27)
        {
          v14 = FigStreamPlaylistParse(v44, v22, 0, &v40, 0, 0, 1, *(unsigned __int8 *)(v25 + 16), 0, 0, 0, 0, 0, &cfa);
          if (!(_DWORD)v14)
          {
            a5[3] = (CFStringRef)cfa;
            cfa = 0;
          }
          goto LABEL_31;
        }
      }
      else
      {
        v27 = FigSignalErrorAt();
      }
      v14 = v27;
      goto LABEL_31;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  __CFArray *Mutable;
  const __CFAllocator *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = *(__CFArray **)(DerivedStorage + 32);
  if (!Mutable)
  {
    v6 = CFGetAllocator(a1);
    Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 32) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, a2);
  return 0;
}

uint64_t fsadct_WriteMediaPlaylistAndAddToMovpkg(const void *a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v6;
  __CFString *Mutable;
  __CFString *v8;
  uint64_t TargetDuration;
  uint64_t Version;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t DiscontinuityDomain;
  CFIndex v15;
  const __CFArray *MediaSegmentSpecifiers;
  const __CFArray *v17;
  const void *ValueAtIndex;
  uint64_t ContentKeySpecifier;
  const __CFData *IV;
  uint64_t appended;
  uint64_t v22;
  uint64_t v23;
  uint64_t MapSegmentSpecifier;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const __CFData *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t DerivedStorage;
  const __CFAllocator *v34;
  uint64_t v35;
  uint64_t BytesFromCFString;
  void *v37;
  OpaqueCMBlockBuffer *v38;
  size_t v39;
  const __CFAllocator *v40;
  uint64_t v41;
  uint64_t v42;
  CMBlockBufferRef v43;
  uint64_t (*v44)(uint64_t, const __CFString *, uint64_t, CMBlockBufferRef);
  uint64_t v45;
  const __CFAllocator *v46;
  CFURLRef v47;
  const __CFURL *v48;
  const __CFAllocator *v49;
  CFURLRef v50;
  uint64_t v52;
  CMBlockBufferRef blockBufferOut;
  size_t dataLength;

  v6 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v6, 0);
  if (Mutable)
  {
    v8 = Mutable;
    v52 = a3;
    if (a2)
    {
      if (*(_QWORD *)(a2 + 24))
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("%s\n"), "#EXTM3U");
        TargetDuration = FigMediaPlaylistGetTargetDuration(*(_QWORD *)(a2 + 24));
        CFStringAppendFormat(v8, 0, CFSTR("%s:%u\n"), "#EXT-X-TARGETDURATION", TargetDuration);
        if (FigMediaPlaylistGetVersion(*(_QWORD *)(a2 + 24)))
        {
          Version = FigMediaPlaylistGetVersion(*(_QWORD *)(a2 + 24));
          CFStringAppendFormat(v8, 0, CFSTR("%s:%u\n"), "#EXT-X-VERSION", Version);
        }
        CFStringAppendFormat(v8, 0, CFSTR("%s:%u\n"), "#EXT-X-MEDIA-SEQUENCE", 0);
        CFStringAppendFormat(v8, 0, CFSTR("%s:%s\n"), "#EXT-X-PLAYLIST-TYPE", "VOD");
        if (FigMediaPlaylistHasIndependentSegments(*(_QWORD *)(a2 + 24)))
          CFStringAppendFormat(v8, 0, CFSTR("%s\n"), "#EXT-X-INDEPENDENT-SEGMENTS");
        goto LABEL_8;
      }
      v32 = FigSignalErrorAt();
      if (!(_DWORD)v32)
      {
LABEL_8:
        v11 = 0;
        v12 = 0;
        v13 = 0;
        DiscontinuityDomain = 0;
        v15 = 0;
        while (1)
        {
          MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(_QWORD *)(a2 + 24));
          if (MediaSegmentSpecifiers)
            MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
          if (v15 >= (uint64_t)MediaSegmentSpecifiers)
          {
            CFStringAppendFormat(v8, 0, CFSTR("%s\n"), "#EXT-X-ENDLIST");
            goto LABEL_32;
          }
          v17 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(_QWORD *)(a2 + 24));
          ValueAtIndex = CFArrayGetValueAtIndex(v17, v15);
          if (FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex) > DiscontinuityDomain)
          {
            DiscontinuityDomain = FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex);
            CFStringAppendFormat(v8, 0, CFSTR("%s\n"), "#EXT-X-DISCONTINUITY");
          }
          if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex)
            && (v12 != FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex)
             || v13 != FigMediaSegmentSpecifierGetIV((uint64_t)ValueAtIndex)
             && (v23 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex),
                 FigContentKeySpecifierGetKeySystem(v23) == 2)))
          {
            ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex);
            IV = (const __CFData *)FigMediaSegmentSpecifierGetIV((uint64_t)ValueAtIndex);
            appended = fsadct_AppendCryptKeyToPlaylistString(v8, ContentKeySpecifier, IV);
            if ((_DWORD)appended)
              goto LABEL_30;
            v13 = FigMediaSegmentSpecifierGetIV((uint64_t)ValueAtIndex);
            v22 = (uint64_t)ValueAtIndex;
          }
          else
          {
            if (!FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex))
              goto LABEL_26;
            MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            if (v13 == FigMediaSegmentSpecifierGetIV(MapSegmentSpecifier))
              goto LABEL_26;
            v25 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            v26 = FigMediaSegmentSpecifierGetContentKeySpecifier(v25);
            if (FigContentKeySpecifierGetKeySystem(v26) != 2)
              goto LABEL_26;
            v27 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex);
            v28 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            v29 = (const __CFData *)FigMediaSegmentSpecifierGetIV(v28);
            appended = fsadct_AppendCryptKeyToPlaylistString(v8, v27, v29);
            if ((_DWORD)appended)
              goto LABEL_30;
            v30 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            v13 = FigMediaSegmentSpecifierGetIV(v30);
            v22 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
          }
          v12 = FigMediaSegmentSpecifierGetContentKeySpecifier(v22);
LABEL_26:
          if (v11 != FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex))
          {
            v31 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            appended = fsadct_AppendSegmentToPlaylistString(a1, a2, v8, v31, 1);
            if ((_DWORD)appended)
              goto LABEL_30;
            v11 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
          }
          appended = fsadct_AppendSegmentToPlaylistString(a1, a2, v8, (uint64_t)ValueAtIndex, 0);
          ++v15;
          if ((_DWORD)appended)
            goto LABEL_30;
        }
      }
      goto LABEL_45;
    }
    v32 = FigSignalErrorAt();
    if ((_DWORD)v32)
    {
LABEL_45:
      CFRelease(v8);
      return v32;
    }
    appended = FigSignalErrorAt();
    if ((_DWORD)appended)
    {
LABEL_30:
      v32 = appended;
      goto LABEL_45;
    }
LABEL_32:
    blockBufferOut = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    dataLength = 0;
    v34 = CFGetAllocator(a1);
    v35 = CMBlockBufferCreateEmpty(v34, 0, 0, &blockBufferOut);
    if ((_DWORD)v35)
      goto LABEL_47;
    CFGetAllocator(a1);
    BytesFromCFString = FigCreateBytesFromCFString();
    if (BytesFromCFString)
    {
      v37 = (void *)BytesFromCFString;
      v38 = blockBufferOut;
      v39 = dataLength;
      v40 = CFGetAllocator(a1);
      v35 = CMBlockBufferAppendMemoryBlock(v38, v37, v39, v40, 0, 0, dataLength, 0);
      if ((_DWORD)v35)
      {
LABEL_47:
        v32 = v35;
        goto LABEL_43;
      }
      v41 = *(_QWORD *)a2;
      v42 = *(_QWORD *)(a2 + 16);
      v43 = blockBufferOut;
      v44 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMBlockBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8);
      if (!v44)
      {
        v32 = 4294954514;
        goto LABEL_43;
      }
      v45 = v44(v41, CFSTR("OfflineAvailableMedia"), v42, v43);
      v32 = v45;
      if (v52 || (_DWORD)v45)
      {
LABEL_43:
        if (blockBufferOut)
          CFRelease(blockBufferOut);
        goto LABEL_45;
      }
      v46 = CFGetAllocator(a1);
      v47 = CFURLCreateCopyAppendingPathComponent(v46, *(CFURLRef *)(DerivedStorage + 8), *(CFStringRef *)(a2 + 8), 1u);
      if (v47)
      {
        v48 = v47;
        v49 = CFGetAllocator(a1);
        v50 = CFURLCreateCopyAppendingPathComponent(v49, v48, *(CFStringRef *)(a2 + 16), 0);
        v32 = 0;
        *(_QWORD *)DerivedStorage = v50;
        if (!v50)
          v32 = FigSignalErrorAt();
        CFRelease(v48);
        goto LABEL_43;
      }
    }
    v35 = FigSignalErrorAt();
    goto LABEL_47;
  }
  return FigSignalErrorAt();
}

void fsadct_DestroyMediaPlaylistWriterHelper(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void fsadct_CreateMediaMapKeyToFilePathMappingOutApplierFunction(int a1, const __CFDictionary *cf, uint64_t a3)
{
  __CFDictionary *v4;
  CFTypeID v6;
  const void *v7;
  CFStringRef v8;
  CFStringRef v9;
  const void *Value;
  int v11;

  v4 = *(__CFDictionary **)a3;
  if (*(_QWORD *)a3
    && cf
    && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID())
    && (v7 = CFDictionaryGetValue(cf, CFSTR("URL")), FigCFDictionaryGetInt64IfPresent())
    && (v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@-%lld"), v7, 0)) != 0)
  {
    v9 = v8;
    Value = CFDictionaryGetValue(cf, CFSTR("PATH"));
    if (Value)
    {
      CFDictionarySetValue(v4, v9, Value);
      v11 = 0;
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
    *(_DWORD *)(a3 + 8) = v11;
    CFRelease(v9);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = FigSignalErrorAt();
  }
}

uint64_t fsadct_AppendCryptKeyToPlaylistString(__CFString *a1, uint64_t a2, const __CFData *a3)
{
  uint64_t Identifier;
  int KeySystem;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  char i;
  const __CFArray *SupportedProtocolVersions;
  const __CFArray *v17;
  uint64_t SInt64;

  if (a1)
  {
    if (!a2)
      return FigSignalErrorAt();
    if (FigContentKeySpecifierGetIdentifier(a2))
    {
      Identifier = FigContentKeySpecifierGetIdentifier(a2);
      KeySystem = FigContentKeySpecifierGetKeySystem(a2);
      v8 = &stru_1E2FD85F8;
      v9 = CFSTR("identity");
      if (KeySystem != 2)
        v9 = &stru_1E2FD85F8;
      if (KeySystem == 1)
        v10 = CFSTR("com.apple.streamingkeydelivery");
      else
        v10 = v9;
      v11 = FigContentKeySpecifierGetEncryptionMethod(a2) - 1;
      if (v11 <= 4)
        v8 = off_1E2F9FB90[v11];
      if (a3)
      {
        v12 = CFDataGetLength(a3) == 16 ? FigCreateHexStringFromCFData() : FigSignalErrorAt();
        v13 = v12;
        if ((_DWORD)v12)
          return v13;
      }
      CFStringAppendFormat(a1, 0, CFSTR("%s:%s=\"%@\""), "#EXT-X-KEY", "URI", Identifier);
      if (CFStringGetLength(v10) >= 1)
        CFStringAppendFormat(a1, 0, CFSTR(",%s=\"%@\""), "KEYFORMAT", v10);
      if (CFStringGetLength(v8) >= 1)
        CFStringAppendFormat(a1, 0, CFSTR(",%s=%@"), "METHOD", v8);
      if (FigContentKeySpecifierGetSupportedProtocolVersions(a2))
      {
        CFStringAppendFormat(a1, 0, CFSTR(",%s=\""), "KEYFORMATVERSIONS");
        v14 = 0;
        for (i = 1; ; i = 0)
        {
          SupportedProtocolVersions = (const __CFArray *)FigContentKeySpecifierGetSupportedProtocolVersions(a2);
          if (SupportedProtocolVersions)
            SupportedProtocolVersions = (const __CFArray *)CFArrayGetCount(SupportedProtocolVersions);
          if (v14 >= (uint64_t)SupportedProtocolVersions)
            break;
          v17 = (const __CFArray *)FigContentKeySpecifierGetSupportedProtocolVersions(a2);
          CFArrayGetValueAtIndex(v17, v14);
          SInt64 = FigCFNumberGetSInt64();
          if ((i & 1) == 0)
            CFStringAppendFormat(a1, 0, CFSTR("/"));
          CFStringAppendFormat(a1, 0, CFSTR("%lld"), SInt64);
          ++v14;
        }
        CFStringAppendFormat(a1, 0, CFSTR("\""));
      }
      CFStringAppendFormat(a1, 0, CFSTR("\n"));
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fsadct_AppendSegmentToPlaylistString(const void *a1, uint64_t a2, __CFString *a3, uint64_t a4, int a5)
{
  const __CFAllocator *v9;
  uint64_t StartOffset;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, _QWORD, CFStringRef *);
  uint64_t v13;
  CFURLRef v14;
  const __CFURL *v15;
  const __CFAllocator *AllocatorForMedia;
  const __CFString *v17;
  const __CFURL *v18;
  const __CFURL *v19;
  CFTypeRef v20;
  CFStringRef v21;
  CFStringRef v22;
  uint64_t v23;
  const void *Value;
  const void *v25;
  double TimeInSeconds;
  double BitRate;
  uint64_t v29;
  CFStringRef URLString;

  if (a3 && a4 && a2)
  {
    v9 = CFGetAllocator(a1);
    URLString = 0;
    if (FigMediaSegmentSpecifierGetStartOffset(a4))
      StartOffset = FigMediaSegmentSpecifierGetStartOffset(a4);
    else
      StartOffset = 0;
    FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(*(_QWORD *)a2);
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v12)
    {
      v13 = v12(FigBaseObject, CFSTR("StreamInfoMediaPlaylistNetworkURL"), 0, &URLString);
      if (!(_DWORD)v13)
      {
        v14 = CFURLCreateWithString(v9, URLString, 0);
        if (v14)
        {
          v15 = v14;
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          v17 = (const __CFString *)FigMediaSegmentSpecifierGetURLString(a4);
          v18 = CFURLCreateWithString(AllocatorForMedia, v17, v15);
          v19 = v18;
          if (v18)
          {
            v20 = FigCFHTTPCreateURLString(v18);
            if (v20)
            {
              v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@-%lld"), v20, StartOffset);
              if (v21)
              {
                v22 = v21;
                v23 = 0;
LABEL_14:
                CFRelease(v15);
                goto LABEL_16;
              }
            }
          }
          else
          {
            v20 = 0;
          }
          v23 = FigSignalErrorAt();
          v22 = 0;
          goto LABEL_14;
        }
        v13 = FigSignalErrorAt();
      }
      v23 = v13;
      v22 = 0;
      v20 = 0;
      v19 = 0;
    }
    else
    {
      v22 = 0;
      v20 = 0;
      v19 = 0;
      v23 = 4294954514;
    }
LABEL_16:
    if (URLString)
      CFRelease(URLString);
    if (v19)
      CFRelease(v19);
    if (v20)
      CFRelease(v20);
    if (!(_DWORD)v23)
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 32), v22);
      if (!Value)
      {
        v23 = FigSignalErrorAt();
        if (!v22)
          return v23;
        goto LABEL_32;
      }
      v25 = Value;
      if (a5 == 1)
      {
        CFStringAppendFormat(a3, 0, CFSTR("%s:%s=\"%@\"\n"), "#EXT-X-MAP", "URI", Value);
      }
      else if (!a5)
      {
        TimeInSeconds = FigMediaSegmentSpecifierGetTimeInSeconds(a4);
        CFStringAppendFormat(a3, 0, CFSTR("%s:%f,\n"), "#EXTINF", *(_QWORD *)&TimeInSeconds);
        if (FigMediaSegmentSpecifierGetBitRate(a4) > 0.0)
        {
          BitRate = FigMediaSegmentSpecifierGetBitRate(a4);
          CFStringAppendFormat(a3, 0, CFSTR("%s:%llu\n"), "#EXT-X-BITRATE", (unint64_t)BitRate);
        }
        CFStringAppendFormat(a3, 0, CFSTR("%@\n"), v25, v29);
      }
      v23 = 0;
    }
    if (!v22)
      return v23;
LABEL_32:
    CFRelease(v22);
    return v23;
  }
  return FigSignalErrorAt();
}

void fcrReleaseAndClearMediaAccessibilityParams(uint64_t a1)
{
  int64x2_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v12;
  const void *v13;
  const void *v14;

  v2 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 128) = v2;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)a1 = v2;
  *(int64x2_t *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 64), &xmmword_1932FA140, 0x40uLL);
  v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  v4 = *(const void **)(a1 + 152);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
  v5 = *(const void **)(a1 + 160);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v6 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_QWORD *)(a1 + 200) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x4044000000000000;
  v12 = a1 + 208;
  do
  {
    v13 = *(const void **)(v12 + v6);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v12 + v6) = 0;
    }
    v6 += 8;
  }
  while (v6 != 64);
  v14 = *(const void **)(a1 + 288);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 288) = 0;
  }
}

void fcrCopyMediaAccessibilityParams(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  v10 = *(const void **)(a2 + 144);
  v11 = *(const void **)(a1 + 144);
  *(_QWORD *)(a2 + 144) = v11;
  if (v11)
    CFRetain(v11);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  v12 = *(const void **)(a2 + 152);
  v13 = *(const void **)(a1 + 152);
  *(_QWORD *)(a2 + 152) = v13;
  if (v13)
    CFRetain(v13);
  if (v12)
    CFRelease(v12);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 176);
  v14 = *(const void **)(a2 + 160);
  v15 = *(const void **)(a1 + 160);
  *(_QWORD *)(a2 + 160) = v15;
  if (v15)
    CFRetain(v15);
  if (v14)
    CFRelease(v14);
  v16 = 0;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a1 + 272);
  v17 = a2 + 208;
  do
  {
    v18 = *(const void **)(v17 + v16);
    v19 = *(const void **)(a1 + 208 + v16);
    *(_QWORD *)(v17 + v16) = v19;
    if (v19)
      CFRetain(v19);
    if (v18)
      CFRelease(v18);
    v16 += 8;
  }
  while (v16 != 64);
  v20 = *(const void **)(a2 + 288);
  v21 = *(const void **)(a1 + 288);
  *(_QWORD *)(a2 + 288) = v21;
  if (v21)
    CFRetain(v21);
  if (v20)
    CFRelease(v20);
}

uint64_t FigCaptionRendererMACacheLoad(_QWORD *a1, int a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;

  if (!a1[42])
    return 0;
  v4 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    v5 = v4;
    *v4 = CFRetain(a1);
    v6 = a1[42];
    if (a2)
      dispatch_sync_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_0);
    else
      dispatch_async_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_0);
    return 0;
  }
  return 4294950095;
}

void mediaAccessibilityDidChangeDoAsync_0(_QWORD *a1)
{
  _QWORD *v2;
  CGColor *v3;
  CGColor *v4;
  CGColor *v5;
  MACaptionAppearanceFontStyle v6;
  MACaptionAppearanceBehavior *v7;
  const void *active;
  uint64_t v9;
  const void *v10;
  void (*v11)(const void *, _BYTE *);
  _BYTE __dst[296];
  MACaptionAppearanceBehavior behavior[38];

  v2 = (_QWORD *)*a1;
  memset(behavior, 0, 296);
  v3 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, behavior);
  behavior[18] = (MACaptionAppearanceBehavior)v3;
  if (v3)
    CGColorGetComponents(v3);
  v4 = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, &behavior[1]);
  behavior[19] = (MACaptionAppearanceBehavior)v4;
  if (v4)
    CGColorGetComponents(v4);
  v5 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, &behavior[2]);
  behavior[20] = (MACaptionAppearanceBehavior)v5;
  if (v5)
    CGColorGetComponents(v5);
  behavior[21] = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, &behavior[3]);
  behavior[22] = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, &behavior[4]);
  behavior[23] = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, &behavior[5]);
  behavior[24] = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, &behavior[6]);
  v6 = kMACaptionAppearanceFontStyleDefault;
  behavior[25] = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, &behavior[7]);
  v7 = &behavior[8];
  do
  {
    behavior[v6 + 26] = (MACaptionAppearanceBehavior)MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, v7, v6);
    ++v6;
    ++v7;
  }
  while (v6 != 8);
  behavior[34] = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &behavior[16]);
  active = (const void *)MACaptionAppearancePrefCopyActiveProfileID();
  behavior[36] = MACaptionAppearancePrefCopyProfileName();
  if (active)
    CFRelease(active);
  fcrCopyMediaAccessibilityParams((uint64_t)behavior, (uint64_t)(v2 + 4));
  if (v2[3])
  {
    v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v9)
    {
      v10 = (const void *)v9;
      v11 = (void (*)(const void *, _BYTE *))v2[3];
      memcpy(__dst, behavior, sizeof(__dst));
      v11(v10, __dst);
      CFRelease(v10);
    }
  }
  fcrReleaseAndClearMediaAccessibilityParams((uint64_t)behavior);
  CFRelease(v2);
  free(a1);
}

uint64_t FigCaptionRendererMACacheCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *Instance;
  dispatch_queue_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[256];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererMACacheLocalGetTypeID_sRegisterFigCaptionRendererMACacheOnce, RegisterFigCaptionRendererMACacheClass);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  fcrReleaseAndClearMediaAccessibilityParams((uint64_t)(Instance + 4));
  snprintf(__str, 0x100uLL, "com.apple.coremedia.FigCaptionRendererMACache.msgQueue<%p>", Instance);
  v7 = dispatch_queue_create(__str, 0);
  Instance[42] = v7;
  if (!v7)
  {
    v9 = 4294950095;
LABEL_7:
    CFRelease(Instance);
    return v9;
  }
  if (a1)
  {
    if (a2)
    {
      Instance[3] = a1;
      v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      Instance[2] = v8;
      if (!v8)
      {
        v9 = FigSignalErrorAt();
        goto LABEL_7;
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterAddWeakListener();
  v9 = 0;
  *a3 = Instance;
  return v9;
}

void mediaAccessibilityDidChange_0(uint64_t a1, dispatch_queue_t *a2)
{
  _QWORD *v3;
  void *v4;

  if (a2[42])
  {
    v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v3)
    {
      v4 = v3;
      *v3 = CFRetain(a2);
      dispatch_async_f(a2[42], v4, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_0);
    }
  }
}

uint64_t RegisterFigCaptionRendererMACacheClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionRendererMACacheID = result;
  return result;
}

double FigCaptionRendererMACacheInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 336) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigCaptionRendererMACache_Finalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterRemoveWeakListener();
  v2 = *(NSObject **)(a1 + 336);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  fcrReleaseAndClearMediaAccessibilityParams(a1 + 32);
}

__CFString *FigCaptionRendererMACacheCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererMACache %p>"), a1);
  return Mutable;
}

BOOL FigAudioFileFormatWriterCanFileTypeSupportMediaType(uint64_t a1, int a2)
{
  return a2 == 1936684398;
}

uint64_t FigAudioFileFormatWriterCanFileTypeSupportFormatDescription(uint64_t a1, CMFormatDescriptionRef desc)
{
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioStreamBasicDescription *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  int mFormatID;
  unsigned int v11;
  UInt32 mBitsPerChannel;
  char *v13;
  uint64_t v14;
  UInt32 outDataSize;

  if (CMFormatDescriptionGetMediaType(desc) != 1936684398)
    return 0;
  outDataSize = 0;
  v14 = 0;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
  if (!StreamBasicDescription
    || (v5 = StreamBasicDescription,
        HIDWORD(v14) = StreamBasicDescription->mFormatID,
        faf_audioFileTypeIDForFigFileType(a1, (int *)&v14)))
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    if (!AudioFileGetGlobalInfoSize(0x73646964u, 8u, &v14, &outDataSize) && outDataSize >= 0x28)
    {
      v6 = (char *)malloc_type_malloc(outDataSize, 0xD2B51F30uLL);
      if (!v6 || AudioFileGetGlobalInfo(0x73646964u, 8u, &v14, &outDataSize, v6) || outDataSize < 0x28)
      {
LABEL_9:
        v7 = 0;
        goto LABEL_10;
      }
      v9 = 0;
      mFormatID = v5->mFormatID;
      v11 = mFormatID - 1633772392;
      while (1)
      {
        if (mFormatID != *(_DWORD *)&v6[v9 + 8])
          goto LABEL_43;
        if (mFormatID <= 1633772391)
        {
          if (mFormatID <= 1296122674)
          {
            if ((mFormatID - 778924081) >= 3 && mFormatID != 1096107074)
              goto LABEL_45;
          }
          else if (mFormatID <= 1363430705)
          {
            if (mFormatID != 1296122675 && mFormatID != 1296122678)
              goto LABEL_45;
          }
          else if (mFormatID != 1363430706 && mFormatID != 1363430723 && mFormatID != 1365470320)
          {
            goto LABEL_45;
          }
        }
        else if (mFormatID > 1634492770)
        {
          if (mFormatID <= 1768710754)
          {
            if (mFormatID != 1634492771 && mFormatID != 1634492791)
              goto LABEL_45;
          }
          else if (mFormatID != 1768710755 && mFormatID != 1768775988 && mFormatID != 1970037111)
          {
            goto LABEL_45;
          }
        }
        else if ((v11 > 0xB || ((1 << v11) & 0x911) == 0) && mFormatID != 1633889587 && mFormatID != 1634038579)
        {
LABEL_45:
          v13 = &v6[v9];
          if (v5->mFormatFlags != *(_DWORD *)&v6[v9 + 12])
            goto LABEL_43;
          mBitsPerChannel = v5->mBitsPerChannel;
          goto LABEL_42;
        }
        mBitsPerChannel = v5->mBitsPerChannel;
        v13 = &v6[v9];
LABEL_42:
        if (mBitsPerChannel == *((_DWORD *)v13 + 8))
        {
          v7 = 1;
          break;
        }
LABEL_43:
        v9 += 40;
        if (40 * (outDataSize / 0x28uLL) == v9)
          goto LABEL_9;
      }
    }
  }
LABEL_10:
  free(v6);
  return v7;
}

uint64_t FigAudioFileFormatWriterCreateWithByteStream(const __CFAllocator *a1, const void *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  const void *Value;
  const __CFString *v9;
  uint64_t result;
  int v11;
  int v12;
  const __CFString *v14;
  BOOL v15;
  uint64_t DerivedStorage;
  CFTypeRef v17;
  CFMutableArrayRef Mutable;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  CFTypeRef cf;

  cf = 0;
  v23 = 1667327590;
  if (!a4 || !a2)
    return FigSignalErrorAt();
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("FileFormat"));
    v9 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("AudioPrimingFormat"));
    result = faf_audioFileTypeIDForFigFileType((uint64_t)Value, &v23);
    if ((_DWORD)result)
      return result;
    v11 = FigCFEqual();
    v12 = v23;
    if (v23 != 1667327590 || v11 == 0)
      v14 = v9;
    else
      v14 = CFSTR("AudioPrimingFormat_iTunesGaplessInfo");
    if (v14)
      v15 = CFEqual(v14, CFSTR("AudioPrimingFormat_iTunesGaplessInfo")) != 0;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
    v12 = 1667327590;
  }
  FigFormatWriterGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v17 = CFRetain(a2);
    Mutable = CFArrayCreateMutable(a1, 0, 0);
    if (Mutable)
    {
      *(_BYTE *)(DerivedStorage + 128) = v15;
      *(_QWORD *)(DerivedStorage + 40) = Mutable;
      *(_DWORD *)(DerivedStorage + 48) = v12;
      v19 = MEMORY[0x1E0CA2E18];
      v20 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 96) = *MEMORY[0x1E0CA2E18];
      v21 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)(DerivedStorage + 112) = v21;
      *(_OWORD *)(DerivedStorage + 72) = v20;
      *(_QWORD *)(DerivedStorage + 88) = v21;
      *(_QWORD *)(DerivedStorage + 16) = a1;
      *(_QWORD *)(DerivedStorage + 24) = v17;
      if (a1)
        CFRetain(a1);
      v22 = FigReentrantMutexCreate();
      result = 0;
      *(_QWORD *)(DerivedStorage + 8) = v22;
      *a4 = cf;
    }
    else
    {
      if (v17)
        CFRelease(v17);
      if (cf)
        CFRelease(cf);
      return 4294954510;
    }
  }
  return result;
}

uint64_t faf_audioFileTypeIDForFigFileType(uint64_t result, int *a2)
{
  int v2;
  const void *v4;
  CFTypeID TypeID;
  int v6;

  v2 = 1667327590;
  *a2 = 1667327590;
  if (result)
  {
    v4 = (const void *)result;
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v4))
    {
      if (CFEqual(v4, CFSTR("CAFAudioFile")))
      {
        result = 0;
      }
      else if (CFEqual(v4, CFSTR("WAVEAudioFile")))
      {
        result = 0;
        v2 = 1380333108;
      }
      else if (CFEqual(v4, CFSTR("AIFFAudioFile")))
      {
        result = 0;
        v2 = 1095321155;
      }
      else
      {
        v6 = CFEqual(v4, CFSTR("AMRAudioFile"));
        if (v6)
          v2 = 1634562662;
        else
          v2 = 0;
        if (v6)
          result = 0;
        else
          result = 4294954516;
      }
      *a2 = v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t figAudioFileWriter_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  _QWORD *ValueAtIndex;
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v6;
  const __CFNumber *v7;
  uint64_t v8;
  uint64_t v9;
  OSStatus v10;
  const void *v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex i;
  _QWORD *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v21;
  unsigned int v22;
  unsigned int valuePtr;
  UInt32 ioDataSize;
  uint64_t outPropertyData;
  unint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v1)
  {
    *(_BYTE *)v1 = 1;
    MEMORY[0x19402EA24](*(_QWORD *)(v1 + 8));
    return 0;
  }
  if (*(_QWORD *)(v1 + 56))
  {
    v2 = *(const __CFArray **)(v1 + 40);
    if (v2 && CFArrayGetCount(v2))
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 40), 0);
    else
      ValueAtIndex = 0;
    outPropertyData = 0;
    v26 = 0;
    v22 = 0;
    valuePtr = 0;
    v21 = 0;
    if (!*(_QWORD *)(v1 + 120))
      goto LABEL_42;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(*(CFTypeRef *)(v1 + 120)))
      goto LABEL_42;
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 120), CFSTR("EncodingDelayInFrame"));
    v6 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 120), CFSTR("EncodingDrainInFrames"));
    v7 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 120), CFSTR("DurationInFrames"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    if (v6)
      CFNumberGetValue(v6, kCFNumberSInt32Type, &v22);
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberSInt64Type, &v21);
      outPropertyData = v21;
      v26 = __PAIR64__(v22, valuePtr);
    }
    else
    {
LABEL_42:
      if (!ValueAtIndex
        || !ValueAtIndex[3] && !ValueAtIndex[5]
        || (ioDataSize = 16, AudioFileGetProperty(*(AudioFileID *)(v1 + 56), 0x706E666Fu, &ioDataSize, &outPropertyData)))
      {
LABEL_25:
        AudioFileClose(*(AudioFileID *)(v1 + 56));
        *(_QWORD *)(v1 + 56) = 0;
        goto LABEL_26;
      }
      v8 = ValueAtIndex[3];
      v9 = ValueAtIndex[5];
      outPropertyData = outPropertyData + (int)v26 + SHIDWORD(v26) - (v8 + v9);
      v26 = __PAIR64__(v9, v8);
    }
    ioDataSize = 16;
    v10 = AudioFileSetProperty(*(AudioFileID *)(v1 + 56), 0x706E666Fu, 0x10u, &outPropertyData);
    if (v10 && v10 != 1886681407)
      FigSignalErrorAt();
    goto LABEL_25;
  }
LABEL_26:
  *(_BYTE *)v1 = 1;
  MEMORY[0x19402EA24](*(_QWORD *)(v1 + 8));
  v11 = *(const void **)(v1 + 24);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(v1 + 24) = 0;
  }
  v12 = *(const __CFArray **)(v1 + 40);
  if (v12)
  {
    Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      v14 = Count;
      for (i = 0; i != v14; ++i)
      {
        v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 40), i);
        v17 = (const void *)v16[1];
        if (v17)
          CFRelease(v17);
        free(v16);
      }
    }
    CFRelease(*(CFTypeRef *)(v1 + 40));
    *(_QWORD *)(v1 + 40) = 0;
  }
  v18 = *(const void **)(v1 + 16);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(v1 + 16) = 0;
  }
  v19 = *(const void **)(v1 + 120);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(v1 + 120) = 0;
  }
  return 0;
}

uint64_t figAudioFileWriter_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = figAudioFileWriter_Invalidate();
  if (DerivedStorage)
  {
    result = *(_QWORD *)(DerivedStorage + 8);
    if (result)
    {
      result = FigSimpleMutexDestroy();
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
  }
  return result;
}

__CFString *figAudioFileWriter_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAudioFileWriter %p>: ByteStream: %@  FileFormat: %.4s"), a1, DerivedStorage, DerivedStorage + 48);
  return Mutable;
}

uint64_t figAudioFileWriter_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CMTime v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_8;
  if (!CFEqual(CFSTR("LongestMediaDecodeDuration"), a2))
  {
    v9 = 4294954666;
    goto LABEL_7;
  }
  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40)))
  {
LABEL_8:
    v9 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v9 = decodeDurationForTrack(a1, (uint64_t)&v12);
  if ((_DWORD)v9)
  {
    FigSignalErrorAt();
  }
  else
  {
    v11 = v12;
    *a4 = CMTimeCopyAsDictionary(&v11, a3);
  }
LABEL_7:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v9;
}

uint64_t figAudioFileWriter_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  uint64_t result;
  CFTypeID TypeID;
  const void *v9;
  CFDictionaryRef Copy;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!CFEqual(CFSTR("iTunesGaplessInfo"), a2))
    return 4294954666;
  if (a3)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a3))
      return 0;
  }
  v9 = (const void *)*((_QWORD *)v6 + 15);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)v6 + 15) = 0;
  }
  if (!a3)
    return 0;
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)a3);
  result = 0;
  *((_QWORD *)v6 + 15) = Copy;
  return result;
}

uint64_t decodeDurationForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *ValueAtIndex;
  const opaqueCMFormatDescription *v6;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CMTimeEpoch epoch;
  uint64_t v10;
  CMTime v11;
  CFIndex idx;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  idx = 0;
  if (*(_QWORD *)(DerivedStorage + 64))
  {
    v4 = DerivedStorage;
    getTrackInfoArrayIndexFromFigTrackID(DerivedStorage, 1, &idx);
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 40), idx);
    if (!ValueAtIndex)
      return FigSignalErrorAt();
    v6 = (const opaqueCMFormatDescription *)*((_QWORD *)ValueAtIndex + 1);
    if (!v6)
      return FigSignalErrorAt();
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v6);
    if (!StreamBasicDescription || StreamBasicDescription->mSampleRate <= 0.0)
      return FigSignalErrorAt();
    CMTimeMake(&v11, *(_QWORD *)(v4 + 64) * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    *(_OWORD *)a2 = *(_OWORD *)&v11.value;
    epoch = v11.epoch;
  }
  else
  {
    v10 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v10 + 16);
  }
  *(_QWORD *)(a2 + 16) = epoch;
  return 0;
}

uint64_t figAudioFileWriter_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFIndex Count;
  uint64_t result;
  CFIndex v11;
  _QWORD *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  if (a2 != 1936684398)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40));
  if (Count >= 1)
    return FigSignalErrorAt();
  v11 = Count;
  v12 = malloc_type_calloc(1uLL, 0x40uLL, 0x1060040C7CCF50CuLL);
  if (!v12)
    return 4294954510;
  *(_DWORD *)v12 = 1936684398;
  v12[7] = v11;
  CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 40), v12);
  result = 0;
  *a4 = v11 + 1;
  return result;
}

uint64_t figAudioFileWriter_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, __CFArray **a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t TrackInfoArrayIndexFromFigTrackID;
  const void **ValueAtIndex;
  __CFArray *Mutable;
  __CFArray *v14;
  uint64_t v15;
  CFIndex idx;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v10 = DerivedStorage;
    idx = 0;
    TrackInfoArrayIndexFromFigTrackID = getTrackInfoArrayIndexFromFigTrackID(DerivedStorage, a2, &idx);
    if ((_DWORD)TrackInfoArrayIndexFromFigTrackID)
    {
      v15 = TrackInfoArrayIndexFromFigTrackID;
      FigSignalErrorAt();
      return v15;
    }
    ValueAtIndex = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 40), idx);
    if (!CFEqual(CFSTR("FormatDescriptionArray"), a3))
      return 4294954666;
    Mutable = CFArrayCreateMutable(a4, 1, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v14 = Mutable;
      CFArrayAppendValue(Mutable, ValueAtIndex[1]);
      v15 = 0;
      *a5 = v14;
      return v15;
    }
  }
  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t TrackInfoArrayIndexFromFigTrackID;
  CMAudioFormatDescriptionRef *ValueAtIndex;
  CFTypeID v11;
  const opaqueCMFormatDescription *v12;
  const opaqueCMFormatDescription *v13;
  CFTypeID v14;
  char v15;
  const void *MagicCookie;
  uint64_t v17;
  CFIndex idx;
  size_t sizeOut;
  CMAudioFormatDescriptionMask equalityMaskOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  idx = 0;
  TrackInfoArrayIndexFromFigTrackID = getTrackInfoArrayIndexFromFigTrackID(DerivedStorage, a2, &idx);
  if ((_DWORD)TrackInfoArrayIndexFromFigTrackID)
  {
    v17 = TrackInfoArrayIndexFromFigTrackID;
    FigSignalErrorAt();
    return v17;
  }
  ValueAtIndex = (CMAudioFormatDescriptionRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 40), idx);
  if (!CFEqual(CFSTR("ReplacementFormatDescriptionArray"), a3))
    return 4294954666;
  if (a4)
  {
    v11 = CFGetTypeID(a4);
    if (v11 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a4) == 1)
    {
      v12 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)a4, 0);
      equalityMaskOut = 0;
      if (!v12)
        return FigSignalErrorAt();
      v13 = v12;
      v14 = CFGetTypeID(v12);
      if (v14 != CMFormatDescriptionGetTypeID() || CMFormatDescriptionGetMediaType(v13) != 1936684398)
        return FigSignalErrorAt();
      if (CMAudioFormatDescriptionEqual(v13, ValueAtIndex[1], 0xFu, &equalityMaskOut))
        return 0;
      v15 = equalityMaskOut;
      if ((equalityMaskOut & 1) == 0)
        return FigSignalErrorAt();
      if ((equalityMaskOut & 4) == 0)
      {
        faf_setAudioChannelLayout(v8, v13, 1);
        v15 = equalityMaskOut;
      }
      if ((v15 & 2) != 0)
        return 0;
      sizeOut = 0;
      MagicCookie = CMAudioFormatDescriptionGetMagicCookie(v13, &sizeOut);
      if (!AudioFileSetProperty(*(AudioFileID *)(v8 + 56), 0x6D676963u, sizeOut, MagicCookie))
        return 0;
      else
        return FigSignalErrorAt();
    }
  }
  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_AddSampleBufferToTrack(uint64_t a1, int a2, opaqueCMSampleBuffer *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t SampleTimingInfoArray;
  uint64_t v8;
  uint64_t v9;
  const opaqueCMFormatDescription *FormatDescription;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t TrimsOfSampleBuffer;
  uint64_t TrackInfoArrayIndexFromFigTrackID;
  CMAudioFormatDescriptionRef *ValueAtIndex;
  CMAudioFormatDescriptionRef *v16;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioFormatListItem *MostCompatibleFormat;
  const void *MagicCookie;
  unsigned int v21;
  unsigned int v22;
  CMTime *v23;
  CMTimeEpoch v24;
  int32_t v25;
  __int128 v26;
  int32_t v27;
  unint64_t NumSamples;
  int v29;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *value;
  const AudioStreamBasicDescription *v32;
  const AudioStreamBasicDescription *v33;
  const AudioStreamBasicDescription *v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  OpaqueCMBlockBuffer *v41;
  size_t v42;
  size_t v43;
  uint64_t DataPointer;
  size_t v45;
  int32_t v46;
  int32_t v47;
  const __CFAllocator *v48;
  CFDictionaryRef v49;
  __int128 v50;
  size_t DataLength;
  CMItemCount timingArrayEntriesNeededOut;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  size_t packetDescriptionsSizeOut;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;
  UInt32 ioNumPackets;
  CFIndex idx;
  CMTime v60;
  CMTime v61;
  CMTime v62;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime valuePtr;
  CMTime v68;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ioNumPackets = 0;
  lengthAtOffsetOut = 0;
  packetDescriptionsSizeOut = 0;
  totalLengthOut = 0;
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  packetDescriptionsPointerOut = 0;
  timingArrayEntriesNeededOut = 0;
  dataPointerOut = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v6 || !a3)
  {
LABEL_86:
    FigSignalErrorAt();
    goto LABEL_87;
  }
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a3, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)SampleTimingInfoArray == -12736)
  {
LABEL_87:
    v8 = 0;
    goto LABEL_88;
  }
  v8 = SampleTimingInfoArray;
  if ((_DWORD)SampleTimingInfoArray)
  {
LABEL_88:
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
    goto LABEL_89;
  }
  if ((*(_BYTE *)(v6 + 108) & 1) == 0)
  {
    v9 = MEMORY[0x1E0CA2E30];
    *(_OWORD *)(v6 + 72) = *MEMORY[0x1E0CA2E30];
    *(_QWORD *)(v6 + 88) = *(_QWORD *)(v9 + 16);
    CMSampleBufferGetOutputPresentationTimeStamp(&v68, a3);
    *(CMTime *)(v6 + 96) = v68;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a3);
  v11 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  v12 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v11 != (CFTypeRef)*MEMORY[0x1E0C9AE50])
    v11 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA26C0], 0);
  if (v11 == v12)
  {
    v8 = 0;
    *(_BYTE *)(v6 + 129) = 1;
    goto LABEL_88;
  }
  if (*(_BYTE *)(v6 + 129))
  {
    TrimsOfSampleBuffer = FigSignalErrorAt();
    if ((_DWORD)TrimsOfSampleBuffer)
    {
LABEL_17:
      v8 = TrimsOfSampleBuffer;
      goto LABEL_88;
    }
  }
  idx = 0;
  TrackInfoArrayIndexFromFigTrackID = getTrackInfoArrayIndexFromFigTrackID(v6, a2, &idx);
  if ((_DWORD)TrackInfoArrayIndexFromFigTrackID)
  {
LABEL_98:
    v8 = TrackInfoArrayIndexFromFigTrackID;
    FigSignalErrorAt();
    goto LABEL_88;
  }
  ValueAtIndex = (CMAudioFormatDescriptionRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 40), idx);
  v16 = ValueAtIndex;
  if (*(_QWORD *)(v6 + 56))
  {
    if (!CMAudioFormatDescriptionEqual(FormatDescription, ValueAtIndex[1], 7u, 0))
    {
LABEL_16:
      TrimsOfSampleBuffer = FigSignalErrorAt();
      goto LABEL_17;
    }
  }
  else
  {
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(FormatDescription);
    v68.value = 0;
    MagicCookie = CMAudioFormatDescriptionGetMagicCookie(FormatDescription, (size_t *)&v68);
    if (AudioFileInitializeWithCallbacks((void *)v6, (AudioFile_ReadProc)afReadProc, (AudioFile_WriteProc)afWriteProc, (AudioFile_GetSizeProc)afGetSizeProc, (AudioFile_SetSizeProc)afSetSizeProc, *(_DWORD *)(v6 + 48), StreamBasicDescription, 0, (AudioFileID *)(v6 + 56))&& (*(_DWORD *)(v6 + 48) != 1095321158|| (*(_DWORD *)(v6 + 48) = 1095321155, AudioFileInitializeWithCallbacks((void *)v6, (AudioFile_ReadProc)afReadProc, (AudioFile_WriteProc)afWriteProc, (AudioFile_GetSizeProc)afGetSizeProc, (AudioFile_SetSizeProc)afSetSizeProc, 0x41494643u, StreamBasicDescription,
             0,
             (AudioFileID *)(v6 + 56))))
      || (v16[1] = FormatDescription, CFRetain(FormatDescription), MagicCookie)
      && v68.value
      && !HIDWORD(v68.value)
      && AudioFileSetProperty(*(AudioFileID *)(v6 + 56), 0x6D676963u, v68.value, MagicCookie))
    {
      TrackInfoArrayIndexFromFigTrackID = FigSignalErrorAt();
      if ((_DWORD)TrackInfoArrayIndexFromFigTrackID)
        goto LABEL_98;
    }
    else
    {
      faf_setAudioChannelLayout(v6, FormatDescription, 0);
      *((_DWORD *)v16 + 4) = (int)MostCompatibleFormat->mASBD.mSampleRate;
    }
  }
  v21 = faf_canProcessTrim((const AudioStreamBasicDescription *)FormatDescription);
  v22 = v21;
  v23 = (CMTime *)MEMORY[0x1E0CA2E68];
  if (*(_BYTE *)(v6 + 128) && !v21)
  {
    *(_OWORD *)&v68.value = *MEMORY[0x1E0CA2E68];
    v24 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v68.epoch = v24;
    v50 = *(_OWORD *)&v68.value;
    *(_OWORD *)&valuePtr.value = *(_OWORD *)&v68.value;
    valuePtr.epoch = v24;
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    TrimsOfSampleBuffer = faf_getTrimsOfSampleBuffer(a3, (uint64_t)&v68, (uint64_t)&valuePtr);
    if ((_DWORD)TrimsOfSampleBuffer)
      goto LABEL_17;
    lhs = v68;
    rhs = valuePtr;
    CMTimeAdd(&time, &lhs, &rhs);
    CMSampleBufferGetDuration(&time1, a3);
    lhs = time;
    v25 = CMTimeCompare(&time1, &lhs);
    if (v25 <= 0)
    {
      v26 = v50;
      if (!*((_BYTE *)v16 + 32))
      {
        v68 = time;
        *(_OWORD *)&valuePtr.value = v50;
        valuePtr.epoch = v24;
LABEL_41:
        lhs = v68;
        *(_OWORD *)&rhs.value = v26;
        rhs.epoch = v24;
        if (CMTimeCompare(&lhs, &rhs) >= 1)
        {
          v27 = *((_DWORD *)v16 + 4);
          lhs = v68;
          CMTimeConvertScale(&v62, &lhs, v27, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v16[3] = (CMAudioFormatDescriptionRef)((char *)v16[3] + v62.value);
          if (v25 > 0)
          {
            *((_BYTE *)v16 + 32) = 1;
            if (!*((_BYTE *)v16 + 48))
            {
LABEL_84:
              lhs = valuePtr;
              *(_OWORD *)&rhs.value = v50;
              rhs.epoch = v24;
              if (CMTimeCompare(&lhs, &rhs) >= 1)
              {
                v47 = *((_DWORD *)v16 + 4);
                lhs = valuePtr;
                CMTimeConvertScale(&v60, &lhs, v47, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                v16[5] = (CMAudioFormatDescriptionRef)((char *)v16[5] + v60.value);
                *((_BYTE *)v16 + 48) = 1;
              }
              goto LABEL_49;
            }
            goto LABEL_48;
          }
          if (!*((_BYTE *)v16 + 48))
            goto LABEL_84;
LABEL_83:
          v46 = *((_DWORD *)v16 + 4);
          lhs = valuePtr;
          CMTimeConvertScale(&v61, &lhs, v46, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v16[5] = (CMAudioFormatDescriptionRef)((char *)v16[5] + v61.value);
          goto LABEL_49;
        }
        *((_BYTE *)v16 + 32) = 1;
LABEL_46:
        if (!*((_BYTE *)v16 + 48))
          goto LABEL_84;
        if (v25 <= 0)
          goto LABEL_83;
LABEL_48:
        TrimsOfSampleBuffer = FigSignalErrorAt();
        if ((_DWORD)TrimsOfSampleBuffer)
          goto LABEL_17;
        goto LABEL_49;
      }
      *(_OWORD *)&v68.value = v50;
      v68.epoch = v24;
      valuePtr = time;
    }
    else
    {
      v26 = v50;
      if (!*((_BYTE *)v16 + 32))
        goto LABEL_41;
    }
    lhs = v68;
    *(_OWORD *)&rhs.value = v26;
    rhs.epoch = v24;
    if (CMTimeCompare(&lhs, &rhs) > 0)
      goto LABEL_48;
    goto LABEL_46;
  }
LABEL_49:
  TrackInfoArrayIndexFromFigTrackID = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a3, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut);
  if ((_DWORD)TrackInfoArrayIndexFromFigTrackID)
    goto LABEL_98;
  NumSamples = CMSampleBufferGetNumSamples(a3);
  if (HIDWORD(NumSamples))
    goto LABEL_16;
  v29 = NumSamples;
  ioNumPackets = NumSamples;
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  if (!DataBuffer)
    goto LABEL_86;
  value = DataBuffer;
  CFRetain(DataBuffer);
  if (!v22)
    goto LABEL_68;
  DataLength = CMBlockBufferGetDataLength(value);
  v68 = *v23;
  valuePtr = v68;
  v32 = (const AudioStreamBasicDescription *)CMSampleBufferGetFormatDescription(a3);
  if (!faf_canProcessTrim(v32))
    goto LABEL_99;
  v33 = CMAudioFormatDescriptionGetStreamBasicDescription((CMAudioFormatDescriptionRef)v32);
  if (!v33)
    goto LABEL_99;
  v34 = v33;
  v35 = faf_getTrimsOfSampleBuffer(a3, (uint64_t)&v68, (uint64_t)&valuePtr);
  if ((_DWORD)v35)
    goto LABEL_100;
  if ((v68.flags & 0x1D) == 1)
  {
    time = v68;
    v36 = (unint64_t)(CMTimeGetSeconds(&time) * v34->mSampleRate + 0.5);
    v37 = v36 * v34->mBytesPerFrame;
  }
  else
  {
    v37 = 0;
    v36 = 0;
  }
  if ((valuePtr.flags & 0x1D) == 1)
  {
    time = valuePtr;
    v38 = (unint64_t)(CMTimeGetSeconds(&time) * v34->mSampleRate + 0.5);
    v39 = v38 * v34->mBytesPerFrame;
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
  v40 = CMSampleBufferGetNumSamples(a3);
  v41 = CMSampleBufferGetDataBuffer(a3);
  if (!v41)
  {
LABEL_99:
    v35 = FigSignalErrorAt();
    v8 = 0;
    if (!(_DWORD)v35)
      goto LABEL_80;
LABEL_100:
    v8 = v35;
    FigSignalErrorAt();
    goto LABEL_80;
  }
  v42 = CMBlockBufferGetDataLength(v41);
  v43 = v42 - (v39 + v37);
  if (v42 > v39 + v37 && v38 + v36 < v40)
  {
    if (v43 != DataLength)
    {
      v68.value = 0;
      v35 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(v6 + 16), value, v37, v43, 0, (CMBlockBufferRef *)&v68);
      if (!(_DWORD)v35)
      {
        CFRelease(value);
        value = (OpaqueCMBlockBuffer *)v68.value;
        ioNumPackets = v29 - (v38 + v36);
        goto LABEL_68;
      }
      goto LABEL_100;
    }
LABEL_68:
    DataPointer = CMBlockBufferGetDataPointer(value, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (!(_DWORD)DataPointer)
    {
      if (lengthAtOffsetOut == totalLengthOut)
        goto LABEL_74;
      v68.value = 0;
      if (CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v6 + 16), value, *(CFAllocatorRef *)(v6 + 16), 0, 0, totalLengthOut, 0, (CMBlockBufferRef *)&v68))
      {
        goto LABEL_104;
      }
      if (value)
        CFRelease(value);
      value = (OpaqueCMBlockBuffer *)v68.value;
      v68.value = 0;
      DataPointer = CMBlockBufferGetDataPointer(value, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
LABEL_74:
        v45 = CMBlockBufferGetDataLength(value);
        if (!HIDWORD(v45))
        {
          v8 = AudioFileWritePackets(*(AudioFileID *)(v6 + 56), 0, v45, packetDescriptionsPointerOut, *(_QWORD *)(v6 + 64), &ioNumPackets, dataPointerOut);
          if (!(_DWORD)v8)
          {
            *(_QWORD *)(v6 + 64) += ioNumPackets;
            goto LABEL_77;
          }
          goto LABEL_102;
        }
LABEL_104:
        v8 = FigSignalErrorAt();
LABEL_77:
        MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
        if (!value)
          goto LABEL_89;
        goto LABEL_81;
      }
    }
    v8 = DataPointer;
LABEL_102:
    FigSignalErrorAt();
    goto LABEL_77;
  }
  v8 = 0;
LABEL_80:
  MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
LABEL_81:
  CFRelease(value);
LABEL_89:
  if ((_DWORD)v8)
  {
    LODWORD(valuePtr.value) = v8;
    v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v68.value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v68.value)
      v49 = CFDictionaryCreate(v48, (const void **)kFigFormatWriterNotificationParameter_OSStatus, (const void **)&v68, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    else
      v49 = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v49)
      CFRelease(v49);
    if (v68.value)
      CFRelease((CFTypeRef)v68.value);
  }
  return v8;
}

uint64_t figAudioFileWriter_Flush()
{
  return 0;
}

uint64_t figAudioFileWriter_WriteHeader()
{
  return 0;
}

uint64_t figAudioFileWriter_BeginSession(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  int v6;
  _OWORD *v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  CMTime v11;
  CMTime lhs;
  CMTime v13;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40));
  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v13 = v14;
  v6 = *(_DWORD *)(DerivedStorage + 84);
  if ((~v6 & 5) == 0 || (v6 & 1) != 0 || !Count)
    return FigSignalErrorAt();
  v7 = (_OWORD *)(DerivedStorage + 96);
  if ((*(_BYTE *)(DerivedStorage + 108) & 1) == 0)
  {
    result = 0;
    v9 = *(_OWORD *)&a2->value;
    *(_QWORD *)(DerivedStorage + 112) = a2->epoch;
    *v7 = v9;
    goto LABEL_6;
  }
  if (decodeDurationForTrack(a1, (uint64_t)&v14))
    return FigSignalErrorAt();
  *(_OWORD *)&lhs.value = *v7;
  lhs.epoch = *(_QWORD *)(DerivedStorage + 112);
  v11 = v14;
  CMTimeAdd(&v13, &lhs, &v11);
  lhs = *a2;
  v11 = v13;
  result = CMTimeCompare(&lhs, &v11);
  if ((_DWORD)result)
    return FigSignalErrorAt();
LABEL_6:
  v10 = *(_OWORD *)&a2->value;
  *(_QWORD *)(DerivedStorage + 88) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 72) = v10;
  return result;
}

uint64_t figAudioFileWriter_EndSession(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v5;
  int v6;
  uint64_t v7;
  __int128 v9;
  CMTime rhs;
  CMTime lhs;
  CMTime v12;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v13.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v13.epoch = v5;
  *(_OWORD *)&v12.value = *(_OWORD *)&v13.value;
  v12.epoch = v5;
  v6 = *(_DWORD *)(DerivedStorage + 84);
  if ((~v6 & 5) == 0)
    return FigSignalErrorAt();
  if ((v6 & 1) == 0)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v9 = *(_OWORD *)&v13.value;
  if (decodeDurationForTrack(a1, (uint64_t)&v13))
    return FigSignalErrorAt();
  lhs = *(CMTime *)(v7 + 96);
  rhs = v13;
  CMTimeAdd(&v12, &lhs, &rhs);
  lhs = *a2;
  rhs = v12;
  CMTimeCompare(&lhs, &rhs);
  *(_OWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 88) = v5;
  return 0;
}

const AudioChannelLayout *faf_setAudioChannelLayout(uint64_t a1, CMAudioFormatDescriptionRef desc, int a3)
{
  const AudioChannelLayout *result;
  size_t v7;
  AudioChannelLayoutTag inPropertyData;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t sizeOut;

  sizeOut = 0;
  result = CMAudioFormatDescriptionGetChannelLayout(desc, &sizeOut);
  if (a3)
  {
    v7 = sizeOut;
  }
  else
  {
    if (!result)
      return result;
    v7 = sizeOut;
    if (!sizeOut)
      return result;
  }
  if (!HIDWORD(v7))
  {
    result = (const AudioChannelLayout *)AudioFileSetProperty(*(AudioFileID *)(a1 + 56), 0x636D6170u, v7, result);
    if ((_DWORD)result)
    {
      v10 = 0;
      v9 = 0;
      v12 = 0;
      v11 = 0;
      inPropertyData = CMAudioFormatDescriptionGetMostCompatibleFormat(desc)->mChannelLayoutTag;
      sizeOut = 12;
      return (const AudioChannelLayout *)AudioFileSetProperty(*(AudioFileID *)(a1 + 56), 0x636D6170u, 0xCu, &inPropertyData);
    }
  }
  return result;
}

const AudioStreamBasicDescription *faf_canProcessTrim(const AudioStreamBasicDescription *result)
{
  const opaqueCMFormatDescription *v1;

  if (result)
  {
    v1 = (const opaqueCMFormatDescription *)result;
    if (CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)result) == 1819304813)
    {
      result = CMAudioFormatDescriptionGetStreamBasicDescription(v1);
      if (result)
        return (const AudioStreamBasicDescription *)((result->mFormatFlags & 0x20) == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t afReadProc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_11;
  }
  v12 = a2 + a3;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v11 = v12 > v14;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
  if (v15)
  {
    if (v12 <= v14)
      v16 = a3;
    else
      v16 = (v14 - a2);
    v10 = v15(v13, v16, a2, a4, &v19);
    if (!v10)
    {
      *a5 = v19;
      goto LABEL_11;
    }
  }
  else
  {
    v10 = -12782;
  }
  FigSignalErrorAt();
LABEL_11:
  if (v11 && v10 == 0)
    v17 = 4294967257;
  else
    v17 = v10;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 8));
  return v17;
}

uint64_t afWriteProc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *);
  uint64_t v14;

  v14 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    goto LABEL_2;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
  if (!v12)
  {
    v10 = 4294954514;
    goto LABEL_9;
  }
  v10 = v12(v11, a3, a2, a4, &v14);
  if ((_DWORD)v10)
  {
LABEL_9:
    FigSignalErrorAt();
    goto LABEL_10;
  }
  if (v14 != a3)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_10;
  }
  *a5 = a3;
  if (a3 + a2 > *(_QWORD *)(a1 + 32))
  {
    v10 = 0;
    *(_QWORD *)(a1 + 32) = a3 + a2;
    goto LABEL_10;
  }
LABEL_2:
  v10 = 0;
LABEL_10:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 8));
  return v10;
}

uint64_t afGetSizeProc(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t afSetSizeProc(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = a2;
  return 0;
}

uint64_t faf_getTrimsOfSampleBuffer(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  CMTime v12;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = MEMORY[0x1E0CA2E18];
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(a2 + 16) = v8;
  *(_OWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = v8;
  v9 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
  if (v9)
  {
    memset(&v12, 0, sizeof(v12));
    CMTimeMakeFromDictionary(&v12, v9);
    if ((v12.flags & 1) != 0)
      *(CMTime *)a2 = v12;
  }
  v10 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2720], 0);
  if (v10)
  {
    memset(&v12, 0, sizeof(v12));
    CMTimeMakeFromDictionary(&v12, v10);
    if ((v12.flags & 1) != 0)
      *(CMTime *)a3 = v12;
  }
  return 0;
}

uint64_t FigFileStarByteStreamCreateForFileURL(const __CFURL *a1, uint64_t a2, _QWORD *a3)
{
  const __CFString *PathForPersistentURL;
  const __CFString *v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  FILE *v10;
  int v11;
  uint64_t v12;
  char buffer[1024];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x400uLL);
  if (FigIsPersistentURL())
  {
    PathForPersistentURL = (const __CFString *)FigCreatePathForPersistentURL();
    if (!PathForPersistentURL)
      return FigSignalErrorAt();
    v6 = PathForPersistentURL;
    CFStringGetFileSystemRepresentation(PathForPersistentURL, buffer, 1024);
    CFRelease(v6);
  }
  else if (!CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024))
  {
    return FigSignalErrorAt();
  }
  CMByteStreamGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 40) = v9;
  if (!v9)
    return FigSignalErrorAt();
  *(_QWORD *)DerivedStorage = CFRetain(a1);
  v10 = fopen(buffer, "rb");
  *(_QWORD *)(DerivedStorage + 8) = v10;
  if (!v10 || (v11 = fileno(v10), *(_DWORD *)(DerivedStorage + 16) = v11, v11 == -1))
  {
    __error();
    return FigSignalErrorAt();
  }
  fcntl(v11, 48, 1);
  FigByteStreamStatsSetupWorker();
  v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t FigFileStarByteStreamCreateForFile(uint64_t a1, const __CFAllocator *a2, _QWORD *a3)
{
  const char *DarwinPath;
  size_t v6;
  const __CFURL *v7;
  uint64_t v8;

  DarwinPath = (const char *)FigFileGetDarwinPath();
  v6 = strlen(DarwinPath);
  v7 = CFURLCreateFromFileSystemRepresentation(a2, (const UInt8 *)DarwinPath, v6, 0);
  v8 = FigFileStarByteStreamCreateForFileURL(v7, (uint64_t)a2, a3);
  if (v7)
    CFRelease(v7);
  return v8;
}

uint64_t FigFileStarByteStreamEqual()
{
  CFTypeRef *DerivedStorage;
  const void *v1;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  return CFEqual(*DerivedStorage, v1);
}

uint64_t FigFileStarByteStreamFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    if (*(_QWORD *)(DerivedStorage + 8))
    {
      fclose(*(FILE **)(DerivedStorage + 8));
      v1 = *(const void **)DerivedStorage;
    }
    CFRelease(v1);
  }
  if (*(_QWORD *)(DerivedStorage + 40))
    FigSimpleMutexDestroy();
  return FigByteStreamStatsTeardownWorker();
}

__CFString *FigFileStarByteStreamCopyDebugDescription()
{
  CFTypeRef *DerivedStorage;
  __CFString *Mutable;
  CFStringRef v2;
  CFStringRef v3;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = CFCopyDescription(*DerivedStorage);
  if (v2)
  {
    v3 = v2;
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigFileStarByteStream %p>{%@}"), DerivedStorage, v2);
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t FigFileStarByteStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v7;
  CFNumberType v8;
  off_t *p_st_size;
  uint64_t StatsDictionary;
  uint64_t v11;
  uint64_t result;
  CFURLRef v13;
  _QWORD v14[3];
  stat v15;
  _BYTE v16[32];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2070]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2068]))
  {
    memset(&v15, 0, sizeof(v15));
    fstat(*(_DWORD *)(DerivedStorage + 16), &v15);
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v8 = kCFNumberSInt64Type;
    p_st_size = &v15.st_size;
LABEL_4:
    StatsDictionary = (uint64_t)CFNumberCreate(v7, v8, p_st_size);
LABEL_5:
    v11 = StatsDictionary;
    result = 0;
    *a4 = v11;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2078]))
  {
    v13 = (CFURLRef)*MEMORY[0x1E0C9AE50];
LABEL_11:
    StatsDictionary = (uint64_t)CFRetain(v13);
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2098]))
  {
    v13 = *(CFURLRef *)DerivedStorage;
    goto LABEL_11;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F60]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F78]) || !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F98]))
      return 4294954512;
    StatsDictionary = FigByteStreamStatsCreateStatsDictionary();
    goto LABEL_5;
  }
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v14[1] = 0;
  v14[2] = 0;
  bzero(&v15, 0x400uLL);
  v14[0] = 0x400000000005;
  if (!CFURLGetFileSystemRepresentation(*(CFURLRef *)DerivedStorage, 1u, (UInt8 *)&v15, 1024))
    return 4294954513;
  result = getattrlist((const char *)&v15, v14, v16, 0x24uLL, 0);
  if (!(_DWORD)result)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_st_size = (off_t *)&v16[4];
    v8 = kCFNumberSInt32Type;
    goto LABEL_4;
  }
  return result;
}

uint64_t FigFileStarByteStreamSetProperty()
{
  return 4294954512;
}

uint64_t FigFileStarByteStreamRead(uint64_t a1, size_t a2, off_t a3, void *a4, uint64_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigGetUpTimeNanoseconds();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_QWORD *)(DerivedStorage + 24) != a3)
  {
    *(_QWORD *)(DerivedStorage + 24) = a3;
    *(_BYTE *)(DerivedStorage + 32) = 1;
  }
  if (a2 > 0x1000)
  {
    v10 = pread(*(_DWORD *)(DerivedStorage + 16), a4, a2, a3);
    *(_BYTE *)(DerivedStorage + 32) = 1;
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    if (fseeko(*(FILE **)(DerivedStorage + 8), a3, 0))
    {
      __error();
      v11 = FigSignalErrorAt();
      goto LABEL_17;
    }
    *(_BYTE *)(DerivedStorage + 32) = 0;
  }
  v10 = fread(a4, 1uLL, a2, *(FILE **)(DerivedStorage + 8));
  if (a5)
LABEL_5:
    *a5 = v10;
LABEL_6:
  v11 = 0;
  if (a2 && v10 <= 0)
  {
    if (v10)
    {
      __error();
      v11 = FigSignalErrorAt();
    }
    else
    {
      v11 = 4294954423;
    }
  }
  *(_QWORD *)(DerivedStorage + 24) += v10;
LABEL_17:
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v11;
}

uint64_t FigFileStarByteStreamGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  stat v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v7, 0, sizeof(v7));
  if (!a3)
    return FigSignalErrorAt();
  fstat(*(_DWORD *)(DerivedStorage + 16), &v7);
  if (a2 < 0 || v7.st_size <= a2)
    *a3 = 0;
  else
    *a3 = v7.st_size - a2;
  return 0;
}

uint64_t FigFileStarByteStreamReadAndCreateBlockBuffer(const void *a1)
{
  CFGetAllocator(a1);
  return CMCreateContiguousBlockBufferFromStream();
}

uint64_t EstimateMaximumTrimTimeForFileSize(uint64_t a1, uint64_t a2, CMTime *a3)
{
  void (*v6)(uint64_t, _QWORD, uint64_t, CFTypeRef *, char *);
  void (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *, uint64_t *);
  unint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **);
  uint64_t v13;
  double Seconds;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(CFTypeRef, CFTypeRef *);
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, CFTypeRef *);
  uint64_t v21;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v24;
  CFTypeRef v25;
  uint64_t (*v26)(CFTypeRef, uint64_t, uint64_t *);
  int v27;
  uint64_t v28;
  uint64_t v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CMTime time;
  CFTypeRef cf;
  CFTypeRef v38;
  const __CFDictionary *v39;

  v31 = 0;
  v32 = 0;
  v30 = 0;
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 64);
  if (v6)
    v6(a1, 0, 1986618469, &v32, (char *)&v30 + 4);
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
  if (v7)
    v7(a1, 0, 1936684398, &v31, &v30);
  v8 = a2 - (uint64_t)((double)a2 * 0.004);
  v10 = v31;
  v9 = v32;
  if (!v32)
  {
    if (!v31)
    {
      v17 = FigSignalErrorAt();
LABEL_35:
      v28 = v17;
      goto LABEL_36;
    }
    v9 = v31;
    v15 = v8;
    v16 = 0;
LABEL_34:
    v17 = EstimateByteTimingForTrack((uint64_t)v9, v15, v16, a3);
    goto LABEL_35;
  }
  if (!v31)
  {
LABEL_33:
    v15 = v8;
    v16 = (int)v10;
    goto LABEL_34;
  }
  v38 = 0;
  v39 = 0;
  cf = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(v31);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v12)
    goto LABEL_26;
  v13 = v12(FigBaseObject, CFSTR("UneditedTrackDuration"), *MEMORY[0x1E0C9AE00], &v39);
  if ((_DWORD)v13)
    goto LABEL_44;
  if (v39)
  {
    CMTimeMakeFromDictionary(&time, v39);
    Seconds = CMTimeGetSeconds(&time);
    CFRelease(v39);
  }
  else
  {
    Seconds = 1.0;
  }
  v18 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v18)
    goto LABEL_26;
  v13 = v18(v10, &v38);
  if ((_DWORD)v13)
    goto LABEL_44;
  v19 = v38;
  v20 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v20)
  {
LABEL_26:
    LODWORD(v10) = 0;
    v28 = 4294954514;
    goto LABEL_27;
  }
  v13 = v20(v19, &cf);
  if ((_DWORD)v13)
  {
LABEL_44:
    v28 = v13;
LABEL_42:
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  v21 = 0;
  do
  {
    v34 = 0;
    v35 = 0;
    v33 = 0;
    v22 = cf;
    v23 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (!v23)
    {
      v28 = 4294954514;
      goto LABEL_42;
    }
    v13 = v23(v22, 0, 0, 0, &v35, &v34, 0, 0, 0, 0, v30);
    if ((_DWORD)v13)
      goto LABEL_44;
    v24 = v34;
    v21 += v35;
    v25 = cf;
    v26 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v26)
      break;
    v27 = v26(v25, v24, &v33);
    if (v34 != v33)
      break;
  }
  while (!v27);
  v28 = 0;
  LODWORD(v10) = (int)((double)v21 / Seconds);
LABEL_27:
  if (v38)
    CFRelease(v38);
  if (cf)
    CFRelease(cf);
  if (!(_DWORD)v28)
  {
    v9 = v32;
    goto LABEL_33;
  }
LABEL_36:
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  return v28;
}

uint64_t EstimateByteTimingForTrack(uint64_t a1, unint64_t a2, int a3, CMTime *a4)
{
  uint64_t (*v8)(uint64_t, CFTypeRef *);
  uint64_t updated;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, CFTypeRef *);
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  double v17;
  Float64 Seconds;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(CFTypeRef, CFTypeRef);
  CMTime v27;
  CMTime time2;
  CMTime time;
  CFTypeRef v30[6];
  __int128 v31;
  __int128 v32;
  CFTypeRef cf[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CMTime v38;
  CMTime v39;
  CFTypeRef v40[2];

  v40[0] = 0;
  v39 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v38 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  *(_OWORD *)cf = 0u;
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v8)
    goto LABEL_11;
  updated = v8(a1, v40);
  if ((_DWORD)updated)
    goto LABEL_38;
  v10 = v40[0];
  v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v11)
  {
LABEL_11:
    v15 = 4294954514;
    goto LABEL_12;
  }
  updated = v11(v10, cf);
  if ((_DWORD)updated)
  {
LABEL_38:
    v15 = updated;
    goto LABEL_12;
  }
  v12 = cf[0];
  v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v13)
    goto LABEL_11;
  updated = v13(v12, v30);
  if ((_DWORD)updated)
    goto LABEL_38;
  updated = UpdateCursorState((uint64_t *)cf);
  if ((_DWORD)updated)
    goto LABEL_38;
  updated = UpdateCursorState((uint64_t *)v30);
  if ((_DWORD)updated)
    goto LABEL_38;
  v14 = v32;
  v39 = *(CMTime *)((char *)&v30[1] + 4);
  if (MoveCursorByOne((uint64_t)v30))
  {
LABEL_10:
    v15 = 0;
    *a4 = v38;
  }
  else
  {
    v17 = (double)a3;
    while (1)
    {
      time = v39;
      Seconds = CMTimeGetSeconds(&time);
      v19 = v32 + v14;
      if ((uint64_t)v32 + v14 + (uint64_t)(Seconds * v17) > a2)
        break;
      time2 = v39;
      *(_OWORD *)&v27.value = *(_OWORD *)((unint64_t)v30 | 0xC);
      v27.epoch = *(_QWORD *)(((unint64_t)v30 | 0xC) + 0x10);
      CMTimeAdd(&time, &time2, &v27);
      v39 = time;
      v14 = v19;
LABEL_36:
      if (MoveCursorByOne((uint64_t)v30))
        goto LABEL_10;
    }
    while (1)
    {
      time = v39;
      time2 = v38;
      if (CMTimeCompare(&time, &time2) < 0)
        v38 = v39;
      v20 = v37;
      time = v39;
      *(_OWORD *)&time2.value = *(_OWORD *)((unint64_t)cf | 0xC);
      time2.epoch = *(_QWORD *)(((unint64_t)cf | 0xC) + 0x10);
      CMTimeSubtract(&v39, &time, &time2);
      v15 = MoveCursorByOne((uint64_t)cf);
      v21 = cf[0];
      v22 = v30[0];
      v23 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      v24 = v22 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
      if (v23 != v24)
        break;
      v25 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v23 + 32);
      if (!v25)
        break;
      if (v25(v21, v22) != -1 || (_DWORD)v15 != 0)
        break;
      v14 -= v20;
      if (BYTE8(v37))
        goto LABEL_36;
    }
  }
LABEL_12:
  if (v40[0])
    CFRelease(v40[0]);
  if (cf[0])
    CFRelease(cf[0]);
  if (v30[0])
    CFRelease(v30[0]);
  return v15;
}

uint64_t UpdateCursorState(uint64_t *a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD);

  v2 = *a1;
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v3)
    return 4294954514;
  result = v3(v2, (uint64_t)a1 + 12);
  if ((_DWORD)result)
    return result;
  v5 = *a1;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 144);
  if (!v6)
    return 4294954514;
  result = v6(v5, 0, (uint64_t)(a1 + 8), 0, 0);
  if ((_DWORD)result)
    return result;
  v7 = *a1;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v8)
    return 4294954514;
  result = v8(v7, (uint64_t)a1 + 36);
  if (!(_DWORD)result)
  {
    *((_BYTE *)a1 + 72) = 1;
    v9 = a1 + 9;
    v10 = *a1;
    v11 = *(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 64);
    if (v11)
      v11(v10, v9, 0, 0, 0);
    return 0;
  }
  return result;
}

uint64_t MoveCursorByOne(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  BOOL v5;
  uint64_t v6;

  v6 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v3)
  {
    LODWORD(result) = v3(v2, 1, &v6);
    v5 = v6 != 1;
  }
  else
  {
    LODWORD(result) = -12782;
    v5 = 1;
  }
  if ((_DWORD)result == 0 && v5)
    result = 4294954456;
  else
    result = result;
  if (!(_DWORD)result)
  {
    ++*(_DWORD *)(a1 + 8);
    return UpdateCursorState((uint64_t *)a1);
  }
  return result;
}

uint64_t FigGetEstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate(CMFormatDescriptionRef desc, float *a2, float a3)
{
  signed int MediaSubType;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t Dimensions;
  int32_t v11;
  unint64_t v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  uint64_t v15;
  float v16;
  const __CFDictionary *Extension;
  const __CFDictionary *v18;
  CFTypeID v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFTypeID v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFTypeID v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFTypeID v28;
  const __CFArray *Value;
  const __CFArray *ValueAtIndex;
  CFTypeID v31;
  CFTypeID v32;
  CFTypeID v33;
  CFTypeID v34;
  CFTypeID v35;
  unsigned int v36;
  CFTypeID v37;
  CFTypeID v38;
  CFTypeID v39;
  CFTypeID v40;
  float *v41;
  uint64_t CodecMaxVideoLevelFromValidationDictionary;
  const void *CFStringForOSTypeValue;
  int v44;
  int v45;
  int v46;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v49;
  uint64_t valuePtr;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (sVDMSTCheckLogOnce != -1)
    dispatch_once_f(&sVDMSTCheckLogOnce, 0, (dispatch_function_t)checkFigVideoDecoderMaxSpeedTrace);
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v7 = MediaSubType;
  v8 = 4294948174;
  if (MediaSubType > 1752589104)
  {
    if (MediaSubType == 1987063865)
      goto LABEL_9;
    v9 = 1752589105;
  }
  else
  {
    if (MediaSubType == 1635135537)
      goto LABEL_9;
    v9 = 1635148593;
  }
  if (MediaSubType != v9)
    return v8;
LABEL_9:
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(desc);
  v11 = Dimensions;
  if ((_DWORD)Dimensions)
  {
    v12 = HIDWORD(Dimensions);
    if (HIDWORD(Dimensions))
    {
      valuePtr = 0;
      v13 = (const __CFNumber *)MGCopyAnswer();
      if (!v13)
      {
        v16 = 0.0;
        goto LABEL_63;
      }
      v14 = v13;
      CFNumberGetValue(v13, kCFNumberSInt64Type, &valuePtr);
      CFRelease(v14);
      v15 = valuePtr;
      v16 = 0.0;
      if (valuePtr < 1)
        goto LABEL_63;
      v49 = 0;
      Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
      if (Extension)
      {
        v18 = Extension;
        v19 = CFGetTypeID(Extension);
        if (v19 == CFDictionaryGetTypeID())
        {
          if (v7 > 1752589104)
          {
            if (v7 == 1987063865)
            {
              Value = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("vpcC"));
              if (!Value)
                goto LABEL_58;
              ValueAtIndex = Value;
              v31 = CFGetTypeID(Value);
              if (v31 == CFArrayGetTypeID())
              {
                ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
                if (!ValueAtIndex)
                  goto LABEL_58;
              }
              else
              {
                v39 = CFGetTypeID(ValueAtIndex);
                if (v39 != CFDataGetTypeID())
                  goto LABEL_58;
              }
              v40 = CFGetTypeID(ValueAtIndex);
              if (v40 != CFDataGetTypeID())
                goto LABEL_58;
              v51 = 0;
              valuePtr = 0;
              if (FigVP9Bridge_ParseVPCC())
                goto LABEL_63;
              v36 = BYTE4(valuePtr);
              goto LABEL_55;
            }
            if (v7 != 1752589105)
              goto LABEL_63;
            v23 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("hvcC"));
            if (v23)
            {
              v24 = v23;
              v25 = CFGetTypeID(v23);
              if (v25 == CFArrayGetTypeID())
              {
                v24 = (const __CFArray *)CFArrayGetValueAtIndex(v24, 0);
                if (!v24)
                  goto LABEL_58;
              }
              else
              {
                v34 = CFGetTypeID(v24);
                if (v34 != CFDataGetTypeID())
                  goto LABEL_58;
              }
              v35 = CFGetTypeID(v24);
              if (v35 != CFDataGetTypeID())
                goto LABEL_58;
              if (FigHEVCBridge_GetHEVCParameterSetAtIndex()
                || FigHEVCBridge_GetSPSChromaFormatAndBitDepths())
              {
                goto LABEL_63;
              }
LABEL_46:
              v36 = 0;
LABEL_55:
              if (v36 > 3)
                goto LABEL_58;
              if (v7 == 1987063865)
                v41 = (float *)&vdmst_getCoefficientsPerPixelFromFormatDesc_sVP9ChromaFormatCoefficientsPerPixel;
              else
                v41 = (float *)&vdmst_getCoefficientsPerPixelFromFormatDesc_sH264AndHEVCChromaFormatCoefficientsPerPixel;
              v16 = v41[v36];
LABEL_62:
              v16 = (float)(v15 & (unint64_t)~(v15 >> 63)) / v16;
              if (v16 != 0.0)
              {
LABEL_126:
                *a2 = v16 / (float)((float)((float)v11 * a3) * (float)(int)v12);
                if (dword_1EE2A3108)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                return 0;
              }
LABEL_63:
              valuePtr = 0;
              LODWORD(v49) = 0;
              CodecMaxVideoLevelFromValidationDictionary = FigMediaValidatorCreateMediaValidatorPropertyList((uint64_t)CFSTR("MediaValidator.plist"), &valuePtr);
              if ((_DWORD)CodecMaxVideoLevelFromValidationDictionary)
                goto LABEL_132;
              if (!valuePtr)
              {
                CodecMaxVideoLevelFromValidationDictionary = FigSignalErrorAt();
                goto LABEL_132;
              }
              CFStringForOSTypeValue = (const void *)FigGetCFStringForOSTypeValue();
              if (v7 != 1752589105)
              {
                if (v7 != 1635148593)
                {
                  v8 = 4294948174;
                  goto LABEL_123;
                }
                CodecMaxVideoLevelFromValidationDictionary = vdmst_getCodecMaxVideoLevelFromValidationDictionary((const __CFDictionary *)valuePtr, CFStringForOSTypeValue, &v49);
                if (!(_DWORD)CodecMaxVideoLevelFromValidationDictionary)
                {
                  v8 = 4294948175;
                  v46 = 1192562688;
                  switch((int)v49)
                  {
                    case 10:
                      goto LABEL_122;
                    case 11:
                      v46 = 1228636160;
                      goto LABEL_122;
                    case 12:
                      v46 = 1237024768;
                      goto LABEL_122;
                    case 13:
                    case 20:
                      v46 = 1245290496;
                      goto LABEL_122;
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                      break;
                    case 21:
                      v46 = 1251651584;
                      goto LABEL_122;
                    case 22:
                      v46 = 1251881984;
LABEL_122:
                      v8 = 0;
                      v16 = *(float *)&v46;
                      break;
                    default:
                      switch(&unk_1932FC000)
                      {
                        case 0x1Eu:
                          v46 = 1260270592;
                          goto LABEL_122;
                        case 0x1Fu:
                          v46 = 1272115200;
                          goto LABEL_122;
                        case 0x20u:
                          v46 = 1280503808;
                          goto LABEL_122;
                        case 0x21u:
                        case 0x22u:
                        case 0x23u:
                        case 0x24u:
                        case 0x25u:
                        case 0x26u:
                        case 0x27u:
                          goto LABEL_123;
                        case 0x28u:
                        case 0x29u:
                          v44 = 1282408448;
                          goto LABEL_121;
                        case 0x2Au:
                          v44 = 1291780096;
LABEL_121:
                          v46 = v44;
                          goto LABEL_122;
                        default:
                          switch(&unk_1932FC000)
                          {
                            case '2':
                              v44 = 1292894208;
                              goto LABEL_121;
                            case '3':
                              v44 = 1299185664;
                              goto LABEL_121;
                            case '4':
                              v46 = 1308434432;
                              goto LABEL_122;
                            case '<':
                              v44 = 1316945920;
                              goto LABEL_121;
                            case '=':
                              v44 = 1325334528;
                              goto LABEL_121;
                            case '>':
                              v44 = 1333723136;
                              goto LABEL_121;
                            default:
                              goto LABEL_123;
                          }
                          goto LABEL_123;
                      }
                  }
LABEL_123:
                  if (valuePtr)
                    CFRelease((CFTypeRef)valuePtr);
                  if ((_DWORD)v8)
                    return v8;
                  goto LABEL_126;
                }
LABEL_132:
                v8 = CodecMaxVideoLevelFromValidationDictionary;
                goto LABEL_123;
              }
              CodecMaxVideoLevelFromValidationDictionary = vdmst_getCodecMaxVideoLevelFromValidationDictionary((const __CFDictionary *)valuePtr, CFStringForOSTypeValue, &v49);
              if ((_DWORD)CodecMaxVideoLevelFromValidationDictionary)
                goto LABEL_132;
              v8 = 4294948175;
              if ((int)v49 > 122)
              {
                if ((int)v49 <= 155)
                {
                  switch((_DWORD)v49)
                  {
                    case 0x7B:
                      v45 = 1291780096;
                      break;
                    case 0x96:
                      v45 = 1300168704;
                      break;
                    case 0x99:
                      v45 = 1308557312;
                      break;
                    default:
                      goto LABEL_123;
                  }
                }
                else if ((int)v49 > 182)
                {
                  if ((_DWORD)v49 == 183)
                  {
                    v45 = 1325334528;
                  }
                  else
                  {
                    if ((_DWORD)v49 != 186)
                      goto LABEL_123;
                    v45 = 1333723136;
                  }
                }
                else
                {
                  if ((_DWORD)v49 != 156 && (_DWORD)v49 != 180)
                    goto LABEL_123;
                  v45 = 1316945920;
                }
                goto LABEL_106;
              }
              if ((int)v49 <= 89)
              {
                switch((_DWORD)v49)
                {
                  case 0x1E:
                    v45 = 1225195520;
                    break;
                  case 0x3C:
                    v45 = 1247870976;
                    break;
                  case 0x3F:
                    v45 = 1256259584;
                    break;
                  default:
                    goto LABEL_123;
                }
LABEL_106:
                v16 = *(float *)&v45;
                goto LABEL_107;
              }
              switch((_DWORD)v49)
              {
                case 'Z':
                  v16 = 16589000.0;
                  break;
                case ']':
                  v16 = 33178000.0;
                  break;
                case 'x':
                  v45 = 1283391488;
                  goto LABEL_106;
                default:
                  goto LABEL_123;
              }
LABEL_107:
              v8 = 0;
              goto LABEL_123;
            }
          }
          else
          {
            if (v7 == 1635135537)
            {
              v26 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("av1C"));
              if (!v26)
                goto LABEL_58;
              v27 = v26;
              v28 = CFGetTypeID(v26);
              if (v28 == CFArrayGetTypeID())
              {
                v27 = (const __CFArray *)CFArrayGetValueAtIndex(v27, 0);
                if (!v27)
                  goto LABEL_58;
              }
              else
              {
                v37 = CFGetTypeID(v27);
                if (v37 != CFDataGetTypeID())
                  goto LABEL_58;
              }
              v38 = CFGetTypeID(v27);
              if (v38 != CFDataGetTypeID())
                goto LABEL_58;
              CFDataGetBytePtr(v27);
              CFDataGetLength(v27);
              if (FigAV1Bridge_GetChromaFormatAndBitDepthsFromAV1CodecConfigurationRecord())
                goto LABEL_63;
              v16 = 3.0;
              goto LABEL_62;
            }
            if (v7 != 1635148593)
              goto LABEL_63;
            v20 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("avcC"));
            if (v20)
            {
              v21 = v20;
              v22 = CFGetTypeID(v20);
              if (v22 == CFArrayGetTypeID())
              {
                v21 = (const __CFArray *)CFArrayGetValueAtIndex(v21, 0);
                if (!v21)
                  goto LABEL_58;
              }
              else
              {
                v32 = CFGetTypeID(v21);
                if (v32 != CFDataGetTypeID())
                  goto LABEL_58;
              }
              v33 = CFGetTypeID(v21);
              if (v33 != CFDataGetTypeID())
                goto LABEL_58;
              CFDataGetBytePtr(v21);
              CFDataGetLength(v21);
              if (FigH264Bridge_GetSPSFromAVCC()
                || FigH264Bridge_GetSPSChromaFormatAndBitDepths())
              {
                goto LABEL_63;
              }
              goto LABEL_46;
            }
          }
        }
      }
LABEL_58:
      if (FigSignalErrorAt())
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  return FigSignalErrorAt();
}

uint64_t checkFigVideoDecoderMaxSpeedTrace()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t FigGetEstimatedMaxFullFramePlaybackSpeedForTrackReader(uint64_t a1, float *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v6;
  uint64_t v7;
  CFArrayRef v8;
  CFIndex Count;
  const void *ValueAtIndex;
  const opaqueCMFormatDescription *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  uint64_t EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate;
  float valuePtr;
  CFArrayRef theArray;

  if (sVDMSTCheckLogOnce != -1)
    dispatch_once_f(&sVDMSTCheckLogOnce, 0, (dispatch_function_t)checkFigVideoDecoderMaxSpeedTrace);
  valuePtr = 0.0;
  theArray = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v5)
    return 4294954514;
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = v5(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
  v8 = theArray;
  if ((_DWORD)v7)
  {
    v11 = 0;
    if (!theArray)
      goto LABEL_16;
LABEL_15:
    CFRelease(v8);
    goto LABEL_16;
  }
  if (!theArray)
    return 4294948176;
  Count = CFArrayGetCount(theArray);
  v8 = theArray;
  if (!Count)
  {
    v11 = 0;
    v7 = 4294948176;
    if (!theArray)
      goto LABEL_16;
    goto LABEL_15;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex)
    v11 = (const opaqueCMFormatDescription *)CFRetain(ValueAtIndex);
  else
    v11 = 0;
  v7 = 0;
  v8 = theArray;
  if (theArray)
    goto LABEL_15;
LABEL_16:
  if ((_DWORD)v7)
    goto LABEL_26;
  theArray = 0;
  v12 = FigTrackReaderGetFigBaseObject(a1);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v13)
  {
    v7 = 4294954514;
    goto LABEL_26;
  }
  v7 = v13(v12, CFSTR("NominalFrameRate"), v6, &theArray);
  if ((_DWORD)v7 || !theArray)
  {
    if ((_DWORD)v7)
      goto LABEL_26;
    goto LABEL_24;
  }
  CFNumberGetValue(theArray, kCFNumberFloat32Type, &valuePtr);
  CFRelease(theArray);
  if (valuePtr < 1.0)
  {
LABEL_24:
    EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate = FigSignalErrorAt();
    goto LABEL_25;
  }
  EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate = FigGetEstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate(v11, a2, valuePtr);
LABEL_25:
  v7 = EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate;
LABEL_26:
  if (v11)
    CFRelease(v11);
  return v7;
}

uint64_t vdmst_getCodecMaxVideoLevelFromValidationDictionary(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  CFTypeID TypeID;
  BOOL v7;
  CFTypeID v8;
  uint64_t result;
  CFTypeID v10;
  CFTypeID v11;
  CFIndex Count;
  CFIndex v13;
  int v14;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  int valuePtr;
  CFTypeRef cf;
  CFTypeRef v19;

  cf = 0;
  v19 = 0;
  TypeID = CFNumberGetTypeID();
  if (mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("MaxLevel"), TypeID, &cf))
    v7 = 1;
  else
    v7 = cf == 0;
  if (!v7)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, a3))
        return 0;
    }
  }
  v10 = CFArrayGetTypeID();
  result = mv_GetCodecProperty(a1, a2, CFSTR("VideoCodecProfiles"), CFSTR("SupportedLevels"), v10, &v19);
  if (!(_DWORD)result)
  {
    if (v19 && (v11 = CFGetTypeID(v19), v11 == CFArrayGetTypeID()) && CFArrayGetCount((CFArrayRef)v19) >= 1)
    {
      Count = CFArrayGetCount((CFArrayRef)v19);
      if (Count < 1)
        return FigSignalErrorAt();
      v13 = Count;
      v14 = 0;
      for (i = 0; i != v13; ++i)
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v19, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (v14 <= valuePtr)
          v14 = valuePtr;
      }
      if (v14)
      {
        result = 0;
        *a3 = v14;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294948176;
    }
  }
  return result;
}

uint64_t FigMovieUsesFragments(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = CMByteStreamCreateForFileURL();
  if (!(_DWORD)result)
    return MovieUsesFragments(0, a2, 0);
  return result;
}

uint64_t FigConsolidateMovieFragments()
{
  uint64_t result;

  result = CMByteStreamCreateForFileURL();
  if (!(_DWORD)result)
    return DeMoofMovieFile(0);
  return result;
}

uint64_t FigTTMLDocumentWriterElementGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
  return sElementTypeID;
}

uint64_t figTTMLDocumentWriterElement_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sElementTypeID = result;
  return result;
}

uint64_t FigTTMLDocumentWriterElementCreate(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  const __CFAllocator *v7;
  uint64_t Instance;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  CFMutableArrayRef v12;
  uint64_t v13;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v9 = Instance;
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      v12 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
      if (v12)
      {
        v13 = 0;
        *(_DWORD *)(v9 + 16) = a2;
        *(_QWORD *)(v9 + 32) = v12;
        *(_QWORD *)(v9 + 40) = v11;
        *(_QWORD *)(v9 + 24) = a3;
        *a4 = v9;
        return v13;
      }
      v13 = FigSignalErrorAt();
      CFRelease(v11);
    }
    else
    {
      v13 = FigSignalErrorAt();
    }
    CFRelease((CFTypeRef)v9);
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterElementWalkTree(CFArrayRef *a1, uint64_t (*a2)(CFArrayRef *, uint64_t), uint64_t (*a3)(CFArrayRef *, uint64_t), uint64_t (*a4)(CFArrayRef *, uint64_t), uint64_t a5)
{
  CFTypeID v8;
  uint64_t result;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v16)(CFArrayRef *, uint64_t);

  if (a1
    && (v16 = a4,
        v8 = CFGetTypeID(a1),
        MEMORY[0x19402F294](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register), a4 = v16, v8 == sElementTypeID))
  {
    if (!a2)
      goto LABEL_6;
    result = a2(a1, a5);
    if ((_DWORD)result == 2)
      return result;
    if (!(_DWORD)result)
    {
LABEL_6:
      v10 = a1[4];
      if (v10)
      {
        Count = CFArrayGetCount(v10);
        if (Count >= 1)
        {
          v12 = Count;
          for (i = 0; i != v12; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a1[4], i);
            result = FigTTMLDocumentWriterElementWalkTree(ValueAtIndex, a2, a3, v16, a5);
            if ((_DWORD)result == 1)
              break;
            if ((_DWORD)result == 2)
              return result;
          }
        }
      }
    }
    if (a3)
      return a3(a1, a5);
  }
  else if (a4)
  {
    return a4(a1, a5);
  }
  return 0;
}

uint64_t FigTTMLDocumentWriterElementInsertBeforeIfNotExist(CFArrayRef *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD v6[3];
  uint64_t v7;

  if (!a3)
    return FigSignalErrorAt();
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = 0;
  v7 = 0;
  FigTTMLDocumentWriterElementWalkTree(a1, (uint64_t (*)(CFArrayRef *, uint64_t))insertBeforeIfNotExist, 0, 0, (uint64_t)v6);
  if (a4)
    *a4 = v7;
  return 0;
}

uint64_t insertBeforeIfNotExist(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v7;
  uint64_t Count;
  uint64_t v9;
  CFIndex v10;
  BOOL v11;
  uint64_t v12;
  CFTypeID v13;
  int v14;
  void *v15;
  void *value;

  value = 0;
  v2 = *a2;
  v3 = a2[2];
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(*a2 + 4 * v3))
  {
    v5 = v3 + 1;
    a2[2] = v5;
    if (v5 == a2[1])
    {
      a2[3] = a1;
      return 2;
    }
    v7 = *(_DWORD *)(v2 + 4 * v5);
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
    if (Count < 1)
      goto LABEL_10;
    v9 = Count;
    v10 = 0;
    v11 = 1;
    while (1)
    {
      Count = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v10);
      if (Count)
      {
        v12 = Count;
        v13 = CFGetTypeID((CFTypeRef)Count);
        Count = MEMORY[0x19402F294](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
        if (v13 == sElementTypeID && *(_DWORD *)(v12 + 16) == v7)
          break;
      }
      v11 = ++v10 < v9;
      if (v9 == v10)
        goto LABEL_10;
    }
    if (!v11)
    {
LABEL_10:
      v14 = FigTTMLDocumentWriterElementCreate(Count, v7, a1, (uint64_t *)&value);
      v15 = value;
      if (!v14)
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), 0, value);
      if (v15)
        CFRelease(v15);
    }
  }
  return 0;
}

void FigTTMLDocumentWriterElementSetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, a3);
}

const void *FigTTMLDocumentWriterElementGetAttribute(uint64_t a1, const void *a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
}

CFIndex FigTTMLDocumentWriterElementGetAttributeCount(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
}

void FigTTMLDocumentWriterElementRemoveAttribute(uint64_t a1, const void *a2)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
}

void FigTTMLDocumentWriterElementAddChildElement(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

void FigTTMLDocumentWriterElementInsertChildNodeBeforeNode(uint64_t a1, _QWORD *a2, const void *a3)
{
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  CFTypeID v8;
  CFRange v9;

  if (a3)
  {
    v6 = *(const __CFArray **)(a1 + 32);
    v9.length = CFArrayGetCount(v6);
    v9.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v9, a3);
    if (FirstIndexOfValue < 0)
      return;
  }
  else
  {
    FirstIndexOfValue = 0;
  }
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), FirstIndexOfValue, a2);
  if (a2)
  {
    v8 = CFGetTypeID(a2);
    MEMORY[0x19402F294](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
    if (v8 == sElementTypeID)
      a2[3] = a1;
  }
}

void FigTTMLDocumentWriterElementRemoveChildNode(uint64_t a1, _QWORD *a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  CFIndex v6;
  CFTypeID v7;
  CFRange v8;

  v4 = *(const __CFArray **)(a1 + 32);
  v8.length = CFArrayGetCount(v4);
  v8.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v8, a2);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0)
  {
    v6 = FirstIndexOfValue;
    if (a2)
    {
      v7 = CFGetTypeID(a2);
      MEMORY[0x19402F294](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
      if (v7 == sElementTypeID)
        a2[3] = 0;
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), v6);
  }
}

uint64_t FigTTMLDocumentWriterElementGetElementType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t FigTTMLDocumentWriterElementGetParentElement(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

CFIndex FigTTMLDocumentWriterElementGetChildrenCount(uint64_t a1)
{
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
}

const void *FigTTMLDocumentWriterElementGetChildAtIndex(uint64_t a1, CFIndex a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) > a2)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
  FigSignalErrorAt();
  return 0;
}

uint64_t FigTTMLDocumentWriterElementCopyElementsAtPath(CFArrayRef *a1, uint64_t a2, uint64_t a3, CFMutableArrayRef *a4)
{
  _QWORD v7[2];
  uint64_t v8;
  CFMutableArrayRef Mutable;

  v8 = 0;
  if (!a3 || !a4)
    return FigSignalErrorAt();
  v7[0] = a2;
  v7[1] = a3;
  LODWORD(v8) = -1;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  FigTTMLDocumentWriterElementWalkTree(a1, (uint64_t (*)(CFArrayRef *, uint64_t))getElementsAtPathPreOrder, (uint64_t (*)(CFArrayRef *, uint64_t))getElementsAtPathPostOrder, 0, (uint64_t)v7);
  *a4 = Mutable;
  return 0;
}

uint64_t getElementsAtPathPreOrder(_DWORD *value, uint64_t a2)
{
  uint64_t v2;

  v2 = *(int *)(a2 + 16) + 1;
  *(_DWORD *)(a2 + 16) = v2;
  if (value[4] != *(_DWORD *)(*(_QWORD *)a2 + 4 * v2))
    return 1;
  if (*(_QWORD *)(a2 + 8) - 1 == v2)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), value);
    return 1;
  }
  return 0;
}

uint64_t getElementsAtPathPostOrder(uint64_t a1, uint64_t a2)
{
  --*(_DWORD *)(a2 + 16);
  return 0;
}

uint64_t FigTTMLDocumentWriterElementWriteTree(CFArrayRef *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = 0;
  FigTTMLDocumentWriterElementWalkTree(a1, (uint64_t (*)(CFArrayRef *, uint64_t))writeStartElement, (uint64_t (*)(CFArrayRef *, uint64_t))writeEndElement, (uint64_t (*)(CFArrayRef *, uint64_t))writeCaptionData, (uint64_t)&v3);
  return v4;
}

uint64_t writeStartElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int started;
  unint64_t Count;
  size_t v7;
  size_t v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  const void *Value;
  int v15;
  BOOL v16;

  if (*(_DWORD *)(a2 + 8))
    goto LABEL_17;
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 == 5)
  {
    if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)))
    {
LABEL_17:
      v10 = 0;
      goto LABEL_19;
    }
    v4 = *(unsigned int *)(a1 + 16);
  }
  started = FigTTMLDocumentWriterStartElement(*(_QWORD *)a2, v4);
  *(_DWORD *)(a2 + 8) = started;
  if (started)
    goto LABEL_17;
  Count = FigCFDictionaryGetCount();
  if (!Count)
    goto LABEL_17;
  v7 = Count;
  if (!(Count >> 61) && (v8 = 8 * Count, 8 * v7) && (v9 = (const void **)malloc_type_malloc(v8, 0x5CC9CBA6uLL)) != 0)
  {
    v10 = v9;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v9, 0);
    qsort(v10, v7, 8uLL, (int (__cdecl *)(const void *, const void *))compareCFString);
    v11 = 0;
    v12 = v7 - 1;
    do
    {
      v13 = v10[v11];
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v13);
      v15 = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)a2, (uint64_t)v13, (uint64_t)Value);
      *(_DWORD *)(a2 + 8) = v15;
      if (v15)
        v16 = 1;
      else
        v16 = v12 == v11;
      ++v11;
    }
    while (!v16);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)(a2 + 8) = FigSignalErrorAt();
  }
LABEL_19:
  free(v10);
  return 2 * (*(_DWORD *)(a2 + 8) != 0);
}

uint64_t writeEndElement(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 16) == 5 && !CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)))
    {
      v3 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      v3 = FigTTMLDocumentWriterEndElement(*(_QWORD *)a2);
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  return 2 * (v3 != 0);
}

uint64_t writeCaptionData(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 8);
  if (!v4)
  {
    v4 = FigTTMLDocumentWriterAddCaptionData(*(_QWORD *)a2, a1);
    *(_DWORD *)(a2 + 8) = v4;
  }
  return 2 * (v4 != 0);
}

double figTTMLDocumentWriterElement_Init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figTTMLDocumentWriterElement_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
}

__CFString *figTTMLDocumentWriterElement_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v4;
  CFRange v6;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
  v4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigTTMLDocumentWriter_Element %p] nodeType=%d parent=%p attributes(%ld)={ "), a1, *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), Count);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)appendAttributeDebugDesc, Mutable);
  CFStringAppendFormat(Mutable, 0, CFSTR("} children(%ld)=[ "), v4);
  v6.location = 0;
  v6.length = v4;
  CFArrayApplyFunction(*(CFArrayRef *)(a1 + 32), v6, (CFArrayApplierFunction)appendChildNodeDebugDesc, Mutable);
  CFStringAppendFormat(Mutable, 0, CFSTR("]"));
  return Mutable;
}

void appendAttributeDebugDesc(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
  CFStringAppendFormat(theString, 0, CFSTR("%@:%@ "), a1, a2);
}

void appendChildNodeDebugDesc(uint64_t a1, CFMutableStringRef theString)
{
  CFStringAppendFormat(theString, 0, CFSTR("%p "), a1);
}

CFComparisonResult compareCFString(CFStringRef *a1, CFStringRef *a2)
{
  return CFStringCompare(*a1, *a2, 0);
}

uint64_t FigDiskCacheProviderGetClassID()
{
  MEMORY[0x19402F294](&FigDiskCacheProviderGetClassID_sRegisterFigDiskCacheProviderBaseTypeOnce, RegisterFigDiskCacheProviderBaseType);
  return sFigDiskCacheProviderClassID;
}

uint64_t RegisterFigDiskCacheProviderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigDiskCacheProviderGetCFTypeID()
{
  MEMORY[0x19402F294](&FigDiskCacheProviderGetClassID_sRegisterFigDiskCacheProviderBaseTypeOnce, RegisterFigDiskCacheProviderBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigDiskCacheProviderRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void FigDiskCacheProviderRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFStringRef FigDiskCacheProviderBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigDiskCacheProvider %p]"), a1);
}

void figHTTPCustomURLLoaderCredentialCallback()
{
  void *v0;
  uint64_t DerivedStorage;
  uint64_t v2;

  v0 = (void *)MEMORY[0x19403137C]();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigCustomURLResponseInfoCopyNSURLCredential();
    FigCustomURLResponseInfoGetNSURLSessionAuthChallengeDisposition();
    v2 = *(_QWORD *)(DerivedStorage + 472);
    if (v2)
    {
      (*(void (**)(void))(v2 + 16))();
      _Block_release(*(const void **)(DerivedStorage + 472));
      *(_QWORD *)(DerivedStorage + 472) = 0;
    }
  }
  FigRetainProxyUnlockMutex();

  objc_autoreleasePoolPop(v0);
}

void figHttpRequestCloseNSURLSessionTask()
{
  uint64_t DerivedStorage;
  const void *v1;
  void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 544))
  {
    nw_activity_complete_with_reason();
    v1 = *(const void **)(DerivedStorage + 544);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 544) = 0;
    }
  }
  v2 = *(void **)(DerivedStorage + 504);
  if (v2)
  {
    objc_msgSend(v2, "cancel");
    objc_msgSend(*(id *)(DerivedStorage + 56), "_deregisterFigHTTPRequestForDataTask:", *(_QWORD *)(DerivedStorage + 504));

    *(_QWORD *)(DerivedStorage + 504) = 0;
  }
}

uint64_t figHTTPSetIsDormant(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 176) != a2)
  {
    v4 = result;
    *(_BYTE *)(result + 176) = a2;
    result = FigGetUpTimeNanoseconds();
    v5 = *(_QWORD *)(v4 + 496);
    if (a2)
    {
      if (v5)
      {
        result = FigNetworkHistoryRequestBecameInactive();
        *(_QWORD *)(v4 + 496) = 0;
        *(_BYTE *)(v4 + 177) = 0;
      }
    }
    else if (!v5)
    {
      FigNetworkHistoryRequestBecameActive();
      return FigNetworkHistorySetRequestLatency();
    }
  }
  return result;
}

void _figHTTPRequestCreateErrorComment(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFStringRef v10;
  CFStringRef v11;
  const void *v12;

  if (a3)
  {
    v10 = CFStringCreateWithFormatAndArguments(0, 0, a3, &a9);
    if (v10)
    {
      v11 = v10;
      v12 = *(const void **)(a1 + 520);
      if (v12)
        CFRelease(v12);
      *(_QWORD *)(a1 + 520) = v11;
    }
  }
}

void figApplyHeaderToCFHTTPMessaage(CFStringRef headerField, CFStringRef value, CFHTTPMessageRef message)
{
  CFHTTPMessageSetHeaderFieldValue(message, headerField, value);
}

uint64_t figHTTPRequestPerformReadCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeRef v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const void *v19;
  void (*v20)(const void *, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  CFTypeRef v21;
  int IsInvalidated;
  uint64_t v23;
  uint64_t v25;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 172))
    {
      v13 = DerivedStorage;
      if (*(_QWORD *)(DerivedStorage + 24))
      {
        v25 = a3;
        v14 = *(CFTypeRef *)DerivedStorage;
        if (*(_QWORD *)DerivedStorage)
          DerivedStorage = (uint64_t)CFRetain(*(CFTypeRef *)DerivedStorage);
        if (*(_BYTE *)(v13 + 376))
          v15 = a5 | 4;
        else
          v15 = a5;
        if (*(_BYTE *)(v13 + 377))
          v16 = v15 | 8;
        else
          v16 = v15;
        if ((v16 & 2) != 0)
        {
          *(_BYTE *)(v13 + 172) = 1;
          v17 = (void *)MEMORY[0x19403137C](DerivedStorage);
          figHTTPSetActivelyUsingNetwork((uint64_t)a1, 0);
          objc_autoreleasePoolPop(v17);
        }
        v18 = *(unsigned int *)(v13 + 136);
        v20 = *(void (**)(const void *, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v13 + 24);
        v19 = *(const void **)(v13 + 32);
        if (v19)
          v21 = CFRetain(v19);
        else
          v21 = 0;
        CFRetain(a1);
        FigRetainProxyUnlockAll();
        v20(a1, v18, v21, a2, v25, a4, v16, a6);
        FigRetainProxyRelock();
        if (v21)
          CFRelease(v21);
        CFRelease(a1);
        IsInvalidated = FigRetainProxyIsInvalidated();
        if (IsInvalidated)
          v23 = 4294954511;
        else
          v23 = 0;
        if ((v16 & 2) != 0 && !IsInvalidated)
        {
          if (!*(_BYTE *)(v13 + 363))
          {
            v23 = 0;
            if (!v14)
              return v23;
            goto LABEL_27;
          }
          FigHTTPRequestCommonMandatoryRequestFinish();
          v23 = 0;
          *(_BYTE *)(v13 + 363) = 0;
        }
        if (!v14)
          return v23;
LABEL_27:
        CFRelease(v14);
        return v23;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t figHttpRequestEnsureNotTooManyBytes(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  if (!*(_BYTE *)(DerivedStorage + 168))
    return 0;
  v10 = *(_QWORD *)(DerivedStorage + 416);
  if (v10 < 1)
    return 0;
  v11 = *(_QWORD *)(DerivedStorage + 424);
  if (v11 + a2 <= (unint64_t)v10)
    return 0;
  _figHTTPRequestCreateErrorComment(DerivedStorage, v4, CFSTR("received more bytes  %lld + %zu = (%lld) than promised (%lld)"), v5, v6, v7, v8, v9, v11);
  return FigSignalErrorAt();
}

uint64_t FigHTTPRequestNSURLSessionGetClassID()
{
  if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1)
    dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_51);
  return sFigHTTPRequestNSURLSessionID;
}

uint64_t _FigHTTPRequestCreateWithNSURLSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  uint64_t v20;
  CFTypeID TypeID;
  uint64_t v22;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402F294](&sFigHTTPInit, figHTTPRequestRunOnce);
  if (!a2)
  {
    if (!a3)
      goto LABEL_19;
LABEL_9:
    if (a11)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(a11))
        goto LABEL_19;
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_InterfaceName"));
      FigCFDictionaryGetBooleanIfPresent();
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_ClientAuditToken"));
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_ClientBundleIdentifier"));
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_CustomURLLoader"));
      if (CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_DependentPipelinePrecursor")))
      {
        if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1)
          dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_51);
        if (!CMBaseObjectIsMemberOfClass())
          goto LABEL_19;
      }
      FigCFDictionaryGetDoubleIfPresent();
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_NetworkHistory"));
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_CreateExpectedProgressTarget"));
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetDataValue();
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_URLRequestAttribution"));
      CFDictionaryGetValue((CFDictionaryRef)a11, CFSTR("FHRP_NetworkActivity"));
    }
    if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1)
      dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_51);
    CMDerivedObjectCreate();
    goto LABEL_19;
  }
  if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1)
    dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_51);
  v20 = sFigHTTPRequestNSURLSessionID;
  if (v20 == CMBaseObjectGetClassID()
    && *(_QWORD *)CMBaseObjectGetDerivedStorage()
    && !FigRetainProxyIsInvalidated())
  {
    goto LABEL_9;
  }
LABEL_19:
  v22 = FigSignalErrorAt();
  if (!(_DWORD)v22)
    v22 = 0;
  *a18 = 0;
  return v22;
}

uint64_t figHTTPRequestRunOnce()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  result = FigGetCFPreferenceBooleanWithDefault();
  sFigDisableIncreasedNetworkQOS = result;
  if ((_DWORD)result)
  {
    if (dword_1EE2A3128)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

dispatch_queue_t figHTTPNotifyNetworkActivitySetupOnce()
{
  dispatch_queue_t result;

  gApplicationNetworkActivityDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = dispatch_queue_create("com.apple.coremedia.networkactivitydict", 0);
  gApplicationNetworkActivityQueue = (uint64_t)result;
  return result;
}

uint64_t _FigHTTPRequestSessionCreateNSURLSessionDataDelegate(int a1, _QWORD *a2)
{
  void *v4;

  if (!a2)
    return 4294954516;
  v4 = (void *)MEMORY[0x19403137C]();
  *a2 = -[FigHTTPRequestSessionDataDelegate initWithResponseDispositionOption:]([FigHTTPRequestSessionDataDelegate alloc], "initWithResponseDispositionOption:", a1 != 0);
  objc_autoreleasePoolPop(v4);
  return 0;
}

uint64_t figHttpRequestSendOutputBlockBuffer(uint64_t a1, unsigned int a2)
{
  const void *Owner;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  const void *v9;

  Owner = (const void *)FigRetainProxyGetOwner();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 392);
  v6 = *(_QWORD *)(DerivedStorage + 384);
  v7 = *(_QWORD *)(DerivedStorage + 400) - v5;
  *(_QWORD *)(DerivedStorage + 424) += v7;
  *(_BYTE *)(DerivedStorage + 432) = 1;
  figHTTPRequestPerformReadCallback(Owner, v6, v5, v7, a2, 0);
  if (FigRetainProxyIsInvalidated())
    return 4294954511;
  *(_BYTE *)(DerivedStorage + 432) = 0;
  if ((a2 & 2) != 0 || !*(_QWORD *)(DerivedStorage + 408))
  {
    v9 = *(const void **)(DerivedStorage + 384);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 384) = 0;
    }
    result = 0;
    *(_QWORD *)(DerivedStorage + 392) = 0;
    *(_QWORD *)(DerivedStorage + 400) = 0;
    *(_QWORD *)(DerivedStorage + 408) = 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)(DerivedStorage + 392) = *(_QWORD *)(DerivedStorage + 400);
  }
  return result;
}

uint64_t figHTTPRequestGetOutputBuffer(uint64_t a1, char **a2, size_t *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  OpaqueCMBlockBuffer *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  OpaqueCMBlockBuffer *v18;
  uint64_t v19;
  size_t v20;
  uint64_t DataPointer;
  size_t v22;
  uint64_t (*v24)(CFTypeRef, uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *);
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  uint64_t v27;
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = 0;
  *a3 = 0;
  if (!*(_QWORD *)(DerivedStorage + 16))
    return 0;
  v7 = (_QWORD *)DerivedStorage;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v8 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 384);
  if (v8)
    goto LABEL_28;
  v9 = CMBaseObjectGetDerivedStorage();
  v10 = *(const void **)v9;
  v27 = 0;
  theBuffer = 0;
  if (v10)
    CFRetain(v10);
  v11 = *(const void **)(v9 + 32);
  v24 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *))(v9 + 16);
  if (v11)
    v12 = CFRetain(v11);
  else
    v12 = 0;
  v13 = *(unsigned int *)(v9 + 136);
  v14 = *(_QWORD *)(v9 + 416);
  if (v14 < 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = v14 - *(_QWORD *)(v9 + 424);
    if (*(_BYTE *)(v9 + 169))
      v16 = v15 + 1;
    else
      v16 = v15;
  }
  FigRetainProxyUnlockAll();
  v17 = v24(v12, a1, v13, v16, &theBuffer, &v27);
  FigRetainProxyRelock();
  if (v12)
    CFRelease(v12);
  if ((_DWORD)v17)
  {
LABEL_21:
    if (!v10)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (FigRetainProxyIsInvalidated())
  {
    v17 = 4294954511;
    if (!v10)
      goto LABEL_23;
LABEL_22:
    CFRelease(v10);
    goto LABEL_23;
  }
  v18 = theBuffer;
  if (theBuffer)
  {
    v19 = v27;
    *(_QWORD *)(v9 + 392) = v27;
    *(_QWORD *)(v9 + 400) = v19;
    *(_QWORD *)(v9 + 384) = v18;
    v17 = 0;
    *(_QWORD *)(v9 + 408) = CMBlockBufferGetDataLength(v18) - *(_QWORD *)(v9 + 400);
    theBuffer = 0;
    goto LABEL_21;
  }
  v17 = 0;
  if (v10)
    goto LABEL_22;
LABEL_23:
  if (theBuffer)
    CFRelease(theBuffer);
  if (!FigRetainProxyIsInvalidated() && !(_DWORD)v17)
  {
    v8 = (OpaqueCMBlockBuffer *)v7[48];
    if (v8)
    {
LABEL_28:
      v20 = v7[51];
      DataPointer = CMBlockBufferGetDataPointer(v8, v7[50], &lengthAtOffsetOut, 0, &dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
        v22 = lengthAtOffsetOut;
        if (v20 < lengthAtOffsetOut)
          v22 = v20;
        if (v22)
        {
          v17 = 0;
          *a2 = dataPointerOut;
          *a3 = v22;
          return v17;
        }
        return FigSignalErrorAt();
      }
      return DataPointer;
    }
    return 0;
  }
  return v17;
}

void figHTTPSetActivelyUsingNetwork(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  const void *v5;
  CFTypeRef v6;
  _QWORD v7[5];
  char v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(unsigned __int8 *)(DerivedStorage + 456) != a2)
  {
    *(_BYTE *)(DerivedStorage + 456) = a2;
    if (!a2)
    {
      if (*(_BYTE *)(DerivedStorage + 457) == 1)
        FigBytePumpGetFigBaseObject(UpTimeNanoseconds);
      if (*(_QWORD *)(DerivedStorage + 488) && !*(_BYTE *)(DerivedStorage + 173) && *(_QWORD *)(DerivedStorage + 496))
      {
        FigNetworkHistoryRequestBecameInactive();
        *(_QWORD *)(DerivedStorage + 496) = 0;
        *(_BYTE *)(DerivedStorage + 177) = 0;
      }
    }
    v5 = *(const void **)(DerivedStorage + 448);
    if (v5)
    {
      v6 = CFRetain(v5);
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __figHTTPSetActivelyUsingNetwork_block_invoke;
      v7[3] = &__block_descriptor_41_e5_v8__0l;
      v8 = a2;
      v7[4] = v6;
      dispatch_async((dispatch_queue_t)gApplicationNetworkActivityQueue, v7);
    }
  }
}

void __figHTTPSetActivelyUsingNetwork_block_invoke(uint64_t a1)
{
  const __CFNumber *Value;
  dispatch_time_t v4;
  CFNumberRef v5;
  const void *v6;
  _QWORD v7[5];
  int valuePtr;

  if (!*(_BYTE *)(a1 + 40))
  {
    v4 = dispatch_time(0, 100000000);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __figHTTPSetActivelyUsingNetwork_block_invoke_2;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = *(_QWORD *)(a1 + 32);
    dispatch_after(v4, (dispatch_queue_t)gApplicationNetworkActivityQueue, v7);
    return;
  }
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32));
  if (!Value)
  {
    valuePtr = 1;
    goto LABEL_7;
  }
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  if (!valuePtr++)
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 32))
      SBSSetStatusBarShowsActivityForApplication();
  }
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue((CFMutableDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32), v5);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
}

void __figHTTPSetActivelyUsingNetwork_block_invoke_2(uint64_t a1)
{
  const __CFNumber *Value;
  CFNumberRef v3;
  const void *v4;
  const void *v5;
  int valuePtr;

  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if (--valuePtr)
    {
      v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      CFDictionarySetValue((CFMutableDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32), v3);
      if (v3)
        CFRelease(v3);
    }
    else
    {
      v4 = *(const void **)(a1 + 32);
      if (v4)
      {
        SBSSetStatusBarShowsActivityForApplication();
        v4 = *(const void **)(a1 + 32);
      }
      CFDictionaryRemoveValue((CFMutableDictionaryRef)gApplicationNetworkActivityDict, v4);
    }
  }
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
}

CFStringRef figHTTPRequestNSURLSessionBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigHTTPRequestCFURLconnection %p]"), a1);
}

uint64_t figHTTPRequestNSURLSessionInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)DerivedStorage)
    return 0;
  FigRetainProxyLockMutex();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v8 = 4294954511;
  }
  else
  {
    v3 = FigRetainProxyInvalidate();
    *(_BYTE *)(DerivedStorage + 8) = 1;
    if (*(_BYTE *)(DerivedStorage + 363))
    {
      FigHTTPRequestCommonMandatoryRequestFinish();
      *(_BYTE *)(DerivedStorage + 363) = 0;
    }
    v4 = (void *)MEMORY[0x19403137C](v3);
    figHTTPSetActivelyUsingNetwork(a1, 0);
    figHttpRequestCloseNSURLSessionTask();
    if (*(_QWORD *)(DerivedStorage + 472))
    {
      v5 = *(_QWORD *)(DerivedStorage + 464);
      v6 = *(_QWORD *)(DerivedStorage + 480);
      v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v7)
        v7(v5, v6);
      (*(void (**)(void))(*(_QWORD *)(DerivedStorage + 472) + 16))();
      _Block_release(*(const void **)(DerivedStorage + 472));
      *(_QWORD *)(DerivedStorage + 472) = 0;
    }
    objc_autoreleasePoolPop(v4);
    v8 = 0;
  }
  FigRetainProxyUnlockMutex();
  return v8;
}

void figHTTPRequestNSURLSessionFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (void *)MEMORY[0x19403137C]();
  figHTTPRequestNSURLSessionInvalidate(a1);
  v4 = *(void **)(DerivedStorage + 560);
  if (v4)
  {

    *(_QWORD *)(DerivedStorage + 560) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 88);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 104);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }

  v8 = *(const void **)(DerivedStorage + 544);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 544) = 0;
  }
  v9 = *(void **)(DerivedStorage + 352);
  if (v9)
    nw_release(v9);
  *(_QWORD *)(DerivedStorage + 352) = 0;
  v10 = *(void **)(DerivedStorage + 344);
  if (v10)
    nw_release(v10);
  *(_QWORD *)(DerivedStorage + 344) = 0;
  v11 = *(NSObject **)(DerivedStorage + 64);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(DerivedStorage + 64) = 0;
  v12 = *(const void **)(DerivedStorage + 152);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }

  *(_QWORD *)(DerivedStorage + 144) = 0;
  v13 = *(const void **)(DerivedStorage + 160);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 464);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 464) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 472);
  if (v15)
    _Block_release(v15);
  v16 = *(const void **)(DerivedStorage + 80);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 72);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 384);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 112);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 448);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 368);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 512);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 512) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 520);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 520) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 440);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 488);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 488) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 32);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 40);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  objc_autoreleasePoolPop(v3);
}

uint64_t figHTTPRequestNSURLSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  __CFDictionary *v10;
  void *v11;
  void *v13;
  void *v14;
  uint64_t v15;
  CFMutableDictionaryRef v16;
  const void **v17;
  CFMutableDictionaryRef *v18;
  CFMutableDictionaryRef v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v8 = 4294954511;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("FHRP_HTTPFinalURL")))
  {
    v9 = *(const void **)(DerivedStorage + 80);
    if (!v9)
      goto LABEL_21;
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("FHRP_HTTPResponseHeaders")))
  {
    v9 = *(const void **)(DerivedStorage + 152);
    if (v9)
    {
LABEL_8:
      v10 = (__CFDictionary *)CFRetain(v9);
LABEL_9:
      v8 = 0;
      *a4 = v10;
      goto LABEL_22;
    }
LABEL_21:
    v8 = 4294954513;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("FHRP_PayloadLength")))
  {
    if (*(_QWORD *)(DerivedStorage + 144))
    {
      v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(DerivedStorage + 416));
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("FHRP_ErrorReturned")))
  {
    v11 = *(void **)(DerivedStorage + 512);
    if (v11)
    {
      v10 = v11;
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("FHRP_ErrorComment")))
  {
    v9 = *(const void **)(DerivedStorage + 520);
    if (!v9)
      goto LABEL_21;
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("FHRP_RemoteIPAddress")))
  {
    v9 = *(const void **)(DerivedStorage + 368);
    if (v9)
      goto LABEL_8;
    goto LABEL_21;
  }
  if (!CFEqual(a2, CFSTR("FHRP_CFNetworkTimingData")))
  {
    if (CFEqual(a2, CFSTR("FHRP_CFNetworkTransactionMetrics")))
    {
      v19 = 0;
      v15 = figHTTPRequestNSURLSessionCopyTaskMetricsAsCFData(a1, &v19);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("FHRP_ByteRange")))
      {
        if (CFEqual(a2, CFSTR("FHRP_HandlesNetworkTransitions")))
        {
          v17 = (const void **)MEMORY[0x1E0C9AE50];
          if (!*(_BYTE *)(DerivedStorage + 536))
            v17 = (const void **)MEMORY[0x1E0C9AE40];
          v9 = *v17;
          goto LABEL_8;
        }
        if (!CFEqual(a2, CFSTR("FHRP_IsExpensive")))
        {
          v8 = 4294954512;
          goto LABEL_22;
        }
        v8 = 0;
        if (*(_BYTE *)(DerivedStorage + 537))
          v18 = (CFMutableDictionaryRef *)MEMORY[0x1E0C9AE50];
        else
          v18 = (CFMutableDictionaryRef *)MEMORY[0x1E0C9AE40];
        v16 = *v18;
LABEL_33:
        *a4 = v16;
        goto LABEL_22;
      }
      v19 = 0;
      v15 = figHTTPRequestNSURLSessionCopyByteRangeAsCFDictionary(a1, &v19);
    }
    v8 = v15;
    v16 = v19;
    goto LABEL_33;
  }
  v13 = (void *)MEMORY[0x19403137C]();
  v14 = (void *)objc_msgSend(*(id *)(DerivedStorage + 504), "_timingData");
  if (v14)
  {
    v8 = 0;
    *a4 = (CFMutableDictionaryRef)v14;
  }
  else
  {
    v8 = 4294954513;
  }
  objc_autoreleasePoolPop(v13);
LABEL_22:
  FigRetainProxyUnlockMutex();
  return v8;
}

uint64_t figHTTPRequestNSURLSessionSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  CFTypeID v9;
  CFTypeID v10;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v7 = 4294954511;
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("FHRP_ExpectedProgressTarget")))
  {
    valuePtr = 0;
    if (a3)
    {
      CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
      a3 = (const __CFNumber *)FigNanosecondsToHostTime();
      FigGetContinuousUpTimeNanoseconds();
    }
    objc_msgSend(*(id *)(DerivedStorage + 504), "set_expectedProgressTarget:", a3);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("FHRP_DefaultLatency")))
  {
    if (a3)
    {
      v8 = CFGetTypeID(a3);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
        v7 = 0;
        *(_QWORD *)(DerivedStorage + 248) = valuePtr;
        goto LABEL_20;
      }
    }
LABEL_19:
    v7 = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("FHRP_NWActivityCompletionReason")))
  {
    if (a3)
    {
      v9 = CFGetTypeID(a3);
      if (v9 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
        v7 = 0;
        *(_DWORD *)(DerivedStorage + 552) = valuePtr;
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
  if (!CFEqual(a2, CFSTR("FHRP_IsDormant")))
  {
    v7 = 4294954512;
    goto LABEL_20;
  }
  if (!a3)
    goto LABEL_19;
  v10 = CFGetTypeID(a3);
  if (v10 != CFBooleanGetTypeID())
    goto LABEL_19;
  figHTTPSetIsDormant(a1, *MEMORY[0x1E0C9AE50] == (_QWORD)a3);
LABEL_6:
  v7 = 0;
LABEL_20:
  FigRetainProxyUnlockMutex();
  return v7;
}

uint64_t figHTTPRequestNSURLSessionCopyTaskMetricsAsCFData(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *DerivedStorage;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;

  v10 = 0;
  result = 4294954516;
  if (a1 && a2)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage && (v6 = DerivedStorage, *DerivedStorage))
    {
      v7 = FigRetainProxyLockMutex();
      if (v6[32])
      {
        v8 = (void *)MEMORY[0x19403137C](v7);
        v9 = (id)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v6[32], 1, &v10);
        objc_autoreleasePoolPop(v8);
      }
      else
      {
        v9 = 0;
      }
      FigRetainProxyUnlockMutex();
      result = 0;
      *a2 = v9;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionCopyByteRangeAsCFDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t result;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;

  result = 4294954516;
  if (a1 && a2)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage && *DerivedStorage)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v7 = Mutable;
        FigRetainProxyLockMutex();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigRetainProxyUnlockMutex();
        result = 0;
        *a2 = v7;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionPause()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    FigRetainProxyLockMutex();
    if (!*(_BYTE *)(DerivedStorage + 8))
      objc_msgSend(*(id *)(DerivedStorage + 504), "suspend");
    return FigRetainProxyUnlockMutex();
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionResume()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    FigRetainProxyLockMutex();
    if (!*(_BYTE *)(DerivedStorage + 8))
      objc_msgSend(*(id *)(DerivedStorage + 504), "resume");
    return FigRetainProxyUnlockMutex();
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionGetBandwidthInfo(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    return 4294954516;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294954516;
  v8 = DerivedStorage;
  if (!*DerivedStorage)
    return 4294954516;
  FigRetainProxyLockMutex();
  if (a2)
  {
    v9 = v8[53];
    if (*((_BYTE *)v8 + 432) != 1)
      v9 = v8[50] + v9 - v8[49];
    *a2 = v9;
  }
  if (a3)
  {
    if (!*((_BYTE *)v8 + 173) && !*((_BYTE *)v8 + 174) || (v10 = v8[31], v10 <= 0))
    {
      v11 = v8[27];
      v12 = v8[25];
      v13 = v11 < v12;
      v10 = v11 - v12;
      if (v13)
        v10 = 0;
    }
    *a3 = v10;
  }
  if (a4)
  {
    v15 = v8[27];
    v14 = v8[28];
    v13 = v14 < v15;
    v16 = v14 - v15;
    if (v13)
    {
      if (v15 < 1)
        v16 = 0;
      else
        v16 = FigGetUpTimeNanoseconds() - v8[27];
    }
    *a4 = v16;
  }
  FigRetainProxyUnlockMutex();
  return 0;
}

uint64_t figHTTPRequestNSURLSessionGetBufferFilledOffset(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *DerivedStorage;
  _QWORD *v7;

  v3 = 4294954516;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          v7 = DerivedStorage;
          if (*DerivedStorage)
          {
            FigRetainProxyLockMutex();
            if (v7[48] == a2)
            {
              v3 = 0;
              *a3 = v7[50];
            }
            FigRetainProxyUnlockMutex();
          }
        }
      }
    }
  }
  return v3;
}

uint64_t figHTTPRequestNSURLSessionCopyTransactionMetrics(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _BYTE *a9, _QWORD *a10, _DWORD *a11, _QWORD *a12, _QWORD *a13)
{
  _QWORD *DerivedStorage;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  if (!a1)
    return 4294954516;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294954516;
  v21 = DerivedStorage;
  if (!*DerivedStorage)
    return 4294954516;
  FigRetainProxyLockMutex();
  if (a2)
    *a2 = v21[33];
  if (a3)
    *a3 = v21[34];
  if (a4)
    *a4 = v21[35];
  if (a5)
    *a5 = v21[36];
  if (a6)
    *a6 = v21[37];
  if (a7)
    *a7 = v21[38];
  if (a8)
    *a8 = v21[39];
  if (a9)
    *a9 = *((_BYTE *)v21 + 320);
  if (a10)
    *a10 = v21[41];
  if (a11)
    *a11 = *((_DWORD *)v21 + 84);
  if (a12)
  {
    v22 = (void *)v21[44];
    if (v22)
    {
      nw_retain(v22);
      v23 = v21[44];
    }
    else
    {
      v23 = 0;
    }
    *a12 = v23;
  }
  if (a13)
  {
    v24 = (void *)v21[43];
    if (v24)
    {
      nw_retain(v24);
      v25 = v21[43];
    }
    else
    {
      v25 = 0;
    }
    *a13 = v25;
  }
  FigRetainProxyUnlockMutex();
  return 0;
}

uint64_t figHTTPAddHeaderFields(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) != 0)
      return objc_msgSend(a3, "setValue:forHTTPHeaderField:", a2, a1);
  }
  return result;
}

void __figHttpRequestSetupNSURLSessionTask_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    _FigHTTPRequestSessionNoteNativeConnectionForNSURLSession(v3, a2);
    CFRelease(v4);
  }
}

uint64_t FigEndpointStreamAudioEngineResumeSync(uint64_t a1, uint64_t a2, int a3)
{
  dispatch_time_t v5;
  dispatch_object_t *SyncContext;
  dispatch_object_t *v7;
  dispatch_object_t v8;
  const __CFArray *v9;
  NSObject *v10;
  uint64_t VTable;
  void (*v12)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *);
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  valuePtr = 0;
  if (a3)
    v5 = dispatch_time(0, 1000000 * a3);
  else
    v5 = -1;
  SyncContext = (dispatch_object_t *)inEndpointStreamUtil_createSyncContext();
  if (!SyncContext)
  {
    FigSignalErrorAt();
    return valuePtr;
  }
  v7 = SyncContext;
  v8 = SyncContext[1];
  if (v8)
    v9 = (const __CFArray *)CFRetain(v8);
  else
    v9 = 0;
  v10 = *v7;
  dispatch_retain(*v7);
  VTable = CMBaseObjectGetVTable();
  v12 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *))(*(_QWORD *)(VTable + 16) + 8);
  if (v12)
    v12(a1, a2, inEndpointStreamAudioEngineUtil_completionCallback, v7);
  else
    inEndpointStreamAudioEngineUtil_completionCallback(VTable, -12782, (uint64_t)v7);
  if (!dispatch_semaphore_wait(v10, v5))
  {
    if (CFArrayGetCount(v9) >= 1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    if (!v9)
      goto LABEL_16;
    goto LABEL_15;
  }
  valuePtr = -15486;
  if (v9)
LABEL_15:
    CFRelease(v9);
LABEL_16:
  if (v10)
    dispatch_release(v10);
  return valuePtr;
}

_QWORD *inEndpointStreamUtil_createSyncContext()
{
  _QWORD *v0;
  CFMutableArrayRef Mutable;

  v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v0
    && (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
        (v0[1] = Mutable) != 0))
  {
    *v0 = dispatch_semaphore_create(0);
  }
  else if (FigSignalErrorAt())
  {
    free(v0);
    return 0;
  }
  return v0;
}

void inEndpointStreamAudioEngineUtil_completionCallback(uint64_t a1, int a2, uint64_t a3)
{
  CFNumberRef v4;
  const void *v5;
  int valuePtr;

  valuePtr = a2;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), v4);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)a3);
  if (*(_QWORD *)a3)
    dispatch_release(*(dispatch_object_t *)a3);
  v5 = *(const void **)(a3 + 8);
  if (v5)
    CFRelease(v5);
  free((void *)a3);
  if (v4)
    CFRelease(v4);
}

uint64_t FigEndpointStreamAudioEngineSuspendSync(uint64_t a1, uint64_t a2, int a3)
{
  dispatch_time_t v5;
  dispatch_object_t *SyncContext;
  dispatch_object_t *v7;
  dispatch_object_t v8;
  const __CFArray *v9;
  NSObject *v10;
  uint64_t VTable;
  void (*v12)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *);
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  valuePtr = 0;
  if (a3)
    v5 = dispatch_time(0, 1000000 * a3);
  else
    v5 = -1;
  SyncContext = (dispatch_object_t *)inEndpointStreamUtil_createSyncContext();
  if (!SyncContext)
  {
    FigSignalErrorAt();
    return valuePtr;
  }
  v7 = SyncContext;
  v8 = SyncContext[1];
  if (v8)
    v9 = (const __CFArray *)CFRetain(v8);
  else
    v9 = 0;
  v10 = *v7;
  dispatch_retain(*v7);
  VTable = CMBaseObjectGetVTable();
  v12 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *))(*(_QWORD *)(VTable + 16) + 16);
  if (v12)
    v12(a1, a2, inEndpointStreamAudioEngineUtil_completionCallback, v7);
  else
    inEndpointStreamAudioEngineUtil_completionCallback(VTable, -12782, (uint64_t)v7);
  if (!dispatch_semaphore_wait(v10, v5))
  {
    if (CFArrayGetCount(v9) >= 1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    if (!v9)
      goto LABEL_16;
    goto LABEL_15;
  }
  valuePtr = -15486;
  if (v9)
LABEL_15:
    CFRelease(v9);
LABEL_16:
  if (v10)
    dispatch_release(v10);
  return valuePtr;
}

uint64_t FigEndpointStreamAudioEngineSetEndpointStreamSync(uint64_t a1, uint64_t a2, int a3)
{
  dispatch_time_t v5;
  dispatch_object_t *SyncContext;
  dispatch_object_t *v7;
  dispatch_object_t v8;
  const __CFArray *v9;
  NSObject *v10;
  uint64_t VTable;
  void (*v12)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *);
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  valuePtr = 0;
  if (a3)
    v5 = dispatch_time(0, 1000000 * a3);
  else
    v5 = -1;
  SyncContext = (dispatch_object_t *)inEndpointStreamUtil_createSyncContext();
  if (!SyncContext)
  {
    FigSignalErrorAt();
    return valuePtr;
  }
  v7 = SyncContext;
  v8 = SyncContext[1];
  if (v8)
    v9 = (const __CFArray *)CFRetain(v8);
  else
    v9 = 0;
  v10 = *v7;
  dispatch_retain(*v7);
  VTable = CMBaseObjectGetVTable();
  v12 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *))(*(_QWORD *)(VTable + 16) + 24);
  if (v12)
    v12(a1, a2, inEndpointStreamAudioEngineUtil_completionCallback, v7);
  else
    inEndpointStreamAudioEngineUtil_completionCallback(VTable, -12782, (uint64_t)v7);
  if (!dispatch_semaphore_wait(v10, v5))
  {
    if (CFArrayGetCount(v9) >= 1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    if (!v9)
      goto LABEL_16;
    goto LABEL_15;
  }
  valuePtr = -15486;
  if (v9)
LABEL_15:
    CFRelease(v9);
LABEL_16:
  if (v10)
    dispatch_release(v10);
  return valuePtr;
}

uint64_t FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryInProcess(const void *a1, const void *Value, const __CFURL *a3, uint64_t a4, __CFArray **a5, _QWORD *a6, double a7)
{
  const __CFAllocator *v12;
  const __CFURL *PathComponent;
  const __CFURL *v14;
  CFTypeRef v15;
  CFTypeID v16;
  const void *v17;
  const void *v18;
  CFTypeID TypeID;
  const void *v20;
  CFTypeID v21;
  const void *v22;
  CFTypeID v23;
  CFMutableArrayRef Mutable;
  CFIndex v25;
  __CFDictionary *v26;
  double v27;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v29;
  __CFDictionary *v30;
  const __CFString *v31;
  const __CFString *v32;
  CFTypeID v33;
  double DoubleValue;
  CFTypeID v35;
  CFDictionaryRef v36;
  CFDictionaryRef v37;
  CFIndex v38;
  CFDictionaryRef v39;
  const __CFDictionary *v40;
  const __CFAllocator *v41;
  __CFArray *v42;
  CFIndex v43;
  const void *v44;
  const void *v45;
  const void *v46;
  uint64_t ChapterMetadataArtworkItem;
  CFMutableDictionaryRef v48;
  const __CFDictionary *v49;
  const __CFDictionary *v50;
  CFIndex i;
  const void *v52;
  const void *v53;
  const __CFDictionary *v54;
  const __CFDictionary *v55;
  CFTypeID v56;
  const void *v57;
  uint64_t ErrorLogEntry;
  const char *v60;
  uint64_t v61;
  const char *v62;
  __CFArray **v63;
  const __CFURL *v64;
  _QWORD *v65;
  __CFArray *theArray;
  CFIndex v67;
  __CFDictionary *theDict;
  CFIndex Count;
  CFTypeRef cf;
  CMTime time;
  double valuePtr;
  CMTime v73;
  CMTime v74;
  _QWORD v75[2];
  CFTypeRef v76;
  CFMutableDictionaryRef v77;

  v76 = 0;
  v77 = 0;
  v75[0] = a3;
  v75[1] = a4;
  if (!CFEqual(a1, CFSTR("com.apple.hls.chapters")))
    return 0;
  if (!Value)
  {
    ErrorLogEntry = createErrorLogEntry((uint64_t)v75, "chapter data contains no data");
    Mutable = 0;
    v30 = 0;
    v42 = 0;
    v14 = 0;
LABEL_97:
    v15 = 0;
    goto LABEL_65;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
  v14 = PathComponent;
  if (!PathComponent)
  {
    ErrorLogEntry = FigSignalErrorAt();
    Mutable = 0;
    v30 = 0;
    v42 = 0;
    goto LABEL_97;
  }
  v15 = FigCFHTTPCreateURLString(PathComponent);
  if (!v15)
  {
    v61 = FigSignalErrorAt();
LABEL_104:
    ErrorLogEntry = v61;
    Mutable = 0;
    v30 = 0;
    v42 = 0;
    goto LABEL_65;
  }
  v16 = CFGetTypeID(Value);
  if (v16 != CFDictionaryGetTypeID())
  {
    v61 = FigSessionDataParseJSONChapter((uint64_t)v75, (const __CFArray *)Value, v15, a5, a7);
    goto LABEL_104;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)Value, CFSTR("chapters")))
    Value = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("chapters"));
  v17 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("chapter-list"));
  if (!v17)
  {
    v62 = "Chapter array missing";
LABEL_103:
    v61 = createErrorLogEntry((uint64_t)v75, v62);
    goto LABEL_104;
  }
  v18 = v17;
  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v18))
  {
    v62 = "Chapter array is not an array";
    goto LABEL_103;
  }
  v20 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("locales"));
  if (v20)
  {
    v21 = CFArrayGetTypeID();
    if (v21 != CFGetTypeID(v20))
    {
      v62 = "locale array is not an array";
      goto LABEL_103;
    }
  }
  v63 = a5;
  cf = v15;
  v22 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("nominal-image-resolutions"));
  if (v22)
  {
    v23 = CFArrayGetTypeID();
    if (v23 != CFGetTypeID(v22))
    {
      ErrorLogEntry = createErrorLogEntry((uint64_t)v75, "image resolution array is not an array");
      Mutable = 0;
      v30 = 0;
      v42 = 0;
      goto LABEL_87;
    }
  }
  v64 = v14;
  v65 = a6;
  Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
  Count = CFArrayGetCount((CFArrayRef)v18);
  if (Count < 1)
  {
LABEL_62:
    v15 = cf;
    ErrorLogEntry = 0;
    v30 = 0;
    v42 = 0;
    if (v63)
    {
      *v63 = Mutable;
      Mutable = 0;
    }
    v14 = v64;
    a6 = v65;
    goto LABEL_65;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0.0;
  theArray = Mutable;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v18, v25);
    memset(&v74, 0, sizeof(v74));
    memset(&v73, 0, sizeof(v73));
    valuePtr = 0.0;
    if (ValueAtIndex)
      break;
    ++v25;
LABEL_61:
    if (v25 == Count)
      goto LABEL_62;
  }
  v29 = ValueAtIndex;
  v30 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v30)
  {
    ErrorLogEntry = FigSignalErrorAt();
    v42 = 0;
    v14 = v64;
    a6 = v65;
LABEL_87:
    v15 = cf;
    goto LABEL_65;
  }
  v31 = (const __CFString *)CFDictionaryGetValue(v29, CFSTR("start"));
  if (!v31)
  {
    v60 = "Missing start time for chapter metadata";
    goto LABEL_83;
  }
  v32 = v31;
  v33 = CFStringGetTypeID();
  if (v33 == CFGetTypeID(v32))
  {
    DoubleValue = CFStringGetDoubleValue(v32);
    valuePtr = DoubleValue;
  }
  else
  {
    v35 = CFNumberGetTypeID();
    if (v35 != CFGetTypeID(v32))
    {
      v60 = "illegal type for start time for chapter metadata";
      goto LABEL_83;
    }
    if (!CFNumberGetValue((CFNumberRef)v32, kCFNumberDoubleType, &valuePtr))
    {
      v60 = "illegal number for start time for chapter metadata";
      goto LABEL_83;
    }
    DoubleValue = valuePtr;
  }
  if (DoubleValue < 0.0)
  {
    v60 = "Negative start time not allowed.";
    goto LABEL_83;
  }
  CMTimeMakeWithSeconds(&v73, DoubleValue, 100000);
  time = v73;
  v36 = CMTimeCopyAsDictionary(&time, v12);
  CFDictionaryAddValue(v30, CFSTR("ChapterTime"), v36);
  if (v36)
    CFRelease(v36);
  if (v26)
  {
    if (valuePtr > v27)
    {
      CMTimeMakeWithSeconds(&v74, valuePtr - v27, 100000);
      time = v74;
      v37 = CMTimeCopyAsDictionary(&time, v12);
      CFDictionaryAddValue(v26, CFSTR("ChapterDuration"), v37);
      if (v37)
        CFRelease(v37);
      goto LABEL_32;
    }
    v60 = "Chapter starts before previous chapter";
LABEL_83:
    ErrorLogEntry = createErrorLogEntry((uint64_t)v75, v60);
    v42 = 0;
    v14 = v64;
    a6 = v65;
    v15 = cf;
    Mutable = theArray;
    goto LABEL_65;
  }
LABEL_32:
  v27 = valuePtr;
  v38 = v25 + 1;
  if (v38 != Count)
    goto LABEL_36;
  if (valuePtr >= a7)
  {
    v60 = "last chapter start time exceeds playlist duration";
    goto LABEL_83;
  }
  CMTimeMakeWithSeconds(&time, a7 - valuePtr, 1000000);
  v74 = time;
  v39 = CMTimeCopyAsDictionary(&time, v12);
  CFDictionaryAddValue(v30, CFSTR("ChapterDuration"), v39);
  if (v39)
    CFRelease(v39);
LABEL_36:
  v67 = v38;
  theDict = v30;
  v40 = (const __CFDictionary *)CFDictionaryGetValue(v29, CFSTR("titles"));
  v41 = v12;
  v42 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
  if (v42)
  {
    if (v20 && v40 && CFArrayGetCount((CFArrayRef)v20) >= 1)
    {
      v43 = 0;
      do
      {
        v44 = CFArrayGetValueAtIndex((CFArrayRef)v20, v43);
        if (v44)
        {
          v45 = v44;
          v46 = CFDictionaryGetValue(v40, v44);
          if (v46)
          {
            ChapterMetadataArtworkItem = createMetadataItem(CFSTR("title"), v46, v45, CFSTR("comn"), &v77);
            if ((_DWORD)ChapterMetadataArtworkItem)
              goto LABEL_85;
            v48 = v77;
            CFArrayAppendValue(v42, v77);
            if (v48)
            {
              CFRelease(v48);
              v77 = 0;
            }
          }
        }
        ++v43;
      }
      while (v43 < CFArrayGetCount((CFArrayRef)v20));
    }
    v49 = (const __CFDictionary *)CFDictionaryGetValue(v29, CFSTR("images"));
    if (v22)
    {
      v50 = v49;
      if (v49)
      {
        if (CFArrayGetCount((CFArrayRef)v22) >= 1)
        {
          for (i = 0; i < CFArrayGetCount((CFArrayRef)v22); ++i)
          {
            v52 = CFArrayGetValueAtIndex((CFArrayRef)v22, i);
            if (v52)
            {
              v53 = v52;
              time.value = 0;
              v54 = (const __CFDictionary *)CFDictionaryGetValue(v50, v52);
              if (!v54 || (v55 = v54, v56 = CFGetTypeID(v54), v56 != CFDictionaryGetTypeID()))
              {
                ChapterMetadataArtworkItem = createErrorLogEntry((uint64_t)v75, "images entry is not a dictionary");
                goto LABEL_85;
              }
              ChapterMetadataArtworkItem = createChapterMetadataArtworkItem((uint64_t)v75, v53, v55, cf, (__CFDictionary **)&time);
              if ((_DWORD)ChapterMetadataArtworkItem)
                goto LABEL_85;
              v57 = (const void *)time.value;
              CFArrayAppendValue(v42, (const void *)time.value);
              if (v57)
                CFRelease(v57);
            }
          }
        }
      }
    }
    v26 = theDict;
    if (CFArrayGetCount(v42) >= 1)
      CFDictionaryAddValue(theDict, CFSTR("ChapterMetadataItems"), v42);
    CFRelease(v42);
    Mutable = theArray;
    CFArrayAppendValue(theArray, theDict);
    CFRelease(theDict);
    v12 = v41;
    v25 = v67;
    goto LABEL_61;
  }
  ChapterMetadataArtworkItem = FigSignalErrorAt();
LABEL_85:
  ErrorLogEntry = ChapterMetadataArtworkItem;
  v14 = v64;
  a6 = v65;
  v15 = cf;
  Mutable = theArray;
  v30 = theDict;
LABEL_65:
  if (v77)
    CFRelease(v77);
  if (v30)
    CFRelease(v30);
  if (Mutable)
    CFRelease(Mutable);
  if (v42)
    CFRelease(v42);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (a6)
  {
    *a6 = v76;
  }
  else if (v76)
  {
    CFRelease(v76);
  }
  return ErrorLogEntry;
}

uint64_t createErrorLogEntry(uint64_t a1, const char *a2)
{
  const __CFAllocator *v3;
  CFStringRef v4;
  const void *v5;

  if (a1)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
    v5 = *(const void **)(a1 + 16);
    if (v5)
      CFRelease(v5);
    *(_QWORD *)(a1 + 16) = FigErrorLogCreateEntry(v3, 0, *(const __CFURL **)a1, 0, -16670, CFSTR("CoreMediaErrorDomain"), v4, 0, 0, 0, 4, 0, *(void **)(a1 + 8));
    if (v4)
      CFRelease(v4);
  }
  return FigSignalErrorAt();
}

uint64_t FigSessionDataParseJSONChapter(uint64_t a1, const __CFArray *cf, const void *a3, __CFArray **a4, double a5)
{
  const __CFArray *v8;
  CFTypeID v9;
  uint64_t Count;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  CFIndex v13;
  double v14;
  const void *ValueAtIndex;
  CFTypeID v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  int DoubleIfPresent;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t ErrorLogEntry;
  CFIndex v24;
  const __CFArray *Value;
  const __CFArray *v26;
  CFTypeID v27;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  const void *v31;
  CFTypeID v32;
  void *v33;
  CFTypeID v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  CFTypeID v39;
  uint64_t v40;
  CFMutableDictionaryRef v41;
  const __CFArray *v42;
  const __CFArray *v43;
  CFTypeID v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  const void *v48;
  CFTypeID TypeID;
  const void *v50;
  const void *v51;
  CFTypeID v52;
  const void *v53;
  const void *v54;
  CFTypeID v55;
  uint64_t v56;
  CFMutableDictionaryRef v57;
  const __CFArray *v58;
  const __CFArray *v59;
  CFTypeID v60;
  CFIndex v61;
  CFIndex v62;
  CFIndex v63;
  const __CFDictionary *v64;
  const __CFDictionary *v65;
  CFTypeID v66;
  const void *v67;
  const void *v68;
  CFTypeID v69;
  __CFDictionary *v70;
  const char *v71;
  const char *v72;
  __CFArray **v74;
  uint64_t v75;
  const void *v76;
  uint64_t v77;
  const __CFArray *v78;
  __CFArray *v79;
  const __CFAllocator *allocator;
  int v81;
  CFIndex v82;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;
  double v88;
  double v89;
  CFMutableDictionaryRef v90;
  CFMutableDictionaryRef v91;
  __CFDictionary *v92;

  v8 = cf;
  v91 = 0;
  v92 = 0;
  v89 = 0.0;
  v90 = 0;
  v9 = CFGetTypeID(cf);
  if (v9 != CFArrayGetTypeID())
  {
    ErrorLogEntry = createErrorLogEntry(a1, "Chapter JSON is not an array");
    goto LABEL_74;
  }
  Count = CFArrayGetCount(v8);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  v12 = Mutable;
  if (!Mutable)
  {
LABEL_100:
    v22 = FigSignalErrorAt();
LABEL_89:
    ErrorLogEntry = v22;
    goto LABEL_93;
  }
  v74 = a4;
  v75 = Count - 1;
  if (Count < 1)
  {
    ErrorLogEntry = 0;
LABEL_72:
    if (!v74)
      goto LABEL_93;
    *v74 = v12;
LABEL_74:
    v12 = 0;
    goto LABEL_93;
  }
  v81 = 0;
  v13 = 0;
  v79 = Mutable;
  v14 = 0.0;
  v76 = a3;
  v77 = Count;
  v78 = v8;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, v13);
    v88 = 0.0;
    v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID())
    {
      v71 = "chapter entry is not a dictionary";
LABEL_88:
      v22 = createErrorLogEntry(a1, v71);
      goto LABEL_89;
    }
    v17 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v17)
      goto LABEL_100;
    v18 = v17;
    v82 = v13;
    CFArraySetValueAtIndex(v12, v13, v17);
    CFRelease(v18);
    DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
    v20 = FigCFDictionaryGetDoubleIfPresent();
    if (!(DoubleIfPresent | v20))
    {
      v71 = "chapter dictionary must have start time or duration";
      goto LABEL_88;
    }
    v21 = v20;
    if (DoubleIfPresent && v89 < 0.0)
    {
      v71 = "chapter start time must be positive";
      goto LABEL_88;
    }
    if (v20 && v88 < 0.0)
    {
      v71 = "chapter duration must be positive";
      goto LABEL_88;
    }
    CMTimeMakeWithSeconds(&v87, v89, 100000);
    v22 = FigCFDictionarySetCMTime();
    if ((_DWORD)v22)
      goto LABEL_89;
    if (v81)
    {
      if (!DoubleIfPresent)
      {
        v71 = "cannot determine chapter duration.  chapter has just duration, but previous chapter has just start time";
        goto LABEL_88;
      }
      CFArrayGetValueAtIndex(v12, v82 - 1);
      CMTimeMakeWithSeconds(&v86, v89 - v14, 100000);
      v22 = FigCFDictionarySetCMTime();
      if ((_DWORD)v22)
        goto LABEL_89;
    }
    if (v21)
    {
      CMTimeMakeWithSeconds(&v85, v88, 100000);
      ErrorLogEntry = FigCFDictionarySetCMTime();
      v24 = v82;
      if ((_DWORD)ErrorLogEntry)
        goto LABEL_93;
      v81 = 0;
      v14 = v89;
      v89 = v89 + v88;
    }
    else
    {
      v24 = v82;
      if (v82 == v75)
      {
        if (v89 >= a5)
        {
          v71 = "chapter start time is at or after the end of presentation";
          goto LABEL_88;
        }
        CMTimeMakeWithSeconds(&v84, a5 - v89, 100000);
        ErrorLogEntry = FigCFDictionarySetCMTime();
      }
      else
      {
        ErrorLogEntry = 0;
        v81 = 1;
      }
      v14 = v89;
    }
    Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("metadata"));
    if (Value)
    {
      v26 = Value;
      v27 = CFGetTypeID(Value);
      if (v27 != CFArrayGetTypeID())
      {
        v72 = "metadata is not an array";
        goto LABEL_91;
      }
      v28 = CFArrayGetCount(v26);
      if (v28 >= 1)
        break;
    }
LABEL_39:
    v42 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("titles"));
    if (v42)
    {
      v43 = v42;
      v44 = CFGetTypeID(v42);
      if (v44 != CFArrayGetTypeID())
      {
        v72 = "titles is not an array";
LABEL_91:
        v56 = createErrorLogEntry(a1, v72);
LABEL_92:
        ErrorLogEntry = v56;
        v12 = v79;
        goto LABEL_93;
      }
      v45 = CFArrayGetCount(v43);
      if (v45 >= 1)
      {
        v46 = v45;
        v47 = 0;
        while (1)
        {
          v48 = CFArrayGetValueAtIndex(v43, v47);
          TypeID = CFDictionaryGetTypeID();
          if (TypeID != CFGetTypeID(v48))
          {
            v72 = "titles entry is not a dictionary";
            goto LABEL_91;
          }
          v50 = CFDictionaryGetValue((CFDictionaryRef)v48, CFSTR("language"));
          if (!v50)
          {
            v72 = "Missing language in titles entry";
            goto LABEL_91;
          }
          v51 = v50;
          v52 = CFGetTypeID(v50);
          if (v52 != CFStringGetTypeID())
          {
            v72 = "title entry language is not a string";
            goto LABEL_91;
          }
          v53 = CFDictionaryGetValue((CFDictionaryRef)v48, CFSTR("title"));
          if (!v53)
          {
            v72 = "Missing title value in titles entry";
            goto LABEL_91;
          }
          v54 = v53;
          v55 = CFGetTypeID(v53);
          if (v55 != CFStringGetTypeID())
            break;
          v56 = createMetadataItem(CFSTR("title"), v54, v51, CFSTR("comn"), &v91);
          if ((_DWORD)v56)
            goto LABEL_92;
          v57 = v91;
          v56 = sdpp_AddMetadataItemToChapterDictionary(v18, v91);
          if ((_DWORD)v56)
            goto LABEL_92;
          if (v57)
          {
            CFRelease(v57);
            v91 = 0;
          }
          if (v46 == ++v47)
          {
            ErrorLogEntry = 0;
            a3 = v76;
            v24 = v82;
            goto LABEL_54;
          }
        }
        v72 = "title value is not a string";
        goto LABEL_91;
      }
    }
LABEL_54:
    v58 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("images"));
    if (v58)
    {
      v59 = v58;
      v60 = CFGetTypeID(v58);
      v12 = v79;
      if (v60 != CFArrayGetTypeID())
      {
        v71 = "images is not an array";
        goto LABEL_88;
      }
      v61 = CFArrayGetCount(v59);
      if (v61 >= 1)
      {
        v62 = v61;
        v63 = 0;
        while (1)
        {
          v64 = (const __CFDictionary *)CFArrayGetValueAtIndex(v59, v63);
          if (!v64 || (v65 = v64, v66 = CFGetTypeID(v64), v66 != CFDictionaryGetTypeID()))
          {
            v71 = "images entry is not a dictionary";
            goto LABEL_88;
          }
          v67 = CFDictionaryGetValue(v65, CFSTR("image-category"));
          if (!v67)
          {
            v71 = "Missing image-category in images entry";
            goto LABEL_88;
          }
          v68 = v67;
          v69 = CFGetTypeID(v67);
          if (v69 != CFStringGetTypeID())
            break;
          v22 = createChapterMetadataArtworkItem(a1, v68, v65, a3, &v92);
          if ((_DWORD)v22)
            goto LABEL_89;
          v70 = v92;
          v22 = sdpp_AddMetadataItemToChapterDictionary(v18, v92);
          if ((_DWORD)v22)
            goto LABEL_89;
          if (v70)
          {
            CFRelease(v70);
            v92 = 0;
          }
          if (v62 == ++v63)
          {
            ErrorLogEntry = 0;
            v24 = v82;
            goto LABEL_69;
          }
        }
        v71 = "image-category is not a string";
        goto LABEL_88;
      }
    }
    else
    {
      v12 = v79;
    }
LABEL_69:
    v13 = v24 + 1;
    v8 = v78;
    if (v13 == v77)
      goto LABEL_72;
  }
  v29 = v28;
  v30 = 0;
  while (1)
  {
    v31 = CFArrayGetValueAtIndex(v26, v30);
    v32 = CFGetTypeID(v31);
    if (v32 != CFDictionaryGetTypeID())
    {
      v72 = "metadata-list array element is not a dictionary";
      goto LABEL_91;
    }
    v33 = (void *)CFDictionaryGetValue((CFDictionaryRef)v31, CFSTR("key"));
    v34 = CFGetTypeID(v33);
    if (v34 != CFStringGetTypeID())
    {
      v72 = "metadata-list key is not a string";
      goto LABEL_91;
    }
    v35 = CFDictionaryGetValue((CFDictionaryRef)v31, CFSTR("value"));
    if (!v35)
    {
      v72 = "metadata list entry does not have a value";
      goto LABEL_91;
    }
    v36 = v35;
    v37 = CFDictionaryGetValue((CFDictionaryRef)v31, CFSTR("language"));
    v38 = v37;
    if (v37)
    {
      v39 = CFGetTypeID(v37);
      if (v39 != CFStringGetTypeID())
      {
        v72 = "metadata-list language is not a string";
        goto LABEL_91;
      }
    }
    v40 = createMetadataItem(v33, v36, v38, CFSTR("mdta"), &v90);
    v41 = v90;
    if ((_DWORD)v40)
      break;
    v40 = sdpp_AddMetadataItemToChapterDictionary(v18, v90);
    if ((_DWORD)v40)
      break;
    if (v41)
    {
      CFRelease(v41);
      v90 = 0;
    }
    if (v29 == ++v30)
    {
      ErrorLogEntry = 0;
      a3 = v76;
      v24 = v82;
      goto LABEL_39;
    }
  }
  ErrorLogEntry = v40;
  v12 = v79;
  if (v41)
    CFRelease(v41);
LABEL_93:
  if (v91)
    CFRelease(v91);
  if (v92)
    CFRelease(v92);
  if (v12)
    CFRelease(v12);
  return ErrorLogEntry;
}

uint64_t createMetadataItem(void *value, const void *a2, const void *a3, const void *a4, CFMutableDictionaryRef *a5)
{
  __CFDictionary *Mutable;

  Mutable = *a5;
  if (!*a5)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *a5 = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFDictionaryAddValue(Mutable, CFSTR("key"), value);
  CFDictionaryAddValue(*a5, CFSTR("keyspace"), a4);
  if (a3)
    CFDictionaryAddValue(*a5, CFSTR("extendedLanguageTag"), a3);
  if (a2)
    CFDictionaryAddValue(*a5, CFSTR("value"), a2);
  return 0;
}

uint64_t createChapterMetadataArtworkItem(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, __CFDictionary **a5)
{
  uint64_t v10;
  __CFDictionary *v11;
  BOOL v12;
  const void *Value;
  const void *v14;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  uint64_t v24;
  const char *v26;
  uint64_t ErrorLogEntry;
  const char *v28;
  CFMutableDictionaryRef v29;

  v29 = 0;
  v10 = createMetadataItem(CFSTR("artwork"), 0, 0, CFSTR("comn"), &v29);
  v11 = v29;
  if ((_DWORD)v10)
    v12 = 1;
  else
    v12 = v29 == 0;
  if (v12)
  {
    v24 = v10;
    v17 = v29;
    if (!v29)
      return v24;
    goto LABEL_17;
  }
  Value = CFDictionaryGetValue(a3, CFSTR("url"));
  if (!Value)
  {
    v26 = "missing chapter artwork url";
LABEL_23:
    ErrorLogEntry = createErrorLogEntry(a1, v26);
LABEL_25:
    v24 = ErrorLogEntry;
    v17 = v11;
    goto LABEL_17;
  }
  v14 = Value;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v14))
  {
    v26 = "Chapter artwork URL is not a string";
    goto LABEL_23;
  }
  CFDictionaryAddValue(v11, CFSTR("URL"), v14);
  if (a4)
    CFDictionaryAddValue(v11, CFSTR("baseURL"), a4);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    ErrorLogEntry = FigSignalErrorAt();
    goto LABEL_25;
  }
  v17 = Mutable;
  CFDictionaryAddValue(Mutable, CFSTR("resolutionKey"), a2);
  v18 = CFDictionaryGetValue(a3, CFSTR("pixel-height"));
  if (v18)
  {
    v19 = v18;
    v20 = CFNumberGetTypeID();
    if (v20 != CFGetTypeID(v19))
    {
      v28 = "image height is not a number";
      goto LABEL_28;
    }
    CFDictionaryAddValue(v17, CFSTR("pixelHeight"), v19);
  }
  v21 = CFDictionaryGetValue(a3, CFSTR("pixel-width"));
  if (v21)
  {
    v22 = v21;
    v23 = CFNumberGetTypeID();
    if (v23 == CFGetTypeID(v22))
    {
      CFDictionaryAddValue(v17, CFSTR("pixelWidth"), v22);
      goto LABEL_16;
    }
    v28 = "image width is not a number";
LABEL_28:
    v24 = createErrorLogEntry(a1, v28);
    CFRelease(v11);
    goto LABEL_17;
  }
LABEL_16:
  CFDictionaryAddValue(v11, CFSTR("iTunesImageResolution"), v17);
  v24 = 0;
  *a5 = v11;
LABEL_17:
  CFRelease(v17);
  return v24;
}

uint64_t FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntry(const void *a1, const void *a2, const __CFURL *a3, uint64_t a4, __CFArray **a5, _QWORD *a6, double a7)
{
  if (_os_feature_enabled_impl())
    return FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryRemote(a7);
  else
    return FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryInProcess(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t FigHLSSessionDataCopyMetadataEntryInProcess(void *a1, const void *a2, const void *a3, CFURLRef url, CFMutableDictionaryRef *a5)
{
  const __CFURL *PathComponent;
  const __CFURL *v10;
  CFStringRef v11;
  uint64_t v12;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef theDict;

  theDict = 0;
  if (url)
  {
    PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], url);
    if (!PathComponent)
      return FigSignalErrorAt();
    v10 = PathComponent;
    v11 = CFURLGetString(PathComponent);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = createMetadataItem(a1, a2, a3, CFSTR("mdta"), &theDict);
  if ((_DWORD)v12)
  {
    if (theDict)
      CFRelease(theDict);
  }
  else
  {
    v13 = theDict;
    if (v11)
      CFDictionarySetValue(theDict, CFSTR("baseURL"), v11);
    *a5 = v13;
  }
  if (v10)
    CFRelease(v10);
  return v12;
}

uint64_t FigHLSSessionDataCopyMetadataEntry(void *a1, const void *a2, const void *a3, const __CFURL *a4, CFMutableDictionaryRef *a5)
{
  if (_os_feature_enabled_impl())
    return FigHLSSessionDataCopyMetadataEntryRemote();
  else
    return FigHLSSessionDataCopyMetadataEntryInProcess(a1, a2, a3, a4, a5);
}

uint64_t sdpp_AddMetadataItemToChapterDictionary(const __CFDictionary *a1, const void *a2)
{
  __CFArray *Value;
  CFMutableArrayRef Mutable;
  __CFArray *v6;

  Value = (__CFArray *)CFDictionaryGetValue(a1, CFSTR("ChapterMetadataItems"));
  if (Value)
  {
    CFArrayAppendValue(Value, a2);
    return 0;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetValue(a1, CFSTR("ChapterMetadataItems"), Mutable);
    CFArrayAppendValue(v6, a2);
    CFRelease(v6);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigNeroidGetClassID()
{
  if (FigNeroidGetClassID_sRegisterFigNeroidTypeOnce != -1)
    dispatch_once(&FigNeroidGetClassID_sRegisterFigNeroidTypeOnce, &__block_literal_global_52);
  return FigNeroidGetClassID_sFigNeroidClassID;
}

CFStringRef neroid_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigNeroid %p>"), a1);
}

uint64_t FigNeroidGetTypeID()
{
  if (FigNeroidGetClassID_sRegisterFigNeroidTypeOnce != -1)
    dispatch_once(&FigNeroidGetClassID_sRegisterFigNeroidTypeOnce, &__block_literal_global_52);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigDCP_FindAtomData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (!(a4 | a5))
    return FigSignalErrorAt();
  result = FigAtomStreamInitWithByteStream();
  if (!(_DWORD)result)
  {
    while (1)
    {
      result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if ((_DWORD)result)
        return result;
      if (!a3)
        break;
      LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == -12890)
          return 0;
        else
          return result;
      }
    }
    if (a4)
    {
      result = FigAtomStreamGetCurrentAtomDataGlobalOffset();
      if (!a5 || (_DWORD)result)
        return result;
    }
    else if (!a5)
    {
      return 0;
    }
    result = 0;
    *(_QWORD *)a5 = 0;
  }
  return result;
}

uint64_t FigDCP_CopyAtomDataFromCacheFile(uint64_t a1, uint64_t a2, int a3, __CFData **a4)
{
  uint64_t AtomData;
  __CFData *Mutable;
  __CFData *v8;
  CFIndex v9;
  uint64_t v10;
  UInt8 *MutableBytePtr;
  uint64_t (*v12)(uint64_t, CFIndex, uint64_t, UInt8 *, _QWORD);
  uint64_t v13;
  CFIndex capacity;
  uint64_t v16;

  capacity = 0;
  v16 = 0;
  AtomData = FigDCP_FindAtomData(a1, a2, a3, (uint64_t)&v16, (unint64_t)&capacity);
  if ((_DWORD)AtomData)
    return AtomData;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  CFDataSetLength(Mutable, capacity);
  v9 = capacity;
  v10 = v16;
  MutableBytePtr = CFDataGetMutableBytePtr(v8);
  v12 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, UInt8 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
  if (!v12)
  {
    v13 = 4294954514;
    goto LABEL_7;
  }
  v13 = v12(a1, v9, v10, MutableBytePtr, 0);
  if ((_DWORD)v13)
  {
LABEL_7:
    CFRelease(v8);
    return v13;
  }
  *a4 = v8;
  return v13;
}

uint64_t FigDCP_CopyIDFromCacheFile(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  CFDataRef v5;
  CFPropertyListRef v6;
  uint64_t v7;
  CFDataRef data;

  data = 0;
  v4 = FigDCP_CopyAtomDataFromCacheFile(a1, a2, 1937008996, &data);
  if ((_DWORD)v4)
    return v4;
  v5 = data;
  v6 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], data, 0, 0, 0);
  *a3 = v6;
  if (v6)
  {
    v7 = 0;
    if (!v5)
      return v7;
    goto LABEL_6;
  }
  v7 = FigSignalErrorAt();
  if (v5)
LABEL_6:
    CFRelease(v5);
  return v7;
}

uint64_t FigDCP_GetCacheFileVersion(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD);
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8 = 0;
  result = FigDCP_FindAtomData(a1, a2, 1986359930, (uint64_t)&v10, (unint64_t)&v9);
  if (!(_DWORD)result)
  {
    if (v9 == 4)
    {
      v6 = v10;
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
      if (v7)
      {
        result = v7(a1, 4, v6, &v8, 0);
        if (a3)
        {
          if (!(_DWORD)result)
            *a3 = bswap32(v8);
        }
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigDCP_TruncateFile(uint64_t a1, off_t a2)
{
  int DarwinFileDesc;
  uint64_t result;

  DarwinFileDesc = FigFileGetDarwinFileDesc();
  result = ftruncate(DarwinFileDesc, a2);
  if ((_DWORD)result)
  {
    __error();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigLimitedDiskCacheProviderCreate(uint64_t a1, const void *a2, const void *a3, int a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  const __CFURL *v11;
  CFStringRef v12;

  if (!a2 || !a5)
    return FigSignalErrorAt();
  *a5 = 0;
  FigDiskCacheProviderGetClassID();
  v9 = CMDerivedObjectCreate();
  if (!(_DWORD)v9)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[7] = 0x100000;
    *DerivedStorage = CFRetain(a2);
    if (a3)
    {
      v11 = (const __CFURL *)CFRetain(a3);
      DerivedStorage[2] = v11;
      if (v11)
      {
        v12 = CFURLGetString(v11);
        DerivedStorage[1] = CFRetain(v12);
      }
    }
    else
    {
      DerivedStorage[2] = 0;
    }
    DerivedStorage[9] = 0x200000000002;
    if (!a4)
      FigDCP_InitializeDiskCache();
    v9 = 0;
    *a5 = 0;
  }
  return v9;
}

uint64_t FigDCP_InitializeDiskCache()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t CacheFileVersion;
  int v10;
  int v11;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD);
  const void *v20;
  CFTypeRef v21;
  int64_t v22;
  CFTypeRef cf;
  CFTypeRef v24;
  _BYTE v25[8192];
  uint64_t v26;

  v0 = MEMORY[0x1E0C80A78]();
  v26 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v24 = 0;
  v2 = (_QWORD *)(v0 + 40);
  if (*(_QWORD *)(v0 + 40))
  {
LABEL_67:
    CacheFileVersion = 0;
    goto LABEL_36;
  }
  v3 = v1;
  v4 = v0;
  *(_BYTE *)(v0 + 90) = 1;
  v5 = FigShared_CopyDiskCacheParams(*(const __CFString **)(v0 + 8), 0, 0, 0, 0, &v24);
  if ((_DWORD)v5)
    goto LABEL_68;
  v7 = (CFTypeRef *)(v4 + 32);
  v6 = *(const void **)(v4 + 32);
  if (v6)
  {
    CFRelease(v6);
    *v7 = 0;
  }
  v8 = FigShared_CheckOutOfDiskCache(*(const __CFString **)(v4 + 8), *(const void **)v4, (CFTypeRef *)(v4 + 32), &cf);
  CacheFileVersion = v8;
  if (v3 || !(_DWORD)v8)
  {
    if ((_DWORD)v8)
      goto LABEL_25;
    CacheFileVersion = FigFileForkOpenMainByCFURL();
    if ((_DWORD)CacheFileVersion)
      goto LABEL_25;
    CacheFileVersion = FigByteStreamCreateFromOpenFile();
    if ((_DWORD)CacheFileVersion)
      goto LABEL_25;
    CacheFileVersion = FigDCP_GetCacheFileVersion(*(_QWORD *)(v4 + 48), 0, (_DWORD *)(v4 + 72));
    if ((_DWORD)CacheFileVersion)
      goto LABEL_25;
    v10 = *(_DWORD *)(v4 + 72);
    if (v10 == 1)
    {
      v11 = 4096;
    }
    else
    {
      if (v10 != 2)
      {
        CacheFileVersion = FigSignalErrorAt();
        if ((_DWORD)CacheFileVersion)
          goto LABEL_25;
        goto LABEL_16;
      }
      v11 = 0x2000;
    }
    *(_DWORD *)(v4 + 76) = v11;
LABEL_16:
    CacheFileVersion = FigDCP_CopyIDFromCacheFile(*(_QWORD *)(v4 + 48), 0, (_QWORD *)(v4 + 64));
    if (!(_DWORD)CacheFileVersion)
    {
      CacheFileVersion = FigDCP_FindAtomData(*(_QWORD *)(v4 + 48), 0, 1937007475, 0, v4 + 24);
      if (!(_DWORD)CacheFileVersion)
      {
        v12 = *(const void **)v4;
        v13 = cf;
        *(_QWORD *)v4 = cf;
        if (v13)
          CFRetain(v13);
        if (v12)
          CFRelease(v12);
        if (!cf)
        {
          CacheFileVersion = 0;
          goto LABEL_35;
        }
        CFRelease(cf);
        CacheFileVersion = 0;
LABEL_34:
        cf = 0;
LABEL_35:
        if (*(_QWORD *)(v4 + 64))
          goto LABEL_36;
        bzero(v25, 0x2000uLL);
        *(_QWORD *)(v4 + 72) = 0x200000000002;
        if (*(_QWORD *)(v4 + 40))
        {
          if (*(_QWORD *)(v4 + 48))
          {
            CFRelease(*(CFTypeRef *)(v4 + 48));
            *(_QWORD *)(v4 + 48) = 0;
          }
          FigFileForkClose();
          *v2 = 0;
        }
LABEL_43:
        if (*v7)
        {
          CFRelease(*v7);
          *v7 = 0;
        }
        CacheFileVersion = FigDCP_NewDiskCacheFile((const __CFURL *)v24, *(unsigned __int8 *)(v4 + 90), (CFURLRef *)(v4 + 32));
        while ((_DWORD)CacheFileVersion)
        {
          if ((_DWORD)CacheFileVersion != 69 && (_DWORD)CacheFileVersion != 28)
            goto LABEL_36;
          v22 = 0;
          if (FigShared_MakeRoomInDiskCache(*(const __CFString **)(v4 + 8), 0, &v22))
            v16 = 1;
          else
            v16 = v22 < 1;
          if (!v16)
            goto LABEL_43;
          if (!v22)
            goto LABEL_36;
        }
        v5 = FigByteStreamCreateFromOpenFile();
        if (!(_DWORD)v5)
        {
          v17 = *(_QWORD *)(v4 + 48);
          v18 = *(int *)(v4 + 76);
          v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 16);
          if (!v19)
          {
            CacheFileVersion = 4294954514;
            goto LABEL_36;
          }
          v5 = v19(v17, v18, 0, v25, 0);
          if (!(_DWORD)v5)
          {
            v5 = FigShared_CheckIntoAndOutOfDiskCache(*(const __CFString **)(v4 + 8), *(const __CFString **)v4, *(const void **)(v4 + 32), &cf);
            if (!(_DWORD)v5)
            {
              v20 = *(const void **)v4;
              v21 = cf;
              *(_QWORD *)v4 = cf;
              if (v21)
                CFRetain(v21);
              if (v20)
                CFRelease(v20);
              if (cf)
              {
                CFRelease(cf);
                CacheFileVersion = 0;
                cf = 0;
                goto LABEL_36;
              }
              goto LABEL_67;
            }
          }
        }
LABEL_68:
        CacheFileVersion = v5;
        goto LABEL_36;
      }
    }
LABEL_25:
    if (*v7 && cf)
      FigShared_CheckIntoDiskCache(*(const __CFString **)(v4 + 8), (const __CFString *)cf, *v7);
    v14 = *(const void **)(v4 + 64);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v4 + 64) = 0;
    }
    if (*v7)
    {
      CFRelease(*v7);
      *v7 = 0;
    }
    if (!cf)
      goto LABEL_35;
    CFRelease(cf);
    goto LABEL_34;
  }
LABEL_36:
  if (v24)
    CFRelease(v24);
  return CacheFileVersion;
}

uint64_t FigLimitedDiskCacheProvider_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 88))
    return 0;
  v2 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 88) = 1;
  if (!*(_QWORD *)(DerivedStorage + 40))
    return 0;
  if (*(_BYTE *)(DerivedStorage + 91))
  {
    FigFileForkClose();
    *(_QWORD *)(v2 + 40) = 0;
    FigFileDeleteFile();
    return FigShared_DeleteFromDiskCache(*(const __CFString **)(v2 + 8), *(const __CFString **)v2);
  }
  else
  {
    v3 = FigShared_CheckIntoDiskCache(*(const __CFString **)(DerivedStorage + 8), *(const __CFString **)DerivedStorage, *(const void **)(DerivedStorage + 32));
    FigFileForkClose();
    *(_QWORD *)(v2 + 40) = 0;
    return v3;
  }
}

void FigLimitedDiskCacheProvider_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v5 = *(const void **)(DerivedStorage + 8);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
}

__CFString *FigLimitedDiskCacheProvider_CopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  const char *v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 88))
    v2 = "No";
  else
    v2 = "Yes";
  CFStringAppendFormat(Mutable, 0, CFSTR("FigLimitedDiskCacheProvider <%p>\n\tValid: <%s>\n\tcacheFileKey: <%@>\n\tcacheFolder: <%@>\n\tcacheFileURL: <%@>"), DerivedStorage, v2, *(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 8), *(_QWORD *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t FigLimitedDiskCacheProvider_CopyProperty(const void *a1, const void *a2, uint64_t a3, __CFData **a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  __CFData *v10;
  int64_t *v11;
  int v12;
  int v13;
  const __CFAllocator *v14;
  CFNumberType v15;
  int64_t *v16;
  __CFData *v17;
  uint64_t result;
  int v19;
  int64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("CacheIdentifier")))
  {
    CFGetAllocator(a1);
    FigDCP_InitializeDiskCache();
    v9 = *(const void **)(v8 + 64);
    if (v9)
    {
      v10 = (__CFData *)CFRetain(v9);
LABEL_13:
      v17 = v10;
      result = 0;
      *a4 = v17;
      return result;
    }
    return 4294954513;
  }
  if (CFEqual(a2, CFSTR("CacheBlockSize")))
  {
    v12 = *(_DWORD *)(v8 + 80);
    v11 = (int64_t *)(v8 + 80);
    if (!v12)
      return 4294954513;
LABEL_11:
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = kCFNumberSInt32Type;
    v16 = v11;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("CacheMapEntrySize")))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v11 = (int64_t *)(v8 + 84);
    if (!v13)
      return 4294954513;
    goto LABEL_11;
  }
  if (!CFEqual(a2, CFSTR("CacheMap")))
  {
    if (!CFEqual(a2, CFSTR("CacheSize")))
      return 4294954512;
    v20 = 0;
    if (FigDCP_GetCacheSizeLimit(v8, &v20))
      return 4294954513;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = &v20;
    v15 = kCFNumberSInt64Type;
LABEL_12:
    v10 = CFNumberCreate(v14, v15, v16);
    goto LABEL_13;
  }
  CFGetAllocator(a1);
  v19 = FigDCP_InitializeDiskCache();
  if (!v19)
    v19 = FigDCP_CopyAtomDataFromCacheFile(*(_QWORD *)(v8 + 48), 0, 1937011572, a4);
  if (v19)
    return 4294954513;
  else
    return 0;
}

uint64_t FigLimitedDiskCacheProvider_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t result;
  const void *v9;
  CFTypeRef v10;
  uint64_t v11;
  CFTypeID v12;
  unsigned int v13;
  uint64_t v14;
  const __CFAllocator *v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t (*v19)(CFTypeRef, uint64_t, _QWORD, uint64_t *, _QWORD);
  CFTypeRef v20;
  uint64_t v21;
  uint64_t (*v22)(CFTypeRef, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v23;
  uint64_t *v24;
  CFTypeRef v25;
  uint64_t v26;
  CFTypeID v27;
  void *v28;
  CFTypeID v29;
  CFTypeRef v30;
  uint64_t v31;
  int Code;
  CFDataRef v33;
  CFStringRef v34;
  CFTypeRef v35;
  const UInt8 *BytePtr;
  int v37;
  CFTypeRef v38;
  const UInt8 *v39;
  CFTypeID v40;
  Boolean Value;
  CFErrorRef err;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 88))
    return FigSignalErrorAt();
  if (!CFEqual(a2, CFSTR("CacheIdentifier")))
  {
    if (!CFEqual(a2, CFSTR("CacheMap")))
    {
      if (CFEqual(a2, CFSTR("CacheBlockSize")))
      {
        if (!a3)
          return FigSignalErrorAt();
        v27 = CFGetTypeID(a3);
        if (v27 != CFNumberGetTypeID())
          return FigSignalErrorAt();
        v28 = (void *)(v7 + 80);
      }
      else
      {
        if (!CFEqual(a2, CFSTR("CacheMapEntrySize")))
        {
          if (CFEqual(a2, CFSTR("CacheSize")))
            return 4294954509;
          if (!CFEqual(a2, CFSTR("NoPersistentCache")))
            return 4294954512;
          if (a3)
          {
            v40 = CFGetTypeID(a3);
            if (v40 == CFBooleanGetTypeID())
            {
              Value = CFBooleanGetValue((CFBooleanRef)a3);
              result = 0;
              *(_BYTE *)(v7 + 91) = Value;
              return result;
            }
          }
          return FigSignalErrorAt();
        }
        if (!a3)
          return FigSignalErrorAt();
        v29 = CFGetTypeID(a3);
        if (v29 != CFNumberGetTypeID())
          return FigSignalErrorAt();
        v28 = (void *)(v7 + 84);
      }
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v28);
      return 0;
    }
    CFGetAllocator(a1);
    result = FigDCP_InitializeDiskCache();
    if ((_DWORD)result)
      return result;
    v11 = *(_QWORD *)(v7 + 40);
    if (!v11)
      return FigSignalErrorAt();
    if (!a3)
    {
LABEL_60:
      result = FigDCP_TruncateFile(v11, 0);
      *(_QWORD *)(v7 + 24) = 0;
      return result;
    }
    v12 = CFGetTypeID(a3);
    if (v12 != CFDataGetTypeID())
      return FigSignalErrorAt();
    v46 = 0;
    cf = 0;
    v13 = bswap32(*(_DWORD *)(v7 + 72));
    v44 = 0;
    v45 = 0;
    v43 = v13;
    v14 = *(_QWORD *)(v7 + 24);
    err = 0;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = FigByteStreamCreateFromOpenFile();
    if (v16)
      goto LABEL_69;
    v17 = v14 - 4294967288;
    if (v17 >= 0xFFFFFFFF00000000)
      v18 = -8;
    else
      v18 = -16;
    v46 = bswap32(*(_DWORD *)(v7 + 76) + v18) | 0x6965726600000000;
    v19 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
    if (v19)
    {
      v16 = v19(cf, 8, 0, &v46, 0);
      if (v16)
        goto LABEL_69;
      if (v17 > 0xFFFFFFFEFFFFFFFFLL)
      {
        v46 = bswap32(*(_DWORD *)(v7 + 24) + 8) | 0x7363747300000000;
        v30 = cf;
        v31 = *(int *)(v7 + 76);
        v22 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 16);
        if (v22)
        {
          v23 = v31 - 8;
          v24 = &v46;
          v25 = v30;
          v26 = 8;
LABEL_38:
          Code = v22(v25, v26, v23, v24, 0);
          if (Code)
            goto LABEL_54;
          v16 = FigDCP_TruncateFile(*(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 24) + *(int *)(v7 + 76));
          if (!v16)
          {
            v33 = CFPropertyListCreateData(v15, *(CFPropertyListRef *)(v7 + 64), kCFPropertyListXMLFormat_v1_0, 0, &err);
            if (err)
            {
              v34 = CFErrorCopyFailureReason(err);
              Code = CFErrorGetCode(err);
              if (v34)
                CFRelease(v34);
              if (!v33)
              {
LABEL_54:
                if (cf)
                  CFRelease(cf);
                if (err)
                  CFRelease(err);
                if (Code)
                {
                  v11 = *(_QWORD *)(v7 + 40);
                  goto LABEL_60;
                }
                return 0;
              }
LABEL_53:
              CFRelease(v33);
              goto LABEL_54;
            }
            if (v33)
            {
              HIDWORD(v46) = 1684632691;
              LODWORD(v46) = CFDataGetLength(v33) + 8;
              v35 = cf;
              BytePtr = CFDataGetBytePtr(v33);
              v37 = FigDCP_WriteAtomToFile((uint64_t)v35, &v46, (uint64_t)BytePtr);
              if (!v37)
              {
                HIDWORD(v46) = 1953723507;
                LODWORD(v46) = CFDataGetLength((CFDataRef)a3) + 8;
                v38 = cf;
                v39 = CFDataGetBytePtr((CFDataRef)a3);
                v37 = FigDCP_WriteAtomToFile((uint64_t)v38, &v46, (uint64_t)v39);
                if (!v37)
                {
                  v46 = 0x7A7265760000000CLL;
                  v37 = FigDCP_WriteAtomToFile((uint64_t)cf, &v46, (uint64_t)&v43);
                }
              }
              Code = v37;
              goto LABEL_53;
            }
            v16 = FigSignalErrorAt();
          }
LABEL_69:
          Code = v16;
          goto LABEL_54;
        }
      }
      else
      {
        v44 = 0x7363747301000000;
        v45 = bswap64(*(_QWORD *)(v7 + 24) + 16);
        v20 = cf;
        v21 = *(int *)(v7 + 76);
        v22 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 16);
        if (v22)
        {
          v23 = v21 - 16;
          v24 = &v44;
          v25 = v20;
          v26 = 16;
          goto LABEL_38;
        }
      }
    }
    Code = -12782;
    goto LABEL_54;
  }
  CFGetAllocator(a1);
  result = FigDCP_InitializeDiskCache();
  if ((_DWORD)result)
    return result;
  if (!*(_QWORD *)(v7 + 40))
    return FigSignalErrorAt();
  v9 = *(const void **)(v7 + 64);
  if (v9)
    CFRelease(v9);
  if (a3)
    v10 = CFRetain(a3);
  else
    v10 = 0;
  result = 0;
  *(_QWORD *)(v7 + 64) = v10;
  return result;
}

uint64_t FigDCP_GetCacheSizeLimit(uint64_t a1, int64_t *a2)
{
  uint64_t CacheFileSize;
  uint64_t v5;
  CFArrayRef v6;
  CFIndex v7;
  const void *ValueAtIndex;
  int64_t v9;
  int64_t v10;
  CFArrayRef theArray;
  BOOL v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;

  v18 = 0;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  theArray = 0;
  if (!a2)
    return FigSignalErrorAt();
  CacheFileSize = FigShared_CopyDiskCacheParams(*(const __CFString **)(a1 + 8), &v18, &v17, &v16, &v13, 0);
  if ((_DWORD)CacheFileSize)
    return CacheFileSize;
  CacheFileSize = FigShared_GetCacheFileSize(*(const __CFString **)(a1 + 8), *(_QWORD *)a1, &v14);
  if ((_DWORD)CacheFileSize)
    return CacheFileSize;
  v5 = FigShared_CopyDiskCacheCheckedInIDs(*(const __CFString **)(a1 + 8), &theArray);
  v6 = theArray;
  if (!(_DWORD)v5)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      v7 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
        if (!FigShared_GetCacheFileSize(*(const __CFString **)(a1 + 8), (uint64_t)ValueAtIndex, &v15))
          v18 -= v15;
        ++v7;
      }
      while (v7 < CFArrayGetCount(theArray));
    }
    v9 = v18;
    if (v18 < 0)
    {
      v9 = 0;
      v18 = 0;
    }
    v5 = 0;
    v10 = ((v17 - v9) & ~((v17 - v9) >> 63)) + v14;
    if (v10 >= v16)
      v10 = v16;
    *a2 = v10;
    v6 = theArray;
  }
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t FigDCP_WriteAtomToFile(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD);
  uint64_t result;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, _DWORD *, _QWORD);
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  unsigned int v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  unint64_t v19;
  uint64_t v20;

  v20 = 0;
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 8);
  if (v6)
  {
    v7 = 0;
    while (!v6(a1, 8, v7, &v20, 0))
    {
      v8 = v20;
      v9 = bswap32(v20);
      LODWORD(v20) = v9;
      if (v8 != 0x1000000 && v9 <= 7)
        return FigSignalErrorAt();
      if (HIDWORD(v20) == 1768256102)
      {
        v11 = *a2;
        if ((_DWORD)v9 == (_DWORD)v11)
          break;
        if (v11 + 8 <= v9)
        {
          v17 = v9 - v11;
          LODWORD(v20) = bswap32(v9 - v11);
          v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 16);
          if (!v18)
            return 4294954514;
          result = v18(a1, 8, v7, &v20, 0);
          if ((_DWORD)result)
            return result;
          v7 += v17;
          break;
        }
      }
      else if (v8 == 0x1000000)
      {
        v19 = 0;
        v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
        if (!v12)
          return 4294954514;
        result = v12(a1, 8, v7 + 8, &v19, 0);
        if ((_DWORD)result)
          return result;
        v9 = bswap64(v19);
        v19 = v9;
        if (v9 <= 0xF)
          return FigSignalErrorAt();
      }
      v7 += v9;
      v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
      if (!v6)
        break;
    }
  }
  else
  {
    v7 = 0;
  }
  v14 = *a2;
  *a2 = bswap32(v14);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 16);
  if (v15)
  {
    result = v15(a1, 8, v7, a2, 0);
    if ((_DWORD)result)
      return result;
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
    if (v16)
      return v16(a1, v14 - 8, v7 + 8, a3, 0);
  }
  return 4294954514;
}

uint64_t FigLimitedDiskCacheProvider_GetBacking(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  off_t v16;
  uint64_t v17;
  off_t v18;
  off_t v19;
  unint64_t v20;
  uint64_t v21;
  off_t v22;
  int v23;
  uint64_t v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 88) || !(a4 | a5))
  {
    FigSignalErrorAt();
    return 0;
  }
  v10 = DerivedStorage;
  CFGetAllocator(a1);
  if (FigDCP_InitializeDiskCache() || !*(_QWORD *)(v10 + 40) || *(_BYTE *)(v10 + 89))
    return 0;
  v11 = *(_QWORD *)(v10 + 24) + a2;
  v12 = *(int *)(v10 + 80);
  v13 = v11 + *(int *)(v10 + 76);
  if ((_DWORD)v12)
  {
    v14 = *(int *)(v10 + 84);
    if ((_DWORD)v14)
      v13 += (v11 + v12 - 1) / v12 * v14;
  }
  if (FigShared_ReserveDiskCacheBacking(*(const __CFString **)(v10 + 8), *(const void **)v10, v13))
    return 0;
  v16 = *(_QWORD *)(v10 + 56);
  v17 = *(_QWORD *)(v10 + 24) + a2;
  v18 = v17 + *(int *)(v10 + 76);
  v19 = v16 - 0x100000;
  v20 = (v17 + *(int *)(v10 + 80) - 1) / (unint64_t)*(int *)(v10 + 80);
  do
  {
    v21 = *(int *)(v10 + 84);
    v22 = v18;
    if ((_DWORD)v21)
      v22 = v18 + v20 * v21;
    v19 += 0x100000;
  }
  while (v22 > v19);
  if (v19 > v16)
  {
    *(_QWORD *)(v10 + 56) = v19;
    v23 = FigDCP_TruncateFile(*(_QWORD *)(v10 + 40), v19);
    if (v23 == 69 || v23 == 28)
    {
      result = 0;
      *(_BYTE *)(v10 + 89) = 1;
      return result;
    }
    if (v23)
      return 0;
  }
  if (a4)
    *(_QWORD *)a4 = *(_QWORD *)(v10 + 40);
  v25 = *(_QWORD *)(v10 + 24);
  if (a5)
  {
    *(_QWORD *)a5 = v25 + *(int *)(v10 + 76);
    v25 = *(_QWORD *)(v10 + 24);
  }
  *(_QWORD *)(v10 + 24) = v25 + a2;
  return 1;
}

uint64_t FigLimitedDiskCacheProvider_GetBackingFile(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigDCP_InitializeDiskCache();
  return *(_QWORD *)(DerivedStorage + 40);
}

uint64_t FigDCP_NewDiskCacheFile(const __CFURL *a1, uint64_t a2, CFURLRef *a3)
{
  int v4;
  size_t v5;
  CFURLRef v6;
  UInt8 buffer[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    __strlcat_chk();
    v4 = mkstemp((char *)buffer);
    if (v4 == -1)
    {
      __error();
    }
    else
    {
      close(v4);
      v5 = strlen((const char *)buffer);
      v6 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], buffer, v5, 0);
      *a3 = v6;
      if (v6)
        return FigFileForkOpenMainByCFURL();
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTStyleGetStyleName(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  FigSignalErrorAt();
  return 0;
}

uint64_t FigVTTStyleCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;

  if (!a3)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = FigVTTInitializeNodeBaseStorage((CFMutableDictionaryRef *)DerivedStorage);
    if ((_DWORD)v7)
    {
      return v7;
    }
    else
    {
      if (a2)
        v8 = CFRetain(a2);
      else
        v8 = 0;
      v5 = 0;
      *(_QWORD *)(DerivedStorage + 16) = v8;
      *a3 = 0;
    }
  }
  return v5;
}

void figVTTStyle_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTStyle_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("style: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figVTTStyle_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 6;
  return 0;
}

uint64_t figVTTStyle_copyNodeDocumentSerialization(const void *a1, CFStringRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableStringRef Mutable;
  CFMutableStringRef v8;
  uint64_t v9;
  uint64_t StyleName;
  _QWORD context[2];
  uint64_t v13;
  CFDictionaryRef theDict;

  theDict = 0;
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 0;
  MEMORY[0x19402F294](&getCaptionVTTAttributeToCSSPropertyMapping_once, initCaptionVTTAttributeToCSSPropertyMapping);
  v4 = sCaptionVTTAttributeToCSSPropertyMapping;
  if (!sCaptionVTTAttributeToCSSPropertyMapping)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v5 = FigVTTNodeCopyAttributes((uint64_t)a1, &theDict);
  if ((_DWORD)v5)
  {
LABEL_15:
    v9 = v5;
    v8 = 0;
    goto LABEL_8;
  }
  v6 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v6, 0);
  v8 = Mutable;
  if (!Mutable)
    goto LABEL_16;
  context[1] = Mutable;
  v13 = 0;
  context[0] = v4;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)serializeOneAttributeToCSSProperty, context);
  v9 = (__int16)v13;
  if (!(_WORD)v13)
  {
    StyleName = FigVTTStyleGetStyleName((uint64_t)a1);
    if (StyleName)
    {
      v9 = 0;
      *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR(".%@ {\n%@}"), StyleName, v8);
      goto LABEL_8;
    }
LABEL_16:
    v9 = FigSignalErrorAt();
  }
LABEL_8:
  if (theDict)
    CFRelease(theDict);
  if (v8)
    CFRelease(v8);
  return v9;
}

void serializeOneAttributeToCSSProperty(void *key, uint64_t a2, uint64_t a3)
{
  uint64_t (*Value)(uint64_t, const __CFDictionary *);
  uint64_t (*v6)(uint64_t, const __CFDictionary *);
  const __CFDictionary *Mutable;
  int v8;
  const void *v9;
  const void *v10;
  BOOL v11;

  if (*(_WORD *)(a3 + 16) || !*(_QWORD *)a3)
    return;
  Value = (uint64_t (*)(uint64_t, const __CFDictionary *))CFDictionaryGetValue(*(CFDictionaryRef *)a3, key);
  if (!Value)
  {
    Mutable = 0;
    goto LABEL_14;
  }
  v6 = Value;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  if (!Mutable)
    goto LABEL_14;
  v8 = v6(a2, Mutable);
  if (!v8)
  {
    v9 = CFDictionaryGetValue(Mutable, CFSTR("name"));
    v10 = CFDictionaryGetValue(Mutable, CFSTR("value"));
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      CFStringAppendFormat(*(CFMutableStringRef *)(a3 + 8), 0, CFSTR("%@:%@;\n"), v9, v10);
LABEL_11:
      CFRelease(Mutable);
      return;
    }
LABEL_14:
    v8 = FigSignalErrorAt();
    if (!v8)
      goto LABEL_16;
  }
  *(_WORD *)(a3 + 16) = v8;
LABEL_16:
  if (Mutable)
    goto LABEL_11;
}

void initCaptionVTTAttributeToCSSPropertyMapping()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ background-color"), FigVTTDocumentWriterMapAttributeToCSS_BackgroundColor);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ writing-mode"), FigVTTDocumentWriterMapAttributeToCSS_WritingMode);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ color"), FigVTTDocumentWriterMapAttributeToCSS_TextColor);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-weight"), FigVTTDocumentWriterMapAttributeToCSS_FontWeight);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-style"), FigVTTDocumentWriterMapAttributeToCSS_FontStyle);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ text-decoration"), FigVTTDocumentWriterMapAttributeToCSS_Decoration);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ text-align"), FigVTTDocumentWriterMapAttributeToCSS_TextAlign);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-family"), FigVTTDocumentWriterMapAttributeToCSS_FontFamily);
  CFDictionaryAddValue(Mutable, CFSTR("https://www.w3.org/Style/CSS/ font-size"), FigVTTDocumentWriterMapAttributeToCSS_FontSize);
  sCaptionVTTAttributeToCSSPropertyMapping = (uint64_t)Mutable;
}

uint64_t FigFullDownloadDiskCacheProviderCreate(uint64_t a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t *v10;
  int DarwinFileDesc;
  const void *v12;
  const void *v13;
  const void *v14;
  CFTypeRef *v15;
  int v16;
  int v17;
  uint64_t value;
  CFTypeRef v21;
  CFTypeRef cf;

  v21 = 0;
  cf = 0;
  value = 0;
  MEMORY[0x19402F294](&FigFullDownloadDiskCacheProviderCreate_sCreateBusyCacheFileMappingOnce, FigDCP_SetupBusyCacheFileMapping);
  if (!gFigFDCPBusyCacheFileToCacheMapDict
    || !gFigFDCPBusyCacheFileToCacheIDDict
    || !gFigFDCPBusyCacheFileMutex
    || !a2
    || !a3
    || !a4)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_53;
  }
  FigDiskCacheProviderGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
LABEL_53:
    v9 = v7;
    goto LABEL_46;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(a3);
  if (FigFileDoesFileExist() && FigFileForkOpenMainByCFURL())
  {
    v9 = 4294954754;
  }
  else
  {
    v10 = (uint64_t *)(DerivedStorage + 24);
    if (*(_QWORD *)(DerivedStorage + 24))
    {
      DarwinFileDesc = FigFileGetDarwinFileDesc();
      if (fgetxattr(DarwinFileDesc, "com.apple.coremedia.cachemap.offset", 0, 0, 0, 0) == -1)
      {
        if (!FigDCP_IsFileEmpty(*v10, 0))
        {
          v9 = 4294954756;
          goto LABEL_46;
        }
      }
      else
      {
        MEMORY[0x19402EEEC](gFigFDCPBusyCacheFileMutex);
        v12 = CFDictionaryGetValue((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8));
        v13 = (const void *)*MEMORY[0x1E0C9B0D0];
        if (v12 == (const void *)*MEMORY[0x1E0C9B0D0])
          v12 = 0;
        *(_QWORD *)(DerivedStorage + 32) = v12;
        if (v12)
          CFRetain(v12);
        v14 = CFDictionaryGetValue((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheIDDict, *(const void **)(DerivedStorage + 8));
        if (v14 == v13)
          v14 = 0;
        *(_QWORD *)(DerivedStorage + 40) = v14;
        v15 = (CFTypeRef *)(DerivedStorage + 40);
        if (v14)
          CFRetain(v14);
        MEMORY[0x19402EF04](gFigFDCPBusyCacheFileMutex);
        if (*(_QWORD *)(DerivedStorage + 32))
        {
          *(_BYTE *)(DerivedStorage + 50) = 1;
        }
        else if (FigByteStreamCreateFromOpenFile()
               || *v10
               && (v16 = FigFileGetDarwinFileDesc(),
                   fgetxattr(v16, "com.apple.coremedia.cachemap.offset", &value, 8uLL, 0, 0) == -1)
               && (__error(), FigSignalErrorAt())
               || FigDCP_CheckCacheFileVersion((uint64_t)v21, value)
               || FigDCP_CopyIDFromCacheFile((uint64_t)v21, value, (_QWORD *)(DerivedStorage + 40))
               || FigDCP_CopyAtomDataFromCacheFile((uint64_t)v21, value, 1937011572, (__CFData **)(DerivedStorage + 32)))
        {
          if (*v15)
          {
            CFRelease(*v15);
            *v15 = 0;
          }
        }
      }
    }
    if (*(_QWORD *)(DerivedStorage + 40))
      goto LABEL_36;
    if (*v10)
    {
      FigFileForkClose();
      *v10 = 0;
    }
    v17 = FigFileForkOpenMainByCFURL();
    if (!v17)
    {
LABEL_36:
      v9 = 0;
      *a4 = cf;
      goto LABEL_48;
    }
    if (v17 == 69 || v17 == 28)
      v9 = 4294954755;
    else
      v9 = 4294954756;
  }
LABEL_46:
  if (!cf)
    goto LABEL_49;
  CFRelease(cf);
LABEL_48:
  cf = 0;
LABEL_49:
  if (v21)
    CFRelease(v21);
  return v9;
}

uint64_t FigDCP_SetupBusyCacheFileMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  uint64_t result;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gFigFDCPBusyCacheFileToCacheMapDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  gFigFDCPBusyCacheFileToCacheIDDict = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, v2);
  result = FigSimpleMutexCreate();
  gFigFDCPBusyCacheFileMutex = result;
  return result;
}

uint64_t FigDCP_CheckCacheFileVersion(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, int *, _QWORD);
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  result = FigDCP_FindAtomData(a1, a2, 1986359930, (uint64_t)&v8, (unint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (v7 != 4)
      return FigSignalErrorAt();
    v4 = v8;
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
    if (v5)
    {
      result = v5(a1, 4, v4, &v6, 0);
      if (!(_DWORD)result)
      {
        if (v6 == 0x1000000)
          return 0;
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

BOOL FigDCP_IsFileEmpty(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  _BOOL8 v6;
  uint64_t valuePtr;
  CFNumberRef number;
  CFTypeRef cf;

  number = 0;
  cf = 0;
  valuePtr = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  if (FigByteStreamCreateFromOpenFile()
    || (CMBaseObject = CMByteStreamGetCMBaseObject(),
        (v5 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48)) == 0)
    || v5(CMBaseObject, *MEMORY[0x1E0CA2070], v3, &number))
  {
    v6 = 0;
  }
  else
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
    v6 = valuePtr == 0;
    if (a2)
      *a2 = valuePtr;
  }
  if (number)
    CFRelease(number);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t FigFullDownloadDiskCacheProvider_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 48))
    *(_BYTE *)(DerivedStorage + 48) = 1;
  return 0;
}

void FigFullDownloadDiskCacheProvider_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    MEMORY[0x19402EEEC](gFigFDCPBusyCacheFileMutex);
    if (CFDictionaryContainsKey((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8)))
    {
      MEMORY[0x19402EF04](gFigFDCPBusyCacheFileMutex);
      FigFileForkClose();
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
    else
    {
      v4 = (const void *)*MEMORY[0x1E0C9B0D0];
      if (*(_QWORD *)(DerivedStorage + 32))
        v5 = *(const void **)(DerivedStorage + 32);
      else
        v5 = (const void *)*MEMORY[0x1E0C9B0D0];
      CFDictionaryAddValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8), v5);
      if (*(_QWORD *)(DerivedStorage + 40))
        v6 = *(const void **)(DerivedStorage + 40);
      else
        v6 = v4;
      CFDictionaryAddValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheIDDict, *(const void **)(DerivedStorage + 8), v6);
      MEMORY[0x19402EF04](gFigFDCPBusyCacheFileMutex);
      FigFileForkClose();
      *(_QWORD *)(DerivedStorage + 24) = 0;
      MEMORY[0x19402EEEC](gFigFDCPBusyCacheFileMutex);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8));
      CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheIDDict, *(const void **)(DerivedStorage + 8));
      MEMORY[0x19402EF04](gFigFDCPBusyCacheFileMutex);
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v7 = *(const void **)(DerivedStorage + 8);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 40);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
}

__CFString *FigFullDownloadDiskCacheProvider_CopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  const char *v2;
  const char *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = "No";
  if (*(_BYTE *)(DerivedStorage + 48))
    v3 = "No";
  else
    v3 = "Yes";
  if (*(_BYTE *)(DerivedStorage + 49))
    v2 = "Yes";
  CFStringAppendFormat(Mutable, 0, CFSTR("FigFullDownloadDiskCacheProvider <%p>\n\tValid: <%s>\n\tsourceURL: <%@>\n\tcacheFileURL: <%@>\n\tcacheFileSize: <%lld>\n\tcacheComplete: <%s>"), DerivedStorage, v3, *(_OWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 16), v2);
  return Mutable;
}

uint64_t FigFullDownloadDiskCacheProvider_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  void *v9;
  void *v10;
  uint64_t result;
  const void **v12;
  int v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("CacheIdentifier")))
  {
    v8 = *(const void **)(v7 + 40);
    if (v8)
    {
LABEL_5:
      v9 = (void *)CFRetain(v8);
LABEL_8:
      v10 = v9;
      result = 0;
      *a4 = v10;
      return result;
    }
    return 4294954513;
  }
  if (CFEqual(a2, CFSTR("CacheSize")))
  {
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(v7 + 16));
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("CacheMap")))
  {
    v8 = *(const void **)(v7 + 32);
    if (v8)
      goto LABEL_5;
    return 4294954513;
  }
  if (CFEqual(a2, CFSTR("CacheIsComplete")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    v13 = *(unsigned __int8 *)(v7 + 49);
LABEL_16:
    if (!v13)
      v12 = (const void **)MEMORY[0x1E0C9AE40];
    v8 = *v12;
    goto LABEL_5;
  }
  if (CFEqual(a2, CFSTR("CacheIsBusy")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    v13 = *(unsigned __int8 *)(v7 + 50);
    goto LABEL_16;
  }
  return 4294954512;
}

uint64_t FigFullDownloadDiskCacheProvider_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  uint64_t result;
  CFTypeID v9;
  blkcnt_t *v10;
  int DarwinFileDesc;
  blkcnt_t v12;
  CFTypeID v13;
  Boolean v14;
  stat v15;
  _QWORD v16[4];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 48))
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("CacheIdentifier")))
  {
    v7 = *(const void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = a3;
    if (a3)
      CFRetain(a3);
    if (!v7)
      return 0;
LABEL_7:
    CFRelease(v7);
    return 0;
  }
  if (CFEqual(a2, CFSTR("CacheSize")))
  {
    if (a3)
    {
      v9 = CFGetTypeID(a3);
      if (v9 == CFNumberGetTypeID())
      {
        v10 = (blkcnt_t *)(v6 + 16);
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, (void *)(v6 + 16));
        memset(&v15, 0, sizeof(v15));
        DarwinFileDesc = FigFileGetDarwinFileDesc();
        v12 = *(_QWORD *)(v6 + 16);
        if (!fstat(DarwinFileDesc, &v15))
          v12 = *v10 - (v15.st_blocks << 9);
        if (v12 >= 1 && v12 <= *v10)
        {
          v16[0] = 0x300000008;
          v16[1] = 0;
          v16[2] = v12;
          v16[3] = 0;
          fcntl(DarwinFileDesc, 42, v16);
        }
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  if (!CFEqual(a2, CFSTR("CacheMap")))
  {
    if (!CFEqual(a2, CFSTR("CacheIsComplete")))
      return 4294954512;
    if (a3)
    {
      v14 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      result = 0;
      *(_BYTE *)(v6 + 49) = v14;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigDCP_RemoveCacheMap(v6, 0);
  v13 = CFGetTypeID(a3);
  if (v13 != CFDataGetTypeID())
    return FigSignalErrorAt();
  if (*(_BYTE *)(v6 + 48) || (result = FigDCP_WriteOutCacheFile(v6, (const __CFData *)a3), !(_DWORD)result))
  {
    v7 = *(const void **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = a3;
    CFRetain(a3);
    if (!v7)
      return 0;
    goto LABEL_7;
  }
  return result;
}

uint64_t FigDCP_WriteOutCacheFile(uint64_t a1, const __CFData *a2)
{
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t v7;
  const __CFData *v8;
  CFStringRef v9;
  CFIndex Code;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v13;
  CFTypeRef v14;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t (*v17)(CFTypeRef, CFIndex, uint64_t, const UInt8 *, _QWORD);
  uint64_t v18;
  CFIndex v19;
  CFTypeRef v20;
  uint64_t (*v21)(CFTypeRef, uint64_t, CFIndex, uint64_t *, _QWORD);
  CFIndex v22;
  CFTypeRef v23;
  CFIndex v24;
  const UInt8 *v25;
  uint64_t (*v26)(CFTypeRef, CFIndex, CFIndex, const UInt8 *, _QWORD);
  CFIndex v27;
  CFIndex v28;
  CFTypeRef v29;
  uint64_t (*v30)(CFTypeRef, uint64_t, CFIndex, uint64_t *, _QWORD);
  CFIndex v31;
  CFTypeRef v32;
  uint64_t (*v33)(CFTypeRef, uint64_t, CFIndex, int *, _QWORD);
  int DarwinFileDesc;
  CFErrorRef err;
  uint64_t v36;
  int v37;
  uint64_t v38;
  CFTypeRef cf;
  uint64_t value;

  cf = 0;
  v37 = 0x1000000;
  err = 0;
  v36 = 0;
  if (*(_BYTE *)(a1 + 49))
    return FigDCP_RemoveCacheMap(a1, *(_QWORD *)(a1 + 16));
  v38 = 0;
  FigDCP_IsFileEmpty(*(_QWORD *)(a1 + 24), &v36);
  v5 = v36;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = FigByteStreamCreateFromOpenFile();
  if ((_DWORD)v7)
    goto LABEL_35;
  v8 = CFPropertyListCreateData(v6, *(CFPropertyListRef *)(a1 + 40), kCFPropertyListXMLFormat_v1_0, 0, &err);
  if (err)
  {
    v9 = CFErrorCopyFailureReason(err);
    Code = CFErrorGetCode(err);
    if (v9)
      CFRelease(v9);
    if (!v8)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!v8)
  {
    v7 = FigSignalErrorAt();
LABEL_35:
    Code = v7;
    goto LABEL_27;
  }
  HIDWORD(v38) = 1684632691;
  LODWORD(v38) = bswap32(CFDataGetLength(v8) + 8);
  v11 = cf;
  v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 16);
  if (v12)
  {
    v13 = v12(v11, 8, v5, &v38, 0);
    if ((_DWORD)v13)
      goto LABEL_36;
    v14 = cf;
    Length = CFDataGetLength(v8);
    BytePtr = CFDataGetBytePtr(v8);
    v17 = *(uint64_t (**)(CFTypeRef, CFIndex, uint64_t, const UInt8 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 16);
    if (!v17)
      goto LABEL_25;
    v18 = v5 + 8;
    v13 = v17(v14, Length, v18, BytePtr, 0);
    if ((_DWORD)v13)
      goto LABEL_36;
    v19 = CFDataGetLength(v8);
    HIDWORD(v38) = 1953723507;
    LODWORD(v38) = bswap32(CFDataGetLength(a2) + 8);
    v20 = cf;
    v21 = *(uint64_t (**)(CFTypeRef, uint64_t, CFIndex, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
    if (!v21)
      goto LABEL_25;
    v22 = v19 + v18;
    v13 = v21(v20, 8, v22, &v38, 0);
    if ((_DWORD)v13)
      goto LABEL_36;
    v23 = cf;
    v24 = CFDataGetLength(a2);
    v25 = CFDataGetBytePtr(a2);
    v26 = *(uint64_t (**)(CFTypeRef, CFIndex, CFIndex, const UInt8 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 16);
    if (!v26)
      goto LABEL_25;
    v27 = v22 + 8;
    v13 = v26(v23, v24, v27, v25, 0);
    if ((_DWORD)v13)
      goto LABEL_36;
    v28 = CFDataGetLength(a2);
    v38 = 0x7A7265760C000000;
    v29 = cf;
    v30 = *(uint64_t (**)(CFTypeRef, uint64_t, CFIndex, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
    if (!v30)
      goto LABEL_25;
    v31 = v28 + v27;
    v13 = v30(v29, 8, v31, &v38, 0);
    if ((_DWORD)v13)
    {
LABEL_36:
      Code = v13;
      goto LABEL_26;
    }
    v32 = cf;
    v33 = *(uint64_t (**)(CFTypeRef, uint64_t, CFIndex, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
    if (v33)
    {
      v13 = v33(v32, 4, v31 + 8, &v37, 0);
      if (!(_DWORD)v13)
      {
        value = v36;
        if (*(_QWORD *)(a1 + 24))
        {
          DarwinFileDesc = FigFileGetDarwinFileDesc();
          Code = 0;
          if (fsetxattr(DarwinFileDesc, "com.apple.coremedia.cachemap.offset", &value, 8uLL, 0, 0) == -1)
          {
            __error();
            Code = FigSignalErrorAt();
          }
        }
        else
        {
          Code = 0;
        }
        FigFileForkTruncate();
        goto LABEL_26;
      }
      goto LABEL_36;
    }
  }
LABEL_25:
  Code = 4294954514;
LABEL_26:
  CFRelease(v8);
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (err)
    CFRelease(err);
  return Code;
}

uint64_t FigDCP_RemoveCacheMap(uint64_t a1, off_t a2)
{
  int v4;
  uint64_t result;
  int DarwinFileDesc;
  const void *v7;

  MEMORY[0x19402EEEC](gFigFDCPBusyCacheFileMutex);
  v4 = CFDictionaryContainsKey((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(a1 + 8));
  MEMORY[0x19402EF04](gFigFDCPBusyCacheFileMutex);
  if (v4)
    return 4294954754;
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    DarwinFileDesc = FigFileGetDarwinFileDesc();
    fremovexattr(DarwinFileDesc, "com.apple.coremedia.cachemap.offset", 0);
    v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 32) = 0;
    }
    return FigDCP_TruncateFile(*(_QWORD *)(a1 + 24), a2);
  }
  return result;
}

uint64_t FigFullDownloadDiskCacheProvider_GetBacking(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 48) || !(a4 | a5))
  {
    FigSignalErrorAt();
    return 0;
  }
  v9 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 50))
  {
    MEMORY[0x19402EEEC](gFigFDCPBusyCacheFileMutex);
    if (!CFDictionaryContainsKey((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(v9 + 8)))
      *(_BYTE *)(v9 + 50) = 0;
    MEMORY[0x19402EF04](gFigFDCPBusyCacheFileMutex);
    if (*(_BYTE *)(v9 + 50))
    {
      if (a4)
        *(_QWORD *)a4 = *(_QWORD *)(v9 + 24);
      if (a5)
      {
        result = 0;
        *(_QWORD *)a5 = -1;
        return result;
      }
      return 0;
    }
  }
  if (a4)
    *(_QWORD *)a4 = *(_QWORD *)(v9 + 24);
  if (a5)
    *(_QWORD *)a5 = a3;
  return 1;
}

uint64_t FigFullDownloadDiskCacheProvider_GetBackingFile()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
}

uint64_t FigByteStreamFactorySetCachedFileByteStreamEnable(char a1)
{
  uint64_t result;

  gUseCachedFileByteStream = a1;
  result = FigGetCFPreferenceBooleanWithDefault();
  gUseCachedFileByteStream = result;
  return result;
}

uint64_t FigByteStreamFactoryTranslateReferenceSecurityOptions(int a1)
{
  return (32 * a1) & 0x3C0;
}

uint64_t FigByteStreamFactoryCreateStreamFromURLWithOptions(const __CFURL *a1, unsigned int a2, const __CFDictionary *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t Instance;
  const void *v17;
  uint64_t v18;
  uint64_t StreamFromURLWithOptionsAsync;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  uint64_t v26;
  CFTypeRef cf;

  cf = 0;
  if (fbsfCompletionGetTypeID_fbsfCompletionOnce != -1)
    dispatch_once_f(&fbsfCompletionGetTypeID_fbsfCompletionOnce, 0, (dispatch_function_t)fbsfCompletionRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v26 = FigSignalErrorAt();
    v17 = 0;
    goto LABEL_33;
  }
  v17 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v17
    || (v18 = FigSemaphoreCreate(), (*(_QWORD *)(Instance + 40) = v18) == 0)
    || (cf = CFRetain(v17), *(_BYTE *)(Instance + 64) = a7 != 0, FigThreadRegisterAbortAction()))
  {
    v26 = FigSignalErrorAt();
    goto LABEL_33;
  }
  CFRetain(v17);
  StreamFromURLWithOptionsAsync = FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(a1, a2, a3, (void (*)(uint64_t, CFMutableDictionaryRef, _QWORD, _QWORD, _QWORD, _QWORD))fbsf_createStreamFromURL_callback, (uint64_t)v17);
  if ((_DWORD)StreamFromURLWithOptionsAsync)
  {
    v26 = StreamFromURLWithOptionsAsync;
    CFRelease(v17);
LABEL_45:
    FigThreadUnregisterAbortAction();
    goto LABEL_33;
  }
  v20 = FigSemaphoreWaitRelative();
  if ((_DWORD)v20)
  {
    v26 = v20;
    goto LABEL_45;
  }
  FigThreadUnregisterAbortAction();
  if (((a2 >> 5) & 0x1E) != 0 && *(_QWORD *)(Instance + 48) && !FigIsReferenceAllowedBySecurityPolicy())
  {
    v26 = 4294955014;
    *(_DWORD *)(Instance + 24) = -12282;
    FigSignalErrorAt();
  }
  else
  {
    if (a4)
    {
      v21 = *(CFTypeRef *)(Instance + 16);
      if (v21)
        v21 = CFRetain(v21);
      *a4 = v21;
    }
    if (a8)
    {
      v22 = *(CFTypeRef *)(Instance + 32);
      if (v22)
        v22 = CFRetain(v22);
      *a8 = v22;
    }
    if (a5)
    {
      v23 = *(CFTypeRef *)(Instance + 48);
      if (v23)
        v23 = CFRetain(v23);
      *a5 = v23;
    }
    if (a6)
    {
      v24 = *(CFTypeRef *)(Instance + 56);
      if (v24)
        v24 = CFRetain(v24);
      *a6 = v24;
    }
    if (a7)
    {
      v25 = *(CFTypeRef *)(Instance + 72);
      if (v25)
        v25 = CFRetain(v25);
      *a7 = v25;
    }
    v26 = *(unsigned int *)(Instance + 24);
  }
LABEL_33:
  if (cf)
    CFRelease(cf);
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  if (v17)
    CFRelease(v17);
  return v26;
}

void fbsfCreateStreamAbortHandler(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    *(_DWORD *)(a1 + 8) = -12785;
    FigSemaphoreSignal();
    CFRelease(v3);
  }
}

uint64_t FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(const __CFURL *a1, __int16 a2, const __CFDictionary *a3, void (*a4)(uint64_t, CFMutableDictionaryRef, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a5)
{
  CFStringRef v10;
  CFURLRef v11;
  CFURLRef v12;
  uint64_t ByteStreamForFile;
  _QWORD *v14;
  void *v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID TypeID;
  uint64_t CFTypeID;
  CFTypeID v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  CFTypeID v24;
  _BOOL4 v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  const void *v30;
  CFTypeID v31;
  const __CFDictionary *v32;
  CFTypeID v33;
  const void *v34;
  CFTypeID v35;
  CFTypeID v36;
  CFTypeID v37;
  CFTypeID v38;
  __CFDictionary *Value;
  const void *v40;
  uint64_t v41;
  CFMutableDictionaryRef v42;
  uint64_t v44;
  CFMutableDictionaryRef v45;
  _QWORD *v46;
  uint64_t v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  const __CFData *v51;
  const __CFData *v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  int v57;
  int v58;
  CFURLRef v59;
  CFURLRef v60;
  uint64_t v61;
  const void *v62;
  NSObject *GlobalNetworkBufferingLowPriorityQueue;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t FigBaseObject;
  unsigned int (*v72)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, const __CFString *, _QWORD);
  CFIndex AppIntegerValue;
  uint64_t v77;
  int v78;
  CFTypeRef *v79;
  uint64_t CacheMemoryAllocatorForCRABS;
  uint64_t FlumeAsync;
  const __CFNumber *number;
  const void *ValueOfType;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CFTypeRef v88;
  BOOL v89;
  CFTypeRef v90;
  const __CFDictionary *v91;
  const __CFDictionary *v92;
  uint64_t valuePtr;
  CFTypeRef cf;
  CFMutableDictionaryRef v95;
  char v96;

  v10 = CFURLCopyScheme(a1);
  if (!FigCFURLIsLocalResource())
  {
    v14 = malloc_type_calloc(1uLL, 0x10uLL, 0x80040803F642BuLL);
    if (!v14)
      goto LABEL_140;
    v15 = v14;
    *v14 = a4;
    v14[1] = a5;
    v96 = 0;
    v95 = 0;
    v84 = FigCFHTTPIsHTTPBasedURL(a1);
    if (a3)
    {
      v16 = CFURLGetTypeID();
      ValueOfType = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_NetworkCacheURL"), v16);
      v17 = CFURLGetTypeID();
      v91 = (const __CFDictionary *)FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_DownloadDestinationURL"), v17);
      TypeID = CFDictionaryGetTypeID();
      v90 = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_HTTPHeaders"), TypeID);
      CFTypeID = FigCustomURLLoaderGetCFTypeID();
      v88 = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_CustomURLLoader"), CFTypeID);
      v20 = CFBooleanGetTypeID();
      v21 = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_UseAWDL"), v20);
      v22 = (const void *)*MEMORY[0x1E0C9AE50];
      v89 = v21 == (const void *)*MEMORY[0x1E0C9AE50];
      v23 = CFStringGetTypeID();
      FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_Backing"), v23);
      v24 = CFBooleanGetTypeID();
      v25 = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_NoPersistentCache"), v24) == v22;
      v26 = CFNumberGetTypeID();
      number = (const __CFNumber *)FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_NonPurgeableMemoryLimit"), v26);
      v27 = CFBooleanGetTypeID();
      BYTE4(v87) = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_DisableNetworkLargeDownload"), v27) == v22;
      v28 = CFBooleanGetTypeID();
      LOBYTE(v87) = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_DisableNetworkProbeRequest"), v28) == v22;
      v29 = CFNumberGetTypeID();
      v30 = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_MaxSizeAllowedForCellularAccess"), v29);
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      v31 = CFDictionaryGetTypeID();
      v32 = (const __CFDictionary *)FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_HTTPRequestOptions"), v31);
      v33 = CFDictionaryGetTypeID();
      v34 = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_AlternativeConfigurationOptions"), v33);
      v35 = CFBooleanGetTypeID();
      BYTE4(v86) = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_RequiresCustomURLLoading"), v35) == v22;
      v36 = CFBooleanGetTypeID();
      LODWORD(v85) = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_DelayReadAheadUntilExplicitlyHinted"), v36) == v22;
      v37 = CFBooleanGetTypeID();
      LOBYTE(v86) = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_AlwaysFollowRedirects"), v37) == v22;
      v38 = CFBooleanGetTypeID();
      BYTE4(v85) = FigCFDictionaryGetValueOfType(a3, CFSTR("factoryOption_EnableMultiPath"), v38) == v22;
      Value = (__CFDictionary *)CFDictionaryGetValue(a3, CFSTR("factoryOption_StoreBagSessionConfiguration"));
      v95 = Value;
      if (Value)
        CFRetain(Value);
      v40 = CFDictionaryGetValue(a3, CFSTR("factoryOption_ParentNetworkActivity"));
      if (v95)
      {
LABEL_10:
        a3 = v91;
        if (v91)
          goto LABEL_11;
        goto LABEL_36;
      }
      if (v32)
      {
        v51 = (const __CFData *)CFDictionaryGetValue(v32, CFSTR("FHRP_ClientAuditToken"));
        v52 = FigCFHTTPCopyClientProcessName(v51);
        FigRCLCreateConfiguration(v52, CFSTR("kFigRemoteConfigurationLoaderStoreBagType_CRABS"), 0, &v95);
        if (v52)
          CFRelease(v52);
        goto LABEL_10;
      }
      a3 = v91;
    }
    else
    {
      v89 = 0;
      v87 = 0;
      v88 = 0;
      number = 0;
      ValueOfType = 0;
      v90 = 0;
      v25 = 0;
      v30 = 0;
      v34 = 0;
      v85 = 0;
      v86 = 0;
      v40 = 0;
    }
    FigRCLCreateConfiguration(0, CFSTR("kFigRemoteConfigurationLoaderStoreBagType_CRABS"), 0, &v95);
    v32 = 0;
    if (a3)
    {
LABEL_11:
      if (v25 || FigCFEqual())
        goto LABEL_13;
      v92 = a3;
      v25 = 0;
LABEL_37:
      v46 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E0040B55CB63AuLL);
      if (!v46)
      {
LABEL_13:
        v41 = FigSignalErrorAt();
        goto LABEL_14;
      }
      v47 = (uint64_t)v46;
      *v46 = fbfs_createHHTPURLStreamCallback;
      v46[1] = v15;
      v48 = v88;
      if (v88)
        v48 = CFRetain(v88);
      *(_QWORD *)(v47 + 40) = v48;
      v49 = v90;
      if (v90)
        v49 = CFRetain(v90);
      *(_QWORD *)(v47 + 24) = v49;
      *(_BYTE *)(v47 + 93) = v89;
      *(_BYTE *)(v47 + 100) = BYTE4(v87);
      *(_BYTE *)(v47 + 101) = v87;
      if (v30)
        v50 = CFRetain(v30);
      else
        v50 = 0;
      *(_QWORD *)(v47 + 104) = v50;
      *(_BYTE *)(v47 + 112) = 0;
      *(_BYTE *)(v47 + 113) = v96;
      if (v32)
        v53 = CFRetain(v32);
      else
        v53 = 0;
      *(_QWORD *)(v47 + 120) = v53;
      if (v34)
        v54 = CFRetain(v34);
      else
        v54 = 0;
      *(_QWORD *)(v47 + 80) = v54;
      *(_BYTE *)(v47 + 114) = BYTE4(v86);
      *(_BYTE *)(v47 + 115) = v86;
      *(_BYTE *)(v47 + 116) = BYTE4(v85);
      v55 = v95;
      if (v95)
        v55 = CFRetain(v95);
      *(_QWORD *)(v47 + 128) = v55;
      if (v40)
        v56 = CFRetain(v40);
      else
        v56 = 0;
      *(_QWORD *)(v47 + 136) = v56;
      if (!v25 && (v92 || FigCFEqual()))
      {
        v58 = 1;
        v57 = v85;
      }
      else
      {
        if (FigCFEqual())
          *(_DWORD *)(v47 + 72) |= 2u;
        v57 = v85;
        if (!v25)
        {
LABEL_69:
          if (v57)
            *(_DWORD *)(v47 + 72) |= 8u;
          if ((a2 & 0x1000) != 0)
          {
            *(_DWORD *)(v47 + 72) |= 0x10u;
            if ((a2 & 8) == 0)
            {
LABEL_73:
              if ((a2 & 0x20) == 0)
                goto LABEL_75;
              goto LABEL_74;
            }
          }
          else if ((a2 & 8) == 0)
          {
            goto LABEL_73;
          }
          *(_DWORD *)(v47 + 88) |= 1u;
          if ((a2 & 0x20) == 0)
          {
LABEL_75:
            v59 = CFURLCopyAbsoluteURL(a1);
            if (!v59)
            {
              v41 = FigSignalErrorAt();
LABEL_151:
              fbfs_FreeFigHTTPOpenCompletion(v47);
LABEL_14:
              v42 = v95;
              if (!v95)
              {
                if (!(_DWORD)v41)
                  goto LABEL_16;
                goto LABEL_133;
              }
LABEL_132:
              CFRelease(v42);
              if (!(_DWORD)v41)
              {
LABEL_16:
                if (!v10)
                  return v41;
LABEL_17:
                CFRelease(v10);
                return v41;
              }
LABEL_133:
              free(v15);
              if (!v10)
                return v41;
              goto LABEL_17;
            }
            v60 = v59;
            *(_QWORD *)(v47 + 16) = CFRetain(v59);
            v61 = FigCFURLCreateCacheKey();
            if (!v61)
            {
              v41 = FigSignalErrorAt();
LABEL_150:
              CFRelease(v60);
              goto LABEL_151;
            }
            v62 = (const void *)v61;
            if ((a2 & 0x400) != 0)
            {
              GlobalNetworkBufferingLowPriorityQueue = FigThreadGetGlobalNetworkBufferingLowPriorityQueue();
              if (GlobalNetworkBufferingLowPriorityQueue)
                *(_QWORD *)(v47 + 144) = FigHTTPSchedulerRetain(GlobalNetworkBufferingLowPriorityQueue);
            }
            if (v92)
            {
              v41 = FigFullDownloadDiskCacheProviderCreate(*MEMORY[0x1E0C9AE00], v60, v92, (CFTypeRef *)(v47 + 32));
              goto LABEL_82;
            }
            v68 = (*(_BYTE *)(v47 + 72) & 1) == 0 || FigCFHTTPIsDataURL(a1);
            v69 = *MEMORY[0x1E0C9AE00];
            v70 = FigLimitedDiskCacheProviderCreate(*MEMORY[0x1E0C9AE00], v62, ValueOfType, v68, (_QWORD *)(v47 + 32));
            v41 = v70;
            if ((v68 & 1) != 0 || (_DWORD)v70)
            {
              if (!v68)
                goto LABEL_82;
            }
            else
            {
              valuePtr = 0;
              cf = 0;
              FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(v47 + 32));
              v72 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v72 && !v72(FigBaseObject, CFSTR("CacheSize"), v69, &cf))
                CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
              if (cf)
                CFRelease(cf);
              if (valuePtr >= 0x2000000)
              {
LABEL_83:
                v64 = *(_DWORD *)(v47 + 72);
                if ((v64 & 1) != 0)
                {
                  if (fbfs_GetMemCacheForDiskBackedMaxSize_sGetMemCacheForDiskBackedMaxSizeOnce != -1)
                    dispatch_once_f(&fbfs_GetMemCacheForDiskBackedMaxSize_sGetMemCacheForDiskBackedMaxSizeOnce, &fbfs_GetMemCacheForDiskBackedMaxSize_sMemLimit, (dispatch_function_t)fbfs_GetCacheMemForDiskBackedMaxSizeOnce);
                  v67 = fbfs_GetMemCacheForDiskBackedMaxSize_sMemLimit;
                }
                else
                {
                  cf = 0;
                  LOBYTE(valuePtr) = 0;
                  if ((v64 & 2) != 0)
                  {
                    if (number)
                    {
                      CFNumberGetValue(number, kCFNumberLongLongType, &cf);
                      v66 = 0;
                    }
                    else
                    {
                      v66 = 1;
                    }
                    v65 = 0x2000000;
                  }
                  else
                  {
                    if (fbfs_GetMemCacheMaxSize_sGetMemCacheMaxSizeOnce != -1)
                      dispatch_once_f(&fbfs_GetMemCacheMaxSize_sGetMemCacheMaxSizeOnce, &fbfs_GetMemCacheMaxSize_sMemLimit, (dispatch_function_t)fbfs_GetCacheMemMaxSizeOnce);
                    v65 = fbfs_GetMemCacheMaxSize_sMemLimit;
                    v66 = 1;
                  }
                  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("crabs_cache_max_mb"), CFSTR("com.apple.coremedia"), (Boolean *)&valuePtr);
                  if ((_BYTE)valuePtr)
                    v77 = AppIntegerValue << 20;
                  else
                    v77 = (uint64_t)cf;
                  if ((_BYTE)valuePtr)
                    v78 = 0;
                  else
                    v78 = v66;
                  if (v77 <= 0x100000)
                    v78 = 1;
                  if (v78)
                    v67 = v65;
                  else
                    v67 = v77;
                }
                if (v67 < 0)
                {
                  CacheMemoryAllocatorForCRABS = FigSignalErrorAt();
                }
                else
                {
                  v79 = (CFTypeRef *)(v47 + 56);
                  CacheMemoryAllocatorForCRABS = FigCreateCacheMemoryAllocatorForCRABS(v67, (CFAllocatorRef *)(v47 + 56));
                  if (!(_DWORD)CacheMemoryAllocatorForCRABS)
                  {
                    FlumeAsync = fbfs_CreateFlumeAsync(v47, v84);
                    if (!(_DWORD)FlumeAsync)
                    {
                      CFRelease(v62);
                      CFRelease(v60);
                      v42 = v95;
                      if (!v95)
                      {
                        v41 = 0;
                        if (!v10)
                          return v41;
                        goto LABEL_17;
                      }
                      v41 = 0;
                      goto LABEL_132;
                    }
                    v41 = FlumeAsync;
                    if (*v79)
                    {
                      CFRelease(*v79);
                      *v79 = 0;
                    }
                    goto LABEL_149;
                  }
                }
                v41 = CacheMemoryAllocatorForCRABS;
LABEL_149:
                CFRelease(v62);
                goto LABEL_150;
              }
            }
            *(_DWORD *)(v47 + 72) = *(_DWORD *)(v47 + 72) & 0xFFFFFFFC | 2;
            v73 = *(_QWORD *)(v47 + 32);
            if (v73)
            {
              v74 = FigDiskCacheProviderGetFigBaseObject(v73);
              v75 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
              if (v75)
                v75(v74, CFSTR("NoPersistentCache"), *MEMORY[0x1E0C9AE50]);
            }
LABEL_82:
            if ((_DWORD)v41)
              goto LABEL_149;
            goto LABEL_83;
          }
LABEL_74:
          *(_DWORD *)(v47 + 88) |= 2u;
          goto LABEL_75;
        }
        v58 = 4;
      }
      *(_DWORD *)(v47 + 72) |= v58;
      goto LABEL_69;
    }
LABEL_36:
    v92 = a3;
    goto LABEL_37;
  }
  v95 = 0;
  v11 = CFURLCopyAbsoluteURL(a1);
  if (!v11)
  {
LABEL_140:
    v41 = FigSignalErrorAt();
    if (!v10)
      return v41;
    goto LABEL_17;
  }
  v12 = v11;
  if ((a2 & 0x802) != 0 || !gUseCachedFileByteStream)
  {
    FigGetDefaultManagedFilePool();
    ByteStreamForFile = FigManagedFilePoolCreateByteStreamForFile();
  }
  else
  {
    ByteStreamForFile = FigCachedFileByteStreamCreate(v11, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v95);
  }
  v41 = ByteStreamForFile;
  if (!(_DWORD)ByteStreamForFile)
  {
    if (!a3 || (valuePtr = 0, cf = 0, !CFDictionaryGetValue(a3, CFSTR("factoryOption_ByteRangeInFile"))))
    {
LABEL_29:
      a4(a5, v95, 0, 0, 0, 0);
      v41 = 0;
      goto LABEL_30;
    }
    if (FigCFDictionaryGetInt64IfPresent() && FigCFDictionaryGetInt64IfPresent())
    {
      v44 = CMByteStreamCreateCompositeForRead();
      if (!(_DWORD)v44)
      {
        v45 = v95;
        v95 = (CFMutableDictionaryRef)cf;
        if (v45)
          CFRelease(v45);
        goto LABEL_29;
      }
    }
    else
    {
      v44 = FigSignalErrorAt();
    }
    v41 = v44;
  }
LABEL_30:
  if (v95)
    CFRelease(v95);
  CFRelease(v12);
  if (v10)
    goto LABEL_17;
  return v41;
}

void fbsf_createStreamFromURL_callback(const void *a1, const void *a2, int Code, const void *a4, const void *a5, const void *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t CMBaseObject;
  void (*v19)(uint64_t, _QWORD, _QWORD, uint64_t);
  __CFError *v20;
  CFTypeRef cf;

  v12 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v12)
    goto LABEL_26;
  v13 = v12;
  if (!a2)
  {
LABEL_12:
    if (!Code)
      goto LABEL_19;
    goto LABEL_13;
  }
  CFRetain(a2);
  *(_QWORD *)(v13 + 16) = a2;
  if (Code)
  {
    if (!a4)
    {
LABEL_16:
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v19 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v19)
        v19(CMBaseObject, *MEMORY[0x1E0CA2F70], *MEMORY[0x1E0C9AE00], v13 + 32);
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  cf = 0;
  if (*(_BYTE *)(v13 + 64))
  {
    v14 = CMByteStreamGetCMBaseObject();
    v15 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v15)
      v15(v14, CFSTR("CRABS_ReadAheadAssertion"), 0, v13 + 72);
  }
  v16 = CMByteStreamGetCMBaseObject();
  v17 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v17)
  {
    Code = v17(v16, *MEMORY[0x1E0CA2070], 0, &cf);
    if (cf)
      CFRelease(cf);
    goto LABEL_12;
  }
  Code = -12782;
LABEL_13:
  if (a4)
  {
LABEL_14:
    *(_QWORD *)(v13 + 32) = CFRetain(a4);
    goto LABEL_19;
  }
  if (a2)
    goto LABEL_16;
LABEL_19:
  v20 = *(__CFError **)(v13 + 32);
  if (v20)
    Code = CFErrorGetCode(v20);
  *(_DWORD *)(v13 + 24) = Code;
  if (a5)
    *(_QWORD *)(v13 + 48) = CFRetain(a5);
  if (a6)
    *(_QWORD *)(v13 + 56) = CFRetain(a6);
  FigSemaphoreSignal();
  CFRelease((CFTypeRef)v13);
LABEL_26:
  if (a1)
    CFRelease(a1);
}

uint64_t FigByteStreamFactoryCreateStreamFromURL(const __CFURL *a1, unsigned int a2, const void *a3, const void *a4, uint64_t a5, const void *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10)
{
  __CFDictionary *Mutable;
  __CFDictionary *v18;
  uint64_t StreamFromURLWithOptions;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v18 = Mutable;
  if (a3)
    CFDictionaryAddValue(Mutable, CFSTR("factoryOption_NetworkCacheURL"), a3);
  if (a4)
    CFDictionaryAddValue(v18, CFSTR("factoryOption_DownloadDestinationURL"), a4);
  if (a6)
    CFDictionaryAddValue(v18, CFSTR("factoryOption_HTTPHeaders"), a6);
  StreamFromURLWithOptions = FigByteStreamFactoryCreateStreamFromURLWithOptions(a1, a2, v18, a7, a8, a9, 0, a10);
  CFRelease(v18);
  return StreamFromURLWithOptions;
}

void fbfs_createHHTPURLStreamCallback(_QWORD *a1)
{
  ((void (*)(_QWORD))*a1)(a1[1]);
  free(a1);
}

uint64_t FigByteStreamFactoryCreateStreamFromURLAsync(const __CFURL *a1, __int16 a2, const void *a3, const void *a4, const void *a5, void (*a6)(uint64_t, CFMutableDictionaryRef, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a7)
{
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  uint64_t StreamFromURLWithOptionsAsync;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v15 = Mutable;
  if (a3)
    CFDictionaryAddValue(Mutable, CFSTR("factoryOption_NetworkCacheURL"), a3);
  if (a4)
    CFDictionaryAddValue(v15, CFSTR("factoryOption_DownloadDestinationURL"), a4);
  if (a5)
    CFDictionaryAddValue(v15, CFSTR("factoryOption_HTTPHeaders"), a5);
  StreamFromURLWithOptionsAsync = FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(a1, a2, v15, a6, a7);
  CFRelease(v15);
  return StreamFromURLWithOptionsAsync;
}

uint64_t fbsfCompletionRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFBSFCompletionID = result;
  return result;
}

double fbsfCompletion_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t fbsfCompletion_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
    a1[9] = 0;
  }
  return FigSemaphoreDestroy();
}

const void *FigCFDictionaryGetValueOfType(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const void *Value;
  const void *v5;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v5 = Value;
  if (CFGetTypeID(Value) != a3)
    return 0;
  return v5;
}

uint64_t fbfs_CreateFlumeAsync(uint64_t a1, int a2)
{
  CFAllocatorRef *v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  _QWORD *v7;
  CFIndex v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  CFTypeRef v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFNumberRef v21;
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, uint64_t);
  const void *v26;
  int valuePtr;
  CFTypeRef cf;
  void *values[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *keys[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  *(_OWORD *)keys = 0u;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)values = 0u;
  v31 = 0u;
  v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((*(_BYTE *)(a1 + 72) & 4) == 0)
  {
    FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(a1 + 32));
    v6 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v6)
      v6(FigBaseObject, CFSTR("CacheIdentifier"), *v4, &cf);
  }
  v7 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(a1 + 93))
  {
    keys[0] = CFSTR("FBFCreateOption_UseAWDL");
    values[0] = *(void **)MEMORY[0x1E0C9AE50];
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    *(_QWORD *)((unint64_t)keys | (8 * v8)) = CFSTR("FBFCreateOption_DisableLargeDownload");
    *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v8++ & 1))) = *v7;
  }
  v9 = *(void **)(a1 + 104);
  if (v9)
  {
    keys[v8] = CFSTR("FBFCreateOption_MaxSizeAllowedForCellularAccess");
    values[v8++] = v9;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    keys[v8] = CFSTR("FBFCreateOption_DisallowsExpensiveNetworkAccess");
    values[v8++] = (void *)*v7;
  }
  if (*(_BYTE *)(a1 + 113))
  {
    keys[v8] = CFSTR("FBFCreateOption_DisallowsConstrainedNetworkAccess");
    values[v8++] = (void *)*v7;
  }
  v10 = *(void **)(a1 + 120);
  if (v10)
  {
    keys[v8] = CFSTR("FBFCreateOption_HTTPRequestOptions");
    values[v8++] = v10;
  }
  v11 = *(void **)(a1 + 80);
  if (v11)
  {
    keys[v8] = CFSTR("FBFCreateOption_AlternativeConfigurationOptions");
    values[v8++] = v11;
  }
  if (*(_BYTE *)(a1 + 114))
  {
    keys[v8] = CFSTR("FBFCreateOption_DisableNativeHTTPReads");
    values[v8++] = (void *)*v7;
  }
  if (*(_BYTE *)(a1 + 115))
  {
    keys[v8] = CFSTR("FBFCreateOption_AlwaysFollowRedirects");
    values[v8++] = (void *)*v7;
  }
  if (*(_BYTE *)(a1 + 116))
  {
    keys[v8] = CFSTR("FBFCreateOption_EnableMultiPath");
    values[v8++] = (void *)*v7;
  }
  v12 = *(void **)(a1 + 128);
  if (v12)
  {
    keys[v8] = CFSTR("FBFCreateOption_StoreBagConfiguration");
    values[v8++] = v12;
  }
  if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
  {
    keys[v8] = CFSTR("FBFCreateOption_DoNotLogURLs");
    values[v8++] = (void *)*v7;
  }
  v13 = *(void **)(a1 + 136);
  if (v13)
  {
    keys[v8] = CFSTR("FBFCreateOption_ParentNetworkActivity");
    values[v8++] = v13;
  }
  else if (!v8)
  {
    v14 = 0;
    if (a2)
      goto LABEL_34;
LABEL_37:
    v15 = *v4;
    goto LABEL_38;
  }
  v14 = CFDictionaryCreate(*v4, (const void **)keys, (const void **)values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_56;
  }
  if (!a2)
    goto LABEL_37;
LABEL_34:
  v15 = *v4;
  if (!*(_BYTE *)(a1 + 114))
  {
    v16 = cf;
LABEL_39:
    v18 = FigByteFlumeCreateWithHTTP((uint64_t)v15, *(const __CFURL **)(a1 + 16), 0, v16, *(const void **)(a1 + 24), *(NSObject **)(a1 + 144), *(_DWORD *)(a1 + 88), v14, (_QWORD *)(a1 + 48));
    goto LABEL_41;
  }
LABEL_38:
  v17 = FigCFHTTPIsDataURL(*(const __CFURL **)(a1 + 16));
  v16 = cf;
  if (v17)
    goto LABEL_39;
  v18 = FigByteFlumeCustomURLCreateWithURL((uint64_t)v15, *(const __CFURL **)(a1 + 16), 0, cf, *(const void **)(a1 + 24), *(NSObject **)(a1 + 144), *(_DWORD *)(a1 + 88), *(const void **)(a1 + 40), v14, (_QWORD *)(a1 + 48));
LABEL_41:
  v19 = v18;
  if ((_DWORD)v18)
    goto LABEL_54;
  *(_QWORD *)(a1 + 64) = 0;
  v20 = FigThreadRegisterAbortAction();
  if ((_DWORD)v20)
  {
    v19 = v20;
LABEL_52:
    v26 = *(const void **)(a1 + 48);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(a1 + 48) = 0;
    }
    goto LABEL_54;
  }
  valuePtr = 32;
  v21 = CFNumberCreate(v15, kCFNumberSInt32Type, &valuePtr);
  v22 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(a1 + 48));
  v23 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v23)
    v23(v22, CFSTR("FBF_BandwidthSampleCount"), v21);
  CFRelease(v21);
  if (*(_BYTE *)(a1 + 101))
  {
    fbfs_FigHTTPOpenCallback(a1, 0, 0);
    v19 = 0;
    goto LABEL_54;
  }
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v25)
  {
    v19 = 4294954514;
LABEL_51:
    FigThreadUnregisterAbortAction();
    goto LABEL_52;
  }
  v19 = v25(v24, fbfs_FigHTTPOpenCallback, a1);
  if ((_DWORD)v19)
    goto LABEL_51;
LABEL_54:
  if (v14)
    CFRelease(v14);
LABEL_56:
  if (cf)
    CFRelease(cf);
  return v19;
}

void fbfs_FreeFigHTTPOpenCompletion(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  if (a1)
  {
    v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v4 = *(const void **)(a1 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v5 = *(const void **)(a1 + 40);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v6 = *(const void **)(a1 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v7 = *(const void **)(a1 + 56);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v8 = *(const void **)(a1 + 104);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v9 = *(const void **)(a1 + 120);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v10 = *(const void **)(a1 + 128);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 128) = 0;
    }
    v11 = *(const void **)(a1 + 136);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 136) = 0;
    }
    v12 = *(const void **)(a1 + 80);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 80) = 0;
    }
    FigHTTPSchedulerRelease(*(dispatch_object_t *)(a1 + 144));
    free((void *)a1);
  }
}

uint64_t fbfs_GetCacheMemForDiskBackedMaxSizeOnce(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;

  v5 = 8;
  v6 = 0;
  result = sysctlbyname("hw.memsize", &v6, &v5, 0, 0);
  v3 = 0x1000000;
  v4 = 0x2000000;
  if (v6 <= 0x10000000)
    v4 = 0x1000000;
  if ((_DWORD)result != -1)
    v3 = v4;
  *a1 = v3;
  return result;
}

uint64_t fbfs_GetCacheMemMaxSizeOnce(uint64_t *a1)
{
  int v2;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;

  v7 = 8;
  v8 = 0;
  CelestialGetModelSpecificName();
  v2 = sysctlbyname("hw.memsize", &v8, &v7, 0, 0);
  result = FigCFEqual();
  v5 = (int)(v8 >> 20) <= 2000 || v2 == -1 || (_DWORD)result == 0;
  v6 = 0x2000000;
  if (!v5)
    v6 = 0x8000000;
  *a1 = v6;
  return result;
}

uint64_t fbfs_OpenAbortAction(uint64_t result)
{
  if (*(_QWORD *)(result + 48))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigThreadGetGlobalNetworkBufferingRunloop();
    return FigDeferNotificationToRunLoop();
  }
  return result;
}

void fbfs_FigHTTPOpenCallback(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  const __CFAllocator *v6;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFHTTPMessageRef *);
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  const void *v16;
  __int16 FlumeAsync;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t FigBaseObject;
  void (*v24)(uint64_t, const __CFString *, uint64_t);
  CFTypeRef v25;
  uint64_t v26;
  uint64_t CMBaseObject;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  __CFDictionary *Mutable;
  const __CFDictionary *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  CFTypeRef cf;
  CFHTTPMessageRef response;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;

  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  cf = 0;
  response = 0;
  FigThreadUnregisterAbortAction();
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
    return;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (v7)
    v7(v5, CFSTR("FBF_URL"), v6, &v36);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFHTTPMessageRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    v9(v8, CFSTR("FBF_HTTPResponseHeaders"), v6, &response);
  if (!a3)
  {
LABEL_23:
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v19)
      v19(v18, CFSTR("FBF_EntireLengthAvailableOnDemand"), v6, &v37);
    v20 = v37;
    v21 = *MEMORY[0x1E0C9AE50];
    if (v37 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
    {
      Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v30 = Mutable;
      if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
        CFDictionarySetValue(Mutable, CFSTR("DoNotLogURLs"), v20);
      LOWORD(a3) = FigByteStreamCreateForByteFlume(*(const void **)(a1 + 48), v6, v30, &v38);
      if (v30)
        CFRelease(v30);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 72) & 4) != 0)
      {
        v22 = *(_QWORD *)(a1 + 32);
        if (v22)
        {
          FigBaseObject = FigDiskCacheProviderGetFigBaseObject(v22);
          v24 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v24)
            v24(FigBaseObject, CFSTR("NoPersistentCache"), v21);
        }
      }
      LOWORD(a3) = FigCRABSCreate(*(const void **)(a1 + 48), 0, *(const void **)(a1 + 56), *(const void **)(a1 + 32), *(_DWORD *)(a1 + 72), &v39);
      if (!(_WORD)a3)
      {
        v25 = (CFTypeRef)FigCRABSGetByteStream(v39);
        if (v25)
          v25 = CFRetain(v25);
        v38 = v25;
        v26 = *(_QWORD *)(a1 + 128);
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v28)
          v28(CMBaseObject, *MEMORY[0x1E0CA2FB8], v26);
      }
    }
    goto LABEL_39;
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v11)
    v11(v10, CFSTR("FBF_LastError"), v6, &cf);
  v12 = *(unsigned __int8 *)(a1 + 92);
  if (*(_BYTE *)(a1 + 92) || !response)
  {
LABEL_20:
    if (v12)
      a3 = *(_DWORD *)(a1 + 96);
    if ((_WORD)a3)
      goto LABEL_39;
    goto LABEL_23;
  }
  if (CFHTTPMessageGetResponseStatusCode(response) != 403)
  {
    v12 = *(unsigned __int8 *)(a1 + 92);
    goto LABEL_20;
  }
  v13 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(a1 + 48));
  if (v13)
  {
    v14 = v13;
    v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v15)
      v15(v14);
  }
  v16 = *(const void **)(a1 + 48);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_BYTE *)(a1 + 92) = 1;
  *(_DWORD *)(a1 + 96) = a3;
  FlumeAsync = fbfs_CreateFlumeAsync(a1, 0);
  if (!FlumeAsync)
    goto LABEL_44;
  LOWORD(a3) = FlumeAsync;
LABEL_39:
  (*(void (**)(_QWORD, CFTypeRef, _QWORD, CFTypeRef, CFTypeRef, CFHTTPMessageRef))a1)(*(_QWORD *)(a1 + 8), v38, (__int16)a3, cf, v36, response);
  if ((_WORD)a3)
  {
    v31 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(a1 + 48));
    if (v31)
    {
      v32 = v31;
      v33 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v33)
        v33(v32);
    }
  }
  fbfs_FreeFigHTTPOpenCompletion(a1);
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
  if (response)
    CFRelease(response);
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
}

uint64_t fbfs_DeferInvalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  result = FigByteFlumeGetFigBaseObject(a5);
  if (result)
  {
    v6 = result;
    result = CMBaseObjectGetVTable();
    v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v7)
      return v7(v6);
  }
  return result;
}

uint64_t FigSteeringManifestCreateRemote()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigSteeringManifest_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FA0348;
  block[4] = &v3;
  if (FigSteeringManifest_ensureClientEstablished_sFigSteeringRemoteClientSetupOnce != -1)
    dispatch_once(&FigSteeringManifest_ensureClientEstablished_sFigSteeringRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  if (!(_DWORD)v0)
  {
    FigXPCCreateBasicMessage();
    v0 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v0;
}

BOOL FigVideoCompositionTimeWindowDurationIsZero(uint64_t a1)
{
  CMTime v3;
  CMTime time1;

  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    time1 = *(CMTime *)a1;
    v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &v3))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    time1 = *(CMTime *)(a1 + 24);
    v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &v3))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    time1 = *(CMTime *)(a1 + 48);
    v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &v3))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
    return 1;
  time1 = *(CMTime *)(a1 + 72);
  v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  return CMTimeCompare(&time1, &v3) == 0;
}

BOOL FigVideoCompositionTimeWindowDurationIsZeroWhenSeeking(uint64_t a1)
{
  CMTime v3;
  CMTime time1;

  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    time1 = *(CMTime *)(a1 + 48);
    v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &v3))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
    return 1;
  time1 = *(CMTime *)(a1 + 72);
  v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  return CMTimeCompare(&time1, &v3) == 0;
}

BOOL FigVideoCompositionTimeWindowDurationIsZeroWhenNotSeeking(uint64_t a1)
{
  CMTime v3;
  CMTime time1;

  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    time1 = *(CMTime *)a1;
    v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &v3))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    return 1;
  time1 = *(CMTime *)(a1 + 24);
  v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  return CMTimeCompare(&time1, &v3) == 0;
}

BOOL FigVideoCompositionTimeWindowDurationsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CMTime *v3;
  uint64_t v4;
  CMTime *v5;
  uint64_t v6;
  CMTime *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  CMTime v17;
  CMTime time1;

  if ((*(_BYTE *)(a1 + 12) & 1) == 0)
  {
    v2 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  }
  v3 = (CMTime *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    v4 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v3->value = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v4 + 16);
  }
  v5 = (CMTime *)(a1 + 48);
  if ((*(_BYTE *)(a1 + 60) & 1) == 0)
  {
    v6 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v5->value = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 16);
  }
  v7 = (CMTime *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
  {
    v8 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v7->value = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + 16);
  }
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
  {
    v9 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v9 + 16);
  }
  v10 = (_OWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v11 = MEMORY[0x1E0CA2E68];
    *v10 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v11 + 16);
  }
  v12 = (_OWORD *)(a2 + 48);
  if ((*(_BYTE *)(a2 + 60) & 1) == 0)
  {
    v13 = MEMORY[0x1E0CA2E68];
    *v12 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v13 + 16);
  }
  v14 = (_OWORD *)(a2 + 72);
  if ((*(_BYTE *)(a2 + 84) & 1) == 0)
  {
    v15 = MEMORY[0x1E0CA2E68];
    *v14 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(v15 + 16);
  }
  time1 = *(CMTime *)a1;
  v17 = *(CMTime *)a2;
  if (CMTimeCompare(&time1, &v17))
    return 0;
  time1 = *v3;
  v17 = *(CMTime *)v10;
  if (CMTimeCompare(&time1, &v17))
    return 0;
  time1 = *v5;
  v17 = *(CMTime *)v12;
  if (CMTimeCompare(&time1, &v17))
    return 0;
  time1 = *v7;
  v17 = *(CMTime *)v14;
  return CMTimeCompare(&time1, &v17) == 0;
}

uint64_t FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(CFTypeRef cf, int a2, _OWORD *a3)
{
  CMTimeEpoch v3;
  CFTypeID v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  const void *Value;
  CFTypeID v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CMTime time2;
  CMTime time1;
  int v28;
  __int128 v29;
  _BYTE v30[32];
  __int128 v31;
  _BYTE v32[32];

  v29 = *MEMORY[0x1E0CA2E68];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_QWORD *)v30 = v3;
  *(_OWORD *)&v30[8] = v29;
  *(_QWORD *)&v30[24] = v3;
  v31 = v29;
  *(_QWORD *)v32 = v3;
  v25 = v29;
  *(_OWORD *)&v32[8] = v29;
  *(_QWORD *)&v32[24] = v3;
  if (!a3)
    return 0;
  if (cf)
  {
    v7 = CFGetTypeID(cf);
    if (v7 != CFArrayGetTypeID())
      return FigSignalErrorAt();
    Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count >= 1)
    {
      v9 = Count;
      v10 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
        v28 = 0;
        if (!ValueAtIndex)
          return FigSignalErrorAt();
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFDictionaryGetTypeID() || !FigCFDictionaryGetInt32IfPresent())
          return FigSignalErrorAt();
        if (v28 == a2)
          break;
        if (v9 == ++v10)
          goto LABEL_36;
      }
      Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        v14 = CFGetTypeID(Value);
        if (v14 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
      }
      v15 = (const void *)FigCFDictionaryGetValue();
      if (v15)
      {
        v16 = CFGetTypeID(v15);
        if (v16 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
      }
      v17 = (const void *)FigCFDictionaryGetValue();
      if (v17)
      {
        v18 = CFGetTypeID(v17);
        if (v18 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
      }
      v19 = (const void *)FigCFDictionaryGetValue();
      if (v19)
      {
        v20 = CFGetTypeID(v19);
        if (v20 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
      }
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      if ((BYTE12(v29) & 1) == 0)
        *(_QWORD *)v30 = v3;
      if ((v30[20] & 1) == 0)
      {
        *(_OWORD *)&v30[8] = v29;
        *(_QWORD *)&v30[24] = v3;
      }
      if ((BYTE12(v31) & 1) == 0)
      {
        v31 = v29;
        *(_QWORD *)v32 = v3;
      }
      if ((v32[20] & 1) == 0)
      {
        *(_OWORD *)&v32[8] = v29;
        *(_QWORD *)&v32[24] = v3;
      }
      if ((BYTE12(v29) & 0x1D) != 1)
        return FigSignalErrorAt();
      if ((v30[20] & 0x1D) != 1)
        return FigSignalErrorAt();
      if ((BYTE12(v31) & 0x1D) != 1)
        return FigSignalErrorAt();
      if ((v32[20] & 0x1D) != 1)
        return FigSignalErrorAt();
      *(_OWORD *)&time1.value = v29;
      time1.epoch = *(_QWORD *)v30;
      *(_OWORD *)&time2.value = v29;
      time2.epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0)
        return FigSignalErrorAt();
      time1 = *(CMTime *)&v30[8];
      *(_OWORD *)&time2.value = v25;
      time2.epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0)
        return FigSignalErrorAt();
      *(_OWORD *)&time1.value = v31;
      time1.epoch = *(_QWORD *)v32;
      *(_OWORD *)&time2.value = v25;
      time2.epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0)
        return FigSignalErrorAt();
      time1 = *(CMTime *)&v32[8];
      *(_OWORD *)&time2.value = v25;
      time2.epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0)
        return FigSignalErrorAt();
    }
  }
LABEL_36:
  result = 0;
  v22 = v31;
  a3[2] = *(_OWORD *)&v30[16];
  a3[3] = v22;
  v23 = *(_OWORD *)&v32[16];
  a3[4] = *(_OWORD *)v32;
  a3[5] = v23;
  v24 = *(_OWORD *)v30;
  *a3 = v29;
  a3[1] = v24;
  return result;
}

uint64_t FigVideoCompositionWindowSerializedConfigurationContainsTrack(uint64_t result, int a2)
{
  const __CFArray *v3;
  CFTypeID v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v9;

  if (result)
  {
    v3 = (const __CFArray *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; v6 != i; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
          if (!ValueAtIndex)
            break;
          v9 = CFGetTypeID(ValueAtIndex);
          if (v9 != CFDictionaryGetTypeID() || !FigCFDictionaryGetInt32IfPresent())
            break;
          if (!a2)
            return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL FigVideoCompositionWindowSerializedConfigurationForTracksEqual(CFTypeRef cf, CFTypeRef a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  CFTypeID v7;
  CFTypeID v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  CFTypeID v13;
  __int128 v14;
  _OWORD v15[6];
  _OWORD v16[6];
  __int128 v17;
  _BYTE v18[32];
  __int128 v19;
  _BYTE v20[32];
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (cf == a2)
    return 1;
  v26 = v2;
  v27 = v3;
  result = 0;
  if (cf && a2)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFArrayGetTypeID())
    {
      v8 = CFGetTypeID(a2);
      if (v8 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount((CFArrayRef)cf);
        if (Count == CFArrayGetCount((CFArrayRef)a2))
        {
          if (Count < 1)
            return 1;
          v10 = 0;
          v14 = *MEMORY[0x1E0CA2E68];
          v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          while (1)
          {
            v25 = 0;
            v21 = v14;
            *(_QWORD *)&v22[0] = v11;
            *(_OWORD *)((char *)v22 + 8) = v14;
            *((_QWORD *)&v22[1] + 1) = v11;
            v23 = v14;
            *(_QWORD *)&v24[0] = v11;
            *((_QWORD *)&v24[1] + 1) = v11;
            *(_OWORD *)((char *)v24 + 8) = v14;
            v17 = v14;
            *(_QWORD *)v18 = v11;
            *(_OWORD *)&v18[8] = v14;
            *(_QWORD *)&v18[24] = v11;
            v19 = v14;
            *(_QWORD *)v20 = v11;
            *(_QWORD *)&v20[24] = v11;
            *(_OWORD *)&v20[8] = v14;
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
            if (!ValueAtIndex)
              break;
            v13 = CFGetTypeID(ValueAtIndex);
            if (v13 != CFDictionaryGetTypeID()
              || !FigCFDictionaryGetInt32IfPresent()
              || FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(cf, v25, &v21)
              || !FigVideoCompositionWindowSerializedConfigurationContainsTrack((uint64_t)a2, v25)
              || FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(a2, v25, &v17))
            {
              break;
            }
            v16[2] = v22[1];
            v16[3] = v23;
            v16[4] = v24[0];
            v16[5] = v24[1];
            v16[0] = v21;
            v16[1] = v22[0];
            v15[2] = *(_OWORD *)&v18[16];
            v15[3] = v19;
            v15[4] = *(_OWORD *)v20;
            v15[5] = *(_OWORD *)&v20[16];
            v15[0] = v17;
            v15[1] = *(_OWORD *)v18;
            result = FigVideoCompositionTimeWindowDurationsEqual((uint64_t)v16, (uint64_t)v15);
            if (result)
            {
              ++v10;
              result = 1;
              if (Count != v10)
                continue;
            }
            return result;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t FigAlternateFilterMonitorCreateForPlaybackBitrate(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, _OWORD *a5, _OWORD *a6, const void *a7, uint64_t a8, CFTypeRef *a9)
{
  uint64_t inserted;
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  CFTypeRef v42;
  const void **v43;
  uint64_t AllocatorForMedia;
  uint64_t Filter;
  CMTime v47;
  CFTypeRef cf;
  CFTypeRef v49;

  cf = 0;
  v49 = 0;
  if (!a9 || !a4)
    goto LABEL_21;
  FigAlternateFilterMonitorGetClassID();
  inserted = CMDerivedObjectCreate();
  if ((_DWORD)inserted)
    goto LABEL_22;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v17;
  if (!v17)
    goto LABEL_21;
  v18 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 24) = v18;
  if (!v18)
    goto LABEL_21;
  *(_QWORD *)(DerivedStorage + 32) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v19 = a5[1];
  *(_OWORD *)(DerivedStorage + 432) = *a5;
  *(_OWORD *)(DerivedStorage + 448) = v19;
  v20 = a5[5];
  v22 = a5[2];
  v21 = a5[3];
  *(_OWORD *)(DerivedStorage + 496) = a5[4];
  *(_OWORD *)(DerivedStorage + 512) = v20;
  *(_OWORD *)(DerivedStorage + 464) = v22;
  *(_OWORD *)(DerivedStorage + 480) = v21;
  v23 = a5[9];
  v25 = a5[6];
  v24 = a5[7];
  *(_OWORD *)(DerivedStorage + 560) = a5[8];
  *(_OWORD *)(DerivedStorage + 576) = v23;
  *(_OWORD *)(DerivedStorage + 528) = v25;
  *(_OWORD *)(DerivedStorage + 544) = v24;
  v26 = a5[13];
  v28 = a5[10];
  v27 = a5[11];
  *(_OWORD *)(DerivedStorage + 624) = a5[12];
  *(_OWORD *)(DerivedStorage + 640) = v26;
  *(_OWORD *)(DerivedStorage + 592) = v28;
  *(_OWORD *)(DerivedStorage + 608) = v27;
  v29 = a6[1];
  *(_OWORD *)(DerivedStorage + 656) = *a6;
  *(_OWORD *)(DerivedStorage + 672) = v29;
  v30 = a6[2];
  v31 = a6[3];
  v32 = a6[5];
  *(_OWORD *)(DerivedStorage + 720) = a6[4];
  *(_OWORD *)(DerivedStorage + 736) = v32;
  *(_OWORD *)(DerivedStorage + 688) = v30;
  *(_OWORD *)(DerivedStorage + 704) = v31;
  v33 = a6[6];
  v34 = a6[7];
  v35 = a6[9];
  *(_OWORD *)(DerivedStorage + 784) = a6[8];
  *(_OWORD *)(DerivedStorage + 800) = v35;
  *(_OWORD *)(DerivedStorage + 752) = v33;
  *(_OWORD *)(DerivedStorage + 768) = v34;
  v36 = a6[10];
  v37 = a6[11];
  v38 = a6[13];
  *(_OWORD *)(DerivedStorage + 848) = a6[12];
  *(_OWORD *)(DerivedStorage + 864) = v38;
  *(_OWORD *)(DerivedStorage + 816) = v36;
  *(_OWORD *)(DerivedStorage + 832) = v37;
  CMTimeMakeWithSeconds(&v47, 10.0, 1000);
  *(CMTime *)(DerivedStorage + 148) = v47;
  *(_QWORD *)(DerivedStorage + 8) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 16) = a3;
  *(_DWORD *)(DerivedStorage + 192) = 0x7FFFFFFF;
  v39 = MEMORY[0x1E0CA2E18];
  v40 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 336) = *MEMORY[0x1E0CA2E18];
  v41 = *(_QWORD *)(v39 + 16);
  *(_QWORD *)(DerivedStorage + 352) = v41;
  *(_OWORD *)(DerivedStorage + 384) = v40;
  *(_QWORD *)(DerivedStorage + 400) = v41;
  *(_DWORD *)(DerivedStorage + 416) = -1;
  if (a7)
    v42 = CFRetain(a7);
  else
    v42 = 0;
  *(_QWORD *)(DerivedStorage + 408) = v42;
  *(_BYTE *)(DerivedStorage + 423) = 1;
  *(_QWORD *)(DerivedStorage + 72) = &stru_1E2FD85F8;
  *(_QWORD *)(DerivedStorage + 896) = 1000000000 * (int)FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 208) = 0x3FF0000000000000;
  *(_BYTE *)(DerivedStorage + 130) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 408), CFSTR("useStartupScoreForInitialAlternate"));
  *(_BYTE *)(DerivedStorage + 130) = FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 136) = 0x4008000000000000;
  *(_DWORD *)(DerivedStorage + 144) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 408), CFSTR("switchUpStallRiskFilterChoice"));
  *(_DWORD *)(DerivedStorage + 144) = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 129) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 408), CFSTR("enablePairedLLABR"));
  *(_BYTE *)(DerivedStorage + 129) = FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 256) = 0x10000000000000;
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a4);
  inserted = FigNetworkHistoryObserverCreate();
  if ((_DWORD)inserted)
    goto LABEL_22;
  if (!*(_QWORD *)(DerivedStorage + 48))
    goto LABEL_21;
  v43 = (const void **)(DerivedStorage + 80);
  inserted = FigAlternatePassthroughFilterCreate(a1, CFSTR("MonitorPassThoughFilter"), 601, (_QWORD *)(DerivedStorage + 80));
  if ((_DWORD)inserted)
    goto LABEL_22;
  if (!*v43)
  {
LABEL_21:
    inserted = FigSignalErrorAt();
    goto LABEL_22;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  AllocatorForMedia = FigGetAllocatorForMedia();
  inserted = FigAlternateFilterTreeCreate(AllocatorForMedia, &cf);
  if ((_DWORD)inserted)
  {
LABEL_22:
    Filter = inserted;
    goto LABEL_23;
  }
  if (!cf)
    goto LABEL_21;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, *v43, 500);
  if ((_DWORD)inserted)
    goto LABEL_22;
  Filter = FigAlternateFilterTreeCreateFilter(cf, CFSTR("BitrateFilterTree"), 600, (_QWORD *)(DerivedStorage + 56));
  if (!(_DWORD)Filter)
  {
    fampb_setupDryTimer((uint64_t)v49);
    *a9 = v49;
    v49 = 0;
    goto LABEL_18;
  }
LABEL_23:
  if (v49)
    CFRelease(v49);
LABEL_18:
  if (cf)
    CFRelease(cf);
  return Filter;
}

void fampb_networkHistoryObserverCallbackUnlocked(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  _QWORD *DerivedStorage;
  uint64_t MainSegmentBytesInTransitUnlocked;
  __int128 v8;

  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MainSegmentBytesInTransitUnlocked = fampb_getMainSegmentBytesInTransitUnlocked();
    MEMORY[0x19402EA0C](*DerivedStorage);
    DerivedStorage[22] = MainSegmentBytesInTransitUnlocked;
    if ((*((_BYTE *)DerivedStorage + 396) & 1) != 0)
      v8 = *((_OWORD *)DerivedStorage + 24);
    else
      CMTimebaseGetTimeClampedAboveAnchorTime();
    if ((BYTE12(v8) & 1) != 0 && (DerivedStorage[111] == a3 || *((_BYTE *)DerivedStorage + 128)))
      fampb_attemptToSwitch(v5, DerivedStorage[110] == a3, 0);
    MEMORY[0x19402EA24](*DerivedStorage);
    CFRelease(v5);
  }
}

uint64_t fampb_validAlternateHasChanged(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (dword_1EE2A30C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fampb_setBandwidthConditions(a2);
  return MEMORY[0x19402EA24](*DerivedStorage);
}

double fampb_setupDryTimer(uint64_t a1)
{
  uint64_t DerivedStorage;
  double result;
  uint64_t v4;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTime v7;
  CMTime rhs;
  CMTime time1;
  CMTime lhs;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 420))
  {
    v4 = DerivedStorage;
    lhs = *(CMTime *)(DerivedStorage + 336);
    rhs = *(CMTime *)(DerivedStorage + 148);
    CMTimeSubtract(&time1, &lhs, &rhs);
    lhs.value = time1.value;
    flags = time1.flags;
    lhs.timescale = time1.timescale;
    if ((time1.flags & 1) != 0)
    {
      epoch = time1.epoch;
      if ((*(_BYTE *)(v4 + 396) & 1) != 0)
        v7 = *(CMTime *)(v4 + 384);
      else
        CMTimebaseGetTimeClampedAboveAnchorTime();
      time1.value = lhs.value;
      time1.timescale = lhs.timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      if ((CMTimeCompare(&time1, &v7) & 0x80000000) == 0)
      {
        time1.value = lhs.value;
        time1.timescale = lhs.timescale;
        time1.flags = flags;
        time1.epoch = epoch;
        *(_QWORD *)&result = fampb_primeTimeTillDryTimer(a1, &time1).n128_u64[0];
      }
    }
  }
  return result;
}

void FigCFRelease_5(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigAlternatePlaybackBitrateMonitorSetStreamDuration(const void *a1, CMTime *a2, char a3)
{
  _QWORD *DerivedStorage;
  uint64_t MainSegmentBytesInTransitUnlocked;
  __int128 v8;
  __n128 v9;
  CMTime v11;
  CMTime lhs;
  CMTime v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MainSegmentBytesInTransitUnlocked = fampb_getMainSegmentBytesInTransitUnlocked();
  MEMORY[0x19402EA0C](*DerivedStorage);
  memset(&v13, 0, sizeof(v13));
  lhs = *a2;
  v11 = *(CMTime *)((_BYTE *)DerivedStorage + 14);
  CMTimeSubtract(&v13, &lhs, &v11);
  *((_BYTE *)DerivedStorage + 422) = a3;
  v8 = *(_OWORD *)&a2->value;
  DerivedStorage[44] = a2->epoch;
  *((_OWORD *)DerivedStorage + 21) = v8;
  DerivedStorage[22] = MainSegmentBytesInTransitUnlocked;
  v9.n128_f64[0] = fampb_setupDryTimer((uint64_t)a1);
  if (*((_BYTE *)DerivedStorage + 128))
    fampb_attemptToSwitch(a1, 0, 0);
  MEMORY[0x19402EA24](*DerivedStorage, v9);
  return 0;
}

uint64_t fampb_getMainSegmentBytesInTransitUnlocked()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, CFNumberRef *);
  int v6;
  CFNumberRef v7;
  uint64_t v9;
  CFNumberRef number;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  number = 0;
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    v1 = (_QWORD *)DerivedStorage;
    MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
    if (*((_BYTE *)v1 + 128) && v1[4])
    {
      v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      MEMORY[0x19402EA24](*v1);
      if (v2)
      {
        FigBytePumpGetFigBaseObject(v2);
        v4 = v3;
        v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (v5)
        {
          v6 = v5(v4, CFSTR("FBP_MainSegmentBytesInTransit"), *MEMORY[0x1E0C9AE00], &number);
          v7 = number;
          if (!v6)
          {
            CFNumberGetValue(number, kCFNumberSInt64Type, &v9);
            v7 = number;
          }
          if (v7)
            CFRelease(v7);
        }
        CFRelease(v2);
      }
    }
    else
    {
      MEMORY[0x19402EA24](*v1);
    }
  }
  return v9;
}

void fampb_attemptToSwitch(const void *a1, int a2, char *a3)
{
  uint64_t DerivedStorage;
  int PeakBitRate;
  int ExpectedAverageBitrate;
  uint64_t v9;
  char v10;
  int v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  float v17;
  double v18;
  OpaqueCMTimebase *v19;
  double Rate;
  int v21;
  float v22;
  double v23;
  _BOOL4 shouldSwitchUpConcurrently;
  int v25;
  uint64_t v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  Float64 v30;
  Float64 v31;
  Float64 v32;
  Float64 v33;
  int v34;
  char *v35;
  int v36;
  Float64 v37;
  int v38;
  int v39;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v42;
  Float64 Seconds;
  Float64 v44;
  Float64 v45;
  Float64 v46;
  char *v47;
  int v48;
  int v49;
  Float64 v50;
  int v51;
  int v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  Float64 v57;
  Float64 v58;
  Float64 v59;
  Float64 v60;
  char *v61;
  int v62;
  int v63;
  Float64 v64;
  int v65;
  int v66;
  int v67;
  double v68;
  NSObject *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  Float64 v73;
  Float64 v74;
  Float64 v75;
  Float64 v76;
  int v77;
  int v78;
  Float64 v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  int v88;
  const void *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  CMTime v112;
  CMTime v113;
  CMTime v114;
  CMTime v115;
  uint64_t v116;
  CMTime v117;
  CMTime rhs;
  CMTime lhs;
  CMTime type;
  CMTime v121;
  CMTime time;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  Float64 v135;
  __int16 v136;
  Float64 v137;
  __int16 v138;
  Float64 v139;
  __int16 v140;
  Float64 v141;
  __int16 v142;
  int v143;
  __int16 v144;
  int v145;
  __int16 v146;
  Float64 v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  uint64_t v153;
  CMTime v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v117, 0, sizeof(v117));
  fampb_calculateDuration(DerivedStorage, &v117);
  PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(DerivedStorage + 88));
  ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(DerivedStorage + 88));
  v116 = 0;
  if (*(uint64_t *)(DerivedStorage + 904) <= 0)
    v9 = 100000;
  else
    v9 = *(_QWORD *)(DerivedStorage + 904);
  v10 = *(_BYTE *)(DerivedStorage + 423);
  if (!v10)
    goto LABEL_9;
  if ((v117.flags & 1) == 0)
    goto LABEL_8;
  v11 = ExpectedAverageBitrate;
  v12 = *(double *)(DerivedStorage + 208);
  v13 = CMBaseObjectGetDerivedStorage();
  if (*(int *)(v13 + 424) >= 1 && *(float *)(v13 + 196) == 0.0)
    goto LABEL_8;
  if (fampb_getPredictionBandwidth(DerivedStorage, &v116))
    goto LABEL_8;
  v14 = v12 * (double)PeakBitRate;
  v15 = v116;
  *(_QWORD *)(DerivedStorage + 184) = v116;
  v16 = (double)v15;
  v17 = fabsf(*(float *)(DerivedStorage + 196));
  if (v17 <= 1.0)
    v17 = 1.0;
  v18 = ceilf(v17);
  v19 = *(OpaqueCMTimebase **)(DerivedStorage + 328);
  if (v19)
    Rate = CMTimebaseGetRate(v19);
  else
    Rate = 0.0;
  v21 = (int)v14;
  v22 = Rate;
  *(float *)(DerivedStorage + 200) = v22;
  v23 = v16 / v18;
  if (*(_BYTE *)(DerivedStorage + 128) && *(_BYTE *)(DerivedStorage + 129))
  {
    time = v117;
    shouldSwitchUpConcurrently = fampb_shouldSwitchUpConcurrently(DerivedStorage + 80, v116, v9, &time);
    v21 = (int)v14;
    v25 = shouldSwitchUpConcurrently;
  }
  else
  {
    v25 = 1;
  }
  v26 = (uint64_t)v23;
  if (!a2)
  {
    if (*(_BYTE *)(DerivedStorage + 128))
    {
      if (dword_1EE2A30C8)
      {
        v102 = v21;
        v109 = v11;
        v105 = v9;
        LODWORD(v121.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = v121.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v42 = value;
        else
          v42 = value & 0xFFFFFFFE;
        if (v42)
        {
          v93 = *(_QWORD *)(DerivedStorage + 72);
          v96 = v116;
          v99 = *(_QWORD *)(DerivedStorage + 208);
          time = v117;
          Seconds = CMTimeGetSeconds(&time);
          time = *(CMTime *)(DerivedStorage + 336);
          v44 = CMTimeGetSeconds(&time);
          CMTimebaseGetTime(&v113, *(CMTimebaseRef *)(DerivedStorage + 328));
          v45 = CMTimeGetSeconds(&v113);
          v46 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
          v47 = a3;
          v48 = *(unsigned __int8 *)(DerivedStorage + 422);
          v49 = *(unsigned __int8 *)(DerivedStorage + 420);
          time = *(CMTime *)(DerivedStorage + 148);
          v50 = CMTimeGetSeconds(&time);
          v51 = *(unsigned __int8 *)(DerivedStorage + 421);
          v52 = *(unsigned __int8 *)(DerivedStorage + 128);
          LODWORD(time.value) = 136319490;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
          LOWORD(time.flags) = 2048;
          *(_QWORD *)((char *)&time.flags + 2) = a1;
          HIWORD(time.epoch) = 2112;
          v123 = v93;
          v124 = 2048;
          v125 = v96;
          v126 = 2048;
          v127 = v99;
          v128 = 1024;
          v129 = PeakBitRate;
          v130 = 1024;
          v131 = v109;
          v132 = 1024;
          v133 = v102;
          v134 = 2048;
          v135 = Seconds;
          v136 = 2048;
          v137 = v44;
          v138 = 2048;
          v139 = v45;
          v140 = 2048;
          v141 = v46;
          v142 = 1024;
          v143 = v48;
          a3 = v47;
          v144 = 1024;
          v145 = v49;
          v146 = 2048;
          v147 = v50;
          v148 = 1024;
          v149 = v51;
          v150 = 1024;
          v151 = v52;
          v152 = 2048;
          v153 = v105;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v83 = v116;
      v84 = CMBaseObjectGetDerivedStorage();
      v85 = v84;
      if (*(uint64_t *)(v84 + 904) <= 0)
        v86 = 100000;
      else
        v86 = *(_QWORD *)(v84 + 904);
      memset(&time, 0, sizeof(time));
      fampb_calculateDuration(v84, &time);
      v154 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v121 = time;
      if (!fampb_shouldSwitchDownConcurrently(v85 + 80, v83, v86, (uint64_t)&v121, &v154))
      {
        if ((v154.flags & 1) != 0)
        {
          memset(&v121, 0, sizeof(v121));
          if ((*(_BYTE *)(v85 + 396) & 1) != 0)
            v121 = *(CMTime *)(v85 + 384);
          else
            CMTimebaseGetTimeClampedAboveAnchorTime();
          lhs = v121;
          rhs = v154;
          CMTimeAdd(&type, &lhs, &rhs);
          fampb_primeTimeTillDryTimer((uint64_t)a1, &type);
        }
        goto LABEL_8;
      }
      v87 = *(const void **)(v85 + 96);
      if (v87)
      {
        CFRelease(v87);
        *(_QWORD *)(v85 + 96) = 0;
        if (fampb_setBandwidthConditions((uint64_t)a1))
          goto LABEL_8;
        v88 = 2;
      }
      else
      {
        v88 = 0;
      }
      fampb_configurePlaybackFilterAsync(a1, v83, v88);
      v10 = 1;
      goto LABEL_9;
    }
    if (v26 < v21 && !*(_BYTE *)(DerivedStorage + 422))
    {
      v67 = v21;
      time = v117;
      v154 = *(CMTime *)(DerivedStorage + 148);
      v68 = CMTimeGetSeconds(&time);
      time = v154;
      if (v68 <= CMTimeGetSeconds(&time))
      {
        if (dword_1EE2A30C8)
        {
          v111 = v11;
          LODWORD(v121.value) = 0;
          LOBYTE(type.value) = 0;
          v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v70 = v121.value;
          if (os_log_type_enabled(v69, type.value))
            v71 = v70;
          else
            v71 = v70 & 0xFFFFFFFE;
          if (v71)
          {
            v107 = v9;
            v72 = *(_QWORD *)(DerivedStorage + 72);
            v94 = v116;
            v98 = *(_QWORD *)(DerivedStorage + 208);
            time = v117;
            v73 = CMTimeGetSeconds(&time);
            time = *(CMTime *)(DerivedStorage + 336);
            v74 = CMTimeGetSeconds(&time);
            CMTimebaseGetTime(&v112, *(CMTimebaseRef *)(DerivedStorage + 328));
            v75 = CMTimeGetSeconds(&v112);
            v76 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
            v77 = *(unsigned __int8 *)(DerivedStorage + 422);
            v78 = *(unsigned __int8 *)(DerivedStorage + 420);
            time = *(CMTime *)(DerivedStorage + 148);
            v79 = CMTimeGetSeconds(&time);
            v80 = *(unsigned __int8 *)(DerivedStorage + 421);
            v81 = *(unsigned __int8 *)(DerivedStorage + 128);
            LODWORD(time.value) = 136319490;
            *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
            LOWORD(time.flags) = 2048;
            *(_QWORD *)((char *)&time.flags + 2) = a1;
            HIWORD(time.epoch) = 2112;
            v123 = v72;
            v124 = 2048;
            v125 = v94;
            v126 = 2048;
            v127 = v98;
            v128 = 1024;
            v129 = PeakBitRate;
            v130 = 1024;
            v131 = v111;
            v132 = 1024;
            v133 = v67;
            v134 = 2048;
            v135 = v73;
            v136 = 2048;
            v137 = v74;
            v138 = 2048;
            v139 = v75;
            v140 = 2048;
            v141 = v76;
            v142 = 1024;
            v143 = v77;
            v144 = 1024;
            v145 = v78;
            v146 = 2048;
            v147 = v79;
            v148 = 1024;
            v149 = v80;
            v150 = 1024;
            v151 = v81;
            v152 = 2048;
            v153 = v107;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v82 = v116;
        v89 = a1;
        v90 = 0;
        goto LABEL_76;
      }
    }
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    if (v26 > v21)
    {
      v10 = *(_BYTE *)(DerivedStorage + 420);
      if (!v10)
        goto LABEL_9;
      if (dword_1EE2A30C8)
      {
        v103 = v21;
        v110 = v11;
        v106 = v9;
        LODWORD(v121.value) = 0;
        LOBYTE(type.value) = 0;
        v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v54 = v121.value;
        if (os_log_type_enabled(v53, type.value))
          v55 = v54;
        else
          v55 = v54 & 0xFFFFFFFE;
        if (v55)
        {
          v56 = *(_QWORD *)(DerivedStorage + 72);
          v97 = v116;
          v100 = *(_QWORD *)(DerivedStorage + 208);
          time = v117;
          v57 = CMTimeGetSeconds(&time);
          time = *(CMTime *)(DerivedStorage + 336);
          v58 = CMTimeGetSeconds(&time);
          CMTimebaseGetTime(&v114, *(CMTimebaseRef *)(DerivedStorage + 328));
          v59 = CMTimeGetSeconds(&v114);
          v60 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
          v61 = a3;
          v62 = *(unsigned __int8 *)(DerivedStorage + 422);
          v63 = *(unsigned __int8 *)(DerivedStorage + 420);
          time = *(CMTime *)(DerivedStorage + 148);
          v64 = CMTimeGetSeconds(&time);
          v65 = *(unsigned __int8 *)(DerivedStorage + 421);
          v66 = *(unsigned __int8 *)(DerivedStorage + 128);
          LODWORD(time.value) = 136319490;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
          LOWORD(time.flags) = 2048;
          *(_QWORD *)((char *)&time.flags + 2) = a1;
          HIWORD(time.epoch) = 2112;
          v123 = v56;
          v124 = 2048;
          v125 = v97;
          v126 = 2048;
          v127 = v100;
          v128 = 1024;
          v129 = PeakBitRate;
          v130 = 1024;
          v131 = v110;
          v132 = 1024;
          v133 = v103;
          v134 = 2048;
          v135 = v57;
          v136 = 2048;
          v137 = v58;
          v138 = 2048;
          v139 = v59;
          v140 = 2048;
          v141 = v60;
          v142 = 1024;
          v143 = v62;
          a3 = v61;
          v144 = 1024;
          v145 = v63;
          v146 = 2048;
          v147 = v64;
          v148 = 1024;
          v149 = v65;
          v150 = 1024;
          v151 = v66;
          v152 = 2048;
          v153 = v106;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v82 = (uint64_t)((double)v116 / 1.1);
      v116 = v82;
      goto LABEL_75;
    }
    goto LABEL_8;
  }
  if (dword_1EE2A30C8)
  {
    v101 = v21;
    v108 = v11;
    v104 = v9;
    LODWORD(v121.value) = 0;
    LOBYTE(type.value) = 0;
    v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v28 = v121.value;
    if (os_log_type_enabled(v27, type.value))
      v29 = v28;
    else
      v29 = v28 & 0xFFFFFFFE;
    if (v29)
    {
      v91 = *(_QWORD *)(DerivedStorage + 72);
      v92 = v116;
      v95 = *(_QWORD *)(DerivedStorage + 208);
      time = v117;
      v30 = CMTimeGetSeconds(&time);
      time = *(CMTime *)(DerivedStorage + 336);
      v31 = CMTimeGetSeconds(&time);
      CMTimebaseGetTime(&v115, *(CMTimebaseRef *)(DerivedStorage + 328));
      v32 = CMTimeGetSeconds(&v115);
      v33 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
      v34 = *(unsigned __int8 *)(DerivedStorage + 422);
      v35 = a3;
      v36 = *(unsigned __int8 *)(DerivedStorage + 420);
      time = *(CMTime *)(DerivedStorage + 148);
      v37 = CMTimeGetSeconds(&time);
      v38 = *(unsigned __int8 *)(DerivedStorage + 421);
      v39 = *(unsigned __int8 *)(DerivedStorage + 128);
      LODWORD(time.value) = 136319490;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
      LOWORD(time.flags) = 2048;
      *(_QWORD *)((char *)&time.flags + 2) = a1;
      HIWORD(time.epoch) = 2112;
      v123 = v91;
      v124 = 2048;
      v125 = v92;
      v126 = 2048;
      v127 = v95;
      v128 = 1024;
      v129 = PeakBitRate;
      v130 = 1024;
      v131 = v108;
      v132 = 1024;
      v133 = v101;
      v134 = 2048;
      v135 = v30;
      v136 = 2048;
      v137 = v31;
      v138 = 2048;
      v139 = v32;
      v140 = 2048;
      v141 = v33;
      v142 = 1024;
      v143 = v34;
      v144 = 1024;
      v145 = v36;
      a3 = v35;
      v146 = 2048;
      v147 = v37;
      v148 = 1024;
      v149 = v38;
      v150 = 1024;
      v151 = v39;
      v152 = 2048;
      v153 = v104;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v25 || !fampb_ConcurrentSwitchUpValidForLongEnough(DerivedStorage + 80))
    goto LABEL_8;
  v82 = v116;
LABEL_75:
  v89 = a1;
  v90 = 1;
LABEL_76:
  v10 = fampb_configurePlaybackFilterAsync(v89, v82, v90) == 0;
LABEL_9:
  if (a3)
    *a3 = v10;
}

uint64_t FigAlternatePlaybackBitrateMonitorSetPumpOffset(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;

  if (a1)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*DerivedStorage);
    v4 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 45) = *(_OWORD *)a2;
    DerivedStorage[47] = v4;
    MEMORY[0x19402EA24](*DerivedStorage);
  }
  return 0;
}

uint64_t FigAlternateFilterMonitorForPlaybackBitrateStartup(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  int v7;
  int v8;
  uint64_t AllocatorForMedia;
  uint64_t inserted;
  CFTypeRef v11;
  const __CFAllocator *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  int v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef cf;
  CFTypeRef v31;

  if (!a1)
    return 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v3 = (const void *)DerivedStorage[10];
  v4 = DerivedStorage[11];
  v5 = (const void *)DerivedStorage[14];
  v6 = (const void *)DerivedStorage[15];
  v7 = *((unsigned __int8 *)DerivedStorage + 130);
  v8 = *((_DWORD *)DerivedStorage + 48);
  MEMORY[0x19402EA24](*DerivedStorage);
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  if (v4)
  {
    v16 = FigSignalErrorAt();
    v17 = 0;
    goto LABEL_45;
  }
  AllocatorForMedia = FigGetAllocatorForMedia();
  inserted = FigAlternateFilterTreeCreate(AllocatorForMedia, &v21);
  if ((_DWORD)inserted)
    goto LABEL_67;
  v11 = v21;
  if (!v21)
  {
    inserted = FigSignalErrorAt();
    goto LABEL_67;
  }
  if (!v3)
  {
    v17 = 0;
    v16 = 0;
    goto LABEL_44;
  }
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v3, 500);
  if ((_DWORD)inserted)
    goto LABEL_67;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v8 != 0x7FFFFFFF)
  {
    inserted = FigAlternatePeakBitRateCapFilterCreate(*MEMORY[0x1E0C9AE00], v8, &v23);
    if ((_DWORD)inserted)
      goto LABEL_67;
    inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v23, 460);
    if ((_DWORD)inserted)
      goto LABEL_67;
  }
  if (v7)
  {
    inserted = FigAlternateStartupScoreFilterCreate(v12, &v24);
    if ((_DWORD)inserted)
      goto LABEL_67;
    inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v24, 420);
    if ((_DWORD)inserted)
      goto LABEL_67;
    inserted = FigAlternateHighestRankingScoreFilterCreate(v12, &v26);
    if ((_DWORD)inserted)
      goto LABEL_67;
    v13 = v21;
    v14 = v26;
    v15 = 310;
  }
  else
  {
    inserted = FigAlternateLowestIndexAlternateFilterCreate((uint64_t)v12, &v22);
    if ((_DWORD)inserted)
      goto LABEL_67;
    v13 = v21;
    v14 = v22;
    v15 = 430;
  }
  v16 = FigAlternateFilterTreeInsertLeaf((uint64_t)v13, v14, v15);
  if ((_DWORD)v16)
    goto LABEL_68;
  inserted = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v12, &v25);
  if ((_DWORD)inserted
    || (inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v25, 100), (_DWORD)inserted)
    || (inserted = FigAlternateFilterTreeCreateFilter(v21, CFSTR("BitrateFilterTree"), 600, &v27), (_DWORD)inserted))
  {
LABEL_67:
    v16 = inserted;
    goto LABEL_68;
  }
  v17 = v27;
  if (!v6)
  {
LABEL_42:
    v16 = 0;
    v27 = 0;
    goto LABEL_43;
  }
  v31 = 0;
  v29 = 0;
  cf = 0;
  v28 = 0;
  v18 = FigGetAllocatorForMedia();
  v19 = FigAlternateFilterTreeCreate(v18, &cf);
  if ((_DWORD)v19
    || (v19 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v3, 500), (_DWORD)v19)
    || (v19 = FigAlternateTransitionBiasFilterCreate(v12, v5, v6, &v28), (_DWORD)v19)
    || (v19 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v28, 320), (_DWORD)v19)
    || (v19 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v12, &v29), (_DWORD)v19)
    || (v19 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v29, 100), (_DWORD)v19)
    || (v19 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)cf, v17), (_DWORD)v19))
  {
    v16 = v19;
  }
  else
  {
    v16 = FigAlternateFilterTreeCreateFilter(cf, CFSTR("GaplessItemTransitionTree"), 600, &v31);
    if (!(_DWORD)v16)
    {
      v17 = v31;
      v31 = 0;
      goto LABEL_31;
    }
  }
  v17 = 0;
LABEL_31:
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (!(_DWORD)v16)
  {
    if (v27)
      CFRelease(v27);
    goto LABEL_42;
  }
LABEL_68:
  v17 = 0;
LABEL_43:
  v11 = v21;
  if (v21)
LABEL_44:
    CFRelease(v11);
LABEL_45:
  if (v23)
    CFRelease(v23);
  if (v24)
    CFRelease(v24);
  if (v22)
    CFRelease(v22);
  if (v25)
    CFRelease(v25);
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  if (!(_DWORD)v16)
    v16 = (uint64_t)fampb_notifyFilterChangeUnlocked(a1, v17);
  if (v17)
    CFRelease(v17);
  return v16;
}

const void *fampb_notifyFilterChangeUnlocked(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return a2;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v6 = v5[7];
  if (v6)
  {
    v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v7)
      v7(v6);
    if (FigCFEqual())
      goto LABEL_11;
    v9 = (const void *)v5[7];
    v8 = (const void *)v5[8];
    v5[8] = v9;
    if (v9)
      CFRetain(v9);
  }
  else
  {
    v8 = (const void *)v5[8];
    v5[8] = 0;
  }
  if (v8)
    CFRelease(v8);
LABEL_11:
  v10 = (const void *)v5[7];
  v5[7] = CFRetain(a2);
  MEMORY[0x19402EA24](*v5);
  a2 = (const void *)FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewFilterIfNecessary(a1, v10, a2, 0, 0);
  if (v10)
    CFRelease(v10);
  return a2;
}

uint64_t FigAlternatePlaybackBitrateMonitorCanSwitchDownConcurrentlyWithoutStall(uint64_t a1, CMTime *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  float v5;
  CFTypeRef v6;
  OpaqueCMTimebase *v7;
  float Rate;
  uint64_t v9;
  uint64_t canSwitchDownConcurrentlyToAlternateWithoutStall;
  CMTime v12;
  uint64_t v13;

  v13 = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (!*((_BYTE *)DerivedStorage + 128)
    || ((uint64_t)DerivedStorage[113] <= 0 ? (v4 = 100000) : (v4 = DerivedStorage[113]),
        fampb_getPredictionBandwidth((uint64_t)DerivedStorage, &v13)))
  {
    MEMORY[0x19402EA24](*DerivedStorage);
    return 0;
  }
  else
  {
    if (*((_BYTE *)DerivedStorage + 129))
      v5 = 1.0;
    else
      v5 = 0.9;
    v6 = fampb_copyLowerSwitchCandidate(DerivedStorage + 10, DerivedStorage[12], *((_BYTE *)DerivedStorage + 129) == 0);
    v7 = (OpaqueCMTimebase *)DerivedStorage[41];
    if (v7)
      Rate = CMTimebaseGetRate(v7);
    else
      Rate = 0.0;
    *((float *)DerivedStorage + 50) = Rate;
    v9 = DerivedStorage[12];
    v12 = *a2;
    canSwitchDownConcurrentlyToAlternateWithoutStall = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v6, (uint64_t)(DerivedStorage + 10), &v12, v4, v13, v9, 0, v5);
    MEMORY[0x19402EA24](*DerivedStorage);
    if (v6)
      CFRelease(v6);
  }
  return canSwitchDownConcurrentlyToAlternateWithoutStall;
}

uint64_t fampb_getPredictionBandwidth(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t UpTimeNanoseconds;
  uint64_t (*v9)(uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  if (*(_BYTE *)(a1 + 128))
  {
    v17 = *(_OWORD *)(a1 + 776);
    v18 = *(_OWORD *)(a1 + 792);
    v19 = *(_OWORD *)(a1 + 808);
    v20 = *(_OWORD *)(a1 + 656);
    v13 = *(_OWORD *)(a1 + 712);
    v14 = *(_OWORD *)(a1 + 728);
    v15 = *(_OWORD *)(a1 + 744);
    v16 = *(_OWORD *)(a1 + 760);
    v11 = *(_OWORD *)(a1 + 680);
    v12 = *(_OWORD *)(a1 + 696);
    v3 = *(_QWORD *)(a1 + 824);
    v4 = *(_OWORD *)(a1 + 848);
    v42 = *(_OWORD *)(a1 + 832);
    v43 = v4;
    v44 = *(_OWORD *)(a1 + 864);
    v5 = *(_QWORD *)(a1 + 896);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 448);
    v17 = *(_OWORD *)(a1 + 552);
    v18 = *(_OWORD *)(a1 + 568);
    v19 = *(_OWORD *)(a1 + 584);
    v20 = *(_OWORD *)(a1 + 432);
    v13 = *(_OWORD *)(a1 + 488);
    v14 = *(_OWORD *)(a1 + 504);
    v15 = *(_OWORD *)(a1 + 520);
    v16 = *(_OWORD *)(a1 + 536);
    v11 = *(_OWORD *)(a1 + 456);
    v12 = *(_OWORD *)(a1 + 472);
    v3 = *(_QWORD *)(a1 + 600);
    v6 = *(_OWORD *)(a1 + 624);
    v42 = *(_OWORD *)(a1 + 608);
    v43 = v6;
    v44 = *(_OWORD *)(a1 + 640);
  }
  v7 = *(_QWORD *)(a1 + 40);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
  if (!v9)
    return 4294954514;
  v27 = v20;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v19;
  v30 = v12;
  v31 = v13;
  v32 = v14;
  v33 = v15;
  v29 = v11;
  v28 = v5;
  v38 = v3 | 8;
  v39 = v42;
  v40 = v43;
  v41 = v44;
  result = v9(v7, UpTimeNanoseconds, &v27, &v21);
  if (a2)
  {
    if (!(_DWORD)result)
      *a2 = (uint64_t)(*((double *)&v22 + 1) * (double)(uint64_t)v21);
  }
  return result;
}

CFTypeRef fampb_copyLowerSwitchCandidate(uint64_t *a1, uint64_t a2, int a3)
{
  int NormalizedPeakBitrate;
  int v6;
  uint64_t AllocatorForMedia;
  const __CFAllocator *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef v13;
  unsigned int (*v14)(CFTypeRef, CFTypeRef, CFArrayRef *);
  const void *ValueAtIndex;
  CFTypeRef v16;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;

  v24 = 0;
  v22 = 0;
  v23 = 0;
  cf = 0;
  theArray = 0;
  v18 = 0;
  v19 = 0;
  NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a2);
  if (a3)
    v6 = NormalizedPeakBitrate - 1;
  else
    v6 = 19 * NormalizedPeakBitrate / 20;
  fampb_copyValidAlternateList(*a1, (uint64_t)&v22);
  if (!v22)
    goto LABEL_23;
  AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateFilterTreeCreate(AllocatorForMedia, &v23))
    goto LABEL_23;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigAlternateNormalizedPeakBitRateCapFilterCreate(*MEMORY[0x1E0C9AE00], v6, 1, &cf)
    || FigAlternateFilterTreeInsertLeaf((uint64_t)v23, cf, 240))
  {
    goto LABEL_23;
  }
  if (a3)
  {
    if (FigAlternateLowestVideoThenAudioFilterCreate(v8, &v18))
      goto LABEL_23;
    v9 = v23;
    v10 = v18;
    v11 = 230;
  }
  else
  {
    if (FigAlternatePlaybackScoreAndBitRateFilterCreate(v8, &v19)
      || FigAlternateFilterTreeInsertLeaf((uint64_t)v23, v19, 200)
      || FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v8, &v18))
    {
      goto LABEL_23;
    }
    v9 = v23;
    v10 = v18;
    v11 = 100;
  }
  if (!FigAlternateFilterTreeInsertLeaf((uint64_t)v9, v10, v11)
    && !FigAlternateFilterTreeCreateFilter(v23, CFSTR("selectSwitchCandidate"), 100, &v24))
  {
    v12 = v24;
    v13 = v22;
    v14 = *(unsigned int (**)(CFTypeRef, CFTypeRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
    if (v14)
    {
      if (!v14(v12, v13, &theArray))
      {
        if (theArray)
        {
          if (CFArrayGetCount(theArray) >= 1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            if (ValueAtIndex)
            {
              v16 = CFRetain(ValueAtIndex);
              goto LABEL_24;
            }
          }
        }
      }
    }
  }
LABEL_23:
  v16 = 0;
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  if (theArray)
    CFRelease(theArray);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  if (v24)
    CFRelease(v24);
  return v16;
}

uint64_t fampb_canSwitchDownConcurrentlyToAlternateWithoutStall(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, CMTime *a7, float a8)
{
  __int128 v11;
  CMTimeEpoch v12;
  uint64_t result;
  float v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  v11 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v18.value = *MEMORY[0x1E0CA2E18];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v18.epoch = v12;
  result = 1;
  if (a1 == a6 || *(float *)(a2 + 120) == 0.0 || *(_QWORD *)(a2 + 16) == a1)
  {
LABEL_6:
    if (!a7)
      return result;
    goto LABEL_7;
  }
  *(_OWORD *)&v17.value = v11;
  v17.epoch = v12;
  *(_OWORD *)&v16.value = v11;
  v16.epoch = v12;
  v15 = *a3;
  v14 = fampb_concurrentSwitchDownSafetyFactor(a2, a1, a6, &v15, a4, a5, &v17, &v16);
  if (v14 > a8)
  {
    v15 = v16;
    fampb_nextTimeToCheckConcurrentSwitchDown(&v15, &v18, v14, a8);
    result = 1;
    goto LABEL_6;
  }
  result = 0;
  if (!a7)
    return result;
LABEL_7:
  *a7 = v18;
  return result;
}

uint64_t FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    fampb_copyValidAlternateList(v4[10], (uint64_t)&cf);
    a2 = FigCFArrayContainsValue();
    MEMORY[0x19402EA24](*v4);
    if (cf)
      CFRelease(cf);
  }
  return a2;
}

uint64_t fampb_copyValidAlternateList(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (v4)
    return v4(a1, CFSTR("FAFProperty_AlternateList"), *MEMORY[0x1E0C9AE00], a2);
  else
    return 4294954514;
}

uint64_t FigAlternatePlaybackBitrateMonitorGetAlternateRank(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  int IsAlternateStillValid;
  uint64_t v6;
  int PeakBitRate;
  CFIndex v8;
  int v9;
  int v10;
  unsigned int v11;
  const void *ValueAtIndex;
  int v13;
  int v14;
  CFArrayRef theArray;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  theArray = 0;
  IsAlternateStillValid = FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(a1, a2);
  v6 = 0;
  if (IsAlternateStillValid && DerivedStorage)
  {
    PeakBitRate = FigAlternateGetPeakBitRate(a2);
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (fampb_copyAlternateListSortedByQuality(DerivedStorage + 10, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &theArray)|| !theArray|| CFArrayGetCount(theArray) < 1)
    {
      v6 = 0;
    }
    else if (CFArrayGetCount(theArray) < 1)
    {
      v6 = 100;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
        v13 = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
        v14 = v13 != v9;
        if (v13 != v9)
          ++v11;
        if (v13 <= PeakBitRate)
          v14 = 0;
        v10 += v14;
        ++v8;
        v9 = v13;
      }
      while (v8 < CFArrayGetCount(theArray));
      v6 = 100;
      if (v11 >= 2)
        v6 = (100 - 100 * v10 / (int)(v11 - 1));
    }
    MEMORY[0x19402EA24](*DerivedStorage);
    if (theArray)
      CFRelease(theArray);
  }
  return v6;
}

uint64_t fampb_copyAlternateListSortedByQuality(uint64_t *a1, const __CFAllocator *a2, int a3, const __CFArray **a4)
{
  uint64_t valid;
  const __CFArray *MutableCopy;
  const __CFArray *v9;
  CFComparisonResult (__cdecl *v10)(const void *, const void *, void *);
  uint64_t v11;
  CFArrayRef theArray;
  CFRange v14;

  theArray = 0;
  if (!a4)
    return 0;
  valid = fampb_copyValidAlternateList(*a1, (uint64_t)&theArray);
  if ((_DWORD)valid)
  {
LABEL_15:
    v11 = valid;
    goto LABEL_10;
  }
  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray) >= 1)
  {
    MutableCopy = CFArrayCreateMutableCopy(a2, 0, theArray);
    if (MutableCopy)
    {
      v9 = MutableCopy;
      v10 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))fampb_AlternatePeakBitrateComparator;
      if (!a3 && FigAlternatesCarryRankingScore(MutableCopy))
        v10 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))fampb_AlternateRankingScoreComparator;
      v14.length = CFArrayGetCount(v9);
      v14.location = 0;
      CFArraySortValues(v9, v14, v10, 0);
      v11 = 0;
      *a4 = v9;
      goto LABEL_10;
    }
    valid = FigSignalErrorAt();
    goto LABEL_15;
  }
  v11 = 0;
LABEL_10:
  if (theArray)
    CFRelease(theArray);
  return v11;
}

uint64_t FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(double a1, double a2, uint64_t a3, double *a4, int *a5, _DWORD *a6)
{
  _QWORD *DerivedStorage;
  uint64_t valid;
  _QWORD *v13;
  int NormalizedPeakBitrate;
  uint64_t v15;
  CFIndex v16;
  double v17;
  double v18;
  double v19;
  CFIndex Count;
  const void *ValueAtIndex;
  double Resolution;
  double v23;
  CFArrayRef theArray;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  valid = 0;
  theArray = 0;
  if (a4)
  {
    v13 = DerivedStorage;
    if (DerivedStorage)
    {
      if (a5)
      {
        MEMORY[0x19402EA0C](*DerivedStorage);
        valid = fampb_copyValidAlternateList(v13[10], (uint64_t)&theArray);
        if (!(_DWORD)valid && theArray && CFArrayGetCount(theArray) >= 1)
        {
          NormalizedPeakBitrate = 0;
          v15 = 0;
          v16 = 0;
          v17 = a2 * a1;
          v18 = 0.0;
          v19 = 0.0;
          while (1)
          {
            Count = (CFIndex)theArray;
            if (theArray)
              Count = CFArrayGetCount(theArray);
            if (v16 >= Count)
              break;
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
            Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
            if (v23 > 0.0 && Resolution > 0.0 && Resolution * v23 > v17)
            {
              v17 = Resolution * v23;
              v15 = (uint64_t)ValueAtIndex;
              v18 = Resolution;
              v19 = v23;
            }
            if (NormalizedPeakBitrate <= (int)FigAlternateGetNormalizedPeakBitrate((uint64_t)ValueAtIndex))
              NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate((uint64_t)ValueAtIndex);
            ++v16;
          }
          *a4 = v18;
          a4[1] = v19;
          *a5 = NormalizedPeakBitrate;
          if (a6 && v15)
            *a6 = FigAlternateGetVideoQualityIndex(v15);
        }
        MEMORY[0x19402EA24](*v13);
        if (theArray)
          CFRelease(theArray);
      }
    }
  }
  return valid;
}

const void *FigAlternatePlaybackBitrateMonitorRejectSwitch(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t AllocatorForMedia;
  CFAllocatorRef v8;
  const void *v9;
  const void *v10;
  CFTypeRef v12;
  CFTypeRef cf;
  CFTypeRef v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v14 = 0;
  v12 = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v5 = DerivedStorage[7];
  v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v6(v5);
  if (!FigCFEqual())
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    if (!FigAlternateFilterTreeCreate(AllocatorForMedia, &v14)
      && !FigAlternateFilterTreeInsertLeaf((uint64_t)v14, (const void *)DerivedStorage[10], 500))
    {
      v8 = CFGetAllocator(a1);
      if (!FigAlternateSingleAlternateFilterCreate((uint64_t)v8, a2, 1, CFSTR("RejectedSwitch"), 490, &cf)
        && !FigAlternateFilterTreeInsertLeaf((uint64_t)v14, cf, 500))
      {
        v9 = (const void *)DerivedStorage[8];
        if (!v9 || !FigAlternateFilterTreeSetFallbackBranch((uint64_t)v14, v9))
          FigAlternateFilterTreeCreateFilter(v14, CFSTR("RejectedSwitchFilterTree"), 600, &v12);
      }
    }
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  v10 = fampb_notifyFilterChangeUnlocked(a1, v12);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v12)
    CFRelease(v12);
  return v10;
}

uint64_t FigAlternatePlaybackBitrateMonitorTryToSwitchUp(const void *a1)
{
  _QWORD *DerivedStorage;
  int v3;
  unsigned __int8 v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  DerivedStorage[22] = 0;
  v3 = FigNetworkHistoryObserverTestCondition();
  fampb_attemptToSwitch(a1, v3, (char *)&v5);
  MEMORY[0x19402EA24](*DerivedStorage);
  if (!v5)
    return 0;
  dispatch_sync_f((dispatch_queue_t)DerivedStorage[3], 0, (dispatch_function_t)fampb_noop);
  return v5;
}

void FigAlternatePlaybackBitrateMonitorSetTimeForUnitTest(double a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (*(double *)(DerivedStorage + 256) == 2.22507386e-308)
    *(double *)(DerivedStorage + 256) = a1 + -1.0;
  *(double *)(DerivedStorage + 248) = a1;
  JUMPOUT(0x19402EA24);
}

void fampb_finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  OpaqueCMTimebase *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(OpaqueCMTimebase **)(v1 + 328);
  if (v2)
    CMTimebaseRemoveTimerDispatchSource(v2, *(dispatch_source_t *)(v1 + 264));
  if (*(_QWORD *)(v1 + 264))
  {
    StopAndReleaseTimer((dispatch_object_t *)(v1 + 264));
    v3 = MEMORY[0x1E0CA2E18];
    v4 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v1 + 272) = *MEMORY[0x1E0CA2E18];
    v5 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v1 + 288) = v5;
    *(_OWORD *)(v1 + 296) = v4;
    *(_QWORD *)(v1 + 312) = v5;
  }
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 320));
  v6 = *(NSObject **)(DerivedStorage + 24);
  if (v6)
    dispatch_release(v6);
  v7 = *(const void **)(DerivedStorage + 328);
  if (v7)
    CFRelease(v7);
  FigSimpleMutexDestroy();
  v8 = *(const void **)(DerivedStorage + 8);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(DerivedStorage + 56);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(DerivedStorage + 64);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 408);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(DerivedStorage + 32);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(DerivedStorage + 72);
  if (v15)
    CFRelease(v15);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  fampb_releaseAndClearPlaybackFilterConfig(DerivedStorage + 80);
}

CFStringRef fampb_copyDebugDesc()
{
  _QWORD *DerivedStorage;
  CFStringRef v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterMonitorForPlaybackBitrate lastMeasuredBitrate:%lld ]"), DerivedStorage[23]);
  MEMORY[0x19402EA24](*DerivedStorage);
  return v1;
}

uint64_t fampb_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  const void *v7;
  const __CFAllocator *v8;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  const void *v11;
  CFArrayRef *p_theArray;
  const __CFAllocator *v13;
  CFNumberType v14;
  uint64_t v15;
  uint64_t valid;
  int PeakBitRate;
  CFIndex i;
  CFIndex v20;
  const void *ValueAtIndex;
  const void *v22;
  _BOOL4 hasOnlyAudioInValidAlternateList;
  _QWORD *v24;
  uint64_t v25;
  CFArrayRef theArray;
  CFRange v27;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (!a4)
  {
    valid = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_QualityGear")))
  {
    v7 = (const void *)DerivedStorage[11];
    theArray = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v7)
    {
      if (fampb_copyAlternateListSortedByQuality(DerivedStorage + 10, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &theArray))goto LABEL_12;
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          v27.length = Count;
          v27.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(theArray, v27, v7);
          goto LABEL_13;
        }
LABEL_12:
        FirstIndexOfValue = -1;
LABEL_13:
        if (theArray)
          CFRelease(theArray);
        goto LABEL_15;
      }
    }
    FirstIndexOfValue = -1;
LABEL_15:
    theArray = (CFArrayRef)FirstIndexOfValue;
    p_theArray = &theArray;
    v13 = v8;
    v14 = kCFNumberCFIndexType;
LABEL_16:
    v11 = CFNumberCreate(v13, v14, p_theArray);
LABEL_17:
    v15 = 0;
    *a4 = v11;
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_TrialAlternate")))
  {
    v11 = (const void *)DerivedStorage[12];
    if (v11)
      v11 = CFRetain(v11);
    goto LABEL_17;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_CandidateAlternatesForAdaptiveBitrateSwitching")))
  {
    valid = fampb_copyValidAlternateList(DerivedStorage[10], (uint64_t)a4);
LABEL_21:
    v15 = valid;
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_HighestValidPeakBitrate")))
  {
    theArray = 0;
    PeakBitRate = 0;
    if (!fampb_copyValidAlternateList(DerivedStorage[10], (uint64_t)&theArray))
    {
      for (i = 0; ; ++i)
      {
        v20 = (CFIndex)theArray;
        if (theArray)
          v20 = CFArrayGetCount(theArray);
        if (i >= v20)
          break;
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if ((int)FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex) > PeakBitRate)
        {
          v22 = CFArrayGetValueAtIndex(theArray, i);
          PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v22);
        }
      }
    }
    if (theArray)
      CFRelease(theArray);
    LODWORD(theArray) = PeakBitRate;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_theArray = &theArray;
    v14 = kCFNumberSInt32Type;
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_HighestValidDeclaredSampleRate")))
  {
    theArray = COERCE_CFARRAYREF(fampb_highestValidDeclaredSampleRate((uint64_t)DerivedStorage));
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_theArray = &theArray;
    v14 = kCFNumberDoubleType;
    goto LABEL_16;
  }
  if (!CFEqual(a2, CFSTR("AfmfpbProperty_HasAudioOnlyAlternates")))
  {
    if (CFEqual(a2, CFSTR("AfmfpbProperty_RTT")))
    {
      v25 = DerivedStorage[113];
      if (v25 <= 0)
        v25 = 100000;
      theArray = (CFArrayRef)v25;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_theArray = &theArray;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AfmfpbProperty_PredictedBitrate")))
      {
        v15 = 4294954512;
        goto LABEL_18;
      }
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_theArray = (CFArrayRef *)(DerivedStorage + 23);
    }
    v14 = kCFNumberSInt64Type;
    goto LABEL_16;
  }
  hasOnlyAudioInValidAlternateList = fampb_hasOnlyAudioInValidAlternateList((uint64_t)DerivedStorage);
  v15 = 0;
  v24 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (!hasOnlyAudioInValidAlternateList)
    v24 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a4 = *v24;
LABEL_18:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v15;
}

const void *fampb_setProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  uint64_t v16;
  _BOOL4 v17;
  const void *v18;
  CFTypeID v19;
  CFTypeID v20;
  int v21;
  CFTypeID v22;
  int v23;
  uint64_t v24;
  CFTypeID v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  void *v29;
  const __CFNumber *v30;
  CFNumberType v31;
  CFTypeID v32;
  CFTypeID v33;
  CFTypeID v34;
  CFTypeID v35;
  CFTypeID v36;
  CFTypeID v37;
  CFTypeID v38;
  CFTypeID v39;
  CFTypeID v40;
  uint64_t v41;
  CFTypeID v42;
  uint64_t SInt64;
  CMTime v45;
  Float64 valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (CFEqual(a2, CFSTR("AfmfpbProperty_Timebase")))
  {
    if (a3)
    {
      TypeID = CMTimebaseGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v8 = *(const void **)(DerivedStorage + 328);
        if (v8 != a3)
        {
          if (v8)
          {
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
            v9 = *(const void **)(DerivedStorage + 328);
            *(_QWORD *)(DerivedStorage + 328) = a3;
            CFRetain(a3);
            if (v9)
              CFRelease(v9);
          }
          else
          {
            *(_QWORD *)(DerivedStorage + 328) = a3;
            CFRetain(a3);
          }
          if (*(_QWORD *)(DerivedStorage + 328))
          {
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          fampb_setupDryTimer((uint64_t)a1);
          if (*(_QWORD *)(DerivedStorage + 88))
          {
            v17 = *(_BYTE *)(DerivedStorage + 420) != 0;
LABEL_40:
            v18 = a1;
LABEL_41:
            v16 = fampb_configurePlaybackFilterForUpdatedProperties(v18, v17);
            goto LABEL_134;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_133:
    v16 = FigSignalErrorAt();
    goto LABEL_134;
  }
  if (FigCFEqual())
  {
    v10 = *(const void **)(DerivedStorage + 72);
    *(_QWORD *)(DerivedStorage + 72) = a3;
    if (!a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_CurrentAlternate")))
  {
    if (!a3)
      goto LABEL_133;
    v11 = FigAlternateGetTypeID();
    if (v11 != CFGetTypeID(a3))
      goto LABEL_133;
    if (!FigCFEqual())
    {
      v12 = *(const void **)(DerivedStorage + 96);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(DerivedStorage + 96) = 0;
      }
      v13 = *(const void **)(DerivedStorage + 88);
      *(_QWORD *)(DerivedStorage + 88) = a3;
      CFRetain(a3);
      if (v13)
        CFRelease(v13);
      if (FigAlternateIsIFrameOnly(*(_QWORD *)(DerivedStorage + 88))
        || FigAlternateIsAudioOnly(*(_QWORD *)(DerivedStorage + 88)))
      {
        *(_QWORD *)(DerivedStorage + 208) = 0x3FF0000000000000;
      }
      if (*(_QWORD *)(DerivedStorage + 240))
        *(_QWORD *)(DerivedStorage + 240) = 0;
      goto LABEL_34;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_TrialAlternate")))
  {
    if (a3)
    {
      v14 = CFGetTypeID(a3);
      if (v14 != FigAlternateGetTypeID())
        goto LABEL_133;
    }
    if (!FigCFEqual())
    {
      v15 = *(const void **)(DerivedStorage + 96);
      *(_QWORD *)(DerivedStorage + 96) = a3;
      if (a3)
        CFRetain(a3);
      if (v15)
        CFRelease(v15);
      goto LABEL_34;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_StartsOnFirstEligibleVariant")))
  {
    if (!a3)
      goto LABEL_133;
    v19 = CFBooleanGetTypeID();
    if (v19 != CFGetTypeID(a3))
      goto LABEL_133;
    *(_BYTE *)(DerivedStorage + 130) = CFBooleanGetValue((CFBooleanRef)a3) == 0;
    v10 = 0;
    *(_BYTE *)(DerivedStorage + 130) = FigGetCFPreferenceNumberWithDefault();
    goto LABEL_135;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_PrefersConcurrentSwitch")))
  {
    if (!a3)
      goto LABEL_133;
    v20 = CFBooleanGetTypeID();
    if (v20 != CFGetTypeID(a3))
      goto LABEL_133;
    v21 = *(unsigned __int8 *)(DerivedStorage + 128);
    if (v21 != CFBooleanGetValue((CFBooleanRef)a3))
    {
      *(_BYTE *)(DerivedStorage + 128) = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_34:
      v16 = fampb_setBandwidthConditions((uint64_t)a1);
LABEL_134:
      v10 = (const void *)v16;
      goto LABEL_135;
    }
LABEL_66:
    v10 = 0;
    goto LABEL_135;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_BandwidthCap")))
  {
    if (a3)
    {
      v22 = CFNumberGetTypeID();
      if (v22 == CFGetTypeID(a3))
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 192));
        v23 = *(_DWORD *)(DerivedStorage + 192);
        if (!v23)
        {
          v23 = 0x7FFFFFFF;
          *(_DWORD *)(DerivedStorage + 192) = 0x7FFFFFFF;
        }
        v24 = *(_QWORD *)(DerivedStorage + 88);
        if (v24)
        {
          v17 = v23 >= (int)FigAlternateGetPeakBitRate(v24);
          goto LABEL_40;
        }
        goto LABEL_66;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_OkayToAttemptSwitchUp")))
  {
    if (!a3)
      goto LABEL_133;
    v25 = CFBooleanGetTypeID();
    if (v25 != CFGetTypeID(a3))
      goto LABEL_133;
    v10 = 0;
    *(_BYTE *)(DerivedStorage + 420) = CFBooleanGetValue((CFBooleanRef)a3);
    goto LABEL_135;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_SwitchMinDuration")))
  {
    if (!a3)
      goto LABEL_133;
    v26 = CFNumberGetTypeID();
    if (v26 != CFGetTypeID(a3))
      goto LABEL_133;
    valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &valuePtr);
    CMTimeMakeWithSeconds(&v45, valuePtr, 1000);
    *(CMTime *)(DerivedStorage + 148) = v45;
    fampb_setupDryTimer((uint64_t)a1);
    goto LABEL_66;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_QualityGear")))
  {
    if (a3)
    {
      v27 = CFNumberGetTypeID();
      if (v27 == CFGetTypeID(a3))
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 416));
        *(_BYTE *)(DerivedStorage + 423) = 0;
        v18 = a1;
        v17 = 0;
        goto LABEL_41;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_PlayerRate")))
  {
    if (!a3)
      goto LABEL_133;
    v28 = CFGetTypeID(a3);
    if (v28 != CFNumberGetTypeID())
      goto LABEL_133;
    v29 = (void *)(DerivedStorage + 196);
    v30 = (const __CFNumber *)a3;
    v31 = kCFNumberFloat32Type;
    goto LABEL_75;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_RTT")))
  {
    if (!a3)
    {
      v10 = 0;
      *(_QWORD *)(DerivedStorage + 912) = 0;
      goto LABEL_135;
    }
    v32 = CFNumberGetTypeID();
    if (v32 != CFGetTypeID(a3))
      goto LABEL_133;
    v45.value = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v45);
    fampb_updateSmoothRTT((uint64_t)a1, v45.value);
    goto LABEL_66;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_BytesRequiredForNetworkPrediction")))
  {
    if (!*(_BYTE *)(DerivedStorage + 128))
    {
      if (!a3)
      {
        v10 = 0;
        *(_QWORD *)(DerivedStorage + 488) = 0;
        goto LABEL_135;
      }
      v33 = CFNumberGetTypeID();
      if (v33 == CFGetTypeID(a3))
      {
        v45.value = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v45);
        v10 = 0;
        *(_QWORD *)(DerivedStorage + 488) = v45.value;
        goto LABEL_135;
      }
      goto LABEL_133;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_EstimatedGOPInterval")))
  {
    if (a3)
    {
      v34 = CFGetTypeID(a3);
      if (v34 == CFNumberGetTypeID())
      {
        v45.value = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &v45);
        v10 = 0;
        *(_QWORD *)(DerivedStorage + 216) = v45.value;
        goto LABEL_135;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_PartTargetDuration")))
  {
    if (a3)
    {
      v35 = CFGetTypeID(a3);
      if (v35 == CFNumberGetTypeID())
      {
        v45.value = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &v45);
        v10 = 0;
        *(_QWORD *)(DerivedStorage + 224) = v45.value;
        goto LABEL_135;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_SwitchesQualityGearAutomatically")))
  {
    if (a3)
    {
      v36 = CFBooleanGetTypeID();
      if (v36 == CFGetTypeID(a3))
      {
        v10 = 0;
        *(_BYTE *)(DerivedStorage + 423) = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_135;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, CFSTR("AfmfpbProperty_TransitionAttributes")))
  {
    if (!a3)
      goto LABEL_133;
    v37 = CFGetTypeID(a3);
    if (v37 != CFDictionaryGetTypeID())
      goto LABEL_133;
    v10 = *(const void **)(DerivedStorage + 120);
    *(_QWORD *)(DerivedStorage + 120) = a3;
  }
  else if (CFEqual(a2, CFSTR("AfmfpbProperty_AudibleMediaSelectionOptionPersistentID")))
  {
    if (!a3)
      goto LABEL_133;
    v38 = CFGetTypeID(a3);
    if (v38 != CFNumberGetTypeID())
      goto LABEL_133;
    v10 = *(const void **)(DerivedStorage + 112);
    *(_QWORD *)(DerivedStorage + 112) = a3;
  }
  else
  {
    if (CFEqual(a2, CFSTR("AfmfpbProperty_PredictedBitrate")))
    {
      if (!a3)
        goto LABEL_133;
      v39 = CFGetTypeID(a3);
      if (v39 != CFNumberGetTypeID())
        goto LABEL_133;
      v29 = (void *)(DerivedStorage + 184);
      v30 = (const __CFNumber *)a3;
      v31 = kCFNumberSInt64Type;
LABEL_75:
      CFNumberGetValue(v30, v31, v29);
      goto LABEL_66;
    }
    if (CFEqual(a2, CFSTR("AfmfpbProperty_PendingSeekTime")))
    {
      if (!a3 || (v40 = CFGetTypeID(a3), v40 == CFDictionaryGetTypeID()))
      {
        CMTimeMakeFromDictionary(&v45, (CFDictionaryRef)a3);
        v10 = 0;
        *(CMTime *)(DerivedStorage + 384) = v45;
        goto LABEL_135;
      }
      goto LABEL_133;
    }
    if (!CFEqual(a2, CFSTR("AfmfpbProperty_RecoveryAlternate")))
    {
      if (CFEqual(a2, CFSTR("AfmfpbProperty_IsBufferFull")))
      {
        v10 = 0;
        *(_BYTE *)(DerivedStorage + 421) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        goto LABEL_135;
      }
      if (CFEqual(a2, CFSTR("AfmfpbProperty_ResourceConservationLevelWhenPaused")))
      {
        if (a3)
        {
          v42 = CFGetTypeID(a3);
          if (v42 == CFNumberGetTypeID())
          {
            v10 = 0;
            *(_DWORD *)(DerivedStorage + 424) = FigCFNumberGetSInt32();
            goto LABEL_135;
          }
        }
        goto LABEL_133;
      }
      if (!CFEqual(a2, CFSTR("AfmfpbProperty_MainPlaylistExpectedUpdateTime")))
      {
        if (CFEqual(a2, CFSTR("AfmfpbProperty_DisableTrialSwitchUpTimer")))
        {
          v10 = 0;
          *(_BYTE *)(DerivedStorage + 132) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          goto LABEL_135;
        }
        goto LABEL_133;
      }
      SInt64 = FigCFNumberGetSInt64();
      *(_QWORD *)(DerivedStorage + 232) = SInt64;
      if (SInt64 >= 1 && FigGetUpTimeNanoseconds() > *(_QWORD *)(DerivedStorage + 232))
        fampb_configurePlaybackFilterForUpdatedProperties(a1, 0);
      goto LABEL_66;
    }
    if (!a3)
    {
      v10 = *(const void **)(DerivedStorage + 104);
      *(_QWORD *)(DerivedStorage + 104) = 0;
      if (!v10)
        goto LABEL_135;
      goto LABEL_12;
    }
    v41 = FigAlternateGetTypeID();
    if (v41 != CFGetTypeID(a3))
      goto LABEL_133;
    v10 = *(const void **)(DerivedStorage + 104);
    *(_QWORD *)(DerivedStorage + 104) = a3;
  }
LABEL_10:
  CFRetain(a3);
LABEL_11:
  if (v10)
  {
LABEL_12:
    CFRelease(v10);
    goto LABEL_66;
  }
LABEL_135:
  MEMORY[0x19402EA24](*(_QWORD *)DerivedStorage);
  return v10;
}

void fampb_releaseAndClearPlaybackFilterConfig(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
}

double fampb_highestValidDeclaredSampleRate(uint64_t a1)
{
  CFIndex v1;
  double MaxAudioSampleRate;
  CFIndex Count;
  const void *ValueAtIndex;
  const void *v5;
  CFArrayRef theArray;

  theArray = 0;
  if (fampb_copyValidAlternateList(*(_QWORD *)(a1 + 80), (uint64_t)&theArray))
  {
    MaxAudioSampleRate = 0.0;
  }
  else
  {
    v1 = 0;
    MaxAudioSampleRate = 0.0;
    while (1)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (v1 >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v1);
      if (FigAlternateGetMaxAudioSampleRate((uint64_t)ValueAtIndex) > MaxAudioSampleRate)
      {
        v5 = CFArrayGetValueAtIndex(theArray, v1);
        MaxAudioSampleRate = FigAlternateGetMaxAudioSampleRate((uint64_t)v5);
      }
      ++v1;
    }
  }
  if (theArray)
    CFRelease(theArray);
  return MaxAudioSampleRate;
}

BOOL fampb_hasOnlyAudioInValidAlternateList(uint64_t a1)
{
  _BOOL8 v1;
  CFArrayRef theArray;

  theArray = 0;
  fampb_copyValidAlternateList(*(_QWORD *)(a1 + 80), (uint64_t)&theArray);
  if (!theArray)
    return 0;
  v1 = CFArrayGetCount(theArray) >= 1 && FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(theArray);
  if (theArray)
    CFRelease(theArray);
  return v1;
}

uint64_t fampb_configurePlaybackFilterForUpdatedProperties(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (*(_BYTE *)(DerivedStorage + 423))
  {
    v5 = DerivedStorage;
    if (fampb_getPredictionBandwidth(DerivedStorage, &v9))
      return 0;
    if (*(_QWORD *)(v5 + 88))
      v6 = &v9;
    else
      v6 = (uint64_t *)(v5 + 184);
    v7 = *v6;
    v9 = *v6;
  }
  else
  {
    v7 = 0;
  }
  return fampb_configurePlaybackFilterAsync(a1, v7, a2);
}

uint64_t fampb_RecordConcurrentSwitchUpCheck(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;

  v2 = result;
  v3 = *(_QWORD *)(result + 160);
  if (a2)
  {
    if (v3)
      return result;
    v4 = *(double *)(result + 176);
    if (v4 <= 2.22507386e-308)
      result = FigGetUpTimeNanoseconds();
    else
      result = (uint64_t)((*(double *)(result + 168) - v4) * 1000000000.0);
  }
  else
  {
    if (!v3)
      return result;
    result = 0;
  }
  *(_QWORD *)(v2 + 160) = result;
  return result;
}

uint64_t fampb_setBandwidthConditions(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t valid;
  int PeakBitRate;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int RequiredBWForLowLatencyAlternate;
  uint64_t v11;
  double v12;
  CFTypeRef v13;
  const void *v14;
  double v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int Count;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CFNumberRef v34;
  CFNumberRef v35;
  uint64_t v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  const __CFArray *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  CFIndex v47;
  int v48;
  double v49;
  const void *ValueAtIndex;
  int v51;
  int v52;
  double v53;
  CFTypeRef v54;
  int v55;
  int v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  float v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  CFNumberRef v75;
  CFNumberRef v76;
  uint64_t v77;
  NSObject *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v84;
  int v85;
  int ExpectedAverageBitrate;
  CFArrayRef theArray;
  __int128 v88;
  uint64_t valuePtr;
  __int128 v90;
  __int128 v91;
  _BYTE v92[120];
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 type;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[32];
  _BYTE v106[48];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!*(_QWORD *)(DerivedStorage + 88))
    return 0;
  v3 = DerivedStorage;
  valid = fampb_copyValidAlternateList(*(_QWORD *)(DerivedStorage + 80), (uint64_t)&theArray);
  if ((_DWORD)valid)
  {
    v11 = valid;
    goto LABEL_89;
  }
  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_88:
    v11 = 0;
    goto LABEL_89;
  }
  ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(v3 + 88));
  PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(v3 + 88));
  v84 = (int)(*(double *)(v3 + 208) * (double)PeakBitRate);
  v85 = PeakBitRate;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = v6;
  if (!*(_BYTE *)(v6 + 128))
  {
    v12 = *(double *)(v6 + 208) * (double)(int)(FigAlternateGetPeakBitRate(*(_QWORD *)(v6 + 88)) - 1);
    goto LABEL_13;
  }
  v8 = (uint64_t *)(v6 + 80);
  v9 = *(_QWORD *)(v7 + 88);
  if (!*(_BYTE *)(v7 + 129))
  {
    v13 = fampb_copyLowerSwitchCandidate(v8, v9, 1);
    if (!v13)
      goto LABEL_18;
    v14 = v13;
    v15 = (double)(int)FigAlternateGetExpectedAverageBitrate((uint64_t)v13);
    v12 = v15 + (double)(int)FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(v7 + 88)) * 1.1;
    CFRelease(v14);
LABEL_13:
    RequiredBWForLowLatencyAlternate = (int)v12;
    if ((int)v12 != -1)
      goto LABEL_14;
LABEL_18:
    if (dword_1EE2A30C8)
    {
      LODWORD(v102) = 0;
      LOBYTE(type) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v25 = v102;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)type))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if (v26)
      {
        v27 = *(_QWORD *)(v3 + 72);
        Count = (int)theArray;
        if (theArray)
          Count = CFArrayGetCount(theArray);
        *(_DWORD *)v105 = 136316162;
        *(_QWORD *)&v105[4] = "fampb_setBandwidthConditions";
        *(_WORD *)&v105[12] = 2048;
        *(_QWORD *)&v105[14] = a1;
        *(_WORD *)&v105[22] = 2112;
        *(_QWORD *)&v105[24] = v27;
        *(_WORD *)v106 = 1024;
        *(_DWORD *)&v106[2] = ExpectedAverageBitrate;
        *(_WORD *)&v106[6] = 1024;
        *(_DWORD *)&v106[8] = Count;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_QWORD *)(v3 + 888))
    {
      FigNetworkHistoryObserverRemoveCondition();
      *(_QWORD *)(v3 + 888) = 0;
    }
    goto LABEL_41;
  }
  RequiredBWForLowLatencyAlternate = fampb_getRequiredBWForLowLatencyAlternate((uint64_t)v8, v9);
  if (RequiredBWForLowLatencyAlternate <= 0)
    goto LABEL_18;
LABEL_14:
  v16 = fabsf(*(float *)(v3 + 196));
  if (v16 <= 1.0)
    v16 = 1.0;
  valuePtr = (uint64_t)((double)RequiredBWForLowLatencyAlternate * ceilf(v16));
  if (*(_BYTE *)(v3 + 128))
  {
    v88 = *(_OWORD *)(v3 + 656);
    v17 = *(_OWORD *)(v3 + 760);
    v18 = *(_OWORD *)(v3 + 792);
    *(_OWORD *)&v92[64] = *(_OWORD *)(v3 + 776);
    *(_OWORD *)&v92[80] = v18;
    *(_OWORD *)&v92[96] = *(_OWORD *)(v3 + 808);
    v19 = *(_OWORD *)(v3 + 696);
    v20 = *(_OWORD *)(v3 + 728);
    *(_OWORD *)v92 = *(_OWORD *)(v3 + 712);
    *(_OWORD *)&v92[16] = v20;
    *(_OWORD *)&v92[32] = *(_OWORD *)(v3 + 744);
    *(_OWORD *)&v92[48] = v17;
    v90 = *(_OWORD *)(v3 + 680);
    v91 = v19;
    v21 = *(_QWORD *)(v3 + 824);
    v22 = *(_OWORD *)(v3 + 848);
    type = *(_OWORD *)(v3 + 832);
    v100 = v22;
    v101 = *(_OWORD *)(v3 + 864);
    v23 = *(_QWORD *)(v3 + 896);
  }
  else
  {
    v88 = *(_OWORD *)(v3 + 432);
    v23 = *(_QWORD *)(v3 + 448);
    v29 = *(_OWORD *)(v3 + 536);
    v30 = *(_OWORD *)(v3 + 568);
    *(_OWORD *)&v92[64] = *(_OWORD *)(v3 + 552);
    *(_OWORD *)&v92[80] = v30;
    *(_OWORD *)&v92[96] = *(_OWORD *)(v3 + 584);
    v31 = *(_OWORD *)(v3 + 472);
    v32 = *(_OWORD *)(v3 + 504);
    *(_OWORD *)v92 = *(_OWORD *)(v3 + 488);
    *(_OWORD *)&v92[16] = v32;
    *(_OWORD *)&v92[32] = *(_OWORD *)(v3 + 520);
    *(_OWORD *)&v92[48] = v29;
    v90 = *(_OWORD *)(v3 + 456);
    v91 = v31;
    v21 = *(_QWORD *)(v3 + 600);
    v33 = *(_OWORD *)(v3 + 624);
    type = *(_OWORD *)(v3 + 608);
    v100 = v33;
    v101 = *(_OWORD *)(v3 + 640);
  }
  v111 = v88;
  v107 = *(_OWORD *)&v92[48];
  v108 = *(_OWORD *)&v92[64];
  v109 = *(_OWORD *)&v92[80];
  v110 = *(_OWORD *)&v92[96];
  *(_OWORD *)&v105[16] = v91;
  *(_OWORD *)v106 = *(_OWORD *)v92;
  *(_OWORD *)&v106[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v106[32] = *(_OWORD *)&v92[32];
  v102 = type;
  v103 = v100;
  v104 = v101;
  *(_OWORD *)v105 = v90;
  v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (v34)
  {
    v35 = v34;
    v36 = v21 | 8;
    if (*(_QWORD *)(v3 + 888))
    {
      FigNetworkHistoryObserverRemoveCondition();
      *(_QWORD *)(v3 + 888) = 0;
    }
    *((_QWORD *)&v90 + 1) = 6;
    v91 = v111;
    *(_OWORD *)&v92[88] = v107;
    *(_OWORD *)&v92[104] = v108;
    v93 = v109;
    v94 = v110;
    *(_OWORD *)&v92[24] = *(_OWORD *)&v105[16];
    *(_OWORD *)&v92[40] = *(_OWORD *)v106;
    *(_OWORD *)&v92[56] = *(_OWORD *)&v106[16];
    *(_OWORD *)&v92[72] = *(_OWORD *)&v106[32];
    *(_OWORD *)&v92[8] = *(_OWORD *)v105;
    v96 = v102;
    v97 = v103;
    *(_QWORD *)&v90 = v35;
    *(_QWORD *)v92 = v23;
    v95 = v36;
    v98 = v104;
    v11 = FigNetworkHistoryObserverAddCondition();
    CFRelease(v35);
    if ((_DWORD)v11)
      goto LABEL_89;
  }
  else
  {
    v11 = FigSignalErrorAt();
    if ((_DWORD)v11)
      goto LABEL_89;
  }
  if (dword_1EE2A30C8)
  {
    LODWORD(v102) = 0;
    LOBYTE(type) = 0;
    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v38 = v102;
    if (os_log_type_enabled(v37, (os_log_type_t)type))
      v39 = v38;
    else
      v39 = v38 & 0xFFFFFFFE;
    if (v39)
    {
      v40 = *(_QWORD *)(v3 + 72);
      v41 = *(_QWORD *)(v3 + 888);
      *(_DWORD *)v105 = 136316930;
      *(_QWORD *)&v105[4] = "fampb_setBandwidthConditions";
      *(_WORD *)&v105[12] = 2048;
      *(_QWORD *)&v105[14] = a1;
      *(_WORD *)&v105[22] = 2112;
      *(_QWORD *)&v105[24] = v40;
      *(_WORD *)v106 = 1024;
      *(_DWORD *)&v106[2] = RequiredBWForLowLatencyAlternate;
      *(_WORD *)&v106[6] = 1024;
      *(_DWORD *)&v106[8] = v85;
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = ExpectedAverageBitrate;
      *(_WORD *)&v106[18] = 1024;
      *(_DWORD *)&v106[20] = v84;
      *(_WORD *)&v106[24] = 2048;
      *(_QWORD *)&v106[26] = v41;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_41:
  v42 = theArray;
  v43 = CMBaseObjectGetDerivedStorage();
  v44 = *(_QWORD *)(v43 + 88);
  v45 = FigAlternateGetPeakBitRate(v44);
  if (CFArrayGetCount(v42) < 1)
    goto LABEL_60;
  v46 = a1;
  v47 = 0;
  v48 = -1;
  v49 = 1.0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v42, v47);
    v51 = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
    if (v51 > v45)
    {
      if (v48 == -1)
        v52 = v51;
      else
        v52 = v48;
      if (v51 >= v52)
        v48 = v52;
      else
        v48 = v51;
      FigAlternateScaleBitrateFractionToNewAlternate(v44, (uint64_t)ValueAtIndex);
      v49 = v53;
    }
    ++v47;
  }
  while (v47 < CFArrayGetCount(v42));
  a1 = v46;
  if (v48 == -1)
  {
LABEL_60:
    if (dword_1EE2A30C8)
    {
      LODWORD(v102) = 0;
      LOBYTE(type) = 0;
      v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v58 = v102;
      if (os_log_type_enabled(v57, (os_log_type_t)type))
        v59 = v58;
      else
        v59 = v58 & 0xFFFFFFFE;
      if (v59)
      {
        v60 = *(_QWORD *)(v3 + 72);
        v61 = (int)theArray;
        if (theArray)
          v61 = CFArrayGetCount(theArray);
        *(_DWORD *)v105 = 136316162;
        *(_QWORD *)&v105[4] = "fampb_setBandwidthConditions";
        *(_WORD *)&v105[12] = 2048;
        *(_QWORD *)&v105[14] = a1;
        *(_WORD *)&v105[22] = 2112;
        *(_QWORD *)&v105[24] = v60;
        *(_WORD *)v106 = 1024;
        *(_DWORD *)&v106[2] = ExpectedAverageBitrate;
        *(_WORD *)&v106[6] = 1024;
        *(_DWORD *)&v106[8] = v61;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_QWORD *)(v3 + 880))
    {
      FigNetworkHistoryObserverRemoveCondition();
      v11 = 0;
      *(_QWORD *)(v3 + 880) = 0;
      goto LABEL_89;
    }
    goto LABEL_88;
  }
  if (!*(_BYTE *)(v43 + 128))
  {
    v55 = (int)((double)(int)(v49 * (double)v48) * 1.1);
    goto LABEL_59;
  }
  v54 = fampb_copyLowerSwitchCandidate((uint64_t *)(v43 + 80), *(_QWORD *)(v43 + 88), 1);
  v55 = FigAlternateGetPeakBitRate(*(_QWORD *)(v43 + 88)) + v48;
  if (v54)
  {
    v56 = (int)((double)(int)FigAlternateGetExpectedAverageBitrate((uint64_t)v54) + (double)v48 * 1.5);
    if (v55 <= v56)
      v55 = v56;
    CFRelease(v54);
LABEL_59:
    if (v55 == -1)
      goto LABEL_60;
    goto LABEL_72;
  }
  v55 &= ~(v55 >> 31);
LABEL_72:
  v62 = fabsf(*(float *)(v3 + 196));
  if (v62 <= 1.0)
    v62 = 1.0;
  valuePtr = (uint64_t)((double)v55 * ceilf(v62));
  if (*(_BYTE *)(v3 + 128))
  {
    v88 = *(_OWORD *)(v3 + 656);
    v63 = *(_OWORD *)(v3 + 760);
    v64 = *(_OWORD *)(v3 + 792);
    *(_OWORD *)&v92[64] = *(_OWORD *)(v3 + 776);
    *(_OWORD *)&v92[80] = v64;
    *(_OWORD *)&v92[96] = *(_OWORD *)(v3 + 808);
    v65 = *(_OWORD *)(v3 + 696);
    v66 = *(_OWORD *)(v3 + 728);
    *(_OWORD *)v92 = *(_OWORD *)(v3 + 712);
    *(_OWORD *)&v92[16] = v66;
    *(_OWORD *)&v92[32] = *(_OWORD *)(v3 + 744);
    *(_OWORD *)&v92[48] = v63;
    v90 = *(_OWORD *)(v3 + 680);
    v91 = v65;
    v67 = *(_QWORD *)(v3 + 824);
    v68 = *(_OWORD *)(v3 + 848);
    type = *(_OWORD *)(v3 + 832);
    v100 = v68;
    v101 = *(_OWORD *)(v3 + 864);
    v69 = *(_QWORD *)(v3 + 896);
  }
  else
  {
    v88 = *(_OWORD *)(v3 + 432);
    v69 = *(_QWORD *)(v3 + 448);
    v70 = *(_OWORD *)(v3 + 536);
    v71 = *(_OWORD *)(v3 + 568);
    *(_OWORD *)&v92[64] = *(_OWORD *)(v3 + 552);
    *(_OWORD *)&v92[80] = v71;
    *(_OWORD *)&v92[96] = *(_OWORD *)(v3 + 584);
    v72 = *(_OWORD *)(v3 + 472);
    v73 = *(_OWORD *)(v3 + 504);
    *(_OWORD *)v92 = *(_OWORD *)(v3 + 488);
    *(_OWORD *)&v92[16] = v73;
    *(_OWORD *)&v92[32] = *(_OWORD *)(v3 + 520);
    *(_OWORD *)&v92[48] = v70;
    v90 = *(_OWORD *)(v3 + 456);
    v91 = v72;
    v67 = *(_QWORD *)(v3 + 600);
    v74 = *(_OWORD *)(v3 + 624);
    type = *(_OWORD *)(v3 + 608);
    v100 = v74;
    v101 = *(_OWORD *)(v3 + 640);
  }
  v108 = *(_OWORD *)&v92[64];
  v109 = *(_OWORD *)&v92[80];
  v110 = *(_OWORD *)&v92[96];
  v111 = v88;
  *(_OWORD *)v106 = *(_OWORD *)v92;
  *(_OWORD *)&v106[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v106[32] = *(_OWORD *)&v92[32];
  v107 = *(_OWORD *)&v92[48];
  *(_OWORD *)v105 = v90;
  *(_OWORD *)&v105[16] = v91;
  v102 = type;
  v103 = v100;
  v104 = v101;
  v75 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (v75)
  {
    v76 = v75;
    v77 = v67 | 8;
    if (*(_QWORD *)(v3 + 880))
    {
      FigNetworkHistoryObserverRemoveCondition();
      *(_QWORD *)(v3 + 880) = 0;
    }
    *((_QWORD *)&v90 + 1) = 5;
    v91 = v111;
    *(_OWORD *)&v92[88] = v107;
    *(_OWORD *)&v92[104] = v108;
    v93 = v109;
    v94 = v110;
    *(_OWORD *)&v92[24] = *(_OWORD *)&v105[16];
    *(_OWORD *)&v92[40] = *(_OWORD *)v106;
    *(_OWORD *)&v92[56] = *(_OWORD *)&v106[16];
    *(_QWORD *)&v90 = v76;
    *(_QWORD *)v92 = v69;
    *(_OWORD *)&v92[72] = *(_OWORD *)&v106[32];
    *(_OWORD *)&v92[8] = *(_OWORD *)v105;
    v95 = v77;
    v96 = v102;
    v97 = v103;
    v98 = v104;
    v11 = FigNetworkHistoryObserverAddCondition();
    CFRelease(v76);
    if ((_DWORD)v11)
      goto LABEL_89;
    goto LABEL_81;
  }
  v11 = FigSignalErrorAt();
  if (!(_DWORD)v11)
  {
LABEL_81:
    if (!dword_1EE2A30C8)
      goto LABEL_89;
    LODWORD(v102) = 0;
    LOBYTE(type) = 0;
    v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v79 = v102;
    if (os_log_type_enabled(v78, (os_log_type_t)type))
      v80 = v79;
    else
      v80 = v79 & 0xFFFFFFFE;
    if (v80)
    {
      v81 = *(_QWORD *)(v3 + 72);
      v82 = *(_QWORD *)(v3 + 880);
      *(_DWORD *)v105 = 136316930;
      *(_QWORD *)&v105[4] = "fampb_setBandwidthConditions";
      *(_WORD *)&v105[12] = 2048;
      *(_QWORD *)&v105[14] = v46;
      *(_WORD *)&v105[22] = 2112;
      *(_QWORD *)&v105[24] = v81;
      *(_WORD *)v106 = 1024;
      *(_DWORD *)&v106[2] = v55;
      *(_WORD *)&v106[6] = 1024;
      *(_DWORD *)&v106[8] = v85;
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = ExpectedAverageBitrate;
      *(_WORD *)&v106[18] = 1024;
      *(_DWORD *)&v106[20] = v84;
      *(_WORD *)&v106[24] = 2048;
      *(_QWORD *)&v106[26] = v82;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_88;
  }
LABEL_89:
  if (theArray)
    CFRelease(theArray);
  return v11;
}

uint64_t fampb_updateSmoothRTT(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  double v5;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  *(_QWORD *)(DerivedStorage + 904) = (a2 + 2 * *(_QWORD *)(DerivedStorage + 904)) / 3;
  v5 = *(double *)(DerivedStorage + 256);
  if (v5 <= 2.22507386e-308)
    result = FigGetUpTimeNanoseconds();
  else
    result = (uint64_t)((*(double *)(DerivedStorage + 248) - v5) * 1000000000.0);
  *(_QWORD *)(v4 + 912) = result;
  return result;
}

uint64_t fampb_TimebaseListener(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDeferNotificationToDispatchQueue();
}

void fampb_DeferredTimebaseListener(uint64_t a1, const void *a2)
{
  fampb_UpdateLocalBitrate((uint64_t)a2);
  CFRelease(a2);
}

uint64_t fampb_UpdateLocalBitrate(uint64_t a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeValue v6;
  CMTimeScale v7;
  CMTimeFlags v8;
  CMTimeEpoch v9;
  const void *v10;
  int v11;
  double v12;
  uint64_t (*v13)(const void *, CMTimeRange *, uint64_t *, CMTime *);
  CMTimeFlags v14;
  uint64_t v16;
  CMTimeEpoch v17;
  CMTime time2;
  CMTime v19;
  CMTime v20;
  CMTime start;
  CMTime duration;
  CMTime v23;
  CMTime rhs;
  uint64_t v25;
  CMTimeRange lhs;
  CMTime v27;
  CMTime v28;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  memset(&v20, 0, sizeof(v20));
  memset(&v19, 0, sizeof(v19));
  v16 = a1;
  v3 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v25 = 0x3FF0000000000000;
  rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  value = *MEMORY[0x1E0CA2E40];
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
  v7 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v8 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 36);
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
  MEMORY[0x19402EA0C](*v3);
  if (*((_BYTE *)v3 + 128) || FigAlternateIsIFrameOnly(v3[11]) || !v3[4])
  {
    v10 = 0;
    v11 = -15612;
  }
  else
  {
    memset(&v28, 0, sizeof(v28));
    if ((*((_BYTE *)v3 + 396) & 1) != 0)
      v28 = *(CMTime *)((_BYTE *)v3 + 16);
    else
      CMTimebaseGetTimeClampedAboveAnchorTime();
    memset(&v27, 0, sizeof(v27));
    *(_OWORD *)&lhs.start.value = *(_OWORD *)((char *)v3 + 148);
    lhs.start.epoch = *(_QWORD *)((char *)v3 + 164);
    CMTimeMultiply(&v27, &lhs.start, 2);
    memset(&v23, 0, sizeof(v23));
    fampb_calculateDuration((uint64_t)v3, &v23);
    lhs.start = v27;
    start = v23;
    CMTimeMaximum(&duration, &lhs.start, &start);
    start = v28;
    CMTimeRangeMake(&lhs, &start, &duration);
    value = lhs.start.value;
    flags = lhs.start.flags;
    timescale = lhs.start.timescale;
    epoch = lhs.start.epoch;
    v6 = lhs.duration.value;
    v7 = lhs.duration.timescale;
    v8 = lhs.duration.flags;
    v9 = lhs.duration.epoch;
    v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v11 = 0;
  }
  MEMORY[0x19402EA24](*v3);
  if (v10 && (flags & 1) != 0)
  {
    v12 = 1.0;
    if ((v8 & 1) != 0 && !v9 && (v6 & 0x8000000000000000) == 0)
    {
      v13 = *(uint64_t (**)(const void *, CMTimeRange *, uint64_t *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 136);
      if (v13)
      {
        lhs.start.value = value;
        lhs.start.timescale = timescale;
        lhs.start.flags = flags;
        lhs.start.epoch = epoch;
        lhs.duration.value = v6;
        lhs.duration.timescale = v7;
        lhs.duration.flags = v8;
        lhs.duration.epoch = 0;
        v11 = v13(v10, &lhs, &v25, &rhs);
        v12 = *(double *)&v25;
      }
      else
      {
        v11 = -12782;
      }
    }
    v27.value = rhs.value;
    v14 = rhs.flags;
    v27.timescale = rhs.timescale;
    v17 = rhs.epoch;
    v28.value = value;
    v28.timescale = timescale;
    goto LABEL_18;
  }
  v27.value = rhs.value;
  v14 = rhs.flags;
  v27.timescale = rhs.timescale;
  v17 = rhs.epoch;
  v28.value = value;
  v28.timescale = timescale;
  v12 = 1.0;
  if (v10)
LABEL_18:
    CFRelease(v10);
  MEMORY[0x19402EA0C](*DerivedStorage);
  if ((*((_BYTE *)DerivedStorage + 396) & 1) != 0)
  {
    *(_OWORD *)&lhs.start.value = *((_OWORD *)DerivedStorage + 24);
    lhs.start.epoch = DerivedStorage[50];
  }
  else
  {
    CMTimebaseGetTimeClampedAboveAnchorTime();
  }
  v20 = lhs.start;
  lhs.start.value = v28.value;
  lhs.start.timescale = v28.timescale;
  lhs.start.flags = flags;
  lhs.start.epoch = epoch;
  rhs.value = v6;
  rhs.timescale = v7;
  rhs.flags = v8;
  rhs.epoch = v9;
  CMTimeAdd(&v19, &lhs.start, &rhs);
  if (!v11)
  {
    lhs.start.value = v28.value;
    lhs.start.timescale = v28.timescale;
    lhs.start.flags = flags;
    lhs.start.epoch = epoch;
    rhs = v20;
    if (CMTimeCompare(&lhs.start, &rhs) <= 0)
    {
      lhs.start = v20;
      rhs = v19;
      if (CMTimeCompare(&lhs.start, &rhs) < 0)
      {
        if (vabdd_f64(v12, *((double *)DerivedStorage + 26)) > 2.22044605e-16
          && !FigAlternateIsIFrameOnly(DerivedStorage[11])
          && !FigAlternateIsAudioOnly(DerivedStorage[11]))
        {
          *((double *)DerivedStorage + 26) = v12;
          fampb_setBandwidthConditions(v16);
        }
        if ((v14 & 1) != 0)
        {
          CMTimebaseGetTime(&time2, (CMTimebaseRef)DerivedStorage[41]);
          lhs.start.value = v27.value;
          lhs.start.timescale = v27.timescale;
          lhs.start.flags = v14;
          lhs.start.epoch = v17;
          if (CMTimeCompare(&lhs.start, &time2) >= 1)
          {
            StopAndReleaseTimer((dispatch_object_t *)DerivedStorage + 40);
            lhs.start.value = v27.value;
            lhs.start.timescale = v27.timescale;
            lhs.start.flags = v14;
            lhs.start.epoch = v17;
            fampb_CreateAndPrimeTimebaseTimer(v16, &lhs.start, (NSObject **)DerivedStorage + 40);
          }
        }
      }
    }
  }
  return MEMORY[0x19402EA24](*DerivedStorage);
}

void fampb_CreateAndPrimeTimebaseTimer(uint64_t a1, CMTime *a2, NSObject **a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  NSObject *v8;
  OpaqueCMTimebase *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v12;
  CMTime fireTime;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = fampb_timerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 24), a1, (void (__cdecl *)(void *))fampb_TimebaseTimerListener);
  if (v7)
  {
    v8 = v7;
    if (CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 328), v7)
      || (v9 = *(OpaqueCMTimebase **)(DerivedStorage + 328),
          fireTime = *a2,
          CMTimebaseSetTimerDispatchSourceNextFireTime(v9, v8, &fireTime, 1u)))
    {
      CFRelease(v8);
    }
    else
    {
      if (dword_1EE2A30C8)
      {
        v12 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *a3 = v8;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fampb_TimebaseTimerListener()
{
  uint64_t v0;
  const void *v1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    fampb_UpdateLocalBitrate();
    CFRelease(v1);
  }
}

CMTime *fampb_calculateDuration@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  _OWORD *v4;
  CMTime *p_time1;
  CMTime v7;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v11;

  if (*(float *)(a1 + 196) >= 0.0)
  {
    v4 = (_OWORD *)(a1 + 336);
    if ((*(_BYTE *)(a1 + 396) & 1) != 0)
      v7 = *(CMTime *)(a1 + 384);
    else
      CMTimebaseGetTimeClampedAboveAnchorTime();
    *(_OWORD *)&rhs.value = *v4;
    rhs.epoch = *(_QWORD *)(a1 + 352);
    CMTimeSubtract(&time1, &rhs, &v7);
    rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    p_time1 = &time1;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 396) & 1) != 0)
      lhs = *(CMTime *)(a1 + 384);
    else
      CMTimebaseGetTimeClampedAboveAnchorTime();
    rhs = *(CMTime *)(a1 + 336);
    CMTimeSubtract(&v11, &lhs, &rhs);
    rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    p_time1 = &v11;
  }
  return CMTimeMaximum(a2, p_time1, &rhs);
}

NSObject *fampb_timerDispatchSourceCreate(dispatch_queue_t queue, uint64_t a2, void (__cdecl *a3)(void *))
{
  NSObject *v4;
  void *v5;

  v4 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, queue);
  if (v4)
  {
    v5 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_set_context(v4, v5);
    dispatch_source_set_timer(v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler_f(v4, a3);
    dispatch_source_set_cancel_handler_f(v4, 0);
    dispatch_set_finalizer_f(v4, (dispatch_function_t)FigCFRelease_5);
    dispatch_resume(v4);
  }
  return v4;
}

uint64_t fampb_configurePlaybackFilterAsync(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  CFTypeRef *v13;
  const void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  CFIndex v28;
  const __CFArray *value;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t result;
  CMTime v33;
  CMTime rhs;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = malloc_type_calloc(1uLL, 0x128uLL, 0x10E00402C2D11CCuLL);
  if (v8)
  {
    v9 = *(const void **)(v7 + 88);
    if (v9)
      CFRetain(v9);
    v10 = *(const void **)(v7 + 96);
    if (v10)
      CFRetain(v10);
    v11 = *(const void **)(v7 + 104);
    if (v11)
      CFRetain(v11);
    v12 = *(const void **)(v7 + 112);
    if (v12)
      CFRetain(v12);
    v13 = (CFTypeRef *)(v7 + 80);
    v14 = *(const void **)(v7 + 120);
    if (v14)
      CFRetain(v14);
    if (*v13)
      CFRetain(*v13);
    v15 = *(_OWORD *)v13;
    v16 = *(_OWORD *)(v7 + 96);
    v17 = *(_OWORD *)(v7 + 128);
    *(_OWORD *)(v8 + 7) = *(_OWORD *)(v7 + 112);
    *(_OWORD *)(v8 + 9) = v17;
    *(_OWORD *)(v8 + 3) = v15;
    *(_OWORD *)(v8 + 5) = v16;
    v18 = *(_OWORD *)(v7 + 144);
    v19 = *(_OWORD *)(v7 + 160);
    v20 = *(_OWORD *)(v7 + 192);
    *(_OWORD *)(v8 + 15) = *(_OWORD *)(v7 + 176);
    *(_OWORD *)(v8 + 17) = v20;
    *(_OWORD *)(v8 + 11) = v18;
    *(_OWORD *)(v8 + 13) = v19;
    v21 = *(_OWORD *)(v7 + 208);
    v22 = *(_OWORD *)(v7 + 224);
    v23 = *(_OWORD *)(v7 + 240);
    v8[25] = *(_QWORD *)(v7 + 256);
    *(_OWORD *)(v8 + 21) = v22;
    *(_OWORD *)(v8 + 23) = v23;
    *(_OWORD *)(v8 + 19) = v21;
    if (a1)
      v24 = CFRetain(a1);
    else
      v24 = 0;
    *v8 = v24;
    v25 = *(_QWORD *)(v7 + 8);
    if (v25)
      v25 = FigCFWeakReferenceHolderCopyReferencedObject();
    v8[1] = v25;
    v8[2] = *(_QWORD *)(v7 + 16);
    if ((*(_BYTE *)(v7 + 396) & 1) != 0)
      lhs = *(CMTime *)(v7 + 384);
    else
      CMTimebaseGetTimeClampedAboveAnchorTime();
    rhs = *(CMTime *)(v7 + 360);
    CMTimeAdd(&v33, &lhs, &rhs);
    *((CMTime *)v8 + 9) = v33;
    *((_DWORD *)v8 + 60) = a3;
    v8[31] = a2;
    v26 = *(_QWORD *)(v7 + 904);
    if (v26 <= 0)
      v26 = 100000;
    v8[36] = v26;
    fampb_calculateDuration(v7, &lhs);
    *(CMTime *)(v8 + 32) = lhs;
    v8[26] = 0;
    *((_BYTE *)v8 + 280) = *(_BYTE *)(v7 + 421);
    if (*(_BYTE *)(v7 + 423))
      v27 = *(_BYTE *)(v7 + 131);
    else
      v27 = 1;
    *((_BYTE *)v8 + 75) = v27;
    v28 = *(unsigned int *)(v7 + 416);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_41;
    lhs.value = 0;
    if (fampb_copyAlternateListSortedByQuality((uint64_t *)(v7 + 80), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (const __CFArray **)&lhs))goto LABEL_39;
    if (!lhs.value)
    {
LABEL_41:
      *(_DWORD *)(v7 + 416) = -1;
      *(_BYTE *)(v7 + 131) = 0;
LABEL_42:
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 24), v8, (dispatch_function_t)fampb_configurePlaybackFilterUnlocked);
      return 0;
    }
    if (CFArrayGetCount((CFArrayRef)lhs.value) < 1)
    {
LABEL_39:
      if (lhs.value)
        CFRelease((CFTypeRef)lhs.value);
      goto LABEL_41;
    }
    value = (const __CFArray *)lhs.value;
    if (lhs.value)
    {
      Count = CFArrayGetCount((CFArrayRef)lhs.value);
      value = (const __CFArray *)lhs.value;
      if (Count > v28)
      {
LABEL_36:
        ValueAtIndex = CFArrayGetValueAtIndex(value, v28);
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
        v8[26] = ValueAtIndex;
        goto LABEL_39;
      }
      if (lhs.value)
      {
        v28 = CFArrayGetCount((CFArrayRef)lhs.value) - 1;
        value = (const __CFArray *)lhs.value;
        goto LABEL_36;
      }
    }
    v28 = -1;
    goto LABEL_36;
  }
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
    goto LABEL_42;
  return result;
}

void fampb_configurePlaybackFilterUnlocked(uint64_t a1)
{
  uint64_t AllocatorForMedia;
  uint64_t *v3;
  const void *v4;
  const __CFAllocator **v5;
  CFTypeRef v6;
  const __CFAllocator *v7;
  char v8;
  int v9;
  __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 shouldSwitchUpConcurrently;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  CFIndex v20;
  _OWORD *v21;
  const void *v22;
  uint64_t (*v23)(double);
  uint64_t v24;
  uint64_t v25;
  int canSwitchDownConcurrentlyWithoutStall;
  double v27;
  __CFArray *v28;
  uint64_t v29;
  CFTypeRef v30;
  const __CFAllocator **v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  const void *v38;
  uint64_t v39;
  int v40;
  CFTypeRef v41;
  int ExpectedAverageBitrate;
  int v43;
  uint64_t PixelCount;
  unsigned int v45;
  _BOOL4 v46;
  int v47;
  char v48;
  CFTypeRef v49;
  const __CFAllocator *v50;
  int v51;
  int inserted;
  BOOL v53;
  double v54;
  int PeakBitRate;
  const __CFAllocator *v56;
  CFMutableArrayRef Mutable;
  __CFArray *v58;
  CFIndex v59;
  int v60;
  const void *ValueAtIndex;
  double v62;
  const __CFAllocator **v63;
  unsigned int (*v64)(uint64_t, const void *, CMTime *, CMTime *, _BOOL4, double);
  uint64_t v65;
  double v66;
  uint64_t v67;
  CFIndex v68;
  double Seconds;
  int v70;
  const void *v71;
  const __CFAllocator *v72;
  int v73;
  int v74;
  int v75;
  const void *v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const __CFAllocator *v81;
  _BOOL4 v82;
  CFTypeRef v83;
  CMTime cf;
  CMTime v85;
  CMTime v86;
  CFTypeRef v87;
  CFTypeRef v88;
  const __CFArray *v89;
  const void *v90;
  const __CFArray *v91;
  const void *v92[2];

  v83 = 0;
  if (!*(_QWORD *)a1)
    goto LABEL_101;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_101;
  AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateFilterTreeCreate(AllocatorForMedia, &v83))
    goto LABEL_101;
  if (!v83)
  {
    FigSignalErrorAt();
LABEL_101:
    v49 = 0;
    goto LABEL_199;
  }
  v3 = (uint64_t *)(a1 + 24);
  v4 = *(const void **)(a1 + 24);
  if (!v4 || FigAlternateFilterTreeInsertLeaf((uint64_t)v83, v4, 500))
    goto LABEL_101;
  v5 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!*(_BYTE *)(a1 + 72))
  {
    v14 = *(_DWORD *)(a1 + 240);
    if (v14 == 1)
    {
      v15 = *(_DWORD *)(a1 + 88);
      if ((v15 & 1) != 0)
      {
        if ((v15 & 6) != 0 || *(_BYTE *)(a1 + 280))
          goto LABEL_71;
      }
      else if ((v15 & 6) != 0)
      {
        goto LABEL_71;
      }
      if ((v15 & 8) == 0)
        goto LABEL_156;
    }
    else if (v14 || *(float *)(a1 + 144) == 0.0)
    {
      goto LABEL_156;
    }
LABEL_71:
    v41 = v83;
    v82 = *(float *)(a1 + 144) != 0.0;
    v91 = 0;
    v92[0] = 0;
    ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(a1 + 32));
    if (!v41 || !*(_QWORD *)(a1 + 16) || !*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 32) || *(_BYTE *)(a1 + 75))
    {
      inserted = 0;
      goto LABEL_153;
    }
    v43 = ExpectedAverageBitrate;
    fampb_copyValidAlternateList(*v3, (uint64_t)&v91);
    if (!v91)
      goto LABEL_156;
    v86.value = 0;
    cf.value = 0;
    PixelCount = FigAlternateGetPixelCount(*(_QWORD *)(a1 + 32));
    v45 = *(_DWORD *)(a1 + 88);
    if ((v45 & 4) != 0)
    {
      if (FigAlternateIsAudioOnly(*(_QWORD *)(a1 + 32)))
        v46 = 1;
      else
        v46 = !FigAlternateHasHDVideoResolution(*(_QWORD *)(a1 + 32));
    }
    else
    {
      v46 = 0;
    }
    if (*(_DWORD *)(a1 + 240) == 1)
    {
      if (((PixelCount != 0) & (v45 >> 3)) != 0)
      {
        v50 = *v5;
        v51 = FigAlternateMinimumRequiredPixelCountFilterCreate(*v5, (uint64_t)((double)PixelCount + (double)PixelCount), &v86);
        if (v51)
        {
LABEL_115:
          inserted = v51;
          goto LABEL_117;
        }
        inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v41, (const void *)v86.value, 348);
        if (inserted)
          v53 = 0;
        else
          v53 = v46;
        if (v53)
        {
LABEL_113:
          v54 = *(double *)(a1 + 80);
          PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 32));
          v51 = FigAlternateMinimumRequiredBitrateFilterCreate(v50, (int)(v54 * (double)PeakBitRate / *(double *)(a1 + 152)), &cf);
          if (!v51)
            v51 = FigAlternateFilterTreeInsertLeaf((uint64_t)v41, (const void *)cf.value, 349);
          goto LABEL_115;
        }
LABEL_117:
        if (v86.value)
          CFRelease((CFTypeRef)v86.value);
        if (cf.value)
          CFRelease((CFTypeRef)cf.value);
        if (!inserted)
        {
          v56 = *v5;
          Mutable = CFArrayCreateMutable(*v5, 0, MEMORY[0x1E0C9B378]);
          if (Mutable)
          {
            v58 = Mutable;
            v78 = (uint64_t)v41;
            v80 = (uint64_t)v56;
            if (CFArrayGetCount(v91) >= 1)
            {
              v59 = 0;
              v60 = 0;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v91, v59);
                if (FigCFEqual())
                  break;
                FigAlternateScaleBitrateFractionToNewAlternate(*(_QWORD *)(a1 + 32), (uint64_t)ValueAtIndex);
                if (v62 * (double)(int)FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex) <= (double)*(uint64_t *)(a1 + 248))
                {
                  if (FigCFEqual())
                    goto LABEL_127;
                  v63 = v5;
                  v65 = *(_QWORD *)(a1 + 8);
                  v64 = *(unsigned int (**)(uint64_t, const void *, CMTime *, CMTime *, _BOOL4, double))(a1 + 16);
                  v86 = *(CMTime *)(a1 + 256);
                  *(_OWORD *)&cf.value = kStallCheckMargin;
                  cf.epoch = 0;
                  CMTimeSubtract(&v85, &v86, &cf);
                  v66 = (double)*(uint64_t *)(a1 + 248);
                  v86 = *(CMTime *)(a1 + 216);
                  v67 = v65;
                  v5 = v63;
                  if (!v64(v67, ValueAtIndex, &v86, &v85, v82, v66))
                    goto LABEL_127;
                }
                CFArrayAppendValue(v58, ValueAtIndex);
LABEL_131:
                if (++v59 >= CFArrayGetCount(v91))
                  goto LABEL_137;
              }
              v60 = 1;
LABEL_127:
              if (v43 < (int)FigAlternateGetExpectedAverageBitrate((uint64_t)ValueAtIndex))
                v43 = FigAlternateGetExpectedAverageBitrate((uint64_t)ValueAtIndex);
              goto LABEL_131;
            }
            v60 = 0;
LABEL_137:
            if (v43 == FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(a1 + 32))
              && v60
              && *(_DWORD *)(a1 + 240) == 1)
            {
              inserted = -15616;
            }
            else
            {
              v68 = CFArrayGetCount(v58) + 1;
              if (v68 == CFArrayGetCount(v91))
              {
                if (v60)
                {
                  if (!*(_DWORD *)(a1 + 240))
                  {
                    v86 = *(CMTime *)(a1 + 256);
                    cf = *(CMTime *)(a1 + 92);
                    Seconds = CMTimeGetSeconds(&v86);
                    v86 = cf;
                    if (Seconds <= CMTimeGetSeconds(&v86))
                      CFArrayAppendValue(v58, *(const void **)(a1 + 32));
                  }
                }
              }
              if (CFArrayGetCount(v58) < 1)
              {
                inserted = 0;
              }
              else
              {
                v70 = FigAlternateDenyListFilterCreate(v80, v58, CFSTR("MonitorStallListFilter"), 0x257u, 1, v92);
                if (!v70)
                  v70 = FigAlternateFilterTreeInsertLeaf(v78, v92[0], 345);
                inserted = v70;
              }
            }
            CFRelease(v58);
            if (v92[0])
              CFRelease(v92[0]);
          }
          else
          {
            inserted = FigSignalErrorAt();
          }
        }
LABEL_153:
        if (v91)
          CFRelease(v91);
        if (inserted)
          goto LABEL_101;
        goto LABEL_156;
      }
      if (v46)
      {
        v50 = *v5;
        goto LABEL_113;
      }
    }
    inserted = 0;
    goto LABEL_117;
  }
  v6 = v83;
  cf.value = 0;
  v91 = 0;
  v92[0] = 0;
  v89 = 0;
  v90 = 0;
  if (!v83 || !*(_QWORD *)(a1 + 32))
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_84;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = 1;
  v9 = fampb_copyAlternateListSortedByQuality((uint64_t *)(a1 + 24), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 1, &v89);
  v10 = 0;
  if (!v9 && v89)
  {
    v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 248);
      if (*(_BYTE *)(a1 + 73))
      {
        memset(&v86, 0, sizeof(v86));
        v12 = *(_QWORD *)(a1 + 288);
        v85 = *(CMTime *)(a1 + 256);
        shouldSwitchUpConcurrently = fampb_shouldSwitchUpConcurrently(a1 + 24, v11, v12, &v85);
        if (*(_QWORD *)(a1 + 40))
        {
          v8 = 0;
          v9 = 0;
          goto LABEL_85;
        }
        v18 = shouldSwitchUpConcurrently;
        if (fampb_trialSwitchDownInProgress(a1 + 24)
          || (v19 = *(_QWORD *)(a1 + 288),
              v85 = *(CMTime *)(a1 + 256),
              fampb_shouldSwitchDownConcurrently(a1 + 24, v11, v19, (uint64_t)&v85, &v86)))
        {
          v16 = 0;
        }
        else if (v18)
        {
          if (fampb_ConcurrentSwitchUpValidForLongEnough(a1 + 24))
            v16 = 1;
          else
            v16 = 2;
        }
        else
        {
          v16 = 2;
        }
        v17 = *(_BYTE *)(a1 + 73) == 0;
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 240);
        v17 = 1;
      }
      v81 = v7;
      if (v17 && v16 == 1)
        v11 -= (int)FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(a1 + 32));
      if (CFArrayGetCount(v89) >= 1)
      {
        v20 = 0;
        v21 = (_OWORD *)(a1 + 256);
        do
        {
          v22 = CFArrayGetValueAtIndex(v89, v20);
          if (FigCFEqual())
          {
            if (v16 || !v20 || !*(_BYTE *)(a1 + 73))
              goto LABEL_57;
LABEL_56:
            CFArrayAppendValue(v10, v22);
            goto LABEL_57;
          }
          v23 = *(uint64_t (**)(double))(a1 + 16);
          if (v23)
          {
            v24 = *(_QWORD *)(a1 + 8);
            if (!v24)
              goto LABEL_44;
            if (!*(_BYTE *)(a1 + 75) && (v20 || !*(_BYTE *)(a1 + 73)))
            {
              v27 = (double)*(uint64_t *)(a1 + 248);
              v86 = *(CMTime *)(a1 + 216);
              *(_OWORD *)&v85.value = *v21;
              v85.epoch = *(_QWORD *)(a1 + 272);
              LODWORD(v24) = v23(v27);
              if ((_DWORD)v24)
                goto LABEL_48;
              goto LABEL_44;
            }
          }
          LODWORD(v24) = 0;
LABEL_44:
          if (v16 == 1)
          {
            v25 = *(_QWORD *)(a1 + 288);
            *(_OWORD *)&v86.value = *v21;
            v86.epoch = *(_QWORD *)(a1 + 272);
            canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyWithoutStall((uint64_t)v3, &v86, v25, v11, (uint64_t)v22, 0, 0.75);
LABEL_46:
            LODWORD(v24) = canSwitchDownConcurrentlyWithoutStall ^ 1;
            goto LABEL_55;
          }
LABEL_48:
          if (!(v24 | v16))
          {
            if (!v20 || !*(_BYTE *)(a1 + 73))
              goto LABEL_57;
            if (v11 < (int)fampb_getRequiredBWForLowLatencyAlternate((uint64_t)v3, (uint64_t)v22))
              goto LABEL_56;
            v79 = (uint64_t)v3;
            v28 = v10;
            v29 = v11;
            v30 = v6;
            v31 = v5;
            v32 = FigAlternateGetPeakBitRate((uint64_t)v22);
            v33 = v32 < (int)FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 32));
            v5 = v31;
            v6 = v30;
            v11 = v29;
            v10 = v28;
            v3 = (uint64_t *)v79;
            if (!v33)
              goto LABEL_57;
            v34 = *(_QWORD *)(a1 + 288);
            v35 = *(_QWORD *)(a1 + 32);
            *(_OWORD *)&v86.value = *v21;
            v86.epoch = *(_QWORD *)(a1 + 272);
            canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v22, v79, &v86, v34, v11, v35, 0, 1.0);
            goto LABEL_46;
          }
LABEL_55:
          if ((_DWORD)v24)
            goto LABEL_56;
LABEL_57:
          ++v20;
        }
        while (v20 < CFArrayGetCount(v89));
      }
      if (CFArrayGetCount(v10) <= 0
        || (v8 = 1,
            (v36 = FigAlternateDenyListFilterCreate((uint64_t)v81, v10, CFSTR("ConcurrentDenyListFilter"), 0x257u, 1, &v91)) == 0)&& (v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v6, v91, 345)) == 0)
      {
        if (v16 == 1)
        {
          v37 = FigAlternateNextHighestPeakBitRateFilterCreate(v81, *(_QWORD *)(a1 + 32), &v90, 1.1);
          if (!v37)
          {
            v38 = v90;
            v39 = (uint64_t)v6;
            v40 = 250;
LABEL_64:
            v37 = FigAlternateFilterTreeInsertLeaf(v39, v38, v40);
          }
        }
        else
        {
          if ((v16 & 0xFFFFFFFD) != 0)
          {
            v9 = 0;
            goto LABEL_84;
          }
          v47 = FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 32));
          v37 = FigAlternatePeakBitRateCapFilterCreate((uint64_t)v81, v47, &cf);
          if (!v37)
          {
            v9 = FigAlternateFilterTreeInsertLeaf((uint64_t)v6, (const void *)cf.value, 460);
            if (v9 | v16 || *(_BYTE *)(a1 + 73))
              goto LABEL_84;
            v37 = FigAlternateLowestVideoThenAudioFilterCreate(v81, v92);
            if (!v37)
            {
              v38 = v92[0];
              v39 = (uint64_t)v6;
              v40 = 230;
              goto LABEL_64;
            }
          }
        }
        v9 = v37;
LABEL_84:
        v8 = 1;
        goto LABEL_85;
      }
    }
    else
    {
      v36 = FigSignalErrorAt();
    }
    v9 = v36;
  }
LABEL_85:
  if (v91)
    CFRelease(v91);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if (v92[0])
    CFRelease(v92[0]);
  if (v90)
    CFRelease(v90);
  if (v10)
    CFRelease(v10);
  if (v89)
    CFRelease(v89);
  if (v9)
    v48 = 0;
  else
    v48 = v8;
  if ((v48 & 1) == 0)
    goto LABEL_101;
LABEL_156:
  v49 = v83;
  v86.value = 0;
  v85.value = 0;
  cf.value = 0;
  v91 = 0;
  v92[0] = 0;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = 0;
  if (!v83)
  {
    v75 = 0;
    goto LABEL_178;
  }
  v71 = *(const void **)(a1 + 208);
  v72 = *v5;
  if (v71)
  {
    v73 = FigAlternateSingleAlternateFilterCreate((uint64_t)*v5, v71, 0, CFSTR("GearIndexAlternateFilter"), 590, &v85);
    if (v73)
      goto LABEL_217;
    v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, (const void *)v85.value, 410);
    if (v73)
      goto LABEL_217;
  }
  v73 = FigAlternateMeasuredBitrateCapFilterCreate(v72, *(_QWORD *)(a1 + 248), 0, &v91, *(double *)(a1 + 152), *(float *)(a1 + 144));
  if (v73)
    goto LABEL_217;
  v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v91, 350);
  if (v73)
    goto LABEL_217;
  v74 = *(_DWORD *)(a1 + 136);
  if (v74 != 0x7FFFFFFF)
  {
    v73 = FigAlternatePeakBitRateCapFilterCreate((uint64_t)v72, v74, &v90);
    if (v73)
      goto LABEL_217;
    v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v90, 460);
    if (v73)
      goto LABEL_217;
  }
  if (CelestialShouldLimitConcurrent4K60HEVCDecoding())
  {
    v73 = FigAlternateLimitConcurrent4K60HEVCDecodeFilterCreate(v72, *(CFTypeRef *)(a1 + 32), &v86);
    if (v73)
      goto LABEL_217;
    v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, (const void *)v86.value, 340);
    if (v73)
      goto LABEL_217;
  }
  v73 = FigAlternateHighestRankingScoreFilterCreate(v72, &v87);
  if (v73
    || (v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v87, 310)) != 0
    || (v73 = FigAlternateFrameRateSwitchCapFilterCreate(v72, &cf)) != 0
    || (v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, (const void *)cf.value, 300)) != 0
    || (v73 = FigAlternatePlaybackScoreAndBitRateFilterCreate(v72, v92)) != 0
    || (v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v92[0], 200)) != 0
    || (v73 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v72, &v89)) != 0
    || (v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v89, 100)) != 0)
  {
LABEL_217:
    v75 = v73;
    goto LABEL_218;
  }
  v75 = FigAlternateFilterTreeCreateFilter(v49, CFSTR("BitrateFilterTree"), 600, &v88);
  if (v75)
  {
LABEL_218:
    v49 = 0;
    goto LABEL_178;
  }
  v49 = v88;
  v88 = 0;
LABEL_178:
  if (v86.value)
    CFRelease((CFTypeRef)v86.value);
  if (v85.value)
    CFRelease((CFTypeRef)v85.value);
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if (v92[0])
    CFRelease(v92[0]);
  if (v91)
    CFRelease(v91);
  if (v90)
    CFRelease(v90);
  if (v89)
    CFRelease(v89);
  if (v88)
    CFRelease(v88);
  if (v87)
    CFRelease(v87);
  if (!v75 && v49)
    fampb_notifyFilterChangeUnlocked(*(const void **)a1, v49);
LABEL_199:
  fampb_releaseAndClearPlaybackFilterConfig(a1 + 24);
  v76 = *(const void **)(a1 + 8);
  if (v76)
    CFRelease(v76);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v77 = *(const void **)(a1 + 208);
  if (v77)
    CFRelease(v77);
  free((void *)a1);
  if (v83)
    CFRelease(v83);
  if (v49)
    CFRelease(v49);
}

BOOL fampb_shouldSwitchUpConcurrently(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4)
{
  CFTypeRef v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  int ExpectedAverageBitrate;
  _BOOL8 v14;
  CFTypeRef v15;
  CMTime theArray;

  theArray = *a4;
  if (fampb_proportionOfFullBufferForConcurrentSwitching(a1, &theArray) < 0.5 || *(_QWORD *)(a1 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 49))
  {
    theArray.value = 0;
    v8 = 0;
    if (fampb_copyAlternateListSortedByQuality((uint64_t *)a1, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (const __CFArray **)&theArray))
    {
LABEL_13:
      if (theArray.value)
        CFRelease((CFTypeRef)theArray.value);
      goto LABEL_15;
    }
    if (theArray.value)
    {
      Count = CFArrayGetCount((CFArrayRef)theArray.value);
      if (Count < 2)
      {
LABEL_10:
        v8 = 0;
      }
      else
      {
        v10 = Count;
        v11 = 1;
        while (CFArrayGetValueAtIndex((CFArrayRef)theArray.value, v11 - 1) != *(const void **)(a1 + 8))
        {
          if (v10 == ++v11)
            goto LABEL_10;
        }
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.value, v11);
        v8 = CFRetain(ValueAtIndex);
      }
      goto LABEL_13;
    }
  }
  v8 = 0;
LABEL_15:
  ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(_QWORD *)(a1 + 8));
  if (!*(_BYTE *)(a1 + 49))
  {
    v14 = a2 - ExpectedAverageBitrate > ExpectedAverageBitrate;
    fampb_RecordConcurrentSwitchUpCheck(a1, v14);
    if (!v8)
      return v14;
    goto LABEL_30;
  }
  if (v8)
  {
    if ((double)(int)fampb_getRequiredBWForLowLatencyAlternate(a1, (uint64_t)v8) * 1.1 < (double)a2)
    {
      if (!*(_BYTE *)(a1 + 49))
      {
        v14 = 1;
        goto LABEL_29;
      }
      if (*(uint64_t *)(a1 + 152) < 1 || FigGetUpTimeNanoseconds() <= *(_QWORD *)(a1 + 152))
      {
        v15 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, (uint64_t)v8, 1);
        theArray = *a4;
        v14 = fampb_concurrentSwitchDownSafetyFactor(a1, (uint64_t)v15, (uint64_t)v8, &theArray, a3, a2, 0, 0) >= 1.1;
        if (v15)
          CFRelease(v15);
        goto LABEL_29;
      }
    }
    v14 = 0;
LABEL_29:
    fampb_RecordConcurrentSwitchUpCheck(a1, v14);
LABEL_30:
    CFRelease(v8);
    return v14;
  }
  fampb_RecordConcurrentSwitchUpCheck(a1, 0);
  return 0;
}

uint64_t fampb_trialSwitchDownInProgress(uint64_t a1)
{
  uint64_t result;
  int PeakBitRate;

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    PeakBitRate = FigAlternateGetPeakBitRate(result);
    return PeakBitRate < (int)FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 8));
  }
  return result;
}

uint64_t fampb_shouldSwitchDownConcurrently(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5)
{
  uint64_t v5;
  __int128 v6;
  CMTimeEpoch v7;
  int canSwitchDownConcurrentlyWithoutStall;
  uint64_t v15;
  uint64_t v16;
  int PeakBitRate;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  CFTypeRef v26;
  const void *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;

  v5 = MEMORY[0x1E0CA2E18];
  v6 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a5->value = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(v5 + 16);
  a5->epoch = v7;
  if (!*(_BYTE *)(a1 + 48) || *(float *)(a1 + 120) == 0.0)
    goto LABEL_3;
  v32 = v6;
  *(_OWORD *)&v33.value = *(_OWORD *)a4;
  v33.epoch = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    PeakBitRate = FigAlternateGetPeakBitRate(v15);
    v18 = FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 8));
    v19 = PeakBitRate > v18;
    v20 = PeakBitRate <= v18;
    v21 = v19;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 1;
  }
  if (*(_BYTE *)(a1 + 49) && (v19 || v20))
    v16 = *(_QWORD *)(a1 + 16);
  if ((int)fampb_getRequiredBWForLowLatencyAlternate(a1, v16) >= a2)
  {
    if (!*(_BYTE *)(a1 + 49) || *(uint64_t *)(a1 + 96) < 1)
      goto LABEL_32;
    v24 = (int)FigAlternateGetPeakBitRate(v16) > a2 || v19;
    v22 = v20 | v24;
    v23 = (v20 | v24) ^ 1;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  if ((v21 & v23) != 1 || (v36 = v33, fampb_proportionOfFullBufferForConcurrentSwitching(a1, &v36) >= 1.0))
  {
    v25 = v21 ^ 1;
    if (v22)
      v25 = 1;
    if ((v25 & 1) == 0)
    {
      if (*(uint64_t *)(a1 + 152) < 1)
        goto LABEL_3;
      if (FigGetUpTimeNanoseconds() <= *(_QWORD *)(a1 + 152))
        goto LABEL_3;
      if (!*(_BYTE *)(a1 + 49))
        goto LABEL_3;
      v26 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, *(_QWORD *)(a1 + 8), 0);
      if (!v26)
        goto LABEL_3;
      v27 = v26;
      *(_OWORD *)&v36.value = v32;
      v36.epoch = v7;
      v28 = *(_QWORD *)(a1 + 8);
      v35 = v33;
      v29 = fampb_concurrentSwitchDownSafetyFactor(a1, (uint64_t)v26, v28, &v35, a3, a2, 0, &v36);
      v22 = v29 <= 1.0;
      if (v29 > 1.0)
      {
        v34 = v36;
        fampb_nextTimeToCheckConcurrentSwitchDown(&v34, &v35, v29, 1.0);
        *a5 = v35;
      }
      CFRelease(v27);
    }
    if (v22)
      goto LABEL_32;
LABEL_3:
    canSwitchDownConcurrentlyWithoutStall = 1;
    return canSwitchDownConcurrentlyWithoutStall ^ 1u;
  }
LABEL_32:
  if (*(_QWORD *)(a1 + 16))
  {
    if (fampb_trialSwitchDownInProgress(a1))
    {
      canSwitchDownConcurrentlyWithoutStall = *(_BYTE *)(a1 + 49) == 0;
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 16);
      v36 = *(CMTime *)a4;
      canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyWithoutStall(a1, &v36, a3, a2, v30, a5, 0.25);
      if (canSwitchDownConcurrentlyWithoutStall)
        canSwitchDownConcurrentlyWithoutStall = (int)FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 16)) < a2;
    }
  }
  else if (*(_BYTE *)(a1 + 49))
  {
    canSwitchDownConcurrentlyWithoutStall = 0;
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 8);
    v36 = *(CMTime *)a4;
    canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyWithoutStall(a1, &v36, a3, a2, v31, a5, 0.75);
  }
  return canSwitchDownConcurrentlyWithoutStall ^ 1u;
}

BOOL fampb_ConcurrentSwitchUpValidForLongEnough(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t UpTimeNanoseconds;

  v2 = *(_QWORD *)(a1 + 160);
  if ((v2 < 1
     || ((v3 = *(double *)(a1 + 176), v3 <= 2.22507386e-308)
       ? (UpTimeNanoseconds = FigGetUpTimeNanoseconds(), v2 = *(_QWORD *)(a1 + 160))
       : (UpTimeNanoseconds = (uint64_t)((*(double *)(a1 + 168) - v3) * 1000000000.0)),
         UpTimeNanoseconds - v2 < (uint64_t)(*(double *)(a1 + 144) * 0.95 * 1000000000.0)))
    && *(_BYTE *)(a1 + 49))
  {
    return *(_BYTE *)(a1 + 52) != 0;
  }
  else
  {
    return 1;
  }
}

uint64_t fampb_canSwitchDownConcurrentlyWithoutStall(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, CMTime *a6, float a7)
{
  int v14;
  CFTypeRef v15;
  const void *v16;
  int canSwitchDownConcurrentlyToAlternateWithoutStall;
  unsigned __int8 v18;
  BOOL v19;
  char v20;
  const void *v21;
  CFTypeRef v22;
  int v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  CMTime *v28;
  CMTime v29;

  v14 = *(unsigned __int8 *)(a1 + 49);
  v15 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, a5, *(_BYTE *)(a1 + 49) == 0);
  if (v15)
  {
    v16 = v15;
    v29 = *a2;
    v28 = a6;
    canSwitchDownConcurrentlyToAlternateWithoutStall = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v15, a1, &v29, a3, a4, a5, a6, a7);
    v18 = canSwitchDownConcurrentlyToAlternateWithoutStall;
    if (v14)
      v19 = canSwitchDownConcurrentlyToAlternateWithoutStall == 0;
    else
      v19 = 0;
    v20 = !v19;
    if (v19)
    {
      while (1)
      {
        v22 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, (uint64_t)v16, 0);
        v21 = v22;
        if (!v22)
          break;
        CFRetain(v22);
        CFRelease(v16);
        CFRelease(v21);
        v29 = *a2;
        v23 = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v21, a1, &v29, a3, a4, a5, v28, a7);
        v18 = v23;
        if (v14)
          v24 = v23 == 0;
        else
          v24 = 0;
        v20 = !v24;
        v16 = v21;
        if (!v24)
          goto LABEL_22;
      }
      CFRelease(v16);
    }
    else
    {
      v21 = v16;
    }
LABEL_22:
    v25 = v20 ^ 1;
    a6 = v28;
    if (v28)
      goto LABEL_23;
  }
  else
  {
    v21 = 0;
    v25 = 1;
    v18 = 1;
    if (a6)
    {
LABEL_23:
      v26 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)&a6->value = *MEMORY[0x1E0CA2E18];
      a6->epoch = *(_QWORD *)(v26 + 16);
    }
  }
  if ((v25 & 1) == 0)
    CFRelease(v21);
  return v18;
}

uint64_t fampb_getRequiredBWForLowLatencyAlternate(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  const void *v4;
  int ExpectedAverageBitrate;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 48))
    return 0;
  if (!*(_BYTE *)(a1 + 49))
    return FigAlternateGetExpectedAverageBitrate(a2);
  v3 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, a2, 0);
  if (!v3)
    return 0;
  v4 = v3;
  ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(a2);
  v6 = FigAlternateGetPeakBitRate((uint64_t)v4) + ExpectedAverageBitrate;
  CFRelease(v4);
  return v6;
}

float fampb_proportionOfFullBufferForConcurrentSwitching(uint64_t a1, CMTime *a2)
{
  double Seconds;
  double v4;
  double v5;
  CMTime v7;

  v7 = *a2;
  Seconds = CMTimeGetSeconds(&v7);
  v4 = *(double *)(a1 + 144);
  if (v4 <= 0.0)
  {
    v7 = *(CMTime *)(a1 + 68);
    v5 = CMTimeGetSeconds(&v7);
  }
  else
  {
    v5 = v4 + v4;
  }
  return Seconds / v5;
}

float fampb_concurrentSwitchDownSafetyFactor(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, uint64_t a5, uint64_t a6, CMTime *a7, CMTime *a8)
{
  double Seconds;
  double v16;
  double v17;
  float v18;
  double v19;
  double v20;
  int PeakBitRate;
  uint64_t v22;
  uint64_t v23;
  CMTime v25;
  CMTime time;
  CMTime lhs;

  lhs = *a4;
  *(_OWORD *)&v25.value = kStallThreshold;
  v25.epoch = 0;
  CMTimeSubtract(&time, &lhs, &v25);
  Seconds = CMTimeGetSeconds(&time);
  v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v16 = *(double *)(a1 + 144);
  if (v16 <= 0.0)
  {
    lhs = *(CMTime *)(a1 + 68);
    v16 = CMTimeGetSeconds(&lhs) * 0.5;
  }
  v17 = *(double *)(a1 + 136);
  v18 = 0.0;
  v19 = NAN;
  if (v17 > 0.0 && a3 != a2 && a3 && a6)
  {
    v20 = v16 + v17;
    PeakBitRate = FigAlternateGetPeakBitRate(a2);
    v22 = *(_QWORD *)(a1 + 96);
    if (v22 <= 0)
      v23 = 0;
    else
      v23 = 8 * v22;
    v19 = (double)a5 / 1000000000.0
        + (double)a5 / 1000000000.0
        + (double)(v23 + (uint64_t)(v20 * (double)PeakBitRate)) / (double)a6;
    CMTimeMakeWithSeconds(&v25, fmax(v16 + Seconds - v19, 0.0), 1000000);
    lhs = v25;
    v18 = fampb_proportionOfFullBufferForConcurrentSwitching(a1, &lhs);
  }
  if (a7)
  {
    CMTimeMakeWithSeconds(&lhs, v19, 1000000);
    *a7 = lhs;
  }
  if (a8)
    *a8 = v25;
  return v18;
}

CMTime *fampb_nextTimeToCheckConcurrentSwitchDown@<X0>(CMTime *a1@<X0>, CMTime *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  Float64 Seconds;
  CMTime rhs;
  CMTime time;

  time = *a1;
  Seconds = CMTimeGetSeconds(&time);
  CMTimeMakeWithSeconds(&rhs, Seconds / a3 * a4, 90000);
  time = *a1;
  return CMTimeSubtract(a2, &time, &rhs);
}

uint64_t fampb_copyFilterForCurrentState(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v5 = (CFTypeRef)v4[7];
  if (v5)
    v5 = CFRetain(v5);
  *a2 = v5;
  MEMORY[0x19402EA24](*v4);
  return 0;
}

__n128 fampb_primeTimeTillDryTimer(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __n128 *v6;
  NSObject *v7;
  __n128 v8;
  unint64_t v9;
  _OWORD *v10;
  __n128 result;
  __n128 *v12;
  OpaqueCMTimebase *v13;
  NSObject *v14;
  __int128 v15;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = (__n128 *)MEMORY[0x1E0CA2E18];
  if (!*(_QWORD *)(DerivedStorage + 264))
  {
    v7 = fampb_timerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 24), a1, (void (__cdecl *)(void *))fampb_switchLowTimerProcUnlocked);
    *(_QWORD *)(v5 + 264) = v7;
    if (v7)
      CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v5 + 328), v7);
    v8 = *v6;
    *(__n128 *)(v5 + 272) = *v6;
    v9 = v6[1].n128_u64[0];
    *(_QWORD *)(v5 + 288) = v9;
    *(__n128 *)(v5 + 296) = v8;
    *(_QWORD *)(v5 + 312) = v9;
  }
  v10 = (_OWORD *)(v5 + 272);
  if ((*(_BYTE *)(v5 + 284) & 1) == 0
    || (lhs = *a2,
        *(_OWORD *)&rhs.value = xmmword_1932FC770,
        rhs.epoch = 0,
        CMTimeAdd(&time1, &lhs, &rhs),
        *(_OWORD *)&lhs.value = *v10,
        lhs.epoch = *(_QWORD *)(v5 + 288),
        CMTimeCompare(&time1, &lhs) < 0))
  {
    v13 = *(OpaqueCMTimebase **)(v5 + 328);
    v14 = *(NSObject **)(v5 + 264);
    lhs = *a2;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v13, v14, &lhs, 1u);
    v15 = *(_OWORD *)&a2->value;
    *(_QWORD *)(v5 + 288) = a2->epoch;
    *v10 = v15;
    result = *v6;
    *(__n128 *)(v5 + 296) = *v6;
    *(_QWORD *)(v5 + 312) = v6[1].n128_u64[0];
  }
  else
  {
    *(_OWORD *)&lhs.value = *v10;
    lhs.epoch = *(_QWORD *)(v5 + 288);
    *(_OWORD *)&rhs.value = xmmword_1932FC770;
    rhs.epoch = 0;
    CMTimeAdd(&time2, &lhs, &rhs);
    lhs = *a2;
    if (CMTimeCompare(&lhs, &time2) >= 1)
    {
      v12 = (__n128 *)(v5 + 296);
      if ((*(_BYTE *)(v5 + 308) & 1) == 0
        || (lhs = *a2, *(__n128 *)&rhs.value = *v12, rhs.epoch = *(_QWORD *)(v5 + 312), CMTimeCompare(&lhs, &rhs) >= 1))
      {
        result = *(__n128 *)&a2->value;
        *(_QWORD *)(v5 + 312) = a2->epoch;
        *v12 = result;
      }
    }
  }
  return result;
}

void fampb_switchLowTimerProcUnlocked()
{
  uint64_t v0;
  const void *v1;
  _QWORD *DerivedStorage;
  uint64_t MainSegmentBytesInTransitUnlocked;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  float v7;
  OpaqueCMTimebase *v8;
  NSObject *v9;
  OpaqueCMTimebase *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime time2;
  CMTime v19;
  CMTime rhs;
  CMTime lhs;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MainSegmentBytesInTransitUnlocked = fampb_getMainSegmentBytesInTransitUnlocked();
    MEMORY[0x19402EA0C](*DerivedStorage);
    DerivedStorage[22] = MainSegmentBytesInTransitUnlocked;
    v4 = CMBaseObjectGetDerivedStorage();
    v5 = v4;
    if ((*(_BYTE *)(v4 + 308) & 1) == 0)
      goto LABEL_20;
    memset(&v19, 0, sizeof(v19));
    if ((*(_BYTE *)(v4 + 396) & 1) != 0)
      v19 = *(CMTime *)(v4 + 384);
    else
      CMTimebaseGetTimeClampedAboveAnchorTime();
    v6 = (_OWORD *)(v5 + 296);
    v7 = *(float *)(v5 + 196);
    if (v7 >= 0.0)
    {
      lhs = v19;
      *(_OWORD *)&rhs.value = xmmword_1932FC770;
      rhs.epoch = 0;
      CMTimeAdd(&time2, &lhs, &rhs);
      *(_OWORD *)&lhs.value = *v6;
      lhs.epoch = *(_QWORD *)(v5 + 312);
      if (CMTimeCompare(&lhs, &time2) >= 1)
      {
        v8 = *(OpaqueCMTimebase **)(v5 + 328);
        v9 = *(NSObject **)(v5 + 264);
        *(_OWORD *)&lhs.value = *v6;
        lhs.epoch = *(_QWORD *)(v5 + 312);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v8, v9, &lhs, 1u);
        if ((*(_BYTE *)(v5 + 396) & 1) != 0)
          v17 = *(CMTime *)(v5 + 384);
        else
          CMTimebaseGetTimeClampedAboveAnchorTime();
        *(_OWORD *)&lhs.value = *v6;
        lhs.epoch = *(_QWORD *)(v5 + 312);
        if (CMTimeCompare(&lhs, &v17) > 0)
        {
LABEL_17:
          *(_OWORD *)(v5 + 272) = *v6;
          *(_QWORD *)(v5 + 288) = *(_QWORD *)(v5 + 312);
          v12 = MEMORY[0x1E0CA2E18];
          *v6 = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(v5 + 312) = *(_QWORD *)(v12 + 16);
LABEL_26:
          MEMORY[0x19402EA24](*DerivedStorage);
          CFRelease(v1);
          return;
        }
LABEL_20:
        v13 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v5 + 272) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v5 + 288) = *(_QWORD *)(v13 + 16);
        if (DerivedStorage[11])
        {
          if ((*((_BYTE *)DerivedStorage + 396) & 1) != 0)
            v14 = *((_OWORD *)DerivedStorage + 24);
          else
            CMTimebaseGetTimeClampedAboveAnchorTime();
          if ((BYTE12(v14) & 1) != 0)
            fampb_attemptToSwitch(v1, 0, 0);
        }
        goto LABEL_26;
      }
      v7 = *(float *)(v5 + 196);
    }
    if (v7 < 0.0)
    {
      lhs = v19;
      *(_OWORD *)&rhs.value = xmmword_1932FC770;
      rhs.epoch = 0;
      CMTimeSubtract(&v16, &lhs, &rhs);
      *(_OWORD *)&lhs.value = *v6;
      lhs.epoch = *(_QWORD *)(v5 + 312);
      if (CMTimeCompare(&lhs, &v16) < 0)
      {
        v10 = *(OpaqueCMTimebase **)(v5 + 328);
        v11 = *(NSObject **)(v5 + 264);
        *(_OWORD *)&lhs.value = *v6;
        lhs.epoch = *(_QWORD *)(v5 + 312);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v10, v11, &lhs, 1u);
        if ((*(_BYTE *)(v5 + 396) & 1) != 0)
          v15 = *(CMTime *)(v5 + 384);
        else
          CMTimebaseGetTimeClampedAboveAnchorTime();
        *(_OWORD *)&lhs.value = *v6;
        lhs.epoch = *(_QWORD *)(v5 + 312);
        if (CMTimeCompare(&lhs, &v15) < 0)
          goto LABEL_17;
      }
    }
    goto LABEL_20;
  }
}

uint64_t fampb_AlternateRankingScoreComparator(uint64_t a1, uint64_t a2)
{
  double RankingScore;
  double v4;

  RankingScore = FigAlternateGetRankingScore(a1);
  v4 = FigAlternateGetRankingScore(a2);
  return (__PAIR128__(RankingScore > v4, *(unint64_t *)&RankingScore) - *(unint64_t *)&v4) >> 64;
}

unint64_t fampb_AlternatePeakBitrateComparator(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v4;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v4 = FigAlternateGetPeakBitRate(a2);
  return (PeakBitRate > v4) - (unint64_t)(PeakBitRate < v4);
}

uint64_t MTAudioProcessingTapXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2 || (_UNKNOWN *)CMBaseObjectGetVTable() != &aptapR_VTable)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t MTAudioProcessingTapRemoteGetServerObjectToken(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = MTAudioProcessingTapXPCRemoteGetObjectID(a1, &v4);
  if (!(_DWORD)result)
    *a2 = v4;
  return result;
}

OSStatus MTAudioProcessingTapCreate(CFAllocatorRef allocator, const MTAudioProcessingTapCallbacks *callbacks, MTAudioProcessingTapCreationFlags flags, MTAudioProcessingTapRef *tapOut)
{
  OSStatus v7;
  uint64_t DerivedStorage;
  __int128 v9;
  __int128 v10;
  int process_high;
  void (*v12)(_QWORD, _QWORD, uint64_t);
  uint64_t v13;
  OSStatus v14;
  OSStatus v15;

  if (callbacks->version || !callbacks->process || (flags & 3) == 0 || (flags & 3) == 3)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_15;
  }
  MTAudioProcessingTapGetClassID();
  v7 = CMDerivedObjectCreate();
  if (v7)
  {
LABEL_15:
    v15 = v7;
    goto LABEL_13;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(_OWORD *)((char *)&callbacks->init + 4);
  v9 = *(_OWORD *)((char *)&callbacks->prepare + 4);
  process_high = HIDWORD(callbacks->process);
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)&callbacks->version;
  *(_OWORD *)(DerivedStorage + 48) = v10;
  *(_DWORD *)(DerivedStorage + 80) = process_high;
  *(_OWORD *)(DerivedStorage + 64) = v9;
  *(_DWORD *)(DerivedStorage + 112) = flags;
  *(_BYTE *)(DerivedStorage + 128) = 0;
  v12 = *(void (**)(_QWORD, _QWORD, uint64_t))(DerivedStorage + 44);
  if (v12)
    v12(0, *(_QWORD *)(DerivedStorage + 36), DerivedStorage + 120);
  *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = 0;
  v13 = aptapR_EnsureClientEstablished(*(_DWORD *)(DerivedStorage + 112));
  *(_QWORD *)(DerivedStorage + 136) = v13;
  if (!v13)
  {
    v14 = FigSignalErrorAt();
LABEL_17:
    v15 = v14;
    goto LABEL_13;
  }
  v14 = FigXPCCreateBasicMessage();
  if (v14)
    goto LABEL_17;
  xpc_dictionary_set_uint64(0, "Flags", flags);
  v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v14)
    goto LABEL_17;
  *(_QWORD *)(DerivedStorage + 8) = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  v15 = FigXPCRemoteClientAssociateObject();
  if (!v15)
    *tapOut = 0;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t aptapR_EnsureClientEstablished(int a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_once_t *v6;
  _QWORD *v7;
  _QWORD v8[5];
  _QWORD block[5];
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v10[2] = 0x5800000000;
  v11 = xmmword_1E2FA05D0;
  v12 = *(_OWORD *)&off_1E2FA05E0;
  v13 = xmmword_1E2FA05F0;
  v10[0] = 0;
  v10[1] = v10;
  v14 = unk_1E2FA0600;
  if ((a1 & 0x1000000) != 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __aptapR_EnsureClientEstablished_block_invoke;
    block[3] = &unk_1E2FA0618;
    block[4] = v10;
    if (aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForAirplaydSetupOnce == -1)
      goto LABEL_5;
    v6 = &aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForAirplaydSetupOnce;
    v7 = block;
    goto LABEL_13;
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __aptapR_EnsureClientEstablished_block_invoke_2;
  v8[3] = &unk_1E2FA0640;
  v8[4] = v10;
  if (aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForMediaplaybackdSetupOnce != -1)
  {
    v6 = &aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForMediaplaybackdSetupOnce;
    v7 = v8;
LABEL_13:
    dispatch_once(v6, v7);
  }
LABEL_5:
  v2 = (uint64_t *)&gAudioProcessingTapRemoteClientForAirplayd;
  if ((a1 & 0x1000000) == 0)
    v2 = (uint64_t *)&gAudioProcessingTapRemoteClientForMediaplaybackd;
  v3 = *v2;
  if (aptapR_EnsureClientEstablished_err)
    v4 = 0;
  else
    v4 = v3;
  _Block_object_dispose(v10, 8);
  return v4;
}

void *__cdecl MTAudioProcessingTapGetStorage(MTAudioProcessingTapRef tap)
{
  return *(void **)(CMBaseObjectGetDerivedStorage() + 120);
}

OSStatus MTAudioProcessingTapGetSourceAudio(MTAudioProcessingTapRef tap, CMItemCount numberFrames, AudioBufferList *bufferListInOut, MTAudioProcessingTapFlags *flagsOut, CMTimeRange *timeRangeOut, CMItemCount *numberFramesOut)
{
  UInt32 v10;
  uint64_t DerivedStorage;
  uint64_t v13;

  v10 = numberFrames;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    v13 = DerivedStorage + 24;
    while (1)
    {
      v13 = *(_QWORD *)v13;
      if (!v13)
        break;
      if (*(_BYTE *)(v13 + 81) == 1)
      {
        if (!*(_QWORD *)(v13 + 8))
          return FigSignalErrorAt();
        return aptapR_GetSourceAudio((uint64_t)tap, v13, v10, bufferListInOut, flagsOut, timeRangeOut, numberFramesOut);
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t aptapR_GetSourceAudio(uint64_t a1, uint64_t a2, UInt32 a3, AudioBufferList *a4, AudioQueueProcessingTapFlags *a5, _OWORD *a6, _QWORD *a7)
{
  uint64_t result;
  __int128 v14;
  _OWORD v15[3];
  UInt32 outNumberFrames;
  AudioQueueProcessingTapFlags outFlags;

  outFlags = 0;
  outNumberFrames = 0;
  if ((*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 112) & 4) != 0)
    return 4294954516;
  result = AudioQueueProcessingTapGetSourceAudio(*(AudioQueueProcessingTapRef *)(a2 + 8), a3, *(AudioTimeStamp **)(a2 + 88), &outFlags, &outNumberFrames, a4);
  if (!(_DWORD)result)
  {
    if (a5)
      *a5 = outFlags;
    if (a7)
      *a7 = outNumberFrames;
    if (a6)
    {
      aptapR_GetMediaTimeRange(a2, v15);
      result = 0;
      v14 = v15[1];
      *a6 = v15[0];
      a6[1] = v14;
      a6[2] = v15[2];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MTAudioProcessingTapGetMediaTimeRange(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    v5 = DerivedStorage + 24;
    while (1)
    {
      v5 = *(_QWORD *)v5;
      if (!v5)
        break;
      if (*(_BYTE *)(v5 + 81) == 1)
      {
        if (!*(_QWORD *)(v5 + 8))
          return FigSignalErrorAt();
        aptapR_GetMediaTimeRange(v5, v8);
        v6 = v8[1];
        *a3 = v8[0];
        a3[1] = v6;
        a3[2] = v8[2];
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

double aptapR_GetMediaTimeRange@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  double result;

  v4 = MEMORY[0x1E0CA2E40];
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a2 = *MEMORY[0x1E0CA2E40];
  a2[1] = v5;
  a2[2] = *(_OWORD *)(v4 + 32);
  if (!AudioQueueProcessingTapGetQueueTime_CM2())
    return MTAudioProcessingTapConvertQueueTimeToMediaTime(0, (int)(*(double *)(a1 + 40) + 0.5), 0, 0, (uint64_t)a2, 0.0, 0.0, 0.0);
  return result;
}

uint64_t MTMultitrackAudioProcessingTapCreate(uint64_t a1, unint64_t *a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void (*v14)(_QWORD, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  if (*a2 >= 2)
    goto LABEL_5;
  if (v4 == 1)
  {
    if (!a2[9])
    {
LABEL_5:
      v8 = FigSignalErrorAt();
LABEL_6:
      v9 = v8;
      goto LABEL_18;
    }
  }
  else if (v4 || !a2[6])
  {
    goto LABEL_5;
  }
  if ((a3 & 3) == 0 || (a3 & 3) == 3)
    goto LABEL_5;
  MTAudioProcessingTapGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    goto LABEL_6;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *((_OWORD *)a2 + 4);
  v13 = *((_OWORD *)a2 + 1);
  v12 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(DerivedStorage + 80) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(DerivedStorage + 96) = v11;
  *(_OWORD *)(DerivedStorage + 48) = v13;
  *(_OWORD *)(DerivedStorage + 64) = v12;
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)a2;
  *(_DWORD *)(DerivedStorage + 112) = a3;
  *(_BYTE *)(DerivedStorage + 128) = 1;
  v14 = *(void (**)(_QWORD, _QWORD, uint64_t))(DerivedStorage + 48);
  if (v14)
    v14(0, *(_QWORD *)(DerivedStorage + 40), DerivedStorage + 120);
  *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = 0;
  v15 = aptapR_EnsureClientEstablished(*(_DWORD *)(DerivedStorage + 112));
  *(_QWORD *)(DerivedStorage + 136) = v15;
  if (!v15)
  {
    v16 = FigSignalErrorAt();
LABEL_20:
    v9 = v16;
    goto LABEL_18;
  }
  v16 = FigXPCCreateBasicMessage();
  if ((_DWORD)v16)
    goto LABEL_20;
  xpc_dictionary_set_uint64(0, "Flags", a3 | 0x100000000);
  v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v16)
    goto LABEL_20;
  *(_QWORD *)(DerivedStorage + 8) = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  v9 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)v9)
    *a4 = 0;
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t MTAudioProcessingTapGetTrackSourceAudio(uint64_t a1, int a2, UInt32 a3, AudioBufferList *a4, AudioQueueProcessingTapFlags *a5, _OWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
    return FigSignalErrorAt();
  if (*(_QWORD *)(DerivedStorage + 32))
    return FigSignalErrorAt();
  v15 = *(_QWORD *)(DerivedStorage + 24);
  if (!v15)
    return FigSignalErrorAt();
  while (!*(_BYTE *)(v15 + 81) || *(_DWORD *)(v15 + 24) != a2)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      return FigSignalErrorAt();
  }
  if (*(_QWORD *)(v15 + 8))
    return aptapR_GetSourceAudio(a1, v15, a3, a4, a5, a6, a7);
  else
    return FigSignalErrorAt();
}

uint64_t MTAudioProcessingTapGetStreamSourceAudio(uint64_t a1, int a2, UInt32 a3, AudioBufferList *a4, AudioQueueProcessingTapFlags *a5, _OWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
    return FigSignalErrorAt();
  if (*(_QWORD *)(DerivedStorage + 32) != 1)
    return FigSignalErrorAt();
  v15 = *(_QWORD *)(DerivedStorage + 24);
  if (!v15)
    return FigSignalErrorAt();
  while (!*(_BYTE *)(v15 + 81) || *(_DWORD *)(v15 + 28) != a2)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      return FigSignalErrorAt();
  }
  if (*(_QWORD *)(v15 + 8))
    return aptapR_GetSourceAudio(a1, v15, a3, a4, a5, a6, a7);
  else
    return FigSignalErrorAt();
}

uint64_t MTAudioProcessingTapGetTrackMediaTimeRange(uint64_t a1, int a2, uint64_t a3, _OWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
    return FigSignalErrorAt();
  if (*(_QWORD *)(DerivedStorage + 32))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 24);
  if (!v7)
    return FigSignalErrorAt();
  while (!*(_BYTE *)(v7 + 81) || *(_DWORD *)(v7 + 24) != a2)
  {
    v7 = *(_QWORD *)v7;
    if (!v7)
      return FigSignalErrorAt();
  }
  if (!*(_QWORD *)(v7 + 8))
    return FigSignalErrorAt();
  aptapR_GetMediaTimeRange(v7, v10);
  v9 = v10[1];
  *a4 = v10[0];
  a4[1] = v9;
  a4[2] = v10[2];
  return 0;
}

uint64_t MTAudioProcessingTapGetStreamMediaTimeRange(uint64_t a1, int a2, uint64_t a3, _OWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
    return FigSignalErrorAt();
  if (*(_QWORD *)(DerivedStorage + 32) != 1)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 24);
  if (!v7)
    return FigSignalErrorAt();
  while (!*(_BYTE *)(v7 + 81) || *(_DWORD *)(v7 + 28) != a2)
  {
    v7 = *(_QWORD *)v7;
    if (!v7)
      return FigSignalErrorAt();
  }
  if (!*(_QWORD *)(v7 + 8))
    return FigSignalErrorAt();
  aptapR_GetMediaTimeRange(v7, v10);
  v9 = v10[1];
  *a4 = v10[0];
  a4[1] = v9;
  a4[2] = v10[2];
  return 0;
}

uint64_t aptapR_BaseClass_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *i;
  void (*v4)(uint64_t);
  OpaqueAudioQueueProcessingTap *v5;
  _QWORD *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = 1;
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 1)
    && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage()))
  {
    goto LABEL_17;
  }
  for (i = *(_QWORD **)(DerivedStorage + 24); i; i = (_QWORD *)*i)
    aptapR_UnprepareTapIfPrepared(a1, (uint64_t)i);
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    v4 = *(void (**)(uint64_t))(DerivedStorage + 56);
    if (!v4)
      goto LABEL_14;
    goto LABEL_10;
  }
  v4 = *(void (**)(uint64_t))(DerivedStorage + 52);
  if (v4)
LABEL_10:
    v4(a1);
LABEL_14:
  while (1)
  {
    v6 = *(_QWORD **)(DerivedStorage + 24);
    if (!v6)
      break;
    v5 = (OpaqueAudioQueueProcessingTap *)v6[1];
    *(_QWORD *)(DerivedStorage + 24) = *v6;
    if (v5)
      AudioQueueProcessingTapDispose(v5);
    free(v6);
  }
  if (*(_QWORD *)(DerivedStorage + 16))
    FigSimpleMutexDestroy();
LABEL_17:
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *aptapR_BaseClass_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;
  const __CFString *v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    v4 = *(_QWORD *)(DerivedStorage + 32);
    v5 = *(_QWORD *)(DerivedStorage + 8);
    v6 = CFGetRetainCount(a1);
    if (v4 == 1)
    {
      v16 = *(_QWORD *)(DerivedStorage + 104);
      v17 = *(unsigned int *)(DerivedStorage + 112);
      v15 = *(_OWORD *)(DerivedStorage + 88);
      v13 = *(_QWORD *)(DerivedStorage + 72);
      v14 = *(_QWORD *)(DerivedStorage + 80);
      v11 = *(_QWORD *)(DerivedStorage + 56);
      v12 = *(_QWORD *)(DerivedStorage + 64);
      v7 = CFSTR("<MTMultitrackAudioProcessingTap(XPC) V1 %p> ObjectID %lld Retain count %d Created with i/f/p/u/t/p2/u2/t2 callbacks = {%p/%p/%p/%p/%p/%p/%p/%p} flags = 0x%x");
    }
    else
    {
      v14 = *(_QWORD *)(DerivedStorage + 80);
      *(_QWORD *)&v15 = *(unsigned int *)(DerivedStorage + 112);
      v12 = *(_QWORD *)(DerivedStorage + 64);
      v13 = *(_QWORD *)(DerivedStorage + 72);
      v11 = *(_QWORD *)(DerivedStorage + 56);
      v7 = CFSTR("<MTMultitrackAudioProcessingTap(XPC) V0 %p> ObjectID %lld Retain count %d Created with i/f/p/u/t callbacks = {%p/%p/%p/%p/%p} flags = 0x%x");
    }
    CFStringAppendFormat(Mutable, 0, v7, a1, v5, v6, *(_QWORD *)(DerivedStorage + 48), v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v8 = *(_QWORD *)(DerivedStorage + 8);
    v9 = CFGetRetainCount(a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("<MTAudioProcessingTapRemote(XPC) %p> ObjectID %lld Retain count %d Created with i/f/p/u/t callbacks = {%p/%p/%p/%p/%p} flags = 0x%x"), a1, v8, v9, *(_QWORD *)(DerivedStorage + 44), *(_QWORD *)(DerivedStorage + 52), *(_QWORD *)(DerivedStorage + 60), *(_QWORD *)(DerivedStorage + 68), *(_QWORD *)(DerivedStorage + 76), *(unsigned int *)(DerivedStorage + 112));
  }
  return Mutable;
}

uint64_t aptapR_UnprepareTapIfPrepared(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(a2 + 80))
  {
    if (!*(_BYTE *)(result + 128))
    {
      v8 = *(uint64_t (**)(uint64_t))(result + 68);
      if (v8)
        result = v8(a1);
      goto LABEL_12;
    }
    v5 = *(_QWORD *)(result + 32);
    if (v5)
    {
      if (v5 != 1)
        goto LABEL_12;
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(result + 96);
      if (!v6)
        goto LABEL_12;
      v7 = *(unsigned int *)(a2 + 28);
    }
    else
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(result + 72);
      if (!v6)
      {
LABEL_12:
        *(_BYTE *)(a2 + 80) = 0;
        return result;
      }
      v7 = *(unsigned int *)(a2 + 24);
    }
    result = v6(a1, v7);
    goto LABEL_12;
  }
  return result;
}

uint64_t aptapR_Class_CreateAQTap()
{
  return 4294954516;
}

uint64_t aptapR_Class_SetTimelineInfo()
{
  return 4294954516;
}

uint64_t aptapR_Class_IsMultitrackTap()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 128);
}

void aptapR_HandleDeadServerConnection(const void *a1)
{
  uint64_t DerivedStorage;
  _QWORD *i;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 1) = 1;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  for (i = *(_QWORD **)(DerivedStorage + 24); i; i = (_QWORD *)*i)
  {
    if (i[1])
    {
      aptapR_UnprepareTapIfPrepared((uint64_t)a1, (uint64_t)i);
      i[1] = 0;
      if (a1)
        CFRelease(a1);
    }
  }
  JUMPOUT(0x19402EF04);
}

uint64_t aptapR_ProcessNotification(const void *a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  const __CFNumber *PointerFromCFDictionary;
  uint64_t DerivedStorage;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  OpaqueAudioQueueProcessingTap *v18;
  _QWORD *v19;
  _QWORD *v20;

  CMBaseObjectGetDerivedStorage();
  if (!a4)
    return 1;
  PointerFromCFDictionary = MTAudioProcessingTapGetPointerFromCFDictionary(CFSTR("AQTapServerPointer"), a4);
  if (CFEqual(a2, CFSTR("MTAudioProcessingTapServerToRemote_InitializeTap")))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
    while (1)
    {
      v9 = (_QWORD *)*v9;
      if (!v9)
        return 1;
      if ((const __CFNumber *)v9[2] == PointerFromCFDictionary)
      {
        v10 = v9[1];
        if (v10)
        {
          v11 = (_QWORD *)(DerivedStorage + 24);
          while (1)
          {
            v11 = (_QWORD *)*v11;
            if (!v11)
              break;
            if (v11[1] == v10)
            {
              if (!aptapR_PrepareTapIfNeeded((uint64_t)a1, (uint64_t)v11))
                return 1;
              if (!FigXPCCreateBasicMessage())
              {
                xpc_dictionary_set_uint64(0, "AQTapServerToken", (uint64_t)PointerFromCFDictionary);
                FigXPCRemoteClientSendSyncMessage();
              }
              goto LABEL_38;
            }
          }
        }
        return 1;
      }
    }
  }
  if (CFEqual(a2, CFSTR("MTAudioProcessingTapServerToRemote_CreateAQTap")))
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    v12 = CMBaseObjectGetDerivedStorage();
    if (AudioQueueProcessingTapNew_CMClient())
    {
LABEL_38:
      FigXPCRelease();
      FigXPCRemoteClientKillServerOnTimeout();
      return 1;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 16));
    v13 = (_QWORD *)(v12 + 24);
    v14 = (_QWORD *)(v12 + 24);
    while (1)
    {
      v14 = (_QWORD *)*v14;
      if (!v14)
        break;
      if (FigAtomicCompareAndSwapPtr())
      {
        v15 = v14;
        goto LABEL_33;
      }
    }
    v20 = malloc_type_calloc(1uLL, 0x60uLL, 0x1020040E6162833uLL);
    if (!v20)
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v12 + 16));
      goto LABEL_38;
    }
    v15 = v20;
    v20[1] = 0;
LABEL_33:
    v15[2] = PointerFromCFDictionary;
    *((_DWORD *)v15 + 6) = 0;
    *((_DWORD *)v15 + 7) = 0;
    *((_DWORD *)v15 + 8) = 0;
    *(_OWORD *)(v15 + 5) = 0u;
    *(_OWORD *)(v15 + 7) = 0u;
    v15[9] = 0;
    *((_WORD *)v15 + 40) = 0;
    if (v14)
    {
      FigMemoryBarrier();
      if (!a1)
        goto LABEL_36;
    }
    else
    {
      *v15 = *v13;
      FigMemoryBarrier();
      *v13 = v15;
      if (!a1)
      {
LABEL_36:
        MEMORY[0x19402EF04](*(_QWORD *)(v12 + 16));
        if (!FigXPCCreateBasicMessage())
        {
          xpc_dictionary_set_uint64(0, "AQTapServerToken", (uint64_t)PointerFromCFDictionary);
          FigXPCRemoteClientSendSyncMessage();
        }
        goto LABEL_38;
      }
    }
    CFRetain(a1);
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("MTAudioProcessingTapServerToRemote_DisposeAQTap")))
  {
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
    while (1)
    {
      v17 = (_QWORD *)*v17;
      if (!v17)
        break;
      if ((const __CFNumber *)v17[2] == PointerFromCFDictionary)
      {
        v18 = (OpaqueAudioQueueProcessingTap *)v17[1];
        if (v18)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 16));
          v19 = (_QWORD *)(v16 + 24);
          while (1)
          {
            v19 = (_QWORD *)*v19;
            if (!v19)
              break;
            if (FigAtomicCompareAndSwapPtr())
            {
              aptapR_UnprepareTapIfPrepared((uint64_t)a1, (uint64_t)v19);
              AudioQueueProcessingTapDispose(v18);
              if (a1)
                CFRelease(a1);
              break;
            }
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v16 + 16));
        }
        return 1;
      }
    }
  }
  return 1;
}

uint64_t aptapR_PrepareTapIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    if (*(_QWORD *)(DerivedStorage + 60))
      goto LABEL_9;
    return 1;
  }
  v6 = *(_QWORD *)(DerivedStorage + 32);
  if (!v6)
  {
    if (*(_QWORD *)(DerivedStorage + 64))
      goto LABEL_9;
    return 1;
  }
  if (v6 == 1 && !*(_QWORD *)(DerivedStorage + 88))
    return 1;
LABEL_9:
  v7 = *(_QWORD *)(a2 + 8);
  v8 = CMBaseObjectGetDerivedStorage() + 24;
  do
  {
    v8 = *(_QWORD *)v8;
    if (!v8)
      return 0;
  }
  while (*(_QWORD *)(v8 + 8) != v7);
  v9 = *(unsigned int *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 56);
  v13 = *(_OWORD *)(v8 + 40);
  v14 = v10;
  v15 = *(_QWORD *)(v8 + 72);
  if (*(_BYTE *)(a2 + 80) && *(_DWORD *)(a2 + 32) == (_DWORD)v9 && !memcmp((const void *)(a2 + 40), &v13, 0x28uLL))
    return 1;
  *(_DWORD *)(a2 + 32) = v9;
  v11 = v14;
  *(_OWORD *)(a2 + 40) = v13;
  *(_OWORD *)(a2 + 56) = v11;
  *(_QWORD *)(a2 + 72) = v15;
  aptapR_UnprepareTapIfPrepared(a1, a2);
  if (*(_BYTE *)(v5 + 128))
  {
    if (*(_QWORD *)(v5 + 32) == 1)
      (*(void (**)(uint64_t, _QWORD, uint64_t, __int128 *))(v5 + 88))(a1, *(unsigned int *)(a2 + 28), v9, &v13);
    else
      (*(void (**)(uint64_t, _QWORD, uint64_t, __int128 *))(v5 + 64))(a1, *(unsigned int *)(a2 + 24), v9, &v13);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(v5 + 60))(a1, v9, &v13);
  }
  result = 1;
  *(_BYTE *)(a2 + 80) = 1;
  return result;
}

uint64_t aptapR_AudioQueueProcessingTapCallback(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  result = CMBaseObjectGetDerivedStorage();
  v15 = result;
  v19 = 0;
  v18 = 0;
  v16 = result + 24;
  while (1)
  {
    v16 = *(_QWORD *)v16;
    if (!v16)
      break;
    if (*(_QWORD *)(v16 + 8) == a2)
    {
      result = aptapR_PrepareTapIfNeeded(a1, v16);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v16 + 81) = 1;
        *(_QWORD *)(v16 + 88) = a4;
        if (*(_BYTE *)(v15 + 128))
        {
          v17 = *a5;
          if (*(_QWORD *)(v15 + 32) == 1)
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(v15 + 104))(a1, *(unsigned int *)(v16 + 28), a3, v17, a7, &v19, &v18);
          else
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(v15 + 80))(a1, *(unsigned int *)(v16 + 24), a3, v17, a7, &v19, &v18);
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *, int *))(v15 + 76))(a1, a3, *a5, a7, &v19, &v18);
        }
        *a6 = v19;
        *a5 = v18;
        *(_BYTE *)(v16 + 81) = 0;
      }
      return result;
    }
  }
  return result;
}

uint64_t FigPathwayCloningApplyURIReplacement(const __CFURL *a1, int a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  CFTypeRef *v5;
  const __CFURL *v6;
  const __CFDictionary *URIReplacementPerVariantURIs;
  const __CFString *v9;
  const void *v10;
  uint64_t URIReplacementHost;
  uint64_t v12;
  uint64_t URIReplacementParams;
  const __CFDictionary *v14;
  const __CFURL *v15;
  const __CFURL *v16;
  int64_t Count;
  CFIndex v18;
  const void **v19;
  const __CFAllocator *v20;
  __CFArray *Mutable;
  uint64_t i;
  CFIndex v23;
  CFStringRef v24;
  const void *ValueAtIndex;
  const void *Value;
  uint64_t v27;
  const __CFURL *v28;
  uint64_t v29;
  const void *v31;
  CFTypeRef *v32;
  const __CFURL *v33;
  CFTypeRef cf;
  CFRange v35;

  if (!a5)
    return FigSignalErrorAt();
  v5 = a5;
  v6 = a1;
  *a5 = 0;
  if (!a1)
    return 0;
  if (!a3)
    goto LABEL_11;
  if (!a2)
  {
    URIReplacementPerVariantURIs = (const __CFDictionary *)FigPathwayCloneGetURIReplacementPerVariantURIs();
    if (URIReplacementPerVariantURIs)
      goto LABEL_8;
LABEL_11:
    URIReplacementHost = FigPathwayCloneGetURIReplacementHost();
    if (!URIReplacementHost)
    {
      v10 = 0;
      goto LABEL_17;
    }
    cf = 0;
    v12 = FigCFHTTPCreateURLWithHostReplacement(v6, URIReplacementHost, (CFURLRef *)&cf);
    if (!(_DWORD)v12)
    {
      v10 = cf;
      if (cf)
      {
        CFRetain(cf);
        if (cf)
          CFRelease(cf);
      }
LABEL_17:
      URIReplacementParams = FigPathwayCloneGetURIReplacementParams();
      if (!URIReplacementParams)
        goto LABEL_46;
      v14 = (const __CFDictionary *)URIReplacementParams;
      v31 = v10;
      if (v10)
        v15 = (const __CFURL *)v10;
      else
        v15 = v6;
      v16 = (const __CFURL *)CFRetain(v15);
      Count = CFDictionaryGetCount(v14);
      if (Count < 1)
      {
        v19 = 0;
        v24 = 0;
        Mutable = 0;
        v29 = 0;
      }
      else
      {
        v18 = Count;
        v33 = v6;
        v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
        CFDictionaryGetKeysAndValues(v14, v19, 0);
        v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v32 = v5;
          for (i = 0; i != v18; ++i)
            CFArrayAppendValue(Mutable, v19[i]);
          v35.location = 0;
          v35.length = v18;
          CFArraySortValues(Mutable, v35, (CFComparatorFunction)MEMORY[0x1E0C98F10], 0);
          v23 = 0;
          v24 = 0;
          do
          {
            cf = 0;
            ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
            Value = CFDictionaryGetValue(v14, ValueAtIndex);
            if (v24)
              CFRelease(v24);
            v24 = CFStringCreateWithFormat(v20, 0, CFSTR("%@="), ValueAtIndex);
            if (!v24)
            {
              v27 = FigSignalErrorAt();
LABEL_53:
              v29 = v27;
              v5 = v32;
              goto LABEL_54;
            }
            v27 = FigCFHTTPCreateURLWithQueryParam(v16, v24, (uint64_t)Value, &cf);
            if ((_DWORD)v27)
              goto LABEL_53;
            v28 = (const __CFURL *)cf;
            if (cf)
              CFRetain(cf);
            if (v16)
              CFRelease(v16);
            if (cf)
              CFRelease(cf);
            ++v23;
            v16 = v28;
          }
          while (v18 != v23);
          v5 = v32;
          if (v28)
          {
            v10 = CFRetain(v28);
            free(v19);
            v29 = 0;
            v6 = v33;
            goto LABEL_39;
          }
          free(v19);
          v29 = 0;
          v10 = 0;
          v6 = v33;
LABEL_41:
          if (Mutable)
            CFRelease(Mutable);
          if (v24)
            CFRelease(v24);
          if ((_DWORD)v29)
            goto LABEL_49;
LABEL_46:
          if (!v10)
          {
LABEL_48:
            v29 = 0;
            *v5 = CFRetain(v6);
LABEL_49:
            if (v10)
              CFRelease(v10);
            return v29;
          }
LABEL_47:
          v6 = (const __CFURL *)v10;
          goto LABEL_48;
        }
        v29 = FigSignalErrorAt();
        v24 = 0;
LABEL_54:
        v6 = v33;
      }
      v10 = v31;
      free(v19);
      v28 = v16;
      if (v16)
LABEL_39:
        CFRelease(v28);
      goto LABEL_41;
    }
    return v12;
  }
  URIReplacementPerVariantURIs = (const __CFDictionary *)FigPathwayCloneGetURIReplacementPerRenditionURIs();
  if (!URIReplacementPerVariantURIs)
    goto LABEL_11;
LABEL_8:
  v9 = (const __CFString *)CFDictionaryGetValue(URIReplacementPerVariantURIs, a3);
  if (!v9)
    goto LABEL_11;
  v10 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, 0);
  if (v10)
    goto LABEL_47;
  return FigSignalErrorAt();
}

uint64_t FigPathwayValidateStableVariantAndRenditionIDs(const __CFArray *a1)
{
  const __CFDictionary *Mutable;
  CFIndex v3;
  const CFSetCallBacks *v4;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFString *PathwayID;
  const void *StableStreamIdentifier;
  void *v9;
  CFMutableSetRef v10;
  uint64_t v11;
  CFIndex Count;
  void *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const CFDictionaryKeyCallBacks *v16;
  const CFDictionaryValueCallBacks *v17;
  __CFDictionary *v18;
  __CFDictionary *v19;
  __CFDictionary *v20;
  CFMutableDictionaryRef v21;
  __CFDictionary *v22;
  CFIndex v23;
  CFIndex j;
  const void *v25;
  const __CFString *v26;
  CFMutableSetRef v27;
  CFMutableSetRef v28;
  CFMutableSetRef v29;
  CFMutableSetRef v30;
  CFMutableSetRef v31;
  CFMutableSetRef v32;
  CFMutableSetRef v33;
  CFMutableSetRef v34;
  __CFSet *v35;
  __CFSet *v36;
  const __CFSet *v37;
  uint64_t v38;
  uint64_t v39;
  const __CFDictionary *v40;
  const __CFArray *v42;
  void *v43;
  const __CFDictionary *v44;
  const __CFArray *v45;
  __CFDictionary *v46;
  __CFSet *v47;
  const __CFAllocator *allocator;
  void *SubtitleGroupIDString;
  void *VideoGroupIDString;
  void *value;

  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = 0;
    v4 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
    if (!a1)
      goto LABEL_4;
LABEL_3:
    for (i = CFArrayGetCount(a1); ; i = 0)
    {
      if (v3 >= i)
        goto LABEL_15;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      PathwayID = FigAlternateGetPathwayID((uint64_t)ValueAtIndex);
      StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier((uint64_t)ValueAtIndex);
      if (CFDictionaryContainsKey(Mutable, PathwayID))
        break;
      v10 = CFSetCreateMutable(allocator, 0, v4);
      if (!v10)
        goto LABEL_14;
      v9 = v10;
      CFDictionarySetValue(Mutable, PathwayID, v10);
      CFRelease(v9);
      if (StableStreamIdentifier)
        goto LABEL_8;
LABEL_9:
      ++v3;
      if (a1)
        goto LABEL_3;
LABEL_4:
      ;
    }
    v9 = (void *)CFDictionaryGetValue(Mutable, PathwayID);
    if (!StableStreamIdentifier)
      goto LABEL_9;
LABEL_8:
    CFSetSetValue((CFMutableSetRef)v9, StableStreamIdentifier);
    goto LABEL_9;
  }
LABEL_14:
  v11 = FigSignalErrorAt();
  if ((_DWORD)v11)
  {
    v39 = v11;
    v13 = 0;
    goto LABEL_73;
  }
LABEL_15:
  Count = CFDictionaryGetCount(Mutable);
  v13 = malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v13
    || (CFDictionaryGetKeysAndValues(Mutable, (const void **)v13, 0),
        (v14 = CFArrayCreate(allocator, (const void **)v13, Count, MEMORY[0x1E0C9B378])) == 0))
  {
    v39 = FigSignalErrorAt();
LABEL_73:
    free(v13);
    v40 = 0;
    if (Mutable)
      goto LABEL_65;
    goto LABEL_66;
  }
  v15 = v14;
  if (!figSteering_validatePathwayToStableVariantOrRenditionIDDictionary(Mutable, v14))
  {
    v39 = FigSignalErrorAt();
    free(v13);
    v40 = 0;
    goto LABEL_64;
  }
  v42 = v15;
  v43 = v13;
  v44 = Mutable;
  v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v18 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v19 = CFDictionaryCreateMutable(allocator, 0, v16, v17);
  v20 = CFDictionaryCreateMutable(allocator, 0, v16, v17);
  v21 = CFDictionaryCreateMutable(allocator, 0, v16, v17);
  v22 = v21;
  if (!v18 || !v19 || !v20 || !v21)
  {
LABEL_69:
    v39 = FigSignalErrorAt();
    goto LABEL_53;
  }
  v23 = 0;
  v45 = a1;
  v46 = v19;
  if (!a1)
    goto LABEL_24;
LABEL_23:
  for (j = CFArrayGetCount(a1); ; j = 0)
  {
    if (v23 >= j)
    {
      v39 = 0;
      goto LABEL_53;
    }
    v25 = CFArrayGetValueAtIndex(a1, v23);
    v26 = FigAlternateGetPathwayID((uint64_t)v25);
    value = (void *)FigAlternateGetAudioGroupIDString((uint64_t)v25);
    VideoGroupIDString = (void *)FigAlternateGetVideoGroupIDString((uint64_t)v25);
    SubtitleGroupIDString = (void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v25);
    if (!CFDictionaryContainsKey(v18, v26))
    {
      v27 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
      if (!v27)
        goto LABEL_69;
      v28 = v27;
      CFDictionarySetValue(v18, v26, v27);
      CFRelease(v28);
    }
    if (!CFDictionaryContainsKey(v19, v26))
    {
      v29 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
      if (!v29)
        goto LABEL_69;
      v30 = v29;
      CFDictionarySetValue(v19, v26, v29);
      CFRelease(v30);
    }
    if (!CFDictionaryContainsKey(v20, v26))
    {
      v31 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
      if (!v31)
        goto LABEL_69;
      v32 = v31;
      CFDictionarySetValue(v20, v26, v31);
      CFRelease(v32);
    }
    if (!CFDictionaryContainsKey(v22, v26))
    {
      v33 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
      if (!v33)
        goto LABEL_69;
      v34 = v33;
      CFDictionarySetValue(v22, v26, v33);
      CFRelease(v34);
    }
    v47 = (__CFSet *)CFDictionaryGetValue(v18, v26);
    v35 = (__CFSet *)CFDictionaryGetValue(v19, v26);
    v36 = (__CFSet *)CFDictionaryGetValue(v20, v26);
    v37 = (const __CFSet *)CFDictionaryGetValue(v22, v26);
    if (value && !CFSetContainsValue(v35, value))
    {
      v38 = figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(v47, 1936684398, (uint64_t)v25);
      if ((_DWORD)v38)
        goto LABEL_70;
      CFSetSetValue(v35, value);
    }
    if (VideoGroupIDString && !CFSetContainsValue(v36, VideoGroupIDString))
    {
      v38 = figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(v47, 1986618469, (uint64_t)v25);
      if ((_DWORD)v38)
        goto LABEL_70;
      CFSetSetValue(v36, VideoGroupIDString);
    }
    if (SubtitleGroupIDString && !CFSetContainsValue(v37, SubtitleGroupIDString))
      break;
LABEL_50:
    ++v23;
    a1 = v45;
    v19 = v46;
    if (v45)
      goto LABEL_23;
LABEL_24:
    ;
  }
  v38 = figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(v47, 1935832172, (uint64_t)v25);
  if (!(_DWORD)v38)
  {
    CFSetSetValue(v37, SubtitleGroupIDString);
    goto LABEL_50;
  }
LABEL_70:
  v39 = v38;
  v19 = v46;
LABEL_53:
  if (v19)
    CFRelease(v19);
  v40 = v18;
  v15 = v42;
  if (v20)
    CFRelease(v20);
  Mutable = v44;
  if (v22)
    CFRelease(v22);
  if (!(_DWORD)v39)
  {
    if (figSteering_validatePathwayToStableVariantOrRenditionIDDictionary(v40, v42))
      v39 = 0;
    else
      v39 = FigSignalErrorAt();
  }
  free(v43);
LABEL_64:
  CFRelease(v15);
  if (Mutable)
LABEL_65:
    CFRelease(Mutable);
LABEL_66:
  if (v40)
    CFRelease(v40);
  return v39;
}

uint64_t figSteering_validatePathwayToStableVariantOrRenditionIDDictionary(const __CFDictionary *a1, CFArrayRef theArray)
{
  CFIndex v4;
  int v5;
  CFIndex i;
  const void *ValueAtIndex;

  v4 = 0;
  v5 = 1;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v4 < i && v5; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    CFDictionaryGetValue(a1, ValueAtIndex);
    if (v4)
      v5 = FigCFEqual();
    ++v4;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return v5;
}

uint64_t FigSteeringCloneAlternateWithPathwayClone(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, _QWORD *a4)
{
  uint64_t ID;
  const __CFURL *PlaylistAlternateURL;
  const void *StableStreamIdentifier;
  uint64_t v11;
  const void *AudioGroupIDString;
  const void *VideoGroupIDString;
  const void *SubtitleGroupIDString;
  CFTypeRef v15;
  char UniqueAlternateIndex;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double StartupScore;
  CFTypeRef cf;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;

  v25 = 0;
  v26 = 0;
  ID = FigPathwayCloneGetID();
  v23 = 0;
  v24 = 0;
  cf = 0;
  PlaylistAlternateURL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(a2);
  StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier(a2);
  v11 = FigPathwayCloningApplyURIReplacement(PlaylistAlternateURL, 0, StableStreamIdentifier, a1, &v25);
  if ((_DWORD)v11
    || (AudioGroupIDString = (const void *)FigAlternateGetAudioGroupIDString(a2),
        v11 = figSteeringCreateIndependentMediaGroupLocatorMap(a2, 1936684398, AudioGroupIDString, a3, CFSTR("FACCP_AudioGroups"), a1, &v24), (_DWORD)v11)|| (VideoGroupIDString = (const void *)FigAlternateGetVideoGroupIDString(a2), v11 = figSteeringCreateIndependentMediaGroupLocatorMap(a2, 1986618469, VideoGroupIDString, a3, CFSTR("FACCP_VideoGroups"), a1, &v23), (_DWORD)v11)|| (SubtitleGroupIDString = (const void *)FigAlternateGetSubtitleGroupIDString(a2),
        v11 = figSteeringCreateIndependentMediaGroupLocatorMap(a2, 1935832172, SubtitleGroupIDString, a3, CFSTR("FACCP_SubtitleGroups"), a1, &cf), (_DWORD)v11))
  {
    v18 = v11;
  }
  else
  {
    v15 = v25;
    UniqueAlternateIndex = FigStreamingPlaylistMakeUniqueAlternateIndex();
    v17 = FigAlternateCopy(a2, 0, v15, (uint64_t)v15, 0, 0, 0, 0, 0, 0, 0, 0, ID, 1, UniqueAlternateIndex, (uint64_t)v24, (uint64_t)v23, (uint64_t)cf, 0,
            &v26);
    v18 = v17;
    v19 = (uint64_t)v26;
    if (v26)
    {
      if (!(_DWORD)v17)
      {
        StartupScore = FigAlternateGetStartupScore(a2);
        v18 = FigAlternateSetStartupScore(v19, StartupScore);
        if (!(_DWORD)v18)
        {
          *a4 = v26;
          v26 = 0;
        }
      }
    }
  }
  if (v24)
    CFRelease(v24);
  if (v23)
    CFRelease(v23);
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  return v18;
}

uint64_t figSteeringCreateIndependentMediaGroupLocatorMap(uint64_t a1, int a2, const void *a3, CFMutableDictionaryRef *a4, void *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  const __CFDictionary *v13;
  CFTypeRef v14;
  _QWORD context[3];
  CFTypeRef cf;
  unsigned int v17;

  cf = 0;
  result = FigAlternateGetMediaGroupLocatorMap(a1, a2);
  if (result)
  {
    v13 = (const __CFDictionary *)result;
    result = FigAlternateCreationContextCopyMediaGroupLocatorMapForMediaGroupID(a4, a5, a3, &cf);
    v17 = result;
    v14 = cf;
    if (!(_DWORD)result)
    {
      if (cf)
      {
LABEL_4:
        result = 0;
        *a7 = v14;
        return result;
      }
      cf = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!cf)
      {
        result = FigSignalErrorAt();
        v17 = result;
        v14 = cf;
        if (!cf)
          return result;
LABEL_9:
        CFRelease(v14);
        return v17;
      }
      context[0] = &v17;
      context[1] = a6;
      context[2] = &cf;
      CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)figSteeringClonePathwayMediaGroup, context);
      result = FigAlternateCreationContextSetMediaGroupLocatorMapForMediaGroupID(a4, a5, a3, cf);
      v17 = result;
      v14 = cf;
      if (!(_DWORD)result)
        goto LABEL_4;
    }
    if (v14)
      goto LABEL_9;
  }
  return result;
}

uint64_t figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(__CFSet *a1, int a2, uint64_t a3)
{
  const __CFDictionary *MediaGroupLocatorMap;
  const __CFDictionary *v7;
  int64_t Count;
  const void **v9;
  const void **v10;
  uint64_t i;
  const void *StableStreamIdentifierForMediaSubstream;
  uint64_t v13;

  MediaGroupLocatorMap = (const __CFDictionary *)FigAlternateGetMediaGroupLocatorMap(a3, a2);
  if (MediaGroupLocatorMap
    && (v7 = MediaGroupLocatorMap,
        Count = CFDictionaryGetCount(MediaGroupLocatorMap),
        (v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL)) != 0))
  {
    v10 = v9;
    CFDictionaryGetKeysAndValues(v7, v9, 0);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        StableStreamIdentifierForMediaSubstream = FigAlternateGetStableStreamIdentifierForMediaSubstream(a3, a2, v10[i]);
        if (StableStreamIdentifierForMediaSubstream)
          CFSetSetValue(a1, StableStreamIdentifierForMediaSubstream);
      }
    }
    v13 = 0;
  }
  else
  {
    v13 = FigSignalErrorAt();
    v10 = 0;
  }
  free(v10);
  return v13;
}

void figSteeringClonePathwayMediaGroup(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  CFMutableDictionaryRef *v6;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v8;
  const __CFURL *v9;
  const void *v10;
  int v11;
  void *v12;
  void *value;

  v5 = *(_DWORD **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = *(CFMutableDictionaryRef **)(a3 + 16);
  value = 0;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (MutableCopy)
  {
    v8 = MutableCopy;
    v9 = (const __CFURL *)CFDictionaryGetValue(MutableCopy, CFSTR("FBPAEGLMK_URL"));
    v10 = CFDictionaryGetValue(v8, CFSTR("FBPAEGLMK_StableStreamIdentifier"));
    v11 = FigPathwayCloningApplyURIReplacement(v9, 1, v10, v4, (CFTypeRef *)&value);
    *v5 = v11;
    v12 = value;
    if (!v11)
    {
      if (value)
      {
        CFDictionarySetValue(v8, CFSTR("FBPAEGLMK_URL"), value);
        CFDictionarySetValue(v8, CFSTR("FBPAEGLMK_URLForCacheLookup"), value);
      }
      CFDictionarySetValue(*v6, a1, v8);
      v12 = value;
    }
    if (v12)
      CFRelease(v12);
    CFRelease(v8);
  }
  else
  {
    *v5 = FigSignalErrorAt();
  }
}

uint64_t FigCaptionRendererSRTRegionSetAlignment(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 60) = a2;
  *(_DWORD *)(DerivedStorage + 64) = a3;
  return 0;
}

uint64_t FigCaptionRendererSRTRegionSetWritingMode(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 56) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegionCreate(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    return FigSignalErrorAt();
  v14 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererSRTRegionGetClassID_sRegisterFigCaptionRendererSRTRegionBaseTypeOnce, RegisterFigCaptionRendererSRTRegionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v3 = v14;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 56) = 0;
    *(_DWORD *)(DerivedStorage + 64) = 0;
    v13 = 0;
    FigCaptionRendererNodeCreate(&v13);
    v5 = v13;
    *(_QWORD *)DerivedStorage = v13;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, uint64_t))(v7 + 216);
        if (v8)
          v8(v5, 1);
      }
    }
    v9 = *(_QWORD *)DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v10 = CMBaseObjectGetProtocolVTable();
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 232);
        if (v12)
          v12(v9, 1);
      }
    }
    result = 0;
    *a1 = v3;
  }
  return result;
}

void FigCaptionRendererSRTRegionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCaptionRendererSRTRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererSRTRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererSRTRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererSRTRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererSRTRegion";
  return 0;
}

__CFString *FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererSRTRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char **);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _BYTE *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  void (*v21)(uint64_t, CFArrayRef *);
  CFIndex v22;
  const void *ValueAtIndex;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(const void *, char **);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(const void *, CFStringRef *);
  CFStringRef theString2;
  char *v33;
  CFArrayRef theArray;
  CFStringRef theString1;
  char *__s1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v8 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
LABEL_42:
    v16 = 4294954508;
LABEL_43:
    FigSignalErrorAt();
    return v16;
  }
  v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_45:
    v16 = 4294954514;
    goto LABEL_43;
  }
  v10 = v9(a2, &__s1);
  if ((_DWORD)v10)
  {
LABEL_47:
    v16 = v10;
    goto LABEL_43;
  }
  v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererSRTRegion")))
  {
    theString1 = 0;
    FigCaptionRendererRegionProtocolGetProtocolID();
    v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
        goto LABEL_41;
      v18 = *(_QWORD *)(v18 + 16);
      if (!v18)
        goto LABEL_41;
      ((void (*)(uint64_t, CFStringRef *))v18)(a2, &theString1);
      LOBYTE(v18) = (_BYTE)theString1;
      if (!theString1)
        goto LABEL_41;
      theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v19 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 2);
        if (v20 && (v21 = *(void (**)(uint64_t, CFArrayRef *))(v20 + 24)) != 0)
        {
          v21(a1, &theArray);
          v19 = theArray;
        }
        else
        {
          v19 = 0;
        }
      }
      if (CFArrayGetCount(v19) >= 1)
      {
        v22 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v22);
          v33 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          v24 = CMBaseObjectGetProtocolVTable();
          if (!v24)
            goto LABEL_42;
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_42;
          v26 = *(uint64_t (**)(const void *, char **))(v25 + 8);
          if (!v26)
            goto LABEL_45;
          v10 = v26(ValueAtIndex, &v33);
          if ((_DWORD)v10)
            goto LABEL_47;
          v27 = v33;
          if (v33
            && (!strcmp(v33, "FigCaptionRendererStackLayoutRegion")
             || !strcmp(v27, "FigCaptionRendererCellStackLayoutRegion")
             || !strcmp(__s1, "FigCaptionRendererSRTRegion")))
          {
            theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v28 = CMBaseObjectGetProtocolVTable();
            if (v28)
            {
              v29 = *(_QWORD *)(v28 + 16);
              if (v29)
              {
                v30 = *(void (**)(const void *, CFStringRef *))(v29 + 16);
                if (v30)
                  v30(ValueAtIndex, &theString2);
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              LOBYTE(v18) = 1;
              goto LABEL_41;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v22);
      }
    }
    LOBYTE(v18) = 0;
LABEL_41:
    v16 = 0;
    *a3 = v18;
    return v16;
  }
  v12 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13)
    return 4294954508;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    return 4294954508;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v14 + 32);
  if (v15)
    return v15(v12, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(const void *, CGRect *);
  const __CFDictionary *v8;
  const void *Value;
  double MidX;
  double MidY;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const void *, double, double);
  CGSize size;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, double, double);
  CGRect v20;

  v4 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v20.size = v4;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7)
        v7(a1, &v20);
    }
  }
  v8 = *(const __CFDictionary **)(a2 + 296);
  if (v8)
  {
    Value = CFDictionaryGetValue(v8, a1);
    MidX = CGRectGetMidX(v20);
    MidY = CGRectGetMidY(v20);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v12 = CMBaseObjectGetProtocolVTable();
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = *(void (**)(const void *, double, double))(v13 + 72);
        if (v14)
          v14(Value, MidX, MidY);
      }
    }
    size = v20.size;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = *(void (**)(const void *, double, double))(v17 + 88);
        if (v18)
          v18(Value, size.width, size.height);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *);
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __int128 *);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, __int128 *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, CGRect *);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, CFArrayRef *);
  CFIndex Count;
  double v29;
  double v30;
  CFIndex v31;
  const void *ValueAtIndex;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(const void *, char **);
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(const void *, int *);
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(const void *, __int128 *);
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(const void *, CGRect *);
  int v45;
  double MinX;
  double MinY;
  int v48;
  CGRect v49;
  int v50;
  CGRect v51;
  int v52;
  CGRect v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(const void *, double, double);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(const void *, uint64_t);
  double width;
  CGFloat v61;
  double v62;
  double height;
  double v64;
  double v65;
  double x;
  double y;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, double, double, double, double);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  CGSize v79;
  CGPoint v80;
  int v81;
  char *__s1;
  CFArrayRef theArray;
  uint64_t v84;
  CGRect v85;
  __int128 v86;
  CGSize v87;
  __int128 v88;
  __int128 v89;
  CGRect v90;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v84 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v84);
        if (v84)
        {
          v8 = CMBaseObjectGetDerivedStorage();
          v9 = *(_DWORD *)(v8 + 16);
          v10 = (double)*(int *)(v8 + 20) * 0.0533;
          v11 = *(double *)(v8 + 40);
          v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0)
            v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          else
            v13 = 0.0;
          v14 = *(_QWORD *)v8;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 16);
            if (v16)
            {
              v17 = *(void (**)(uint64_t, __int128 *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v86) = 1;
                *(_DWORD *)((char *)&v86 + 1) = 0;
                DWORD1(v86) = 0;
                *((double *)&v86 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v87.width) = 1;
                *(_DWORD *)((char *)&v87.width + 1) = 0;
                HIDWORD(v87.width) = 0;
                v87.height = v13;
                LOBYTE(v88) = 1;
                *(_DWORD *)((char *)&v88 + 1) = 0;
                DWORD1(v88) = 0;
                *((double *)&v88 + 1) = (double)v9 / 100.0;
                LOBYTE(v89) = 1;
                *(_DWORD *)((char *)&v89 + 1) = 0;
                DWORD1(v89) = 0;
                *((double *)&v89 + 1) = v10;
                v17(v14, &v86);
              }
            }
          }
          v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          v86 = FCRRectNull;
          v87 = *(CGSize *)&byte_1932FABC0;
          v88 = xmmword_1932FABD0;
          v89 = *(_OWORD *)&byte_1932FABE0;
          v79 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v80 = (CGPoint)*MEMORY[0x1E0C9D628];
          v85.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          v85.size = v79;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 16);
            if (v20)
            {
              v21 = *(void (**)(uint64_t, __int128 *))(v20 + 88);
              if (v21)
                v21(a1, &v86);
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 16);
            if (v23)
            {
              v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24)
                v24(a1, &v85);
            }
          }
          if (*((double *)&v88 + 1) != -1.0)
          {
            width = v85.size.width;
            v61 = v85.origin.x + *((double *)&v86 + 1);
            if ((_BYTE)v86)
              v61 = v85.origin.x + *((double *)&v86 + 1) * v85.size.width;
            v62 = v85.origin.y + v87.height;
            if (LOBYTE(v87.width))
              v62 = v85.origin.y + v87.height * v85.size.height;
            height = 1.0;
            if (!(_BYTE)v88)
              width = 1.0;
            if ((_BYTE)v89)
              height = v85.size.height;
            v65 = *((double *)&v89 + 1) * height;
            v64 = *((double *)&v88 + 1) * width;
            v90 = CGRectIntegral(*(CGRect *)&v61);
            x = v90.origin.x;
            y = v90.origin.y;
            v68 = v90.size.width;
            v69 = v90.size.height;
            v70 = *v18;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v71 = CMBaseObjectGetProtocolVTable();
            if (v71)
            {
              v72 = *(_QWORD *)(v71 + 16);
              if (v72)
              {
                v73 = *(void (**)(uint64_t, double, double, double, double))(v72 + 96);
                if (v73)
                  v73(v70, x, y, v68, v69);
              }
            }
          }
          theArray = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27)
                v27(a1, &theArray);
            }
          }
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v29 = *MEMORY[0x1E0C9D538];
            v30 = *(double *)(MEMORY[0x1E0C9D538] + 8);
            v31 = Count + 1;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v31 - 2);
              __s1 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              v33 = CMBaseObjectGetProtocolVTable();
              if (!v33
                || (v34 = *(_QWORD *)(v33 + 16)) == 0
                || (v35 = *(unsigned int (**)(const void *, char **))(v34 + 8)) == 0
                || v35(ValueAtIndex, &__s1))
              {
LABEL_87:
                FigSignalErrorAt();
                goto LABEL_88;
              }
              if (__s1 && !strcmp(__s1, "FigCaptionRendererCaption"))
              {
                v81 = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                v36 = CMBaseObjectGetProtocolVTable();
                if (!v36)
                  goto LABEL_87;
                v37 = *(_QWORD *)(v36 + 16);
                if (!v37)
                  goto LABEL_87;
                v38 = *(unsigned int (**)(const void *, int *))(v37 + 48);
                if (!v38 || v38(ValueAtIndex, &v81))
                  goto LABEL_87;
                if (v81 == 3)
                  break;
              }
LABEL_73:
              if ((unint64_t)--v31 <= 1)
                goto LABEL_88;
            }
            v86 = (__int128)v80;
            v87 = v79;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v39 = CMBaseObjectGetProtocolVTable();
            if (!v39)
              goto LABEL_87;
            v40 = *(_QWORD *)(v39 + 16);
            if (!v40)
              goto LABEL_87;
            v41 = *(unsigned int (**)(const void *, __int128 *))(v40 + 104);
            if (!v41)
              goto LABEL_87;
            if (v41(ValueAtIndex, &v86))
              goto LABEL_87;
            v85.origin = v80;
            v85.size = v79;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v42 = CMBaseObjectGetProtocolVTable();
            if (!v42)
              goto LABEL_87;
            v43 = *(_QWORD *)(v42 + 16);
            if (!v43)
              goto LABEL_87;
            v44 = *(unsigned int (**)(const void *, CGRect *))(v43 + 72);
            if (!v44 || v44(ValueAtIndex, &v85))
              goto LABEL_87;
            v45 = *(_DWORD *)(DerivedStorage + 56);
            if (v45)
            {
              MinX = v29;
              MinY = v30;
              if (v45 != 2)
              {
LABEL_65:
                FigCaptionRendererNodeProtocolGetProtocolID();
                v54 = CMBaseObjectGetProtocolVTable();
                if (v54)
                {
                  v55 = *(_QWORD *)(v54 + 16);
                  if (v55)
                  {
                    v56 = *(void (**)(const void *, double, double))(v55 + 128);
                    if (v56)
                      v56(ValueAtIndex, MinX, MinY);
                  }
                }
                FigCaptionRendererNodeProtocolGetProtocolID();
                v57 = CMBaseObjectGetProtocolVTable();
                if (v57)
                {
                  v58 = *(_QWORD *)(v57 + 16);
                  if (v58)
                  {
                    v59 = *(void (**)(const void *, uint64_t))(v58 + 232);
                    if (v59)
                      v59(ValueAtIndex, 1);
                  }
                }
                goto LABEL_73;
              }
              v48 = *(_DWORD *)(DerivedStorage + 64);
              if (v48 == 1)
              {
                MinX = CGRectGetMinX(v85);
              }
              else
              {
                v49 = v85;
                if (v48 == 3)
                  MinX = CGRectGetMaxX(v49) - v87.width;
                else
                  MinX = CGRectGetMidX(v49) + v87.width * -0.5;
              }
              v52 = *(_DWORD *)(DerivedStorage + 60);
            }
            else
            {
              v50 = *(_DWORD *)(DerivedStorage + 60);
              if (v50 == 1)
              {
                MinX = CGRectGetMinX(v85);
              }
              else
              {
                v51 = v85;
                if (v50 == 3)
                  MinX = CGRectGetMaxX(v51) - v87.width;
                else
                  MinX = CGRectGetMidX(v51) + v87.width * -0.5;
              }
              v52 = *(_DWORD *)(DerivedStorage + 64);
            }
            if (v52 == 1)
            {
              MinY = CGRectGetMaxY(v85) - v87.height;
            }
            else
            {
              v53 = v85;
              if (v52 == 3)
                MinY = CGRectGetMinY(v53);
              else
                MinY = CGRectGetMidY(v53) + v87.height * -0.5;
            }
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_88:
  v74 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v75 = CMBaseObjectGetProtocolVTable();
  if (!v75)
    return 4294954508;
  v76 = *(_QWORD *)(v75 + 16);
  if (!v76)
    return 4294954508;
  v77 = *(uint64_t (**)(uint64_t, uint64_t))(v76 + 288);
  if (v77)
    return v77(v74, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererSRTRegion <FigCaptionRendererRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCaptionRendererSRTRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererSRTRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererSRTRegion]"));
}

uint64_t FigMetricItemRateChangeEventDeserializeAndCopy(void *a1, _QWORD *a2)
{
  int64_t int64;
  uint64_t CMTime;
  xpc_object_t value;
  double v7;
  double v8;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  char v13;
  const __CFAllocator *v14;
  __int128 v16;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;
  __int128 v21;
  uint64_t v22;

  v21 = *MEMORY[0x1E0CA2E18];
  v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v19 = 0;
  cf = 0;
  v18 = 0;
  if (!a1 || !a2)
  {
    CMTime = FigSignalErrorAt();
LABEL_13:
    v10 = CMTime;
    goto LABEL_14;
  }
  int64 = xpc_dictionary_get_int64(a1, "EventID");
  CMTime = FigXPCMessageGetCMTime();
  if ((_DWORD)CMTime)
    goto LABEL_13;
  CMTime = FigXPCMessageCopyCFDate();
  if ((_DWORD)CMTime)
    goto LABEL_13;
  CMTime = FigXPCMessageCopyCFString();
  if ((_DWORD)CMTime)
    goto LABEL_13;
  value = xpc_dictionary_get_value(a1, "Variant");
  CMTime = FigAlternateCreateWithXPCObject(value, 0, &v18);
  if ((_DWORD)CMTime)
    goto LABEL_13;
  v7 = xpc_dictionary_get_double(a1, "Rate");
  v8 = xpc_dictionary_get_double(a1, "PreviousRate");
  switch(int64)
  {
    case 8:
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v16 = v21;
      v17 = v22;
      CMTime = FigMetricItemStallEventCreate(AllocatorForMedia, &v16, cf, v19, v18, a2, v7, v8);
      goto LABEL_13;
    case 9:
      v11 = FigGetAllocatorForMedia();
      v16 = v21;
      v17 = v22;
      CMTime = FigMetricItemRateChangeEventCreate(v11, &v16, cf, v19, v18, a2, v7, v8);
      goto LABEL_13;
    case 10:
      v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v16 = v21;
      v17 = v22;
      CMTime = FigMetricItemSeekEventCreate(v12, &v16, cf, v19, v18, a2, v7, v8);
      goto LABEL_13;
    case 11:
      v13 = xpc_dictionary_get_BOOL(a1, "DidSeekInBuffer");
      v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v16 = v21;
      v17 = v22;
      CMTime = FigMetricItemSeekDidCompleteEventCreate(v14, &v16, cf, v19, v18, v13, a2, v7, v8);
      goto LABEL_13;
    default:
      v10 = 0;
      break;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  return v10;
}

uint64_t FigMetricItemRateChangeEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, _QWORD *a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  void *v19;
  CFAbsoluteTime Current;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;

  if (!a6)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 88) = v18;
    if (v18)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 9;
      if (a3)
      {
        v19 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v19 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v19;
      v21 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v21;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v22;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v23;
      *(double *)(DerivedStorage + 64) = a7;
      *(double *)(DerivedStorage + 72) = a8;
      v16 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v16)
        *a6 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t FigMetricItemStallEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, _QWORD *a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  void *v19;
  CFAbsoluteTime Current;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;

  if (!a6)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 88) = v18;
    if (v18)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 8;
      if (a3)
      {
        v19 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v19 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v19;
      v21 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v21;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v22;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v23;
      *(double *)(DerivedStorage + 64) = a7;
      *(double *)(DerivedStorage + 72) = a8;
      v16 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v16)
        *a6 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t FigMetricItemSeekEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, _QWORD *a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  void *v19;
  CFAbsoluteTime Current;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;

  if (!a6)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 88) = v18;
    if (v18)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 10;
      if (a3)
      {
        v19 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v19 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v19;
      v21 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v21;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v22;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v23;
      *(double *)(DerivedStorage + 64) = a7;
      *(double *)(DerivedStorage + 72) = a8;
      v16 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v16)
        *a6 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t FigMetricItemSeekDidCompleteEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, char a6, _QWORD *a7, double a8, double a9)
{
  uint64_t v18;
  uint64_t DerivedStorage;
  uint64_t v20;
  void *v21;
  CFAbsoluteTime Current;
  __int128 v23;
  CFTypeRef v24;
  CFTypeRef v25;

  if (!a7)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v18 = CMDerivedObjectCreate();
  if (!(_DWORD)v18)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v20 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 88) = v20;
    if (v20)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 11;
      if (a3)
      {
        v21 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v21 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v21;
      v23 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v23;
      if (a4)
        v24 = CFRetain(a4);
      else
        v24 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v24;
      if (a5)
        v25 = CFRetain(a5);
      else
        v25 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v25;
      *(_BYTE *)(DerivedStorage + 80) = a6;
      *(double *)(DerivedStorage + 64) = a8;
      *(double *)(DerivedStorage + 72) = a9;
      v18 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v18)
        *a7 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v18;
}

uint64_t meirc_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[7];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[3];
  if (v3)
    CFRelease(v3);
  return FigSimpleMutexDestroy();
}

CFStringRef meirc_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricItemRateChangeEvent %p]"), a1);
}

void meirc_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t meirc_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 11));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 11));
  return v1;
}

uint64_t meirc_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meirc_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meirc_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return v2;
}

uint64_t meirc_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return v5;
}

void meirc_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t meirc_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return v4;
}

uint64_t meirc_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  int64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  int64_t v10;
  void (*v11)(__int128 *__return_ptr, uint64_t);
  void (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  const void *v14;
  uint64_t v15;
  double (*v16)(uint64_t, double);
  double v17;
  double v18;
  double (*v19)(uint64_t);
  unsigned int (*v20)(uint64_t);
  BOOL v21;
  __int128 v23;
  uint64_t v24;
  xpc_object_t value;

  value = 0;
  if (!a1 || !a2)
  {
    v8 = FigSignalErrorAt();
LABEL_37:
    v15 = v8;
    goto LABEL_35;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v4)
    v5 = v4(a1);
  else
    v5 = -12782;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 8);
  if (v6)
    v7 = v6(a1);
  else
    v7 = 0;
  v8 = FigAlternateCopyAsXPCObject(v7, &value);
  if ((_DWORD)v8)
    goto LABEL_37;
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  v10 = v9 ? v9(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v10);
  v11 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v11)
  {
    v11(&v23, a1);
  }
  else
  {
    v23 = *MEMORY[0x1E0CA2E18];
    v24 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v8 = FigXPCMessageSetCMTime();
  if ((_DWORD)v8)
    goto LABEL_37;
  v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v12)
    v12(a1);
  v8 = FigXPCMessageSetCFDate();
  if ((_DWORD)v8)
    goto LABEL_37;
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v13)
    v14 = (const void *)v13(a1);
  else
    v14 = 0;
  v15 = FigXPCMessageSetCFString();
  if (!(_DWORD)v15)
  {
    xpc_dictionary_set_int64(a2, "EventID", v5);
    v16 = *(double (**)(uint64_t, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 16);
    v17 = 0.0;
    v18 = 0.0;
    if (v16)
      v18 = v16(a1, 0.0);
    xpc_dictionary_set_double(a2, "Rate", v18);
    v19 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 24);
    if (v19)
      v17 = v19(a1);
    xpc_dictionary_set_double(a2, "PreviousRate", v17);
    xpc_dictionary_set_value(a2, "Variant", value);
    if (v5 == 11)
    {
      v20 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 32);
      if (v20)
        v21 = v20(a1) != 0;
      else
        v21 = 0;
      xpc_dictionary_set_BOOL(a2, "DidSeekInBuffer", v21);
    }
  }
  if (v14)
    CFRelease(v14);
LABEL_35:
  FigXPCRelease();
  return v15;
}

uint64_t meirc_getVariant()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
}

double meirc_getRate()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 64);
}

double meirc_getPreviousRate()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t meirc_didSeekInBuffer()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t FigRemakerCreateQueuedBaseWithURLs(const __CFAllocator *a1, uint64_t a2, unint64_t a3, const __CFURL *a4, uint64_t a5, const __CFDictionary *a6, const __CFDictionary *a7, _QWORD *a8)
{
  uint64_t v16;
  void *v17;
  const void *v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t DerivedStorage;
  uint64_t v24;
  const __CFAllocator *v25;
  CFMutableArrayRef Mutable;
  uint64_t BaseWithURLs;

  FigKTraceInit();
  v16 = FigOSTransactionCreate();
  if (!v16)
    return FigSignalErrorAt();
  v17 = (void *)v16;
  if (a7)
  {
    v18 = (const void *)*MEMORY[0x1E0C9AE50];
    v19 = v18 == CFDictionaryGetValue(a7, CFSTR("Remaker_PermitNonLocalSourceURLs"));
  }
  else
  {
    v19 = 0;
  }
  if (!(a2 | a3))
    return FigSignalErrorAt();
  if (a2)
  {
    v20 = FigCFURLIsLocalResource() || v19;
    if ((v20 & 1) == 0)
      return FigSignalErrorAt();
  }
  if (!a4 || !remakerFamily_CFURLSchemeIsFile(a4) || !a8)
    return FigSignalErrorAt();
  FigRemakerGetClassID();
  v21 = CMDerivedObjectCreate();
  if ((_DWORD)v21)
    goto LABEL_15;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 32) = 12301;
  v24 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 8) = v24;
  if (!v24)
  {
    v21 = FigSignalErrorAt();
LABEL_15:
    os_release(v17);
    return v21;
  }
  *(_QWORD *)(DerivedStorage + 40) = v17;
  v25 = CFGetAllocator(0);
  Mutable = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 24) = Mutable;
  if (!Mutable)
    return 4294955196;
  BaseWithURLs = FigRemakerCreateBaseWithURLs(a1, a2, (const void *)a3, a4, a5, a6, a7, (_QWORD *)(DerivedStorage + 16));
  if (!(_DWORD)BaseWithURLs)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v21 = CMNotificationCenterAddListener();
    if (!(_DWORD)v21)
      *a8 = 0;
    return v21;
  }
  return BaseWithURLs;
}

uint64_t queuedRemaker_reflectSubRemakerNotification(int a1, const void *a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, CFSTR("Remaker_Completed")) || CFEqual(cf1, CFSTR("Remaker_Failed")))
    remakerQueue_removeRemakerFromQueue(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigRemakerCreateQueuedWithAsset(const __CFAllocator *a1, const void *a2, const __CFURL *a3, const __CFDictionary *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  const __CFAllocator *v17;
  CFMutableArrayRef Mutable;
  uint64_t v19;
  CFTypeRef v21;
  CFTypeRef cf;

  v21 = 0;
  cf = 0;
  FigKTraceInit();
  FigCFDictionaryGetBooleanIfPresent();
  if (!a2)
    goto LABEL_21;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v13)
  {
    v19 = 4294954514;
    goto LABEL_16;
  }
  v14 = v13(CMBaseObject, CFSTR("assetProperty_CreationURL"), *MEMORY[0x1E0C9AE00], &v21);
  if ((_DWORD)v14)
    goto LABEL_22;
  if (v21 && !FigCFURLIsLocalResource() || !a3 || !remakerFamily_CFURLSchemeIsFile(a3) || !a6)
    goto LABEL_21;
  FigRemakerGetClassID();
  v14 = CMDerivedObjectCreate();
  if ((_DWORD)v14)
    goto LABEL_22;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 32) = 12301;
  v16 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 8) = v16;
  if (!v16)
  {
LABEL_21:
    v14 = FigSignalErrorAt();
    goto LABEL_22;
  }
  v17 = CFGetAllocator(cf);
  Mutable = CFArrayCreateMutable(v17, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 24) = Mutable;
  if (!Mutable)
  {
    v19 = 4294955196;
    goto LABEL_16;
  }
  v14 = FigRemakerCreateWithAsset(a1, a2, a3, a4, a5, (CFTypeRef *)(DerivedStorage + 16));
  if ((_DWORD)v14)
  {
LABEL_22:
    v19 = v14;
    goto LABEL_16;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v19 = CMNotificationCenterAddListener();
  if (!(_DWORD)v19)
  {
    *a6 = cf;
    cf = 0;
  }
LABEL_16:
  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  return v19;
}

uint64_t FigRemakerCreateQueuedWithURLs(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 *a13, uint64_t a14, uint64_t a15, const __CFURL *a16, const __CFDictionary *a17, const __CFDictionary *a18, _DWORD *a19, _DWORD *a20,_QWORD *a21)
{
  uint64_t QueuedBaseWithURLs;
  CFTypeRef v26;
  uint64_t (*v27)(CFTypeRef, uint64_t *);
  CFTypeRef v28;
  uint64_t (*v29)(CFTypeRef, char *);
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  CFTypeRef v34;
  uint64_t (*v35)(CFTypeRef, uint64_t, uint64_t, uint64_t, _DWORD *);
  _DWORD *v36;
  CFTypeRef v38;
  uint64_t (*v39)(CFTypeRef, uint64_t, int *);
  uint64_t v40;
  CFTypeRef v41;
  uint64_t (*v42)(CFTypeRef, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, CMTimeRange *, int *);
  int v43;
  __int128 v48;
  CMTimeEpoch v49;
  int v50;
  CMTimeRange range;
  CMTime v52;
  uint64_t v53;
  CFTypeRef v54[2];

  v53 = 0;
  v54[0] = 0;
  FigKTraceInit();
  if (!a2 || !FigCFURLIsLocalResource() || !a16 || !remakerFamily_CFURLSchemeIsFile(a16) || !a21)
    return FigSignalErrorAt();
  if (a19)
    *a19 = 0;
  if (a20)
    *a20 = 0;
  QueuedBaseWithURLs = FigRemakerCreateQueuedBaseWithURLs(a1, a2, 0, a16, a15, a17, a18, v54);
  if ((_DWORD)QueuedBaseWithURLs)
    goto LABEL_32;
  v26 = v54[0];
  v27 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v27)
    goto LABEL_45;
  QueuedBaseWithURLs = v27(v26, &v53);
  if ((_DWORD)QueuedBaseWithURLs)
    goto LABEL_32;
  v28 = v54[0];
  v29 = *(uint64_t (**)(CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v29)
    goto LABEL_45;
  QueuedBaseWithURLs = v29(v28, (char *)&v53 + 4);
  if ((_DWORD)QueuedBaseWithURLs)
    goto LABEL_32;
  if ((*(_BYTE *)(a14 + 12) & 1) != 0
    && (*(_BYTE *)(a14 + 36) & 1) != 0
    && !*(_QWORD *)(a14 + 40)
    && (*(_QWORD *)(a14 + 24) & 0x8000000000000000) == 0)
  {
    v30 = (uint64_t)v54[0];
    v31 = *(_OWORD *)(a14 + 16);
    *(_OWORD *)&range.start.value = *(_OWORD *)a14;
    *(_OWORD *)&range.start.epoch = v31;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a14 + 32);
    CMTimeRangeGetEnd(&v52, &range);
    *(_OWORD *)&range.start.value = *(_OWORD *)a14;
    range.start.epoch = *(_QWORD *)(a14 + 16);
    QueuedBaseWithURLs = FigRemakerSetTimeRange(v30, (__int128 *)&range.start.value, (__int128 *)&v52.value);
    if ((_DWORD)QueuedBaseWithURLs)
      goto LABEL_32;
  }
  v32 = v53;
  v33 = HIDWORD(v53);
  if (!v53)
  {
    QueuedBaseWithURLs = FigSignalErrorAt();
    goto LABEL_32;
  }
  if (!(_DWORD)v53)
    goto LABEL_25;
  v34 = v54[0];
  v35 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 88);
  if (!v35)
    goto LABEL_45;
  QueuedBaseWithURLs = v35(v34, v32, a3, a4, a19);
  if ((_DWORD)QueuedBaseWithURLs)
  {
LABEL_32:
    v33 = QueuedBaseWithURLs;
    goto LABEL_46;
  }
  v33 = HIDWORD(v53);
LABEL_25:
  if ((_DWORD)v33)
  {
    v50 = 0;
    if (a8)
    {
      if (a8 == 1851876449)
      {
        v36 = a20;
        if (!a20)
          goto LABEL_43;
        goto LABEL_42;
      }
      v41 = v54[0];
      v48 = *a13;
      v49 = *((_QWORD *)a13 + 2);
      v42 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, CMTimeRange *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v42)
      {
        *(_OWORD *)&range.start.value = v48;
        range.start.epoch = v49;
        v40 = v42(v41, v33, a5, a6, a7, a8, a9, a10, a11, a12, &range, &v50);
        goto LABEL_37;
      }
    }
    else
    {
      v38 = v54[0];
      v39 = *(uint64_t (**)(CFTypeRef, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v39)
      {
        v40 = v39(v38, v33, &v50);
LABEL_37:
        v33 = v40;
        if ((_DWORD)v40)
          v43 = 6;
        else
          v43 = 0;
        if (a20)
        {
          v36 = a20;
          if (!(_DWORD)v40)
          {
LABEL_42:
            *v36 = v50;
LABEL_43:
            v33 = 0;
            goto LABEL_44;
          }
        }
        if (v43 != 6)
          goto LABEL_44;
LABEL_46:
        if (v54[0])
          CFRelease(v54[0]);
        return v33;
      }
    }
LABEL_45:
    v33 = 4294954514;
    goto LABEL_46;
  }
LABEL_44:
  *a21 = v54[0];
  return v33;
}

uint64_t FigRemakerSetTimeRange(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t (*v6)(uint64_t, __int128 *, __int128 *);
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v6)
    return 4294954514;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  return v6(a1, &v10, &v8);
}

void remakerQueue_removeRemakerFromQueue(const void *a1)
{
  const __CFArray *v2;
  CFIndex FirstIndexOfValue;
  CFRange v4;

  MEMORY[0x19402F294](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  MEMORY[0x19402EEEC](sRemakerQueueMutex);
  if ((const void *)sActiveRemaker == a1)
    sActiveRemaker = 0;
  v2 = (const __CFArray *)sRemakerWaitingQueue;
  v4.length = CFArrayGetCount((CFArrayRef)sRemakerWaitingQueue);
  v4.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v2, v4, a1);
  if (FirstIndexOfValue != -1)
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)sRemakerWaitingQueue, FirstIndexOfValue);
  MEMORY[0x19402EF04](sRemakerQueueMutex);
  MEMORY[0x19402F294](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  dispatch_async((dispatch_queue_t)sRemakerStartQueue, &__block_literal_global_53);
}

uint64_t remakerQueue_createMutexAndArray()
{
  uint64_t result;

  sRemakerQueueMutex = FigSimpleMutexCreate();
  sRemakerWaitingQueue = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  result = FigDispatchQueueCreateWithPriority();
  sRemakerStartQueue = result;
  return result;
}

void __remakerQueue_ensureWeHaveAnActiveRemaker_soon_block_invoke()
{
  const void *ValueAtIndex;
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  BOOL v8;
  const __CFDictionary *v9;
  const void *Value;
  uint64_t v11;
  const void *value_low;
  const void *v13;
  const void *v14;
  uint64_t (*v15)(uint64_t, const void *, const void *, const void *, unsigned int *);
  int v16;
  const __CFDictionary *v18;
  int flags;
  uint64_t v20;
  uint64_t v21;
  const __CFData *v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  uint64_t (*v28)(uint64_t, const void *, const void *, const void *, const void *, const void *, const void *, const void *, uint64_t, const void *, const void *, const void *, CMTime *, unint64_t, unint64_t, int, const void *, int, const void *, const void *, const void *, const void *, unsigned int *);
  int v29;
  const __CFNumber *v30;
  const __CFData *v31;
  const UInt8 *v32;
  const void *v33;
  const void *v34;
  uint64_t (*v35)(uint64_t, uint64_t, const UInt8 *, CMTimeValue, const UInt8 *, const void *, const void *, unsigned int *);
  uint64_t v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  uint64_t (*v41)(uint64_t, _QWORD, _QWORD, _QWORD, const void *, _QWORD, const void *, const void *, const void *, const void *, CMTime *, unsigned int *);
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t (*v45)(uint64_t, uint64_t, const void *, unsigned int *);
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t (*v50)(uint64_t, uint64_t, const void *, unsigned int *);
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  int v54;
  const void *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  const void *v61;
  const void *v62;
  const void *v63;
  int v64;
  const void *v65;
  const void *v66;
  const void *v67;
  unsigned int v68;
  const void *v69;
  const void *v70;
  const void *v71;
  unsigned int v72;
  const void *v73;
  CMTimeValue v74;
  unsigned int v75;
  const UInt8 *BytePtr;
  const void *v77;
  unsigned int v78;
  const void *v79;
  uint64_t v80;
  CMTime v81;
  CMTime v82;
  unsigned int v83;
  CMTime context;

  MEMORY[0x19402EEEC](sRemakerQueueMutex);
  if (sActiveRemaker || CFArrayGetCount((CFArrayRef)sRemakerWaitingQueue) < 1)
LABEL_70:
    JUMPOUT(0x19402EF04);
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sRemakerWaitingQueue, 0);
  if (!ValueAtIndex)
  {
    sActiveRemaker = 0;
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)sRemakerWaitingQueue, 0);
    goto LABEL_70;
  }
  v1 = ValueAtIndex;
  CFRetain(ValueAtIndex);
  sActiveRemaker = (uint64_t)v1;
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)sRemakerWaitingQueue, 0);
  MEMORY[0x19402EF04](sRemakerQueueMutex);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v83 = 0;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (v4)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v80 = v4;
  *(_BYTE *)(v3 + 49) = 1;
  Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 24));
  if (Count < 1)
  {
    v8 = 0;
LABEL_58:
    v51 = *(_QWORD *)(v3 + 16);
    v52 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v52)
    {
      v16 = v52(v51);
LABEL_60:
      flags = v16;
    }
    else
    {
LABEL_61:
      flags = -12782;
    }
    goto LABEL_62;
  }
  v6 = Count;
  v7 = 0;
  v8 = 1;
  v79 = v1;
  while (1)
  {
    v83 = 0;
    v9 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 24), v7);
    Value = CFDictionaryGetValue(v9, CFSTR("Common_TrackType"));
    if (CFEqual(Value, CFSTR("TrackType_AudioMixdownTrackWithPreset")))
    {
      v11 = *(_QWORD *)(v3 + 16);
      value_low = CFDictionaryGetValue(v9, CFSTR("Audio_SourceAudioTrackArray"));
      v13 = CFDictionaryGetValue(v9, CFSTR("Audio_AudioPresetName"));
      v14 = CFDictionaryGetValue(v9, CFSTR("Audio_AudioProcessingOptions"));
      v15 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (!v15)
        goto LABEL_61;
      goto LABEL_14;
    }
    if (CFEqual(Value, CFSTR("TrackType_AudioTrackWithPreset")))
    {
      v11 = *(_QWORD *)(v3 + 16);
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      value_low = (const void *)LODWORD(context.value);
      v13 = CFDictionaryGetValue(v9, CFSTR("Audio_AudioPresetName"));
      v14 = CFDictionaryGetValue(v9, CFSTR("Audio_AudioProcessingOptions"));
      v15 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (!v15)
        goto LABEL_61;
LABEL_14:
      v16 = v15(v11, value_low, v13, v14, &v83);
      if (v16 != -12123 && v16 != 0)
        goto LABEL_60;
      goto LABEL_19;
    }
    if (CFEqual(Value, CFSTR("TrackType_AudioTrack")))
    {
      v20 = *(_QWORD *)(v3 + 16);
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v21 = LODWORD(context.value);
      v22 = (const __CFData *)CFDictionaryGetValue(v9, CFSTR("Audio_DestinationASBD"));
      if (v22)
        BytePtr = CFDataGetBytePtr(v22);
      else
        BytePtr = 0;
      context.value = 0;
      v30 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("Audio_DestinationChannelLayoutSize"));
      if (v30)
      {
        CFNumberGetValue(v30, kCFNumberSInt64Type, &context);
        v74 = context.value;
      }
      else
      {
        v74 = 0;
      }
      v31 = (const __CFData *)CFDictionaryGetValue(v9, CFSTR("Audio_DestinationChannelLayout"));
      if (v31)
        v32 = CFDataGetBytePtr(v31);
      else
        v32 = 0;
      v33 = CFDictionaryGetValue(v9, CFSTR("Audio_AudioOptions"));
      v34 = CFDictionaryGetValue(v9, CFSTR("Audio_AudioProcessingOptions"));
      v35 = *(uint64_t (**)(uint64_t, uint64_t, const UInt8 *, CMTimeValue, const UInt8 *, const void *, const void *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v35)
      {
LABEL_67:
        flags = -12782;
        goto LABEL_68;
      }
      v29 = v35(v20, v21, BytePtr, v74, v32, v33, v34, &v83);
LABEL_39:
      v1 = v79;
      if (v29 == -12123)
        goto LABEL_19;
LABEL_40:
      flags = v29;
      if (v29)
        goto LABEL_62;
      goto LABEL_19;
    }
    if (CFEqual(Value, CFSTR("TrackType_VideoCompositionTrack")))
    {
      v23 = *(_QWORD *)(v3 + 16);
      v77 = CFDictionaryGetValue(v9, CFSTR("Video_SourceVideoTrackArray"));
      v73 = CFDictionaryGetValue(v9, CFSTR("Video_SourceSampleDataTrackArray"));
      v71 = CFDictionaryGetValue(v9, CFSTR("Video_SourceVideoTrackWindows"));
      v69 = CFDictionaryGetValue(v9, CFSTR("Video_SourceSampleDataTrackWindows"));
      v67 = CFDictionaryGetValue(v9, CFSTR("Video_VideoCompositor"));
      v66 = CFDictionaryGetValue(v9, CFSTR("Video_VideoCompositionInstructionArray"));
      v65 = CFDictionaryGetValue(v9, CFSTR("Video_AnimationRootLayer"));
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v64 = context.value;
      v63 = CFDictionaryGetValue(v9, CFSTR("Video_AnimationVideoLayers"));
      v62 = CFDictionaryGetValue(v9, CFSTR("Video_AnimationVideoTrackIDs"));
      v61 = CFDictionaryGetValue(v9, CFSTR("Video_AnimationRendererOptions"));
      queuedRemaker_dictionaryGetFigTime(v9, &v82);
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v60 = context.value;
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v59 = context.value;
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v58 = context.value;
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v57 = context.value;
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v56 = context.value;
      v55 = CFDictionaryGetValue(v9, CFSTR("Video_VideoScalingProperties"));
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v54 = context.value;
      v24 = CFDictionaryGetValue(v9, CFSTR("Video_VideoEncoderSpecification"));
      v25 = CFDictionaryGetValue(v9, CFSTR("Video_VideoCompressionProperties"));
      v26 = CFDictionaryGetValue(v9, CFSTR("Video_VideoProcessingOptions"));
      v27 = CFDictionaryGetValue(v9, CFSTR("Video_VideoCompositionProcessorProperties"));
      v28 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const void *, const void *, const void *, const void *, uint64_t, const void *, const void *, const void *, CMTime *, unint64_t, unint64_t, int, const void *, int, const void *, const void *, const void *, const void *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
      if (!v28)
        goto LABEL_67;
      context = v82;
      LODWORD(v53) = v64;
      v29 = v28(v23, v77, v73, v71, v69, v67, v66, v65, v53, v63, v62, v61, &context, __PAIR64__(v59, v60), __PAIR64__(v57, v58), v56, v55, v54, v24,
              v25,
              v26,
              v27,
              &v83);
      goto LABEL_39;
    }
    if (CFEqual(Value, CFSTR("TrackType_VideoTrack")))
    {
      v36 = *(_QWORD *)(v3 + 16);
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v78 = context.value;
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v75 = context.value;
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v72 = context.value;
      v70 = CFDictionaryGetValue(v9, CFSTR("Video_VideoScalingProperties"));
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v68 = context.value;
      v37 = CFDictionaryGetValue(v9, CFSTR("Video_VideoEncoderSpecification"));
      v38 = CFDictionaryGetValue(v9, CFSTR("Video_VideoDecompressionProperties"));
      v39 = CFDictionaryGetValue(v9, CFSTR("Video_VideoCompressionProperties"));
      v40 = CFDictionaryGetValue(v9, CFSTR("Video_VideoProcessingOptions"));
      queuedRemaker_dictionaryGetFigTime(v9, &v81);
      v41 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, const void *, _QWORD, const void *, const void *, const void *, const void *, CMTime *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v41)
        goto LABEL_67;
      context = v81;
      v29 = v41(v36, v78, v75, v72, v70, v68, v37, v38, v39, v40, &context, &v83);
      goto LABEL_39;
    }
    if (CFEqual(Value, CFSTR("TrackType_Passthrough")))
    {
      v42 = *(_QWORD *)(v3 + 16);
      LODWORD(context.value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v43 = LODWORD(context.value);
      v44 = CFDictionaryGetValue(v9, CFSTR("Passthrough_Options"));
      v45 = *(uint64_t (**)(uint64_t, uint64_t, const void *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 120);
      if (!v45)
        goto LABEL_67;
      v16 = v45(v42, v43, v44, &v83);
      v46 = v16 == -12123 || v16 == 0;
      v1 = v79;
      if (!v46)
        goto LABEL_60;
      goto LABEL_19;
    }
    if (!CFEqual(Value, CFSTR("TrackType_TemporalMetadata")))
      break;
    v47 = *(_QWORD *)(v3 + 16);
    LODWORD(context.value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    v48 = LODWORD(context.value);
    v49 = CFDictionaryGetValue(v9, CFSTR("TemporalMetadata_Options"));
    v50 = *(uint64_t (**)(uint64_t, uint64_t, const void *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 136);
    v1 = v79;
    if (!v50)
      goto LABEL_61;
    v29 = v50(v47, v48, v49, &v83);
    if (v29 != -12123)
      goto LABEL_40;
LABEL_19:
    FigCFDictionarySetInt32();
    v18 = (const __CFDictionary *)CFDictionaryGetValue(v9, CFSTR("Common_FormatWriterTrackProperties"));
    if (v83)
    {
      if (v18)
      {
        context.value = *(_QWORD *)(v3 + 16);
        *(_QWORD *)&context.timescale = v83;
        CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)queuedRemaker_setPendingFormatWriterTrackProperty, &context);
        flags = context.flags;
        if (context.flags)
          goto LABEL_62;
      }
    }
    v8 = ++v7 < v6;
    if (v6 == v7)
      goto LABEL_58;
  }
  flags = FigSignalErrorAt();
LABEL_68:
  v1 = v79;
LABEL_62:
  if (v80)
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 8));
  if (flags != 0 && v8)
  {
    remakerFamily_PostFailureNotificationIfError(*(const void **)(v3 + 16), 0, flags, 0, 0);
    remakerQueue_removeRemakerFromQueue(v1);
  }
  CFRelease(v1);
}

CMTime *queuedRemaker_dictionaryGetFigTime@<X0>(const __CFDictionary *a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3;
  CMTime *result;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v3 + 16);
  result = (CMTime *)CFDictionaryGetValue(a1, CFSTR("Video_FrameDuration"));
  if (result)
    return CMTimeMakeFromDictionary(a2, (CFDictionaryRef)result);
  return result;
}

uint64_t queuedRemaker_setPendingFormatWriterTrackProperty(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  BOOL v10;
  BOOL v11;

  if (!*((_DWORD *)a3 + 3))
  {
    v5 = result;
    v6 = *a3;
    v7 = *((unsigned int *)a3 + 2);
    result = CMBaseObjectGetVTable();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 40);
    if (!v8
      || (*MEMORY[0x1E0C9B0D0] != a2 ? (v9 = a2) : (v9 = 0),
          (result = v8(v6, v7, v5, v9), *((_DWORD *)a3 + 3) = result, (_DWORD)result != -12784)
        ? (v10 = (_DWORD)result == -12630)
        : (v10 = 1),
          !v10 ? (v11 = (_DWORD)result == -12782) : (v11 = 1),
          v11))
    {
      *((_DWORD *)a3 + 3) = 0;
    }
  }
  return result;
}

uint64_t queuedRemaker_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t v6;
  void (*v7)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v4 = *(_QWORD *)(DerivedStorage + 8);
    if (v4)
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
    remakerQueue_removeRemakerFromQueue(a1);
    if (*(_QWORD *)(v3 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      FigBaseObject = FigRemakerGetFigBaseObject(*(_QWORD *)(v3 + 16));
      if (FigBaseObject)
      {
        v6 = FigBaseObject;
        v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v7)
          v7(v6);
      }
    }
    if (v4)
      MEMORY[0x19402EA24](*(_QWORD *)(v3 + 8));
  }
  return 0;
}

void queuedRemaker_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  queuedRemaker_Invalidate(a1);
  if (DerivedStorage[1])
  {
    DerivedStorage[1] = 0;
    FigSimpleMutexDestroy();
  }
  v3 = (const void *)DerivedStorage[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  v5 = (void *)DerivedStorage[5];
  if (v5)
  {
    os_release(v5);
    DerivedStorage[5] = 0;
  }
}

__CFString *queuedRemaker_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRemakerQueued %p retainCount: %ld%s allocator: %p subremaker: %@>"), a1, v5, v6, v7, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t queuedRemaker_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, const void *, uint64_t, CFNumberRef *);
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (v9)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v8 || !a2 || !a4)
  {
    v12 = FigSignalErrorAt();
LABEL_11:
    v13 = v12;
    if (!v9)
      return v13;
    goto LABEL_14;
  }
  if (CFEqual(CFSTR("Remaker_Progress"), a2) && *(_BYTE *)(v8 + 48) && !*(_BYTE *)(v8 + 49))
  {
    valuePtr = 0;
    v13 = 0;
    *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (!v9)
      return v13;
    goto LABEL_14;
  }
  FigBaseObject = FigRemakerGetFigBaseObject(*(_QWORD *)(v8 + 16));
  v11 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v11)
  {
    v12 = v11(FigBaseObject, a2, a3, a4);
    goto LABEL_11;
  }
  v13 = 4294954514;
  if (v9)
LABEL_14:
    MEMORY[0x19402EA24](*(_QWORD *)(v8 + 8));
  return v13;
}

uint64_t queuedRemaker_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (v7)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v6 || !a2)
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    FigBaseObject = FigRemakerGetFigBaseObject(*(_QWORD *)(v6 + 16));
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v9)
    {
      v11 = 4294954514;
      if (!v7)
        return v11;
      goto LABEL_8;
    }
    v10 = v9(FigBaseObject, a2, a3);
  }
  v11 = v10;
  if (v7)
LABEL_8:
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
  return v11;
}

uint64_t queuedRemaker_AddAudioTrack(const void *a1, int a2, UInt8 *a3, CFIndex a4, UInt8 *a5, const void *a6, const void *a7, _DWORD *a8)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t v18;
  const __CFAllocator *v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  CFNumberRef v22;
  uint64_t v23;
  CFIndex valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = DerivedStorage;
  v18 = *(_QWORD *)(DerivedStorage + 8);
  if (v18)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)v17 && a2 && a3)
  {
    v19 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v21 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_AudioTrack"));
      FigCFDictionarySetInt32();
      queuedRemaker_dictionarySetData(v21, CFSTR("Audio_DestinationASBD"), a3, 40);
      valuePtr = a4;
      v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
      CFDictionarySetValue(v21, CFSTR("Audio_DestinationChannelLayoutSize"), v22);
      CFRelease(v22);
      if (a4 && a5)
        queuedRemaker_dictionarySetData(v21, CFSTR("Audio_DestinationChannelLayout"), a5, a4);
      if (a6)
        CFDictionarySetValue(v21, CFSTR("Audio_AudioOptions"), a6);
      if (a7)
        CFDictionarySetValue(v21, CFSTR("Audio_AudioProcessingOptions"), a7);
      FigCFDictionarySetInt32();
      if (a8)
        *a8 = *(_DWORD *)(v17 + 32);
      ++*(_DWORD *)(v17 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v17 + 24), v21);
      v23 = 0;
    }
    else
    {
      v23 = 4294955196;
    }
  }
  else
  {
    v23 = FigSignalErrorAt();
    v21 = 0;
  }
  if (v18)
    MEMORY[0x19402EA24](*(_QWORD *)(v17 + 8));
  if (v21)
    CFRelease(v21);
  return v23;
}

uint64_t queuedRemaker_AddVideoTrack(const void *a1, int a2, int a3, int a4, const void *a5, int a6, const void *a7, const void *a8, void *value, void *a10, uint64_t a11, _DWORD *a12)
{
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  __CFDictionary *Mutable;
  __CFDictionary *v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = DerivedStorage;
  v19 = *(_QWORD *)(DerivedStorage + 8);
  if (v19)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v18 || !a2)
  {
    v23 = FigSignalErrorAt();
    v22 = 0;
  }
  else
  {
    v20 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_VideoTrack"));
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (a5)
        CFDictionarySetValue(v22, CFSTR("Video_VideoScalingProperties"), a5);
      FigCFDictionarySetInt32();
      if (a7)
        CFDictionarySetValue(v22, CFSTR("Video_VideoEncoderSpecification"), a7);
      if (a8)
        CFDictionarySetValue(v22, CFSTR("Video_VideoDecompressionProperties"), a8);
      if (value)
        CFDictionarySetValue(v22, CFSTR("Video_VideoCompressionProperties"), value);
      if (a10)
        CFDictionarySetValue(v22, CFSTR("Video_VideoProcessingOptions"), a10);
      FigCFDictionarySetCMTime();
      FigCFDictionarySetInt32();
      if (a12)
        *a12 = *(_DWORD *)(v18 + 32);
      ++*(_DWORD *)(v18 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v18 + 24), v22);
      v23 = 0;
    }
    else
    {
      v23 = 4294955196;
    }
  }
  if (v19)
    MEMORY[0x19402EA24](*(_QWORD *)(v18 + 8));
  if (v22)
    CFRelease(v22);
  return v23;
}

uint64_t queuedRemaker_AddPassthroughTrack(const void *a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  v8 = *(_QWORD *)(DerivedStorage + 8);
  if (v8)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v7 || !a2)
  {
    v12 = FigSignalErrorAt();
    v11 = 0;
  }
  else
  {
    v9 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_Passthrough"));
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (a3)
        *a3 = *(_DWORD *)(v7 + 32);
      ++*(_DWORD *)(v7 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 24), v11);
      v12 = 0;
    }
    else
    {
      v12 = 4294955196;
    }
  }
  if (v8)
    MEMORY[0x19402EA24](*(_QWORD *)(v7 + 8));
  if (v11)
    CFRelease(v11);
  return v12;
}

uint64_t queuedRemaker_SetFormatWriterProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (v7)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v6)
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v9)
    {
      v11 = 4294954514;
      if (!v7)
        return v11;
      goto LABEL_7;
    }
    v10 = v9(v8, a2, a3);
  }
  v11 = v10;
  if (v7)
LABEL_7:
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
  return v11;
}

uint64_t queuedRemaker_SetFormatWriterTrackProperty(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (v7)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)v6 && a3 && CFArrayGetCount(*(CFArrayRef *)(v6 + 24)) > a2 - 12301 && a2 > 12300)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 24), a2 - 12301);
    FigCFDictionaryGetInt32IfPresent();
  }
  v9 = FigSignalErrorAt();
  if (v7)
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
  return v9;
}

uint64_t queuedRemaker_SetTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CMTime *, CMTime *);
  uint64_t v10;
  uint64_t v11;
  CMTime v13;
  CMTime v14;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (v7)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v6
    || (a2->flags & 0x1D) != 1
    || (a3->flags & 0x1D) == 1 && (time1 = *a2, time2 = *a3, (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v14.value = *(_OWORD *)&a2->value;
    v14.epoch = a2->epoch;
    *(_OWORD *)&v13.value = *(_OWORD *)&a3->value;
    v13.epoch = a3->epoch;
    v9 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v9)
    {
      v11 = 4294954514;
      if (!v7)
        return v11;
      goto LABEL_10;
    }
    time1 = v14;
    time2 = v13;
    v10 = v9(v8, &time1, &time2);
  }
  v11 = v10;
  if (v7)
LABEL_10:
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
  return v11;
}

uint64_t queuedRemaker_StartOutput(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (v4)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v3 || *(_BYTE *)(v3 + 48))
  {
    v5 = FigSignalErrorAt();
    if (!v4)
      return v5;
    goto LABEL_8;
  }
  MEMORY[0x19402F294](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  MEMORY[0x19402EEEC](sRemakerQueueMutex);
  CFArrayAppendValue((CFMutableArrayRef)sRemakerWaitingQueue, a1);
  MEMORY[0x19402EF04](sRemakerQueueMutex);
  MEMORY[0x19402F294](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  dispatch_async((dispatch_queue_t)sRemakerStartQueue, &__block_literal_global_53);
  *(_BYTE *)(v3 + 48) = 1;
  if (!*(_BYTE *)(v3 + 49))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  v5 = 0;
  if (v4)
LABEL_8:
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 8));
  return v5;
}

uint64_t queuedRemaker_EstimateMaxSegmentDurationForFileSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (v7)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v6)
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v9)
    {
      v11 = 4294954514;
      if (!v7)
        return v11;
      goto LABEL_7;
    }
    v10 = v9(v8, a2, a3);
  }
  v11 = v10;
  if (v7)
LABEL_7:
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
  return v11;
}

uint64_t queuedRemaker_GetDefaultSourceAudioTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (v5)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v4)
  {
    v8 = FigSignalErrorAt();
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (!v7)
    {
      v9 = 4294954514;
      if (!v5)
        return v9;
      goto LABEL_7;
    }
    v8 = v7(v6, a2);
  }
  v9 = v8;
  if (v5)
LABEL_7:
    MEMORY[0x19402EA24](*(_QWORD *)(v4 + 8));
  return v9;
}

uint64_t queuedRemaker_GetDefaultSourceVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (v5)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v4)
  {
    v8 = FigSignalErrorAt();
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (!v7)
    {
      v9 = 4294954514;
      if (!v5)
        return v9;
      goto LABEL_7;
    }
    v8 = v7(v6, a2);
  }
  v9 = v8;
  if (v5)
LABEL_7:
    MEMORY[0x19402EA24](*(_QWORD *)(v4 + 8));
  return v9;
}

uint64_t queuedRemaker_AddAudioTrackWithPreset(const void *a1, int a2, const void *a3, const void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = DerivedStorage;
  v12 = *(_QWORD *)(DerivedStorage + 8);
  if (v12)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v11 || !a2)
  {
    v16 = FigSignalErrorAt();
    v15 = 0;
  }
  else
  {
    v13 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_AudioTrackWithPreset"));
      FigCFDictionarySetInt32();
      if (a3)
        CFDictionaryAddValue(v15, CFSTR("Audio_AudioPresetName"), a3);
      if (a4)
        CFDictionaryAddValue(v15, CFSTR("Audio_AudioProcessingOptions"), a4);
      FigCFDictionarySetInt32();
      if (a5)
        *a5 = *(_DWORD *)(v11 + 32);
      ++*(_DWORD *)(v11 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 24), v15);
      v16 = 0;
    }
    else
    {
      v16 = 4294955196;
    }
  }
  if (v12)
    MEMORY[0x19402EA24](*(_QWORD *)(v11 + 8));
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t queuedRemaker_AddAudioMixdownTrackWithPreset(const void *a1, const void *a2, const void *a3, const void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = DerivedStorage;
  v12 = *(_QWORD *)(DerivedStorage + 8);
  if (v12)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v11 || !a2)
  {
    v16 = FigSignalErrorAt();
    v15 = 0;
  }
  else
  {
    v13 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_AudioMixdownTrackWithPreset"));
      CFDictionaryAddValue(v15, CFSTR("Audio_SourceAudioTrackArray"), a2);
      if (a3)
        CFDictionaryAddValue(v15, CFSTR("Audio_AudioPresetName"), a3);
      if (a4)
        CFDictionaryAddValue(v15, CFSTR("Audio_AudioProcessingOptions"), a4);
      FigCFDictionarySetInt32();
      if (a5)
        *a5 = *(_DWORD *)(v11 + 32);
      ++*(_DWORD *)(v11 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 24), v15);
      v16 = 0;
    }
    else
    {
      v16 = 4294955196;
    }
  }
  if (v12)
    MEMORY[0x19402EA24](*(_QWORD *)(v11 + 8));
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t queuedRemaker_AddVideoCompositionTrack(const void *a1, const void *a2, int a3, int a4, int a5, const void *a6, const void *a7, const void *a8, int a9, const void *a10, const void *a11, const void *a12, uint64_t a13, int a14, int a15, int a16, int a17, int a18, const void *a19, int a20,const void *a21,const void *a22,void *value,const void *a24,_DWORD *a25)
{
  uint64_t DerivedStorage;
  uint64_t v31;
  uint64_t v32;
  const __CFAllocator *v33;
  __CFDictionary *Mutable;
  __CFDictionary *v35;
  uint64_t v36;
  uint64_t v38;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = DerivedStorage;
  v32 = *(_QWORD *)(DerivedStorage + 8);
  if (v32)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v38 = v32;
  if (*(_BYTE *)v31 || !a2)
  {
    v36 = FigSignalErrorAt();
    v35 = 0;
  }
  else
  {
    v33 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v33, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v35 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_VideoCompositionTrack"));
      CFDictionarySetValue(v35, CFSTR("Video_SourceVideoTrackArray"), a2);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (a6)
        CFDictionarySetValue(v35, CFSTR("Video_VideoCompositor"), a6);
      if (a7)
        CFDictionarySetValue(v35, CFSTR("Video_VideoCompositionInstructionArray"), a7);
      if (a8)
        CFDictionarySetValue(v35, CFSTR("Video_AnimationRootLayer"), a8);
      FigCFDictionarySetInt32();
      if (a10)
        CFDictionarySetValue(v35, CFSTR("Video_AnimationVideoLayers"), a10);
      if (a11)
        CFDictionarySetValue(v35, CFSTR("Video_AnimationVideoTrackIDs"), a11);
      if (a12)
        CFDictionarySetValue(v35, CFSTR("Video_AnimationRendererOptions"), a12);
      FigCFDictionarySetCMTime();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (a19)
        CFDictionarySetValue(v35, CFSTR("Video_VideoScalingProperties"), a19);
      FigCFDictionarySetInt32();
      if (a21)
        CFDictionarySetValue(v35, CFSTR("Video_VideoEncoderSpecification"), a21);
      if (a22)
        CFDictionarySetValue(v35, CFSTR("Video_VideoCompressionProperties"), a22);
      if (value)
        CFDictionarySetValue(v35, CFSTR("Video_VideoProcessingOptions"), value);
      if (a24)
        CFDictionarySetValue(v35, CFSTR("Video_VideoCompositionProcessorProperties"), a24);
      FigCFDictionarySetInt32();
      if (a25)
        *a25 = *(_DWORD *)(v31 + 32);
      ++*(_DWORD *)(v31 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v31 + 24), v35);
      v36 = 0;
    }
    else
    {
      v36 = 4294955196;
    }
  }
  if (v38)
    MEMORY[0x19402EA24](*(_QWORD *)(v31 + 8));
  if (v35)
    CFRelease(v35);
  return v36;
}

uint64_t queuedRemaker_AddPassthroughTrackWithOptions(const void *a1, int a2, const void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  if (v10)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v9 || !a2)
  {
    v14 = FigSignalErrorAt();
    v13 = 0;
  }
  else
  {
    v11 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_Passthrough"));
      FigCFDictionarySetInt32();
      if (a3)
        CFDictionarySetValue(v13, CFSTR("Passthrough_Options"), a3);
      FigCFDictionarySetInt32();
      if (a4)
        *a4 = *(_DWORD *)(v9 + 32);
      ++*(_DWORD *)(v9 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v9 + 24), v13);
      v14 = 0;
    }
    else
    {
      v14 = 4294955196;
    }
  }
  if (v10)
    MEMORY[0x19402EA24](*(_QWORD *)(v9 + 8));
  if (v13)
    CFRelease(v13);
  return v14;
}

uint64_t queuedRemaker_CanPerformFastFrameRateConversion(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __int128 *);
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  if (v7)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v6)
  {
    v10 = FigSignalErrorAt();
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 16);
    v13 = *a3;
    v14 = *((_QWORD *)a3 + 2);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
    if (!v9)
    {
      v11 = 4294954514;
      if (!v7)
        return v11;
      goto LABEL_7;
    }
    v15 = v13;
    v16 = v14;
    v10 = v9(v8, a2, &v15);
  }
  v11 = v10;
  if (v7)
LABEL_7:
    MEMORY[0x19402EA24](*(_QWORD *)(v6 + 8));
  return v11;
}

uint64_t queuedRemaker_AddTemporaMetadataTrackWithOptions(const void *a1, int a2, const void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  if (v10)
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v9 || !a2)
  {
    v14 = FigSignalErrorAt();
    v13 = 0;
  }
  else
  {
    v11 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("Common_TrackType"), CFSTR("TrackType_TemporalMetadata"));
      FigCFDictionarySetInt32();
      if (a3)
        CFDictionarySetValue(v13, CFSTR("TemporalMetadata_Options"), a3);
      FigCFDictionarySetInt32();
      if (a4)
        *a4 = *(_DWORD *)(v9 + 32);
      ++*(_DWORD *)(v9 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v9 + 24), v13);
      v14 = 0;
    }
    else
    {
      v14 = 4294955196;
    }
  }
  if (v10)
    MEMORY[0x19402EA24](*(_QWORD *)(v9 + 8));
  if (v13)
    CFRelease(v13);
  return v14;
}

void queuedRemaker_dictionarySetData(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6;

  v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, length);
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v6);
}

uint64_t FigTTMLExtensionsCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  uint64_t v11;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLExtensionsConsumeChildNode, (uint64_t *)a3);
            if (!(_DWORD)v11)
              *a4 = 0;
            return v11;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLExtensionsConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_8;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_18;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLExtensionCreate(v9, a1, (__int128 *)a2, &value);
    if (!(_DWORD)v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_9:
      v10 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  v10 = v8;
LABEL_11:
  if (cf)
    CFRelease(cf);
LABEL_13:
  if (v13)
    CFRelease(v13);
  if (value)
    CFRelease(value);
  return v10;
}

void figTTMLExtensions_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLExtensions_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("extensions: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLExtensions_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  const __CFArray *v6;
  CFRange v7;
  uint64_t v8;

  v3 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = *(const __CFArray **)(DerivedStorage + 136);
    if (v6)
      v7.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136));
    else
      v7.length = 0;
    v7.location = 0;
    CFArrayAppendArray(Mutable, v6, v7);
    v8 = 0;
    *a2 = Mutable;
  }
  else
  {
    v8 = FigSignalErrorAt();
    if (Mutable)
      CFRelease(Mutable);
  }
  return v8;
}

uint64_t figTTMLExtensions_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 17;
  return 0;
}

uint64_t FigWebVTTFormatReaderCreateFromStream(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t Instance;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  char *v13;
  const __CFAllocator *v14;
  CFTypeRef v15;
  CFMutableArrayRef Mutable;
  uint64_t CMBaseObject;
  void (*v18)(uint64_t, __CFString *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  _QWORD *v24;
  CFTypeRef v25;
  uint64_t v27;
  __int128 v28;
  CMTime v29;

  if (a1)
  {
    FigFormatReaderGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
      return v5;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (sRegisterWebVTTInfoTypeOnce != -1)
      dispatch_once_f(&sRegisterWebVTTInfoTypeOnce, 0, (dispatch_function_t)RegisterWebVTTInfoType);
    Instance = _CFRuntimeCreateInstance();
    if (!Instance)
    {
      v20 = FigSignalErrorAt();
LABEL_18:
      if (!(_DWORD)v20)
      {
        v22 = *(const void **)DerivedStorage;
        v29.value = 0;
        FigTrackReaderGetClassID();
        v23 = CMDerivedObjectCreate();
        if ((_DWORD)v23)
        {
          return v23;
        }
        else
        {
          v24 = (_QWORD *)CMBaseObjectGetDerivedStorage();
          if (v22)
            v25 = CFRetain(v22);
          else
            v25 = 0;
          v20 = 0;
          *v24 = v25;
          *(_QWORD *)(DerivedStorage + 8) = v29.value;
          *a3 = 0;
        }
      }
      return v20;
    }
    v8 = Instance;
    v9 = FigSimpleMutexCreate();
    *(_QWORD *)(v8 + 16) = v9;
    if (v9)
    {
      *(_QWORD *)(v8 + 24) = CFRetain(a1);
      *(_DWORD *)(v8 + 32) = 1000;
      CMTimeMake(&v29, 0, 1000);
      *(_OWORD *)(v8 + 120) = *(_OWORD *)&v29.value;
      v10 = (__int128 *)MEMORY[0x1E0CA2E68];
      *(_QWORD *)(v8 + 136) = v29.epoch;
      v28 = *v10;
      *(_OWORD *)(v8 + 148) = *v10;
      v11 = *((_QWORD *)v10 + 2);
      *(_QWORD *)(v8 + 164) = v11;
      v12 = *(_DWORD *)(v8 + 32);
      v13 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x1060040BA3AC965uLL);
      if (v13
        && ((v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00]) == 0
          ? (v15 = 0)
          : (v15 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE00])),
            *(_QWORD *)v13 = v15,
            Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]),
            (*((_QWORD *)v13 + 6) = Mutable) != 0))
      {
        *((_DWORD *)v13 + 2) = v12;
        *(_OWORD *)(v13 + 12) = v28;
        *(_QWORD *)(v13 + 28) = v11;
        *((_QWORD *)v13 + 5) = 0;
        *(_QWORD *)(v8 + 40) = v13;
      }
      else
      {
        v27 = FigSignalErrorAt();
        if ((_DWORD)v27)
        {
          v20 = v27;
          TimelineCache_Destroy((CFTypeRef *)v13);
LABEL_29:
          CFRelease((CFTypeRef)v8);
          goto LABEL_18;
        }
      }
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v18 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v18)
        v18(CMBaseObject, CFSTR("CFBS_EnableCaching"), *MEMORY[0x1E0C9AE50]);
      v19 = WebVTTParserCreate(v8, (uint64_t)wvtt_headerCallback, (uint64_t)wvtt_sampleCallback, 1, (_QWORD *)(v8 + 96));
      if ((_DWORD)v19)
      {
LABEL_28:
        v20 = v19;
        goto LABEL_29;
      }
      WebVTTParserSetSampleBufferMediaType(*(_QWORD *)(v8 + 96), 1952807028);
      v20 = WebVTTParserSetSourceLabel(*(_QWORD *)(v8 + 96), "webvtt_fr-", 1, "-0");
      v21 = FigSimpleMutexCreate();
      *(_QWORD *)(v8 + 104) = v21;
      if (v21)
      {
        *(_QWORD *)DerivedStorage = v8;
        goto LABEL_18;
      }
    }
    v19 = FigSignalErrorAt();
    goto LABEL_28;
  }
  return FigSignalErrorAt();
}

void WebVTTFormatReaderFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *WebVTTFormatReaderCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(const void **)(*(_QWORD *)DerivedStorage + 24);
  if (v2)
  {
    v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, CFSTR("\tWebVTTFormatReader: stream<%@>"), v3);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\tWebVTTFormatReader: stream<%@>"), 0);
  }
  return Mutable;
}

uint64_t WebVTTFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t IsParsed;
  uint64_t v10;
  CFDictionaryRef v11;
  const __CFAllocator *v12;
  CFNumberType v13;
  const __CFDictionary *IdentityMatrixCFArray;
  CFTypeRef *v15;
  CMTime v17;
  CMTime valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(_QWORD *)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 16));
  if (!a4)
    goto LABEL_26;
  *a4 = 0;
  if (!CFEqual(a2, CFSTR("Duration")) && !CFEqual(a2, CFSTR("NominalDuration")))
  {
    if (CFEqual(a2, CFSTR("Timescale")))
    {
      LODWORD(valuePtr.value) = 1000;
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v13 = kCFNumberSInt32Type;
LABEL_11:
      IdentityMatrixCFArray = CFNumberCreate(v12, v13, &valuePtr);
LABEL_15:
      IsParsed = 0;
LABEL_16:
      *a4 = IdentityMatrixCFArray;
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("Identifier")))
    {
      v15 = (CFTypeRef *)kFigFormatReaderIdentifier_WebVTT;
    }
    else
    {
      if (CFEqual(a2, CFSTR("AccurateDurationIsKnown")))
      {
        IsParsed = EnsureWebVTTFileIsParsed(v8);
        if ((_DWORD)IsParsed)
          goto LABEL_17;
        IdentityMatrixCFArray = (const __CFDictionary *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
        goto LABEL_16;
      }
      if (!CFEqual(a2, CFSTR("SampleCursorTimeAccuracyIsExact")))
      {
        if (!CFEqual(a2, CFSTR("PreferredRate")) && !CFEqual(a2, CFSTR("PreferredVolume")))
        {
          if (!CFEqual(a2, CFSTR("MovieMatrix")))
          {
            IsParsed = 4294954512;
            goto LABEL_17;
          }
          IdentityMatrixCFArray = wvtt_CreateIdentityMatrixCFArray(a3);
          goto LABEL_15;
        }
        LODWORD(valuePtr.value) = 1065353216;
        v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v13 = kCFNumberFloat32Type;
        goto LABEL_11;
      }
      v15 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    }
    IdentityMatrixCFArray = (const __CFDictionary *)CFRetain(*v15);
    goto LABEL_15;
  }
  if (!EnsureWebVTTFileIsParsed(v8))
  {
    v10 = *(_QWORD *)(v8 + 40);
    if (v10)
    {
      valuePtr = *(CMTime *)(v10 + 12);
      v17 = valuePtr;
      v11 = CMTimeCopyAsDictionary(&v17, a3);
      *a4 = v11;
      if (v11)
      {
        IsParsed = 0;
        goto LABEL_17;
      }
LABEL_26:
      IsParsed = FigSignalErrorAt();
      goto LABEL_17;
    }
  }
  IsParsed = 4294954513;
LABEL_17:
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 16));
  return IsParsed;
}

uint64_t EnsureWebVTTFileIsParsed(uint64_t a1)
{
  uint64_t CMBaseObject;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  const __CFAllocator *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, CMBlockBufferRef *, uint64_t *);
  int v10;
  int IsRangeContiguous;
  OpaqueCMBlockBuffer *v12;
  CMBlockBufferRef v14;
  CFNumberRef number;
  uint64_t v16;
  CMBlockBufferRef theBuffer;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 104));
  if (*(_BYTE *)(a1 + 112))
    goto LABEL_24;
  *(_DWORD *)(a1 + 116) = 0;
  v16 = -1;
  theBuffer = 0;
  number = 0;
  if (!*(_QWORD *)(a1 + 24) || !*(_QWORD *)(a1 + 96))
  {
    v10 = FigSignalErrorAt();
    goto LABEL_26;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v3)
    goto LABEL_20;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = v3(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number);
  if (v5)
    v6 = 1;
  else
    v6 = number == 0;
  if (!v6)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(a1 + 64));
    CFRelease(number);
    *(_DWORD *)(a1 + 56) = 1;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 32);
    if (v9)
    {
      v10 = v9(v7, v8, 0, &theBuffer, &v16);
      if (!v10)
      {
        IsRangeContiguous = CMBlockBufferIsRangeContiguous(theBuffer, 0, 0);
        v12 = theBuffer;
        if (!IsRangeContiguous)
        {
          v14 = 0;
          v10 = CMBlockBufferCreateContiguous(v4, theBuffer, v4, 0, 0, 0, 0, &v14);
          if (v10)
            goto LABEL_26;
          if (theBuffer)
            CFRelease(theBuffer);
          v12 = v14;
          theBuffer = v14;
        }
        v10 = WebVTTParserParseBlockBuffer(*(_QWORD *)(a1 + 96), v12);
        if (!v10)
        {
          v10 = WebVTTParserFlush(*(_QWORD *)(a1 + 96), 1, 0);
          if (!v10)
          {
            if (*(_QWORD *)(a1 + 48))
            {
              v5 = 0;
              goto LABEL_21;
            }
            v10 = WebVTTParserCopyFormatDescription(*(_QWORD *)(a1 + 96), (_QWORD *)(a1 + 48));
          }
        }
      }
LABEL_26:
      v5 = v10;
      goto LABEL_21;
    }
LABEL_20:
    v5 = -12782;
  }
LABEL_21:
  if (theBuffer)
    CFRelease(theBuffer);
  *(_DWORD *)(a1 + 116) = v5;
  *(_BYTE *)(a1 + 112) = 1;
LABEL_24:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 104));
  return *(unsigned int *)(a1 + 116);
}

CFArrayRef wvtt_CreateIdentityMatrixCFArray(const __CFAllocator *a1)
{
  const __CFAllocator *v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFArrayRef v5;
  int v7;
  int valuePtr;
  void *values[10];

  values[9] = *(void **)MEMORY[0x1E0C80C00];
  v7 = 1065353216;
  valuePtr = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &v7);
  values[0] = v4;
  values[1] = v3;
  values[2] = v3;
  values[3] = v3;
  values[4] = v4;
  values[5] = v3;
  values[6] = v3;
  values[7] = v3;
  values[8] = v4;
  v5 = CFArrayCreate(a1, (const void **)values, 9, MEMORY[0x1E0C9B378]);
  CFRelease(v3);
  CFRelease(v4);
  return v5;
}

uint64_t WebVTTFormatReaderGetTrackCount(uint64_t a1, _QWORD *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t WebVTTFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t *DerivedStorage;
  CFTypeRef v10;

  if (a2)
    return 4294954453;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = EnsureWebVTTFileIsParsed(*DerivedStorage);
  if (!(_DWORD)result)
  {
    if (a3)
    {
      v10 = (CFTypeRef)DerivedStorage[1];
      if (v10)
        v10 = CFRetain(v10);
      *a3 = v10;
    }
    if (a4)
      *a4 = 1952807028;
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

uint64_t WebVTTFormatReaderCopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t *DerivedStorage;
  uint64_t result;
  CFTypeRef v8;

  if (a2 != 1)
    return FigSignalErrorAt();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = EnsureWebVTTFileIsParsed(*DerivedStorage);
  if (!(_DWORD)result)
  {
    if (a3)
    {
      v8 = (CFTypeRef)DerivedStorage[1];
      if (v8)
        v8 = CFRetain(v8);
      *a3 = v8;
    }
    result = 0;
    if (a4)
      *a4 = 1952807028;
  }
  return result;
}

uint64_t WebVTTFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t *DerivedStorage;
  CFTypeRef v9;

  result = 4294954453;
  if (!a2 && a3 == 1952807028)
  {
    DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    result = EnsureWebVTTFileIsParsed(*DerivedStorage);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        v9 = (CFTypeRef)DerivedStorage[1];
        if (v9)
          v9 = CFRetain(v9);
        *a4 = v9;
      }
      result = 0;
      if (a5)
        *a5 = 1;
    }
  }
  return result;
}

void WebVTTTrackReaderFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *WebVTTTrackReaderCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const void *v2;
  CFStringRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (*(_QWORD *)DerivedStorage)
  {
    v2 = *(const void **)(*(_QWORD *)DerivedStorage + 24);
    if (v2)
    {
      v3 = CFCopyDescription(v2);
      CFStringAppendFormat(Mutable, 0, CFSTR("\tWebVTTTrackReader: stream<%@> trackID %d"), v3, 1);
      if (v3)
        CFRelease(v3);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("\tWebVTTTrackReader: stream<%@> trackID %d"), 0, 1);
    }
  }
  return Mutable;
}

uint64_t WebVTTTrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void **v9;
  void *IdentityMatrixCFArray;
  const __CFAllocator *v11;
  CFNumberType v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  CMTime v17;
  CMTime valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(_QWORD *)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 16));
  if (!a4)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_19;
  }
  *a4 = 0;
  if (!CFEqual(a2, CFSTR("TrackFormatDescriptionArray")))
  {
    if (CFEqual(a2, CFSTR("TrackTimescale")))
    {
      LODWORD(valuePtr.value) = *(_DWORD *)(v8 + 32);
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = kCFNumberSInt32Type;
    }
    else
    {
      if (CFEqual(a2, CFSTR("TrackEnabled")))
      {
        IdentityMatrixCFArray = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
        goto LABEL_18;
      }
      if (CFEqual(a2, CFSTR("TrackMatrix")))
      {
        IdentityMatrixCFArray = wvtt_CreateIdentityMatrixCFArray(a3);
        goto LABEL_18;
      }
      if (CFEqual(a2, CFSTR("TrackDuration")) || CFEqual(a2, CFSTR("UneditedTrackDuration")))
      {
        valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        v14 = *(_QWORD *)(v8 + 40);
        if (v14)
          valuePtr = *(CMTime *)(v14 + 12);
        v17 = valuePtr;
        IdentityMatrixCFArray = CMTimeCopyAsDictionary(&v17, a3);
        goto LABEL_18;
      }
      if (!CFEqual(a2, CFSTR("UneditedSampleCount")))
      {
        v13 = 4294954512;
        goto LABEL_19;
      }
      valuePtr.value = 0;
      v16 = *(_QWORD *)(v8 + 40);
      if (v16)
        valuePtr.value = *(_QWORD *)(v16 + 40);
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = kCFNumberSInt64Type;
    }
    IdentityMatrixCFArray = CFNumberCreate(v11, v12, &valuePtr);
LABEL_18:
    v13 = 0;
    *a4 = IdentityMatrixCFArray;
    goto LABEL_19;
  }
  v9 = (const void **)(v8 + 48);
  if (*(_QWORD *)(v8 + 48))
  {
    IdentityMatrixCFArray = CFArrayCreate(a3, v9, 1, MEMORY[0x1E0C9B378]);
    goto LABEL_18;
  }
  v13 = 4294954513;
LABEL_19:
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 16), v9);
  return v13;
}

uint64_t WebVTTTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3)
    *a3 = 1952807028;
  if (a2)
    *a2 = 1;
  return 0;
}

uint64_t WebVTTTrackReaderCopySampleCursorService(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  _QWORD *DerivedStorage;
  CFTypeRef v6;

  v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  FigSampleCursorServiceGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (v3)
      v6 = CFRetain(v3);
    else
      v6 = 0;
    *DerivedStorage = v6;
    *a2 = 0;
  }
  return v4;
}

void WebVTTCursorService_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *WebVTTCursorService_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_WebVTT_CursorService %p>{ timescale %d }"), a1, *(unsigned int *)(*(_QWORD *)DerivedStorage + 32));
  return Mutable;
}

uint64_t WebVTTCursorService_createCursorAtPresentationTimeStamp(uint64_t a1, __int128 *a2, _QWORD *a3, _BYTE *a4, char *a5)
{
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  _QWORD *DerivedStorage;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  const void *v17;

  v9 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v17 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 16));
  v10 = createWebVTTAccessor(v9, &v17);
  if ((_DWORD)v10)
  {
    v13 = v10;
  }
  else
  {
    v11 = v17;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    v13 = wvtt_moveToSampleAtPTS(DerivedStorage, (uint64_t)&v15, a4, a5);
    if ((_DWORD)v13)
    {
      if (v11)
        CFRelease(v11);
    }
    else
    {
      *a3 = v11;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 16));
  return v13;
}

uint64_t WebVTTCursorService_createCursorNearPresentationTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5, char *a6)
{
  __int128 v7;
  uint64_t v8;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  return WebVTTCursorService_createCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t WebVTTCursorService_createCursorAtFirstSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 16));
  v4 = createWebVTTAccessor(v3, &v7);
  if (!(_DWORD)v4)
  {
    v5 = v7;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = v5;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v3 + 16));
  return v4;
}

uint64_t WebVTTCursorService_createCursorAtLastSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 16));
  v4 = createWebVTTAccessor(v3, &v9);
  if (!(_DWORD)v4)
  {
    v5 = v9;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v3 + 88))
    {
      v7 = *(_QWORD *)(v3 + 80);
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 40);
      *(_QWORD *)(v3 + 80) = v7;
      *(_BYTE *)(v3 + 88) = 1;
    }
    *(_QWORD *)(DerivedStorage + 8) = v7 - 1;
    *a2 = v5;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v3 + 16));
  return v4;
}

uint64_t createWebVTTAccessor(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *DerivedStorage;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 88))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
    *(_QWORD *)(a1 + 80) = v7;
    *(_BYTE *)(a1 + 88) = 1;
    if (v7)
      goto LABEL_3;
    return FigSignalErrorAt();
  }
  if (!*(_QWORD *)(a1 + 80))
    return FigSignalErrorAt();
LABEL_3:
  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain((CFTypeRef)a1);
    DerivedStorage[1] = 0;
    *a2 = 0;
  }
  return v4;
}

uint64_t wvtt_moveToSampleAtPTS(_QWORD *a1, uint64_t a2, _BYTE *a3, char *a4)
{
  int32_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int32_t v12;
  uint64_t v13;
  CFIndex v14;
  char v15;
  opaqueCMSampleBuffer *ValueAtIndex;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  CMTime v20;
  CMTime rhs;
  CMTime lhs;
  CMSampleTimingInfo time;
  CMTime time2;
  CMTime v25;

  memset(&v20, 0, sizeof(v20));
  v8 = *(_DWORD *)(*a1 + 32);
  *(_OWORD *)&time.duration.value = *(_OWORD *)a2;
  time.duration.epoch = *(_QWORD *)(a2 + 16);
  CMTimeConvertScale(&v20, &time.duration, v8, kCMTimeRoundingMethod_RoundTowardZero);
  v9 = a1[1];
  v10 = *(_QWORD *)(*a1 + 40);
  time.duration = v20;
  v25 = v20;
  v11 = *(_OWORD *)(v10 + 12);
  time2.epoch = *(_QWORD *)(v10 + 28);
  *(_OWORD *)&time2.value = v11;
  v12 = CMTimeCompare(&time.duration, &time2);
  if (v12 < 0)
  {
    v15 = 0;
    v14 = 0;
    v13 = *(_QWORD *)(v10 + 40);
  }
  else
  {
    v25 = *(CMTime *)(v10 + 12);
    v13 = *(_QWORD *)(v10 + 40);
    if (v13 <= 1)
      v14 = 0;
    else
      v14 = v13 - 1;
    v15 = 1;
  }
  if (v14 >= v13)
  {
    result = 4294954454;
LABEL_16:
    a1[1] = v9;
  }
  else
  {
    while (1)
    {
      while (1)
      {
        memset(&time, 0, sizeof(time));
        memset(&time2, 0, sizeof(time2));
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 48), v14);
        result = CMSampleBufferGetSampleTimingInfo(ValueAtIndex, 0, &time);
        if (!(_DWORD)result)
          break;
        if (++v14 >= *(_QWORD *)(v10 + 40))
          goto LABEL_16;
      }
      lhs = time.presentationTimeStamp;
      rhs = time.duration;
      CMTimeAdd(&time2, &lhs, &rhs);
      lhs = v25;
      rhs = time.presentationTimeStamp;
      if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
      {
        lhs = v25;
        rhs = time2;
        if (CMTimeCompare(&lhs, &rhs) < 0)
          break;
      }
      if (++v14 >= *(_QWORD *)(v10 + 40))
        goto LABEL_18;
    }
    a1[1] = v14;
LABEL_18:
    if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
    {
      a1[1] = 0;
      if (a3)
        *a3 = 1;
    }
    if (v12 < 0)
      return 0;
    v18 = *a1;
    if (*(_BYTE *)(*a1 + 88))
    {
      v19 = *(_QWORD *)(v18 + 80);
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 40);
      *(_QWORD *)(v18 + 80) = v19;
      *(_BYTE *)(v18 + 88) = 1;
    }
    a1[1] = v19 - 1;
    if (!a4)
    {
      return 0;
    }
    else
    {
      result = 0;
      *a4 = v15;
    }
  }
  return result;
}

void WebVTTCursor_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *WebVTTCursor_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_WebVTT_SampleCursor %p>{ curSampleNum %lld }"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t WebVTTCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  CFIndex *DerivedStorage;
  uint64_t v8;
  CMTimeEpoch v9;
  __int128 v11;
  CMTime rhs;
  CMTime lhs;
  CMTime v14;
  CMTime v15;
  CMTime time;

  DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(*DerivedStorage + 16));
  if (a2 && a4)
  {
    *a4 = 0;
    if (CFEqual(a2, CFSTR("CursorPlayableHorizon")))
    {
      memset(&time, 0, sizeof(time));
      memset(&v14, 0, sizeof(v14));
      v8 = TimelineCache_MapSampleNumToSampleTime(*(_QWORD *)(*DerivedStorage + 40), DerivedStorage[1], &time);
      if (!(_DWORD)v8)
      {
        v15 = *(CMTime *)(*(_QWORD *)(*DerivedStorage + 40) + 12);
        lhs = v15;
        rhs = time;
        CMTimeSubtract(&v14, &lhs, &rhs);
        lhs = v14;
        v11 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
        v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        rhs.epoch = v9;
        if (CMTimeCompare(&lhs, &rhs) < 0)
        {
          *(_OWORD *)&v14.value = v11;
          v14.epoch = v9;
        }
        time = v14;
        *a4 = CMTimeCopyAsDictionary(&time, a3);
      }
    }
    else
    {
      v8 = 4294954512;
    }
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(*DerivedStorage + 16));
  return v8;
}

uint64_t TimelineCache_MapSampleNumToSampleTime(uint64_t a1, CFIndex a2, CMTime *a3)
{
  opaqueCMSampleBuffer *ValueAtIndex;
  uint64_t result;
  CMSampleTimingInfo v6;

  if (a2 < 0)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 40) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
  if (!ValueAtIndex)
    return FigSignalErrorAt();
  memset(&v6, 0, sizeof(v6));
  result = CMSampleBufferGetSampleTimingInfo(ValueAtIndex, 0, &v6);
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = v6.presentationTimeStamp;
  }
  return result;
}

uint64_t WebVTTCursor_copy(uint64_t a1, _QWORD *a2)
{
  _OWORD *DerivedStorage;
  uint64_t v4;
  _OWORD *v5;
  const void *v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    *v5 = *DerivedStorage;
    v6 = *(const void **)v5;
    if (v6)
      CFRetain(v6);
    *a2 = 0;
  }
  return v4;
}

uint64_t WebVTTCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = v2 < v3;
  v5 = v2 > v3;
  if (v4)
    return -1;
  else
    return v5;
}

uint64_t WebVTTCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  CMTime v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*DerivedStorage + 16));
  v5 = DerivedStorage[1];
  memset(&v8, 0, sizeof(v8));
  v6 = TimelineCache_MapSampleNumToSampleTime(*(_QWORD *)(v4 + 40), v5, &v8);
  if (!(_DWORD)v6)
    *a2 = v8;
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 16));
  return v6;
}

uint64_t WebVTTCursor_getDuration(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  opaqueCMSampleBuffer *ValueAtIndex;
  uint64_t SampleTimingInfo;
  uint64_t v9;
  CMTime v11;
  __int128 v12;
  CMTimeEpoch epoch;
  CMSampleTimingInfo timingInfoOut;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  v12 = 0uLL;
  epoch = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 16));
  v5 = DerivedStorage[1];
  if (v5 < 0
    || (v6 = *(_QWORD *)(v4 + 40), *(_QWORD *)(v6 + 40) <= v5)
    || (ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 48), v5)) == 0)
  {
    SampleTimingInfo = FigSignalErrorAt();
    if (!(_DWORD)SampleTimingInfo)
      goto LABEL_6;
LABEL_9:
    v9 = SampleTimingInfo;
    goto LABEL_7;
  }
  memset(&timingInfoOut, 0, sizeof(timingInfoOut));
  SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(ValueAtIndex, 0, &timingInfoOut);
  if ((_DWORD)SampleTimingInfo)
    goto LABEL_9;
  v12 = *(_OWORD *)&timingInfoOut.duration.value;
  epoch = timingInfoOut.duration.epoch;
LABEL_6:
  *(_OWORD *)&timingInfoOut.duration.value = v12;
  timingInfoOut.duration.epoch = epoch;
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  CMTimeCompare(&timingInfoOut.duration, &v11);
  v9 = 0;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = epoch;
LABEL_7:
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 16));
  return v9;
}

uint64_t WebVTTCursor_getDependencyInfo(uint64_t a1, _BYTE *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  if (a2)
    *a2 = 1;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  return 0;
}

uint64_t WebVTTCursor_createSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  BOOL v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t SampleBufferContainingSample;
  uint64_t v13;
  CMSampleBufferRef sbuf;
  CMTime v16;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
    a2 = CMBaseObjectGetDerivedStorage();
  v6 = *DerivedStorage;
  sbuf = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 16));
  v7 = DerivedStorage[1];
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 < v7;
    v10 = v8 - v7;
    if (v9)
    {
LABEL_9:
      SampleBufferContainingSample = FigSignalErrorAt();
      goto LABEL_13;
    }
    v11 = v10 + 1;
  }
  else
  {
    v11 = 1;
  }
  memset(&v16, 0, sizeof(v16));
  SampleBufferContainingSample = TimelineCache_MapSampleNumToSampleTime(*(_QWORD *)(v6 + 40), v7, &v16);
  if (!(_DWORD)SampleBufferContainingSample)
  {
    if (v11 < 2)
    {
      SampleBufferContainingSample = TimelineCache_GetSampleBufferContainingSample(*(_QWORD *)(v6 + 40), v7, &sbuf);
      if ((_DWORD)SampleBufferContainingSample)
        goto LABEL_13;
      if (sbuf)
      {
        SampleBufferContainingSample = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sbuf, a3);
        goto LABEL_13;
      }
    }
    goto LABEL_9;
  }
LABEL_13:
  v13 = SampleBufferContainingSample;
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 16));
  return v13;
}

uint64_t WebVTTCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  _QWORD *DerivedStorage;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CMTime v9;
  __int16 v10;
  CMTime v11;
  CMTime v12;
  CMTime lhs;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  memset(&v11, 0, sizeof(v11));
  v10 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(*DerivedStorage + 16));
  v5 = *DerivedStorage;
  v4 = DerivedStorage[1];
  memset(&lhs, 0, sizeof(lhs));
  v6 = TimelineCache_MapSampleNumToSampleTime(*(_QWORD *)(v5 + 40), v4, &lhs);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    v12 = lhs;
    v9 = *a2;
    CMTimeAdd(&v11, &lhs, &v9);
    lhs = v11;
    v7 = wvtt_moveToSampleAtPTS(DerivedStorage, (uint64_t)&lhs, (_BYTE *)&v10 + 1, (char *)&v10);
    if (!(_DWORD)v7)
    {
      if (HIBYTE(v10) | v10)
        v7 = 4294954456;
      else
        v7 = 0;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(*DerivedStorage + 16));
  return v7;
}

uint64_t WebVTTCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return WebVTTCursor_stepByDecodeTime(a1, &v3);
}

uint64_t WebVTTCursor_copyFormatDescription(uint64_t a1, _QWORD *a2)
{
  CFIndex *DerivedStorage;
  _QWORD *v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t SampleBufferContainingSample;
  CMFormatDescriptionRef FormatDescription;
  CMSampleBufferRef sbuf;

  DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  v4 = (_QWORD *)*DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*DerivedStorage + 16));
  v5 = (CFTypeRef)v4[6];
  if (!v5)
  {
    sbuf = 0;
    SampleBufferContainingSample = TimelineCache_GetSampleBufferContainingSample(v4[5], DerivedStorage[1], &sbuf);
    if (!(_DWORD)SampleBufferContainingSample)
    {
      FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
      if (FormatDescription)
      {
        v5 = CFRetain(FormatDescription);
        v4[6] = v5;
        if (a2)
          goto LABEL_3;
LABEL_9:
        v6 = 0;
        goto LABEL_10;
      }
      SampleBufferContainingSample = FigSignalErrorAt();
    }
    v6 = SampleBufferContainingSample;
    goto LABEL_10;
  }
  if (!a2)
    goto LABEL_9;
LABEL_3:
  if (v5)
    v5 = CFRetain(v5);
  v6 = 0;
  *a2 = v5;
LABEL_10:
  MEMORY[0x19402EF04](v4[2]);
  return v6;
}

uint64_t WebVTTCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = *DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*DerivedStorage + 16));
  v7 = DerivedStorage[1];
  v8 = v7 + a2;
  if (a2 < 1)
  {
    v8 &= ~(v8 >> 63);
  }
  else
  {
    v9 = *DerivedStorage;
    if (*(_BYTE *)(*DerivedStorage + 88))
    {
      v10 = *(_QWORD *)(v9 + 80);
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 40);
      *(_QWORD *)(v9 + 80) = v10;
      *(_BYTE *)(v9 + 88) = 1;
    }
    if (v10 <= v8)
      v8 = v10 - 1;
  }
  DerivedStorage[1] = v8;
  if (a3)
    *a3 = v8 - v7;
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 16));
  return 0;
}

uint64_t WebVTTCursor_stepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  WebVTTCursor_stepInDecodeOrderAndReportStepsTaken(a1, a2, a3);
  return 0;
}

uint64_t TimelineCache_GetSampleBufferContainingSample(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  const void *ValueAtIndex;
  uint64_t result;

  if (a2 < 0 || *(_QWORD *)(a1 + 40) <= a2)
  {
    result = FigSignalErrorAt();
    if (a3)
    {
      ValueAtIndex = 0;
      if ((_DWORD)result)
        goto LABEL_5;
    }
  }
  else
  {
    if (a3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
      result = 0;
LABEL_5:
      *a3 = ValueAtIndex;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t wvtt_headerCallback(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t wvtt_sampleCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeEpoch v7;
  uint64_t v8;
  opaqueCMSampleBuffer *v9;
  __int128 v10;
  __int128 v12;
  CMTime v13;
  CMSampleBufferRef sbuf;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sbuf = 0;
  memset(&v13, 0, sizeof(v13));
  v3 = *(_QWORD *)(a1 + 96);
  time1 = *(CMTime *)(a1 + 120);
  v4 = WebVTTCreateSampleBufferFromSample(v3, a2, &time1, &sbuf);
  if (!(_DWORD)v4)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v13, sbuf);
    CMSampleBufferGetOutputDuration(&time1, sbuf);
    flags = time1.flags;
    timescale = time1.timescale;
    epoch = time1.epoch;
    value = time1.value;
    v12 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
    v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    time2.epoch = v7;
    if (CMTimeCompare(&time1, &time2))
    {
      if (!*(_BYTE *)(a1 + 144))
      {
        *(_BYTE *)(a1 + 144) = 1;
        time1 = v13;
        *(_OWORD *)&time2.value = v12;
        time2.epoch = v7;
        CMTimeCompare(&time1, &time2);
      }
      time1 = v13;
      time2 = *(CMTime *)(a1 + 148);
      CMTimeCompare(&time1, &time2);
      time2 = v13;
      rhs.value = value;
      rhs.timescale = timescale;
      rhs.flags = flags;
      rhs.epoch = epoch;
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(a1 + 148) = time1;
      ++*(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 80) += CMSampleBufferGetNumSamples(sbuf);
      v8 = *(_QWORD *)(a1 + 40);
      if (v8)
      {
        v9 = sbuf;
        CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 48), sbuf);
        ++*(_QWORD *)(v8 + 40);
        CMSampleBufferGetPresentationTimeStamp(&time2, v9);
        CMSampleBufferGetDuration(&rhs, v9);
        CMTimeAdd(&time1, &time2, &rhs);
        v10 = *(_OWORD *)&time1.value;
        *(_QWORD *)(v8 + 28) = time1.epoch;
        *(_OWORD *)(v8 + 12) = v10;
      }
    }
  }
  if (sbuf)
    CFRelease(sbuf);
  return v4;
}

uint64_t RegisterWebVTTInfoType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sWebVTTInfoID = result;
  return result;
}

double InitWebVTTInfo(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t FinalizeWebVTTInfo(uint64_t a1)
{
  const void *v2;
  uint64_t result;

  FigFormatDescriptionRelease();
  WebVTTParserDestroy(*(_QWORD **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  TimelineCache_Destroy(*(CFTypeRef **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 104))
    FigSimpleMutexDestroy();
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

void TimelineCache_Destroy(CFTypeRef *a1)
{
  CFTypeRef v2;

  if (a1)
  {
    v2 = a1[6];
    if (v2)
    {
      CFRelease(v2);
      a1[6] = 0;
    }
    if (*a1)
      CFRelease(*a1);
    free(a1);
  }
}

double __getDisplayScale_block_invoke_0()
{
  void *v0;
  double result;
  float v2;
  id v3;

  v0 = (void *)MGCopyAnswer();
  if (v0)
  {
    v3 = v0;
    objc_msgSend(v0, "floatValue");
    *(double *)&sMaxDisplayScale_0 = v2;

  }
  return result;
}

CFTypeRef FigVirtualDisplayCopyDefaultTimestampInfo()
{
  CFTypeRef result;

  if (timestampsGetTimestampNameInfo_once != -1)
    dispatch_once(&timestampsGetTimestampNameInfo_once, &__block_literal_global_55);
  result = (CFTypeRef)timestampsGetTimestampNameInfo_timestampInfoArray;
  if (timestampsGetTimestampNameInfo_timestampInfoArray)
    return CFRetain((CFTypeRef)timestampsGetTimestampNameInfo_timestampInfoArray);
  return result;
}

uint64_t FigVirtualDisplayProcessorCreate(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  NSObject *v6;
  const dispatch_source_type_s *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD *v13;
  CFMutableDictionaryRef Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD handler[5];
  CFTypeRef cf;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigVirtualDisplayProcessorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 24) = 0;
    *(_QWORD *)(DerivedStorage + 80) = dispatch_semaphore_create(0);
    *(_QWORD *)DerivedStorage = dispatch_queue_create("com.apple.coremedia.vdprocessor.stateq", 0);
    v6 = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(DerivedStorage + 8) = v6;
    v7 = (const dispatch_source_type_s *)MEMORY[0x1E0C80DD0];
    v8 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v6);
    v9 = MEMORY[0x1E0C809B0];
    *(_QWORD *)(DerivedStorage + 464) = v8;
    handler[0] = v9;
    handler[1] = 0x40000000;
    handler[2] = __FigVirtualDisplayProcessorCreate_block_invoke;
    handler[3] = &__block_descriptor_tmp_71;
    handler[4] = DerivedStorage;
    dispatch_source_set_event_handler(v8, handler);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 464), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 464));
    v10 = dispatch_source_create(v7, 0, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
    *(_QWORD *)(DerivedStorage + 40) = v10;
    v19[0] = v9;
    v19[1] = 0x40000000;
    v19[2] = __FigVirtualDisplayProcessorCreate_block_invoke_2;
    v19[3] = &__block_descriptor_tmp_138;
    v19[4] = DerivedStorage;
    dispatch_source_set_event_handler(v10, v19);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 40), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 40));
    v11 = dispatch_source_create(v7, 0, 0, *(dispatch_queue_t *)DerivedStorage);
    *(_QWORD *)(DerivedStorage + 488) = v11;
    v18[0] = v9;
    v18[1] = 0x40000000;
    v18[2] = __FigVirtualDisplayProcessorCreate_block_invoke_3;
    v18[3] = &__block_descriptor_tmp_139;
    v18[4] = DerivedStorage;
    dispatch_source_set_event_handler(v11, v18);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 488), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 488));
    v12 = dispatch_source_create(v7, 0, 0, *(dispatch_queue_t *)DerivedStorage);
    *(_QWORD *)(DerivedStorage + 680) = v12;
    v17[0] = v9;
    v17[1] = 0x40000000;
    v17[2] = __FigVirtualDisplayProcessorCreate_block_invoke_4;
    v17[3] = &__block_descriptor_tmp_140;
    v17[4] = DerivedStorage;
    dispatch_source_set_event_handler(v12, v17);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 680), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 680));
    v13 = malloc_type_calloc(1uLL, 0x58uLL, 0x1060040ADCA6322uLL);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    *v13 = FigSimpleMutexCreate();
    v13[2] = Mutable;
    *(_QWORD *)(DerivedStorage + 648) = v13;
    *a3 = cf;
  }
  return v4;
}

void __timestampsGetTimestampNameInfo_block_invoke()
{
  const __CFAllocator *v0;
  uint64_t v1;
  const CFDictionaryKeyCallBacks *v2;
  const CFDictionaryValueCallBacks *v3;
  CFDictionaryRef v4;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  timestampsGetTimestampNameInfo_timestampInfoArray = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v1 = 2u;
  v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  do
  {
    v4 = CFDictionaryCreate(v0, (const void **)kFigVirtualDisplaySinkTimestampInfoKey_Name, (const void **)&kTimestampNames[v1], 1, v2, v3);
    CFArrayAppendValue((CFMutableArrayRef)timestampsGetTimestampNameInfo_timestampInfoArray, v4);
    if (v4)
      CFRelease(v4);
    ++v1;
  }
  while (v1 != 7);
}

void fvdp_finalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3148)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 24))
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)DerivedStorage)
    dispatch_sync(*(dispatch_queue_t *)DerivedStorage, &__block_literal_global_157_0);
  fvdp_cleanup(DerivedStorage);
  v2 = *(NSObject **)(DerivedStorage + 464);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 464));
  }
  v3 = *(NSObject **)(DerivedStorage + 40);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 40));
  }
  v4 = *(NSObject **)(DerivedStorage + 488);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 488));
  }
  v5 = *(NSObject **)(DerivedStorage + 680);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 680));
  }
  v6 = *(NSObject **)(DerivedStorage + 8);
  if (v6)
    dispatch_release(v6);
  if (*(_QWORD *)DerivedStorage)
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
  v7 = *(NSObject **)(DerivedStorage + 80);
  if (v7)
    dispatch_release(v7);
  v8 = *(_QWORD **)(DerivedStorage + 648);
  if (v8)
  {
    writebackCacheInitWithPool(*(_QWORD **)(DerivedStorage + 648), 0, 0);
    v9 = (const void *)v8[2];
    if (v9)
      CFRelease(v9);
    v10 = (const void *)v8[3];
    if (v10)
      CFRelease(v10);
    FigSimpleMutexDestroy();
    free(v8);
  }
  v11 = *(const void **)(DerivedStorage + 16);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

uint64_t fvdp_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFString *v9;
  const __CFString **v10;
  int v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  uint64_t result;
  const __CFAllocator *v15;
  const void *v16;
  CFNumberType v17;
  __CFDictionary *Mutable;
  __CFDictionary *v19;
  _QWORD *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  NSObject *v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3148)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CFEqual(a2, CFSTR("processorType")))
  {
    v9 = CFSTR("DefaultProcessor");
LABEL_10:
    v12 = (__CFDictionary *)CFRetain(v9);
LABEL_11:
    v13 = v12;
LABEL_12:
    result = 0;
    *a4 = v13;
    return result;
  }
  if (CFEqual(a2, CFSTR("SupportsRotation")))
  {
    v10 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(DerivedStorage + 88);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("IOMFBUUID")))
  {
    v9 = *(const __CFString **)(DerivedStorage + 104);
    if (v9)
      goto LABEL_10;
LABEL_21:
    v13 = 0;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("DisplayEDID")))
  {
    v9 = *(const __CFString **)(DerivedStorage + 112);
    if (v9)
      goto LABEL_10;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("DisplayName")))
  {
    v9 = *(const __CFString **)(DerivedStorage + 96);
    if (v9)
      goto LABEL_10;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("IsIdle")))
  {
    v10 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(DerivedStorage + 48);
LABEL_7:
    if (!v11)
      v10 = (const __CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("SourcePixelFormat")))
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = (const void *)(DerivedStorage + 644);
    v17 = kCFNumberSInt32Type;
LABEL_28:
    v12 = CFNumberCreate(v15, v17, v16);
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("ProtectionFlags")))
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = (const void *)(DerivedStorage + 392);
    v17 = kCFNumberSInt64Type;
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("ColorAttributes")))
  {
    Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v19 = Mutable;
    v20 = *(_QWORD **)(DerivedStorage + 376);
    if (v20)
    {
      v21 = (const void *)v20[1];
      if (v21)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], v21);
        v20 = *(_QWORD **)(DerivedStorage + 376);
      }
      v22 = (const void *)v20[3];
      if (v22)
      {
        CFDictionarySetValue(v19, (const void *)*MEMORY[0x1E0CA8E98], v22);
        v20 = *(_QWORD **)(DerivedStorage + 376);
      }
      v23 = (const void *)v20[2];
      if (v23)
        CFDictionarySetValue(v19, (const void *)*MEMORY[0x1E0CA8EE8], v23);
    }
    result = 0;
    *a4 = v19;
  }
  else
  {
    if (CFEqual(a2, CFSTR("DoesScaling")))
    {
      v10 = (const __CFString **)MEMORY[0x1E0C9AE40];
LABEL_9:
      v9 = *v10;
      goto LABEL_10;
    }
    if (!CFEqual(a2, CFSTR("DisplayContainerID"))
      && !CFEqual(a2, CFSTR("Transport"))
      && !CFEqual(a2, CFSTR("DisplayAttributes")))
    {
      if (CFEqual(a2, CFSTR("VirtualDisplayMode")))
      {
        v9 = *(const __CFString **)(DerivedStorage + 408);
        if (v9)
          goto LABEL_10;
        goto LABEL_21;
      }
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954512;
  }
  return result;
}

uint64_t fvdp_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  NSObject *v9;
  NSObject *v11;
  _QWORD v12[7];
  _QWORD block[6];
  os_log_type_t type;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3148)
  {
    v15 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CFEqual(a2, CFSTR("OriginalDisplaySize")))
  {
    if (a3)
      CFRetain(a3);
    v8 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdp_setProperty_block_invoke;
    block[3] = &__block_descriptor_tmp_172;
    block[4] = a3;
    block[5] = DerivedStorage;
    dispatch_async(v8, block);
    return 0;
  }
  if (CFEqual(a2, CFSTR("LogPrefix")))
  {
    v9 = *(NSObject **)DerivedStorage;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = __fvdp_setProperty_block_invoke_2;
    v12[3] = &__block_descriptor_tmp_173;
    v12[4] = a3;
    v12[5] = DerivedStorage;
    v12[6] = a1;
    dispatch_sync(v9, v12);
    return 0;
  }
  v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954512;
}

void fvdp_cleanup(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, void *);
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[5];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 24))
  {
    v11 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(void (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v3)
      v3(v2, &__block_literal_global_160);
  }
  v4 = *(NSObject **)(a1 + 8);
  if (v4)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdp_cleanup_block_invoke_2;
    block[3] = &__block_descriptor_tmp_161;
    block[4] = a1;
    dispatch_sync(v4, block);
  }
  v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  tapDestroy(*(_QWORD *)(a1 + 664));
  *(_QWORD *)(a1 + 664) = 0;
  tapDestroy(*(_QWORD *)(a1 + 672));
  *(_QWORD *)(a1 + 672) = 0;
  v6 = *(_QWORD *)(a1 + 680);
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 680) = v6;
  v7 = *(const void **)(a1 + 408);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 408) = 0;
  }
}

void __fvdp_cleanup_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 344);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(const void **)(v2 + 336);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(const void **)(v2 + 328);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v6 = *(const void **)(v2 + 352);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v7 = *(const void **)(v2 + 400);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 400) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  writebackCacheInitWithPool(*(_QWORD **)(v2 + 648), 0, 0);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 488);
  v10 = *(const void **)(v8 + 504);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(v8 + 504) = 0;
  }
  v11 = *(const void **)(v8 + 624);
  if (v11)
    CFRelease(v11);
  *(_QWORD *)(v8 + 632) = 0;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_QWORD *)(v8 + 488) = v9;
  *(_DWORD *)(v8 + 416) = 0;
  v12 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v12 + 88) = 0;
  v13 = (__int128 *)MEMORY[0x1E0C9D820];
  *(_BYTE *)(v12 + 168) = 0;
  v14 = *v13;
  *(_OWORD *)(v12 + 120) = *v13;
  *(_OWORD *)(v12 + 136) = v14;
  *(_OWORD *)(v12 + 152) = v14;
  v15 = *(const void **)(v12 + 192);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(v12 + 192) = 0;
  }
  v16 = *(const void **)(v12 + 200);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(v12 + 200) = 0;
  }
  v17 = *(const void **)(v12 + 208);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(v12 + 208) = 0;
  }
  v18 = *(const void **)(v12 + 96);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(v12 + 96) = 0;
  }
  v19 = *(const void **)(v12 + 104);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(v12 + 104) = 0;
  }
  v20 = *(const void **)(v12 + 112);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(v12 + 112) = 0;
  }
  frameDataDestroy(*(const void ***)(*(_QWORD *)(a1 + 32) + 56));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
}

_QWORD *writebackCacheInitWithPool(_QWORD *result, const void *a2, uint64_t a3)
{
  _QWORD *v5;
  const void *v6;
  const void *v7;
  __int128 v8;

  if (result)
  {
    v5 = result;
    MEMORY[0x19402EEEC](*result);
    v6 = (const void *)v5[1];
    v5[1] = a2;
    if (a2)
      CFRetain(a2);
    if (v6)
      CFRelease(v6);
    v7 = (const void *)v5[4];
    if (v7)
    {
      CFRelease(v7);
      v5[4] = 0;
    }
    v5[5] = a3;
    v8 = *MEMORY[0x1E0C9D820];
    *((_OWORD *)v5 + 3) = *MEMORY[0x1E0C9D820];
    *((_OWORD *)v5 + 4) = v8;
    *((_DWORD *)v5 + 20) = 0;
    *((_BYTE *)v5 + 84) = 0;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

void frameDataDestroy(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[18];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

void tapDestroy(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v3;
  void (*v4)(CFTypeRef, _QWORD);
  const void *v5;
  const void *v6;

  if (a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v3 = *(CFTypeRef *)a1;
    v4 = *(void (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v4)
      v4(v3, 0);
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    v5 = *(const void **)(a1 + 8);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 16);
    if (v6)
      CFRelease(v6);
    free((void *)a1);
  }
}

void __fvdp_setProperty_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, __CFDictionary *);
  const void *v5;

  if (*(_QWORD *)(a1 + 32))
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 24) == 2)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("originalDisplaySize"), *(const void **)(a1 + 32));
      CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64));
      v4 = *(void (**)(uint64_t, const __CFString *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (v4)
        v4(CMBaseObject, CFSTR("extraInfo"), Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
    v5 = *(const void **)(a1 + 32);
    if (v5)
      CFRelease(v5);
  }
}

const void *__fvdp_setProperty_block_invoke_2(uint64_t a1)
{
  const void *result;
  CFTypeID v3;
  uint64_t v4;

  result = *(const void **)(a1 + 32);
  if (result)
  {
    v3 = CFGetTypeID(result);
    result = (const void *)CFStringGetTypeID();
    if ((const void *)v3 == result)
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (!*(_DWORD *)(v4 + 24) && !*(_QWORD *)(v4 + 16))
      {
        result = FVDUtilsCreateLogPrefix(*(const __CFString **)(a1 + 32), *(_QWORD *)(a1 + 48));
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) = result;
      }
    }
  }
  return result;
}

uint64_t fvdp_plugSink(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFString *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;
  NSObject *v14;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  const __CFString *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFString **)(DerivedStorage + 16);
  if (dword_1EE2A3148)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    v6 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdp_plugSink_block_invoke;
    block[3] = &unk_1E2FA16C8;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v18;
    dispatch_sync(v6, block);
    if (!*((_DWORD *)v19 + 6))
    {
      v12 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *((_DWORD *)v19 + 6) = -12070;
  }
  v17 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v8 = v17;
  if (os_log_type_enabled(v7, type))
    v9 = v8;
  else
    v9 = v8 & 0xFFFFFFFE;
  if (v9)
  {
    v10 = &stru_1E2FD85F8;
    if (v4)
      v10 = v4;
    v11 = *((_DWORD *)v19 + 6);
    v22 = 138412802;
    v23 = v10;
    v24 = 2080;
    v25 = "fvdp_plugSink";
    v26 = 1024;
    LODWORD(v27) = v11;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v12 = *((unsigned int *)v19 + 6);
LABEL_14:
  _Block_object_dispose(&v18, 8);
  return v12;
}

uint64_t fvdp_unplugSink(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFString *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  const __CFString *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFString **)(DerivedStorage + 16);
  if (dword_1EE2A3148)
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_unplugSink_block_invoke;
  block[3] = &unk_1E2FA16F0;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[4] = &v17;
  dispatch_sync(v6, block);
  if (*((_DWORD *)v18 + 6))
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v8 = v16;
    if (os_log_type_enabled(v7, type))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if (v9)
    {
      v10 = &stru_1E2FD85F8;
      if (v4)
        v10 = v4;
      v11 = *((_DWORD *)v18 + 6);
      v21 = 138412802;
      v22 = v10;
      v23 = 2080;
      v24 = "fvdp_unplugSink";
      v25 = 1024;
      LODWORD(v26) = v11;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = *((unsigned int *)v18 + 6);
  }
  else
  {
    v12 = 0;
  }
  _Block_object_dispose(&v17, 8);
  return v12;
}

uint64_t fvdp_start(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFString *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;
  _QWORD block[8];
  os_log_type_t type;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  const __CFString *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFString **)(DerivedStorage + 16);
  if (dword_1EE2A3148)
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_start_block_invoke;
  block[3] = &unk_1E2FA1740;
  block[4] = &v17;
  block[5] = DerivedStorage;
  block[6] = v4;
  block[7] = a2;
  dispatch_sync(v6, block);
  if (*((_DWORD *)v18 + 6))
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v8 = v16;
    if (os_log_type_enabled(v7, type))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if (v9)
    {
      v10 = &stru_1E2FD85F8;
      if (v4)
        v10 = v4;
      v11 = *((_DWORD *)v18 + 6);
      v21 = 138412802;
      v22 = v10;
      v23 = 2080;
      v24 = "fvdp_start";
      v25 = 1024;
      LODWORD(v26) = v11;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = *((unsigned int *)v18 + 6);
  }
  else
  {
    v12 = 0;
  }
  _Block_object_dispose(&v17, 8);
  return v12;
}

uint64_t fvdp_stop()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  _QWORD block[6];
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 16);
  if (dword_1EE2A3148)
  {
    v7 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_stop_block_invoke;
  block[3] = &__block_descriptor_tmp_287;
  block[4] = DerivedStorage;
  block[5] = v1;
  dispatch_sync(v3, block);
  return 0;
}

uint64_t fvdp_suspend()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  _QWORD block[6];
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 16);
  if (dword_1EE2A3148)
  {
    v7 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_292;
  block[4] = DerivedStorage;
  block[5] = v1;
  dispatch_sync(v3, block);
  return 0;
}

uint64_t fvdp_resume()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];
  os_log_type_t type;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 16);
  if (dword_1EE2A3148)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_resume_block_invoke;
  block[3] = &unk_1E2FA1948;
  block[5] = DerivedStorage;
  block[6] = v1;
  block[4] = &v9;
  dispatch_sync(v3, block);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t fvdp_copySupportedDigitalOutModes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  _QWORD block[7];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3148)
  {
    v11 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_copySupportedDigitalOutModes_block_invoke;
  block[3] = &__block_descriptor_tmp_295;
  block[4] = a2;
  block[5] = DerivedStorage;
  block[6] = a3;
  dispatch_sync(v7, block);
  return 0;
}

uint64_t fvdp_setDigitalOutMode(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  _QWORD block[5];
  int v10;
  int v11;
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3148)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_setDigitalOutMode_block_invoke;
  block[3] = &__block_descriptor_tmp_296;
  block[4] = DerivedStorage;
  v10 = a2;
  v11 = a3;
  dispatch_async(v7, block);
  return 0;
}

uint64_t fvdp_enableMirroring(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3148)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_BYTE *)(DerivedStorage + 216) = a2 == 0;
  return 0;
}

uint64_t fvdp_submitPixelBuffer(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, __CVBuffer *a10, uint64_t a11, int a12, const void *a13)
{
  uint64_t DerivedStorage;
  char v26;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v28;
  CFTypeRef v29;
  int v30;
  double *v31;
  CFTypeRef v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v40;
  _QWORD block[6];
  char v42;
  os_log_type_t type;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = *(_BYTE *)(DerivedStorage + 216);
  if (dword_1EE2A3148 >= 2)
  {
    v44 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 24) == 2)
  {
    if (a10)
    {
      v28 = *(_DWORD *)(DerivedStorage + 640);
      if (!v28)
      {
        *(_DWORD *)(DerivedStorage + 640) = 2;
        __dmb(0xBu);
        v28 = *(_DWORD *)(DerivedStorage + 640);
      }
      if (v28 == 1)
      {
        v29 = CVBufferCopyAttachment(a10, CFSTR("FVDWritebackBuffer"), 0);
        v30 = FigCFEqual();
        if (v29)
          CFRelease(v29);
        if (!v30)
        {
          v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return 4294955226;
        }
      }
      v31 = (double *)malloc_type_calloc(1uLL, 0xA8uLL, 0x10E0040FEF2BE32uLL);
      CFRetain(a10);
    }
    else
    {
      v31 = (double *)malloc_type_calloc(1uLL, 0xA8uLL, 0x10E0040FEF2BE32uLL);
    }
    *(_QWORD *)v31 = a10;
    v31[1] = a1;
    v31[2] = a2;
    v31[3] = a3;
    v31[4] = a4;
    v31[5] = a5;
    v31[6] = a6;
    v31[7] = a7;
    v31[8] = a8;
    *((_DWORD *)v31 + 34) = a12;
    *((_QWORD *)v31 + 19) = FigHostTimeToNanoseconds();
    *((_QWORD *)v31 + 9) = a11;
    if (a13)
      v32 = CFRetain(a13);
    else
      v32 = 0;
    *((_QWORD *)v31 + 18) = v32;
    if (*(_BYTE *)(DerivedStorage + 752) || *(_BYTE *)(DerivedStorage + 753))
      *((_QWORD *)v31 + 12) = mach_absolute_time();
    if (*(_BYTE *)(DerivedStorage + 754) && *MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    if (*(_BYTE *)(DerivedStorage + 744) || *(_BYTE *)(DerivedStorage + 745))
    {
      v33 = (unsigned int *)(DerivedStorage + 696);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    if (a10)
    {
      v35 = *(_DWORD *)(DerivedStorage + 736);
      *(_DWORD *)(DerivedStorage + 736) = v35 + 1;
      if (!v35)
      {
        v44 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v38 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdp_submitPixelBuffer_block_invoke;
    block[3] = &__block_descriptor_tmp_298;
    v42 = v26;
    block[4] = DerivedStorage;
    block[5] = v31;
    dispatch_async(v38, block);
    return 0;
  }
  else
  {
    v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955224;
  }
}

uint64_t fvdp_copyWritebackPixelBuffer(double a1, double a2, uint64_t a3, int a4, int a5, CVBufferRef *a6)
{
  uint64_t DerivedStorage;
  int v11;
  const __CFString *v12;
  const __CFString *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  NSObject *v22;
  unsigned int v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  const __CFString *v29;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  _QWORD v35[7];
  int v36;
  char v37;
  _QWORD block[7];
  int v39;
  char v40;
  os_log_type_t type;
  unsigned int v42;
  int v43;
  const __CFString *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(unsigned __int8 *)(DerivedStorage + 216);
  v12 = *(const __CFString **)(DerivedStorage + 16);
  if (dword_1EE2A3148 >= 2)
  {
    v13 = *(const __CFString **)(DerivedStorage + 16);
    v42 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = v13;
  }
  if (*(_DWORD *)(DerivedStorage + 24) == 2)
  {
    if (a1 == *MEMORY[0x1E0C9D820] && a2 == *(double *)(MEMORY[0x1E0C9D820] + 8))
    {
      v42 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v19 = 4294955226;
    }
    else
    {
      v16 = *(_DWORD *)(DerivedStorage + 640);
      if (!v16)
      {
        *(_DWORD *)(DerivedStorage + 640) = 1;
        __dmb(0xBu);
        v16 = *(_DWORD *)(DerivedStorage + 640);
      }
      if (v16 == 1)
      {
        v17 = *(_DWORD *)(DerivedStorage + 740);
        *(_DWORD *)(DerivedStorage + 740) = v17 + 1;
        if (!v17)
        {
          v42 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (writebackCacheCopyBuffer(*(_QWORD **)(DerivedStorage + 648), a4, v11, a6, a1, a2))
          return 0;
        if (a5)
        {
          v20 = (unsigned int *)(DerivedStorage + 656);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          if (v21 >= 30)
          {
            do
              v23 = __ldxr(v20);
            while (__stxr(v23 - 1, v20));
            v42 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            v22 = *(NSObject **)(DerivedStorage + 8);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = __fvdp_copyWritebackPixelBuffer_block_invoke;
            block[3] = &__block_descriptor_tmp_316;
            block[4] = DerivedStorage;
            *(double *)&block[5] = a1;
            *(double *)&block[6] = a2;
            v39 = a4;
            v40 = v11;
            dispatch_async(v22, block);
          }
        }
        else
        {
          v25 = *(NSObject **)(DerivedStorage + 8);
          v35[0] = MEMORY[0x1E0C809B0];
          v35[1] = 0x40000000;
          v35[2] = __fvdp_copyWritebackPixelBuffer_block_invoke_317;
          v35[3] = &__block_descriptor_tmp_318;
          v35[4] = DerivedStorage;
          *(double *)&v35[5] = a1;
          *(double *)&v35[6] = a2;
          v36 = a4;
          v37 = v11;
          dispatch_sync(v25, v35);
        }
        if (writebackCacheCopyBuffer(*(_QWORD **)(DerivedStorage + 648), a4, v11, a6, a1, a2))
          v19 = 0;
        else
          v19 = 4294955223;
      }
      else
      {
        v42 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v19 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    v42 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19 = 4294955224;
  }
  if ((_DWORD)v19 && dword_1EE2A3148 >= 2)
  {
    v42 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v27 = v42;
    if (os_log_type_enabled(v26, type))
      v28 = v27;
    else
      v28 = v27 & 0xFFFFFFFE;
    if (v28)
    {
      v29 = &stru_1E2FD85F8;
      if (v12)
        v29 = v12;
      v43 = 138412802;
      v44 = v29;
      v45 = 2080;
      v46 = "fvdp_copyWritebackPixelBuffer";
      v47 = 1024;
      LODWORD(v48) = v19;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v19;
}

CFTypeRef *__fvdp_plugSink_block_invoke(CFTypeRef *result)
{
  CFTypeRef *v1;
  _DWORD *v2;

  v1 = result;
  v2 = result[5];
  if (v2[6] || *((_QWORD *)v2 + 8))
  {
    *(_DWORD *)(*((_QWORD *)result[4] + 1) + 24) = -12070;
  }
  else
  {
    result = (CFTypeRef *)CFRetain(result[6]);
    *((_QWORD *)v1[5] + 8) = v1[6];
  }
  return result;
}

void __fvdp_unplugSink_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = a1[5];
  if (!*(_DWORD *)(v2 + 24) && (v3 = *(const void **)(v2 + 64), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1[5] + 64) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12070;
  }
}

void __fvdp_start_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  const __CFDictionary *v14;
  const __CFString *Value;
  const __CFString *v16;
  const __CFString *v17;
  CFTypeID v18;
  uint64_t *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  CFMutableDictionaryRef Mutable;
  const void *v28;
  const __CFDictionary *v29;
  const void *v30;
  int v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  CFPropertyListRef v35;
  const void *v36;
  int v37;
  NSObject *v38;
  const __CFString *v39;
  const __CFString *v40;
  CFTypeID v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  const __CFString *v47;
  int v48;
  uint64_t v49;
  int v50;
  const __CFDictionary *v51;
  NSObject *v52;
  const __CFDictionary *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  double Double;
  double v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  const __CFString *v63;
  int Integer;
  int v65;
  NSObject *v66;
  unsigned int v67;
  unsigned int v68;
  const __CFString *v69;
  int v70;
  int v71;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  const __CFString *v75;
  int v76;
  int v77;
  NSObject *v78;
  unsigned int v79;
  unsigned int v80;
  const __CFString *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  NSObject *v86;
  unsigned int v87;
  unsigned int v88;
  const __CFString *v89;
  int v90;
  int v91;
  int v92;
  NSObject *v93;
  unsigned int v94;
  unsigned int v95;
  const __CFString *v96;
  int v97;
  int v98;
  int v99;
  NSObject *v100;
  unsigned int v101;
  unsigned int v102;
  const __CFString *v103;
  unsigned int v104;
  unsigned int Boolean;
  unsigned int v106;
  NSObject *v107;
  unsigned int v108;
  unsigned int v109;
  const __CFString *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  NSObject *v114;
  unsigned int v115;
  unsigned int v116;
  const __CFString *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  NSObject *v121;
  unsigned int v122;
  unsigned int v123;
  const __CFString *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  NSObject *v128;
  unsigned int v129;
  unsigned int v130;
  const __CFString *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  NSObject *v135;
  unsigned int v136;
  unsigned int v137;
  const __CFString *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  NSObject *v142;
  unsigned int v143;
  unsigned int v144;
  const __CFString *v145;
  BOOL v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  NSObject *v150;
  unsigned int v151;
  unsigned int v152;
  const __CFString *v153;
  int v154;
  NSObject *v155;
  unsigned int v156;
  unsigned int v157;
  const __CFString *v158;
  int v159;
  const char *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t *v163;
  NSObject *v164;
  unsigned int v165;
  unsigned int v166;
  const __CFString *v167;
  const char **v168;
  const char *v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  NSObject *v174;
  unsigned int v175;
  unsigned int v176;
  const __CFString *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t *);
  uint64_t v181;
  void (*v182)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, const __CFString *, uint64_t);
  uint64_t v187;
  int v188;
  uint64_t v189;
  NSObject *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  NSObject *v195;
  unsigned int v196;
  unsigned int v197;
  const __CFString *v198;
  NSObject *v199;
  unsigned int v200;
  unsigned int v201;
  const __CFString *v202;
  NSObject *v203;
  unsigned int v204;
  unsigned int v205;
  const __CFString *v206;
  const __CFString *v207;
  _QWORD block[7];
  char v209;
  CFTypeRef cf;
  os_log_type_t v211[4];
  char v212;
  os_log_type_t v213;
  os_log_type_t type[4];
  char buffer[4];
  const __CFString *v216;
  __int16 v217;
  const char *v218;
  __int16 v219;
  _BYTE v220[10];
  double v221;
  __int16 v222;
  double v223;
  double v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  void *v228;
  const __CFString *v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v209 = 0;
  v2 = a1[5];
  if (*(_DWORD *)(v2 + 24) || (v4 = *(_QWORD *)(v2 + 64)) == 0)
  {
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_346:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v193 = *(_QWORD *)(a1[4] + 8);
    v194 = -12070;
LABEL_347:
    *(_DWORD *)(v193 + 24) = v194;
    goto LABEL_348;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(v4);
  v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (v7)
    v7(CMBaseObject, CFSTR("Type"), v5, v2 + 72);
  if (dword_1EE2A3148)
  {
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = a1[5];
  *(_QWORD *)(v9 + 32) = 65000000000;
  *(_BYTE *)(v9 + 48) = 0;
  *(_DWORD *)(v9 + 324) = 875704422;
  *(_QWORD *)(v9 + 640) = 0x3432306600000000;
  *(_DWORD *)(v9 + 656) = 0;
  *(_QWORD *)(v9 + 392) = 0;
  v10 = *(_QWORD *)(v9 + 648);
  v11 = *(const void **)(v10 + 24);
  if (v11)
    CFRelease(v11);
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v9 + 368) = 0;
  *(_DWORD *)(v9 + 320) = 1718908515;
  *(_QWORD *)(v9 + 496) = 100000000;
  *(_QWORD *)(v9 + 512) = 20;
  *(_DWORD *)(v9 + 520) = 0;
  *(_BYTE *)(v9 + 361) = 1;
  if (*(_QWORD *)(v9 + 504))
  {
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(v9 + 504) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 504), (const void *)*MEMORY[0x1E0CECEC8], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 504), (const void *)*MEMORY[0x1E0CECEB0], (const void *)*MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 504), (const void *)*MEMORY[0x1E0CED1A0], v12);
  fvdp_encoderControlSetBitrate(v9, 8000000);
  fvdp_encoderControlSetFramerate(v9, 60);
  *(_QWORD *)(v9 + 448) = 0;
  *(_DWORD *)(v9 + 472) = 30;
  *(_QWORD *)(v9 + 176) = 0x3FAEB851EB851EB8;
  *(_WORD *)(v9 + 216) = 0;
  *(_BYTE *)(v9 + 218) = 0;
  *(_BYTE *)(v9 + 360) = 0;
  *(_BYTE *)(v9 + 660) = 0;
  *(_DWORD *)(v9 + 480) = 0;
  if (colorTagForIndex_once != -1)
    dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
  *(_QWORD *)(v9 + 376) = &qword_1EE2A0CF8;
  *(_DWORD *)(v9 + 364) = 2;
  *(_QWORD *)(v9 + 408) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt();
  FigCFDictionarySetValue();
  *(_BYTE *)(v9 + 744) = dword_1EE2A3148 != 0;
  *(_WORD *)(v9 + 752) = 0;
  *(_BYTE *)(v9 + 754) = FigDebugIsInternalBuild();
  *(_WORD *)(v9 + 384) = 0;
  *(_BYTE *)(v9 + 386) = 1;
  if (CFEqual(*(CFTypeRef *)(v9 + 72), CFSTR("Octavia")))
  {
    *(_DWORD *)(v9 + 512) = 37;
    fvdp_encoderControlSetBitrate(v9, 20000000);
  }
  else if (CFEqual(*(CFTypeRef *)(v9 + 72), CFSTR("FileWriter")))
  {
    *(_DWORD *)(v9 + 472) = 0;
  }
  v13 = a1[5];
  v14 = (const __CFDictionary *)a1[7];
  v224 = 0.0;
  *(_DWORD *)v211 = 0;
  if (v14)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v14, CFSTR("usage"));
    v16 = CFSTR("AirPlay");
    if (Value)
    {
      v17 = Value;
      v18 = CFGetTypeID(Value);
      if (v18 == CFStringGetTypeID())
        v16 = v17;
    }
    if (CFEqual(v16, CFSTR("AirPlay")))
      goto LABEL_23;
    if (CFEqual(v16, CFSTR("CarPlay")))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 504), (const void *)*MEMORY[0x1E0CECFC0], v12);
      *(_DWORD *)(v13 + 512) = 38;
      if (colorTagForIndex_once != -1)
        dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
      v19 = &qword_1EE2A0C58;
      goto LABEL_28;
    }
    if (CFEqual(v16, CFSTR("CarPlayHEVC")))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 504), (const void *)*MEMORY[0x1E0CECFC0], v12);
      *(_DWORD *)(v13 + 320) = 1718908520;
      *(_DWORD *)(v13 + 512) = 38;
      if (colorTagForIndex_once != -1)
        dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
      *(_QWORD *)(v13 + 376) = &qword_1EE2A0C78;
      *(_DWORD *)(v13 + 364) = 3;
      if (FVDUtilsAGXPixelFormatsSupported())
      {
        *(_DWORD *)(v13 + 324) = 641230384;
        *(_DWORD *)(v13 + 644) = 641230384;
      }
      goto LABEL_29;
    }
    if (CFEqual(v16, CFSTR("Stevenote")))
    {
      LOBYTE(v225) = 0;
      buffer[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      *(_QWORD *)(v13 + 320) = 0x34343466736A7067;
      *(_DWORD *)(v13 + 644) = 1111970369;
      *(_DWORD *)(v13 + 472) = 1;
      *(_DWORD *)(v13 + 364) = 3;
      v49 = v13;
      v50 = 40000000;
    }
    else
    {
      if (!CFEqual(v16, CFSTR("AirPlayHEVC")))
      {
        if (!CFEqual(v16, CFSTR("AirPlayHDR")))
        {
          if (!CFEqual(v16, CFSTR("UncompressedHDR")))
          {
            if (CFEqual(v16, CFSTR("Valeria")))
            {
              *(_DWORD *)(v13 + 512) = 0;
              *(_DWORD *)(v13 + 472) = 0x7FFFFFFF;
            }
            else if (CFEqual(v16, CFSTR("Uncompressed")))
            {
              *(_DWORD *)(v13 + 320) = 1852796517;
              *(_DWORD *)(v13 + 472) = 0;
              *(_DWORD *)(v13 + 368) = 8;
            }
            goto LABEL_29;
          }
          v53 = (const __CFDictionary *)CFDictionaryGetValue(v14, CFSTR("HDRInfo"));
          *(_DWORD *)(v13 + 472) = 0;
          *(_DWORD *)(v13 + 368) = 8;
          *(_QWORD *)(v13 + 320) = 0x783432306E6F6E65;
          *(_DWORD *)(v13 + 644) = 2016686640;
          if (colorTagForIndex_once != -1)
            dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
          *(_QWORD *)(v13 + 376) = &qword_1EE2A0CB8;
          *(_BYTE *)(v13 + 384) = 1;
          if (!v53)
          {
            v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_29;
          }
          CFDictionaryGetValue(v53, CFSTR("HDRMode"));
          if (!FigCFEqual())
          {
LABEL_29:
            *(_DWORD *)type = 0;
            v213 = OS_LOG_TYPE_DEFAULT;
            v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (FigCFDictionaryGetInt32IfPresent())
            {
              fvdp_encoderControlSetBitrate(v13, *(int *)v211);
              *(_DWORD *)type = 0;
              v213 = OS_LOG_TYPE_DEFAULT;
              v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetInt32IfPresent())
            {
              fvdp_encoderControlSetFramerate(v13, *(int *)v211);
              *(_DWORD *)type = 0;
              v213 = OS_LOG_TYPE_DEFAULT;
              v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetInt32IfPresent())
            {
              v23 = *(_DWORD *)v211;
              *(_DWORD *)(v13 + 324) = *(_DWORD *)v211;
              *(_DWORD *)(v13 + 644) = v23;
              *(_DWORD *)type = 0;
              v213 = OS_LOG_TYPE_DEFAULT;
              v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetDoubleIfPresent() && v224 > 0.0)
            {
              FigCFDictionarySetDouble();
              *(_DWORD *)type = 0;
              v213 = OS_LOG_TYPE_DEFAULT;
              v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (*(int *)(v13 + 368) >= 1)
            {
              FigCFDictionaryGetInt32IfPresent();
              v26 = *(_QWORD *)(v13 + 648);
              if (*(int *)(v13 + 368) < 1)
              {
                Mutable = 0;
              }
              else
              {
                Mutable = CFDictionaryCreateMutable(v5, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                FigCFDictionarySetInt32();
              }
              v28 = *(const void **)(v26 + 24);
              if (v28)
                CFRelease(v28);
              *(_QWORD *)(v26 + 24) = Mutable;
            }
            if (CFDictionaryContainsKey(v14, CFSTR("colorSpace")))
              *(_QWORD *)(v13 + 376) = 0;
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            CFDictionaryGetValue(v14, CFSTR("MirroringMode"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("DisplayID"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("ContentIDs"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("DisplayLabel"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("clientPID"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("IncludePrivateContent"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("AllowRemoteControlLayers"));
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v14, CFSTR("NotifyOnDisallowedCloningLayers"));
            FigCFDictionarySetValue();
            if (FigCFDictionaryGetInt32IfPresent())
            {
              LODWORD(v225) = 0;
              FigCFDictionaryGetInt32IfPresent();
            }
            v29 = (const __CFDictionary *)CFDictionaryGetValue(v14, CFSTR("encodeSettings"));
            if (v29)
            {
              v30 = CFDictionaryGetValue(v29, CFSTR("encoderUsage"));
              v31 = *(_DWORD *)(v13 + 512);
              if (prefsGetH264EncoderUsageIfValid((uint64_t)v30, (_DWORD *)(v13 + 512)))
              {
                if (v31 != *(_DWORD *)(v13 + 512))
                {
                  *(_DWORD *)type = 0;
                  v213 = OS_LOG_TYPE_DEFAULT;
                  v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
            }
            if (*(_DWORD *)(v13 + 320) != 1852796517 && FigCFDictionaryGetInt32IfPresent())
            {
              if (FVDUtilsEncoderCodecSupported(*(int *)v211))
                *(_DWORD *)(v13 + 320) = *(_DWORD *)v211;
              *(_DWORD *)type = 0;
              v213 = OS_LOG_TYPE_DEFAULT;
              v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            goto LABEL_66;
          }
          *(_BYTE *)(v13 + 385) = 1;
          if (colorTagForIndex_once != -1)
            dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
          v19 = &qword_1EE2A0CD8;
LABEL_28:
          *(_QWORD *)(v13 + 376) = v19;
          goto LABEL_29;
        }
        if (!FVDUtilsHEVCEncoderSupports42010())
          goto LABEL_114;
        *(_QWORD *)(v13 + 320) = 0x7834323066747668;
        *(_DWORD *)(v13 + 644) = 2016686640;
        *(_DWORD *)(v13 + 364) = 3;
        if (colorTagForIndex_once != -1)
          dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
        *(_QWORD *)(v13 + 376) = &qword_1EE2A0CB8;
        *(_BYTE *)(v13 + 384) = 1;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 504), (const void *)*MEMORY[0x1E0CED008], (const void *)*MEMORY[0x1E0CED698]);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 504), (const void *)*MEMORY[0x1E0CED168], v12);
        fvdp_encoderControlSetBitrate(v13, 15000000);
        v51 = (const __CFDictionary *)CFDictionaryGetValue(v14, CFSTR("HDRInfo"));
        if (v51)
        {
          CFDictionaryGetValue(v51, CFSTR("HDRMode"));
          if (FigCFEqual())
          {
            *(_BYTE *)(v13 + 385) = 1;
            if (colorTagForIndex_once != -1)
              dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
            *(_QWORD *)(v13 + 376) = &qword_1EE2A0CD8;
          }
        }
        else
        {
LABEL_114:
          v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_23:
        fvdp_applyProtectionOptions(v13, v14);
        goto LABEL_29;
      }
      if (FVDUtilsHEVCEncoderSupports4K60())
      {
        if (FVDUtilsLoadVCPEncoder())
          v48 = 1718908520;
        else
          v48 = 1752589105;
        *(_DWORD *)(v13 + 320) = v48;
        *(_DWORD *)(v13 + 364) = 3;
      }
      else
      {
        v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_DWORD *)(v13 + 320) = 1718908515;
      }
      v49 = v13;
      v50 = 10000000;
    }
    fvdp_encoderControlSetBitrate(v49, v50);
    goto LABEL_23;
  }
LABEL_66:
  v34 = a1[5];
  v212 = 0;
  v207 = *(const __CFString **)(v34 + 16);
  v35 = FigVirtualDisplayPrefsCopyValue(CFSTR("wirelessdisplay_encoderusage"));
  if (v35)
  {
    v36 = v35;
    v37 = *(_DWORD *)(v34 + 512);
    if (prefsGetH264EncoderUsageIfValid((uint64_t)v35, (_DWORD *)(v34 + 512))
      && v37 != *(_DWORD *)(v34 + 512))
    {
      LODWORD(v224) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v36);
  }
  v212 = 0;
  v39 = (const __CFString *)FigVirtualDisplayPrefsCopyValue(CFSTR("wirelessdisplay_encoderpriority"));
  if (v39)
  {
    v40 = v39;
    *(_DWORD *)v211 = 40;
    FigCFDictionaryGetInt32IfPresent();
    v41 = CFGetTypeID(v40);
    if (v41 == CFStringGetTypeID())
    {
      if (CFStringGetCString(v40, buffer, 32, 0x8000100u))
      {
        v42 = 0;
        while (strcasecmp(buffer, prefsGetEncoderPriorityIfValid_names[v42]))
        {
          if (++v42 == 5)
            goto LABEL_119;
        }
        v43 = prefsGetEncoderPriorityIfValid_values[v42];
        if (*(_DWORD *)v211 == v43)
          goto LABEL_121;
        FigCFDictionarySetInt32();
        LODWORD(v224) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v45 = LODWORD(v224);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          v46 = v45;
        else
          v46 = v45 & 0xFFFFFFFE;
        if (v46)
        {
          v47 = &stru_1E2FD85F8;
          if (v207)
            v47 = v207;
          *(_DWORD *)buffer = 138413058;
          v216 = v47;
          v217 = 2080;
          v218 = "fvdp_initFromPrefs";
          v219 = 1024;
          *(_DWORD *)v220 = *(_DWORD *)v211;
          *(_WORD *)&v220[4] = 1024;
          *(_DWORD *)&v220[6] = v43;
          _os_log_send_and_compose_impl();
        }
      }
      else
      {
LABEL_119:
        *(_DWORD *)type = 0;
        v213 = OS_LOG_TYPE_DEFAULT;
        v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_121:
    CFRelease(v40);
  }
  v212 = 0;
  Double = FigVirtualDisplayPrefsGetDouble(CFSTR("wirelessdisplay_keyframe_interval"), &v212);
  if (v212)
  {
    v59 = Double;
    if (Double > 0.0)
    {
      FigCFDictionarySetDouble();
      LODWORD(v224) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v61 = LODWORD(v224);
      if (os_log_type_enabled(v60, type[0]))
        v62 = v61;
      else
        v62 = v61 & 0xFFFFFFFE;
      if (v62)
      {
        v63 = &stru_1E2FD85F8;
        if (v207)
          v63 = v207;
        *(_DWORD *)buffer = 138412802;
        v216 = v63;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2048;
        *(double *)v220 = v59;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v212 = 0;
  Integer = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_bitrate"), (Boolean *)&v212);
  if (v212)
  {
    v65 = Integer;
    fvdp_encoderControlSetBitrate(v34, Integer);
    *(_BYTE *)(v34 + 601) = 1;
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v67 = LODWORD(v224);
    if (os_log_type_enabled(v66, type[0]))
      v68 = v67;
    else
      v68 = v67 & 0xFFFFFFFE;
    if (v68)
    {
      v69 = &stru_1E2FD85F8;
      if (v207)
        v69 = v207;
      *(_DWORD *)buffer = 138412802;
      v216 = v69;
      v217 = 2080;
      v218 = "fvdp_initFromPrefs";
      v219 = 1024;
      *(_DWORD *)v220 = v65;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v212 = 0;
  v70 = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_fps"), (Boolean *)&v212);
  if (v212)
  {
    v71 = v70;
    fvdp_encoderControlSetFramerate(v34, v70);
    *(_BYTE *)(v34 + 602) = 1;
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v73 = LODWORD(v224);
    if (os_log_type_enabled(v72, type[0]))
      v74 = v73;
    else
      v74 = v73 & 0xFFFFFFFE;
    if (v74)
    {
      v75 = &stru_1E2FD85F8;
      if (v207)
        v75 = v207;
      *(_DWORD *)buffer = 138412802;
      v216 = v75;
      v217 = 2080;
      v218 = "fvdp_initFromPrefs";
      v219 = 1024;
      *(_DWORD *)v220 = v71;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v212 = 0;
  v76 = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_inactivity_timeout"), (Boolean *)&v212);
  if (v212)
  {
    v77 = v76;
    if (v76 >= 1)
    {
      *(_QWORD *)(v34 + 32) = 1000000000 * v76;
      LODWORD(v224) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v79 = LODWORD(v224);
      if (os_log_type_enabled(v78, type[0]))
        v80 = v79;
      else
        v80 = v79 & 0xFFFFFFFE;
      if (v80)
      {
        v81 = &stru_1E2FD85F8;
        if (v207)
          v81 = v207;
        *(_DWORD *)buffer = 138412802;
        v216 = v81;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 1024;
        *(_DWORD *)v220 = v77;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(_DWORD *)(v34 + 320) != 1852796517)
  {
    prefsGetOSTypeIfPresent(CFSTR("wirelessdisplay_encoder_codec_type"), (int *)(v34 + 320));
    v82 = *(_DWORD *)(v34 + 320);
    if (v82 == 1718908520 || v82 == 1718908515)
      FVDUtilsLoadVCPEncoder();
  }
  prefsGetOSTypeIfPresent(CFSTR("wirelessdisplay_encoder_input_pixel_format"), (int *)(v34 + 324));
  prefsGetOSTypeIfPresent(CFSTR("wirelessdisplay_writeback_pixel_format"), (int *)(v34 + 644));
  v83 = *(_DWORD *)(v34 + 364);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v84 = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_encodermaxframes"), (Boolean *)type);
  if (type[0])
  {
    v85 = v84;
    *(_DWORD *)(v34 + 364) = v84;
    if (v84 != v83)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v87 = LODWORD(v224);
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        v88 = v87;
      else
        v88 = v87 & 0xFFFFFFFE;
      if (v88)
      {
        v89 = &stru_1E2FD85F8;
        if (v207)
          v89 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v89;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_encodermaxframes");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v83;
        v222 = 2048;
        v223 = (double)v85;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v90 = *(_DWORD *)(v34 + 472);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v91 = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_maxtimesreencodeidle"), (Boolean *)type);
  if (type[0])
  {
    v92 = v91;
    *(_DWORD *)(v34 + 472) = v91;
    if (v91 != v90)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v93 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v94 = LODWORD(v224);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        v95 = v94;
      else
        v95 = v94 & 0xFFFFFFFE;
      if (v95)
      {
        v96 = &stru_1E2FD85F8;
        if (v207)
          v96 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v96;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_maxtimesreencodeidle");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v90;
        v222 = 2048;
        v223 = (double)v92;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v97 = *(_DWORD *)(v34 + 516);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v98 = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_minrepeatedframes"), (Boolean *)type);
  if (type[0])
  {
    v99 = v98;
    *(_DWORD *)(v34 + 516) = v98;
    if (v98 != v97)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v100 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v101 = LODWORD(v224);
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        v102 = v101;
      else
        v102 = v101 & 0xFFFFFFFE;
      if (v102)
      {
        v103 = &stru_1E2FD85F8;
        if (v207)
          v103 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v103;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_minrepeatedframes");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v97;
        v222 = 2048;
        v223 = (double)v99;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v104 = *(unsigned __int8 *)(v34 + 660);
  type[0] = OS_LOG_TYPE_DEFAULT;
  Boolean = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_forcebuffercopy"), (Boolean *)type);
  if (type[0])
  {
    v106 = Boolean;
    *(_BYTE *)(v34 + 660) = Boolean;
    if (Boolean != v104)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v108 = LODWORD(v224);
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        v109 = v108;
      else
        v109 = v108 & 0xFFFFFFFE;
      if (v109)
      {
        v110 = &stru_1E2FD85F8;
        if (v207)
          v110 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v110;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_forcebuffercopy");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v104;
        v222 = 2048;
        v223 = (double)v106;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v111 = *(unsigned __int8 *)(v34 + 361);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v112 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_enable_hw_acc"), (Boolean *)type);
  if (type[0])
  {
    v113 = v112;
    *(_BYTE *)(v34 + 361) = v112;
    if (v112 != v111)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v115 = LODWORD(v224);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        v116 = v115;
      else
        v116 = v115 & 0xFFFFFFFE;
      if (v116)
      {
        v117 = &stru_1E2FD85F8;
        if (v207)
          v117 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v117;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_enable_hw_acc");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v111;
        v222 = 2048;
        v223 = (double)v113;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v118 = *(unsigned __int8 *)(v34 + 218);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v119 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_fill_display"), (Boolean *)type);
  if (type[0])
  {
    v120 = v119;
    *(_BYTE *)(v34 + 218) = v119;
    if (v119 != v118)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v122 = LODWORD(v224);
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
        v123 = v122;
      else
        v123 = v122 & 0xFFFFFFFE;
      if (v123)
      {
        v124 = &stru_1E2FD85F8;
        if (v207)
          v124 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v124;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_fill_display");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v118;
        v222 = 2048;
        v223 = (double)v120;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v125 = *(unsigned __int8 *)(v34 + 752);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v126 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_enable_timestamps_logging"), (Boolean *)type);
  if (type[0])
  {
    v127 = v126;
    *(_BYTE *)(v34 + 752) = v126;
    if (v126 != v125)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v129 = LODWORD(v224);
      if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
        v130 = v129;
      else
        v130 = v129 & 0xFFFFFFFE;
      if (v130)
      {
        v131 = &stru_1E2FD85F8;
        if (v207)
          v131 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v131;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_enable_timestamps_logging");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v125;
        v222 = 2048;
        v223 = (double)v127;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v132 = *(unsigned __int8 *)(v34 + 753);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v133 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_enable_timestamps_diagnostic"), (Boolean *)type);
  if (type[0])
  {
    v134 = v133;
    *(_BYTE *)(v34 + 753) = v133;
    if (v133 != v132)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v135 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v136 = LODWORD(v224);
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        v137 = v136;
      else
        v137 = v136 & 0xFFFFFFFE;
      if (v137)
      {
        v138 = &stru_1E2FD85F8;
        if (v207)
          v138 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v138;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_enable_timestamps_diagnostic");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v132;
        v222 = 2048;
        v223 = (double)v134;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v139 = *(unsigned __int8 *)(v34 + 744);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v140 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_enable_stats_logging"), (Boolean *)type);
  if (type[0])
  {
    v141 = v140;
    *(_BYTE *)(v34 + 744) = v140;
    if (v140 != v139)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v142 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v143 = LODWORD(v224);
      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
        v144 = v143;
      else
        v144 = v143 & 0xFFFFFFFE;
      if (v144)
      {
        v145 = &stru_1E2FD85F8;
        if (v207)
          v145 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v145;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_enable_stats_logging");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v139;
        v222 = 2048;
        v223 = (double)v141;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(_BYTE *)(v34 + 745))
    v146 = 1;
  else
    v146 = *(_BYTE *)(v34 + 753) != 0;
  *(_BYTE *)(v34 + 745) = v146;
  v147 = *(unsigned __int8 *)(v34 + 754);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v148 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_enable_ktrace"), (Boolean *)type);
  if (type[0])
  {
    v149 = v148;
    *(_BYTE *)(v34 + 754) = v148;
    if (v148 != v147)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v150 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v151 = LODWORD(v224);
      if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
        v152 = v151;
      else
        v152 = v151 & 0xFFFFFFFE;
      if (v152)
      {
        v153 = &stru_1E2FD85F8;
        if (v207)
          v153 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v153;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_enable_ktrace");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v147;
        v222 = 2048;
        v223 = (double)v149;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (FigVirtualDisplayPrefsGetBooleanWithDefault(CFSTR("wirelessdisplay_enable_extended_color"), *(unsigned __int8 *)(v34 + 360)))v154 = FVDUtilsMainDisplaySupportsExtendedColor() != 0;
  else
    v154 = 0;
  *(_BYTE *)(v34 + 360) = v154;
  if (dword_1EE2A3148)
  {
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v155 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v156 = LODWORD(v224);
    if (os_log_type_enabled(v155, type[0]))
      v157 = v156;
    else
      v157 = v156 & 0xFFFFFFFE;
    if (v157)
    {
      v158 = &stru_1E2FD85F8;
      v159 = *(unsigned __int8 *)(v34 + 360);
      if (v207)
        v158 = v207;
      *(_DWORD *)buffer = 138412802;
      v216 = v158;
      v217 = 2080;
      v218 = "fvdp_initFromPrefs";
      if (v159)
        v160 = "";
      else
        v160 = "not ";
      v219 = 2080;
      *(_QWORD *)v220 = v160;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v154 = *(unsigned __int8 *)(v34 + 360);
  }
  if (v154)
  {
    if (colorTagForIndex_once != -1)
      dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
    *(_QWORD *)(v34 + 376) = &qword_1EE2A0C98;
  }
  v212 = 0;
  v161 = FigVirtualDisplayPrefsGetInteger(CFSTR("wirelessdisplay_colortag_index"), (Boolean *)&v212);
  if (v212)
  {
    v162 = v161;
    if (v161 > 6)
    {
      v163 = 0;
    }
    else
    {
      if (colorTagForIndex_once != -1)
        dispatch_once(&colorTagForIndex_once, &__block_literal_global_185);
      v163 = &colorTagForIndex_colorTags[4 * v162];
    }
    *(_QWORD *)(v34 + 376) = v163;
    if (dword_1EE2A3148)
    {
      LODWORD(v224) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v164 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v165 = LODWORD(v224);
      if (os_log_type_enabled(v164, type[0]))
        v166 = v165;
      else
        v166 = v165 & 0xFFFFFFFE;
      if (v166)
      {
        v167 = &stru_1E2FD85F8;
        if (v207)
          v167 = v207;
        v168 = *(const char ***)(v34 + 376);
        if (v168)
          v169 = *v168;
        else
          v169 = "none";
        *(_DWORD *)buffer = 138412802;
        v216 = v167;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2080;
        *(_QWORD *)v220 = v169;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v170 = MEMORY[0x1E0C809B0];
  v225 = MEMORY[0x1E0C809B0];
  v226 = 0x40000000;
  v227 = __prefsInitPixelBufferChromaLocation_block_invoke;
  v228 = &__block_descriptor_tmp_265;
  v229 = CFSTR("wirelessdisplay_chromalocation_index");
  if (prefsInitPixelBufferChromaLocation_once != -1)
    dispatch_once(&prefsInitPixelBufferChromaLocation_once, &v225);
  v171 = *(unsigned __int8 *)(v34 + 386);
  type[0] = OS_LOG_TYPE_DEFAULT;
  v172 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_encode_in_process"), (Boolean *)type);
  if (type[0])
  {
    v173 = v172;
    *(_BYTE *)(v34 + 386) = v172;
    if (v172 != v171)
    {
      LODWORD(v224) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v174 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v175 = LODWORD(v224);
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
        v176 = v175;
      else
        v176 = v175 & 0xFFFFFFFE;
      if (v176)
      {
        v177 = &stru_1E2FD85F8;
        if (v207)
          v177 = v207;
        *(_DWORD *)buffer = 138413314;
        v216 = v177;
        v217 = 2080;
        v218 = "fvdp_initFromPrefs";
        v219 = 2112;
        *(_QWORD *)v220 = CFSTR("wirelessdisplay_encode_in_process");
        *(_WORD *)&v220[8] = 2048;
        v221 = (double)v171;
        v222 = 2048;
        v223 = (double)v173;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  fvdp_checkForTaps(v34, 1);
  v178 = a1[5];
  v179 = *(_QWORD *)(v178 + 64);
  v225 = v170;
  v226 = 0x40000000;
  v227 = __fvdp_configureSink_block_invoke;
  v228 = &__block_descriptor_tmp_277;
  v229 = (const __CFString *)v178;
  v180 = *(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v180)
    v180(v179, &v225);
  if (*(_BYTE *)(v178 + 752) || *(_BYTE *)(v178 + 753))
  {
    v181 = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(v178 + 64));
    v182 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
    if (v182)
      v182(v181, CFSTR("anchorTimestampInfo"), CFSTR("SubSu"));
    v183 = *(_QWORD *)(v178 + 64);
    if (timestampsGetTimestampNameInfo_once != -1)
      dispatch_once(&timestampsGetTimestampNameInfo_once, &__block_literal_global_55);
    v184 = timestampsGetTimestampNameInfo_timestampInfoArray;
    v185 = FigVirtualDisplaySinkGetCMBaseObject(v183);
    v186 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v186)
      v186(v185, CFSTR("timestampInfo"), v184);
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = fvdp_copySinkProperty(a1[5], (uint64_t)CFSTR("displayInfo"), (uint64_t)&cf);
  v187 = a1[4];
  v188 = *(_DWORD *)(*(_QWORD *)(v187 + 8) + 24);
  if (v188)
  {
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v195 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v196 = LODWORD(v224);
    if (os_log_type_enabled(v195, type[0]))
      v197 = v196;
    else
      v197 = v196 & 0xFFFFFFFE;
    if (!v197)
      goto LABEL_361;
    v198 = (const __CFString *)a1[6];
    if (!v198)
      v198 = &stru_1E2FD85F8;
    *(_DWORD *)buffer = 138413058;
    v216 = v198;
    v217 = 2080;
    v218 = "fvdp_start_block_invoke";
    v219 = 1024;
    *(_DWORD *)v220 = 4320;
    *(_WORD *)&v220[4] = 1024;
    *(_DWORD *)&v220[6] = v188;
    goto LABEL_360;
  }
  if (!cf)
  {
    LODWORD(v224) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v199 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v200 = LODWORD(v224);
    if (os_log_type_enabled(v199, type[0]))
      v201 = v200;
    else
      v201 = v200 & 0xFFFFFFFE;
    if (v201)
    {
      v202 = (const __CFString *)a1[6];
      if (!v202)
        v202 = &stru_1E2FD85F8;
      *(_DWORD *)buffer = 138412802;
      v216 = v202;
      v217 = 2080;
      v218 = "fvdp_start_block_invoke";
      v219 = 1024;
      *(_DWORD *)v220 = 4321;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_346;
  }
  v189 = a1[5];
  v190 = *(NSObject **)(v189 + 8);
  block[0] = v170;
  block[1] = 0x40000000;
  block[2] = __fvdp_start_block_invoke_176;
  block[3] = &unk_1E2FA1718;
  block[4] = v187;
  block[5] = v189;
  block[6] = cf;
  dispatch_sync(v190, block);
  v191 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (!v191)
  {
    FigCFDictionaryGetBooleanIfPresent();
    v192 = a1[5];
    if (v209)
    {
      *(_DWORD *)(v192 + 24) = 1;
      goto LABEL_348;
    }
    fvdp_startTimers(v192);
    v193 = a1[5];
    v194 = 2;
    goto LABEL_347;
  }
  LODWORD(v224) = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v203 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v204 = LODWORD(v224);
  if (os_log_type_enabled(v203, type[0]))
    v205 = v204;
  else
    v205 = v204 & 0xFFFFFFFE;
  if (v205)
  {
    v206 = (const __CFString *)a1[6];
    if (!v206)
      v206 = &stru_1E2FD85F8;
    *(_DWORD *)buffer = 138413058;
    v216 = v206;
    v217 = 2080;
    v218 = "fvdp_start_block_invoke_2";
    v219 = 1024;
    *(_DWORD *)v220 = 4325;
    *(_WORD *)&v220[4] = 1024;
    *(_DWORD *)&v220[6] = v191;
LABEL_360:
    _os_log_send_and_compose_impl();
  }
LABEL_361:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_348:
  if (cf)
    CFRelease(cf);
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    fvdp_cleanup(a1[5]);
}

uint64_t fvdp_copySinkProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t v8;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 64);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __fvdp_copySinkProperty_block_invoke;
  v10[3] = &unk_1E2FA1860;
  v10[6] = v5;
  v10[7] = a2;
  v10[4] = &v11;
  v10[5] = a3;
  v10[8] = a1;
  v7 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v7)
    v7(v6, a2, 0, v10);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void __fvdp_start_block_invoke_176(_QWORD *a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  const void *Value;
  const void *v5;
  const __CFDictionary *v6;
  BOOL v7;
  int *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  int v19;
  NSObject *v20;
  NSObject *v21;

  v3 = a1[5];
  v2 = (const __CFDictionary *)a1[6];
  Value = CFDictionaryGetValue(v2, CFSTR("colorModes"));
  v5 = CFDictionaryGetValue(v2, CFSTR("timingModes"));
  v6 = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("displaySizeInPhysicalUnits"));
  FigCFDictionaryGetDoubleIfPresent();
  *(_QWORD *)(v3 + 184) = 0x3FF0000000000000;
  if (Value)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7 && CFArrayGetCount((CFArrayRef)Value) && CFArrayGetCount((CFArrayRef)v5))
  {
    v8 = &dword_1EE2A3000;
    if (dword_1EE2A3148 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v8 = &dword_1EE2A3000;
      if (dword_1EE2A3148 >= 2)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = &dword_1EE2A3000;
      }
    }
    v11 = *(const void **)(v3 + 192);
    *(_QWORD *)(v3 + 192) = Value;
    CFRetain(Value);
    if (v11)
      CFRelease(v11);
    v12 = *(const void **)(v3 + 200);
    *(_QWORD *)(v3 + 200) = v5;
    CFRetain(v5);
    if (v12)
      CFRelease(v12);
    if (v6)
    {
      CGSizeMakeWithDictionaryRepresentation(v6, (CGSize *)(v3 + 152));
      FigDisplayModes_CreateSquarePixelTimingModesArrayFromTimingModesAndDisplaySize(*(const __CFArray **)(v3 + 200), (__CFArray **)(v3 + 208), *(double *)(v3 + 152), *(double *)(v3 + 160), *(double *)(v3 + 184));
    }
    *(_BYTE *)(v3 + 88) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v13 = *(const void **)(v3 + 96);
    v14 = CFDictionaryGetValue(v2, CFSTR("displayName"));
    *(_QWORD *)(v3 + 96) = v14;
    if (v14)
      CFRetain(v14);
    if (v13)
      CFRelease(v13);
    v15 = *(const void **)(v3 + 104);
    v16 = CFDictionaryGetValue(v2, CFSTR("displayUUID"));
    *(_QWORD *)(v3 + 104) = v16;
    if (v16)
      CFRetain(v16);
    if (v15)
      CFRelease(v15);
    v17 = *(const void **)(v3 + 112);
    v18 = CFDictionaryGetValue(v2, CFSTR("displayEDID"));
    *(_QWORD *)(v3 + 112) = v18;
    if (v18)
      CFRetain(v18);
    if (v17)
      CFRelease(v17);
    v19 = v8[82];
    if (v19)
    {
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v19 = 0;
    }
  }
  else
  {
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19 = -12070;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v19;
}

void fvdp_startTimers(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *v7;
  dispatch_time_t v8;

  if (dword_1EE2A3148)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)(a1 + 488);
  v4 = dispatch_time(0, *(_QWORD *)(a1 + 496));
  dispatch_source_set_timer(v3, v4, *(_QWORD *)(a1 + 496), 0x989680uLL);
  if (*(_BYTE *)(a1 + 744) || *(_BYTE *)(a1 + 745))
  {
    *(_QWORD *)(a1 + 688) = FigGetUpTimeNanoseconds();
    v5 = *(NSObject **)(a1 + 680);
    v6 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v5, v6, 0x3B9ACA00uLL, 0x5F5E100uLL);
  }
  *(_BYTE *)(a1 + 48) = 0;
  v7 = *(NSObject **)(a1 + 40);
  v8 = dispatch_time(0, *(_QWORD *)(a1 + 32));
  dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
}

uint64_t fvdp_encoderControlSetBitrate(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v6;
  NSObject *v7;
  unsigned int v8;
  NSObject *v9;

  if (*(_DWORD *)(result + 584) != a2)
  {
    v3 = result;
    v4 = dword_1EE2A3148;
    if (dword_1EE2A3148 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      v4 = dword_1EE2A3148;
    }
    *(_DWORD *)(v3 + 576) = 2;
    v6 = (double)a2 * 0.125;
    *(double *)(v3 + 528) = v6;
    *(_QWORD *)(v3 + 552) = 0x3FF0000000000000;
    if (v4 <= 1)
    {
      *(double *)(v3 + 536) = v6 * 0.2;
      *(_QWORD *)(v3 + 560) = 0x3FB999999999999ALL;
    }
    else
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      v8 = dword_1EE2A3148;
      *(double *)(v3 + 536) = *(double *)(v3 + 528) * 0.2;
      *(_QWORD *)(v3 + 560) = 0x3FB999999999999ALL;
      if (v8 >= 2)
      {
        v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    *(_DWORD *)(v3 + 584) = a2;
    *(_BYTE *)(v3 + 580) = 1;
  }
  return result;
}

double fvdp_encoderControlSetFramerate(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double result;

  if (*(_DWORD *)(a1 + 416) != a2)
  {
    if (dword_1EE2A3148)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(a1 + 416) = a2;
    *(_QWORD *)(a1 + 424) = 0x3B9ACA00uLL / a2;
    result = (double)a2;
    *(double *)(a1 + 592) = (double)a2;
    *(_BYTE *)(a1 + 600) = 1;
  }
  return result;
}

uint64_t *__colorTagForIndex_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *result;

  v0 = *MEMORY[0x1E0CA8D88];
  v1 = *MEMORY[0x1E0CA8F18];
  v2 = *MEMORY[0x1E0CA8EB0];
  v3 = *MEMORY[0x1E0CA8F10];
  v4 = *MEMORY[0x1E0CA8EE0];
  v5 = *MEMORY[0x1E0CA8D98];
  v6 = *MEMORY[0x1E0CA8D80];
  v7 = *MEMORY[0x1E0CA8F00];
  v8 = *MEMORY[0x1E0CA8EC8];
  v9 = *MEMORY[0x1E0CA8EF8];
  result = &colorTagForIndex_colorTags;
  colorTagForIndex_colorTags = (uint64_t)"AirPlay";
  unk_1EE2A0C40 = v0;
  qword_1EE2A0C48 = v1;
  unk_1EE2A0C50 = v2;
  qword_1EE2A0C58 = (uint64_t)"CarPlay";
  unk_1EE2A0C60 = v0;
  qword_1EE2A0C68 = v3;
  unk_1EE2A0C70 = v4;
  qword_1EE2A0C78 = (uint64_t)"CarPlayHEVC";
  unk_1EE2A0C80 = v0;
  qword_1EE2A0C88 = v1;
  unk_1EE2A0C90 = v4;
  qword_1EE2A0C98 = (uint64_t)"ExtendedColor";
  unk_1EE2A0CA0 = v5;
  qword_1EE2A0CA8 = v1;
  unk_1EE2A0CB0 = v2;
  qword_1EE2A0CB8 = (uint64_t)"HDR10";
  unk_1EE2A0CC0 = v6;
  qword_1EE2A0CC8 = v7;
  unk_1EE2A0CD0 = v8;
  qword_1EE2A0CD8 = (uint64_t)"DoVi";
  unk_1EE2A0CE0 = 0;
  qword_1EE2A0CE8 = v9;
  unk_1EE2A0CF0 = v8;
  qword_1EE2A0CF8 = (uint64_t)"AirPlaysRGB";
  unk_1EE2A0D00 = v0;
  qword_1EE2A0D08 = v1;
  unk_1EE2A0D10 = v4;
  return result;
}

uint64_t prefsGetH264EncoderUsageIfValid(uint64_t result, _DWORD *a2)
{
  const __CFString *v3;
  CFTypeID v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char buffer[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = (const __CFString *)result;
  v4 = CFGetTypeID((CFTypeRef)result);
  if (v4 != CFStringGetTypeID())
    return 0;
  if (!CFStringGetCString(v3, buffer, 32, 0x8000100u))
  {
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  v5 = 0;
  while (strcasecmp(buffer, prefsGetH264EncoderUsageIfValid_names[v5]))
  {
    if (++v5 == 6)
      goto LABEL_7;
  }
  *a2 = prefsGetH264EncoderUsageIfValid_values[v5];
  return 1;
}

void fvdp_applyProtectionOptions(uint64_t a1, CFDictionaryRef theDict)
{
  const void *Value;
  CFTypeID v4;
  const void *v5;

  Value = CFDictionaryGetValue(theDict, CFSTR("protectionOptions"));
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 == CFDictionaryGetTypeID())
      FigCFDictionaryGetInt64IfPresent();
  }
  v5 = *(const void **)(a1 + 400);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  if (v5)
    CFRelease(v5);
}

void prefsGetOSTypeIfPresent(const __CFString *a1, int *a2)
{
  int v3;
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  int v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char buffer[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (const __CFString *)FigVirtualDisplayPrefsCopyValue(a1);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      if (!CFStringGetCString(v5, buffer, 8, 0x8000100u)
        || strlen(buffer) != 4
        || (v7 = (buffer[1] << 16) | (buffer[0] << 24) | (buffer[2] << 8) | buffer[3],
            *a2 = v7,
            v3 != v7))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CFRelease(v5);
  }
}

void fvdp_checkForTaps(uint64_t a1, int a2)
{
  int Boolean;
  int v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;

  Boolean = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_tap_input"), 0);
  v5 = FigVirtualDisplayPrefsGetBoolean(CFSTR("wirelessdisplay_tap_output"), 0);
  if (a2)
  {
    if (Boolean && !*(_QWORD *)(a1 + 664))
      *(_QWORD *)(a1 + 664) = tapCreate(CFSTR("input"));
    if (v5 && !*(_QWORD *)(a1 + 672))
    {
      if (*(_DWORD *)(a1 + 320) == 1852796517)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        *(_QWORD *)(a1 + 672) = tapCreate(CFSTR("output"));
      }
    }
    if (*(_QWORD *)(a1 + 664) || *(_QWORD *)(a1 + 672))
      *(_QWORD *)(a1 + 448) = 1666666;
  }
  else
  {
    if (!Boolean)
    {
      v7 = *(_QWORD *)(a1 + 664);
      if (v7)
      {
        tapDestroy(v7);
        *(_QWORD *)(a1 + 664) = 0;
      }
    }
    if (!v5)
    {
      v8 = *(_QWORD *)(a1 + 672);
      if (v8)
      {
        tapDestroy(v8);
        *(_QWORD *)(a1 + 672) = 0;
      }
    }
  }
}

uint64_t __prefsInitPixelBufferChromaLocation_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int IntegerWithDefault;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v7[7];

  v7[6] = *MEMORY[0x1E0C80C00];
  v1 = *MEMORY[0x1E0CA8D00];
  v7[0] = *MEMORY[0x1E0CA8D10];
  v7[1] = v1;
  v2 = *MEMORY[0x1E0CA8D18];
  v7[2] = *MEMORY[0x1E0CA8D20];
  v7[3] = v2;
  v3 = *MEMORY[0x1E0CA8CF0];
  v7[4] = *MEMORY[0x1E0CA8CF8];
  v7[5] = v3;
  IntegerWithDefault = FigVirtualDisplayPrefsGetIntegerWithDefault(*(const __CFString **)(a1 + 32), 0);
  if (IntegerWithDefault <= 5)
    sPixelBufferChromaLocation = v7[IntegerWithDefault];
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

_QWORD *tapCreate(const void *a1)
{
  const __CFAllocator *v2;
  uint64_t TempDirectory;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  CFStringRef v7;
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, CFStringRef);
  CFTypeRef v10;
  unsigned int (*v11)(CFTypeRef, _QWORD, _QWORD);
  _QWORD *v12;
  CFTypeRef v13;
  NSObject *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  TempDirectory = FVDUtilsGetTempDirectory();
  v4 = getpid();
  do
  {
    v5 = __ldxr(&tapCreate_count);
    v6 = v5 + 1;
  }
  while (__stxr(v6, &tapCreate_count));
  v7 = CFStringCreateWithFormat(v2, 0, CFSTR("%@tap-%@-%d-%d.mov"), TempDirectory, a1, v4, v6);
  if (FigVirtualDisplaySinkFileWriterCreate((uint64_t)v2, cf)
    || (CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(cf[0]),
        (v9 = *(unsigned int (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56)) == 0)
    || v9(CMBaseObject, CFSTR("Destination"), v7)
    || (v10 = cf[0],
        (v11 = *(unsigned int (**)(CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0)
    || v11(v10, 0, 0))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = 0;
    if (!v7)
      goto LABEL_17;
  }
  else
  {
    v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004082687C62uLL);
    if (a1)
      v13 = CFRetain(a1);
    else
      v13 = 0;
    *v12 = cf[0];
    v12[1] = v13;
    cf[0] = 0;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!v7)
      goto LABEL_17;
  }
  CFRelease(v7);
LABEL_17:
  if (cf[0])
    CFRelease(cf[0]);
  return v12;
}

void __fvdp_configureSink_block_invoke(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  uint64_t v6;
  NSObject *v7;
  _QWORD block[7];

  if (cf)
    CFRetain(cf);
  if (a3)
    CFRetain(a3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_configureSink_block_invoke_2;
  block[3] = &__block_descriptor_tmp_276;
  block[4] = v6;
  block[5] = cf;
  block[6] = a3;
  dispatch_async(v7, block);
}

void __fvdp_configureSink_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  const __CFDictionary *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  const __CFArray *Value;
  const __CFArray *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  __CFArray *Mutable;
  CFRange v13;

  v2 = a1[4];
  v3 = (const __CFDictionary *)a1[6];
  if (FigCFEqual())
  {
    if (dword_1EE2A3148)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(v2 + 603) = 1;
  }
  else if (FigCFEqual())
  {
    if (dword_1EE2A3148)
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(v2 + 604) = 1;
  }
  else if (FigCFEqual())
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("tokens"));
    if (Value)
    {
      v7 = Value;
      if (dword_1EE2A3148 >= 2)
      {
        v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      Mutable = *(__CFArray **)(v2 + 624);
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(v2 + 624) = Mutable;
      }
      v13.length = CFArrayGetCount(v7);
      v13.location = 0;
      CFArrayAppendArray(Mutable, v7, v13);
    }
  }
  else if (FigCFEqual())
  {
    *(_DWORD *)(v2 + 476) = 1;
    FigCFDictionaryGetInt32IfPresent();
    if (dword_1EE2A3148)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v9 = (const void *)a1[5];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[6];
  if (v10)
    CFRelease(v10);
}

intptr_t __fvdp_copySinkProperty_block_invoke(uint64_t a1, int a2, CFTypeRef cf)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v6;

  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    **(_QWORD **)(a1 + 40) = v6;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 64) + 80));
}

void __fvdp_stop_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  const __CFString *v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD block[5];
  os_log_type_t type;
  unsigned int v17;
  int v18;
  const __CFString *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 24);
  if (v3 != 2 && dword_1EE2A3148 != 0)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)(v2 + 24) = 0;
  __dmb(0xBu);
  fvdp_stopTimers(*(NSObject ***)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_stop_block_invoke_284;
  block[3] = &__block_descriptor_tmp_285;
  block[4] = v6;
  dispatch_sync(v7, block);
  if (v3)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v9 = v17;
    if (os_log_type_enabled(v8, type))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if (v10)
    {
      v11 = &stru_1E2FD85F8;
      v12 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(a1 + 40))
        v11 = *(const __CFString **)(a1 + 40);
      v13 = *(_DWORD *)(v12 + 736);
      v14 = *(_DWORD *)(v12 + 740);
      v18 = 138413058;
      v19 = v11;
      v20 = 2080;
      v21 = "fvdp_stop_block_invoke_2";
      v22 = 1024;
      v23 = v13;
      v24 = 1024;
      v25 = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fvdp_cleanup(*(_QWORD *)(a1 + 32));
}

void fvdp_stopTimers(NSObject **a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  _QWORD block[5];
  os_log_type_t type;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A3148)
  {
    v6 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dispatch_source_set_timer(a1[61], 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_source_set_timer(a1[85], 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v3 = a1[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_stopTimers_block_invoke;
  block[3] = &__block_descriptor_tmp_288;
  block[4] = a1;
  dispatch_sync(v3, block);
}

_QWORD *__fvdp_stop_block_invoke_284(uint64_t a1)
{
  return fvdp_shutdownEncoderAndPools(*(_QWORD *)(a1 + 32));
}

_QWORD *fvdp_shutdownEncoderAndPools(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  fvdp_teardownCompressionSession(a1);
  v3 = *(const void **)(a1 + 336);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v4 = *MEMORY[0x1E0C9D820];
  *(_OWORD *)(a1 + 224) = *MEMORY[0x1E0C9D820];
  *(_OWORD *)(a1 + 240) = v4;
  v5 = *MEMORY[0x1E0C9D648];
  v6 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 256) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(a1 + 272) = v6;
  *(_OWORD *)(a1 + 288) = v5;
  *(_OWORD *)(a1 + 304) = v6;
  return writebackCacheInitWithPool(*(_QWORD **)(a1 + 648), 0, 0);
}

void __fvdp_stopTimers_block_invoke(uint64_t a1)
{
  dispatch_source_set_timer(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 464), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_source_set_timer(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 40), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;
}

void fvdp_teardownCompressionSession(uint64_t a1)
{
  const void *v2;
  OpaqueVTCompressionSession *v3;
  const void *v4;
  CMTime v5;

  v2 = *(const void **)(a1 + 328);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v3 = *(OpaqueVTCompressionSession **)(a1 + 344);
  if (v3)
  {
    v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    VTCompressionSessionCompleteFrames(v3, &v5);
    v4 = *(const void **)(a1 + 344);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 344) = 0;
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 464), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

uint64_t __fvdp_suspend_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, _QWORD);
  _QWORD block[5];
  os_log_type_t type;
  unsigned int v16;
  int v17;
  const __CFString *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 24) != 2 && dword_1EE2A3148 != 0)
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)(v2 + 24) = 1;
  __dmb(0xBu);
  fvdp_stopTimers(*(NSObject ***)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdp_suspend_block_invoke_289;
  block[3] = &__block_descriptor_tmp_290;
  block[4] = v5;
  dispatch_sync(v6, block);
  fvdp_checkForTaps(*(_QWORD *)(a1 + 32), 0);
  if (dword_1EE2A3148)
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v8 = v16;
    if (os_log_type_enabled(v7, type))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if (v9)
    {
      v10 = &stru_1E2FD85F8;
      if (*(_QWORD *)(a1 + 40))
        v10 = *(const __CFString **)(a1 + 40);
      v17 = 138412546;
      v18 = v10;
      v19 = 2080;
      v20 = "fvdp_suspend_block_invoke_2";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  result = CMBaseObjectGetVTable();
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
  if (v13)
    return v13(v11, CFSTR("clearScreen"), *MEMORY[0x1E0C9AE50], 0);
  return result;
}

_QWORD *__fvdp_suspend_block_invoke_289(uint64_t a1)
{
  return fvdp_shutdownEncoderAndPools(*(_QWORD *)(a1 + 32));
}

void __fvdp_resume_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[27];

  block[26] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v2 + 24) == 1)
  {
    fvdp_checkForTaps(v2, 1);
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(NSObject **)(v3 + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvdp_resume_block_invoke_2;
    block[3] = &__block_descriptor_tmp_293;
    block[4] = v3;
    dispatch_sync(v4, block);
    fvdp_startTimers(*(_QWORD *)(a1 + 40));
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 2;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = -12070;
  }
  *(_DWORD *)(v5 + 24) = v6;
}

uint64_t __fvdp_resume_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 603) = 1;
  return result;
}

CFTypeRef __fvdp_copySupportedDigitalOutModes_block_invoke(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t v3;
  CFTypeRef result;

  v2 = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 192);
  if (v2)
    v2 = CFRetain(v2);
  **(_QWORD **)(a1 + 32) = v2;
  v3 = *(_QWORD *)(a1 + 40);
  result = *(CFTypeRef *)(v3 + 208);
  if (result || (result = *(CFTypeRef *)(v3 + 200)) != 0)
    result = CFRetain(result);
  **(_QWORD **)(a1 + 48) = result;
  return result;
}

void __fvdp_setDigitalOutMode_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  const __CFArray *v5;
  double *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  CFDictionaryRef DictionaryRepresentation;
  OpaqueVTCompressionSession *v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, const __CFString *, CFDictionaryRef);
  CMTime completeUntilPresentationTimeStamp;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 44);
  if (FigDisplayModes_ExtractDimensionsFromTimingMode(*(const __CFArray **)(v1 + 200), v2, (double *)(v1 + 120)))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1EE2A3148)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(const __CFArray **)(v1 + 208);
  v6 = (double *)(v1 + 136);
  if (v5)
  {
    if (FigDisplayModes_ExtractDimensionsFromTimingMode(v5, v2, v6))
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (dword_1EE2A3148)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)(v1 + 120);
  }
  if (FigDisplayModes_ExtractOverscanInfoFromTimingMode(*(const __CFArray **)(v1 + 200), v2, (BOOL *)(v1 + 168)))
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1EE2A3148)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(v1 + 64))
  {
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(v1 + 120));
    v12 = *(OpaqueVTCompressionSession **)(v1 + 344);
    if (v12)
    {
      completeUntilPresentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      VTCompressionSessionCompleteFrames(v12, &completeUntilPresentationTimeStamp);
    }
    CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(v1 + 64));
    v14 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v14)
      v14(CMBaseObject, CFSTR("virtualDisplayModeSize"), DictionaryRepresentation);
    if (DictionaryRepresentation)
      CFRelease(DictionaryRepresentation);
  }
}

void __fvdp_submitPixelBuffer_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  OSType PixelFormatType;
  OSType v5;
  double Width;
  size_t Height;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  NSObject *v33;
  unsigned int *v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  unsigned int v39;
  double *v40;
  int v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  const __CFString *v45;
  unsigned int v46;
  char *v47;
  double v48;
  double v49;
  unsigned int v50;
  char *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  OSType v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  const __CFString *v60;
  unsigned int v61;
  char *v62;
  unsigned int v63;
  char *v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  double v68;
  double v69;
  CGFloat x;
  _BOOL4 v71;
  _BOOL4 v72;
  CGFloat v73;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  const __CFString *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  unsigned int v89;
  char *v90;
  unsigned int v91;
  char *v92;
  double v93;
  double v94;
  unsigned int v95;
  char *v96;
  unsigned int v97;
  char *v98;
  double v99;
  int v100;
  int v101;
  const void *v102;
  int v103;
  _DWORD *v104;
  const __CFAllocator *v105;
  CVReturn v106;
  NSObject *v107;
  unsigned int v108;
  unsigned int v109;
  const __CFString *v110;
  int v111;
  const char *v112;
  NSObject *v113;
  unsigned int v114;
  unsigned int v115;
  const __CFString *v116;
  OSStatus v117;
  NSObject *v118;
  unsigned int v119;
  unsigned int v120;
  const __CFString *v121;
  OSStatus v122;
  CVPixelBufferRef v123;
  CVPixelBufferRef v124;
  uint64_t v125;
  const __CFString *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int64_t v130;
  dispatch_time_t v131;
  CVPixelBufferRef *v132;
  const __CFString *v133;
  __IOSurface *IOSurface;
  CFTypeRef v135;
  const void *v136;
  NSObject *v137;
  unsigned int v138;
  unsigned int v139;
  const __CFString *v140;
  uint64_t v141;
  uint64_t UpTimeNanoseconds;
  int v143;
  const __CFString *v144;
  NSObject *v145;
  unsigned int v146;
  unsigned int v147;
  const __CFString *v148;
  NSObject *v149;
  unsigned int v150;
  unsigned int v151;
  const __CFString *v152;
  int v153;
  NSObject *v154;
  unsigned int v155;
  unsigned int v156;
  const __CFString *v157;
  NSObject *v158;
  unsigned int v159;
  unsigned int v160;
  const __CFString *v161;
  CVReturn v162;
  NSObject *v163;
  unsigned int v164;
  unsigned int v165;
  const __CFString *v166;
  OSStatus v167;
  NSObject *v168;
  unsigned int v169;
  unsigned int v170;
  const __CFString *v171;
  NSObject *v172;
  unsigned int v173;
  unsigned int v174;
  const __CFString *v175;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OSStatus v177;
  NSObject *v178;
  unsigned int v179;
  unsigned int v180;
  const __CFString *v181;
  NSObject *v182;
  unsigned int v183;
  unsigned int v184;
  const __CFString *v185;
  double v186;
  double v187;
  const __CFString *v188;
  char *v189;
  double v190;
  double v191;
  const __CFString *v192;
  OSType v193;
  OSType v194;
  const __CFString *v195;
  const __CFString *v196;
  double v197;
  double v198;
  double y;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  CVPixelBufferRef pixelBufferOut;
  double v208;
  double v209;
  float64x2_t v210;
  os_log_type_t v211[8];
  double v212;
  double v213;
  double v214;
  CGFloat v215;
  double v216;
  uint64_t v217;
  uint64_t v218;
  float64x2_t v219;
  os_log_type_t type;
  os_log_type_t v221[4];
  int v222;
  const __CFString *v223;
  __int16 v224;
  const char *v225;
  __int16 v226;
  _BYTE v227[10];
  char *v228;
  __int16 v229;
  char *v230;
  __int16 v231;
  char *v232;
  __int16 v233;
  char *v234;
  __int16 v235;
  char *v236;
  uint64_t v237;
  CGRect v238;
  CGRect v239;
  CGRect v240;
  CGRect v241;
  CGRect v242;
  CGRect v243;
  CGRect v244;

  v237 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 217) = *(_BYTE *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 40);
  pixelBufferOut = 0;
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v3 = &dword_1EE2A3000;
    if (!*(_QWORD *)v2)
    {
      if (*(_BYTE *)(v1 + 744) || *(_BYTE *)(v1 + 745))
      {
        v34 = (unsigned int *)(v1 + 728);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      goto LABEL_151;
    }
    v195 = *(const __CFString **)(v1 + 16);
    PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)v2);
    v5 = PixelFormatType;
    if (*(_DWORD *)(v1 + 640) == 1 && PixelFormatType != *(_DWORD *)(v1 + 644))
    {
      LODWORD(v217) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_255:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_181;
    }
    Width = (double)CVPixelBufferGetWidth(*(CVPixelBufferRef *)v2);
    Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v2);
    v8 = (double)Height;
    v10 = *(double *)(v2 + 8);
    v9 = *(double *)(v2 + 16);
    v12 = *(double *)(v2 + 24);
    v11 = *(double *)(v2 + 32);
    v13 = *(double *)(v2 + 40);
    v14.f64[0] = *(float64_t *)(v2 + 48);
    v16 = *(double *)(v2 + 56);
    v15 = *(double *)(v2 + 64);
    v17 = *(_DWORD *)(v2 + 136);
    v18 = *(double *)(v1 + 120);
    v19 = *(double *)(v1 + 128);
    v196 = *(const __CFString **)(v1 + 16);
    v20 = *(unsigned __int8 *)(v1 + 168);
    v21 = *(double *)(v1 + 176);
    v23 = *(double *)(v1 + 136);
    v22 = *(double *)(v1 + 144);
    v24 = *(double *)(v1 + 152);
    v25 = *(double *)(v1 + 160);
    v215 = Width;
    v216 = (double)Height;
    *(double *)v211 = v10;
    v212 = v9;
    v203 = v12;
    v205 = v11;
    v213 = v12;
    v214 = v11;
    v26 = v13;
    v208 = v13;
    v209 = v14.f64[0];
    v27 = v14.f64[0];
    v210.f64[0] = v16;
    v210.f64[1] = v15;
    v197 = v19;
    v198 = v18;
    if (*(_DWORD *)(v1 + 640) == 1 && !*(_BYTE *)(v1 + 217))
    {
      v187 = v22;
      v190 = v25;
      v200 = v24;
      v217 = 0;
      v218 = 0;
      v219.f64[0] = Width;
      v219.f64[1] = (double)Height;
      v28 = Width;
      v29 = (double)Height;
      if ((v17 & 4) != 0)
      {
        v30 = v10;
        v31 = v9;
        if (Width / v8 >= v8 / Width)
          v32 = v8 / Width;
        else
          v32 = Width / v8;
        v29 = Width;
        v28 = (double)Height;
        if (v32 < 1.0)
        {
          v28 = (double)(int)(((int)(v32 * v8) + 1) & 0xFFFFFFFE);
          v29 = (double)(int)(((int)(v32 * Width) + 1) & 0xFFFFFFFE);
          if (dword_1EE2A3148 >= 3)
          {
            v186 = v21;
            *(_DWORD *)v221 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v3 = &dword_1EE2A3000;
            v19 = v197;
            v18 = v198;
            v21 = v186;
          }
        }
        v219.f64[0] = v28;
        v219.f64[1] = v29;
        v9 = v31;
        v10 = v30;
      }
      v14.f64[0] = v28;
      FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(v20, &v219, v18, v19, v14, v29, v21);
      v19 = v197;
      v18 = v198;
      v15 = v219.f64[1];
      v16 = v219.f64[0];
      v26 = (v198 - v219.f64[0]) * 0.5;
      v208 = v26;
      v209 = (v197 - v219.f64[1]) * 0.5;
      v27 = v209;
      v210 = v219;
      v24 = v200;
      v22 = v187;
      v25 = v190;
    }
    if (v23 == v18 && v22 == v19)
    {
      v37 = v203;
      v36 = v205;
      v38 = v26;
      goto LABEL_44;
    }
    v38 = v26;
    if (*(_DWORD *)(v1 + 640) == 1)
    {
      v37 = v203;
      v36 = v205;
      if (!*(_BYTE *)(v1 + 217))
        goto LABEL_44;
      v39 = 0;
      v40 = (double *)(v1 + 184);
    }
    else
    {
      v41 = v17 << 29;
      v39 = (v17 << 29 >> 31) & 0x5A;
      v40 = (double *)(v1 + 184);
      v201 = v24;
      v191 = v25;
      FigDisplayModes_ConvertSquarePixelSizeToNonSquarePixelSize((v41 >> 31) & 0x5A, &v215, Width, v8, v24, v25, v18, v19, *(double *)(v1 + 184));
      if (dword_1EE2A3148 < 2)
      {
        v37 = v203;
        v36 = v205;
      }
      else
      {
        v193 = v5;
        LODWORD(v217) = 0;
        v221[0] = OS_LOG_TYPE_DEFAULT;
        v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v43 = v217;
        if (os_log_type_enabled(v42, v221[0]))
          v44 = v43;
        else
          v44 = v43 & 0xFFFFFFFE;
        if (v44)
        {
          v45 = &stru_1E2FD85F8;
          if (v196)
            v45 = v196;
          v188 = v45;
          do
            v46 = __ldxr(&strGetAvailableBuffer_strIndex);
          while (__stxr(v46 + 1, &strGetAvailableBuffer_strIndex));
          v47 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v46 & 0xF);
          snprintf(v47, 0x40uLL, "{%g, %g}", Width, v8);
          v48 = v215;
          v49 = v216;
          do
            v50 = __ldxr(&strGetAvailableBuffer_strIndex);
          while (__stxr(v50 + 1, &strGetAvailableBuffer_strIndex));
          v51 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v50 & 0xF);
          snprintf(v51, 0x40uLL, "{%g, %g}", v48, v49);
          v222 = 138413058;
          v223 = v188;
          v224 = 2080;
          v225 = "fvdp_calculateOutputGeometry";
          v226 = 2080;
          *(_QWORD *)v227 = v47;
          *(_WORD *)&v227[8] = 2080;
          v228 = v51;
          _os_log_send_and_compose_impl();
          v37 = v203;
          v36 = v205;
        }
        else
        {
          v37 = v203;
          v36 = v205;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v3 = &dword_1EE2A3000;
        v5 = v193;
      }
      v24 = v201;
      v25 = v191;
    }
    v52 = v27;
    v53 = v16;
    v54 = v24;
    v55 = v25;
    FigDisplayModes_ConvertSquarePixelRectToNonSquarePixelRect(0, &v208, v38, v52, v53, v15, v24, v25, v198, v197, *v40);
    FigDisplayModes_ConvertSquarePixelRectToNonSquarePixelRect(v39, (double *)v211, v10, v9, v37, v36, v54, v55, v198, v197, *v40);
    v10 = *(double *)v211;
    v9 = v212;
    v37 = v213;
    v36 = v214;
    v38 = v208;
    v27 = v209;
    v15 = v210.f64[1];
    v16 = v210.f64[0];
LABEL_44:
    v238.size.width = v215;
    v238.size.height = v216;
    v238.origin.x = 0.0;
    v238.origin.y = 0.0;
    v206 = v215;
    v202 = v216;
    v240.origin.x = v10;
    v240.origin.y = v9;
    v240.size.width = v37;
    v240.size.height = v36;
    if (!CGRectContainsRect(v238, v240))
    {
      v56 = v5;
      LODWORD(v217) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v58 = v217;
      if (os_log_type_enabled(v57, v211[0]))
        v59 = v58;
      else
        v59 = v58 & 0xFFFFFFFE;
      if (v59)
      {
        if (v196)
          v60 = v196;
        else
          v60 = &stru_1E2FD85F8;
        do
          v61 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v61 + 1, &strGetAvailableBuffer_strIndex));
        v62 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v61 & 0xF);
        snprintf(v62, 0x40uLL, "{{%g, %g}, {%g, %g}}", v10, v9, v37, v36);
        do
          v63 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v63 + 1, &strGetAvailableBuffer_strIndex));
        v64 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v63 & 0xF);
        v36 = v202;
        v37 = v206;
        snprintf(v64, 0x40uLL, "{{%g, %g}, {%g, %g}}", 0.0, 0.0, v206, v202);
        v222 = 138413058;
        v223 = v60;
        v224 = 2080;
        v225 = "fvdp_updateGeometryForFrame";
        v226 = 2080;
        *(_QWORD *)v227 = v62;
        *(_WORD *)&v227[8] = 2080;
        v228 = v64;
        _os_log_send_and_compose_impl();
        v3 = &dword_1EE2A3000;
      }
      else
      {
        v37 = v206;
        v36 = v202;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = 0.0;
      v9 = 0.0;
      v5 = v56;
    }
    v239.origin.x = 0.0;
    v239.origin.y = 0.0;
    v239.size.height = v197;
    v239.size.width = v198;
    v241.origin.x = v38;
    v241.origin.y = v27;
    v241.size.width = v16;
    v241.size.height = v15;
    CGRectContainsRect(v239, v241);
    if (!v3[82])
    {
LABEL_89:
      if (*(_DWORD *)(v1 + 512) != 38)
      {
        *(double *)(v2 + 8) = v10;
        *(double *)(v2 + 16) = v9;
        *(double *)(v2 + 24) = v37;
        *(double *)(v2 + 32) = v36;
      }
      *(double *)(v2 + 40) = v38;
      *(double *)(v2 + 48) = v27;
      *(double *)(v2 + 56) = v16;
      *(double *)(v2 + 64) = v15;
      *(double *)(v1 + 256) = v10;
      *(double *)(v1 + 264) = v9;
      *(double *)(v1 + 272) = v37;
      *(double *)(v1 + 280) = v36;
      *(double *)(v1 + 288) = v38;
      *(double *)(v1 + 296) = v27;
      v99 = *(double *)(v1 + 240);
      *(double *)(v1 + 304) = v16;
      *(double *)(v1 + 312) = v15;
      if (v99 != v206 || *(double *)(v1 + 248) != v202)
      {
        if (*(_DWORD *)(v1 + 640) == 1)
        {
          v100 = FigSignalErrorAt();
          if (v100)
          {
            v101 = v100;
LABEL_247:
            LODWORD(v217) = 0;
            v211[0] = OS_LOG_TYPE_DEFAULT;
            v182 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v183 = v217;
            if (os_log_type_enabled(v182, v211[0]))
              v184 = v183;
            else
              v184 = v183 & 0xFFFFFFFE;
            if (!v184)
              goto LABEL_255;
            v185 = &stru_1E2FD85F8;
            v222 = 138413058;
            if (v195)
              v185 = v195;
            v223 = v185;
            v224 = 2080;
            v225 = "fvdp_consumeFrame";
            v226 = 1024;
            *(_DWORD *)v227 = 3880;
            *(_WORD *)&v227[4] = 1024;
            *(_DWORD *)&v227[6] = v101;
            goto LABEL_254;
          }
          goto LABEL_101;
        }
        fvdp_teardownCompressionSession(v1);
        *(double *)(v1 + 240) = v206;
        *(double *)(v1 + 248) = v202;
      }
      if (!*(_QWORD *)(v1 + 344))
      {
        v102 = *(const void **)(v2 + 144);
        if (v102)
        {
          CFRelease(v102);
          *(_QWORD *)(v2 + 144) = 0;
        }
      }
      v103 = fvdp_ensureEncoderAndPools(v1);
      if (v103)
      {
        v101 = v103;
        LODWORD(v217) = 0;
        v211[0] = OS_LOG_TYPE_DEFAULT;
        v172 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v173 = v217;
        if (os_log_type_enabled(v172, v211[0]))
          v174 = v173;
        else
          v174 = v173 & 0xFFFFFFFE;
        if (v174)
        {
          v175 = &stru_1E2FD85F8;
          v222 = 138413058;
          if (v196)
            v175 = v196;
          v223 = v175;
          v224 = 2080;
          v225 = "fvdp_updateGeometryForFrame";
          v226 = 1024;
          *(_DWORD *)v227 = 3497;
          *(_WORD *)&v227[4] = 1024;
          *(_DWORD *)&v227[6] = v101;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_247;
      }
LABEL_101:
      if (*(_BYTE *)(v1 + 752) || *(_BYTE *)(v1 + 753))
        *(_QWORD *)(v2 + 104) = mach_absolute_time();
      v104 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (*(_BYTE *)(v1 + 754) && *MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      if (v5 == *(_DWORD *)(v1 + 324) && !*(_BYTE *)(v1 + 660))
        goto LABEL_145;
      v105 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v106 = CVPixelBufferPoolCreatePixelBufferWithAuxAttributes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CVPixelBufferPoolRef *)(v1 + 328), *(CFDictionaryRef *)(*(_QWORD *)(v1 + 648) + 24), &pixelBufferOut);
      if (v106)
      {
        v162 = v106;
        LODWORD(v217) = 0;
        v211[0] = OS_LOG_TYPE_DEFAULT;
        v163 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v164 = v217;
        if (os_log_type_enabled(v163, v211[0]))
          v165 = v164;
        else
          v165 = v164 & 0xFFFFFFFE;
        if (!v165)
          goto LABEL_255;
        v166 = &stru_1E2FD85F8;
        v222 = 138413058;
        if (v195)
          v166 = v195;
        v223 = v166;
        v224 = 2080;
        v225 = "fvdp_consumeFrame";
        v226 = 1024;
        *(_DWORD *)v227 = 3888;
        *(_WORD *)&v227[4] = 1024;
        *(_DWORD *)&v227[6] = v162;
      }
      else
      {
        cvPixelBufferSetColorAttachments(pixelBufferOut, *(_QWORD **)(v1 + 376));
        if (!*(_QWORD *)(v1 + 336))
        {
          if (*(_BYTE *)(v1 + 384))
          {
            LODWORD(v217) = 0;
            v211[0] = OS_LOG_TYPE_DEFAULT;
            v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v108 = v217;
            if (os_log_type_enabled(v107, v211[0]))
              v109 = v108;
            else
              v109 = v108 & 0xFFFFFFFE;
            if (v109)
            {
              v110 = &stru_1E2FD85F8;
              v111 = *(unsigned __int8 *)(v1 + 660);
              if (v195)
                v110 = v195;
              v222 = 138412802;
              v223 = v110;
              v224 = 2080;
              v225 = "fvdp_consumeFrame";
              if (v111)
                v112 = "forced";
              else
                v112 = "pixel format mismatch";
              v226 = 2080;
              *(_QWORD *)v227 = v112;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          LODWORD(v217) = 0;
          v211[0] = OS_LOG_TYPE_DEFAULT;
          v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v114 = v217;
          if (os_log_type_enabled(v113, v211[0]))
            v115 = v114;
          else
            v115 = v114 & 0xFFFFFFFE;
          if (v115)
          {
            v116 = &stru_1E2FD85F8;
            if (v195)
              v116 = v195;
            v222 = 138412546;
            v223 = v116;
            v224 = 2080;
            v225 = "fvdp_consumeFrame";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v117 = VTPixelTransferSessionCreate(v105, (VTPixelTransferSessionRef *)(v1 + 336));
          v3 = &dword_1EE2A3000;
          if (v117)
          {
            v177 = v117;
            LODWORD(v217) = 0;
            v211[0] = OS_LOG_TYPE_DEFAULT;
            v178 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v179 = v217;
            if (os_log_type_enabled(v178, v211[0]))
              v180 = v179;
            else
              v180 = v179 & 0xFFFFFFFE;
            if (v180)
            {
              v181 = &stru_1E2FD85F8;
              v222 = 138413058;
              if (v195)
                v181 = v195;
              v223 = v181;
              v224 = 2080;
              v225 = "fvdp_consumeFrame";
              v226 = 1024;
              *(_DWORD *)v227 = 3899;
              *(_WORD *)&v227[4] = 1024;
              *(_DWORD *)&v227[6] = v177;
              _os_log_send_and_compose_impl();
            }
            goto LABEL_255;
          }
        }
        if (v3[82] >= 3)
        {
          LODWORD(v217) = 0;
          v211[0] = OS_LOG_TYPE_DEFAULT;
          v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v119 = v217;
          if (os_log_type_enabled(v118, v211[0]))
            v120 = v119;
          else
            v120 = v119 & 0xFFFFFFFE;
          if (v120)
          {
            v121 = &stru_1E2FD85F8;
            if (v195)
              v121 = v195;
            v222 = 138412546;
            v223 = v121;
            v224 = 2080;
            v225 = "fvdp_consumeFrame";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v122 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v1 + 336), *(CVPixelBufferRef *)v2, pixelBufferOut);
        if (!v122)
        {
          v123 = *(CVPixelBufferRef *)v2;
          v124 = pixelBufferOut;
          *(_QWORD *)v2 = pixelBufferOut;
          if (v124)
            CFRetain(v124);
          if (v123)
            CFRelease(v123);
LABEL_145:
          if (*(_BYTE *)(v1 + 752) || *(_BYTE *)(v1 + 753))
            *(_QWORD *)(v2 + 112) = mach_absolute_time();
          if (*(_BYTE *)(v1 + 754) && *v104 == 1)
            kdebug_trace();
LABEL_151:
          frameDataDestroy(*(const void ***)(v1 + 56));
          *(_QWORD *)(v1 + 56) = v2;
          if (*(_DWORD *)(v1 + 24) == 2)
          {
            v125 = *(_QWORD *)(v1 + 424);
            v126 = *(const __CFString **)(v1 + 16);
            if (*(_DWORD *)(v2 + 160))
            {
              v144 = *(const __CFString **)(v1 + 16);
              LODWORD(v217) = 0;
              v211[0] = OS_LOG_TYPE_DEFAULT;
              v145 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v146 = v217;
              if (os_log_type_enabled(v145, v211[0]))
                v147 = v146;
              else
                v147 = v146 & 0xFFFFFFFE;
              if (v147)
              {
                v148 = &stru_1E2FD85F8;
                if (v144)
                  v148 = v144;
                v222 = 138412802;
                v223 = v148;
                v224 = 2080;
                v225 = "fvdp_encodeSubmittedFrame";
                v226 = 1024;
                *(_DWORD *)v227 = 3775;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v126 = v144;
            }
            v127 = *(_QWORD *)(v2 + 152);
            if (v127 <= *(_QWORD *)(v1 + 448) + *(_QWORD *)(v1 + 432))
            {
              LODWORD(v217) = 0;
              v211[0] = OS_LOG_TYPE_DEFAULT;
              v149 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v150 = v217;
              if (os_log_type_enabled(v149, v211[0]))
                v151 = v150;
              else
                v151 = v150 & 0xFFFFFFFE;
              if (v151)
              {
                v152 = &stru_1E2FD85F8;
                if (v126)
                  v152 = v126;
                v222 = 138412802;
                v223 = v152;
                v224 = 2080;
                v225 = "fvdp_encodeSubmittedFrame";
                v226 = 1024;
                *(_DWORD *)v227 = 3778;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_180;
            }
            if (v127 > v125 - 5000000 + *(_QWORD *)(v1 + 440))
            {
              *(_QWORD *)(v1 + 432) = v127;
              v128 = *(_QWORD *)(v1 + 424);
              *(_QWORD *)(v1 + 456) = v128;
              v129 = 2 * v128;
              if (v129 <= 0x2FAF080)
                v130 = 50000000;
              else
                v130 = v129;
              v131 = dispatch_time(0, v130);
              if (!fvdp_shouldDropFrame(v1))
              {
                if (*(_BYTE *)(v1 + 384))
                {
                  if (*(_BYTE *)(v1 + 385))
                  {
                    v132 = *(CVPixelBufferRef **)(v1 + 56);
                    if (*v132)
                    {
                      v133 = *(const __CFString **)(v1 + 16);
                      IOSurface = CVPixelBufferGetIOSurface(*v132);
                      if (IOSurface)
                      {
                        v135 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBBFE0]);
                        if (v135)
                        {
                          v136 = v135;
                          CVBufferSetAttachment(*v132, (CFStringRef)*MEMORY[0x1E0CA8E08], v135, kCVAttachmentMode_ShouldPropagate);
                          CFRelease(v136);
                        }
                      }
                      else
                      {
                        LODWORD(v217) = 0;
                        v211[0] = OS_LOG_TYPE_DEFAULT;
                        v158 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        v159 = v217;
                        if (os_log_type_enabled(v158, v211[0]))
                          v160 = v159;
                        else
                          v160 = v159 & 0xFFFFFFFE;
                        if (v160)
                        {
                          v161 = &stru_1E2FD85F8;
                          if (v133)
                            v161 = v133;
                          v222 = 138412802;
                          v223 = v161;
                          v224 = 2080;
                          v225 = "fvdp_propagateHDRAttachments";
                          v226 = 1024;
                          *(_DWORD *)v227 = 3751;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                    }
                  }
                }
                if (v3[82] >= 2)
                {
                  LODWORD(v217) = 0;
                  v211[0] = OS_LOG_TYPE_DEFAULT;
                  v137 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v138 = v217;
                  if (os_log_type_enabled(v137, v211[0]))
                    v139 = v138;
                  else
                    v139 = v138 & 0xFFFFFFFE;
                  if (v139)
                  {
                    if (v126)
                      v140 = v126;
                    else
                      v140 = &stru_1E2FD85F8;
                    v141 = *(_QWORD *)(v2 + 152);
                    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                    v222 = 138413058;
                    v223 = v140;
                    v224 = 2080;
                    v225 = "fvdp_encodeSubmittedFrame";
                    v226 = 2048;
                    *(_QWORD *)v227 = v141;
                    *(_WORD *)&v227[8] = 2048;
                    v228 = (char *)(v141 - UpTimeNanoseconds);
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                ++*(_DWORD *)(v2 + 160);
                v143 = fvdp_sendFrameToEncoder(v1, 0);
                if (v143)
                {
                  v153 = v143;
                  LODWORD(v217) = 0;
                  v211[0] = OS_LOG_TYPE_DEFAULT;
                  v154 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v155 = v217;
                  if (os_log_type_enabled(v154, v211[0]))
                    v156 = v155;
                  else
                    v156 = v155 & 0xFFFFFFFE;
                  if (v156)
                  {
                    v157 = &stru_1E2FD85F8;
                    v222 = 138413058;
                    if (v126)
                      v157 = v126;
                    v223 = v157;
                    v224 = 2080;
                    v225 = "fvdp_encodeSubmittedFrame";
                    v226 = 1024;
                    *(_DWORD *)v227 = 3795;
                    *(_WORD *)&v227[4] = 1024;
                    *(_DWORD *)&v227[6] = v153;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  if (!v131)
                    goto LABEL_180;
                  goto LABEL_178;
                }
                *(_QWORD *)(v1 + 440) = *(_QWORD *)(v1 + 432);
              }
              if (v131)
              {
LABEL_178:
                if (*(int *)(v1 + 472) >= 1)
                  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 464), v131, *(_QWORD *)(v1 + 456), 0xF4240uLL);
              }
            }
          }
LABEL_180:
          v2 = 0;
          goto LABEL_181;
        }
        v167 = v122;
        LODWORD(v217) = 0;
        v211[0] = OS_LOG_TYPE_DEFAULT;
        v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v169 = v217;
        if (os_log_type_enabled(v168, v211[0]))
          v170 = v169;
        else
          v170 = v169 & 0xFFFFFFFE;
        if (!v170)
          goto LABEL_255;
        v171 = &stru_1E2FD85F8;
        v222 = 138413058;
        if (v195)
          v171 = v195;
        v223 = v171;
        v224 = 2080;
        v225 = "fvdp_consumeFrame";
        v226 = 1024;
        *(_DWORD *)v227 = 3904;
        *(_WORD *)&v227[4] = 1024;
        *(_DWORD *)&v227[6] = v167;
      }
LABEL_254:
      _os_log_send_and_compose_impl();
      goto LABEL_255;
    }
    v242.size.width = v37;
    v65 = v27;
    v66 = v38;
    v242.origin.x = v10;
    v67 = v15;
    v69 = *(double *)(v1 + 240);
    v68 = *(double *)(v1 + 248);
    v242.origin.y = v9;
    x = v242.origin.x;
    v242.size.height = v36;
    y = v242.origin.y;
    v204 = v242.size.width;
    v71 = CGRectEqualToRect(*(CGRect *)(v1 + 256), v242);
    if (v69 == v206 && v68 == v202)
    {
      if (v71)
      {
        v38 = v66;
        v243.origin.x = v66;
        v27 = v65;
        v243.origin.y = v65;
        v243.size.width = v16;
        v243.size.height = v67;
        v72 = !CGRectEqualToRect(*(CGRect *)(v1 + 288), v243);
LABEL_66:
        v73 = x;
        goto LABEL_67;
      }
    }
    else if (!v71)
    {
      v38 = v66;
      v244.origin.x = v66;
      v27 = v65;
      v244.origin.y = v65;
      v244.size.width = v16;
      v244.size.height = v67;
      v72 = CGRectEqualToRect(*(CGRect *)(v1 + 288), v244);
      goto LABEL_66;
    }
    v72 = 1;
    v73 = x;
    v38 = v66;
    v27 = v65;
LABEL_67:
    v9 = y;
    v37 = v204;
    v15 = v67;
    v10 = v73;
    if (v72 && v3[82])
    {
      v194 = v5;
      LODWORD(v217) = 0;
      v211[0] = OS_LOG_TYPE_DEFAULT;
      v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v75 = v217;
      if (os_log_type_enabled(v74, v211[0]))
        v76 = v75;
      else
        v76 = v75 & 0xFFFFFFFE;
      if (v76)
      {
        v77 = &stru_1E2FD85F8;
        if (v196)
          v77 = v196;
        v192 = v77;
        v78 = *(double *)(v1 + 256);
        v79 = *(double *)(v1 + 264);
        v80 = *(double *)(v1 + 272);
        v81 = *(double *)(v1 + 280);
        do
          v82 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v82 + 1, &strGetAvailableBuffer_strIndex));
        v189 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v82 & 0xF);
        snprintf(v189, 0x40uLL, "{{%g, %g}, {%g, %g}}", v78, v79, v80, v81);
        do
          v83 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v83 + 1, &strGetAvailableBuffer_strIndex));
        v84 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v83 & 0xF);
        snprintf(v84, 0x40uLL, "{{%g, %g}, {%g, %g}}", v10, y, v204, v36);
        v85 = *(double *)(v1 + 288);
        v86 = *(double *)(v1 + 296);
        v87 = *(double *)(v1 + 304);
        v88 = *(double *)(v1 + 312);
        do
          v89 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v89 + 1, &strGetAvailableBuffer_strIndex));
        v90 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v89 & 0xF);
        snprintf(v90, 0x40uLL, "{{%g, %g}, {%g, %g}}", v85, v86, v87, v88);
        do
          v91 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v91 + 1, &strGetAvailableBuffer_strIndex));
        v92 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v91 & 0xF);
        snprintf(v92, 0x40uLL, "{{%g, %g}, {%g, %g}}", v38, v27, v16, v15);
        v93 = *(double *)(v1 + 240);
        v94 = *(double *)(v1 + 248);
        do
          v95 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v95 + 1, &strGetAvailableBuffer_strIndex));
        v96 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v95 & 0xF);
        snprintf(v96, 0x40uLL, "{%g, %g}", v93, v94);
        do
          v97 = __ldxr(&strGetAvailableBuffer_strIndex);
        while (__stxr(v97 + 1, &strGetAvailableBuffer_strIndex));
        v98 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v97 & 0xF);
        snprintf(v98, 0x40uLL, "{%g, %g}", v206, v202);
        v222 = 138414082;
        v223 = v192;
        v224 = 2080;
        v225 = "fvdp_updateGeometryForFrame";
        v226 = 2080;
        *(_QWORD *)v227 = v189;
        *(_WORD *)&v227[8] = 2080;
        v228 = v84;
        v229 = 2080;
        v230 = v90;
        v231 = 2080;
        v232 = v92;
        v233 = 2080;
        v234 = v96;
        v235 = 2080;
        v236 = v98;
        _os_log_send_and_compose_impl();
        v3 = &dword_1EE2A3000;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v5 = v194;
    }
    goto LABEL_89;
  }
LABEL_181:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  frameDataDestroy((const void **)v2);
}

void cvPixelBufferSetColorAttachments(CVBufferRef buffer, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;

  if (buffer)
  {
    if (a2)
    {
      v4 = (const void *)a2[1];
      if (v4)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8D68], v4, kCVAttachmentMode_ShouldPropagate);
      v5 = (const void *)a2[3];
      if (v5)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E98], v5, kCVAttachmentMode_ShouldPropagate);
      v6 = (const void *)a2[2];
      if (v6)
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8EE8], v6, kCVAttachmentMode_ShouldPropagate);
    }
    if (sPixelBufferChromaLocation)
    {
      CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CE8], (CFTypeRef)sPixelBufferChromaLocation, kCVAttachmentMode_ShouldPropagate);
      CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8CE0], (CFTypeRef)sPixelBufferChromaLocation, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t fvdp_ensureEncoderAndPools(uint64_t a1)
{
  VTSessionRef *v2;
  NSObject *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  __CFDictionary *v10;
  const void **v11;
  CFMutableDictionaryRef v12;
  uint64_t v13;
  _QWORD *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  int v18;
  int v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const void **v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  const void *v40;
  NSObject *v41;
  NSObject *v42;
  const void *v43;
  CVPixelBufferPoolRef PixelBufferPool;
  uint64_t v45;
  uint64_t v46;
  NSObject *v48;
  NSObject *v49;
  const void *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  CFTypeRef cf[27];

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 344))
    return 0;
  v2 = (VTSessionRef *)(a1 + 344);
  if (*(_DWORD *)(a1 + 24) != 2)
  {
    Mutable = 0;
    v9 = 0;
    v10 = 0;
    v23 = 4294955224;
    goto LABEL_124;
  }
  if (*(_DWORD *)(a1 + 320) != 1852796517)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = CFDictionaryCreateMutable(v5, 0, v6, v7);
    v10 = CFDictionaryCreateMutable(v5, 0, v6, v7);
    FigCFDictionarySetInt32();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDD18], CFSTR("None"));
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 386))
      v11 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CED2B0], *v11);
    if (*(_DWORD *)(a1 + 320) == 1869117027)
    {
      v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetInt64();
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA8FF0], v12);
      CFRelease(v12);
    }
    v13 = VTCompressionSessionCreateWithOptions();
    if ((_DWORD)v13)
    {
      v23 = v13;
      LODWORD(cf[0]) = 0;
      v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      goto LABEL_123;
    }
    VTSessionSetProperties(*(VTSessionRef *)(a1 + 344), *(CFDictionaryRef *)(a1 + 504));
    v14 = *(_QWORD **)(a1 + 376);
    if (v14)
    {
      v15 = (const void *)v14[1];
      if (v15)
      {
        VTSessionSetProperty(*(VTSessionRef *)(a1 + 344), (CFStringRef)*MEMORY[0x1E0CECF48], v15);
        v14 = *(_QWORD **)(a1 + 376);
      }
      v16 = (const void *)v14[3];
      if (v16)
      {
        VTSessionSetProperty(*(VTSessionRef *)(a1 + 344), (CFStringRef)*MEMORY[0x1E0CED238], v16);
        v14 = *(_QWORD **)(a1 + 376);
      }
      v17 = (const void *)v14[2];
      if (v17)
        VTSessionSetProperty(*v2, (CFStringRef)*MEMORY[0x1E0CED290], v17);
    }
    v18 = *(_DWORD *)(a1 + 320);
    if (v18 > 1752589104)
    {
      if (v18 != 1752589105 && v18 != 1869117027)
      {
        v19 = 1836415073;
LABEL_25:
        if (v18 != v19)
          goto LABEL_27;
      }
    }
    else if (v18 != 1635148593 && v18 != 1718908515)
    {
      v19 = 1718908520;
      goto LABEL_25;
    }
    vtSessionSetPropertyInt32(*(const void **)(a1 + 344), (const __CFString *)*MEMORY[0x1E0CED248], *(_DWORD *)(a1 + 512));
LABEL_27:
    v20 = *(_DWORD *)(a1 + 516);
    if (v20 >= 1)
    {
      if (dword_1EE2A3148)
      {
        LODWORD(cf[0]) = 0;
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v20 = *(_DWORD *)(a1 + 516);
      }
      vtSessionSetPropertyInt32(*v2, (const __CFString *)*MEMORY[0x1E0CED0D0], v20);
    }
    v25 = *(_DWORD *)(a1 + 520);
    if (v25 >= 1)
    {
      if (dword_1EE2A3148)
      {
        LODWORD(cf[0]) = 0;
        v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v25 = *(_DWORD *)(a1 + 520);
      }
      vtSessionSetPropertyInt32(*v2, (const __CFString *)*MEMORY[0x1E0CED1B8], v25);
    }
    v27 = *(_DWORD *)(a1 + 324);
    if (v27 <= 2016567607)
    {
      if (v27 <= 1983013175)
      {
        if (v27 == 875704934)
        {
          v31 = *(_DWORD *)(a1 + 320);
          if (v31 <= 1752589104)
          {
            v32 = (const void **)MEMORY[0x1E0CED8D8];
            goto LABEL_73;
          }
LABEL_76:
          if (v31 == 1752589105 || v31 == 1869117027)
          {
LABEL_80:
            v32 = (const void **)MEMORY[0x1E0CED9A0];
            goto LABEL_96;
          }
          v39 = 1836415073;
LABEL_79:
          if (v31 != v39)
            goto LABEL_101;
          goto LABEL_80;
        }
        if (v27 != 875836518)
          goto LABEL_101;
LABEL_51:
        v31 = *(_DWORD *)(a1 + 320);
        if (v31 <= 1752589104)
        {
          v32 = (const void **)MEMORY[0x1E0CED8E0];
LABEL_73:
          if (v31 != 1635148593 && v31 != 1718908515)
          {
            v39 = 1718908520;
            goto LABEL_79;
          }
          goto LABEL_96;
        }
        goto LABEL_76;
      }
      if (v27 != 1983013176)
      {
        if (v27 != 1983144248)
        {
          v28 = 2016436536;
          goto LABEL_55;
        }
        goto LABEL_51;
      }
      v37 = *(_DWORD *)(a1 + 320);
      v32 = (const void **)MEMORY[0x1E0CED990];
      if (v37 > 1836415072)
      {
        if (v37 == 1836415073)
          goto LABEL_96;
        v38 = 1869117027;
      }
      else
      {
        if (v37 == 1718908520)
          goto LABEL_96;
        v38 = 1752589105;
      }
      if (v37 == v38)
      {
LABEL_96:
        v40 = *v32;
        if (*v32)
        {
          if (dword_1EE2A3148)
          {
            LODWORD(cf[0]) = 0;
            v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          VTSessionSetProperty(*v2, (CFStringRef)*MEMORY[0x1E0CED180], v40);
        }
        goto LABEL_101;
      }
LABEL_100:
      LODWORD(cf[0]) = 0;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_101;
    }
    if (v27 <= 2016698679)
    {
      if (v27 != 2016567608)
      {
        v28 = 2016686640;
LABEL_55:
        if (v27 == v28)
        {
          v33 = *(_DWORD *)(a1 + 320);
          if (v33 > 1836415072)
          {
            if (v33 != 1869117027)
            {
              v34 = 1836415073;
LABEL_83:
              if (v33 == v34)
                goto LABEL_84;
              goto LABEL_100;
            }
          }
          else if (v33 != 1718908520)
          {
            v34 = 1752589105;
            goto LABEL_83;
          }
LABEL_84:
          if (vtSessionSetPropertyInt32(*v2, CFSTR("OutputBitDepth"), 10))
          {
            LODWORD(cf[0]) = 0;
            v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v32 = (const void **)MEMORY[0x1E0CED988];
          goto LABEL_96;
        }
LABEL_101:
        fvdp_encoderControlApply(a1, 1);
        v43 = *(const void **)(a1 + 328);
        PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(a1 + 344));
        *(_QWORD *)(a1 + 328) = PixelBufferPool;
        if (PixelBufferPool)
          CFRetain(PixelBufferPool);
        if (v43)
          CFRelease(v43);
        goto LABEL_105;
      }
    }
    else
    {
      if (v27 == 2016698680)
        goto LABEL_46;
      if (v27 != 2019963442)
      {
        if (v27 != 2019963956)
          goto LABEL_101;
LABEL_46:
        v29 = *(_DWORD *)(a1 + 320);
        if (v29 > 1836415072)
        {
          if (v29 == 1869117027)
            goto LABEL_68;
          v30 = 1836415073;
        }
        else
        {
          if (v29 == 1718908520)
            goto LABEL_68;
          v30 = 1752589105;
        }
        if (v29 != v30)
          goto LABEL_100;
LABEL_68:
        if (vtSessionSetPropertyInt32(*v2, CFSTR("OutputBitDepth"), 10))
        {
          LODWORD(cf[0]) = 0;
          v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v32 = (const void **)MEMORY[0x1E0CED998];
        goto LABEL_96;
      }
    }
    v35 = *(_DWORD *)(a1 + 320);
    if (v35 > 1836415072)
    {
      if (v35 == 1869117027)
        goto LABEL_90;
      v36 = 1836415073;
    }
    else
    {
      if (v35 == 1718908520)
        goto LABEL_90;
      v36 = 1752589105;
    }
    if (v35 != v36)
      goto LABEL_100;
LABEL_90:
    if (vtSessionSetPropertyInt32(*v2, CFSTR("OutputBitDepth"), 10))
    {
      LODWORD(cf[0]) = 0;
      v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v32 = (const void **)MEMORY[0x1E0CED990];
    goto LABEL_96;
  }
  if (*(_QWORD *)(a1 + 328))
    return 0;
  LODWORD(cf[0]) = 0;
  v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v22 = fvdp_createPixelBufferPool(*(unsigned int *)(a1 + 324), (CVPixelBufferPoolRef *)(a1 + 328));
  v10 = 0;
  v9 = 0;
  Mutable = 0;
  if ((_DWORD)v22)
  {
    v23 = v22;
    LODWORD(cf[0]) = 0;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Mutable = 0;
    v9 = 0;
    v10 = 0;
LABEL_124:
    v50 = *(const void **)(a1 + 328);
    if (v50)
    {
      CFRelease(v50);
      *(_QWORD *)(a1 + 328) = 0;
    }
    if (*v2)
    {
      CFRelease(*v2);
      *v2 = 0;
    }
    goto LABEL_112;
  }
LABEL_105:
  if (*(_DWORD *)(a1 + 640) == 1)
  {
    v45 = *(unsigned int *)(a1 + 644);
    if ((_DWORD)v45 == *(_DWORD *)(a1 + 324))
    {
      writebackCacheInitWithPool(*(_QWORD **)(a1 + 648), *(const void **)(a1 + 328), *(_QWORD *)(a1 + 376));
      goto LABEL_111;
    }
    cf[0] = 0;
    v46 = fvdp_createPixelBufferPool(v45, (CVPixelBufferPoolRef *)cf);
    if (!(_DWORD)v46)
    {
      writebackCacheInitWithPool(*(_QWORD **)(a1 + 648), cf[0], *(_QWORD *)(a1 + 376));
      if (cf[0])
        CFRelease(cf[0]);
      goto LABEL_111;
    }
    v23 = v46;
    v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
LABEL_123:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_124;
  }
LABEL_111:
  v23 = 0;
LABEL_112:
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  return v23;
}

uint64_t fvdp_createPixelBufferPool(uint64_t a1, CVPixelBufferPoolRef *a2)
{
  const __CFAllocator *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v7 = CFDictionaryCreateMutable(v3, 0, v4, v5);
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CBC048], CFSTR("FigVirtualDisplay"));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v7);
  v8 = CFDictionaryCreateMutable(v3, 0, v4, v5);
  FigCFDictionarySetInt32();
  v9 = CVPixelBufferPoolCreate(v3, v8, Mutable, a2);
  if (!(_DWORD)v9)
  {
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v8)
LABEL_3:
    CFRelease(v8);
LABEL_4:
  if (Mutable)
    CFRelease(Mutable);
  if (v7)
    CFRelease(v7);
  return v9;
}

void fvdp_sendEncodedFrame(uint64_t a1, char *a2, int a3, char a4, CMSampleBufferRef sbuf)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int *v8;
  unsigned int v9;
  _BOOL4 v10;
  int TotalSampleSize;
  NSObject *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t i;
  const __CFAllocator **v19;
  __CFString *Mutable;
  uint64_t j;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  NSObject *v27;
  NSObject *v28;
  const __CFAllocator *v29;
  CFMutableArrayRef v30;
  uint64_t k;
  uint64_t CMBaseObject;
  void (*v33)(uint64_t, const __CFString *, CFMutableArrayRef);
  CFNumberRef v34;
  uint64_t v35;
  void (*v36)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  unsigned int (*v48)(uint64_t, CMSampleBufferRef, uint64_t, double, double, double, double, double, double, double, double, double);
  unsigned int *v49;
  unsigned int v50;
  NSObject *v51;
  double v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if ((a4 & 2) != 0)
  {
    if (*(_BYTE *)(a1 + 744))
    {
      v8 = (unsigned int *)(a1 + 704);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      if (!a2[164])
        goto LABEL_68;
      v10 = 1;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 745))
        goto LABEL_68;
      v14 = (unsigned int *)(a1 + 704);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = a2[164] != 0;
      if (!a2[164])
        goto LABEL_68;
    }
    v16 = (unsigned int *)(a1 + 712);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + v10, v16));
    goto LABEL_68;
  }
  if (a3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_67:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_68;
  }
  TotalSampleSize = CMSampleBufferGetTotalSampleSize(sbuf);
  if (dword_1EE2A3148 >= 2)
  {
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    if (*(_BYTE *)(a1 + 752) || *(_BYTE *)(a1 + 753))
      *((_QWORD *)a2 + 16) = mach_absolute_time();
    if (*(_BYTE *)(a1 + 754) && *MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    if (*(_BYTE *)(a1 + 752) || *(_BYTE *)(a1 + 753))
    {
      if (fvdp_timestampsReportForFrame_once != -1)
        dispatch_once(&fvdp_timestampsReportForFrame_once, &__block_literal_global_309);
      if (a2[164])
      {
        for (i = 0; i != 24; i += 8)
          *(_QWORD *)&a2[i + 96] = *((_QWORD *)a2 + 15);
      }
      v19 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
      if (*(_BYTE *)(a1 + 752))
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        for (j = 0; j != 40; j += 8)
        {
          v22 = FigHostTimeToNanoseconds();
          CFStringAppendFormat(Mutable, 0, CFSTR(" %6.1f"), (double)v22 / 1000000.0);
        }
        do
          v23 = __ldxr((unsigned int *)&fvdp_timestampsReportForFrame_lineCount);
        while (__stxr(v23 + 1, (unsigned int *)&fvdp_timestampsReportForFrame_lineCount));
        v24 = dword_1EE2A3148;
        HIDWORD(v25) = -286331153 * v23;
        LODWORD(v25) = -286331153 * v23;
        if ((v25 >> 2) <= 0x4444444 && dword_1EE2A3148 != 0)
        {
          v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v24 = dword_1EE2A3148;
        }
        if (v24)
        {
          v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v19 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
        if (Mutable)
          CFRelease(Mutable);
      }
      if (*(_BYTE *)(a1 + 753))
      {
        v29 = *v19;
        v30 = CFArrayCreateMutable(v29, 0, MEMORY[0x1E0C9B378]);
        for (k = 0; k != 40; k += 8)
          FigCFArrayAppendInt64();
        CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(a1 + 64));
        v33 = *(void (**)(uint64_t, const __CFString *, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
        if (v33)
          v33(CMBaseObject, CFSTR("timestamps"), v30);
        v34 = CFNumberCreate(v29, kCFNumberSInt64Type, a2 + 72);
        v35 = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(a1 + 64));
        v36 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (v36)
          v36(v35, CFSTR("submitSurfaceTimestamp"), v34);
        if (v30)
          CFRelease(v30);
        if (v34)
          CFRelease(v34);
      }
    }
    v37 = *(uint64_t **)(a1 + 672);
    if (v37)
      tapWriteSampleBuffer(v37, sbuf);
    v38 = *(_QWORD *)(a1 + 64);
    v39 = *((unsigned int *)a2 + 34);
    v40 = *((double *)a2 + 1);
    v41 = *((double *)a2 + 2);
    v42 = *((double *)a2 + 3);
    v43 = *((double *)a2 + 4);
    v44 = *((double *)a2 + 5);
    v45 = *((double *)a2 + 6);
    v47 = *((double *)a2 + 7);
    v46 = *((double *)a2 + 8);
    v48 = *(unsigned int (**)(uint64_t, CMSampleBufferRef, uint64_t, double, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v48 || v48(v38, sbuf, v39, v40, v41, v42, v43, v44, v45, v47, v46, v52))
    {
      v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      goto LABEL_67;
    }
    if (*(_BYTE *)(a1 + 744) || *(_BYTE *)(a1 + 745))
    {
      if (TotalSampleSize)
      {
        v49 = (unsigned int *)(a1 + 724);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + TotalSampleSize, v49));
      }
    }
  }
LABEL_68:
  frameDataDestroy((const void **)a2);
}

uint64_t vtSessionSetPropertyInt32(const void *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  uint64_t v6;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v6 = VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
  return v6;
}

void fvdp_encoderControlApply(uint64_t a1, int a2)
{
  CFAllocatorRef *v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  CFMutableArrayRef Mutable;
  uint64_t v14;
  const void *v15;
  const __CFString *v16;
  CFNumberRef v17;
  uint64_t valuePtr;

  v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a1 + 580) | a2)
  {
    v5 = *(_DWORD *)(a1 + 320);
    if (v5 > 1752589104)
    {
      v6 = v5 == 1752589105 || v5 == 1869117027;
      v7 = 1836415073;
    }
    else
    {
      v6 = v5 == 1635148593 || v5 == 1718908515;
      v7 = 1718908520;
    }
    v8 = v6 || v5 == v7;
    if (!v8
      || ((v9 = *(_DWORD *)(a1 + 512), v10 = v9 > 0x26, v11 = (1 << v9) & 0x6000100000, !v10)
        ? (v12 = v11 == 0)
        : (v12 = 1),
          v12))
    {
      vtSessionSetPropertyInt32(*(const void **)(a1 + 344), (const __CFString *)*MEMORY[0x1E0CECEF0], *(_DWORD *)(a1 + 584));
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (*(int *)(a1 + 576) >= 1)
      {
        v14 = 0;
        do
        {
          FigCFArrayAppendDouble();
          FigCFArrayAppendDouble();
          ++v14;
        }
        while (v14 < *(int *)(a1 + 576));
      }
      VTSessionSetProperty(*(VTSessionRef *)(a1 + 344), (CFStringRef)*MEMORY[0x1E0CECF78], Mutable);
      CFRelease(Mutable);
    }
  }
  if (*(unsigned __int8 *)(a1 + 600) | a2)
  {
    v15 = *(const void **)(a1 + 344);
    v16 = (const __CFString *)*MEMORY[0x1E0CECFD0];
    valuePtr = *(_QWORD *)(a1 + 592);
    v17 = CFNumberCreate(*v4, kCFNumberDoubleType, &valuePtr);
    VTSessionSetProperty(v15, v16, v17);
    CFRelease(v17);
  }
  *(_BYTE *)(a1 + 580) = 0;
  *(_BYTE *)(a1 + 600) = 0;
}

void tapWriteSampleBuffer(uint64_t *a1, CMSampleBufferRef sbuf)
{
  OpaqueCMBlockBuffer *DataBuffer;
  OSStatus CopyWithNoData;
  OSStatus v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CFTypeRef, _QWORD, double, double, double, double, double, double, double, double);
  OSStatus v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v22;
  CMBlockBufferRef blockBufferOut;
  int v24;
  const __CFString *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  OSStatus v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!sbuf)
    return;
  blockBufferOut = 0;
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (DataBuffer)
  {
    CopyWithNoData = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 2u, &blockBufferOut);
    if (CopyWithNoData || (CopyWithNoData = FigSampleBufferCreateCopyWithNoData()) != 0)
    {
      v6 = CopyWithNoData;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      v6 = CMSampleBufferSetDataBuffer(0, blockBufferOut);
      if (!v6)
      {
        v7 = 0;
        goto LABEL_8;
      }
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = 0;
  }
  else
  {
    v7 = CFRetain(sbuf);
    v6 = 0;
  }
LABEL_8:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (!v6)
  {
    v8 = *a1;
    v9 = *(uint64_t (**)(uint64_t, CFTypeRef, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v9)
    {
      v10 = v9(v8, v7, 0, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24), *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      if (!v10)
      {
        if (!v7)
          return;
        goto LABEL_14;
      }
      v6 = v10;
    }
    else
    {
      v6 = -12782;
    }
    LODWORD(blockBufferOut) = 0;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v12 = blockBufferOut;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if (!v13)
      goto LABEL_28;
    v24 = 138413058;
    v25 = &stru_1E2FD85F8;
    v26 = 2080;
    v27 = "tapWriteSampleBuffer";
    v28 = 1024;
    *(_DWORD *)v29 = 1579;
    *(_WORD *)&v29[4] = 1024;
    *(_DWORD *)&v29[6] = v6;
    goto LABEL_22;
  }
  LODWORD(blockBufferOut) = 0;
  v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v15 = blockBufferOut;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    v16 = v15;
  else
    v16 = v15 & 0xFFFFFFFE;
  if (v16)
  {
    v24 = 138413058;
    v25 = &stru_1E2FD85F8;
    v26 = 2080;
    v27 = "tapWriteSampleBuffer";
    v28 = 1024;
    *(_DWORD *)v29 = 1576;
    *(_WORD *)&v29[4] = 1024;
    *(_DWORD *)&v29[6] = v6;
LABEL_22:
    _os_log_send_and_compose_impl();
  }
LABEL_28:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  LODWORD(blockBufferOut) = 0;
  v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v18 = blockBufferOut;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    v19 = v18;
  else
    v19 = v18 & 0xFFFFFFFE;
  if (v19)
  {
    v20 = a1[1];
    v24 = 138413058;
    v25 = &stru_1E2FD85F8;
    v26 = 2080;
    v27 = "tapWriteSampleBuffer";
    v28 = 2112;
    *(_QWORD *)v29 = v20;
    *(_WORD *)&v29[8] = 1024;
    v30 = v6;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v7)
LABEL_14:
    CFRelease(v7);
}

void __fvdp_timestampsReportForFrame_block_invoke()
{
  uint64_t v0;

  fvdp_timestampsReportForFrame_headerStr = (uint64_t)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v0 = 2u;
  do
    CFStringAppendFormat((CFMutableStringRef)fvdp_timestampsReportForFrame_headerStr, 0, CFSTR("  %@"), kTimestampNames[v0++]);
  while (v0 != 7);
}

