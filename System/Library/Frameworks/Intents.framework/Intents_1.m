id INTypedIntentResponseWithIntentResponse(void *a1)
{
  id v1;
  NSString *v2;
  objc_class *v3;
  void *v4;
  id v5;
  void *v6;

  v1 = a1;
  objc_msgSend(v1, "_className");
  v2 = (NSString *)objc_claimAutoreleasedReturnValue();
  v3 = NSClassFromString(v2);

  v4 = v1;
  if (v3)
  {
    v4 = v1;
    if (objc_msgSend(v1, "_type") == 2)
    {
      v5 = [v3 alloc];
      objc_msgSend(v1, "backingStore");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = (void *)objc_msgSend(v5, "initWithBackingStore:", v6);

    }
  }

  return v4;
}

_QWORD *INTypedInteractionWithInteraction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char isKindOfClass;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v1 = a1;
  objc_msgSend(v1, "intent");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  v5 = v1;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = (_QWORD *)objc_msgSend(v1, "copy");

    objc_msgSend(v1, "intent");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INTypedIntentWithIntent(v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v5[1];
    v5[1] = v7;

    objc_msgSend(v1, "intentResponse");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INTypedIntentResponseWithIntentResponse(v9);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v5[2];
    v5[2] = v10;

  }
  return v5;
}

id INLocalizedStringWithLocalizer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v7)
    v7 = (id)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v7, "bundleWithIdentifier:fileURL:", v9, 0);

  objc_msgSend(v7, "preferredLocalizationsForBundle:", v10);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (!v12)
  {

LABEL_16:
    if (objc_msgSend(v6, "length", v20))
      v18 = v6;
    else
      v18 = v5;
    v14 = v18;
    goto LABEL_20;
  }
  v13 = v12;
  v14 = 0;
  v15 = *(_QWORD *)v21;
  while (2)
  {
    v16 = 0;
    v17 = v14;
    do
    {
      if (*(_QWORD *)v21 != v15)
        objc_enumerationMutation(v11);
      v14 = (void *)CFBundleCopyLocalizedStringForLocalization();

      if (v14 && (objc_msgSend(v14, "isEqualToString:", v5, v20) & 1) == 0)
      {

        goto LABEL_20;
      }
      ++v16;
      v17 = v14;
    }
    while (v13 != v16);
    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v13)
      continue;
    break;
  }

  if (!v14)
    goto LABEL_16;
LABEL_20:

  return v14;
}

id INDictionaryWithContentsOfURLs(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char isKindOfClass;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id obj;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = v1;
  v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v22)
  {
    v21 = *(_QWORD *)v30;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v30 != v21)
          objc_enumerationMutation(obj);
        v23 = v3;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v3));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        objc_msgSend(v4, "allKeys");
        v24 = (id)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)v26;
          do
          {
            for (i = 0; i != v6; ++i)
            {
              if (*(_QWORD *)v26 != v7)
                objc_enumerationMutation(v24);
              v9 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
              objc_msgSend(v4, "objectForKeyedSubscript:", v9);
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_16;
              objc_msgSend(v2, "objectForKeyedSubscript:", v9);
              v11 = objc_claimAutoreleasedReturnValue();
              if (!v11
                || (v12 = (void *)v11,
                    objc_msgSend(v2, "objectForKeyedSubscript:", v9),
                    v13 = (void *)objc_claimAutoreleasedReturnValue(),
                    objc_opt_class(),
                    isKindOfClass = objc_opt_isKindOfClass(),
                    v13,
                    v12,
                    (isKindOfClass & 1) != 0))
              {
                objc_msgSend(v2, "objectForKeyedSubscript:", v9);
                v15 = (void *)objc_claimAutoreleasedReturnValue();
                v16 = v15;
                if (v15)
                {
                  v17 = v15;
                }
                else
                {
                  v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  objc_msgSend(v2, "setObject:forKeyedSubscript:", v17, v9);
                }

                objc_msgSend(v17, "addObjectsFromArray:", v10);
              }
              else
              {
LABEL_16:
                objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v9);
              }

            }
            v6 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          }
          while (v6);
        }

        v3 = v23 + 1;
      }
      while (v23 + 1 != v22);
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v22);
  }

  v18 = (void *)objc_msgSend(v2, "copy");
  return v18;
}

id INSchemaURLsForIntentNamesWithBundle(__CFBundle *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  CFArrayRef v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  __int128 v29;
  id obj;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    INSchemaFileExtensions();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v46 != v6)
            objc_enumerationMutation(v3);
          v8 = CFBundleCopyResourceURLsOfType(a1, *(CFStringRef *)(*((_QWORD *)&v45 + 1) + 8 * i), 0);
          objc_msgSend(v2, "addObjectsFromArray:", v8);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = 0;
  }
  v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = v2;
  v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v56, 16);
  if (v32)
  {
    v31 = *(_QWORD *)v42;
    *(_QWORD *)&v10 = 136315650;
    v29 = v10;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v42 != v31)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v11);
        v13 = (void *)MEMORY[0x18D7810F0]();
        v40 = 0;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:error:", v12, &v40);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v40;
        v16 = v15;
        if (v14)
        {
          v33 = v15;
          v34 = v14;
          v35 = v13;
          objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("INIntents"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 0u;
          v37 = 0u;
          v38 = 0u;
          v39 = 0u;
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v36, v49, 16);
          if (v18)
          {
            v19 = v18;
            v20 = *(_QWORD *)v37;
            do
            {
              for (j = 0; j != v19; ++j)
              {
                if (*(_QWORD *)v37 != v20)
                  objc_enumerationMutation(v17);
                +[INIntentCodableDescription _intentClassNameWithDictionary:](INIntentCodableDescription, "_intentClassNameWithDictionary:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * j), v29);
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                if (v22)
                {
                  objc_msgSend(v12, "path");
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v9, "if_setObjectIfNonNil:forKey:", v23, v22);

                }
              }
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v36, v49, 16);
            }
            while (v19);
          }

          v14 = v34;
          v13 = v35;
          v16 = v33;
        }
        else
        {
          v24 = (void *)INSiriLogContextIntents;
          if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
            v25 = v24;
            objc_msgSend(v12, "path");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v29;
            v51 = "INSchemaURLsForIntentNamesWithBundle";
            v52 = 2114;
            v53 = v26;
            v54 = 2114;
            v55 = v16;
            _os_log_error_impl(&dword_18BEBC000, v25, OS_LOG_TYPE_ERROR, "%s Invalid intent definition plist found at %{public}@, error: %{public}@", buf, 0x20u);

          }
        }

        objc_autoreleasePoolPop(v13);
        ++v11;
      }
      while (v11 != v32);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v56, 16);
    }
    while (v32);
  }

  v27 = (void *)objc_msgSend(v9, "copy");
  return v27;
}

id INIntentDefinitionURLsForBundleProxy(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "bundleURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "bundleURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INSchemaURLsWithBundleURL(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v4;
}

id INIntentDefinitionURLsForInstalledApps()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CA5870], "enumeratorWithOptions:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v5), "if_allIntentDefinitionURLs");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "allObjects");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v0, "addObjectsFromArray:", v7);

        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }
  v8 = (void *)objc_msgSend(v0, "copy");

  return v8;
}

id INIntentDefinitionLocalizableFileURLsForBundleRecord(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "URL");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentDefinitionLocalizableFileURLsForBundleWithURL(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id INIntentDefinitionLocalizableFileURLsForBundleWithURL(void *a1)
{
  id v1;
  __CFBundle *Unique;
  __CFBundle *v3;
  void *v4;
  void *v5;
  CFArrayRef v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const __CFString *v18;
  __CFString *v19;
  CFURLRef v20;
  void *v21;
  NSObject *v22;
  CFArrayRef v24;
  id v25;
  id obj;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  id v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  Unique = (__CFBundle *)_CFBundleCreateUnique();
  if (Unique)
  {
    v3 = Unique;
    v25 = v1;
    INSchemaURLsWithCFBundle(Unique);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = CFBundleCopyBundleLocalizations(v3);
    v7 = (void *)MEMORY[0x1E0CB34D0];
    objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v6;
    objc_msgSend(v7, "preferredLocalizationsFromArray:forPreferences:", v6, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    obj = v4;
    v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
    if (v28)
    {
      v27 = *(_QWORD *)v35;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v35 != v27)
            objc_enumerationMutation(obj);
          v29 = v10;
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * v10), "lastPathComponent");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "stringByDeletingPathExtension");
          v12 = (__CFString *)objc_claimAutoreleasedReturnValue();

          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          if (_INSupportedLocalizableFileExtensions_onceToken != -1)
            dispatch_once(&_INSupportedLocalizableFileExtensions_onceToken, &__block_literal_global_286);
          v13 = (id)_INSupportedLocalizableFileExtensions_supportedLocalizableFileExtensions;
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v31;
            do
            {
              for (i = 0; i != v15; ++i)
              {
                if (*(_QWORD *)v31 != v16)
                  objc_enumerationMutation(v13);
                v18 = *(const __CFString **)(*((_QWORD *)&v30 + 1) + 8 * i);
                objc_msgSend(v9, "firstObject");
                v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
                v20 = CFBundleCopyResourceURLForLocalization(v3, v12, v18, 0, v19);

                if (v20)
                  objc_msgSend(v5, "addObject:", v20);

              }
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
            }
            while (v15);
          }

          v10 = v29 + 1;
        }
        while (v29 + 1 != v28);
        v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
      }
      while (v28);
    }

    CFRelease(v3);
    v21 = (void *)objc_msgSend(v5, "copy");

    v1 = v25;
  }
  else
  {
    v22 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "INIntentDefinitionLocalizableFileURLsForBundleWithURL";
      v40 = 2114;
      v41 = v1;
      _os_log_error_impl(&dword_18BEBC000, v22, OS_LOG_TYPE_ERROR, "%s Unable to create bundle with URL %{public}@", buf, 0x16u);
    }
    v21 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v21;
}

id INIntentDefinitionLocalizableFileURLsForBundleProxy(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "bundleURL");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentDefinitionLocalizableFileURLsForBundleWithURL(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id INIntentDefinitionLocalizableFileURLsForInstalledApps()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CA5870], "enumeratorWithOptions:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentDefinitionLocalizableFileURLsForBundleRecord(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v0, "addObjectsFromArray:", v6);

        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  v7 = (void *)objc_msgSend(v0, "copy");

  return v7;
}

id INCExtensionPlugInBundleManagerPath()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingString:", CFSTR("/System/Library/Assistant/SiriKit/Plugins/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id INVocabulariesByLocaleByAddingInvocationPhrases(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  objc_class *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v49;
  id v50;
  id obj;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[2];
  _QWORD v79[2];
  void *v80;
  void *v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _BYTE v84[128];
  _BYTE v85[128];
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v52 = a3;
  objc_msgSend(v6, "siriActionDefinitionURLs");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "count"))
  {
    v8 = (void *)MEMORY[0x1E0C99E60];
    objc_msgSend(v7, "allValues");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setWithArray:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v49 = v10;
    objc_msgSend(v10, "allObjects");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bundleIdentifier");
    v65 = v5;
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = v6;
    objc_msgSend(v6, "bundleIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[INSchema _schemaWithIntentDefinitionURLs:bundleIdentifier:mainBundleIdentifier:contentOptions:](INSchema, "_schemaWithIntentDefinitionURLs:bundleIdentifier:mainBundleIdentifier:contentOptions:", v11, v12, v13, 1);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = v65;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    objc_msgSend(v7, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v86, 16);
    if (v55)
    {
      v53 = *(_QWORD *)v75;
      do
      {
        for (i = 0; i != v55; ++i)
        {
          if (*(_QWORD *)v75 != v53)
            objc_enumerationMutation(obj);
          v60 = *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8 * i);
          objc_msgSend(v54, "intentCodableDescriptionWithIntentClassName:");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "phrases");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v61, "count"))
          {
            v56 = v15;
            v57 = i;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v58 = v52;
            v62 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v70, v85, 16);
            if (v62)
            {
              v59 = *(_QWORD *)v71;
              do
              {
                v16 = 0;
                do
                {
                  if (*(_QWORD *)v71 != v59)
                    objc_enumerationMutation(v58);
                  v64 = v16;
                  v17 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * v16);
                  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v61, "count"));
                  v66 = 0u;
                  v67 = 0u;
                  v68 = 0u;
                  v69 = 0u;
                  v19 = v61;
                  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v66, v84, 16);
                  if (v20)
                  {
                    v21 = v20;
                    v22 = *(_QWORD *)v67;
                    do
                    {
                      for (j = 0; j != v21; ++j)
                      {
                        if (*(_QWORD *)v67 != v22)
                          objc_enumerationMutation(v19);
                        v24 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * j);
                        objc_msgSend(v24, "localizedPhraseForLanguage:", v17);
                        v25 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v24, "localizedPronunciationHintForLanguage:", v17);
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        if (objc_msgSend(v25, "length"))
                        {
                          v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
                          objc_msgSend(v27, "setObject:forKeyedSubscript:", v25, CFSTR("VocabularyItemPhrase"));
                          if (objc_msgSend(v26, "length"))
                            objc_msgSend(v27, "setObject:forKeyedSubscript:", v26, CFSTR("VocabularyItemPronunciation"));
                          objc_msgSend(v18, "addObject:", v27);

                        }
                      }
                      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v66, v84, 16);
                    }
                    while (v21);
                  }

                  objc_msgSend(v65, "objectForKeyedSubscript:", v17);
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v28)
                  {
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                      v29 = v28;
                    else
                      v29 = 0;
                  }
                  else
                  {
                    v29 = 0;
                  }
                  v30 = v29;

                  v31 = (void *)objc_msgSend(v30, "mutableCopy");
                  if (v31)
                    v32 = v31;
                  else
                    v32 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
                  v33 = v32;

                  objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("ParameterVocabularies"));
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v34)
                  {
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                      v35 = v34;
                    else
                      v35 = 0;
                  }
                  else
                  {
                    v35 = 0;
                  }
                  v36 = v35;

                  v37 = (void *)objc_msgSend(v36, "mutableCopy");
                  v63 = v33;
                  if (v37)
                    v38 = v37;
                  else
                    v38 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
                  v39 = v38;

                  v82[0] = CFSTR("ParameterNames");
                  v40 = (void *)MEMORY[0x1E0CB3940];
                  v41 = (objc_class *)objc_opt_class();
                  NSStringFromClass(v41);
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v40, "stringWithFormat:", CFSTR("%@.%@"), v42, CFSTR("voiceCommand"));
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  v81 = v43;
                  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v81, 1);
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  v82[1] = CFSTR("ParameterVocabulary");
                  v83[0] = v44;
                  v78[0] = CFSTR("VocabularyItemIdentifier");
                  v78[1] = CFSTR("VocabularyItemSynonyms");
                  v79[0] = v60;
                  v79[1] = v18;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v79, v78, 2);
                  v45 = (void *)objc_claimAutoreleasedReturnValue();
                  v80 = v45;
                  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v80, 1);
                  v46 = (void *)objc_claimAutoreleasedReturnValue();
                  v83[1] = v46;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v83, v82, 2);
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v39, "addObject:", v47);

                  objc_msgSend(v63, "setObject:forKeyedSubscript:", v39, CFSTR("ParameterVocabularies"));
                  v5 = v65;
                  objc_msgSend(v65, "setObject:forKeyedSubscript:", v63, v17);

                  v16 = v64 + 1;
                }
                while (v64 + 1 != v62);
                v62 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v70, v85, 16);
              }
              while (v62);
            }

            v15 = v56;
            i = v57;
          }

        }
        v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v86, 16);
      }
      while (v55);
    }

    v6 = v50;
  }

  return v5;
}

CFTypeRef INIntentSlotValueTransformFromColor(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  const void *v10;
  CFTypeRef v11;
  _Unwind_Exception *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;

  v1 = a1;
  if (objc_msgSend(v1, "hasRed")
    && objc_msgSend(v1, "hasGreen")
    && objc_msgSend(v1, "hasBlue"))
  {
    objc_msgSend(v1, "red");
    v3 = v2;
    objc_msgSend(v1, "green");
    v5 = v4;
    objc_msgSend(v1, "blue");
    v7 = v6;
    v14 = 0;
    v15 = &v14;
    v16 = 0x2020000000;
    v8 = getCGColorCreateSRGBSymbolLoc_ptr;
    v17 = getCGColorCreateSRGBSymbolLoc_ptr;
    if (!getCGColorCreateSRGBSymbolLoc_ptr)
    {
      v9 = (void *)CoreGraphicsLibrary();
      v8 = dlsym(v9, "CGColorCreateSRGB");
      v15[3] = (uint64_t)v8;
      getCGColorCreateSRGBSymbolLoc_ptr = v8;
    }
    _Block_object_dispose(&v14, 8);
    if (!v8)
    {
      dlerror();
      v13 = (_Unwind_Exception *)abort_report_np();
      _Block_object_dispose(&v14, 8);
      _Unwind_Resume(v13);
    }
    v10 = (const void *)((uint64_t (*)(double, double, double, double))v8)(v3 / 255.0, v5 / 255.0, v7 / 255.0, 1.0);
    v11 = CFAutorelease(v10);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t CoreGraphicsLibrary()
{
  uint64_t v0;
  void *v2;

  if (CoreGraphicsLibraryCore_frameworkLibrary)
    return CoreGraphicsLibraryCore_frameworkLibrary;
  CoreGraphicsLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = CoreGraphicsLibraryCore_frameworkLibrary;
  if (!CoreGraphicsLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

_INPBColor *INIntentSlotValueTransformToColor(uint64_t a1)
{
  void *v2;
  void *v3;
  _INPBColor *v4;
  void *v5;
  void *v6;
  double *v7;
  _Unwind_Exception *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v2 = getCGColorGetNumberOfComponentsSymbolLoc_ptr;
  v13 = getCGColorGetNumberOfComponentsSymbolLoc_ptr;
  if (!getCGColorGetNumberOfComponentsSymbolLoc_ptr)
  {
    v3 = (void *)CoreGraphicsLibrary();
    v2 = dlsym(v3, "CGColorGetNumberOfComponents");
    v11[3] = (uint64_t)v2;
    getCGColorGetNumberOfComponentsSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v10, 8);
  if (!v2)
    goto LABEL_11;
  if ((unint64_t)((uint64_t (*)(uint64_t))v2)(a1) >= 3)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v5 = getCGColorGetComponentsSymbolLoc_ptr;
    v13 = getCGColorGetComponentsSymbolLoc_ptr;
    if (!getCGColorGetComponentsSymbolLoc_ptr)
    {
      v6 = (void *)CoreGraphicsLibrary();
      v5 = dlsym(v6, "CGColorGetComponents");
      v11[3] = (uint64_t)v5;
      getCGColorGetComponentsSymbolLoc_ptr = v5;
    }
    _Block_object_dispose(&v10, 8);
    if (v5)
    {
      v7 = (double *)((uint64_t (*)(uint64_t))v5)(a1);
      v4 = objc_alloc_init(_INPBColor);
      -[_INPBColor setRed:](v4, "setRed:", *v7 * 255.0);
      -[_INPBColor setGreen:](v4, "setGreen:", v7[1] * 255.0);
      -[_INPBColor setBlue:](v4, "setBlue:", v7[2] * 255.0);
      return v4;
    }
LABEL_11:
    dlerror();
    v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  v4 = 0;
  return v4;
}

id INIntentSlotValueRedactedColorFromColor(void *a1)
{
  return a1;
}

INTextNoteContent *INIntentSlotValueTransformFromNoteContent(void *a1)
{
  id v1;
  int v2;
  INTextNoteContent *v3;
  void *v4;
  void *v5;
  INTextNoteContent *v6;
  INImageNoteContent *v7;
  void *v8;

  v1 = a1;
  v2 = objc_msgSend(v1, "type");
  if (v2 == 2)
  {
    v7 = [INImageNoteContent alloc];
    objc_msgSend(v1, "image");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "image");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromImageValue(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[INImageNoteContent _initWithImage:](v7, "_initWithImage:", v8);

  }
  else
  {
    if (v2 != 1)
    {
      v6 = 0;
      goto LABEL_7;
    }
    v3 = [INTextNoteContent alloc];
    objc_msgSend(v1, "text");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "text");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[INTextNoteContent initWithText:](v3, "initWithText:", v5);
  }

LABEL_7:
  return v6;
}

_INPBNoteContent *INIntentSlotValueTransformToNoteContent(void *a1)
{
  id v1;
  _INPBNoteContent *v2;
  _INPBTextNoteContent *v3;
  void *v4;
  _INPBNoteContent *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBNoteContent);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = objc_alloc_init(_INPBTextNoteContent);
      objc_msgSend(v1, "text");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBTextNoteContent setText:](v3, "setText:", v4);

      -[_INPBNoteContent setText:](v2, "setText:", v3);
      v5 = v2;
      v6 = 1;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        -[_INPBNoteContent setType:](v2, "setType:", 0);
        goto LABEL_9;
      }
      v3 = objc_alloc_init(_INPBImageNoteContent);
      objc_msgSend(v1, "image");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToImageValue(v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBTextNoteContent setImage:](v3, "setImage:", v8);

      -[_INPBNoteContent setImage:](v2, "setImage:", v3);
      v5 = v2;
      v6 = 2;
    }
    -[_INPBNoteContent setType:](v5, "setType:", v6);

  }
  else
  {
    v2 = 0;
  }
LABEL_9:

  return v2;
}

id INIntentSlotValueTransformFromNoteContents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromNoteContent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToNoteContents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToNoteContent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

BOOL _INPBPauseWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBLocationListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBLocation);
    if (!PBReaderPlaceMark() || !_INPBLocationReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addLocation:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBRunVoiceCommandIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDictionary *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAppBundleId:", v17);
        goto LABEL_74;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_88:
        objc_msgSend(a1, "setIntentCategory:", v25, v57, v58);
        goto LABEL_75;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_92:
        objc_msgSend(a1, "setCustomResponsesDisabled:", v28 != 0);
        goto LABEL_75;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResponseTemplate:", v17);
        goto LABEL_74;
      case 5u:
        v17 = objc_alloc_init(_INPBDictionary);
        if (!PBReaderPlaceMark() || (_INPBDictionaryReadFrom(v17, a2) & 1) == 0)
          goto LABEL_111;
        PBReaderRecallMark();
        objc_msgSend(a1, "setParameters:", v17, 0, 0);
        goto LABEL_74;
      case 6u:
        PBReaderReadString();
        v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setVerb:", v17);
        goto LABEL_74;
      case 7u:
        v17 = objc_alloc_init(_INPBArchivedObject);
        if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v17, a2))
          goto LABEL_111;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnderlyingIntent:", v17, 0, 0);
        goto LABEL_74;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLocalizedAppName:", v17);
        goto LABEL_74;
      case 9u:
        v17 = objc_alloc_init(_INPBArchivedObject);
        if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v17, a2))
          goto LABEL_111;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnderlyingIntentResponse:", v17, 0, 0);
        goto LABEL_74;
      case 0xAu:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_97:
        objc_msgSend(a1, "setToggleState:", v38, v57, v58);
        goto LABEL_75;
      case 0xBu:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_101:
        objc_msgSend(a1, "setContinueRunning:", v41 != 0);
        goto LABEL_75;
      case 0xCu:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v47 = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_105:
        objc_msgSend(a1, "setInterstitialDisabled:", v47 != 0);
        goto LABEL_75;
      case 0xDu:
        PBReaderReadString();
        v17 = (_INPBDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUnderlyingIntentTitle:", v17);
        goto LABEL_74;
      case 0xEu:
        v17 = objc_alloc_init(_INPBVoiceCommandStepInfo);
        v57 = 0;
        v58 = 0;
        if (PBReaderPlaceMark() && _INPBVoiceCommandStepInfoReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addStep:", v17, 0, 0);
LABEL_74:

LABEL_75:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_111:

        return 0;
      case 0xFu:
        v51 = 0;
        v52 = 0;
        v53 = 0;
        while (2)
        {
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v14 = v52++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
LABEL_109:
        objc_msgSend(a1, "setPrefersExecutionOnCompanion:", v53 != 0);
        goto LABEL_75;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_75;
    }
  }
}

INTask *INIntentSlotValueTransformFromTask(void *a1)
{
  id v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  INTask *v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  INTask *v30;
  void *v31;
  void *v32;

  if (a1)
  {
    v1 = a1;
    v30 = [INTask alloc];
    objc_msgSend(v1, "title");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v32);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "hasStatus");
    v3 = objc_msgSend(v1, "status");
    v4 = v3 == 10;
    if (v3 == 20)
      v4 = 2;
    if (v2)
      v5 = v4;
    else
      v5 = 0;
    v6 = objc_msgSend(v1, "hasTaskType");
    v7 = objc_msgSend(v1, "taskType");
    v8 = v7 == 10;
    if (v7 == 20)
      v8 = 2;
    if (v6)
      v9 = v8;
    else
      v9 = 0;
    objc_msgSend(v1, "spatialEventTrigger");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSpatialEventTrigger(v31);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "temporalEventTrigger");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTemporalEventTrigger(v28);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "createdDateTime");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v27);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "modifiedDateTime");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v26);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v1, "hasPriority");
    v13 = objc_msgSend(v1, "priority");
    v14 = v13 == 1;
    if (v13 == 2)
      v14 = 2;
    if (v12)
      v15 = v14;
    else
      v15 = 0;
    objc_msgSend(v1, "contactEventTrigger");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContactEventTrigger(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v1, "hasTaskReference");
    if (objc_msgSend(v1, "taskReference"))
      v19 = 0;
    else
      v19 = v18;
    objc_msgSend(v1, "parentIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = -[INTask initWithTitle:status:taskType:spatialEventTrigger:temporalEventTrigger:createdDateComponents:modifiedDateComponents:identifier:priority:contactEventTrigger:taskReference:parentIdentifier:](v30, "initWithTitle:status:taskType:spatialEventTrigger:temporalEventTrigger:createdDateComponents:modifiedDateComponents:identifier:priority:contactEventTrigger:taskReference:parentIdentifier:", v29, v5, v9, v25, v24, v23, v10, v11, v15, v17, v19, v20);
  }
  else
  {
    v21 = 0;
  }
  return v21;
}

_INPBTask *INIntentSlotValueTransformToTask(void *a1)
{
  id v1;
  _INPBTask *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTask);
    objc_msgSend(v1, "title");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setTitle:](v2, "setTitle:", v4);

    v5 = objc_msgSend(v1, "status");
    if (v5 >= 3)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = (10 * v5);
    -[_INPBTask setStatus:](v2, "setStatus:", v6);
    objc_msgSend(v1, "spatialEventTrigger");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSpatialEventTrigger(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setSpatialEventTrigger:](v2, "setSpatialEventTrigger:", v8);

    objc_msgSend(v1, "temporalEventTrigger");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTemporalEventTrigger(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setTemporalEventTrigger:](v2, "setTemporalEventTrigger:", v10);

    objc_msgSend(v1, "createdDateComponents");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setCreatedDateTime:](v2, "setCreatedDateTime:", v12);

    objc_msgSend(v1, "modifiedDateComponents");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setModifiedDateTime:](v2, "setModifiedDateTime:", v14);

    objc_msgSend(v1, "identifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setIdentifier:](v2, "setIdentifier:", v15);

    v16 = objc_msgSend(v1, "taskType");
    if (v16 >= 3)
      v17 = 0x7FFFFFFFLL;
    else
      v17 = (10 * v16);
    -[_INPBTask setTaskType:](v2, "setTaskType:", v17);
    v18 = objc_msgSend(v1, "priority");
    if (v18 >= 3)
      v19 = 0x7FFFFFFFLL;
    else
      v19 = v18;
    -[_INPBTask setPriority:](v2, "setPriority:", v19);
    objc_msgSend(v1, "contactEventTrigger");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContactEventTrigger(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTask setContactEventTrigger:](v2, "setContactEventTrigger:", v21);

    if (objc_msgSend(v1, "taskReference") == 1)
      v22 = 0;
    else
      v22 = 0x7FFFFFFFLL;
    -[_INPBTask setTaskReference:](v2, "setTaskReference:", v22);
    objc_msgSend(v1, "parentIdentifier");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBTask setParentIdentifier:](v2, "setParentIdentifier:", v23);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTasks(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTask(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTasks(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTask(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTaskFromTask(void *a1)
{
  return a1;
}

id INIntentError(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, *MEMORY[0x1E0CB2938]);

  if (v5)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0CB3388]);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IntentsErrorDomain"), a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t _INPBConditionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setConditionalOperator:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromGEOLocation(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  double v5;
  CLLocationDegrees v6;
  void *v7;
  CLLocationDegrees v8;
  CLLocationCoordinate2D v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0C9E3B8];
    v2 = a1;
    v3 = [v1 alloc];
    objc_msgSend(v2, "latLng");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "lat");
    v6 = v5;
    objc_msgSend(v2, "latLng");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lng");
    v9 = CLLocationCoordinate2DMake(v6, v8);
    v10 = (double)(int)objc_msgSend(v2, "altitude");
    objc_msgSend(v2, "horizontalAccuracy");
    v12 = v11;
    objc_msgSend(v2, "verticalAccuracy");
    v14 = v13;
    objc_msgSend(v2, "course");
    v16 = v15;
    objc_msgSend(v2, "speed");
    v18 = v17;
    v19 = (void *)MEMORY[0x1E0C99D68];
    objc_msgSend(v2, "timestamp");
    v21 = v20;

    objc_msgSend(v19, "dateWithTimeIntervalSince1970:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v3, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", v22, v9.latitude, v9.longitude, v10, v12, v14, v16, v18);

  }
  else
  {
    v23 = 0;
  }
  return v23;
}

id INIntentSlotValueTransformToGEOLocation(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;
  id v7;
  double v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "coordinate");
    v3 = v2;
    v5 = v4;
    v6 = objc_alloc_init(MEMORY[0x1E0D27140]);
    objc_msgSend(v6, "setLat:", v3);
    objc_msgSend(v6, "setLng:", v5);
    v7 = objc_alloc_init(MEMORY[0x1E0D27168]);
    objc_msgSend(v7, "setLatLng:", v6);
    objc_msgSend(v1, "altitude");
    objc_msgSend(v7, "setAltitude:", (int)v8);
    objc_msgSend(v1, "horizontalAccuracy");
    objc_msgSend(v7, "setHorizontalAccuracy:");
    objc_msgSend(v1, "verticalAccuracy");
    objc_msgSend(v7, "setVerticalAccuracy:");
    objc_msgSend(v1, "course");
    objc_msgSend(v7, "setCourse:");
    objc_msgSend(v1, "speed");
    objc_msgSend(v7, "setSpeed:");
    objc_msgSend(v1, "timestamp");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "timeIntervalSince1970");
    objc_msgSend(v7, "setTimestamp:");

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

id INIntentSlotValueTransformFromGEOLocations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromGEOLocation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToGEOLocations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToGEOLocation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

uint64_t _INPBFinancialAccountValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_44;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAccountNickname:", v17, 0, 0);
        goto LABEL_44;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAccountNumber:", v17);
        goto LABEL_44;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_51:
        objc_msgSend(a1, "setAccountType:", v25);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOrganizationName:", v17, 0, 0);
        goto LABEL_44;
      case 6u:
        v17 = objc_alloc_init(_INPBBalanceAmountValue);
        if (!PBReaderPlaceMark() || (_INPBBalanceAmountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBalance:", v17, 0, 0);
        goto LABEL_44;
      case 7u:
        v17 = objc_alloc_init(_INPBBalanceAmountValue);
        if (PBReaderPlaceMark() && (_INPBBalanceAmountValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSecondaryBalance:", v17, 0, 0);
LABEL_44:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_53:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

id INIntentSlotValueTransformFromLocation(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromLocationValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromLocationValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    objc_msgSend(v2, "mapItemStorage");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
LABEL_3:
      objc_msgSend(MEMORY[0x1E0C9E3F0], "placemarkWithGEOMapItem:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
      {
        objc_msgSend(v4, "coordinate");
        if (v7 >= -180.0 && v7 <= 180.0 && v6 >= -90.0 && v6 <= 90.0)
        {
          v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E3B8]), "initWithLatitude:longitude:", v6, v7);
          v9 = objc_alloc(MEMORY[0x1E0C9E3F0]);
          objc_msgSend(v4, "addressDictionary");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "areasOfInterest");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v5 = (void *)objc_msgSend(v9, "initWithLocation:addressDictionary:region:areasOfInterest:", v8, v10, 0, v11);

        }
      }
      goto LABEL_14;
    }
    objc_msgSend(v2, "place");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlaceData:", v5);
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      if (v4)
        goto LABEL_3;
      v5 = 0;
    }
    else
    {
      v4 = 0;
    }
LABEL_14:

    goto LABEL_15;
  }
  v5 = 0;
LABEL_15:

  return v5;
}

_INPBLocation *INIntentSlotValueTransformToLocation(void *a1)
{
  void *v1;
  _INPBLocation *v2;

  INIntentSlotValueTransformToLocationValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBLocation);
    -[_INPBLocation addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBLocationValue *INIntentSlotValueTransformToLocationValue(void *a1)
{
  id v1;
  _INPBLocationValue *v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  double latitude;
  double longitude;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  CLLocationCoordinate2D v28;
  CLLocationCoordinate2D v29;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBLocationValue);
    objc_msgSend(v1, "_geoMapItem");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
    {
      v4 = objc_alloc(MEMORY[0x1E0D27168]);
      objc_msgSend(v1, "location");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "coordinate");
      v7 = v6;
      objc_msgSend(v1, "location");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "coordinate");
      v9 = (void *)objc_msgSend(v4, "initWithLatitude:longitude:", v7);

      v10 = objc_alloc(MEMORY[0x1E0D271A0]);
      objc_msgSend(v1, "postalAddress");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "dictionaryRepresentation");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v14) = 0;
      LODWORD(v27) = 0;
      v3 = (void *)objc_msgSend(v10, "initWithWithLocation:addressDictionary:name:businessURL:phoneNumber:sessionID:muid:attributionID:sampleSizeForUserRatingScore:normalizedUserRatingScore:", v9, v12, v13, 0, 0, 0, v14, 0, 0, v27);

      if (!v3)
      {
        objc_msgSend(v1, "location");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "coordinate");
        latitude = v29.latitude;
        longitude = v29.longitude;
        if (!CLLocationCoordinate2DIsValid(v29))
          goto LABEL_14;
        objc_msgSend(v1, "name");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        __INGEOPDPlaceCreateFromCoordinate(v24, latitude, longitude);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
          -[_INPBLocationValue setPlace:](v2, "setPlace:", v20);
        v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D27330]), "initWithLatitude:longitude:", latitude, longitude);
        objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForPlace:", v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
          -[_INPBLocationValue setMapItemStorage:](v2, "setMapItemStorage:", v26);

LABEL_13:
LABEL_14:

        goto LABEL_15;
      }
    }
    objc_msgSend(v3, "_placeData");
    v15 = objc_claimAutoreleasedReturnValue();
    if (!v15)
    {
      objc_msgSend(v1, "location");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "coordinate");
      v17 = v28.latitude;
      v18 = v28.longitude;
      if (!CLLocationCoordinate2DIsValid(v28))
        goto LABEL_10;
      objc_msgSend(v1, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      __INGEOPDPlaceCreateFromCoordinate(v19, v17, v18);
      v15 = objc_claimAutoreleasedReturnValue();

      if (!v15)
      {
LABEL_11:
        objc_msgSend(MEMORY[0x1E0D271E8], "mapItemStorageForGEOMapItem:clientAttributes:", v3, 0);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (v20)
          -[_INPBLocationValue setMapItemStorage:](v2, "setMapItemStorage:", v20);
        goto LABEL_13;
      }
    }
    -[_INPBLocationValue setPlace:](v2, "setPlace:", v15);
    v16 = (void *)v15;
LABEL_10:

    goto LABEL_11;
  }
  v2 = 0;
LABEL_15:

  return v2;
}

id __INGEOPDPlaceCreateFromCoordinate(void *a1, double a2, double a3)
{
  id v5;
  int v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  char v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  void *v25;
  id v26;
  id v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v26 = a1;
  v27 = objc_alloc_init(MEMORY[0x1E0D272E8]);
  v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D27140]), "initWithCoordinate:", a2, a3);
  v5 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOPDPlaceInfo")));
  v6 = objc_opt_respondsToSelector() & (v25 != 0);
  if (v6 == 1)
  {
    objc_msgSend(v5, "setCenter:");
  }
  else
  {
    v7 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315651;
      v29 = "__INGEOPDPlaceCreateFromCoordinate";
      v30 = 2113;
      v31 = v5;
      v32 = 2113;
      v33 = v25;
      _os_log_error_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_ERROR, "%s Failed to prepare place info. (placeInfo = %{private}@, latLng = %{private}@)", buf, 0x20u);
    }
  }
  v8 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOPDComponentValue")));
  if ((objc_opt_respondsToSelector() & (v5 != 0)) == 1)
  {
    objc_msgSend(v8, "setPlaceInfo:", v5);
  }
  else
  {
    v9 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315651;
      v29 = "__INGEOPDPlaceCreateFromCoordinate";
      v30 = 2113;
      v31 = v8;
      v32 = 2113;
      v33 = v5;
      _os_log_error_impl(&dword_18BEBC000, v9, OS_LOG_TYPE_ERROR, "%s Failed to prepare component value. (componentValue = %{private}@, placeInfo = %{private}@)", buf, 0x20u);
    }
    v6 = 0;
  }
  v10 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOPDComponent")));
  if ((objc_opt_respondsToSelector() & (v8 != 0)) == 1)
  {
    objc_msgSend(v10, "addValue:", v8);
  }
  else
  {
    v11 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315651;
      v29 = "__INGEOPDPlaceCreateFromCoordinate";
      v30 = 2113;
      v31 = v10;
      v32 = 2113;
      v33 = v8;
      _os_log_error_impl(&dword_18BEBC000, v11, OS_LOG_TYPE_ERROR, "%s Failed to prepare component. (component = %{private}@, componentValue = %{private}@)", buf, 0x20u);
    }
    v6 = 0;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v10, "setType:", 2);
  }
  else
  {
    v12 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315395;
      v29 = "__INGEOPDPlaceCreateFromCoordinate";
      v30 = 2113;
      v31 = v10;
      _os_log_error_impl(&dword_18BEBC000, v12, OS_LOG_TYPE_ERROR, "%s Failed to set type on component. (component = %{private}@)", buf, 0x16u);
    }
    v6 = 0;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v10, "setStatus:", v6 ^ 1u);
  if (v10)
  {
    objc_msgSend(v27, "addComponent:", v10);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  objc_msgSend(v27, "setStatus:", v13, sel_setStatus_);
  if (v26)
  {
    v14 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOLocalizedString")));
    v15 = objc_opt_respondsToSelector();
    if ((v15 & 1) != 0)
    {
      objc_msgSend(v14, "setStringValue:", v26);
    }
    else
    {
      v16 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315651;
        v29 = "__INGEOPDPlaceCreateFromCoordinate";
        v30 = 2113;
        v31 = v14;
        v32 = 2113;
        v33 = v26;
        _os_log_error_impl(&dword_18BEBC000, v16, OS_LOG_TYPE_ERROR, "%s Failed to set string value on entity name (entity name = %{private}@, name = %{private}@)", buf, 0x20u);
      }
    }
    v17 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOPDEntity")));
    if ((objc_opt_respondsToSelector() & (v14 != 0)) == 1)
    {
      objc_msgSend(v17, "addName:", v14);
    }
    else
    {
      v18 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315651;
        v29 = "__INGEOPDPlaceCreateFromCoordinate";
        v30 = 2113;
        v31 = v14;
        v32 = 2113;
        v33 = v17;
        _os_log_error_impl(&dword_18BEBC000, v18, OS_LOG_TYPE_ERROR, "%s Failed to set name on entity. (name = %{private}@, entity = %{private}@)", buf, 0x20u);
      }
      v15 = 0;
    }
    v19 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOPDComponentValue")));
    if ((objc_opt_respondsToSelector() & (v17 != 0)) == 1)
    {
      objc_msgSend(v19, "setEntity:", v17);
    }
    else
    {
      v20 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315651;
        v29 = "__INGEOPDPlaceCreateFromCoordinate";
        v30 = 2113;
        v31 = v19;
        v32 = 2113;
        v33 = v17;
        _os_log_error_impl(&dword_18BEBC000, v20, OS_LOG_TYPE_ERROR, "%s Failed to prepare component value. (componentValue = %{private}@, entity = %{private}@)", buf, 0x20u);
      }
      v15 = 0;
    }
    v21 = objc_alloc_init(NSClassFromString((NSString *)CFSTR("GEOPDComponent")));
    if ((objc_opt_respondsToSelector() & (v19 != 0)) == 1)
    {
      objc_msgSend(v21, "addValue:", v19);
    }
    else
    {
      v22 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315651;
        v29 = "__INGEOPDPlaceCreateFromCoordinate";
        v30 = 2113;
        v31 = v21;
        v32 = 2113;
        v33 = v19;
        _os_log_error_impl(&dword_18BEBC000, v22, OS_LOG_TYPE_ERROR, "%s Failed to prepare component. (component = %{private}@, componentValue = %{private}@)", buf, 0x20u);
      }
      v15 = 0;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v21, "setType:", 1);
    }
    else
    {
      v23 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315395;
        v29 = "__INGEOPDPlaceCreateFromCoordinate";
        v30 = 2113;
        v31 = v21;
        _os_log_error_impl(&dword_18BEBC000, v23, OS_LOG_TYPE_ERROR, "%s Failed to set type on component. (component = %{private}@)", buf, 0x16u);
      }
      v15 = 0;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v21, "setStatus:", (v15 & 1) == 0);
    if (v21)
      objc_msgSend(v27, "addComponent:", v21);

  }
  return v27;
}

void sub_18C0C91B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, __int128 buf)
{
  id v13;
  NSObject *v14;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    v14 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "__INGEOPDPlaceCreateFromCoordinate";
      WORD6(buf) = 2114;
      *(_QWORD *)((char *)&buf + 14) = v13;
      _os_log_error_impl(&dword_18BEBC000, v14, OS_LOG_TYPE_ERROR, "%s Caught exception: %{public}@", (uint8_t *)&buf, 0x16u);
    }

    objc_end_catch();
    JUMPOUT(0x18C0C8E78);
  }
  _Unwind_Resume(a1);
}

id INIntentSlotValueTransformFromLocations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromLocation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToLocations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToLocation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromLocationValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromLocationValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToLocationValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToLocationValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueRedactedValueFromLocationValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

_INPBLocation *INIntentSlotValueRedactedLocationFromLocation(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBLocation *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBLocation);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromLocationValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBLocation addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedLocationsFromLocations(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedLocationFromLocation(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

uint64_t _INPBSetRadioStationIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_43;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_50:
        objc_msgSend(a1, "setRadioType:", v25);
        goto LABEL_44;
      case 3u:
        v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFrequency:", v17, 0, 0);
        goto LABEL_43;
      case 4u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStationName:", v17, 0, 0);
        goto LABEL_43;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setChannel:", v17, 0, 0);
        goto LABEL_43;
      case 6u:
        v17 = objc_alloc_init(_INPBInteger);
        if (PBReaderPlaceMark() && (_INPBIntegerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPresetNumber:", v17, 0, 0);
LABEL_43:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

BOOL _INPBBuildIdReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBuildNumber:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setVersionNumber:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForNotebookItemsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBNote *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBNote);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v17, a2))
          goto LABEL_48;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addNotes:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(_INPBTaskList);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v17, a2))
          goto LABEL_48;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTaskLists:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(_INPBTask);
        v26 = 0;
        v27 = 0;
        if (PBReaderPlaceMark() && _INPBTaskReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addTasks:", v17, 0, 0);
LABEL_33:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_48:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_45:
        objc_msgSend(a1, "setSortType:", v25, v26, v27);
        goto LABEL_46;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

uint64_t _INPBDateTimeRangeValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_73;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_55;
      case 2u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_62:
        objc_msgSend(a1, "setStartCalendar:", v24);
        goto LABEL_56;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_67:
        objc_msgSend(a1, "setEndCalendar:", v31);
        goto LABEL_56;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_73;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartDateTime:", v17, 0, 0);
        goto LABEL_55;
      case 5u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_73;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndDateTime:", v17, 0, 0);
        goto LABEL_55;
      case 6u:
        v17 = objc_alloc_init(_INPBRecurrenceValue);
        if (PBReaderPlaceMark() && (_INPBRecurrenceValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRecurrence:", v17, 0, 0);
LABEL_55:

LABEL_56:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_73:

        return 0;
      case 8u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_71:
        objc_msgSend(a1, "setAllDay:", v35 != 0);
        goto LABEL_56;
      case 9u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v17);
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
    }
  }
}

BOOL _INPBGeographicalFeatureListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBGeographicalFeature);
    if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addGeographicalFeature:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INCreateEventConfirmationReasonHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCreateEventConfirmationReasonGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INCreateEventConfirmationReasonGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INCreateEventConfirmationReasonGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return *(&off_1E228FAC0 + a1 - 1);
}

uint64_t INCreateEventConfirmationReasonWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scheduleConflict")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sendInvitationToParticipants")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("dateTimeClarification")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCreateEventConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("date time clarification");
      break;
    case 2:
      v4 = CFSTR("send invitation to participants");
      break;
    case 1:
      v4 = CFSTR("schedule conflict");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

BOOL _INPBRunVoiceCommandIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceCommand:", v17, 0, 0);
        goto LABEL_34;
      case 3u:
        v17 = objc_alloc_init(_INPBVoiceCommandDeviceInformation);
        if (!PBReaderPlaceMark() || (_INPBVoiceCommandDeviceInformationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginDevice:", v17, 0, 0);
        goto LABEL_34;
      case 4u:
        v17 = objc_alloc_init(_INPBIntentExecutionResult);
        if (PBReaderPlaceMark() && (_INPBIntentExecutionResultReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setExecutionResult:", v17, 0, 0);
LABEL_34:

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPreviousIntentIdentifier:", v17);
        goto LABEL_34;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_35;
    }
  }
}

BOOL _INPBStringListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBTaskReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDataString *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_69;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_76:
        objc_msgSend(a1, "setStatus:", v25);
        goto LABEL_70;
      case 4u:
        v17 = objc_alloc_init(_INPBSpatialEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBSpatialEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpatialEventTrigger:", v17, 0, 0);
        goto LABEL_69;
      case 5u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
        goto LABEL_69;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedDateTime:", v17, 0, 0);
        goto LABEL_69;
      case 7u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setModifiedDateTime:", v17, 0, 0);
        goto LABEL_69;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v17);
        goto LABEL_69;
      case 9u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_81:
        objc_msgSend(a1, "setTaskType:", v32);
        goto LABEL_70;
      case 0xAu:
        v17 = objc_alloc_init(_INPBContactEventTrigger);
        if (PBReaderPlaceMark() && (_INPBContactEventTriggerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setContactEventTrigger:", v17, 0, 0);
LABEL_69:

LABEL_70:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_93:

        return 0;
      case 0xBu:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_86:
        objc_msgSend(a1, "setTaskReference:", v39);
        goto LABEL_70;
      case 0xCu:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_91:
        objc_msgSend(a1, "setPriority:", v46);
        goto LABEL_70;
      case 0xDu:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setParentIdentifier:", v17);
        goto LABEL_69;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_70;
    }
  }
}

BOOL _INPBRidePartySizeOptionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBPriceRangeValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBPriceRangeValue);
        if (!PBReaderPlaceMark() || !_INPBPriceRangeValueReadFrom(v18, a2))
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPriceRange:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBRangeValue);
        if (!PBReaderPlaceMark() || (_INPBRangeValueReadFrom(v18, a2) & 1) == 0)
          goto LABEL_33;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPartySizeRange:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBPriceRangeValue *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setSizeDescription:", v18);
LABEL_28:

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBWellnessValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBValueMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPbDoubleValue:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBInteger);
    if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setOrdinalValue:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INGetCarPowerLevelStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E228FAF0 + a1);
}

void sub_18C0D90D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCSSearchableItemAttributeSetClass_block_invoke_73346(uint64_t a1)
{
  Class result;
  void *v3;

  if (!CoreSpotlightLibraryCore_frameworkLibrary_73347)
  {
    CoreSpotlightLibraryCore_frameworkLibrary_73347 = _sl_dlopen();
    if (!CoreSpotlightLibraryCore_frameworkLibrary_73347)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CSSearchableItemAttributeSet");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCSSearchableItemAttributeSetClass_softClass_73345 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _INPBNoteReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(_INPBNoteContent);
        if (!PBReaderPlaceMark() || !_INPBNoteContentReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContent:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupName:", v17, 0, 0);
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedDateTime:", v17, 0, 0);
        goto LABEL_39;
      case 5u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (PBReaderPlaceMark() && (_INPBDateTimeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setModifiedDateTime:", v17, 0, 0);
LABEL_39:

LABEL_40:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      case 6u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v17);
        goto LABEL_39;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAccountIdentifier:", v17);
        goto LABEL_39;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_40;
    }
  }
}

BOOL _INPBLongListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBLong);
    if (!PBReaderPlaceMark() || !_INPBLongReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBActivityListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBActivity *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBActivity);
        if (!PBReaderPlaceMark() || !_INPBActivityReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addActivity:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBCondition);
    if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setCondition:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *INCodablePlacemarkAttributeMetadataTypeAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Name");
  if (a1 == 1)
    v1 = CFSTR("Address");
  if (a1 == 2)
    return CFSTR("City");
  else
    return v1;
}

INEventParticipant *INIntentSlotValueTransformFromEventParticipant(void *a1)
{
  id v1;
  INEventParticipant *v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  INEventParticipant *v13;

  if (a1)
  {
    v1 = a1;
    v2 = [INEventParticipant alloc];
    objc_msgSend(v1, "person");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasStatus");
    v6 = objc_msgSend(v1, "status") - 2;
    if (v6 <= 6)
      v7 = v6 + 1;
    else
      v7 = 0;
    if (v5)
      v8 = v7;
    else
      v8 = 0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "isUser"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v11 = objc_msgSend(v1, "isEventOrganizer");

    objc_msgSend(v10, "numberWithBool:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[INEventParticipant initWithPerson:status:isUser:isEventOrganizer:](v2, "initWithPerson:status:isUser:isEventOrganizer:", v4, v8, v9, v12);

  }
  else
  {
    v13 = 0;
  }
  return v13;
}

_INPBEventParticipant *INIntentSlotValueTransformToEventParticipant(void *a1)
{
  id v1;
  _INPBEventParticipant *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBEventParticipant);
    objc_msgSend(v1, "person");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBEventParticipant setPerson:](v2, "setPerson:", v4);

    v5 = objc_msgSend(v1, "status");
    if (v5 < 8)
      v6 = (v5 + 1);
    else
      v6 = 0x7FFFFFFFLL;
    -[_INPBEventParticipant setStatus:](v2, "setStatus:", v6);
    objc_msgSend(v1, "isUser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBEventParticipant setIsUser:](v2, "setIsUser:", objc_msgSend(v7, "BOOLValue"));

    objc_msgSend(v1, "isEventOrganizer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBEventParticipant setIsEventOrganizer:](v2, "setIsEventOrganizer:", objc_msgSend(v8, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromEventParticipants(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromEventParticipant(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToEventParticipants(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToEventParticipant(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedEventParticipantFromEventParticipant(void *a1)
{
  return a1;
}

BOOL _INPBTemperatureListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBTemperature);
    if (!PBReaderPlaceMark() || !_INPBTemperatureReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addTemperature:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBRequestRideIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_55;
      case 2u:
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupLocation:", v17, 0, 0);
        goto LABEL_55;
      case 3u:
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDropOffLocation:", v17, 0, 0);
        goto LABEL_55;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRideOptionName:", v17, 0, 0);
        goto LABEL_55;
      case 5u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPartySize:", v17, 0, 0);
        goto LABEL_55;
      case 6u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentMethodName:", v17, 0, 0);
        goto LABEL_55;
      case 7u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_61:
        objc_msgSend(a1, "setUsesApplePayForPayment:", v21 != 0);
        goto LABEL_56;
      case 8u:
        v17 = objc_alloc_init(_INPBPaymentMethod);
        if (!PBReaderPlaceMark() || (_INPBPaymentMethodReadFrom(v17, a2) & 1) == 0)
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentMethod:", v17, 0, 0);
        goto LABEL_55;
      case 9u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_63;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupTime:", v17, 0, 0);
        goto LABEL_55;
      case 0xAu:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setScheduledPickupTime:", v17, 0, 0);
LABEL_55:

LABEL_56:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_63:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
    }
  }
}

const __CFString *INCodablePersonAttributeMetadataTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("Contact");
  else
    return off_1E228FB38[a1 - 1];
}

__CFString *INGetCarLockStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228FB58[a1];
}

const __CFString *INCodableDateComponentsAttributeMetadataTypeAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("DateTime");
  if (a1 == 1)
    v1 = CFSTR("Date");
  if (a1 == 2)
    return CFSTR("Time");
  else
    return v1;
}

const __CFString *INCodableDateComponentsAttributeMetadataFormatAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Style");
  if (a1 == 1)
    v1 = CFSTR("Relative");
  if (a1 == 2)
    return CFSTR("Template");
  else
    return v1;
}

const __CFString *INCodableDateComponentsAttributeMetadataStyleAsString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Full");
  else
    return off_1E228FB88[a1];
}

uint64_t _INPBLongReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBLongValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBLongValue);
        if (!PBReaderPlaceMark() || !_INPBLongValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INSendPaymentIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD)
    return 0;
  else
    return off_1E228FBA8[a1];
}

uint64_t _INPBSendPaymentIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBPaymentRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBPaymentRecord);
        if (!PBReaderPlaceMark() || (_INPBPaymentRecordReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentRecord:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INLocationSearchTypeHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INLocationSearchTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 10;
  else
    v1 = 0x7FFFFFFF;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t INLocationSearchTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 10)
    return result;
  else
    return 0;
}

const __CFString *INLocationSearchTypeGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("byLocationTrigger");
  else
    return CFSTR("unknown");
}

uint64_t INLocationSearchTypeWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("byLocationTrigger"));
}

id INLocationSearchTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("by location trigger"), CFSTR("by location trigger"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL _INPBDialingContactValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBStringValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBStringValue);
        if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDialingPhoneLabel:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || (_INPBContactValueReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDialingContact:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBStringValue);
    if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setDialingPhoneNumber:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBTransferMoneyIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBFinancialAccountValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFromAccount:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setToAccount:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        v17 = objc_alloc_init(_INPBPaymentAmountValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentAmountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionAmount:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionScheduledDate:", v17, 0, 0);
        goto LABEL_37;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBFinancialAccountValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTransactionNote:", v17);
        goto LABEL_37;
      case 8u:
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (PBReaderPlaceMark() && _INPBCurrencyAmountValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTransferFee:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

uint64_t _INPBStartAudioCallIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_98;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_70;
      case 2u:
        v17 = objc_alloc_init(_INPBDialingContact);
        v54 = 0;
        v55 = 0;
        if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v17, a2))
          goto LABEL_98;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTargetContacts:", v17, 0, 0);
        goto LABEL_70;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_75:
        objc_msgSend(a1, "setAudioRoute:", v25, v54, v55);
        goto LABEL_96;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_80:
        objc_msgSend(a1, "setDestinationType:", v32, v54, v55);
        goto LABEL_96;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_85:
        objc_msgSend(a1, "setPreferredCallProvider:", v39, v54, v55);
        goto LABEL_96;
      case 6u:
        v17 = objc_alloc_init(_INPBDialingContact);
        v54 = 0;
        v55 = 0;
        if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v17, a2))
          goto LABEL_98;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContact:", v17, 0, 0);
        goto LABEL_70;
      case 7u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_90:
        objc_msgSend(a1, "setRecordTypeForRedialing:", v46, v54, v55);
        goto LABEL_96;
      case 8u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
        else
          v53 = v49;
LABEL_95:
        objc_msgSend(a1, "setTtyType:", v53, v54, v55);
        goto LABEL_96;
      case 9u:
        v17 = objc_alloc_init(_INPBStartCallRequestMetadata);
        if (PBReaderPlaceMark() && (_INPBStartCallRequestMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallRequestMetadata:", v17, 0, 0);
LABEL_70:

LABEL_96:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_98:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_96;
    }
  }
}

uint64_t _INPBWellnessObjectResultValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDateTimeRange *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecordDate:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnit:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(_INPBWellnessValue);
        v26 = 0;
        v27 = 0;
        if (PBReaderPlaceMark() && _INPBWellnessValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addValues:", v17, 0, 0);
LABEL_31:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_43:
        objc_msgSend(a1, "setResultType:", v25, v26, v27);
        goto LABEL_44;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

void sub_18C0EAE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getINUIPortableImageLoaderHelperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!IntentsUILibraryCore_frameworkLibrary_76904)
  {
    IntentsUILibraryCore_frameworkLibrary_76904 = _sl_dlopen();
    if (!IntentsUILibraryCore_frameworkLibrary_76904)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("INUIPortableImageLoaderHelper");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getINUIPortableImageLoaderHelperClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C0EBC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

__CFString *INPauseWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228FE70[a1];
}

__CFString *INRequestPaymentIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xC)
    return 0;
  else
    return off_1E228FEB0[a1];
}

BOOL INCarAirCirculationModeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INCarAirCirculationModeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INCarAirCirculationModeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INCarAirCirculationModeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("recirculateAir");
  if (a1 == 1)
    return CFSTR("freshAir");
  else
    return v1;
}

uint64_t INCarAirCirculationModeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("freshAir")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("recirculateAir")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarAirCirculationModeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("recirculate air");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("fresh air");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBDistanceListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDistance);
    if (!PBReaderPlaceMark() || !_INPBDistanceReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDistance:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBIntentSlotVocabularyValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPronunciation:", v18);
        goto LABEL_25;
      }
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addExamples:", v18);
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setPhrase:", v18);
LABEL_25:

    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDistanceValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBLocalTimeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setMillisOfSecond:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setSecondOfMinute:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setMinuteOfHour:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v45 = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      v45 = *(_BYTE *)(a2 + *v5) ? 0 : v41;
LABEL_68:
      objc_msgSend(a1, "setHourOfDay:", v45);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBAppendToNoteIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = objc_alloc_init(_INPBNoteContent);
        if (!PBReaderPlaceMark() || (_INPBNoteContentReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContent:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBNote);
    if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetNote:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForNotebookItemsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  _INPBIntentMetadata *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t result;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v18 = v10 >> 3;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0)
          goto LABEL_139;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_93;
      case 2u:
        v19 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v19, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v19, 0, 0);
        goto LABEL_93;
      case 3u:
        PBReaderReadString();
        v19 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setContent:", v19);
        goto LABEL_93;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_106:
        objc_msgSend(a1, "setItemType:", v32, v74, v75);
        goto LABEL_94;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_111:
        objc_msgSend(a1, "setStatus:", v39, v74, v75);
        goto LABEL_94;
      case 6u:
        v19 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v19, a2) & 1) == 0)
          goto LABEL_139;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v19, 0, 0);
        goto LABEL_93;
      case 7u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_116:
        objc_msgSend(a1, "setLocationSearchType:", v46, v74, v75);
        goto LABEL_94;
      case 8u:
        v19 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v19, a2) & 1) == 0)
          goto LABEL_139;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v19, 0, 0);
        goto LABEL_93;
      case 9u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
        else
          v53 = v49;
LABEL_121:
        objc_msgSend(a1, "setDateSearchType:", v53, v74, v75);
        goto LABEL_94;
      case 0xAu:
        PBReaderReadString();
        v19 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNotebookItemIdentifier:", v19);
        goto LABEL_93;
      case 0xBu:
        if (v16 == 2)
        {
          v74 = 0;
          v75 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            while (1)
            {
              v58 = *v3;
              v59 = *(_QWORD *)(a2 + v58);
              if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
                break;
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
              *(_QWORD *)(a2 + v58) = v59 + 1;
              v57 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                v14 = v56++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_82;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_82:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v68 = 0;
          v69 = 0;
          v70 = 0;
          while (1)
          {
            v71 = *v3;
            v72 = *(_QWORD *)(a2 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
              break;
            v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v72);
            *(_QWORD *)(a2 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              v14 = v69++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_136;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_136:
          PBRepeatedInt32Add();
        }
        goto LABEL_94;
      case 0xCu:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        while (2)
        {
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 1;
            v63 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              v14 = v62++ >= 9;
              if (v14)
              {
                v67 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v67 = 0;
        else
          v67 = v63;
LABEL_126:
        objc_msgSend(a1, "setTaskPriority:", v67, v74, v75);
        goto LABEL_94;
      default:
        if ((_DWORD)v18 != 50)
        {
          if ((_DWORD)v18 == 51)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if ((v25 & 0x80) == 0)
                goto LABEL_99;
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_101;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_99:
            if (*(_BYTE *)(a2 + *v5))
              v22 = 0;
LABEL_101:
            objc_msgSend(a1, "setIncludeAllNoteContents:", v22 != 0, v74, v75);
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            return 0;
          }
LABEL_94:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setGroupName:", v19, 0, 0);
LABEL_93:

          goto LABEL_94;
        }
LABEL_139:

        return 0;
    }
  }
}

const __CFString *INCodableAttributeMetadataInputTypeAsString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Field");
  if (a1 == 1)
    v1 = CFSTR("Stepper");
  if (a1 == 2)
    return CFSTR("Slider");
  else
    return v1;
}

uint64_t _INPBSearchForBillsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_47;
      case 2u:
        v17 = objc_alloc_init(_INPBBillPayeeValue);
        if (!PBReaderPlaceMark() || !_INPBBillPayeeValueReadFrom(v17, a2))
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBillPayee:", v17, 0, 0);
        goto LABEL_47;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentDateRange:", v17, 0, 0);
        goto LABEL_47;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_52:
        objc_msgSend(a1, "setBillType:", v25);
        goto LABEL_58;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_57:
        objc_msgSend(a1, "setStatus:", v32);
        goto LABEL_58;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDueDateRange:", v17, 0, 0);
LABEL_47:

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_60:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

__CFString *INSaveProfileInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E22902D0[a1];
}

id INIntentSlotValueTransformFromDataString(void *a1)
{
  id v1;
  void *v2;
  INSpeakableString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v13;

  v1 = a1;
  objc_msgSend(v1, "vocabularyIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    objc_msgSend(v1, "localizedValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v13)
    {
      v13 = 0;
      v11 = 0;
LABEL_6:

      goto LABEL_7;
    }
  }
  v3 = [INSpeakableString alloc];
  objc_msgSend(v1, "vocabularyIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localizedValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_intents_decodeFromProto");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "pronunciationHint");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_intents_decodeFromProto");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "alternatives");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformFromDataStrings();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[INSpeakableString _initWithVocabularyIdentifier:spokenPhrase:pronunciationHint:alternativeMatches:](v3, "_initWithVocabularyIdentifier:spokenPhrase:pronunciationHint:alternativeMatches:", v4, v6, v8, v10);

  if (!v2)
    goto LABEL_6;
LABEL_7:

  return v11;
}

_INPBDataString *INIntentSlotValueTransformToDataString(void *a1)
{
  id v1;
  _INPBDataString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBDataString);
    objc_msgSend(v1, "vocabularyIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDataString setVocabularyIdentifier:](v2, "setVocabularyIdentifier:", v3);

    objc_msgSend(v1, "spokenPhrase");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_intents_encodeForProto");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDataString setLocalizedValue:](v2, "setLocalizedValue:", v5);

    objc_msgSend(v1, "pronunciationHint");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "_intents_encodeForProto");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDataString setPronunciationHint:](v2, "setPronunciationHint:", v7);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromDataStringList(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "dataStrings");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformFromDataStrings(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

_INPBDataStringList *INIntentSlotValueTransformToDataStringList(void *a1)
{
  void *v1;
  _INPBDataStringList *v2;
  void *v3;

  INIntentSlotValueTransformToDataStrings(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_alloc_init(_INPBDataStringList);
  v3 = (void *)objc_msgSend(v1, "copy");
  -[_INPBDataStringList setDataStrings:](v2, "setDataStrings:", v3);

  return v2;
}

BOOL _INPBPayBillIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBFinancialAccountValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFromAccount:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(_INPBBillDetailsValue);
        if (!PBReaderPlaceMark() || (_INPBBillDetailsValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBillDetails:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(_INPBPaymentAmountValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentAmountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionAmount:", v17, 0, 0);
        goto LABEL_36;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionScheduledDate:", v17, 0, 0);
        goto LABEL_36;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTransactionNote:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

BOOL INOvulationValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INOvulationValueTypeGetBackingType(unint64_t result)
{
  if (result >= 4)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INOvulationValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INOvulationValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2290300[a1 - 1];
}

uint64_t INOvulationValueTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("negative")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("positive")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("indeterminate")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INOvulationValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("indeterminate");
      break;
    case 2:
      v4 = CFSTR("positive");
      break;
    case 1:
      v4 = CFSTR("negative");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

BOOL _INPBLocationValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBValueMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = (_INPBValueMetadata *)objc_alloc_init(MEMORY[0x1E0D271E8]);
        if (!PBReaderPlaceMark() || (GEOMapItemStorageReadAllFrom() & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMapItemStorage:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = (_INPBValueMetadata *)objc_alloc_init(MEMORY[0x1E0D272E8]);
    if (!PBReaderPlaceMark() || (GEOPDPlaceReadAllFrom() & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setPlace:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INHomeAction *INIntentSlotValueTransformFromHomeAction(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  INHomeAction *v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "hasAttributeType");
    v4 = objc_msgSend(v2, "attributeType");
    if (((v4 < 0x42) & v3) != 0)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (objc_msgSend(v2, "hasAttributeValue"))
    {
      objc_msgSend(v2, "attributeValue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasValueType");
      v8 = objc_msgSend(v6, "valueType");
      if (((v8 < 6) & v7) != 0)
        v9 = v8 + 1;
      else
        v9 = 0;
      if (objc_msgSend(v6, "hasBooleanValue"))
        v10 = objc_msgSend(v6, "BOOLeanValue");
      else
        v10 = 0;
      v14 = 0.0;
      if (objc_msgSend(v6, "hasDoubleValue"))
      {
        objc_msgSend(v6, "doubleValue");
        v14 = v15;
      }
      if (objc_msgSend(v6, "hasIntegerValue"))
        v12 = objc_msgSend(v6, "integerValue");
      else
        v12 = 0;
      if (objc_msgSend(v6, "hasStringValue"))
      {
        objc_msgSend(v6, "stringValue");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v13 = 0;
      }

    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0.0;
    }
    v11 = -[INHomeAction initWithType:valueType:BOOLValue:doubleValue:integerValue:stringValue:]([INHomeAction alloc], "initWithType:valueType:BOOLValue:doubleValue:integerValue:stringValue:", v5, v9, v10, v12, v13, v14);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

_INPBHomeAttribute *INIntentSlotValueTransformToHomeAction(void *a1)
{
  id v1;
  _INPBHomeAttribute *v2;
  unint64_t v3;
  uint64_t v4;
  _INPBHomeAttributeValue *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBHomeAttribute);
    if (INHomeAttributeTypeHasBackingType(objc_msgSend(v1, "type")))
    {
      v3 = objc_msgSend(v1, "type") - 1;
      if (v3 >= 0x42)
        v4 = 0x7FFFFFFFLL;
      else
        v4 = v3;
      -[_INPBHomeAttribute setAttributeType:](v2, "setAttributeType:", v4);
    }
    v5 = objc_alloc_init(_INPBHomeAttributeValue);
    v6 = objc_msgSend(v1, "valueType");
    if (v6 <= 6 && ((0x7Eu >> v6) & 1) != 0)
    {
      v7 = objc_msgSend(v1, "valueType") - 1;
      if (v7 >= 6)
        v8 = 0x7FFFFFFFLL;
      else
        v8 = v7;
      -[_INPBHomeAttributeValue setValueType:](v5, "setValueType:", v8);
    }
    switch(objc_msgSend(v1, "valueType"))
    {
      case 1:
        -[_INPBHomeAttributeValue setBooleanValue:](v5, "setBooleanValue:", objc_msgSend(v1, "BOOLValue"));
        break;
      case 2:
        objc_msgSend(v1, "doubleValue");
        -[_INPBHomeAttributeValue setDoubleValue:](v5, "setDoubleValue:");
        break;
      case 3:
        objc_msgSend(v1, "stringValue");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBHomeAttributeValue setStringValue:](v5, "setStringValue:", v9);

        break;
      case 4:
        -[_INPBHomeAttributeValue setIntegerValue:](v5, "setIntegerValue:", objc_msgSend(v1, "integerValue"));
        break;
      default:
        break;
    }
    -[_INPBHomeAttribute setAttributeValue:](v2, "setAttributeValue:", v5);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeActions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeAction(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeActions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeAction(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t _INPBIntentSlotResolutionResultReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBPayloadSuccess *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_50;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_53:
        objc_msgSend(a1, "setType:", v23);
        goto LABEL_47;
      case 2u:
        v24 = objc_alloc_init(_INPBPayloadSuccess);
        if (!PBReaderPlaceMark() || !_INPBPayloadSuccessReadFrom(v24, a2))
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadSuccess:", v24, 0, 0);
        goto LABEL_46;
      case 3u:
        v24 = objc_alloc_init(_INPBPayloadUnsupported);
        if (!PBReaderPlaceMark() || (_INPBPayloadUnsupportedReadFrom(v24, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadUnsupported:", v24, 0, 0);
        goto LABEL_46;
      case 4u:
        v24 = objc_alloc_init(_INPBPayloadNeedsValue);
        if (!PBReaderPlaceMark() || (_INPBPayloadNeedsValueReadFrom(v24, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadNeedsValue:", v24, 0, 0);
        goto LABEL_46;
      case 5u:
        v24 = objc_alloc_init(_INPBPayloadNeedsDisambiguation);
        if (!PBReaderPlaceMark() || (_INPBPayloadNeedsDisambiguationReadFrom(v24, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadNeedsDisambiguation:", v24, 0, 0);
        goto LABEL_46;
      case 7u:
        v24 = objc_alloc_init(_INPBPayloadConfirmation);
        if (!PBReaderPlaceMark() || (_INPBPayloadConfirmationReadFrom(v24, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadConfirmation:", v24, 0, 0);
        goto LABEL_46;
      case 8u:
        v24 = objc_alloc_init(_INPBPayloadNeedsExecuteIntent);
        if (PBReaderPlaceMark() && (_INPBPayloadNeedsExecuteIntentReadFrom(v24, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPayloadNeedsExecuteIntent:", v24, 0, 0);
LABEL_46:

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

BOOL _INPBConfigureHomeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBPauseWorkoutIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBStartWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_79;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
        goto LABEL_79;
      case 3u:
        v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0)
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGoalValue:", v17, 0, 0);
        goto LABEL_79;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_86:
        objc_msgSend(a1, "setWorkoutGoalUnitType:", v25, v58, v59);
        goto LABEL_80;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_91:
        objc_msgSend(a1, "setWorkoutLocationType:", v32, v58, v59);
        goto LABEL_80;
      case 6u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_95:
        objc_msgSend(a1, "setIsOpenEnded:", v35 != 0);
        goto LABEL_80;
      case 7u:
        v17 = objc_alloc_init(_INPBWorkoutAssociatedItem);
        v58 = 0;
        v59 = 0;
        if (!PBReaderPlaceMark() || !_INPBWorkoutAssociatedItemReadFrom(v17, a2))
          goto LABEL_110;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAssociatedItems:", v17, 0, 0);
        goto LABEL_79;
      case 8u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_99:
        objc_msgSend(a1, "setIsBuiltInWorkoutType:", v41 != 0);
        goto LABEL_80;
      case 9u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v47 = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_103:
        objc_msgSend(a1, "setIsVoiceOnly:", v47 != 0);
        goto LABEL_80;
      case 0xAu:
        v51 = 0;
        v52 = 0;
        v53 = 0;
        while (2)
        {
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v14 = v52++ >= 9;
              if (v14)
              {
                v57 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v57 = 0;
        else
          v57 = v53;
LABEL_108:
        objc_msgSend(a1, "setSequenceLabel:", v57, v58, v59);
        goto LABEL_80;
      case 0xBu:
        v17 = objc_alloc_init(_INPBWorkoutCustomization);
        if (PBReaderPlaceMark() && _INPBWorkoutCustomizationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCustomization:", v17, 0, 0);
LABEL_79:

LABEL_80:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_110:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_80;
    }
  }
}

uint64_t _INPBImageValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _INPBValueMetadata *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = objc_alloc_init(_INPBValueMetadata);
          if (PBReaderPlaceMark() && (_INPBValueMetadataReadFrom(v19, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setValueMetadata:", v19, 0, 0);
            goto LABEL_33;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v19 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setUri:", v19);
          goto LABEL_33;
        case 3u:
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v23 = 0.0;
          }
          objc_msgSend(a1, "setWidth:", v23);
          continue;
        case 4u:
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v26 = *(double *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v26 = 0.0;
          }
          objc_msgSend(a1, "setHeight:", v26);
          continue;
        case 5u:
          PBReaderReadData();
          v19 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setData:", v19);
          goto LABEL_33;
        case 6u:
          PBReaderReadString();
          v19 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setProxyServiceIdentifier:", v19);
LABEL_33:

          continue;
        case 7u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (2)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
              *(_QWORD *)(a2 + v30) = v32;
              v29 |= (unint64_t)(v33 & 0x7F) << v27;
              if (v33 < 0)
              {
                v27 += 7;
                v15 = v28++ >= 9;
                if (v15)
                {
                  v34 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v34 = 0;
          else
            v34 = v29;
LABEL_52:
          objc_msgSend(a1, "setType:", v34);
          continue;
        case 8u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
        *(_QWORD *)(a2 + v38) = v40;
        v37 |= (unint64_t)(v41 & 0x7F) << v35;
        if ((v41 & 0x80) == 0)
          goto LABEL_54;
        v35 += 7;
        v15 = v36++ >= 9;
        if (v15)
        {
          v42 = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      v42 = *(_BYTE *)(a2 + *v5) ? 0 : v37;
LABEL_57:
      objc_msgSend(a1, "setRenderingMode:", v42);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBUserActivityReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTitle:", v18);
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadData();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setData:", v18);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setUri:", v18);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBRequestPaymentIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBPaymentRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBPaymentRecord);
        if (!PBReaderPlaceMark() || (_INPBPaymentRecordReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentRecord:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INTaskList *INIntentSlotValueTransformFromTaskList(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  INTaskList *v11;
  INTaskList *v13;
  void *v14;
  void *v15;

  if (a1)
  {
    v1 = a1;
    v13 = [INTaskList alloc];
    objc_msgSend(v1, "title");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v15);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "tasks");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTasks(v14);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "groupName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "createdDateTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "modifiedDateTime");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = -[INTaskList initWithTitle:tasks:groupName:createdDateComponents:modifiedDateComponents:identifier:](v13, "initWithTitle:tasks:groupName:createdDateComponents:modifiedDateComponents:identifier:", v2, v3, v5, v7, v9, v10);
  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBTaskList *INIntentSlotValueTransformToTaskList(void *a1)
{
  id v1;
  _INPBTaskList *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTaskList);
    objc_msgSend(v1, "title");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTaskList setTitle:](v2, "setTitle:", v4);

    objc_msgSend(v1, "tasks");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTasks(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTaskList setTasks:](v2, "setTasks:", v6);

    objc_msgSend(v1, "groupName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTaskList setGroupName:](v2, "setGroupName:", v8);

    objc_msgSend(v1, "createdDateComponents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTaskList setCreatedDateTime:](v2, "setCreatedDateTime:", v10);

    objc_msgSend(v1, "modifiedDateComponents");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTaskList setModifiedDateTime:](v2, "setModifiedDateTime:", v12);

    objc_msgSend(v1, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBTaskList setIdentifier:](v2, "setIdentifier:", v13);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTaskLists(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTaskList(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTaskLists(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTaskList(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTaskListFromTaskList(void *a1)
{
  return a1;
}

BOOL _INPBDoubleListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDouble);
    if (!PBReaderPlaceMark() || !_INPBDoubleReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBActivateCarSignalIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t result;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v3;
        v11 = *(_QWORD *)(a2 + v10);
        if (v11 == -1 || v11 >= *(_QWORD *)(a2 + *v4))
          break;
        v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v11);
        *(_QWORD *)(a2 + v10) = v11 + 1;
        v9 |= (unint64_t)(v12 & 0x7F) << v7;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v13 = v8++ >= 9;
        if (v13)
        {
          v9 = 0;
          v14 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v14 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v9 = 0;
LABEL_14:
      v15 = v9 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v9 >> 3) == 1)
      {
        if (v15 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if (v23 < 0)
              {
                v18 += 7;
                v13 = v19++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_31;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v13 = v25++ >= 9;
              if (!v13)
                continue;
            }
            goto LABEL_43;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          PBRepeatedInt32Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C10F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__83114(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__83115(uint64_t a1)
{

}

void sub_18C111514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C111690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _INPBSetMessageAttributeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_40:
            objc_msgSend(a1, "setAttribute:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        if (v25)
          objc_msgSend(a1, "addIdentifier:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBAddTasksIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  _INPBTask *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v18 == 3)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
                break;
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_41;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_53;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          PBRepeatedInt32Add();
        }
        goto LABEL_54;
      }
      if ((_DWORD)v18 == 2)
      {
        v19 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v19, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        if (v19)
          objc_msgSend(a1, "addAddedTasks:", v19, 0, 0);
LABEL_28:

        goto LABEL_54;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_54:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = objc_alloc_init(_INPBTaskList);
    if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v19, a2))
    {
LABEL_57:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setModifiedTaskList:", v19, 0, 0);
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBPayloadSuccessReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentSlotValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (_INPBIntentSlotValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResolvedKeyPath:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentSlotValue);
    if (!PBReaderPlaceMark() || (_INPBIntentSlotValueReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setResolvedValue:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEventDescriptors:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEventType:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _INProtocolFromType(uint64_t a1, objc_class *a2)
{
  size_t v4;
  char *v5;
  size_t v6;
  void *v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v4 = strlen((const char *)a1);
  if (*(_BYTE *)a1 == 64
    && *(_BYTE *)(a1 + 1) == 34
    && *(_BYTE *)(v4 + a1 - 1) == 34
    && *(_BYTE *)(a1 + 2) == 60
    && *(_BYTE *)(v4 + a1 - 2) == 62)
  {
    v5 = (char *)v9 - ((MEMORY[0x1E0C80A78]() + 11) & 0xFFFFFFFFFFFFFFF0);
    strlcpy(v5, (const char *)(a1 + 3), v6);
    _INLookupNameInModule(v5, a2, &__block_literal_global_10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

double _INGetDoubleProperty(void *a1, const char *a2)
{
  void *v2;
  void *v3;
  double v4;
  double v5;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "doubleValue");
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }

  return v5;
}

float _INGetFloatProperty(void *a1, const char *a2)
{
  void *v2;
  void *v3;
  float v4;
  float v5;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "floatValue");
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }

  return v5;
}

uint64_t _INGetBoolProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

uint64_t _INGetUnsignedLongLongProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedLongLongValue");

  return v3;
}

uint64_t _INGetLongLongProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "longLongValue");

  return v3;
}

uint64_t _INGetUnsignedLongProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedLongValue");

  return v3;
}

uint64_t _INGetLongProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "longValue");

  return v3;
}

uint64_t _INGetUnsignedIntProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedIntValue");

  return v3;
}

id _INGetIdProperty(void *a1, const char *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a1;
  objc_msgSend(v3, "stringWithUTF8String:", sel_getName(a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "valueForProperty:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t _INGetIntProperty(void *a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  _INGetIdProperty(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "intValue");

  return v3;
}

void _INSetDoubleProperty(void *a1, const char *a2, double a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithDouble:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetFloatProperty(void *a1, const char *a2, float a3)
{
  void *v5;
  id v6;
  double v7;
  id v8;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  *(float *)&v7 = a3;
  objc_msgSend(v5, "numberWithFloat:", v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v8);

}

void _INSetBoolProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithBool:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetUnsignedLongLongProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithUnsignedLongLong:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetLongLongProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithLongLong:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetUnsignedLongProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithUnsignedLong:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetLongProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithLong:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetUnsignedIntProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithUnsignedInt:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

void _INSetIntProperty(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a1;
  objc_msgSend(v5, "numberWithInt:", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  _INSetIdProperty(v6, a2, v7);

}

BOOL INSortTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INSortTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 0;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 1;
  else
    return v1;
}

uint64_t INSortTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 1);
  if (!a2)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INSortTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("byDate");
  if (a1 == 1)
    return CFSTR("asIs");
  else
    return v1;
}

uint64_t INSortTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("asIs")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("byDate")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSortTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("by date");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("as is");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBIntentTypeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setType:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBContactRelationshipReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setRelation:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBPropertyReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentSlotValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBIntentSlotValue);
        if (!PBReaderPlaceMark() || (_INPBIntentSlotValueReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (_INPBIntentSlotValue *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setRole:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBNoteContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBImageNoteContent *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = objc_alloc_init(_INPBImageNoteContent);
        if (!PBReaderPlaceMark() || (_INPBImageNoteContentReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setImage:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBTextNoteContent);
        if (!PBReaderPlaceMark() || (_INPBTextNoteContentReadFrom(v25, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setText:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSaveProfileInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBSetProfileInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBEmptyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBSearchForBillsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBBillDetailsValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBBillDetailsValue);
        if (!PBReaderPlaceMark() || !_INPBBillDetailsValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addBills:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INCancelWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E2290960[a1];
}

uint64_t _INPBPauseTimerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTimer *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPausedTimers:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCallRecordValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDateTime *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v17);
        goto LABEL_75;
      case 2u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateCreated:", v17, 0, 0);
        goto LABEL_75;
      case 3u:
        v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || (_INPBContactValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCaller:", v17, 0, 0);
        goto LABEL_75;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_82:
        objc_msgSend(a1, "setCallType:", v25, v52, v53);
        goto LABEL_76;
      case 5u:
        v17 = objc_alloc_init(_INPBCallMetrics);
        if (!PBReaderPlaceMark() || (_INPBCallMetricsReadFrom(v17, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallMetrics:", v17, 0, 0);
        goto LABEL_75;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_86:
        objc_msgSend(a1, "setUnseen:", v28 != 0);
        goto LABEL_76;
      case 7u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_91:
        objc_msgSend(a1, "setCallCapability:", v38, v52, v53);
        goto LABEL_76;
      case 8u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumberOfCalls:", v17, 0, 0);
        goto LABEL_75;
      case 9u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
        else
          v45 = v41;
LABEL_96:
        objc_msgSend(a1, "setPreferredCallProvider:", v45, v52, v53);
        goto LABEL_76;
      case 0xAu:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProviderId:", v17);
        goto LABEL_75;
      case 0xBu:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProviderBundleId:", v17);
        goto LABEL_75;
      case 0xCu:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v48 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_100:
        objc_msgSend(a1, "setIsCallerIdBlocked:", v48 != 0);
        goto LABEL_76;
      case 0xDu:
        v17 = objc_alloc_init(_INPBContactValue);
        v52 = 0;
        v53 = 0;
        if (PBReaderPlaceMark() && _INPBContactValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addParticipants:", v17, 0, 0);
LABEL_75:

LABEL_76:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_102:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_76;
    }
  }
}

BOOL _INPBSearchForTimersIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBTimer *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v18, a2))
        {
LABEL_38:

          return 0;
        }
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addTimers:", v18, 0, 0);
        goto LABEL_33;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v18, a2))
          goto LABEL_38;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addMatchedTimers:", v18, 0, 0);
LABEL_33:

        goto LABEL_35;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_35:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBTimer);
    if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v18, a2))
      goto LABEL_38;
    PBReaderRecallMark();
    if (v18)
      objc_msgSend(a1, "addUnmatchedTimers:", v18, 0, 0);
    goto LABEL_33;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INNoteContentTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INNoteContentTypeGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INNoteContentTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INNoteContentTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("image");
  if (a1 == 1)
    return CFSTR("text");
  else
    return v1;
}

uint64_t INNoteContentTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("text")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("image")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INNoteContentTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("image");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("text");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBIntentSlotValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _INPBHomeEntity *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  char v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char v265;
  char v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char v272;
  char v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  char v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char v310;
  uint64_t v311;
  char v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  double v321;
  char v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  char v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char v335;
  char v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  char v342;
  char v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char v349;
  char v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  char v356;
  char v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char v362;
  char v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  char v369;
  char v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  char v375;
  char v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  char v382;
  char v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  char v389;
  char v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  char v395;
  char v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char v402;
  char v403;
  unsigned int v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char v408;
  char v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  char v415;
  char v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char v422;
  char v423;
  unsigned int v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  char v428;
  char v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  char v434;
  char v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char v440;
  char v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  char v447;
  char v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char v454;
  char v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  char v460;
  char v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  char v466;
  char v467;
  unsigned int v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  char v472;
  char v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  char v478;
  char v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  char v484;
  char v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  char v490;
  char v491;
  unsigned int v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  char v496;
  char v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  char v502;
  char v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  char v509;
  char v510;
  unsigned int v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char v515;
  char v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  char v522;
  char v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  char v528;
  char v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  char v534;
  char v535;
  unsigned int v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  char v540;
  char v541;
  unsigned int v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  char v546;
  char v547;
  unsigned int v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  char v552;
  char v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  char v558;
  char v559;
  unsigned int v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  char v564;
  char v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  char v570;
  char v571;
  unsigned int v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  char v576;
  char v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  char v583;
  char v584;
  unsigned int v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  char v589;
  char v590;
  unsigned int v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  char v595;
  char v596;
  unsigned int v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  char v601;
  char v602;
  unsigned int v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  char v607;
  char v608;
  unsigned int v609;
  uint64_t v610;
  uint64_t v611;
  unint64_t v612;
  char v613;
  char v614;
  unsigned int v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  char v619;
  char v620;
  unsigned int v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  char v625;
  char v626;
  unsigned int v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  char v631;
  char v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  char v638;
  char v639;
  unsigned int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  char v645;
  char v646;
  unsigned int v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  char v651;
  char v652;
  unsigned int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  char v658;
  char v659;
  unsigned int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  char v665;
  char v666;
  unsigned int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  char v672;
  char v673;
  unsigned int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  char v679;
  char v680;
  unsigned int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  char v686;
  char v687;
  unsigned int v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  char v693;
  char v694;
  unsigned int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  char v700;
  char v701;
  unsigned int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  char v707;
  char v708;
  unsigned int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  char v714;
  char v715;
  unsigned int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  char v721;
  char v722;
  unsigned int v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  char v728;
  char v729;
  unsigned int v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  char v734;
  char v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  char v740;
  char v741;
  unsigned int v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  char v746;
  char v747;
  unsigned int v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unint64_t v752;
  char v753;
  char v754;
  unsigned int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  char v760;
  char v761;
  unsigned int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  char v767;
  char v768;
  unsigned int v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  char v774;
  char v775;
  unsigned int v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  char v781;
  char v782;
  unsigned int v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t v786;
  char v787;
  char v788;
  unsigned int v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  char v794;
  char v795;
  unsigned int v796;
  uint64_t v797;
  uint64_t v798;
  unint64_t v799;
  char v800;
  char v801;
  unsigned int v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  char v807;
  char v808;
  unsigned int v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unint64_t v813;
  char v814;
  char v815;
  unsigned int v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  char v820;
  char v821;
  unsigned int v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  char v827;
  char v828;
  unsigned int v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  char v833;
  char v834;
  unsigned int v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  char v840;
  char v841;
  unsigned int v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  char v847;
  char v848;
  unsigned int v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  char v853;
  char v854;
  unsigned int v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  char v859;
  char v860;
  unsigned int v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  char v865;
  char v866;
  unsigned int v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  char v872;
  char v873;
  unsigned int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  char v879;
  char v880;
  unsigned int v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  char v885;
  char v886;
  unsigned int v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  char v891;
  char v892;
  unsigned int v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  char v897;
  char v898;
  unsigned int v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  char v903;
  char v904;
  unsigned int v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t v908;
  char v909;
  uint64_t v910;
  uint64_t v911;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *v5;
          v16 = *(unsigned __int8 *)(a2 + v15);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *v5;
      v16 = *(unsigned __int8 *)(a2 + v15);
      if (*(_BYTE *)(a2 + v15))
        v10 = 0;
LABEL_14:
      v17 = v10 & 7;
      if (v16 || v17 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((int)(v10 >> 3) > 1649)
      {
        if ((int)v19 <= 2000)
        {
          if ((int)v19 <= 1900)
          {
            switch((int)v19)
            {
              case 1800:
                if (v17 != 2)
                {
                  v523 = 0;
                  v524 = 0;
                  v525 = 0;
                  while (1)
                  {
                    v526 = *v3;
                    v527 = *(_QWORD *)(a2 + v526);
                    if (v527 == -1 || v527 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v528 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v527);
                    *(_QWORD *)(a2 + v526) = v527 + 1;
                    v525 |= (unint64_t)(v528 & 0x7F) << v523;
                    if (v528 < 0)
                    {
                      v523 += 7;
                      v14 = v524++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v73 = 0;
                  v74 = 0;
                  v75 = 0;
                  while (1)
                  {
                    v76 = *v3;
                    v77 = *(_QWORD *)(a2 + v76);
                    if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
                    *(_QWORD *)(a2 + v76) = v77 + 1;
                    v75 |= (unint64_t)(v78 & 0x7F) << v73;
                    if (v78 < 0)
                    {
                      v73 += 7;
                      v14 = v74++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_151;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_151:
                  PBRepeatedInt32Add();
                }
                break;
              case 1801:
                if (v17 != 2)
                {
                  v828 = 0;
                  v829 = 0;
                  v830 = 0;
                  while (1)
                  {
                    v831 = *v3;
                    v832 = *(_QWORD *)(a2 + v831);
                    if (v832 == -1 || v832 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v833 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v832);
                    *(_QWORD *)(a2 + v831) = v832 + 1;
                    v830 |= (unint64_t)(v833 & 0x7F) << v828;
                    if (v833 < 0)
                    {
                      v828 += 7;
                      v14 = v829++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v403 = 0;
                  v404 = 0;
                  v405 = 0;
                  while (1)
                  {
                    v406 = *v3;
                    v407 = *(_QWORD *)(a2 + v406);
                    if (v407 == -1 || v407 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v408 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v407);
                    *(_QWORD *)(a2 + v406) = v407 + 1;
                    v405 |= (unint64_t)(v408 & 0x7F) << v403;
                    if (v408 < 0)
                    {
                      v403 += 7;
                      v14 = v404++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1100;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_1100:
                  PBRepeatedInt32Add();
                }
                break;
              case 1802:
                v40 = objc_alloc_init(_INPBHomeEntity);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBHomeEntityReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadHomeEntity:", v40, 0, 0);
                goto LABEL_1350;
              case 1803:
                if (v17 != 2)
                {
                  v834 = 0;
                  v835 = 0;
                  v836 = 0;
                  while (1)
                  {
                    v837 = *v3;
                    v838 = *(_QWORD *)(a2 + v837);
                    v839 = v838 + 1;
                    if (v838 == -1 || v839 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v840 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v838);
                    *(_QWORD *)(a2 + v837) = v839;
                    v836 |= (unint64_t)(v840 & 0x7F) << v834;
                    if (v840 < 0)
                    {
                      v834 += 7;
                      v14 = v835++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v409 = 0;
                  v410 = 0;
                  v411 = 0;
                  while (1)
                  {
                    v412 = *v3;
                    v413 = *(_QWORD *)(a2 + v412);
                    v414 = v413 + 1;
                    if (v413 == -1 || v414 > *(_QWORD *)(a2 + *v4))
                      break;
                    v415 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v413);
                    *(_QWORD *)(a2 + v412) = v414;
                    v411 |= (unint64_t)(v415 & 0x7F) << v409;
                    if (v415 < 0)
                    {
                      v409 += 7;
                      v14 = v410++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1117;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_1117:
                  PBRepeatedInt32Add();
                }
                break;
              case 1804:
                if (v17 != 2)
                {
                  v841 = 0;
                  v842 = 0;
                  v843 = 0;
                  while (1)
                  {
                    v844 = *v3;
                    v845 = *(_QWORD *)(a2 + v844);
                    v846 = v845 + 1;
                    if (v845 == -1 || v846 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v847 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v845);
                    *(_QWORD *)(a2 + v844) = v846;
                    v843 |= (unint64_t)(v847 & 0x7F) << v841;
                    if (v847 < 0)
                    {
                      v841 += 7;
                      v14 = v842++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v416 = 0;
                  v417 = 0;
                  v418 = 0;
                  while (1)
                  {
                    v419 = *v3;
                    v420 = *(_QWORD *)(a2 + v419);
                    v421 = v420 + 1;
                    if (v420 == -1 || v421 > *(_QWORD *)(a2 + *v4))
                      break;
                    v422 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v420);
                    *(_QWORD *)(a2 + v419) = v421;
                    v418 |= (unint64_t)(v422 & 0x7F) << v416;
                    if (v422 < 0)
                    {
                      v416 += 7;
                      v14 = v417++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1130;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_1130:
                  PBRepeatedInt32Add();
                }
                break;
              case 1805:
                v40 = objc_alloc_init(_INPBHomeAttributeValue);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBHomeAttributeValueReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadHomeAttributeValue:", v40, 0, 0);
                goto LABEL_1350;
              case 1806:
                v40 = objc_alloc_init(_INPBHomeAttribute);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBHomeAttributeReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadHomeAttribute:", v40, 0, 0);
                goto LABEL_1350;
              case 1807:
                v40 = objc_alloc_init(_INPBHomeFilter);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBHomeFilterReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadHomeFilter:", v40, 0, 0);
                goto LABEL_1350;
              case 1808:
                v40 = objc_alloc_init(_INPBHomeUserTask);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBHomeUserTaskReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadHomeUserTask:", v40, 0, 0);
                goto LABEL_1350;
              default:
                switch((int)v19)
                {
                  case 1650:
                    if (v17 != 2)
                    {
                      v541 = 0;
                      v542 = 0;
                      v543 = 0;
                      while (1)
                      {
                        v544 = *v3;
                        v545 = *(_QWORD *)(a2 + v544);
                        if (v545 == -1 || v545 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v546 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v545);
                        *(_QWORD *)(a2 + v544) = v545 + 1;
                        v543 |= (unint64_t)(v546 & 0x7F) << v541;
                        if (v546 < 0)
                        {
                          v541 += 7;
                          v14 = v542++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v91 = 0;
                      v92 = 0;
                      v93 = 0;
                      while (1)
                      {
                        v94 = *v3;
                        v95 = *(_QWORD *)(a2 + v94);
                        if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v95);
                        *(_QWORD *)(a2 + v94) = v95 + 1;
                        v93 |= (unint64_t)(v96 & 0x7F) << v91;
                        if (v96 < 0)
                        {
                          v91 += 7;
                          v14 = v92++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_204;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_204:
                      PBRepeatedInt32Add();
                    }
                    goto LABEL_1345;
                  case 1651:
                    if (v17 != 2)
                    {
                      v892 = 0;
                      v893 = 0;
                      v894 = 0;
                      while (1)
                      {
                        v895 = *v3;
                        v896 = *(_QWORD *)(a2 + v895);
                        if (v896 == -1 || v896 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v897 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v896);
                        *(_QWORD *)(a2 + v895) = v896 + 1;
                        v894 |= (unint64_t)(v897 & 0x7F) << v892;
                        if (v897 < 0)
                        {
                          v892 += 7;
                          v14 = v893++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v467 = 0;
                      v468 = 0;
                      v469 = 0;
                      while (1)
                      {
                        v470 = *v3;
                        v471 = *(_QWORD *)(a2 + v470);
                        if (v471 == -1 || v471 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v472 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v471);
                        *(_QWORD *)(a2 + v470) = v471 + 1;
                        v469 |= (unint64_t)(v472 & 0x7F) << v467;
                        if (v472 < 0)
                        {
                          v467 += 7;
                          v14 = v468++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1306;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_1306:
                      PBRepeatedInt32Add();
                    }
                    goto LABEL_1345;
                  case 1652:
                    v40 = objc_alloc_init(_INPBWorkoutAssociatedItem);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark()
                      || !_INPBWorkoutAssociatedItemReadFrom(v40, a2))
                    {
                      goto LABEL_1847;
                    }
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadWorkoutAssociatedItem:", v40, 0, 0);
                    goto LABEL_1350;
                  case 1653:
                    if (v17 != 2)
                    {
                      v898 = 0;
                      v899 = 0;
                      v900 = 0;
                      while (1)
                      {
                        v901 = *v3;
                        v902 = *(_QWORD *)(a2 + v901);
                        if (v902 == -1 || v902 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v903 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v902);
                        *(_QWORD *)(a2 + v901) = v902 + 1;
                        v900 |= (unint64_t)(v903 & 0x7F) << v898;
                        if (v903 < 0)
                        {
                          v898 += 7;
                          v14 = v899++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v473 = 0;
                      v474 = 0;
                      v475 = 0;
                      while (1)
                      {
                        v476 = *v3;
                        v477 = *(_QWORD *)(a2 + v476);
                        if (v477 == -1 || v477 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v478 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v477);
                        *(_QWORD *)(a2 + v476) = v477 + 1;
                        v475 |= (unint64_t)(v478 & 0x7F) << v473;
                        if (v478 < 0)
                        {
                          v473 += 7;
                          v14 = v474++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1323;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_1323:
                      PBRepeatedInt32Add();
                    }
                    break;
                  case 1654:
                    v40 = objc_alloc_init(_INPBWorkoutCustomization);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBWorkoutCustomizationReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadWorkoutCustomization:", v40, 0, 0);
                    goto LABEL_1350;
                  default:
                    switch((int)v19)
                    {
                      case 1700:
                        if (v17 != 2)
                        {
                          v510 = 0;
                          v511 = 0;
                          v512 = 0;
                          while (1)
                          {
                            v513 = *v3;
                            v514 = *(_QWORD *)(a2 + v513);
                            if (v514 == -1 || v514 >= *(_QWORD *)(a2 + *v4))
                              goto LABEL_1834;
                            v515 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v514);
                            *(_QWORD *)(a2 + v513) = v514 + 1;
                            v512 |= (unint64_t)(v515 & 0x7F) << v510;
                            if (v515 < 0)
                            {
                              v510 += 7;
                              v14 = v511++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_1835;
                          }
                        }
                        v910 = 0;
                        v911 = 0;
                        result = PBReaderPlaceMark();
                        if (!(_DWORD)result)
                          return result;
                        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                        {
                          v54 = 0;
                          v55 = 0;
                          v56 = 0;
                          while (1)
                          {
                            v57 = *v3;
                            v58 = *(_QWORD *)(a2 + v57);
                            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
                              break;
                            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
                            *(_QWORD *)(a2 + v57) = v58 + 1;
                            v56 |= (unint64_t)(v59 & 0x7F) << v54;
                            if (v59 < 0)
                            {
                              v54 += 7;
                              v14 = v55++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_110;
                          }
                          *(_BYTE *)(a2 + *v5) = 1;
LABEL_110:
                          PBRepeatedInt32Add();
                        }
                        goto LABEL_1345;
                      case 1701:
                        if (v17 != 2)
                        {
                          v729 = 0;
                          v730 = 0;
                          v731 = 0;
                          while (1)
                          {
                            v732 = *v3;
                            v733 = *(_QWORD *)(a2 + v732);
                            if (v733 == -1 || v733 >= *(_QWORD *)(a2 + *v4))
                              goto LABEL_1834;
                            v734 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v733);
                            *(_QWORD *)(a2 + v732) = v733 + 1;
                            v731 |= (unint64_t)(v734 & 0x7F) << v729;
                            if (v734 < 0)
                            {
                              v729 += 7;
                              v14 = v730++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_1835;
                          }
                        }
                        v910 = 0;
                        v911 = 0;
                        result = PBReaderPlaceMark();
                        if (!(_DWORD)result)
                          return result;
                        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                        {
                          v287 = 0;
                          v288 = 0;
                          v289 = 0;
                          while (1)
                          {
                            v290 = *v3;
                            v291 = *(_QWORD *)(a2 + v290);
                            if (v291 == -1 || v291 >= *(_QWORD *)(a2 + *v4))
                              break;
                            v292 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v291);
                            *(_QWORD *)(a2 + v290) = v291 + 1;
                            v289 |= (unint64_t)(v292 & 0x7F) << v287;
                            if (v292 < 0)
                            {
                              v287 += 7;
                              v14 = v288++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_840;
                          }
                          *(_BYTE *)(a2 + *v5) = 1;
LABEL_840:
                          PBRepeatedInt32Add();
                        }
                        goto LABEL_1345;
                      case 1702:
                        if (v17 != 2)
                        {
                          v735 = 0;
                          v736 = 0;
                          v737 = 0;
                          while (1)
                          {
                            v738 = *v3;
                            v739 = *(_QWORD *)(a2 + v738);
                            if (v739 == -1 || v739 >= *(_QWORD *)(a2 + *v4))
                              goto LABEL_1834;
                            v740 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v739);
                            *(_QWORD *)(a2 + v738) = v739 + 1;
                            v737 |= (unint64_t)(v740 & 0x7F) << v735;
                            if (v740 < 0)
                            {
                              v735 += 7;
                              v14 = v736++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_1835;
                          }
                        }
                        v910 = 0;
                        v911 = 0;
                        result = PBReaderPlaceMark();
                        if (!(_DWORD)result)
                          return result;
                        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                        {
                          v293 = 0;
                          v294 = 0;
                          v295 = 0;
                          while (1)
                          {
                            v296 = *v3;
                            v297 = *(_QWORD *)(a2 + v296);
                            if (v297 == -1 || v297 >= *(_QWORD *)(a2 + *v4))
                              break;
                            v298 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v297);
                            *(_QWORD *)(a2 + v296) = v297 + 1;
                            v295 |= (unint64_t)(v298 & 0x7F) << v293;
                            if (v298 < 0)
                            {
                              v293 += 7;
                              v14 = v294++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_853;
                          }
                          *(_BYTE *)(a2 + *v5) = 1;
LABEL_853:
                          PBRepeatedInt32Add();
                        }
                        goto LABEL_1345;
                      case 1703:
                        v40 = objc_alloc_init(_INPBSendMessageAttachment);
                        v910 = 0;
                        v911 = 0;
                        if (!PBReaderPlaceMark()
                          || !_INPBSendMessageAttachmentReadFrom(v40, a2))
                        {
                          goto LABEL_1847;
                        }
                        PBReaderRecallMark();
                        if (v40)
                          objc_msgSend(a1, "addPayloadSendMessageAttachment:", v40, 0, 0);
                        goto LABEL_1350;
                      case 1704:
                        if (v17 != 2)
                        {
                          v741 = 0;
                          v742 = 0;
                          v743 = 0;
                          while (1)
                          {
                            v744 = *v3;
                            v745 = *(_QWORD *)(a2 + v744);
                            if (v745 == -1 || v745 >= *(_QWORD *)(a2 + *v4))
                              goto LABEL_1834;
                            v746 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v745);
                            *(_QWORD *)(a2 + v744) = v745 + 1;
                            v743 |= (unint64_t)(v746 & 0x7F) << v741;
                            if (v746 < 0)
                            {
                              v741 += 7;
                              v14 = v742++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_1835;
                          }
                        }
                        v910 = 0;
                        v911 = 0;
                        result = PBReaderPlaceMark();
                        if (!(_DWORD)result)
                          return result;
                        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                        {
                          v299 = 0;
                          v300 = 0;
                          v301 = 0;
                          while (1)
                          {
                            v302 = *v3;
                            v303 = *(_QWORD *)(a2 + v302);
                            if (v303 == -1 || v303 >= *(_QWORD *)(a2 + *v4))
                              break;
                            v304 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v303);
                            *(_QWORD *)(a2 + v302) = v303 + 1;
                            v301 |= (unint64_t)(v304 & 0x7F) << v299;
                            if (v304 < 0)
                            {
                              v299 += 7;
                              v14 = v300++ >= 9;
                              if (!v14)
                                continue;
                            }
                            goto LABEL_870;
                          }
                          *(_BYTE *)(a2 + *v5) = 1;
LABEL_870:
                          PBRepeatedInt32Add();
                        }
                        break;
                      default:
                        goto LABEL_1351;
                    }
                    goto LABEL_1345;
                }
                break;
            }
          }
          else
          {
            switch((int)v19)
            {
              case 1901:
                v40 = objc_alloc_init(_INPBMediaItemValue);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadMediaItemValue:", v40, 0, 0);
                goto LABEL_1350;
              case 1902:
                if (v17 != 2)
                {
                  v608 = 0;
                  v609 = 0;
                  v610 = 0;
                  while (1)
                  {
                    v611 = *v3;
                    v612 = *(_QWORD *)(a2 + v611);
                    if (v612 == -1 || v612 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v613 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v612);
                    *(_QWORD *)(a2 + v611) = v612 + 1;
                    v610 |= (unint64_t)(v613 & 0x7F) << v608;
                    if (v613 < 0)
                    {
                      v608 += 7;
                      v14 = v609++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v166 = 0;
                  v167 = 0;
                  v168 = 0;
                  while (1)
                  {
                    v169 = *v3;
                    v170 = *(_QWORD *)(a2 + v169);
                    if (v170 == -1 || v170 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v171 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v170);
                    *(_QWORD *)(a2 + v169) = v170 + 1;
                    v168 |= (unint64_t)(v171 & 0x7F) << v166;
                    if (v171 < 0)
                    {
                      v166 += 7;
                      v14 = v167++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_538;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_538:
                  PBRepeatedInt32Add();
                }
                break;
              case 1903:
                if (v17 != 2)
                {
                  v614 = 0;
                  v615 = 0;
                  v616 = 0;
                  while (1)
                  {
                    v617 = *v3;
                    v618 = *(_QWORD *)(a2 + v617);
                    if (v618 == -1 || v618 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v619 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v618);
                    *(_QWORD *)(a2 + v617) = v618 + 1;
                    v616 |= (unint64_t)(v619 & 0x7F) << v614;
                    if (v619 < 0)
                    {
                      v614 += 7;
                      v14 = v615++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v172 = 0;
                  v173 = 0;
                  v174 = 0;
                  while (1)
                  {
                    v175 = *v3;
                    v176 = *(_QWORD *)(a2 + v175);
                    if (v176 == -1 || v176 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v177 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v176);
                    *(_QWORD *)(a2 + v175) = v176 + 1;
                    v174 |= (unint64_t)(v177 & 0x7F) << v172;
                    if (v177 < 0)
                    {
                      v172 += 7;
                      v14 = v173++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_551;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_551:
                  PBRepeatedInt32Add();
                }
                break;
              case 1904:
                v40 = objc_alloc_init(_INPBMediaDestination);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaDestinationReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadMediaDestination:", v40, 0, 0);
                goto LABEL_1350;
              case 1905:
                if (v17 != 2)
                {
                  v620 = 0;
                  v621 = 0;
                  v622 = 0;
                  while (1)
                  {
                    v623 = *v3;
                    v624 = *(_QWORD *)(a2 + v623);
                    if (v624 == -1 || v624 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v625 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v624);
                    *(_QWORD *)(a2 + v623) = v624 + 1;
                    v622 |= (unint64_t)(v625 & 0x7F) << v620;
                    if (v625 < 0)
                    {
                      v620 += 7;
                      v14 = v621++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v178 = 0;
                  v179 = 0;
                  v180 = 0;
                  while (1)
                  {
                    v181 = *v3;
                    v182 = *(_QWORD *)(a2 + v181);
                    if (v182 == -1 || v182 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v183 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v182);
                    *(_QWORD *)(a2 + v181) = v182 + 1;
                    v180 |= (unint64_t)(v183 & 0x7F) << v178;
                    if (v183 < 0)
                    {
                      v178 += 7;
                      v14 = v179++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_568;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_568:
                  PBRepeatedInt32Add();
                }
                break;
              case 1906:
                v40 = objc_alloc_init(_INPBMediaSearch);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaSearchReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadMediaSearch:", v40, 0, 0);
                goto LABEL_1350;
              case 1907:
                v40 = objc_alloc_init(_INPBMediaItemGroup);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBMediaItemGroupReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadMediaItemGroup:", v40, 0, 0);
                goto LABEL_1350;
              case 1908:
                if (v17 != 2)
                {
                  v626 = 0;
                  v627 = 0;
                  v628 = 0;
                  while (1)
                  {
                    v629 = *v3;
                    v630 = *(_QWORD *)(a2 + v629);
                    if (v630 == -1 || v630 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v631 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v630);
                    *(_QWORD *)(a2 + v629) = v630 + 1;
                    v628 |= (unint64_t)(v631 & 0x7F) << v626;
                    if (v631 < 0)
                    {
                      v626 += 7;
                      v14 = v627++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v184 = 0;
                  v185 = 0;
                  v186 = 0;
                  while (1)
                  {
                    v187 = *v3;
                    v188 = *(_QWORD *)(a2 + v187);
                    if (v188 == -1 || v188 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v189 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v188);
                    *(_QWORD *)(a2 + v187) = v188 + 1;
                    v186 |= (unint64_t)(v189 & 0x7F) << v184;
                    if (v189 < 0)
                    {
                      v184 += 7;
                      v14 = v185++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_589;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_589:
                  PBRepeatedInt32Add();
                }
                break;
              case 1909:
                v40 = objc_alloc_init(_INPBPrivatePlayMediaIntentData);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBPrivatePlayMediaIntentDataReadFrom(v40, a2))
                {
                  goto LABEL_1847;
                }
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPrivatePlayMediaIntentData:", v40, 0, 0);
                goto LABEL_1350;
              case 1910:
                v40 = objc_alloc_init(_INPBPrivateAddMediaIntentData);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBPrivateAddMediaIntentDataReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPrivateAddMediaIntentData:", v40, 0, 0);
                goto LABEL_1350;
              case 1911:
                v40 = objc_alloc_init(_INPBPrivateUpdateMediaAffinityIntentData);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBPrivateUpdateMediaAffinityIntentDataReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPrivateUpdateMediaAffinityIntentData:", v40, 0, 0);
                goto LABEL_1350;
              case 1912:
                v40 = objc_alloc_init(_INPBPrivateSearchForMediaIntentData);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBPrivateSearchForMediaIntentDataReadFrom(v40, a2))
                {
                  goto LABEL_1847;
                }
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPrivateSearchForMediaIntentData:", v40, 0, 0);
                goto LABEL_1350;
              case 1913:
                v40 = objc_alloc_init(_INPBBillPayeeValue);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBBillPayeeValueReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadBillPayeeValue:", v40, 0, 0);
                goto LABEL_1350;
              case 1914:
                v40 = objc_alloc_init(_INPBFinancialAccountValue);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBFinancialAccountValueReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadFinancialAccountValue:", v40, 0, 0);
                goto LABEL_1350;
              case 1915:
                v40 = objc_alloc_init(_INPBPaymentAmountValue);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBPaymentAmountValueReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPaymentAmountValue:", v40, 0, 0);
                goto LABEL_1350;
              case 1916:
                v40 = objc_alloc_init(_INPBBillDetailsValue);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBBillDetailsValueReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadBillDetailsValue:", v40, 0, 0);
                goto LABEL_1350;
              case 1917:
                if (v17 != 2)
                {
                  v632 = 0;
                  v633 = 0;
                  v634 = 0;
                  while (1)
                  {
                    v635 = *v3;
                    v636 = *(_QWORD *)(a2 + v635);
                    v637 = v636 + 1;
                    if (v636 == -1 || v637 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v638 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v636);
                    *(_QWORD *)(a2 + v635) = v637;
                    v634 |= (unint64_t)(v638 & 0x7F) << v632;
                    if (v638 < 0)
                    {
                      v632 += 7;
                      v14 = v633++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v190 = 0;
                  v191 = 0;
                  v192 = 0;
                  while (1)
                  {
                    v193 = *v3;
                    v194 = *(_QWORD *)(a2 + v193);
                    v195 = v194 + 1;
                    if (v194 == -1 || v195 > *(_QWORD *)(a2 + *v4))
                      break;
                    v196 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v194);
                    *(_QWORD *)(a2 + v193) = v195;
                    v192 |= (unint64_t)(v196 & 0x7F) << v190;
                    if (v196 < 0)
                    {
                      v190 += 7;
                      v14 = v191++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_634;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_634:
                  PBRepeatedInt32Add();
                }
                break;
              case 1918:
                if (v17 != 2)
                {
                  v639 = 0;
                  v640 = 0;
                  v641 = 0;
                  while (1)
                  {
                    v642 = *v3;
                    v643 = *(_QWORD *)(a2 + v642);
                    v644 = v643 + 1;
                    if (v643 == -1 || v644 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v645 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v643);
                    *(_QWORD *)(a2 + v642) = v644;
                    v641 |= (unint64_t)(v645 & 0x7F) << v639;
                    if (v645 < 0)
                    {
                      v639 += 7;
                      v14 = v640++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v197 = 0;
                  v198 = 0;
                  v199 = 0;
                  while (1)
                  {
                    v200 = *v3;
                    v201 = *(_QWORD *)(a2 + v200);
                    v202 = v201 + 1;
                    if (v201 == -1 || v202 > *(_QWORD *)(a2 + *v4))
                      break;
                    v203 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v201);
                    *(_QWORD *)(a2 + v200) = v202;
                    v199 |= (unint64_t)(v203 & 0x7F) << v197;
                    if (v203 < 0)
                    {
                      v197 += 7;
                      v14 = v198++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_647;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_647:
                  PBRepeatedInt32Add();
                }
                break;
              case 1919:
                if (v17 != 2)
                {
                  v646 = 0;
                  v647 = 0;
                  v648 = 0;
                  while (1)
                  {
                    v649 = *v3;
                    v650 = *(_QWORD *)(a2 + v649);
                    if (v650 == -1 || v650 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v651 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v650);
                    *(_QWORD *)(a2 + v649) = v650 + 1;
                    v648 |= (unint64_t)(v651 & 0x7F) << v646;
                    if (v651 < 0)
                    {
                      v646 += 7;
                      v14 = v647++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v204 = 0;
                  v205 = 0;
                  v206 = 0;
                  while (1)
                  {
                    v207 = *v3;
                    v208 = *(_QWORD *)(a2 + v207);
                    if (v208 == -1 || v208 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v209 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v208);
                    *(_QWORD *)(a2 + v207) = v208 + 1;
                    v206 |= (unint64_t)(v209 & 0x7F) << v204;
                    if (v209 < 0)
                    {
                      v204 += 7;
                      v14 = v205++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_660;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_660:
                  PBRepeatedInt32Add();
                }
                break;
              case 1920:
                if (v17 != 2)
                {
                  v652 = 0;
                  v653 = 0;
                  v654 = 0;
                  while (1)
                  {
                    v655 = *v3;
                    v656 = *(_QWORD *)(a2 + v655);
                    v657 = v656 + 1;
                    if (v656 == -1 || v657 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v658 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v656);
                    *(_QWORD *)(a2 + v655) = v657;
                    v654 |= (unint64_t)(v658 & 0x7F) << v652;
                    if (v658 < 0)
                    {
                      v652 += 7;
                      v14 = v653++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v210 = 0;
                  v211 = 0;
                  v212 = 0;
                  while (1)
                  {
                    v213 = *v3;
                    v214 = *(_QWORD *)(a2 + v213);
                    v215 = v214 + 1;
                    if (v214 == -1 || v215 > *(_QWORD *)(a2 + *v4))
                      break;
                    v216 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v214);
                    *(_QWORD *)(a2 + v213) = v215;
                    v212 |= (unint64_t)(v216 & 0x7F) << v210;
                    if (v216 < 0)
                    {
                      v210 += 7;
                      v14 = v211++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_673;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_673:
                  PBRepeatedInt32Add();
                }
                break;
              default:
                goto LABEL_1351;
            }
          }
        }
        else if ((int)v19 > 2500)
        {
          if ((int)v19 > 2800)
          {
            if ((int)v19 <= 4000)
            {
              switch((int)v19)
              {
                case 3001:
                  v40 = objc_alloc_init(_INPBCustomObject);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBCustomObjectReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadCustomObject:", v40, 0, 0);
                  break;
                case 3002:
                  v40 = objc_alloc_init(_INPBURLValue);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadURLValue:", v40, 0, 0);
                  break;
                case 3003:
                  v40 = objc_alloc_init(_INPBArchivedObject);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadArchivedObject:", v40, 0, 0);
                  break;
                case 3004:
                  v40 = objc_alloc_init(_INPBFile);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBFileReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadFile:", v40, 0, 0);
                  break;
                default:
                  if ((_DWORD)v19 != 2801)
                    goto LABEL_1351;
                  v40 = objc_alloc_init(_INPBDeviceDetail);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBDeviceDetailReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadDeviceDetail:", v40, 0, 0);
                  break;
              }
LABEL_1350:

              continue;
            }
            switch((_DWORD)v19)
            {
              case 0xFA1:
                v40 = objc_alloc_init(_INPBAnnouncement);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBAnnouncementReadFrom(v40, a2))
                {
LABEL_1847:

                  return 0;
                }
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadAnnouncement:", v40, 0, 0);
                goto LABEL_1350;
              case 0xFA2:
                if (v17 != 2)
                {
                  v904 = 0;
                  v905 = 0;
                  v906 = 0;
                  while (1)
                  {
                    v907 = *v3;
                    v908 = *(_QWORD *)(a2 + v907);
                    if (v908 == -1 || v908 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v909 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v908);
                    *(_QWORD *)(a2 + v907) = v908 + 1;
                    v906 |= (unint64_t)(v909 & 0x7F) << v904;
                    if (v909 < 0)
                    {
                      v904 += 7;
                      v14 = v905++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
LABEL_1834:
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_1835:
                  PBRepeatedInt32Add();
                  continue;
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v479 = 0;
                  v480 = 0;
                  v481 = 0;
                  while (1)
                  {
                    v482 = *v3;
                    v483 = *(_QWORD *)(a2 + v482);
                    if (v483 == -1 || v483 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v484 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v483);
                    *(_QWORD *)(a2 + v482) = v483 + 1;
                    v481 |= (unint64_t)(v484 & 0x7F) << v479;
                    if (v484 < 0)
                    {
                      v479 += 7;
                      v14 = v480++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1344;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_1344:
                  PBRepeatedInt32Add();
                }
                break;
              case 0xFA3:
                if (v17 != 2)
                {
                  v547 = 0;
                  v548 = 0;
                  v549 = 0;
                  while (1)
                  {
                    v550 = *v3;
                    v551 = *(_QWORD *)(a2 + v550);
                    if (v551 == -1 || v551 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v552 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v551);
                    *(_QWORD *)(a2 + v550) = v551 + 1;
                    v549 |= (unint64_t)(v552 & 0x7F) << v547;
                    if (v552 < 0)
                    {
                      v547 += 7;
                      v14 = v548++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  while (1)
                  {
                    v100 = *v3;
                    v101 = *(_QWORD *)(a2 + v100);
                    if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v101);
                    *(_QWORD *)(a2 + v100) = v101 + 1;
                    v99 |= (unint64_t)(v102 & 0x7F) << v97;
                    if (v102 < 0)
                    {
                      v97 += 7;
                      v14 = v98++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_220;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_220:
                  PBRepeatedInt32Add();
                }
                break;
              default:
LABEL_1351:
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
                continue;
            }
          }
          else
          {
            switch((int)v19)
            {
              case 2601:
                if (v17 != 2)
                {
                  v497 = 0;
                  v498 = 0;
                  v499 = 0;
                  while (1)
                  {
                    v500 = *v3;
                    v501 = *(_QWORD *)(a2 + v500);
                    if (v501 == -1 || v501 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v502 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v501);
                    *(_QWORD *)(a2 + v500) = v501 + 1;
                    v499 |= (unint64_t)(v502 & 0x7F) << v497;
                    if (v502 < 0)
                    {
                      v497 += 7;
                      v14 = v498++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v41 = 0;
                  v42 = 0;
                  v43 = 0;
                  while (1)
                  {
                    v44 = *v3;
                    v45 = *(_QWORD *)(a2 + v44);
                    if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
                    *(_QWORD *)(a2 + v44) = v45 + 1;
                    v43 |= (unint64_t)(v46 & 0x7F) << v41;
                    if (v46 < 0)
                    {
                      v41 += 7;
                      v14 = v42++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_80;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_80:
                  PBRepeatedInt32Add();
                }
                break;
              case 2602:
                if (v17 != 2)
                {
                  v659 = 0;
                  v660 = 0;
                  v661 = 0;
                  while (1)
                  {
                    v662 = *v3;
                    v663 = *(_QWORD *)(a2 + v662);
                    v664 = v663 + 1;
                    if (v663 == -1 || v664 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v665 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v663);
                    *(_QWORD *)(a2 + v662) = v664;
                    v661 |= (unint64_t)(v665 & 0x7F) << v659;
                    if (v665 < 0)
                    {
                      v659 += 7;
                      v14 = v660++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v217 = 0;
                  v218 = 0;
                  v219 = 0;
                  while (1)
                  {
                    v220 = *v3;
                    v221 = *(_QWORD *)(a2 + v220);
                    v222 = v221 + 1;
                    if (v221 == -1 || v222 > *(_QWORD *)(a2 + *v4))
                      break;
                    v223 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v221);
                    *(_QWORD *)(a2 + v220) = v222;
                    v219 |= (unint64_t)(v223 & 0x7F) << v217;
                    if (v223 < 0)
                    {
                      v217 += 7;
                      v14 = v218++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_686;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_686:
                  PBRepeatedInt32Add();
                }
                break;
              case 2603:
                if (v17 != 2)
                {
                  v666 = 0;
                  v667 = 0;
                  v668 = 0;
                  while (1)
                  {
                    v669 = *v3;
                    v670 = *(_QWORD *)(a2 + v669);
                    v671 = v670 + 1;
                    if (v670 == -1 || v671 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v672 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v670);
                    *(_QWORD *)(a2 + v669) = v671;
                    v668 |= (unint64_t)(v672 & 0x7F) << v666;
                    if (v672 < 0)
                    {
                      v666 += 7;
                      v14 = v667++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v224 = 0;
                  v225 = 0;
                  v226 = 0;
                  while (1)
                  {
                    v227 = *v3;
                    v228 = *(_QWORD *)(a2 + v227);
                    v229 = v228 + 1;
                    if (v228 == -1 || v229 > *(_QWORD *)(a2 + *v4))
                      break;
                    v230 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v228);
                    *(_QWORD *)(a2 + v227) = v229;
                    v226 |= (unint64_t)(v230 & 0x7F) << v224;
                    if (v230 < 0)
                    {
                      v224 += 7;
                      v14 = v225++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_699;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_699:
                  PBRepeatedInt32Add();
                }
                break;
              case 2604:
                v40 = objc_alloc_init(_INPBAlarm);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadAlarm:", v40, 0, 0);
                goto LABEL_1350;
              case 2605:
                v40 = objc_alloc_init(_INPBAlarmSearch);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBAlarmSearchReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadAlarmSearch:", v40, 0, 0);
                goto LABEL_1350;
              case 2606:
                v40 = objc_alloc_init(_INPBSleepAlarmAttribute);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBSleepAlarmAttributeReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadSleepAlarmAttribute:", v40, 0, 0);
                goto LABEL_1350;
              case 2607:
                if (v17 != 2)
                {
                  v673 = 0;
                  v674 = 0;
                  v675 = 0;
                  while (1)
                  {
                    v676 = *v3;
                    v677 = *(_QWORD *)(a2 + v676);
                    v678 = v677 + 1;
                    if (v677 == -1 || v678 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v679 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v677);
                    *(_QWORD *)(a2 + v676) = v678;
                    v675 |= (unint64_t)(v679 & 0x7F) << v673;
                    if (v679 < 0)
                    {
                      v673 += 7;
                      v14 = v674++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v231 = 0;
                  v232 = 0;
                  v233 = 0;
                  while (1)
                  {
                    v234 = *v3;
                    v235 = *(_QWORD *)(a2 + v234);
                    v236 = v235 + 1;
                    if (v235 == -1 || v236 > *(_QWORD *)(a2 + *v4))
                      break;
                    v237 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v235);
                    *(_QWORD *)(a2 + v234) = v236;
                    v233 |= (unint64_t)(v237 & 0x7F) << v231;
                    if (v237 < 0)
                    {
                      v231 += 7;
                      v14 = v232++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_724;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_724:
                  PBRepeatedInt32Add();
                }
                break;
              case 2608:
                if (v17 != 2)
                {
                  v680 = 0;
                  v681 = 0;
                  v682 = 0;
                  while (1)
                  {
                    v683 = *v3;
                    v684 = *(_QWORD *)(a2 + v683);
                    v685 = v684 + 1;
                    if (v684 == -1 || v685 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v686 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v684);
                    *(_QWORD *)(a2 + v683) = v685;
                    v682 |= (unint64_t)(v686 & 0x7F) << v680;
                    if (v686 < 0)
                    {
                      v680 += 7;
                      v14 = v681++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v238 = 0;
                  v239 = 0;
                  v240 = 0;
                  while (1)
                  {
                    v241 = *v3;
                    v242 = *(_QWORD *)(a2 + v241);
                    v243 = v242 + 1;
                    if (v242 == -1 || v243 > *(_QWORD *)(a2 + *v4))
                      break;
                    v244 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v242);
                    *(_QWORD *)(a2 + v241) = v243;
                    v240 |= (unint64_t)(v244 & 0x7F) << v238;
                    if (v244 < 0)
                    {
                      v238 += 7;
                      v14 = v239++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_737;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_737:
                  PBRepeatedInt32Add();
                }
                break;
              default:
                switch((int)v19)
                {
                  case 2501:
                    v40 = objc_alloc_init(_INPBTimer);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadTimer:", v40, 0, 0);
                    goto LABEL_1350;
                  case 2502:
                    if (v17 != 2)
                    {
                      v880 = 0;
                      v881 = 0;
                      v882 = 0;
                      while (1)
                      {
                        v883 = *v3;
                        v884 = *(_QWORD *)(a2 + v883);
                        if (v884 == -1 || v884 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v885 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v884);
                        *(_QWORD *)(a2 + v883) = v884 + 1;
                        v882 |= (unint64_t)(v885 & 0x7F) << v880;
                        if (v885 < 0)
                        {
                          v880 += 7;
                          v14 = v881++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v455 = 0;
                      v456 = 0;
                      v457 = 0;
                      while (1)
                      {
                        v458 = *v3;
                        v459 = *(_QWORD *)(a2 + v458);
                        if (v459 == -1 || v459 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v460 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v459);
                        *(_QWORD *)(a2 + v458) = v459 + 1;
                        v457 |= (unint64_t)(v460 & 0x7F) << v455;
                        if (v460 < 0)
                        {
                          v455 += 7;
                          v14 = v456++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1272;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_1272:
                      PBRepeatedInt32Add();
                    }
                    goto LABEL_1345;
                  case 2503:
                    v40 = objc_alloc_init(_INPBVoiceCommandDeviceInformation);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark()
                      || !_INPBVoiceCommandDeviceInformationReadFrom(v40, a2))
                    {
                      goto LABEL_1847;
                    }
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadVoiceCommandDeviceInformation:", v40, 0, 0);
                    goto LABEL_1350;
                  case 2504:
                    if (v17 != 2)
                    {
                      v886 = 0;
                      v887 = 0;
                      v888 = 0;
                      while (1)
                      {
                        v889 = *v3;
                        v890 = *(_QWORD *)(a2 + v889);
                        if (v890 == -1 || v890 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v891 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v890);
                        *(_QWORD *)(a2 + v889) = v890 + 1;
                        v888 |= (unint64_t)(v891 & 0x7F) << v886;
                        if (v891 < 0)
                        {
                          v886 += 7;
                          v14 = v887++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v461 = 0;
                      v462 = 0;
                      v463 = 0;
                      while (1)
                      {
                        v464 = *v3;
                        v465 = *(_QWORD *)(a2 + v464);
                        if (v465 == -1 || v465 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v466 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v465);
                        *(_QWORD *)(a2 + v464) = v465 + 1;
                        v463 |= (unint64_t)(v466 & 0x7F) << v461;
                        if (v466 < 0)
                        {
                          v461 += 7;
                          v14 = v462++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1289;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_1289:
                      PBRepeatedInt32Add();
                    }
                    break;
                  case 2505:
                  case 2506:
                  case 2507:
                    goto LABEL_1351;
                  case 2508:
                    v40 = objc_alloc_init(_INPBIntentExecutionResult);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark()
                      || !_INPBIntentExecutionResultReadFrom(v40, a2))
                    {
                      goto LABEL_1847;
                    }
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadIntentExecutionResult:", v40, 0, 0);
                    goto LABEL_1350;
                  default:
                    if ((_DWORD)v19 != 2573)
                      goto LABEL_1351;
                    v40 = objc_alloc_init(_INPBAppIdentifier);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadAppIdentifier:", v40, 0, 0);
                    goto LABEL_1350;
                }
                break;
            }
          }
        }
        else
        {
          switch((int)v19)
          {
            case 2400:
              if (v17 != 2)
              {
                v491 = 0;
                v492 = 0;
                v493 = 0;
                while (1)
                {
                  v494 = *v3;
                  v495 = *(_QWORD *)(a2 + v494);
                  if (v495 == -1 || v495 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v496 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v495);
                  *(_QWORD *)(a2 + v494) = v495 + 1;
                  v493 |= (unint64_t)(v496 & 0x7F) << v491;
                  if (v496 < 0)
                  {
                    v491 += 7;
                    v14 = v492++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v27 = 0;
                v28 = 0;
                v29 = 0;
                while (1)
                {
                  v30 = *v3;
                  v31 = *(_QWORD *)(a2 + v30);
                  if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
                  *(_QWORD *)(a2 + v30) = v31 + 1;
                  v29 |= (unint64_t)(v32 & 0x7F) << v27;
                  if (v32 < 0)
                  {
                    v27 += 7;
                    v14 = v28++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_51;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
                PBRepeatedInt32Add();
              }
              break;
            case 2401:
              v40 = objc_alloc_init(_INPBNoteContent);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBNoteContentReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadNoteContent:", v40, 0, 0);
              goto LABEL_1350;
            case 2402:
              v40 = objc_alloc_init(_INPBTemporalEventTrigger);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBTemporalEventTriggerReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadTemporalEventTrigger:", v40, 0, 0);
              goto LABEL_1350;
            case 2403:
              v40 = objc_alloc_init(_INPBSpatialEventTrigger);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBSpatialEventTriggerReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadSpatialEventTrigger:", v40, 0, 0);
              goto LABEL_1350;
            case 2404:
              if (v17 != 2)
              {
                v565 = 0;
                v566 = 0;
                v567 = 0;
                while (1)
                {
                  v568 = *v3;
                  v569 = *(_QWORD *)(a2 + v568);
                  if (v569 == -1 || v569 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v570 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v569);
                  *(_QWORD *)(a2 + v568) = v569 + 1;
                  v567 |= (unint64_t)(v570 & 0x7F) << v565;
                  if (v570 < 0)
                  {
                    v565 += 7;
                    v14 = v566++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v123 = 0;
                v124 = 0;
                v125 = 0;
                while (1)
                {
                  v126 = *v3;
                  v127 = *(_QWORD *)(a2 + v126);
                  if (v127 == -1 || v127 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v128 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v127);
                  *(_QWORD *)(a2 + v126) = v127 + 1;
                  v125 |= (unint64_t)(v128 & 0x7F) << v123;
                  if (v128 < 0)
                  {
                    v123 += 7;
                    v14 = v124++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_323;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_323:
                PBRepeatedInt32Add();
              }
              break;
            case 2405:
              if (v17 != 2)
              {
                v571 = 0;
                v572 = 0;
                v573 = 0;
                while (1)
                {
                  v574 = *v3;
                  v575 = *(_QWORD *)(a2 + v574);
                  if (v575 == -1 || v575 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v576 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v575);
                  *(_QWORD *)(a2 + v574) = v575 + 1;
                  v573 |= (unint64_t)(v576 & 0x7F) << v571;
                  if (v576 < 0)
                  {
                    v571 += 7;
                    v14 = v572++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v129 = 0;
                v130 = 0;
                v131 = 0;
                while (1)
                {
                  v132 = *v3;
                  v133 = *(_QWORD *)(a2 + v132);
                  if (v133 == -1 || v133 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v134 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v133);
                  *(_QWORD *)(a2 + v132) = v133 + 1;
                  v131 |= (unint64_t)(v134 & 0x7F) << v129;
                  if (v134 < 0)
                  {
                    v129 += 7;
                    v14 = v130++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_336;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_336:
                PBRepeatedInt32Add();
              }
              break;
            case 2406:
            case 2413:
              goto LABEL_1351;
            case 2407:
              if (v17 != 2)
              {
                v577 = 0;
                v578 = 0;
                v579 = 0;
                while (1)
                {
                  v580 = *v3;
                  v581 = *(_QWORD *)(a2 + v580);
                  v582 = v581 + 1;
                  if (v581 == -1 || v582 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v583 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v581);
                  *(_QWORD *)(a2 + v580) = v582;
                  v579 |= (unint64_t)(v583 & 0x7F) << v577;
                  if (v583 < 0)
                  {
                    v577 += 7;
                    v14 = v578++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v135 = 0;
                v136 = 0;
                v137 = 0;
                while (1)
                {
                  v138 = *v3;
                  v139 = *(_QWORD *)(a2 + v138);
                  v140 = v139 + 1;
                  if (v139 == -1 || v140 > *(_QWORD *)(a2 + *v4))
                    break;
                  v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v139);
                  *(_QWORD *)(a2 + v138) = v140;
                  v137 |= (unint64_t)(v141 & 0x7F) << v135;
                  if (v141 < 0)
                  {
                    v135 += 7;
                    v14 = v136++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_349;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_349:
                PBRepeatedInt32Add();
              }
              break;
            case 2408:
              if (v17 != 2)
              {
                v584 = 0;
                v585 = 0;
                v586 = 0;
                while (1)
                {
                  v587 = *v3;
                  v588 = *(_QWORD *)(a2 + v587);
                  if (v588 == -1 || v588 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v589 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v588);
                  *(_QWORD *)(a2 + v587) = v588 + 1;
                  v586 |= (unint64_t)(v589 & 0x7F) << v584;
                  if (v589 < 0)
                  {
                    v584 += 7;
                    v14 = v585++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v142 = 0;
                v143 = 0;
                v144 = 0;
                while (1)
                {
                  v145 = *v3;
                  v146 = *(_QWORD *)(a2 + v145);
                  if (v146 == -1 || v146 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v147 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v146);
                  *(_QWORD *)(a2 + v145) = v146 + 1;
                  v144 |= (unint64_t)(v147 & 0x7F) << v142;
                  if (v147 < 0)
                  {
                    v142 += 7;
                    v14 = v143++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_362;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_362:
                PBRepeatedInt32Add();
              }
              break;
            case 2409:
              if (v17 != 2)
              {
                v590 = 0;
                v591 = 0;
                v592 = 0;
                while (1)
                {
                  v593 = *v3;
                  v594 = *(_QWORD *)(a2 + v593);
                  if (v594 == -1 || v594 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v595 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v594);
                  *(_QWORD *)(a2 + v593) = v594 + 1;
                  v592 |= (unint64_t)(v595 & 0x7F) << v590;
                  if (v595 < 0)
                  {
                    v590 += 7;
                    v14 = v591++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v148 = 0;
                v149 = 0;
                v150 = 0;
                while (1)
                {
                  v151 = *v3;
                  v152 = *(_QWORD *)(a2 + v151);
                  if (v152 == -1 || v152 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v153 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v152);
                  *(_QWORD *)(a2 + v151) = v152 + 1;
                  v150 |= (unint64_t)(v153 & 0x7F) << v148;
                  if (v153 < 0)
                  {
                    v148 += 7;
                    v14 = v149++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_375;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_375:
                PBRepeatedInt32Add();
              }
              break;
            case 2410:
              v40 = objc_alloc_init(_INPBTaskList);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadTaskList:", v40, 0, 0);
              goto LABEL_1350;
            case 2411:
              v40 = objc_alloc_init(_INPBTask);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadTask:", v40, 0, 0);
              goto LABEL_1350;
            case 2412:
              v40 = objc_alloc_init(_INPBNote);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadNote:", v40, 0, 0);
              goto LABEL_1350;
            case 2414:
              v40 = objc_alloc_init(_INPBContactEventTrigger);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBContactEventTriggerReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadContactEventTrigger:", v40, 0, 0);
              goto LABEL_1350;
            case 2415:
              if (v17 != 2)
              {
                v596 = 0;
                v597 = 0;
                v598 = 0;
                while (1)
                {
                  v599 = *v3;
                  v600 = *(_QWORD *)(a2 + v599);
                  if (v600 == -1 || v600 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v601 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v600);
                  *(_QWORD *)(a2 + v599) = v600 + 1;
                  v598 |= (unint64_t)(v601 & 0x7F) << v596;
                  if (v601 < 0)
                  {
                    v596 += 7;
                    v14 = v597++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v154 = 0;
                v155 = 0;
                v156 = 0;
                while (1)
                {
                  v157 = *v3;
                  v158 = *(_QWORD *)(a2 + v157);
                  if (v158 == -1 || v158 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v159 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v158);
                  *(_QWORD *)(a2 + v157) = v158 + 1;
                  v156 |= (unint64_t)(v159 & 0x7F) << v154;
                  if (v159 < 0)
                  {
                    v154 += 7;
                    v14 = v155++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_404;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_404:
                PBRepeatedInt32Add();
              }
              break;
            case 2416:
              if (v17 != 2)
              {
                v602 = 0;
                v603 = 0;
                v604 = 0;
                while (1)
                {
                  v605 = *v3;
                  v606 = *(_QWORD *)(a2 + v605);
                  if (v606 == -1 || v606 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v607 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v606);
                  *(_QWORD *)(a2 + v605) = v606 + 1;
                  v604 |= (unint64_t)(v607 & 0x7F) << v602;
                  if (v607 < 0)
                  {
                    v602 += 7;
                    v14 = v603++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v160 = 0;
                v161 = 0;
                v162 = 0;
                while (1)
                {
                  v163 = *v3;
                  v164 = *(_QWORD *)(a2 + v163);
                  if (v164 == -1 || v164 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v165 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v164);
                  *(_QWORD *)(a2 + v163) = v164 + 1;
                  v162 |= (unint64_t)(v165 & 0x7F) << v160;
                  if (v165 < 0)
                  {
                    v160 += 7;
                    v14 = v161++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_417;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_417:
                PBRepeatedInt32Add();
              }
              break;
            default:
              switch((int)v19)
              {
                case 2001:
                  if (v17 != 2)
                  {
                    v535 = 0;
                    v536 = 0;
                    v537 = 0;
                    while (1)
                    {
                      v538 = *v3;
                      v539 = *(_QWORD *)(a2 + v538);
                      if (v539 == -1 || v539 >= *(_QWORD *)(a2 + *v4))
                        goto LABEL_1834;
                      v540 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v539);
                      *(_QWORD *)(a2 + v538) = v539 + 1;
                      v537 |= (unint64_t)(v540 & 0x7F) << v535;
                      if (v540 < 0)
                      {
                        v535 += 7;
                        v14 = v536++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1835;
                    }
                  }
                  v910 = 0;
                  v911 = 0;
                  result = PBReaderPlaceMark();
                  if (!(_DWORD)result)
                    return result;
                  while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                  {
                    v85 = 0;
                    v86 = 0;
                    v87 = 0;
                    while (1)
                    {
                      v88 = *v3;
                      v89 = *(_QWORD *)(a2 + v88);
                      if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
                        break;
                      v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
                      *(_QWORD *)(a2 + v88) = v89 + 1;
                      v87 |= (unint64_t)(v90 & 0x7F) << v85;
                      if (v90 < 0)
                      {
                        v85 += 7;
                        v14 = v86++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_179;
                    }
                    *(_BYTE *)(a2 + *v5) = 1;
LABEL_179:
                    PBRepeatedInt32Add();
                  }
                  goto LABEL_1345;
                case 2002:
                  v40 = objc_alloc_init(_INPBNumericSettingValue);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBNumericSettingValueReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadNumericSettingValue:", v40, 0, 0);
                  goto LABEL_1350;
                case 2003:
                  if (v17 != 2)
                  {
                    v860 = 0;
                    v861 = 0;
                    v862 = 0;
                    while (1)
                    {
                      v863 = *v3;
                      v864 = *(_QWORD *)(a2 + v863);
                      if (v864 == -1 || v864 >= *(_QWORD *)(a2 + *v4))
                        goto LABEL_1834;
                      v865 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v864);
                      *(_QWORD *)(a2 + v863) = v864 + 1;
                      v862 |= (unint64_t)(v865 & 0x7F) << v860;
                      if (v865 < 0)
                      {
                        v860 += 7;
                        v14 = v861++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1835;
                    }
                  }
                  v910 = 0;
                  v911 = 0;
                  result = PBReaderPlaceMark();
                  if (!(_DWORD)result)
                    return result;
                  while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                  {
                    v435 = 0;
                    v436 = 0;
                    v437 = 0;
                    while (1)
                    {
                      v438 = *v3;
                      v439 = *(_QWORD *)(a2 + v438);
                      if (v439 == -1 || v439 >= *(_QWORD *)(a2 + *v4))
                        break;
                      v440 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v439);
                      *(_QWORD *)(a2 + v438) = v439 + 1;
                      v437 |= (unint64_t)(v440 & 0x7F) << v435;
                      if (v440 < 0)
                      {
                        v435 += 7;
                        v14 = v436++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1209;
                    }
                    *(_BYTE *)(a2 + *v5) = 1;
LABEL_1209:
                    PBRepeatedInt32Add();
                  }
                  goto LABEL_1345;
                case 2004:
                  v40 = objc_alloc_init(_INPBSettingMetadata);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadSettingMetadata:", v40, 0, 0);
                  goto LABEL_1350;
                case 2005:
                  if (v17 != 2)
                  {
                    v866 = 0;
                    v867 = 0;
                    v868 = 0;
                    while (1)
                    {
                      v869 = *v3;
                      v870 = *(_QWORD *)(a2 + v869);
                      v871 = v870 + 1;
                      if (v870 == -1 || v871 > *(_QWORD *)(a2 + *v4))
                        goto LABEL_1834;
                      v872 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v870);
                      *(_QWORD *)(a2 + v869) = v871;
                      v868 |= (unint64_t)(v872 & 0x7F) << v866;
                      if (v872 < 0)
                      {
                        v866 += 7;
                        v14 = v867++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1835;
                    }
                  }
                  v910 = 0;
                  v911 = 0;
                  result = PBReaderPlaceMark();
                  if (!(_DWORD)result)
                    return result;
                  while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                  {
                    v441 = 0;
                    v442 = 0;
                    v443 = 0;
                    while (1)
                    {
                      v444 = *v3;
                      v445 = *(_QWORD *)(a2 + v444);
                      v446 = v445 + 1;
                      if (v445 == -1 || v446 > *(_QWORD *)(a2 + *v4))
                        break;
                      v447 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v445);
                      *(_QWORD *)(a2 + v444) = v446;
                      v443 |= (unint64_t)(v447 & 0x7F) << v441;
                      if (v447 < 0)
                      {
                        v441 += 7;
                        v14 = v442++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1226;
                    }
                    *(_BYTE *)(a2 + *v5) = 1;
LABEL_1226:
                    PBRepeatedInt32Add();
                  }
                  goto LABEL_1345;
                case 2006:
                  if (v17 != 2)
                  {
                    v873 = 0;
                    v874 = 0;
                    v875 = 0;
                    while (1)
                    {
                      v876 = *v3;
                      v877 = *(_QWORD *)(a2 + v876);
                      v878 = v877 + 1;
                      if (v877 == -1 || v878 > *(_QWORD *)(a2 + *v4))
                        goto LABEL_1834;
                      v879 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v877);
                      *(_QWORD *)(a2 + v876) = v878;
                      v875 |= (unint64_t)(v879 & 0x7F) << v873;
                      if (v879 < 0)
                      {
                        v873 += 7;
                        v14 = v874++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1835;
                    }
                  }
                  v910 = 0;
                  v911 = 0;
                  result = PBReaderPlaceMark();
                  if (!(_DWORD)result)
                    return result;
                  while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                  {
                    v448 = 0;
                    v449 = 0;
                    v450 = 0;
                    while (1)
                    {
                      v451 = *v3;
                      v452 = *(_QWORD *)(a2 + v451);
                      v453 = v452 + 1;
                      if (v452 == -1 || v453 > *(_QWORD *)(a2 + *v4))
                        break;
                      v454 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v452);
                      *(_QWORD *)(a2 + v451) = v453;
                      v450 |= (unint64_t)(v454 & 0x7F) << v448;
                      if (v454 < 0)
                      {
                        v448 += 7;
                        v14 = v449++ >= 9;
                        if (!v14)
                          continue;
                      }
                      goto LABEL_1239;
                    }
                    *(_BYTE *)(a2 + *v5) = 1;
LABEL_1239:
                    PBRepeatedInt32Add();
                  }
                  break;
                case 2007:
                  v40 = objc_alloc_init(_INPBGetSettingResponseData);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBGetSettingResponseDataReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadGetSettingResponseData:", v40, 0, 0);
                  goto LABEL_1350;
                case 2008:
                  v40 = objc_alloc_init(_INPBDevice);
                  v910 = 0;
                  v911 = 0;
                  if (!PBReaderPlaceMark() || !_INPBDeviceReadFrom(v40, a2))
                    goto LABEL_1847;
                  PBReaderRecallMark();
                  if (v40)
                    objc_msgSend(a1, "addPayloadDevice:", v40, 0, 0);
                  goto LABEL_1350;
                default:
                  goto LABEL_1351;
              }
              break;
          }
        }
      }
      else if ((int)v19 <= 1000)
      {
        switch((int)v19)
        {
          case 1:
            v33 = 0;
            v34 = 0;
            v35 = 0;
            while (2)
            {
              v36 = *v3;
              v37 = *(_QWORD *)(a2 + v36);
              if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                *(_QWORD *)(a2 + v36) = v37 + 1;
                v35 |= (unint64_t)(v38 & 0x7F) << v33;
                if (v38 < 0)
                {
                  v33 += 7;
                  v14 = v34++ >= 9;
                  if (v14)
                  {
                    v39 = 0;
                    goto LABEL_1357;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              v39 = 0;
            else
              v39 = v35;
LABEL_1357:
            objc_msgSend(a1, "setType:", v39, v910, v911);
            continue;
          case 2:
            v40 = objc_alloc_init(_INPBStringValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadStringValue:", v40, 0, 0);
            goto LABEL_1350;
          case 3:
            v40 = objc_alloc_init(_INPBDoubleValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDoubleValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDoubleValue:", v40, 0, 0);
            goto LABEL_1350;
          case 4:
            v40 = objc_alloc_init(_INPBIntegerValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBIntegerValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadIntegerValue:", v40, 0, 0);
            goto LABEL_1350;
          case 5:
            v40 = objc_alloc_init(_INPBContactValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadContactValue:", v40, 0, 0);
            goto LABEL_1350;
          case 6:
            v40 = objc_alloc_init(_INPBDateTimeRangeValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDateTimeRangeValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDateTimeRangeValue:", v40, 0, 0);
            goto LABEL_1350;
          case 7:
            v40 = objc_alloc_init(_INPBLocationValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadLocation:", v40, 0, 0);
            goto LABEL_1350;
          case 8:
            v40 = objc_alloc_init(_INPBDataString);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDataString:", v40, 0, 0);
            goto LABEL_1350;
          case 9:
            v40 = objc_alloc_init(_INPBLongValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBLongValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadLongValue:", v40, 0, 0);
            goto LABEL_1350;
          case 10:
            v40 = objc_alloc_init(_INPBPaymentMethodValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBPaymentMethodValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadPaymentMethodValue:", v40, 0, 0);
            goto LABEL_1350;
          case 11:
            v40 = objc_alloc_init(_INPBTemperatureValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBTemperatureValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadTemperatureValue:", v40, 0, 0);
            goto LABEL_1350;
          case 12:
            v40 = objc_alloc_init(_INPBDistanceValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDistanceValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDistanceValue:", v40, 0, 0);
            goto LABEL_1350;
          case 13:
            v40 = objc_alloc_init(_INPBDateTime);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDateTimeReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDateTimeValue:", v40, 0, 0);
            goto LABEL_1350;
          case 14:
            v40 = objc_alloc_init(_INPBMassValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBMassValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadMassValue:", v40, 0, 0);
            goto LABEL_1350;
          case 15:
            v40 = objc_alloc_init(_INPBVolumeValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBVolumeValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadVolumeValue:", v40, 0, 0);
            goto LABEL_1350;
          case 16:
            v40 = objc_alloc_init(_INPBSpeedValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBSpeedValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadSpeedValue:", v40, 0, 0);
            goto LABEL_1350;
          case 17:
            v40 = objc_alloc_init(_INPBEnergyValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBEnergyValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadEnergyValue:", v40, 0, 0);
            goto LABEL_1350;
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
            goto LABEL_1351;
          case 50:
            v40 = objc_alloc_init(_INPBStringList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadStringList:", v40, 0, 0);
            goto LABEL_1350;
          case 51:
            v40 = objc_alloc_init(_INPBDoubleList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDoubleListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDoubleList:", v40, 0, 0);
            goto LABEL_1350;
          case 52:
            v40 = objc_alloc_init(_INPBIntegerList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBIntegerListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadIntegerList:", v40, 0, 0);
            goto LABEL_1350;
          case 53:
            v40 = objc_alloc_init(_INPBContactList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBContactListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadContactList:", v40, 0, 0);
            goto LABEL_1350;
          case 54:
            v40 = objc_alloc_init(_INPBDateTimeRangeList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDateTimeRangeListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDateTimeRangeList:", v40, 0, 0);
            goto LABEL_1350;
          case 55:
            v40 = objc_alloc_init(_INPBLocationList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBLocationListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadLocationList:", v40, 0, 0);
            goto LABEL_1350;
          case 56:
            v40 = objc_alloc_init(_INPBDataStringList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDataStringListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDataStringList:", v40, 0, 0);
            goto LABEL_1350;
          case 57:
            v40 = objc_alloc_init(_INPBLongList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBLongListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadLongList:", v40, 0, 0);
            goto LABEL_1350;
          case 58:
            v40 = objc_alloc_init(_INPBPaymentMethodList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBPaymentMethodListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadPaymentMethodList:", v40, 0, 0);
            goto LABEL_1350;
          case 59:
            v40 = objc_alloc_init(_INPBTemperatureList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBTemperatureListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadTemperatureList:", v40, 0, 0);
            goto LABEL_1350;
          case 60:
            v40 = objc_alloc_init(_INPBDistanceList);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDistanceListReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDistanceList:", v40, 0, 0);
            goto LABEL_1350;
          default:
            switch((int)v19)
            {
              case 'd':
                v60 = 0;
                v61 = 0;
                v62 = 0;
                while (2)
                {
                  v63 = *v3;
                  v64 = *(_QWORD *)(a2 + v63);
                  if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
                  {
                    *(_BYTE *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
                    *(_QWORD *)(a2 + v63) = v64 + 1;
                    v62 |= (unint64_t)(v65 & 0x7F) << v60;
                    if (v65 < 0)
                    {
                      v60 += 7;
                      v14 = v61++ >= 9;
                      if (v14)
                      {
                        v62 = 0;
                        goto LABEL_1361;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(_BYTE *)(a2 + *v5))
                  v62 = 0;
LABEL_1361:
                objc_msgSend(a1, "addPayloadPrimitiveBool:", v62 != 0);
                continue;
              case 'e':
                v305 = 0;
                v306 = 0;
                v307 = 0;
                while (2)
                {
                  v308 = *v3;
                  v309 = *(_QWORD *)(a2 + v308);
                  if (v309 == -1 || v309 >= *(_QWORD *)(a2 + *v4))
                  {
                    *(_BYTE *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    v310 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v309);
                    *(_QWORD *)(a2 + v308) = v309 + 1;
                    v307 |= (unint64_t)(v310 & 0x7F) << v305;
                    if (v310 < 0)
                    {
                      v305 += 7;
                      v14 = v306++ >= 9;
                      if (v14)
                      {
                        v311 = 0;
                        goto LABEL_1366;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(_BYTE *)(a2 + *v5))
                  v311 = 0;
                else
                  v311 = v307;
LABEL_1366:
                objc_msgSend(a1, "addPayloadPrimitiveInt:", v311, v910, v911);
                continue;
              case 'f':
                v312 = 0;
                v313 = 0;
                v314 = 0;
                while (2)
                {
                  v315 = *v3;
                  v316 = *(_QWORD *)(a2 + v315);
                  if (v316 == -1 || v316 >= *(_QWORD *)(a2 + *v4))
                  {
                    *(_BYTE *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    v317 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v316);
                    *(_QWORD *)(a2 + v315) = v316 + 1;
                    v314 |= (unint64_t)(v317 & 0x7F) << v312;
                    if (v317 < 0)
                    {
                      v312 += 7;
                      v14 = v313++ >= 9;
                      if (v14)
                      {
                        v318 = 0;
                        goto LABEL_1371;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(_BYTE *)(a2 + *v5))
                  v318 = 0;
                else
                  v318 = v314;
LABEL_1371:
                objc_msgSend(a1, "addPayloadPrimitiveLong:", v318, v910, v911);
                continue;
              case 'g':
                v319 = *v3;
                v320 = *(_QWORD *)(a2 + v319);
                if (v320 <= 0xFFFFFFFFFFFFFFF7 && v320 + 8 <= *(_QWORD *)(a2 + *v4))
                {
                  v321 = *(double *)(*(_QWORD *)(a2 + *v7) + v320);
                  *(_QWORD *)(a2 + v319) = v320 + 8;
                }
                else
                {
                  *(_BYTE *)(a2 + v15) = 1;
                  v321 = 0.0;
                }
                objc_msgSend(a1, "addPayloadPrimitiveDouble:", v321, v910, v911);
                continue;
              case 'h':
                PBReaderReadString();
                v40 = (_INPBHomeEntity *)objc_claimAutoreleasedReturnValue();
                if (v40)
                  objc_msgSend(a1, "addPayloadPrimitiveString:", v40);
                goto LABEL_1350;
              case 'i':
              case 'j':
                goto LABEL_1351;
              case 'k':
                v40 = objc_alloc_init(_INPBIntent);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBIntentReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadIntent:", v40, 0, 0);
                goto LABEL_1350;
              case 'l':
                v40 = objc_alloc_init(_INPBModifyRelationship);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBModifyRelationshipReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadModifyRelationship:", v40, 0, 0);
                goto LABEL_1350;
              case 'm':
                v40 = objc_alloc_init(_INPBModifyNickname);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBModifyNicknameReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadModifyNickname:", v40, 0, 0);
                goto LABEL_1350;
              case 'n':
                v40 = objc_alloc_init(_INPBCalendarEvent);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBCalendarEventReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadCalendarEvent:", v40, 0, 0);
                goto LABEL_1350;
              case 'o':
                v40 = objc_alloc_init(_INPBEventParticipant);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBEventParticipantReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadEventParticipant:", v40, 0, 0);
                goto LABEL_1350;
              case 'p':
                if (v17 != 2)
                {
                  v747 = 0;
                  v748 = 0;
                  v749 = 0;
                  while (1)
                  {
                    v750 = *v3;
                    v751 = *(_QWORD *)(a2 + v750);
                    v752 = v751 + 1;
                    if (v751 == -1 || v752 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v753 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v751);
                    *(_QWORD *)(a2 + v750) = v752;
                    v749 |= (unint64_t)(v753 & 0x7F) << v747;
                    if (v753 < 0)
                    {
                      v747 += 7;
                      v14 = v748++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v322 = 0;
                  v323 = 0;
                  v324 = 0;
                  while (1)
                  {
                    v325 = *v3;
                    v326 = *(_QWORD *)(a2 + v325);
                    v327 = v326 + 1;
                    if (v326 == -1 || v327 > *(_QWORD *)(a2 + *v4))
                      break;
                    v328 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v326);
                    *(_QWORD *)(a2 + v325) = v327;
                    v324 |= (unint64_t)(v328 & 0x7F) << v322;
                    if (v328 < 0)
                    {
                      v322 += 7;
                      v14 = v323++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_922;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_922:
                  PBRepeatedInt32Add();
                }
                break;
              default:
                if ((_DWORD)v19 != 200)
                  goto LABEL_1351;
                v109 = 0;
                v110 = 0;
                v111 = 0;
                while (2)
                {
                  v112 = *v3;
                  v113 = *(_QWORD *)(a2 + v112);
                  v114 = v113 + 1;
                  if (v113 == -1 || v114 > *(_QWORD *)(a2 + *v4))
                  {
                    *(_BYTE *)(a2 + *v5) = 1;
                  }
                  else
                  {
                    v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
                    *(_QWORD *)(a2 + v112) = v114;
                    v111 |= (unint64_t)(v115 & 0x7F) << v109;
                    if (v115 < 0)
                    {
                      v109 += 7;
                      v14 = v110++ >= 9;
                      if (v14)
                      {
                        v116 = 0;
                        goto LABEL_1842;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (*(_BYTE *)(a2 + *v5))
                  v116 = 0;
                else
                  v116 = v111;
LABEL_1842:
                objc_msgSend(a1, "addPayloadEnumeration:", v116, v910, v911);
                continue;
            }
            break;
        }
      }
      else if ((int)v19 <= 1400)
      {
        if ((int)v19 > 1199)
        {
          switch((int)v19)
          {
            case 1301:
              if (v17 != 2)
              {
                v516 = 0;
                v517 = 0;
                v518 = 0;
                while (1)
                {
                  v519 = *v3;
                  v520 = *(_QWORD *)(a2 + v519);
                  v521 = v520 + 1;
                  if (v520 == -1 || v521 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v522 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v520);
                  *(_QWORD *)(a2 + v519) = v521;
                  v518 |= (unint64_t)(v522 & 0x7F) << v516;
                  if (v522 < 0)
                  {
                    v516 += 7;
                    v14 = v517++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v66 = 0;
                v67 = 0;
                v68 = 0;
                while (1)
                {
                  v69 = *v3;
                  v70 = *(_QWORD *)(a2 + v69);
                  v71 = v70 + 1;
                  if (v70 == -1 || v71 > *(_QWORD *)(a2 + *v4))
                    break;
                  v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
                  *(_QWORD *)(a2 + v69) = v71;
                  v68 |= (unint64_t)(v72 & 0x7F) << v66;
                  if (v72 < 0)
                  {
                    v66 += 7;
                    v14 = v67++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_137;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_137:
                PBRepeatedInt32Add();
              }
              break;
            case 1302:
              if (v17 != 2)
              {
                v788 = 0;
                v789 = 0;
                v790 = 0;
                while (1)
                {
                  v791 = *v3;
                  v792 = *(_QWORD *)(a2 + v791);
                  v793 = v792 + 1;
                  if (v792 == -1 || v793 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v794 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v792);
                  *(_QWORD *)(a2 + v791) = v793;
                  v790 |= (unint64_t)(v794 & 0x7F) << v788;
                  if (v794 < 0)
                  {
                    v788 += 7;
                    v14 = v789++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v363 = 0;
                v364 = 0;
                v365 = 0;
                while (1)
                {
                  v366 = *v3;
                  v367 = *(_QWORD *)(a2 + v366);
                  v368 = v367 + 1;
                  if (v367 == -1 || v368 > *(_QWORD *)(a2 + *v4))
                    break;
                  v369 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v367);
                  *(_QWORD *)(a2 + v366) = v368;
                  v365 |= (unint64_t)(v369 & 0x7F) << v363;
                  if (v369 < 0)
                  {
                    v363 += 7;
                    v14 = v364++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1020;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_1020:
                PBRepeatedInt32Add();
              }
              break;
            case 1303:
              if (v17 != 2)
              {
                v795 = 0;
                v796 = 0;
                v797 = 0;
                while (1)
                {
                  v798 = *v3;
                  v799 = *(_QWORD *)(a2 + v798);
                  if (v799 == -1 || v799 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v800 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v799);
                  *(_QWORD *)(a2 + v798) = v799 + 1;
                  v797 |= (unint64_t)(v800 & 0x7F) << v795;
                  if (v800 < 0)
                  {
                    v795 += 7;
                    v14 = v796++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v370 = 0;
                v371 = 0;
                v372 = 0;
                while (1)
                {
                  v373 = *v3;
                  v374 = *(_QWORD *)(a2 + v373);
                  if (v374 == -1 || v374 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v375 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v374);
                  *(_QWORD *)(a2 + v373) = v374 + 1;
                  v372 |= (unint64_t)(v375 & 0x7F) << v370;
                  if (v375 < 0)
                  {
                    v370 += 7;
                    v14 = v371++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1033;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_1033:
                PBRepeatedInt32Add();
              }
              break;
            case 1304:
              if (v17 != 2)
              {
                v801 = 0;
                v802 = 0;
                v803 = 0;
                while (1)
                {
                  v804 = *v3;
                  v805 = *(_QWORD *)(a2 + v804);
                  v806 = v805 + 1;
                  if (v805 == -1 || v806 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v807 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v805);
                  *(_QWORD *)(a2 + v804) = v806;
                  v803 |= (unint64_t)(v807 & 0x7F) << v801;
                  if (v807 < 0)
                  {
                    v801 += 7;
                    v14 = v802++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v376 = 0;
                v377 = 0;
                v378 = 0;
                while (1)
                {
                  v379 = *v3;
                  v380 = *(_QWORD *)(a2 + v379);
                  v381 = v380 + 1;
                  if (v380 == -1 || v381 > *(_QWORD *)(a2 + *v4))
                    break;
                  v382 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v380);
                  *(_QWORD *)(a2 + v379) = v381;
                  v378 |= (unint64_t)(v382 & 0x7F) << v376;
                  if (v382 < 0)
                  {
                    v376 += 7;
                    v14 = v377++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1046;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_1046:
                PBRepeatedInt32Add();
              }
              break;
            case 1305:
              if (v17 != 2)
              {
                v808 = 0;
                v809 = 0;
                v810 = 0;
                while (1)
                {
                  v811 = *v3;
                  v812 = *(_QWORD *)(a2 + v811);
                  v813 = v812 + 1;
                  if (v812 == -1 || v813 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v814 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v812);
                  *(_QWORD *)(a2 + v811) = v813;
                  v810 |= (unint64_t)(v814 & 0x7F) << v808;
                  if (v814 < 0)
                  {
                    v808 += 7;
                    v14 = v809++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v383 = 0;
                v384 = 0;
                v385 = 0;
                while (1)
                {
                  v386 = *v3;
                  v387 = *(_QWORD *)(a2 + v386);
                  v388 = v387 + 1;
                  if (v387 == -1 || v388 > *(_QWORD *)(a2 + *v4))
                    break;
                  v389 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v387);
                  *(_QWORD *)(a2 + v386) = v388;
                  v385 |= (unint64_t)(v389 & 0x7F) << v383;
                  if (v389 < 0)
                  {
                    v383 += 7;
                    v14 = v384++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1059;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_1059:
                PBRepeatedInt32Add();
              }
              break;
            case 1306:
              if (v17 != 2)
              {
                v815 = 0;
                v816 = 0;
                v817 = 0;
                while (1)
                {
                  v818 = *v3;
                  v819 = *(_QWORD *)(a2 + v818);
                  if (v819 == -1 || v819 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v820 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v819);
                  *(_QWORD *)(a2 + v818) = v819 + 1;
                  v817 |= (unint64_t)(v820 & 0x7F) << v815;
                  if (v820 < 0)
                  {
                    v815 += 7;
                    v14 = v816++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v390 = 0;
                v391 = 0;
                v392 = 0;
                while (1)
                {
                  v393 = *v3;
                  v394 = *(_QWORD *)(a2 + v393);
                  if (v394 == -1 || v394 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v395 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v394);
                  *(_QWORD *)(a2 + v393) = v394 + 1;
                  v392 |= (unint64_t)(v395 & 0x7F) << v390;
                  if (v395 < 0)
                  {
                    v390 += 7;
                    v14 = v391++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1072;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_1072:
                PBRepeatedInt32Add();
              }
              break;
            case 1307:
              if (v17 != 2)
              {
                v821 = 0;
                v822 = 0;
                v823 = 0;
                while (1)
                {
                  v824 = *v3;
                  v825 = *(_QWORD *)(a2 + v824);
                  v826 = v825 + 1;
                  if (v825 == -1 || v826 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v827 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v825);
                  *(_QWORD *)(a2 + v824) = v826;
                  v823 |= (unint64_t)(v827 & 0x7F) << v821;
                  if (v827 < 0)
                  {
                    v821 += 7;
                    v14 = v822++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v396 = 0;
                v397 = 0;
                v398 = 0;
                while (1)
                {
                  v399 = *v3;
                  v400 = *(_QWORD *)(a2 + v399);
                  v401 = v400 + 1;
                  if (v400 == -1 || v401 > *(_QWORD *)(a2 + *v4))
                    break;
                  v402 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v400);
                  *(_QWORD *)(a2 + v399) = v401;
                  v398 |= (unint64_t)(v402 & 0x7F) << v396;
                  if (v402 < 0)
                  {
                    v396 += 7;
                    v14 = v397++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1085;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_1085:
                PBRepeatedInt32Add();
              }
              break;
            case 1308:
              PBReaderReadString();
              v40 = (_INPBHomeEntity *)objc_claimAutoreleasedReturnValue();
              if (v40)
                objc_msgSend(a1, "addPayloadChargingConnectorType:", v40);
              goto LABEL_1350;
            default:
              if ((_DWORD)v19 == 1200)
              {
                v40 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark()
                  || !_INPBSupportedTrafficIncidentTypeReadFrom(v40, a2))
                {
                  goto LABEL_1847;
                }
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadSupportedTrafficIncidentType:", v40, 0, 0);
                goto LABEL_1350;
              }
              if ((_DWORD)v19 != 1201)
                goto LABEL_1351;
              if (v17 != 2)
              {
                v553 = 0;
                v554 = 0;
                v555 = 0;
                while (1)
                {
                  v556 = *v3;
                  v557 = *(_QWORD *)(a2 + v556);
                  if (v557 == -1 || v557 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v558 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v557);
                  *(_QWORD *)(a2 + v556) = v557 + 1;
                  v555 |= (unint64_t)(v558 & 0x7F) << v553;
                  if (v558 < 0)
                  {
                    v553 += 7;
                    v14 = v554++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v103 = 0;
                v104 = 0;
                v105 = 0;
                while (1)
                {
                  v106 = *v3;
                  v107 = *(_QWORD *)(a2 + v106);
                  if (v107 == -1 || v107 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v107);
                  *(_QWORD *)(a2 + v106) = v107 + 1;
                  v105 |= (unint64_t)(v108 & 0x7F) << v103;
                  if (v108 < 0)
                  {
                    v103 += 7;
                    v14 = v104++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_235;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_235:
                PBRepeatedInt32Add();
              }
              break;
          }
        }
        else
        {
          switch((int)v19)
          {
            case 1001:
              if (v17 != 2)
              {
                v503 = 0;
                v504 = 0;
                v505 = 0;
                while (1)
                {
                  v506 = *v3;
                  v507 = *(_QWORD *)(a2 + v506);
                  v508 = v507 + 1;
                  if (v507 == -1 || v508 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v509 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v507);
                  *(_QWORD *)(a2 + v506) = v508;
                  v505 |= (unint64_t)(v509 & 0x7F) << v503;
                  if (v509 < 0)
                  {
                    v503 += 7;
                    v14 = v504++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v47 = 0;
                v48 = 0;
                v49 = 0;
                while (1)
                {
                  v50 = *v3;
                  v51 = *(_QWORD *)(a2 + v50);
                  v52 = v51 + 1;
                  if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v4))
                    break;
                  v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
                  *(_QWORD *)(a2 + v50) = v52;
                  v49 |= (unint64_t)(v53 & 0x7F) << v47;
                  if (v53 < 0)
                  {
                    v47 += 7;
                    v14 = v48++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_95;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
                PBRepeatedInt32Add();
              }
              break;
            case 1002:
              if (v17 != 2)
              {
                v687 = 0;
                v688 = 0;
                v689 = 0;
                while (1)
                {
                  v690 = *v3;
                  v691 = *(_QWORD *)(a2 + v690);
                  v692 = v691 + 1;
                  if (v691 == -1 || v692 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v693 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v691);
                  *(_QWORD *)(a2 + v690) = v692;
                  v689 |= (unint64_t)(v693 & 0x7F) << v687;
                  if (v693 < 0)
                  {
                    v687 += 7;
                    v14 = v688++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v245 = 0;
                v246 = 0;
                v247 = 0;
                while (1)
                {
                  v248 = *v3;
                  v249 = *(_QWORD *)(a2 + v248);
                  v250 = v249 + 1;
                  if (v249 == -1 || v250 > *(_QWORD *)(a2 + *v4))
                    break;
                  v251 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v249);
                  *(_QWORD *)(a2 + v248) = v250;
                  v247 |= (unint64_t)(v251 & 0x7F) << v245;
                  if (v251 < 0)
                  {
                    v245 += 7;
                    v14 = v246++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_750;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_750:
                PBRepeatedInt32Add();
              }
              break;
            case 1003:
              if (v17 != 2)
              {
                v694 = 0;
                v695 = 0;
                v696 = 0;
                while (1)
                {
                  v697 = *v3;
                  v698 = *(_QWORD *)(a2 + v697);
                  v699 = v698 + 1;
                  if (v698 == -1 || v699 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v700 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v698);
                  *(_QWORD *)(a2 + v697) = v699;
                  v696 |= (unint64_t)(v700 & 0x7F) << v694;
                  if (v700 < 0)
                  {
                    v694 += 7;
                    v14 = v695++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v252 = 0;
                v253 = 0;
                v254 = 0;
                while (1)
                {
                  v255 = *v3;
                  v256 = *(_QWORD *)(a2 + v255);
                  v257 = v256 + 1;
                  if (v256 == -1 || v257 > *(_QWORD *)(a2 + *v4))
                    break;
                  v258 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v256);
                  *(_QWORD *)(a2 + v255) = v257;
                  v254 |= (unint64_t)(v258 & 0x7F) << v252;
                  if (v258 < 0)
                  {
                    v252 += 7;
                    v14 = v253++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_763;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_763:
                PBRepeatedInt32Add();
              }
              break;
            case 1004:
              if (v17 != 2)
              {
                v701 = 0;
                v702 = 0;
                v703 = 0;
                while (1)
                {
                  v704 = *v3;
                  v705 = *(_QWORD *)(a2 + v704);
                  v706 = v705 + 1;
                  if (v705 == -1 || v706 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v707 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v705);
                  *(_QWORD *)(a2 + v704) = v706;
                  v703 |= (unint64_t)(v707 & 0x7F) << v701;
                  if (v707 < 0)
                  {
                    v701 += 7;
                    v14 = v702++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v259 = 0;
                v260 = 0;
                v261 = 0;
                while (1)
                {
                  v262 = *v3;
                  v263 = *(_QWORD *)(a2 + v262);
                  v264 = v263 + 1;
                  if (v263 == -1 || v264 > *(_QWORD *)(a2 + *v4))
                    break;
                  v265 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v263);
                  *(_QWORD *)(a2 + v262) = v264;
                  v261 |= (unint64_t)(v265 & 0x7F) << v259;
                  if (v265 < 0)
                  {
                    v259 += 7;
                    v14 = v260++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_776;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_776:
                PBRepeatedInt32Add();
              }
              break;
            case 1005:
              v40 = objc_alloc_init(_INPBFilePropertyValue);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBFilePropertyValueReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadFilePropertyValue:", v40, 0, 0);
              goto LABEL_1350;
            case 1006:
              v40 = objc_alloc_init(_INPBFileProperty);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBFilePropertyReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadFileProperty:", v40, 0, 0);
              goto LABEL_1350;
            case 1007:
              if (v17 != 2)
              {
                v708 = 0;
                v709 = 0;
                v710 = 0;
                while (1)
                {
                  v711 = *v3;
                  v712 = *(_QWORD *)(a2 + v711);
                  v713 = v712 + 1;
                  if (v712 == -1 || v713 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v714 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v712);
                  *(_QWORD *)(a2 + v711) = v713;
                  v710 |= (unint64_t)(v714 & 0x7F) << v708;
                  if (v714 < 0)
                  {
                    v708 += 7;
                    v14 = v709++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v266 = 0;
                v267 = 0;
                v268 = 0;
                while (1)
                {
                  v269 = *v3;
                  v270 = *(_QWORD *)(a2 + v269);
                  v271 = v270 + 1;
                  if (v270 == -1 || v271 > *(_QWORD *)(a2 + *v4))
                    break;
                  v272 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v270);
                  *(_QWORD *)(a2 + v269) = v271;
                  v268 |= (unint64_t)(v272 & 0x7F) << v266;
                  if (v272 < 0)
                  {
                    v266 += 7;
                    v14 = v267++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_797;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_797:
                PBRepeatedInt32Add();
              }
              break;
            case 1008:
              if (v17 != 2)
              {
                v715 = 0;
                v716 = 0;
                v717 = 0;
                while (1)
                {
                  v718 = *v3;
                  v719 = *(_QWORD *)(a2 + v718);
                  v720 = v719 + 1;
                  if (v719 == -1 || v720 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v721 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v719);
                  *(_QWORD *)(a2 + v718) = v720;
                  v717 |= (unint64_t)(v721 & 0x7F) << v715;
                  if (v721 < 0)
                  {
                    v715 += 7;
                    v14 = v716++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v273 = 0;
                v274 = 0;
                v275 = 0;
                while (1)
                {
                  v276 = *v3;
                  v277 = *(_QWORD *)(a2 + v276);
                  v278 = v277 + 1;
                  if (v277 == -1 || v278 > *(_QWORD *)(a2 + *v4))
                    break;
                  v279 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v277);
                  *(_QWORD *)(a2 + v276) = v278;
                  v275 |= (unint64_t)(v279 & 0x7F) << v273;
                  if (v279 < 0)
                  {
                    v273 += 7;
                    v14 = v274++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_810;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_810:
                PBRepeatedInt32Add();
              }
              break;
            case 1009:
              if (v17 != 2)
              {
                v722 = 0;
                v723 = 0;
                v724 = 0;
                while (1)
                {
                  v725 = *v3;
                  v726 = *(_QWORD *)(a2 + v725);
                  v727 = v726 + 1;
                  if (v726 == -1 || v727 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_1834;
                  v728 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v726);
                  *(_QWORD *)(a2 + v725) = v727;
                  v724 |= (unint64_t)(v728 & 0x7F) << v722;
                  if (v728 < 0)
                  {
                    v722 += 7;
                    v14 = v723++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_1835;
                }
              }
              v910 = 0;
              v911 = 0;
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v280 = 0;
                v281 = 0;
                v282 = 0;
                while (1)
                {
                  v283 = *v3;
                  v284 = *(_QWORD *)(a2 + v283);
                  v285 = v284 + 1;
                  if (v284 == -1 || v285 > *(_QWORD *)(a2 + *v4))
                    break;
                  v286 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v284);
                  *(_QWORD *)(a2 + v283) = v285;
                  v282 |= (unint64_t)(v286 & 0x7F) << v280;
                  if (v286 < 0)
                  {
                    v280 += 7;
                    v14 = v281++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_823;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_823:
                PBRepeatedInt32Add();
              }
              break;
            case 1010:
              v40 = objc_alloc_init(_INPBShareDestination);
              v910 = 0;
              v911 = 0;
              if (!PBReaderPlaceMark() || !_INPBShareDestinationReadFrom(v40, a2))
                goto LABEL_1847;
              PBReaderRecallMark();
              if (v40)
                objc_msgSend(a1, "addPayloadShareDestination:", v40, 0, 0);
              goto LABEL_1350;
            default:
              goto LABEL_1351;
          }
        }
      }
      else
      {
        switch((int)v19)
        {
          case 1401:
            v40 = objc_alloc_init(_INPBDialingContact);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadDialingContact:", v40, 0, 0);
            goto LABEL_1350;
          case 1402:
            if (v17 != 2)
            {
              v754 = 0;
              v755 = 0;
              v756 = 0;
              while (1)
              {
                v757 = *v3;
                v758 = *(_QWORD *)(a2 + v757);
                v759 = v758 + 1;
                if (v758 == -1 || v759 > *(_QWORD *)(a2 + *v4))
                  goto LABEL_1834;
                v760 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v758);
                *(_QWORD *)(a2 + v757) = v759;
                v756 |= (unint64_t)(v760 & 0x7F) << v754;
                if (v760 < 0)
                {
                  v754 += 7;
                  v14 = v755++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_1835;
              }
            }
            v910 = 0;
            v911 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v329 = 0;
              v330 = 0;
              v331 = 0;
              while (1)
              {
                v332 = *v3;
                v333 = *(_QWORD *)(a2 + v332);
                v334 = v333 + 1;
                if (v333 == -1 || v334 > *(_QWORD *)(a2 + *v4))
                  break;
                v335 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v333);
                *(_QWORD *)(a2 + v332) = v334;
                v331 |= (unint64_t)(v335 & 0x7F) << v329;
                if (v335 < 0)
                {
                  v329 += 7;
                  v14 = v330++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_935;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_935:
              PBRepeatedInt32Add();
            }
            break;
          case 1403:
            if (v17 != 2)
            {
              v761 = 0;
              v762 = 0;
              v763 = 0;
              while (1)
              {
                v764 = *v3;
                v765 = *(_QWORD *)(a2 + v764);
                v766 = v765 + 1;
                if (v765 == -1 || v766 > *(_QWORD *)(a2 + *v4))
                  goto LABEL_1834;
                v767 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v765);
                *(_QWORD *)(a2 + v764) = v766;
                v763 |= (unint64_t)(v767 & 0x7F) << v761;
                if (v767 < 0)
                {
                  v761 += 7;
                  v14 = v762++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_1835;
              }
            }
            v910 = 0;
            v911 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v336 = 0;
              v337 = 0;
              v338 = 0;
              while (1)
              {
                v339 = *v3;
                v340 = *(_QWORD *)(a2 + v339);
                v341 = v340 + 1;
                if (v340 == -1 || v341 > *(_QWORD *)(a2 + *v4))
                  break;
                v342 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v340);
                *(_QWORD *)(a2 + v339) = v341;
                v338 |= (unint64_t)(v342 & 0x7F) << v336;
                if (v342 < 0)
                {
                  v336 += 7;
                  v14 = v337++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_948;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_948:
              PBRepeatedInt32Add();
            }
            break;
          case 1404:
            if (v17 != 2)
            {
              v768 = 0;
              v769 = 0;
              v770 = 0;
              while (1)
              {
                v771 = *v3;
                v772 = *(_QWORD *)(a2 + v771);
                v773 = v772 + 1;
                if (v772 == -1 || v773 > *(_QWORD *)(a2 + *v4))
                  goto LABEL_1834;
                v774 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v772);
                *(_QWORD *)(a2 + v771) = v773;
                v770 |= (unint64_t)(v774 & 0x7F) << v768;
                if (v774 < 0)
                {
                  v768 += 7;
                  v14 = v769++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_1835;
              }
            }
            v910 = 0;
            v911 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v343 = 0;
              v344 = 0;
              v345 = 0;
              while (1)
              {
                v346 = *v3;
                v347 = *(_QWORD *)(a2 + v346);
                v348 = v347 + 1;
                if (v347 == -1 || v348 > *(_QWORD *)(a2 + *v4))
                  break;
                v349 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v347);
                *(_QWORD *)(a2 + v346) = v348;
                v345 |= (unint64_t)(v349 & 0x7F) << v343;
                if (v349 < 0)
                {
                  v343 += 7;
                  v14 = v344++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_961;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_961:
              PBRepeatedInt32Add();
            }
            break;
          case 1405:
            if (v17 != 2)
            {
              v775 = 0;
              v776 = 0;
              v777 = 0;
              while (1)
              {
                v778 = *v3;
                v779 = *(_QWORD *)(a2 + v778);
                v780 = v779 + 1;
                if (v779 == -1 || v780 > *(_QWORD *)(a2 + *v4))
                  goto LABEL_1834;
                v781 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v779);
                *(_QWORD *)(a2 + v778) = v780;
                v777 |= (unint64_t)(v781 & 0x7F) << v775;
                if (v781 < 0)
                {
                  v775 += 7;
                  v14 = v776++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_1835;
              }
            }
            v910 = 0;
            v911 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v350 = 0;
              v351 = 0;
              v352 = 0;
              while (1)
              {
                v353 = *v3;
                v354 = *(_QWORD *)(a2 + v353);
                v355 = v354 + 1;
                if (v354 == -1 || v355 > *(_QWORD *)(a2 + *v4))
                  break;
                v356 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v354);
                *(_QWORD *)(a2 + v353) = v355;
                v352 |= (unint64_t)(v356 & 0x7F) << v350;
                if (v356 < 0)
                {
                  v350 += 7;
                  v14 = v351++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_974;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_974:
              PBRepeatedInt32Add();
            }
            break;
          case 1406:
            if (v17 != 2)
            {
              v782 = 0;
              v783 = 0;
              v784 = 0;
              while (1)
              {
                v785 = *v3;
                v786 = *(_QWORD *)(a2 + v785);
                if (v786 == -1 || v786 >= *(_QWORD *)(a2 + *v4))
                  goto LABEL_1834;
                v787 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v786);
                *(_QWORD *)(a2 + v785) = v786 + 1;
                v784 |= (unint64_t)(v787 & 0x7F) << v782;
                if (v787 < 0)
                {
                  v782 += 7;
                  v14 = v783++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_1835;
              }
            }
            v910 = 0;
            v911 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v357 = 0;
              v358 = 0;
              v359 = 0;
              while (1)
              {
                v360 = *v3;
                v361 = *(_QWORD *)(a2 + v360);
                if (v361 == -1 || v361 >= *(_QWORD *)(a2 + *v4))
                  break;
                v362 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v361);
                *(_QWORD *)(a2 + v360) = v361 + 1;
                v359 |= (unint64_t)(v362 & 0x7F) << v357;
                if (v362 < 0)
                {
                  v357 += 7;
                  v14 = v358++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_987;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_987:
              PBRepeatedInt32Add();
            }
            break;
          case 1407:
            v40 = objc_alloc_init(_INPBCallRecordFilter);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBCallRecordFilterReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadCallRecordFilter:", v40, 0, 0);
            goto LABEL_1350;
          case 1408:
            v40 = objc_alloc_init(_INPBCallRecordValue);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBCallRecordValueReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadCallRecordValue:", v40, 0, 0);
            goto LABEL_1350;
          case 1409:
            v40 = objc_alloc_init(_INPBCallGroup);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBCallGroupReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadCallGroup:", v40, 0, 0);
            goto LABEL_1350;
          case 1410:
            v40 = objc_alloc_init(_INPBCallGroupConversation);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBCallGroupConversationReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadCallGroupConversation:", v40, 0, 0);
            goto LABEL_1350;
          case 1411:
            v40 = objc_alloc_init(_INPBStartCallRequestMetadata);
            v910 = 0;
            v911 = 0;
            if (!PBReaderPlaceMark() || !_INPBStartCallRequestMetadataReadFrom(v40, a2))
              goto LABEL_1847;
            PBReaderRecallMark();
            if (v40)
              objc_msgSend(a1, "addPayloadStartCallRequestMetadata:", v40, 0, 0);
            goto LABEL_1350;
          default:
            switch((int)v19)
            {
              case 1601:
                if (v17 != 2)
                {
                  v485 = 0;
                  v486 = 0;
                  v487 = 0;
                  while (1)
                  {
                    v488 = *v3;
                    v489 = *(_QWORD *)(a2 + v488);
                    if (v489 == -1 || v489 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v490 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v489);
                    *(_QWORD *)(a2 + v488) = v489 + 1;
                    v487 |= (unint64_t)(v490 & 0x7F) << v485;
                    if (v490 < 0)
                    {
                      v485 += 7;
                      v14 = v486++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v21 = 0;
                  v22 = 0;
                  v23 = 0;
                  while (1)
                  {
                    v24 = *v3;
                    v25 = *(_QWORD *)(a2 + v24);
                    if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
                    *(_QWORD *)(a2 + v24) = v25 + 1;
                    v23 |= (unint64_t)(v26 & 0x7F) << v21;
                    if (v26 < 0)
                    {
                      v21 += 7;
                      v14 = v22++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_35;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
                  PBRepeatedInt32Add();
                }
                goto LABEL_1345;
              case 1602:
                v40 = objc_alloc_init(_INPBEvent);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBEventReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadEvent:", v40, 0, 0);
                goto LABEL_1350;
              case 1603:
                v40 = objc_alloc_init(_INPBEventList);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBEventListReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadEventList:", v40, 0, 0);
                goto LABEL_1350;
              case 1604:
                v40 = objc_alloc_init(_INPBPlace);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBPlaceReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPlace:", v40, 0, 0);
                goto LABEL_1350;
              case 1605:
                v40 = objc_alloc_init(_INPBPlaceList);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBPlaceListReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadPlaceList:", v40, 0, 0);
                goto LABEL_1350;
              case 1606:
                v40 = objc_alloc_init(_INPBActivity);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBActivityReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadActivity:", v40, 0, 0);
                goto LABEL_1350;
              case 1607:
                v40 = objc_alloc_init(_INPBActivityList);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBActivityListReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadActivityList:", v40, 0, 0);
                goto LABEL_1350;
              case 1608:
                v40 = objc_alloc_init(_INPBGeographicalFeature);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadGeographicalFeature:", v40, 0, 0);
                goto LABEL_1350;
              case 1609:
                v40 = objc_alloc_init(_INPBGeographicalFeatureList);
                v910 = 0;
                v911 = 0;
                if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureListReadFrom(v40, a2))
                  goto LABEL_1847;
                PBReaderRecallMark();
                if (v40)
                  objc_msgSend(a1, "addPayloadGeographicalFeatureList:", v40, 0, 0);
                goto LABEL_1350;
              case 1610:
                if (v17 != 2)
                {
                  v559 = 0;
                  v560 = 0;
                  v561 = 0;
                  while (1)
                  {
                    v562 = *v3;
                    v563 = *(_QWORD *)(a2 + v562);
                    if (v563 == -1 || v563 >= *(_QWORD *)(a2 + *v4))
                      goto LABEL_1834;
                    v564 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v563);
                    *(_QWORD *)(a2 + v562) = v563 + 1;
                    v561 |= (unint64_t)(v564 & 0x7F) << v559;
                    if (v564 < 0)
                    {
                      v559 += 7;
                      v14 = v560++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_1835;
                  }
                }
                v910 = 0;
                v911 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v117 = 0;
                  v118 = 0;
                  v119 = 0;
                  while (1)
                  {
                    v120 = *v3;
                    v121 = *(_QWORD *)(a2 + v120);
                    if (v121 == -1 || v121 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v122 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v121);
                    *(_QWORD *)(a2 + v120) = v121 + 1;
                    v119 |= (unint64_t)(v122 & 0x7F) << v117;
                    if (v122 < 0)
                    {
                      v117 += 7;
                      v14 = v118++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_298;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_298:
                  PBRepeatedInt32Add();
                }
                goto LABEL_1345;
              default:
                switch((int)v19)
                {
                  case 1501:
                    if (v17 != 2)
                    {
                      v529 = 0;
                      v530 = 0;
                      v531 = 0;
                      while (1)
                      {
                        v532 = *v3;
                        v533 = *(_QWORD *)(a2 + v532);
                        if (v533 == -1 || v533 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v534 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v533);
                        *(_QWORD *)(a2 + v532) = v533 + 1;
                        v531 |= (unint64_t)(v534 & 0x7F) << v529;
                        if (v534 < 0)
                        {
                          v529 += 7;
                          v14 = v530++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v79 = 0;
                      v80 = 0;
                      v81 = 0;
                      while (1)
                      {
                        v82 = *v3;
                        v83 = *(_QWORD *)(a2 + v82);
                        if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
                        *(_QWORD *)(a2 + v82) = v83 + 1;
                        v81 |= (unint64_t)(v84 & 0x7F) << v79;
                        if (v84 < 0)
                        {
                          v79 += 7;
                          v14 = v80++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_165;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_165:
                      PBRepeatedInt32Add();
                    }
                    goto LABEL_1345;
                  case 1502:
                    v40 = objc_alloc_init(_INPBWellnessUnitType);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBWellnessUnitTypeReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadWellnessUnitType:", v40, 0, 0);
                    goto LABEL_1350;
                  case 1503:
                    v40 = objc_alloc_init(_INPBWellnessMetadataPair);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBWellnessMetadataPairReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadWellnessMetadataPair:", v40, 0, 0);
                    goto LABEL_1350;
                  case 1504:
                    v40 = objc_alloc_init(_INPBWellnessValue);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBWellnessValueReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadWellnessValue:", v40, 0, 0);
                    goto LABEL_1350;
                  case 1505:
                    if (v17 != 2)
                    {
                      v848 = 0;
                      v849 = 0;
                      v850 = 0;
                      while (1)
                      {
                        v851 = *v3;
                        v852 = *(_QWORD *)(a2 + v851);
                        if (v852 == -1 || v852 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v853 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v852);
                        *(_QWORD *)(a2 + v851) = v852 + 1;
                        v850 |= (unint64_t)(v853 & 0x7F) << v848;
                        if (v853 < 0)
                        {
                          v848 += 7;
                          v14 = v849++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v423 = 0;
                      v424 = 0;
                      v425 = 0;
                      while (1)
                      {
                        v426 = *v3;
                        v427 = *(_QWORD *)(a2 + v426);
                        if (v427 == -1 || v427 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v428 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v427);
                        *(_QWORD *)(a2 + v426) = v427 + 1;
                        v425 |= (unint64_t)(v428 & 0x7F) << v423;
                        if (v428 < 0)
                        {
                          v423 += 7;
                          v14 = v424++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1171;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_1171:
                      PBRepeatedInt32Add();
                    }
                    goto LABEL_1345;
                  case 1506:
                    v40 = objc_alloc_init(_INPBWellnessObjectResultValue);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark()
                      || !_INPBWellnessObjectResultValueReadFrom(v40, a2))
                    {
                      goto LABEL_1847;
                    }
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadWellnessObjectResultValue:", v40, 0, 0);
                    goto LABEL_1350;
                  case 1507:
                    if (v17 != 2)
                    {
                      v854 = 0;
                      v855 = 0;
                      v856 = 0;
                      while (1)
                      {
                        v857 = *v3;
                        v858 = *(_QWORD *)(a2 + v857);
                        if (v858 == -1 || v858 >= *(_QWORD *)(a2 + *v4))
                          goto LABEL_1834;
                        v859 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v858);
                        *(_QWORD *)(a2 + v857) = v858 + 1;
                        v856 |= (unint64_t)(v859 & 0x7F) << v854;
                        if (v859 < 0)
                        {
                          v854 += 7;
                          v14 = v855++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1835;
                      }
                    }
                    v910 = 0;
                    v911 = 0;
                    result = PBReaderPlaceMark();
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                    {
                      v429 = 0;
                      v430 = 0;
                      v431 = 0;
                      while (1)
                      {
                        v432 = *v3;
                        v433 = *(_QWORD *)(a2 + v432);
                        if (v433 == -1 || v433 >= *(_QWORD *)(a2 + *v4))
                          break;
                        v434 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v433);
                        *(_QWORD *)(a2 + v432) = v433 + 1;
                        v431 |= (unint64_t)(v434 & 0x7F) << v429;
                        if (v434 < 0)
                        {
                          v429 += 7;
                          v14 = v430++ >= 9;
                          if (!v14)
                            continue;
                        }
                        goto LABEL_1188;
                      }
                      *(_BYTE *)(a2 + *v5) = 1;
LABEL_1188:
                      PBRepeatedInt32Add();
                    }
                    break;
                  case 1512:
                    v40 = objc_alloc_init(_INPBCurrencyAmount);
                    v910 = 0;
                    v911 = 0;
                    if (!PBReaderPlaceMark() || !_INPBCurrencyAmountReadFrom(v40, a2))
                      goto LABEL_1847;
                    PBReaderRecallMark();
                    if (v40)
                      objc_msgSend(a1, "addPayloadCurrencyAmount:", v40, 0, 0);
                    goto LABEL_1350;
                  default:
                    goto LABEL_1351;
                }
                break;
            }
            break;
        }
      }
LABEL_1345:
      PBReaderRecallMark();
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSetCarLockStatusIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id getHKUnitClass_87821()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getHKUnitClass_softClass_87822;
  v7 = getHKUnitClass_softClass_87822;
  if (!getHKUnitClass_softClass_87822)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getHKUnitClass_block_invoke_87823;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getHKUnitClass_block_invoke_87823((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C151A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKUnitClass_block_invoke_87823(uint64_t a1)
{
  Class result;
  void *v3;

  if (!HealthKitLibraryCore_frameworkLibrary_87824)
  {
    HealthKitLibraryCore_frameworkLibrary_87824 = _sl_dlopen();
    if (!HealthKitLibraryCore_frameworkLibrary_87824)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("HKUnit");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getHKUnitClass_softClass_87822 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id INIntentSlotValueTransformFromWellnessUnitType(void *a1)
{
  id v1;
  void *v2;
  id HKUnitClass_87821;
  const __CFString *v4;
  uint64_t v5;
  int v6;
  void *v7;
  id v8;
  uint64_t v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_70;
  if (objc_msgSend(v1, "hasMassUnit"))
  {
    switch(objc_msgSend(v2, "massUnit"))
    {
      case 1u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("kg");
        goto LABEL_41;
      case 2u:
        objc_msgSend(getHKUnitClass_87821(), "gramUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 3u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("dg");
        goto LABEL_41;
      case 4u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("cg");
        goto LABEL_41;
      case 5u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("mg");
        goto LABEL_41;
      case 6u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("µg");
        goto LABEL_41;
      case 7u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("ng");
        goto LABEL_41;
      case 8u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("pg");
        goto LABEL_41;
      case 9u:
        objc_msgSend(getHKUnitClass_87821(), "ounceUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 0xAu:
        objc_msgSend(getHKUnitClass_87821(), "poundUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 0xBu:
        objc_msgSend(getHKUnitClass_87821(), "stoneUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 0xCu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("t");
        goto LABEL_41;
      case 0xDu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("ton");
        goto LABEL_41;
      case 0xEu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("ct");
        goto LABEL_41;
      case 0xFu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("oz t");
        goto LABEL_41;
      case 0x10u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("slug");
        goto LABEL_41;
      default:
        goto LABEL_70;
    }
  }
  if (objc_msgSend(v2, "hasTimeUnit"))
  {
    switch(objc_msgSend(v2, "timeUnit"))
    {
      case 1u:
        objc_msgSend(getHKUnitClass_87821(), "secondUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 2u:
        objc_msgSend(getHKUnitClass_87821(), "minuteUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 3u:
        objc_msgSend(getHKUnitClass_87821(), "hourUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 4u:
        objc_msgSend(getHKUnitClass_87821(), "dayUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      default:
        goto LABEL_70;
    }
  }
  if (objc_msgSend(v2, "hasEnergyUnit"))
  {
    switch(objc_msgSend(v2, "energyUnit"))
    {
      case 1u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("kJ");
        goto LABEL_41;
      case 2u:
        objc_msgSend(getHKUnitClass_87821(), "jouleUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 3u:
        objc_msgSend(getHKUnitClass_87821(), "kilocalorieUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 4u:
        objc_msgSend(getHKUnitClass_87821(), "largeCalorieUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 5u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("kWh");
        goto LABEL_41;
      default:
        goto LABEL_70;
    }
  }
  if (objc_msgSend(v2, "hasLengthUnit"))
  {
    switch(objc_msgSend(v2, "lengthUnit"))
    {
      case 1u:
        objc_msgSend(getHKUnitClass_87821(), "meterUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 2u:
        objc_msgSend(getHKUnitClass_87821(), "mileUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 3u:
        v8 = getHKUnitClass_87821();
        v9 = 5;
        break;
      case 4u:
        objc_msgSend(getHKUnitClass_87821(), "footUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 5u:
        objc_msgSend(getHKUnitClass_87821(), "inchUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 6u:
        objc_msgSend(getHKUnitClass_87821(), "yardUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 7u:
        v8 = getHKUnitClass_87821();
        v9 = 9;
        break;
      default:
        goto LABEL_70;
    }
    objc_msgSend(v8, "meterUnitWithMetricPrefix:", v9);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_42;
  }
  if (objc_msgSend(v2, "hasVolumeUnit"))
  {
    switch(objc_msgSend(v2, "volumeUnit"))
    {
      case 1u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("ML");
        goto LABEL_41;
      case 2u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("kL");
        goto LABEL_41;
      case 3u:
        objc_msgSend(getHKUnitClass_87821(), "literUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 4u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("dL");
        goto LABEL_41;
      case 5u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("cL");
        goto LABEL_41;
      case 6u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("mL");
        goto LABEL_41;
      case 7u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("km³");
        goto LABEL_41;
      case 8u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("dm³");
        goto LABEL_41;
      case 9u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("mm³");
        goto LABEL_41;
      case 0xAu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("in³");
        goto LABEL_41;
      case 0xBu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("ft³");
        goto LABEL_41;
      case 0xCu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("yd³");
        goto LABEL_41;
      case 0xDu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("mi³");
        goto LABEL_41;
      case 0xEu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("af");
        goto LABEL_41;
      case 0xFu:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("bsh");
        goto LABEL_41;
      case 0x10u:
      case 0x17u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("tsp");
        goto LABEL_41;
      case 0x11u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("tbsp");
        goto LABEL_41;
      case 0x12u:
        objc_msgSend(getHKUnitClass_87821(), "fluidOunceUSUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 0x13u:
        objc_msgSend(getHKUnitClass_87821(), "cupUSUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 0x14u:
        objc_msgSend(getHKUnitClass_87821(), "pintUSUnit");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      case 0x15u:
      case 0x18u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("qt");
        goto LABEL_41;
      case 0x16u:
      case 0x19u:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("gal");
        goto LABEL_41;
      case 0x1Au:
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("metric cup");
        goto LABEL_41;
      default:
        goto LABEL_70;
    }
  }
  if (!objc_msgSend(v2, "hasTemperatureUnit"))
  {
    if (objc_msgSend(v2, "hasRespiratoryRateUnit"))
    {
      if (objc_msgSend(v2, "respiratoryRateUnit") != 1)
        goto LABEL_70;
      HKUnitClass_87821 = getHKUnitClass_87821();
      v4 = CFSTR("breaths/min");
    }
    else if (objc_msgSend(v2, "hasHeartRateUnit"))
    {
      if (objc_msgSend(v2, "heartRateUnit") != 1)
        goto LABEL_70;
      HKUnitClass_87821 = getHKUnitClass_87821();
      v4 = CFSTR("bpm");
    }
    else if (objc_msgSend(v2, "hasBloodPressureUnit"))
    {
      if (objc_msgSend(v2, "bloodPressureUnit") != 1)
        goto LABEL_70;
      HKUnitClass_87821 = getHKUnitClass_87821();
      v4 = CFSTR("mmHg");
    }
    else
    {
      if (!objc_msgSend(v2, "hasBloodGlucoseUnit"))
        goto LABEL_70;
      v10 = objc_msgSend(v2, "bloodGlucoseUnit");
      if (v10 == 2)
      {
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("mmol/L");
      }
      else
      {
        if (v10 != 1)
          goto LABEL_70;
        HKUnitClass_87821 = getHKUnitClass_87821();
        v4 = CFSTR("mg/dL");
      }
    }
LABEL_41:
    objc_msgSend(HKUnitClass_87821, "unitFromString:", v4);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_42;
  }
  v6 = objc_msgSend(v2, "temperatureUnit");
  if (v6 == 3)
  {
    objc_msgSend(getHKUnitClass_87821(), "kelvinUnit");
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_42;
  }
  if (v6 == 2)
  {
    objc_msgSend(getHKUnitClass_87821(), "degreeFahrenheitUnit");
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_42;
  }
  if (v6 != 1)
  {
LABEL_70:
    v7 = 0;
    goto LABEL_71;
  }
  objc_msgSend(getHKUnitClass_87821(), "degreeCelsiusUnit");
  v5 = objc_claimAutoreleasedReturnValue();
LABEL_42:
  v7 = (void *)v5;
LABEL_71:

  return v7;
}

_INPBWellnessUnitType *INIntentSlotValueTransformToWellnessUnitType(void *a1)
{
  id v1;
  _INPBWellnessUnitType *v2;
  void *v3;
  int v4;
  _INPBWellnessUnitType *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  int v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  int v36;
  void *v38;
  int v39;
  _INPBWellnessUnitType *v40;
  uint64_t v41;
  void *v42;
  int v43;
  void *v44;
  int v45;
  void *v46;
  int v47;
  void *v48;
  int v49;
  _INPBWellnessUnitType *v50;
  uint64_t v51;
  void *v52;
  int v53;
  void *v54;
  int v55;
  void *v56;
  int v57;
  void *v58;
  int v59;
  void *v60;
  int v61;
  _INPBWellnessUnitType *v62;
  uint64_t v63;
  void *v64;
  int v65;
  void *v66;
  int v67;
  void *v68;
  int v69;
  void *v70;
  int v71;
  void *v72;
  int v73;
  void *v74;
  int v75;
  void *v76;
  int v77;
  _INPBWellnessUnitType *v78;
  uint64_t v79;
  void *v80;
  int v81;
  void *v82;
  int v83;
  void *v84;
  int v85;
  void *v86;
  int v87;
  void *v88;
  int v89;
  void *v90;
  int v91;
  void *v92;
  int v93;
  void *v94;
  int v95;
  void *v96;
  int v97;
  void *v98;
  int v99;
  void *v100;
  int v101;
  void *v102;
  int v103;
  void *v104;
  int v105;
  void *v106;
  int v107;
  void *v108;
  int v109;
  void *v110;
  int v111;
  void *v112;
  int v113;
  void *v114;
  int v115;
  void *v116;
  int v117;
  void *v118;
  int v119;
  void *v120;
  int v121;
  void *v122;
  int v123;
  void *v124;
  int v125;
  void *v126;
  int v127;
  void *v128;
  int v129;
  void *v130;
  int v131;
  _INPBWellnessUnitType *v132;
  uint64_t v133;
  void *v134;
  int v135;
  void *v136;
  int v137;
  void *v138;
  int v139;
  void *v140;
  int v141;
  void *v142;
  int v143;
  void *v144;
  int v145;
  _INPBWellnessUnitType *v146;
  uint64_t v147;
  void *v148;
  int v149;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBWellnessUnitType);
    objc_msgSend(v1, "unitString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("kg"));

    if (v4)
    {
      v5 = v2;
      v6 = 1;
LABEL_35:
      -[_INPBWellnessUnitType setMassUnit:](v5, "setMassUnit:", v6);
      goto LABEL_36;
    }
    objc_msgSend(v1, "unitString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("g"));

    if (v8)
    {
      v5 = v2;
      v6 = 2;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("slug"));

    if (v10)
    {
      v5 = v2;
      v6 = 16;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("oz"));

    if (v12)
    {
      v5 = v2;
      v6 = 9;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isEqualToString:", CFSTR("lb"));

    if (v14)
    {
      v5 = v2;
      v6 = 10;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("st"));

    if (v16)
    {
      v5 = v2;
      v6 = 11;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("ct"));

    if (v18)
    {
      v5 = v2;
      v6 = 14;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("dg"));

    if (v20)
    {
      v5 = v2;
      v6 = 3;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("ng"));

    if (v22)
    {
      v5 = v2;
      v6 = 7;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isEqualToString:", CFSTR("pg"));

    if (v24)
    {
      v5 = v2;
      v6 = 8;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("cg"));

    if (v26)
    {
      v5 = v2;
      v6 = 4;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "isEqualToString:", CFSTR("µg"));

    if (v28)
    {
      v5 = v2;
      v6 = 6;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "isEqualToString:", CFSTR("mg"));

    if (v30)
    {
      v5 = v2;
      v6 = 5;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "isEqualToString:", CFSTR("oz t"));

    if (v32)
    {
      v5 = v2;
      v6 = 15;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("ton"));

    if (v34)
    {
      v5 = v2;
      v6 = 13;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v35, "isEqualToString:", CFSTR("t"));

    if (v36)
    {
      v5 = v2;
      v6 = 12;
      goto LABEL_35;
    }
    objc_msgSend(v1, "unitString");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("d"));

    if (v39)
    {
      v40 = v2;
      v41 = 4;
LABEL_45:
      -[_INPBWellnessUnitType setTimeUnit:](v40, "setTimeUnit:", v41);
      goto LABEL_36;
    }
    objc_msgSend(v1, "unitString");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "isEqualToString:", CFSTR("hr"));

    if (v43)
    {
      v40 = v2;
      v41 = 3;
      goto LABEL_45;
    }
    objc_msgSend(v1, "unitString");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend(v44, "isEqualToString:", CFSTR("min"));

    if (v45)
    {
      v40 = v2;
      v41 = 2;
      goto LABEL_45;
    }
    objc_msgSend(v1, "unitString");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v46, "isEqualToString:", CFSTR("s"));

    if (v47)
    {
      v40 = v2;
      v41 = 1;
      goto LABEL_45;
    }
    objc_msgSend(v1, "unitString");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend(v48, "isEqualToString:", CFSTR("J"));

    if (v49)
    {
      v50 = v2;
      v51 = 2;
LABEL_56:
      -[_INPBWellnessUnitType setEnergyUnit:](v50, "setEnergyUnit:", v51);
      goto LABEL_36;
    }
    objc_msgSend(v1, "unitString");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend(v52, "isEqualToString:", CFSTR("Cal"));

    if (v53)
    {
      v50 = v2;
      v51 = 4;
      goto LABEL_56;
    }
    objc_msgSend(v1, "unitString");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(v54, "isEqualToString:", CFSTR("kcal"));

    if (v55)
    {
      v50 = v2;
      v51 = 3;
      goto LABEL_56;
    }
    objc_msgSend(v1, "unitString");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = objc_msgSend(v56, "isEqualToString:", CFSTR("kJ"));

    if (v57)
    {
      v50 = v2;
      v51 = 1;
      goto LABEL_56;
    }
    objc_msgSend(v1, "unitString");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "isEqualToString:", CFSTR("kWh"));

    if (v59)
    {
      v50 = v2;
      v51 = 5;
      goto LABEL_56;
    }
    objc_msgSend(v1, "unitString");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = objc_msgSend(v60, "isEqualToString:", CFSTR("mi"));

    if (v61)
    {
      v62 = v2;
      v63 = 2;
LABEL_71:
      -[_INPBWellnessUnitType setLengthUnit:](v62, "setLengthUnit:", v63);
      goto LABEL_36;
    }
    objc_msgSend(v1, "unitString");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v64, "isEqualToString:", CFSTR("ft"));

    if (v65)
    {
      v62 = v2;
      v63 = 4;
      goto LABEL_71;
    }
    objc_msgSend(v1, "unitString");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = objc_msgSend(v66, "isEqualToString:", CFSTR("in"));

    if (v67)
    {
      v62 = v2;
      v63 = 5;
      goto LABEL_71;
    }
    objc_msgSend(v1, "unitString");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = objc_msgSend(v68, "isEqualToString:", CFSTR("yd"));

    if (v69)
    {
      v62 = v2;
      v63 = 6;
      goto LABEL_71;
    }
    objc_msgSend(v1, "unitString");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend(v70, "isEqualToString:", CFSTR("m"));

    if (v71)
    {
      v62 = v2;
      v63 = 1;
      goto LABEL_71;
    }
    objc_msgSend(v1, "unitString");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend(v72, "isEqualToString:", CFSTR("km"));

    if (v73)
    {
      v62 = v2;
      v63 = 7;
      goto LABEL_71;
    }
    objc_msgSend(v1, "unitString");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v75 = objc_msgSend(v74, "isEqualToString:", CFSTR("cm"));

    if (v75)
    {
      v62 = v2;
      v63 = 3;
      goto LABEL_71;
    }
    objc_msgSend(v1, "unitString");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = objc_msgSend(v76, "isEqualToString:", CFSTR("cup_us"));

    if (v77)
    {
      v78 = v2;
      v79 = 19;
LABEL_123:
      -[_INPBWellnessUnitType setVolumeUnit:](v78, "setVolumeUnit:", v79);
      goto LABEL_36;
    }
    objc_msgSend(v1, "unitString");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = objc_msgSend(v80, "isEqualToString:", CFSTR("pt_us"));

    if (v81)
    {
      v78 = v2;
      v79 = 20;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = objc_msgSend(v82, "isEqualToString:", CFSTR("L"));

    if (v83)
    {
      v78 = v2;
      v79 = 3;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend(v84, "isEqualToString:", CFSTR("qt"));

    if (v85)
    {
      v78 = v2;
      v79 = 21;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = objc_msgSend(v86, "isEqualToString:", CFSTR("bsh"));

    if (v87)
    {
      v78 = v2;
      v79 = 15;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = objc_msgSend(v88, "isEqualToString:", CFSTR("gal"));

    if (v89)
    {
      v78 = v2;
      v79 = 22;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend(v90, "isEqualToString:", CFSTR("tsp"));

    if (v91)
      goto LABEL_85;
    objc_msgSend(v1, "unitString");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = objc_msgSend(v92, "isEqualToString:", CFSTR("dL"));

    if (v93)
    {
      v78 = v2;
      v79 = 4;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = objc_msgSend(v94, "isEqualToString:", CFSTR("kL"));

    if (v95)
    {
      v78 = v2;
      v79 = 2;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = objc_msgSend(v96, "isEqualToString:", CFSTR("ML"));

    if (v97)
    {
      v78 = v2;
      v79 = 1;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = objc_msgSend(v98, "isEqualToString:", CFSTR("af"));

    if (v99)
    {
      v78 = v2;
      v79 = 14;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = objc_msgSend(v100, "isEqualToString:", CFSTR("cL"));

    if (v101)
    {
      v78 = v2;
      v79 = 5;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v103 = objc_msgSend(v102, "isEqualToString:", CFSTR("ft³"));

    if (v103)
    {
      v78 = v2;
      v79 = 11;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = objc_msgSend(v104, "isEqualToString:", CFSTR("in³"));

    if (v105)
    {
      v78 = v2;
      v79 = 10;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_msgSend(v106, "isEqualToString:", CFSTR("mi³"));

    if (v107)
    {
      v78 = v2;
      v79 = 13;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    v109 = objc_msgSend(v108, "isEqualToString:", CFSTR("yd³"));

    if (v109)
    {
      v78 = v2;
      v79 = 12;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    v111 = objc_msgSend(v110, "isEqualToString:", CFSTR("metric cup"));

    if (v111)
    {
      v78 = v2;
      v79 = 26;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    v113 = objc_msgSend(v112, "isEqualToString:", CFSTR("mL"));

    if (v113)
    {
      v78 = v2;
      v79 = 6;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    v115 = objc_msgSend(v114, "isEqualToString:", CFSTR("tbsp"));

    if (v115)
    {
LABEL_85:
      v78 = v2;
      v79 = 16;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v117 = objc_msgSend(v116, "isEqualToString:", CFSTR("fl_oz_us"));

    if (v117)
    {
      v78 = v2;
      v79 = 18;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = objc_msgSend(v118, "isEqualToString:", CFSTR("qt"));

    if (v119)
    {
      v78 = v2;
      v79 = 24;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v121 = objc_msgSend(v120, "isEqualToString:", CFSTR("dm³"));

    if (v121)
    {
      v78 = v2;
      v79 = 8;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = objc_msgSend(v122, "isEqualToString:", CFSTR("km³"));

    if (v123)
    {
      v78 = v2;
      v79 = 7;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v125 = objc_msgSend(v124, "isEqualToString:", CFSTR("gal"));

    if (v125)
    {
      v78 = v2;
      v79 = 25;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    v127 = objc_msgSend(v126, "isEqualToString:", CFSTR("mm³"));

    if (v127)
    {
      v78 = v2;
      v79 = 9;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = objc_msgSend(v128, "isEqualToString:", CFSTR("tsp"));

    if (v129)
    {
      v78 = v2;
      v79 = 23;
      goto LABEL_123;
    }
    objc_msgSend(v1, "unitString");
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    v131 = objc_msgSend(v130, "isEqualToString:", CFSTR("degC"));

    if (v131)
    {
      v132 = v2;
      v133 = 1;
LABEL_130:
      -[_INPBWellnessUnitType setTemperatureUnit:](v132, "setTemperatureUnit:", v133);
      goto LABEL_36;
    }
    objc_msgSend(v1, "unitString");
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    v135 = objc_msgSend(v134, "isEqualToString:", CFSTR("degF"));

    if (v135)
    {
      v132 = v2;
      v133 = 2;
      goto LABEL_130;
    }
    objc_msgSend(v1, "unitString");
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v137 = objc_msgSend(v136, "isEqualToString:", CFSTR("K"));

    if (v137)
    {
      v132 = v2;
      v133 = 3;
      goto LABEL_130;
    }
    objc_msgSend(v1, "unitString");
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    v139 = objc_msgSend(v138, "isEqualToString:", CFSTR("breaths/min"));

    if (v139)
    {
      -[_INPBWellnessUnitType setRespiratoryRateUnit:](v2, "setRespiratoryRateUnit:", 1);
    }
    else
    {
      objc_msgSend(v1, "unitString");
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      v141 = objc_msgSend(v140, "isEqualToString:", CFSTR("bpm"));

      if (v141)
      {
        -[_INPBWellnessUnitType setHeartRateUnit:](v2, "setHeartRateUnit:", 1);
      }
      else
      {
        objc_msgSend(v1, "unitString");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v143 = objc_msgSend(v142, "isEqualToString:", CFSTR("mmHg"));

        if (!v143)
        {
          objc_msgSend(v1, "unitString");
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          v145 = objc_msgSend(v144, "isEqualToString:", CFSTR("mg/dL"));

          if (v145)
          {
            v146 = v2;
            v147 = 1;
          }
          else
          {
            objc_msgSend(v1, "unitString");
            v148 = (void *)objc_claimAutoreleasedReturnValue();
            v149 = objc_msgSend(v148, "isEqualToString:", CFSTR("mmol/L"));

            if (!v149)
              goto LABEL_36;
            v146 = v2;
            v147 = 2;
          }
          -[_INPBWellnessUnitType setBloodGlucoseUnit:](v146, "setBloodGlucoseUnit:", v147);
          goto LABEL_36;
        }
        -[_INPBWellnessUnitType setBloodPressureUnit:](v2, "setBloodPressureUnit:", 1);
      }
    }
  }
  else
  {
    v2 = 0;
  }
LABEL_36:

  return v2;
}

id INIntentSlotValueTransformFromWellnessUnitTypes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromWellnessUnitType(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToWellnessUnitTypes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToWellnessUnitType(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

__CFString *INSearchForAccountsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 9)
    return 0;
  else
    return off_1E2291B28[a1];
}

uint64_t _INPBRangeValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBValueMetadata *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v25, 0, 0);

      }
      else if ((_DWORD)v17 == 3)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_46;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_49:
        objc_msgSend(a1, "setLength:", v32);
      }
      else if ((_DWORD)v17 == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_44:
        objc_msgSend(a1, "setLocation:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

_INPBTimestamp *INIntentSlotValueTransformToTimestamp(void *a1)
{
  id v1;
  _INPBTimestamp *v2;
  double v3;
  double v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTimestamp);
    objc_msgSend(v1, "timeIntervalSince1970");
    v4 = v3;

    -[_INPBTimestamp setSeconds:](v2, "setSeconds:", vcvtmd_s64_f64(v4));
    -[_INPBTimestamp setNanos:](v2, "setNanos:", (int)((v4 - floor(v4)) * 1000000000.0));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTimestamps(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromTimestamp(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToTimestamps(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToTimestamp(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

BOOL _INPBGenericIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBProperty);
    if (!PBReaderPlaceMark() || !_INPBPropertyReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addProperties:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBQueryHomeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBHomeEntity *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBHomeEntity);
        if (!PBReaderPlaceMark() || !_INPBHomeEntityReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEntities:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INTrainReservation *INIntentSlotValueTransformFromTrainReservation(INTrainReservation *a1)
{
  INTrainReservation *v1;
  void *v2;
  INTrainReservation *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  id v16;
  INTrainReservation *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    -[INTrainReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = [INTrainReservation alloc];
    objc_msgSend(v2, "itemReference");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v21);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "hasReservationStatus");
    v6 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v6 <= 3)
      v7 = (void *)(v6 + 1);
    else
      v7 = 0;
    if (!v5)
      v7 = 0;
    v16 = v7;
    objc_msgSend(v2, "reservationHolderName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INTrainReservation reservedSeat](v1, "reservedSeat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSeat(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INTrainReservation trainTrip](v1, "trainTrip");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromTrainTrip(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INTrainReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:trainTrip:](v3, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:trainTrip:", v23, v4, v19, v16, v15, v14, v8, v10, v12);

    a1 = v17;
  }
  return a1;
}

_INPBTrainReservation *INIntentSlotValueTransformToTrainReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBTrainReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBTrainReservation);
    -[_INPBTrainReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "reservedSeat");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSeat(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainReservation setReservedSeat:](v15, "setReservedSeat:", v17);

    objc_msgSend(v1, "trainTrip");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToTrainTrip(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainReservation setTrainTrip:](v15, "setTrainTrip:", v19);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromTrainReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTrainReservation(*(INTrainReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTrainReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTrainReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTrainReservationFromTrainReservation(void *a1)
{
  return a1;
}

BOOL INCervicalMucusQualityValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 6;
}

unint64_t INCervicalMucusQualityValueTypeGetBackingType(unint64_t result)
{
  if (result >= 6)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INCervicalMucusQualityValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INCervicalMucusQualityValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E2291B78[a1 - 1];
}

uint64_t INCervicalMucusQualityValueTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dry")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sticky")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("creamy")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("watery")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("eggwhite")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCervicalMucusQualityValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("dry");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("sticky");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("creamy");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("watery");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("eggwhite");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INRelativeSettingHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INRelativeSettingGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 4)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INRelativeSettingGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 3)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INRelativeSettingGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2291BA0[a1 - 1];
}

uint64_t INRelativeSettingWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lowest")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lower")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("higher")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("highest")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRelativeSettingGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("lowest");
      goto LABEL_7;
    case 2:
      v4 = CFSTR("lower");
      goto LABEL_7;
    case 3:
      v4 = CFSTR("higher");
      goto LABEL_7;
    case 4:
      v4 = CFSTR("highest");
LABEL_7:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INTaskStatusHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

uint64_t INTaskStatusGetBackingType(unint64_t a1)
{
  if (a1 >= 3)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1);
}

uint64_t INTaskStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 10;
  if (a2 == 20)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INTaskStatusGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("completed");
  if (a1 == 1)
    return CFSTR("notCompleted");
  else
    return v1;
}

uint64_t INTaskStatusWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("notCompleted")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("completed")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTaskStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("completed");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("not completed");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBURLValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBValueMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAbsoluteString:", v18);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setScope:", v18);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCallMetricsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCallMetricsValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBCallMetricsValue);
        if (!PBReaderPlaceMark() || (_INPBCallMetricsValueReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INBillPayee *INIntentSlotValueTransformFromBillPayeeValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  INBillPayee *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INBillPayee *v10;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    v4 = [INBillPayee alloc];
    objc_msgSend(v2, "nickname");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "accountNumber");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "organizationName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INBillPayee initWithNickname:number:organizationName:](v4, "initWithNickname:number:organizationName:", v6, v7, v9);

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

_INPBBillPayeeValue *INIntentSlotValueTransformToBillPayeeValue(void *a1)
{
  id v1;
  _INPBBillPayeeValue *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBBillPayeeValue);
    objc_msgSend(v1, "nickname");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillPayeeValue setNickname:](v2, "setNickname:", v4);

    objc_msgSend(v1, "accountNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillPayeeValue setAccountNumber:](v2, "setAccountNumber:", v5);

    objc_msgSend(v1, "organizationName");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToDataString(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillPayeeValue setOrganizationName:](v2, "setOrganizationName:", v7);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromBillPayeeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromBillPayeeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBillPayeeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToBillPayeeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBBillPayeeValue *INIntentSlotValueRedactedBillPayeeValueFromBillPayeeValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _INPBBillPayeeValue *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = objc_alloc_init(_INPBBillPayeeValue);
    objc_msgSend(v3, "nickname");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillPayeeValue setNickname:](v6, "setNickname:", v7);

    objc_msgSend(v3, "accountNumber");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillPayeeValue setAccountNumber:](v6, "setAccountNumber:", v8);

    objc_msgSend(v3, "organizationName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillPayeeValue setOrganizationName:](v6, "setOrganizationName:", v9);

  }
  return v6;
}

void INPhotoAttributeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_33;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 2);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_36;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 10);
  v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 11);
  v3 = v4;
  if ((a1 & 0x20) == 0)
  {
LABEL_9:
    if ((a1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 12);
  v3 = v4;
  if ((a1 & 0x40) == 0)
  {
LABEL_10:
    if ((a1 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 13);
  v3 = v4;
  if ((a1 & 0x80) == 0)
  {
LABEL_11:
    if ((a1 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 14);
  v3 = v4;
  if ((a1 & 0x100) == 0)
  {
LABEL_12:
    if ((a1 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 15);
  v3 = v4;
  if ((a1 & 0x200) == 0)
  {
LABEL_13:
    if ((a1 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 16);
  v3 = v4;
  if ((a1 & 0x400) == 0)
  {
LABEL_14:
    if ((a1 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 50);
  v3 = v4;
  if ((a1 & 0x800) == 0)
  {
LABEL_15:
    if ((a1 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 51);
  v3 = v4;
  if ((a1 & 0x1000) == 0)
  {
LABEL_16:
    if ((a1 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 52);
  v3 = v4;
  if ((a1 & 0x2000) == 0)
  {
LABEL_17:
    if ((a1 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 53);
  v3 = v4;
  if ((a1 & 0x4000) == 0)
  {
LABEL_18:
    if ((a1 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 80);
  v3 = v4;
  if ((a1 & 0x8000) == 0)
  {
LABEL_19:
    if ((a1 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 81);
  v3 = v4;
  if ((a1 & 0x10000) == 0)
  {
LABEL_20:
    if ((a1 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 300);
  v3 = v4;
  if ((a1 & 0x20000) == 0)
  {
LABEL_21:
    if ((a1 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 301);
  v3 = v4;
  if ((a1 & 0x40000) == 0)
  {
LABEL_22:
    if ((a1 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 302);
  v3 = v4;
  if ((a1 & 0x80000) == 0)
  {
LABEL_23:
    if ((a1 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 303);
  v3 = v4;
  if ((a1 & 0x100000) == 0)
  {
LABEL_24:
    if ((a1 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 304);
  v3 = v4;
  if ((a1 & 0x200000) == 0)
  {
LABEL_25:
    if ((a1 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 305);
  v3 = v4;
  if ((a1 & 0x400000) == 0)
  {
LABEL_26:
    if ((a1 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 306);
  v3 = v4;
  if ((a1 & 0x800000) == 0)
  {
LABEL_27:
    if ((a1 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 307);
  v3 = v4;
  if ((a1 & 0x1000000) == 0)
  {
LABEL_28:
    if ((a1 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 54);
  v3 = v4;
  if ((a1 & 0x2000000) == 0)
  {
LABEL_29:
    if ((a1 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 55);
  v3 = v4;
  if ((a1 & 0x4000000) == 0)
  {
LABEL_30:
    if ((a1 & 0x8000000) == 0)
      goto LABEL_31;
LABEL_61:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 57);
    v3 = v4;
    if ((a1 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
LABEL_60:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 56);
  v3 = v4;
  if ((a1 & 0x8000000) != 0)
    goto LABEL_61;
LABEL_31:
  if ((a1 & 0x10000000) != 0)
  {
LABEL_32:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 58);
    v3 = v4;
  }
LABEL_33:

}

uint64_t INPhotoAttributeOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;

  if (!a1)
    return 0;
  if (a2 <= 49)
  {
    v2 = 0;
    switch(a2)
    {
      case 2:
        v2 = a1 & 1;
        break;
      case 3:
        v2 = (a1 >> 1) & 1;
        break;
      case 4:
        v2 = (a1 >> 2) & 1;
        break;
      case 10:
        v2 = (a1 >> 3) & 1;
        break;
      case 11:
        v2 = (a1 >> 4) & 1;
        break;
      case 12:
        v2 = (a1 >> 5) & 1;
        break;
      case 13:
        v2 = (a1 >> 6) & 1;
        break;
      case 14:
        v2 = (a1 >> 7) & 1;
        break;
      case 15:
        v2 = (a1 >> 8) & 1;
        break;
      case 16:
        v2 = (a1 >> 9) & 1;
        break;
      default:
        return v2;
    }
  }
  else if (a2 > 80)
  {
    switch(a2)
    {
      case 300:
        v2 = (a1 >> 16) & 1;
        break;
      case 301:
        v2 = (a1 >> 17) & 1;
        break;
      case 302:
        v2 = (a1 >> 18) & 1;
        break;
      case 303:
        v2 = (a1 >> 19) & 1;
        break;
      case 304:
        v2 = (a1 >> 20) & 1;
        break;
      case 305:
        v2 = (a1 >> 21) & 1;
        break;
      case 306:
        v2 = (a1 >> 22) & 1;
        break;
      case 307:
        v2 = (a1 >> 23) & 1;
        break;
      default:
        v3 = a2 == 81;
        v2 = (a1 >> 15) & 1;
LABEL_13:
        if (v3)
          v2 = v2;
        else
          v2 = 0;
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case '2':
        v2 = (a1 >> 10) & 1;
        break;
      case '3':
        v2 = (a1 >> 11) & 1;
        break;
      case '4':
        v2 = (a1 >> 12) & 1;
        break;
      case '5':
        v2 = (a1 >> 13) & 1;
        break;
      case '6':
        v2 = (a1 >> 24) & 1;
        break;
      case '7':
        v2 = (a1 >> 25) & 1;
        break;
      case '8':
        v2 = (a1 >> 26) & 1;
        break;
      case '9':
        v2 = (a1 >> 27) & 1;
        break;
      case ':':
        v2 = (a1 >> 28) & 1;
        break;
      default:
        v3 = a2 == 80;
        v2 = (a1 >> 14) & 1;
        goto LABEL_13;
    }
  }
  return v2;
}

uint64_t *INPhotoAttributeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (result)
  {
    v2 = *result;
    if (a2 <= 49)
    {
      switch(a2)
      {
        case 2:
          v2 |= 1uLL;
          break;
        case 3:
          v2 |= 2uLL;
          break;
        case 4:
          v2 |= 4uLL;
          break;
        case 10:
          v2 |= 8uLL;
          break;
        case 11:
          v2 |= 0x10uLL;
          break;
        case 12:
          v2 |= 0x20uLL;
          break;
        case 13:
          v2 |= 0x40uLL;
          break;
        case 14:
          v2 |= 0x80uLL;
          break;
        case 15:
          v2 |= 0x100uLL;
          break;
        case 16:
          v2 |= 0x200uLL;
          break;
        default:
          break;
      }
    }
    else if (a2 > 80)
    {
      switch(a2)
      {
        case 300:
          v2 |= 0x10000uLL;
          break;
        case 301:
          v2 |= 0x20000uLL;
          break;
        case 302:
          v2 |= 0x40000uLL;
          break;
        case 303:
          v2 |= 0x80000uLL;
          break;
        case 304:
          v2 |= 0x100000uLL;
          break;
        case 305:
          v2 |= 0x200000uLL;
          break;
        case 306:
          v2 |= 0x400000uLL;
          break;
        case 307:
          v2 |= 0x800000uLL;
          break;
        default:
          v3 = a2 == 81;
          v4 = v2 | 0x8000;
LABEL_12:
          if (v3)
            v2 = v4;
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '2':
          v2 |= 0x400uLL;
          break;
        case '3':
          v2 |= 0x800uLL;
          break;
        case '4':
          v2 |= 0x1000uLL;
          break;
        case '5':
          v2 |= 0x2000uLL;
          break;
        case '6':
          v2 |= 0x1000000uLL;
          break;
        case '7':
          v2 |= 0x2000000uLL;
          break;
        case '8':
          v2 |= 0x4000000uLL;
          break;
        case '9':
          v2 |= 0x8000000uLL;
          break;
        case ':':
          v2 |= 0x10000000uLL;
          break;
        default:
          v3 = a2 == 80;
          v4 = v2 | 0x4000;
          goto LABEL_12;
      }
    }
    *result = v2;
  }
  return result;
}

unint64_t *INPhotoAttributeOptionsRemoveBackingType(unint64_t *result, int a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  if (result)
  {
    v2 = *result;
    if (a2 <= 49)
    {
      switch(a2)
      {
        case 2:
          v2 &= ~1uLL;
          break;
        case 3:
          v2 &= ~2uLL;
          break;
        case 4:
          v2 &= ~4uLL;
          break;
        case 10:
          v2 &= ~8uLL;
          break;
        case 11:
          v2 &= ~0x10uLL;
          break;
        case 12:
          v2 &= ~0x20uLL;
          break;
        case 13:
          v2 &= ~0x40uLL;
          break;
        case 14:
          v2 &= ~0x80uLL;
          break;
        case 15:
          v2 &= ~0x100uLL;
          break;
        case 16:
          v2 &= ~0x200uLL;
          break;
        default:
          break;
      }
    }
    else if (a2 > 80)
    {
      switch(a2)
      {
        case 300:
          v2 &= ~0x10000uLL;
          break;
        case 301:
          v2 &= ~0x20000uLL;
          break;
        case 302:
          v2 &= ~0x40000uLL;
          break;
        case 303:
          v2 &= ~0x80000uLL;
          break;
        case 304:
          v2 &= ~0x100000uLL;
          break;
        case 305:
          v2 &= ~0x200000uLL;
          break;
        case 306:
          v2 &= ~0x400000uLL;
          break;
        case 307:
          v2 &= ~0x800000uLL;
          break;
        default:
          v3 = a2 == 81;
          v4 = v2 & 0xFFFFFFFFFFFF7FFFLL;
LABEL_12:
          if (v3)
            v2 = v4;
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '2':
          v2 &= ~0x400uLL;
          break;
        case '3':
          v2 &= ~0x800uLL;
          break;
        case '4':
          v2 &= ~0x1000uLL;
          break;
        case '5':
          v2 &= ~0x2000uLL;
          break;
        case '6':
          v2 &= ~0x1000000uLL;
          break;
        case '7':
          v2 &= ~0x2000000uLL;
          break;
        case '8':
          v2 &= ~0x4000000uLL;
          break;
        case '9':
          v2 &= ~0x8000000uLL;
          break;
        case ':':
          v2 &= ~0x10000000uLL;
          break;
        default:
          v3 = a2 == 80;
          v4 = v2 & 0xFFFFFFFFFFFFBFFFLL;
          goto LABEL_12;
      }
    }
    *result = v2;
  }
  return result;
}

id INPhotoAttributeOptionsGetNames(uint64_t a1)
{
  int v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("photo"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_37;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("video"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  objc_msgSend(v3, "addObject:", CFSTR("GIF"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  objc_msgSend(v3, "addObject:", CFSTR("flash"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  objc_msgSend(v3, "addObject:", CFSTR("landscapeOrientation"));
  if ((v1 & 0x20) == 0)
  {
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  objc_msgSend(v3, "addObject:", CFSTR("portraitOrientation"));
  if ((v1 & 0x40) == 0)
  {
LABEL_9:
    if ((v1 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  objc_msgSend(v3, "addObject:", CFSTR("favorite"));
  if ((v1 & 0x80) == 0)
  {
LABEL_10:
    if ((v1 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  objc_msgSend(v3, "addObject:", CFSTR("selfie"));
  if ((v1 & 0x100) == 0)
  {
LABEL_11:
    if ((v1 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  objc_msgSend(v3, "addObject:", CFSTR("frontFacingCamera"));
  if ((v1 & 0x200) == 0)
  {
LABEL_12:
    if ((v1 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  objc_msgSend(v3, "addObject:", CFSTR("screenshot"));
  if ((v1 & 0x400) == 0)
  {
LABEL_13:
    if ((v1 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  objc_msgSend(v3, "addObject:", CFSTR("burstPhoto"));
  if ((v1 & 0x800) == 0)
  {
LABEL_14:
    if ((v1 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  objc_msgSend(v3, "addObject:", CFSTR("HDRPhoto"));
  if ((v1 & 0x1000) == 0)
  {
LABEL_15:
    if ((v1 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  objc_msgSend(v3, "addObject:", CFSTR("squarePhoto"));
  if ((v1 & 0x2000) == 0)
  {
LABEL_16:
    if ((v1 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  objc_msgSend(v3, "addObject:", CFSTR("panoramaPhoto"));
  if ((v1 & 0x4000) == 0)
  {
LABEL_17:
    if ((v1 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  objc_msgSend(v3, "addObject:", CFSTR("timeLapseVideo"));
  if ((v1 & 0x8000) == 0)
  {
LABEL_18:
    if ((v1 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  objc_msgSend(v3, "addObject:", CFSTR("slowMotionVideo"));
  if ((v1 & 0x10000) == 0)
  {
LABEL_19:
    if ((v1 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  objc_msgSend(v3, "addObject:", CFSTR("noirFilter"));
  if ((v1 & 0x20000) == 0)
  {
LABEL_20:
    if ((v1 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  objc_msgSend(v3, "addObject:", CFSTR("chromeFilter"));
  if ((v1 & 0x40000) == 0)
  {
LABEL_21:
    if ((v1 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  objc_msgSend(v3, "addObject:", CFSTR("instantFilter"));
  if ((v1 & 0x80000) == 0)
  {
LABEL_22:
    if ((v1 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  objc_msgSend(v3, "addObject:", CFSTR("tonalFilter"));
  if ((v1 & 0x100000) == 0)
  {
LABEL_23:
    if ((v1 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  objc_msgSend(v3, "addObject:", CFSTR("transferFilter"));
  if ((v1 & 0x200000) == 0)
  {
LABEL_24:
    if ((v1 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  objc_msgSend(v3, "addObject:", CFSTR("monoFilter"));
  if ((v1 & 0x400000) == 0)
  {
LABEL_25:
    if ((v1 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  objc_msgSend(v3, "addObject:", CFSTR("fadeFilter"));
  if ((v1 & 0x800000) == 0)
  {
LABEL_26:
    if ((v1 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  objc_msgSend(v3, "addObject:", CFSTR("processFilter"));
  if ((v1 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v1 & 0x2000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  objc_msgSend(v3, "addObject:", CFSTR("portraitPhoto"));
  if ((v1 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v1 & 0x4000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  objc_msgSend(v3, "addObject:", CFSTR("livePhoto"));
  if ((v1 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v1 & 0x8000000) == 0)
      goto LABEL_30;
LABEL_62:
    objc_msgSend(v3, "addObject:", CFSTR("bouncePhoto"));
    if ((v1 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_61:
  objc_msgSend(v3, "addObject:", CFSTR("loopPhoto"));
  if ((v1 & 0x8000000) != 0)
    goto LABEL_62;
LABEL_30:
  if ((v1 & 0x10000000) != 0)
LABEL_31:
    objc_msgSend(v3, "addObject:", CFSTR("longExposurePhoto"));
LABEL_32:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INPhotoAttributeOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("photo"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("video")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("GIF")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("flash")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("landscapeOrientation")))
          v3 |= 0x10uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("portraitOrientation")))
          v3 |= 0x20uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("favorite")))
          v3 |= 0x40uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("selfie")))
          v3 |= 0x80uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("frontFacingCamera")))
          v3 |= 0x100uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("screenshot")))
          v3 |= 0x200uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("burstPhoto")))
          v3 |= 0x400uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("HDRPhoto")))
          v3 |= 0x800uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("squarePhoto")))
          v3 |= 0x1000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("panoramaPhoto")))
          v3 |= 0x2000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("timeLapseVideo")))
          v3 |= 0x4000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("slowMotionVideo")))
          v3 |= 0x8000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("noirFilter")))
          v3 |= 0x10000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("chromeFilter")))
          v3 |= 0x20000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("instantFilter")))
          v3 |= 0x40000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("tonalFilter")))
          v3 |= 0x80000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("transferFilter")))
          v3 |= 0x100000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("monoFilter")))
          v3 |= 0x200000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("fadeFilter")))
          v3 |= 0x400000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("processFilter")))
          v3 |= 0x800000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("portraitPhoto")))
          v3 |= 0x1000000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("livePhoto")))
          v3 |= 0x2000000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("loopPhoto")))
          v3 |= 0x4000000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("bouncePhoto")))
          v3 |= 0x8000000uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("longExposurePhoto")))
          v3 |= 0x10000000uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INPhotoAttributeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_34;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("photo"), CFSTR("photo"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_37;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("video"), CFSTR("video"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  INLocalizedStringWithLocalizer(CFSTR("GIF"), CFSTR("GIF"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  INLocalizedStringWithLocalizer(CFSTR("flash"), CFSTR("flash"), v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v11);

  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  INLocalizedStringWithLocalizer(CFSTR("landscape orientation"), CFSTR("landscape orientation"), v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v12);

  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  INLocalizedStringWithLocalizer(CFSTR("portrait orientation"), CFSTR("portrait orientation"), v3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v13);

  if ((a1 & 0x40) == 0)
  {
LABEL_9:
    if ((a1 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  INLocalizedStringWithLocalizer(CFSTR("favorite"), CFSTR("favorite"), v3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v14);

  if ((a1 & 0x80) == 0)
  {
LABEL_10:
    if ((a1 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  INLocalizedStringWithLocalizer(CFSTR("selfie"), CFSTR("selfie"), v3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v15);

  if ((a1 & 0x100) == 0)
  {
LABEL_11:
    if ((a1 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  INLocalizedStringWithLocalizer(CFSTR("front facing camera"), CFSTR("front facing camera"), v3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v16);

  if ((a1 & 0x200) == 0)
  {
LABEL_12:
    if ((a1 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  INLocalizedStringWithLocalizer(CFSTR("screenshot"), CFSTR("screenshot"), v3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v17);

  if ((a1 & 0x400) == 0)
  {
LABEL_13:
    if ((a1 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  INLocalizedStringWithLocalizer(CFSTR("burst photo"), CFSTR("burst photo"), v3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v18);

  if ((a1 & 0x800) == 0)
  {
LABEL_14:
    if ((a1 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  INLocalizedStringWithLocalizer(CFSTR("HDR Photo"), CFSTR("HDR Photo"), v3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v19);

  if ((a1 & 0x1000) == 0)
  {
LABEL_15:
    if ((a1 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  INLocalizedStringWithLocalizer(CFSTR("square photo"), CFSTR("square photo"), v3);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v20);

  if ((a1 & 0x2000) == 0)
  {
LABEL_16:
    if ((a1 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  INLocalizedStringWithLocalizer(CFSTR("panorama photo"), CFSTR("panorama photo"), v3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v21);

  if ((a1 & 0x4000) == 0)
  {
LABEL_17:
    if ((a1 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  INLocalizedStringWithLocalizer(CFSTR("time lapse video"), CFSTR("time lapse video"), v3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v22);

  if ((a1 & 0x8000) == 0)
  {
LABEL_18:
    if ((a1 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  INLocalizedStringWithLocalizer(CFSTR("slow motion video"), CFSTR("slow motion video"), v3);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v23);

  if ((a1 & 0x10000) == 0)
  {
LABEL_19:
    if ((a1 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  INLocalizedStringWithLocalizer(CFSTR("noir filter"), CFSTR("noir filter"), v3);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v24);

  if ((a1 & 0x20000) == 0)
  {
LABEL_20:
    if ((a1 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  INLocalizedStringWithLocalizer(CFSTR("chrome filter"), CFSTR("chrome filter"), v3);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v25);

  if ((a1 & 0x40000) == 0)
  {
LABEL_21:
    if ((a1 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  INLocalizedStringWithLocalizer(CFSTR("instant filter"), CFSTR("instant filter"), v3);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v26);

  if ((a1 & 0x80000) == 0)
  {
LABEL_22:
    if ((a1 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  INLocalizedStringWithLocalizer(CFSTR("tonal filter"), CFSTR("tonal filter"), v3);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v27);

  if ((a1 & 0x100000) == 0)
  {
LABEL_23:
    if ((a1 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  INLocalizedStringWithLocalizer(CFSTR("transfer filter"), CFSTR("transfer filter"), v3);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v28);

  if ((a1 & 0x200000) == 0)
  {
LABEL_24:
    if ((a1 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  INLocalizedStringWithLocalizer(CFSTR("mono filter"), CFSTR("mono filter"), v3);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v29);

  if ((a1 & 0x400000) == 0)
  {
LABEL_25:
    if ((a1 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  INLocalizedStringWithLocalizer(CFSTR("fade filter"), CFSTR("fade filter"), v3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v30);

  if ((a1 & 0x800000) == 0)
  {
LABEL_26:
    if ((a1 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  INLocalizedStringWithLocalizer(CFSTR("process filter"), CFSTR("process filter"), v3);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v31);

  if ((a1 & 0x1000000) == 0)
  {
LABEL_27:
    if ((a1 & 0x2000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  INLocalizedStringWithLocalizer(CFSTR("portrait photo"), CFSTR("portrait photo"), v3);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v32);

  if ((a1 & 0x2000000) == 0)
  {
LABEL_28:
    if ((a1 & 0x4000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  INLocalizedStringWithLocalizer(CFSTR("live photo"), CFSTR("live photo"), v3);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v33);

  if ((a1 & 0x4000000) == 0)
  {
LABEL_29:
    if ((a1 & 0x8000000) == 0)
      goto LABEL_30;
LABEL_62:
    INLocalizedStringWithLocalizer(CFSTR("bounce photo"), CFSTR("bounce photo"), v3);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v35);

    if ((a1 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_61:
  INLocalizedStringWithLocalizer(CFSTR("loop photo"), CFSTR("loop photo"), v3);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v34);

  if ((a1 & 0x8000000) != 0)
    goto LABEL_62;
LABEL_30:
  if ((a1 & 0x10000000) != 0)
  {
LABEL_31:
    INLocalizedStringWithLocalizer(CFSTR("long exposure photo"), CFSTR("long exposure photo"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_32:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_34:
  return v6;
}

void sub_18C167968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEKRecurrenceDayOfWeekClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  EventKitLibrary();
  result = objc_getClass("EKRecurrenceDayOfWeek");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEKRecurrenceDayOfWeekClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getEKRecurrenceRuleClass_block_invoke(v3);
  }
  return result;
}

void __getEKRecurrenceRuleClass_block_invoke(uint64_t a1)
{
  EventKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("EKRecurrenceRule");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getEKRecurrenceRuleClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    EventKitLibrary();
  }
}

void EventKitLibrary()
{
  void *v0;

  if (!EventKitLibraryCore_frameworkLibrary)
  {
    EventKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!EventKitLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

uint64_t _INPBFindEventsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCalendarEvent *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBCalendarEvent);
        if (!PBReaderPlaceMark() || !_INPBCalendarEventReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEvents:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INWellnessQueryResultTypeHasBackingType(unint64_t a1)
{
  return a1 < 0xA;
}

unint64_t INWellnessQueryResultTypeGetBackingType(unint64_t result)
{
  if (result >= 0xA)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INWellnessQueryResultTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 8)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INWellnessQueryResultTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("unknown");
  else
    return off_1E2291D50[a1 - 1];
}

uint64_t INWellnessQueryResultTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("raw")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("average")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("minimum")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("maximum")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sum")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("first")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("last")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("above")) & 1) != 0)
  {
    v2 = 8;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("below")))
  {
    v2 = 9;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessQueryResultTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("raw");
      goto LABEL_12;
    case 2:
      v4 = CFSTR("average");
      goto LABEL_12;
    case 3:
      v4 = CFSTR("minimum");
      goto LABEL_12;
    case 4:
      v4 = CFSTR("maximum");
      goto LABEL_12;
    case 5:
      v4 = CFSTR("sum");
      goto LABEL_12;
    case 6:
      v4 = CFSTR("first");
      goto LABEL_12;
    case 7:
      v4 = CFSTR("last");
      goto LABEL_12;
    case 8:
      v4 = CFSTR("above");
      goto LABEL_12;
    case 9:
      v4 = CFSTR("below");
LABEL_12:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

void sub_18C16B958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_18C16ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__92410(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__92411(uint64_t a1)
{

}

uint64_t _INPBPlatformSupportReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMinimumOsVersion:", v24);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setSupportedPlatform:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPairReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBStringValue *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBStringValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setKey:", v17);
        goto LABEL_84;
      case 2u:
        v17 = objc_alloc_init(_INPBStringValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairStringValue:", v17, 0, 0);
        goto LABEL_84;
      case 3u:
        v17 = objc_alloc_init(_INPBURLValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairUrlValue:", v17, 0, 0);
        goto LABEL_84;
      case 4u:
        v17 = objc_alloc_init(_INPBDoubleValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBDoubleValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairDoubleValue:", v17, 0, 0);
        goto LABEL_84;
      case 5u:
        v17 = objc_alloc_init(_INPBImageValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBImageValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairImageValue:", v17, 0, 0);
        goto LABEL_84;
      case 6u:
        v17 = objc_alloc_init(_INPBIntegerValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBIntegerValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairIntegerValue:", v17, 0, 0);
        goto LABEL_84;
      case 7u:
        v17 = objc_alloc_init(_INPBDistanceValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBDistanceValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairDistanceValue:", v17, 0, 0);
        goto LABEL_84;
      case 8u:
        v17 = objc_alloc_init(_INPBTemperatureValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBTemperatureValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairTemperatureValue:", v17, 0, 0);
        goto LABEL_84;
      case 9u:
        v17 = objc_alloc_init(_INPBLocationValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairLocationValue:", v17, 0, 0);
        goto LABEL_84;
      case 0xAu:
        v17 = objc_alloc_init(_INPBContactValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairPersonValue:", v17, 0, 0);
        goto LABEL_84;
      case 0xBu:
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairCurrencyAmountValue:", v17, 0, 0);
        goto LABEL_84;
      case 0xCu:
        v17 = objc_alloc_init(_INPBPaymentMethodValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBPaymentMethodValueReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairPaymentMethodValue:", v17, 0, 0);
        goto LABEL_84;
      case 0xDu:
        v17 = objc_alloc_init(_INPBDataString);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairDataString:", v17, 0, 0);
        goto LABEL_84;
      case 0xEu:
        v17 = objc_alloc_init(_INPBCustomObject);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBCustomObjectReadFrom(v17, a2))
          goto LABEL_94;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPairCustomObject:", v17, 0, 0);
        goto LABEL_84;
      case 0xFu:
        v17 = objc_alloc_init(_INPBDataValue);
        v25 = 0;
        v26 = 0;
        if (PBReaderPlaceMark() && _INPBDataValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addPairDataValue:", v17, 0, 0);
LABEL_84:

LABEL_85:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_94:

        return 0;
      default:
        if ((v10 >> 3) == 1000)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_90;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_92;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_90:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_92:
          objc_msgSend(a1, "setRepeated:", v20 != 0, v25, v26);
        }
        else
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_85;
    }
  }
}

__CFString *INWorkoutNameIdentifierGetFacadeObject(int a1, unsigned int a2)
{
  __CFString *result;

  result = 0;
  if (a2 <= 0x14)
  {
    if (a1)
      return off_1E2292368[a2];
  }
  return result;
}

uint64_t INWorkoutNameIdentifierGetBackingType(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Run")) & 1) != 0)
    {
      v3 = 0;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Sit")) & 1) != 0)
    {
      v3 = 1;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Steps")) & 1) != 0)
    {
      v3 = 2;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Stand")) & 1) != 0)
    {
      v3 = 3;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Move")) & 1) != 0)
    {
      v3 = 4;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Walk")) & 1) != 0)
    {
      v3 = 5;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Yoga")) & 1) != 0)
    {
      v3 = 6;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Dance")) & 1) != 0)
    {
      v3 = 7;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Crosstraining")) & 1) != 0)
    {
      v3 = 8;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Elliptical")) & 1) != 0)
    {
      v3 = 9;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Rower")) & 1) != 0)
    {
      v3 = 10;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Cycle")) & 1) != 0)
    {
      v3 = 11;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Stairs")) & 1) != 0)
    {
      v3 = 12;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Other")) & 1) != 0)
    {
      v3 = 13;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Indoorrun")) & 1) != 0)
    {
      v3 = 14;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Indoorcycle")) & 1) != 0)
    {
      v3 = 15;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Indoorwalk")) & 1) != 0)
    {
      v3 = 16;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Exercise")) & 1) != 0)
    {
      v3 = 17;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Hike")) & 1) != 0)
    {
      v3 = 18;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.HighIntensityIntervalTraining")) & 1) != 0)
    {
      v3 = 19;
    }
    else if (objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.WorkoutNameIdentifier.Swim")))
    {
      v3 = 20;
    }
    else
    {
      v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INWorkoutNameIdentifierValueAsString(void *a1)
{
  uint64_t BackingType;

  if (a1)
  {
    BackingType = INWorkoutNameIdentifierGetBackingType(a1);
    if (BackingType < 0x15)
      return off_1E2292410[BackingType];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), BackingType);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return (__CFString *)a1;
}

BOOL _INPBEndWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INCreateTaskListIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E22924E0[a1];
}

uint64_t _INPBSetSeatSettingsInCarIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_65;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_69:
        objc_msgSend(a1, "setEnableHeating:", v21 != 0);
        goto LABEL_88;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_73:
        objc_msgSend(a1, "setEnableCooling:", v27 != 0);
        goto LABEL_88;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_77:
        objc_msgSend(a1, "setEnableMassage:", v33 != 0);
        goto LABEL_88;
      case 5u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v43 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v43 = 0;
        else
          v43 = v39;
LABEL_82:
        objc_msgSend(a1, "setSeat:", v43);
        goto LABEL_88;
      case 6u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLevel:", v17, 0, 0);
        goto LABEL_65;
      case 7u:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                v50 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
        else
          v50 = v46;
LABEL_87:
        objc_msgSend(a1, "setRelativeLevelSetting:", v50);
        goto LABEL_88;
      case 8u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_65:

LABEL_88:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_90:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_88;
    }
  }
}

INEvent *INIntentSlotValueTransformFromEvent(void *a1)
{
  id v1;
  INEvent *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INEvent *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INEvent alloc];
    objc_msgSend(v1, "eventType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "eventDescriptors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INEvent initWithEventType:eventDescriptors:](v2, "initWithEventType:eventDescriptors:", v4, v6);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBEvent *INIntentSlotValueTransformToEvent(void *a1)
{
  id v1;
  _INPBEvent *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBEvent);
    objc_msgSend(v1, "eventType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBEvent setEventType:](v2, "setEventType:", v4);

    objc_msgSend(v1, "eventDescriptors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBEvent setEventDescriptors:](v2, "setEventDescriptors:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromEvent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToEvent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedEventFromEvent(void *a1)
{
  return a1;
}

INPlace *INIntentSlotValueTransformFromPlace(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  INPlace *v12;
  INPlace *v14;

  if (a1)
  {
    v1 = a1;
    v14 = [INPlace alloc];
    objc_msgSend(v1, "placeType");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "placeSubType");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "placeDescriptors");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v1, "hasPersonalPlaceType");
    v9 = objc_msgSend(v1, "personalPlaceType");

    v10 = 2 * (v9 == 3);
    if (v9 == 2)
      v10 = 1;
    if (v8)
      v11 = v10;
    else
      v11 = 0;
    v12 = -[INPlace initWithPlaceType:placeSubType:placeDescriptors:personalPlaceType:](v14, "initWithPlaceType:placeSubType:placeDescriptors:personalPlaceType:", v3, v5, v7, v11);

  }
  else
  {
    v12 = 0;
  }
  return v12;
}

_INPBPlace *INIntentSlotValueTransformToPlace(void *a1)
{
  id v1;
  _INPBPlace *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPlace);
    objc_msgSend(v1, "placeType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPlace setPlaceType:](v2, "setPlaceType:", v4);

    objc_msgSend(v1, "placeSubType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPlace setPlaceSubType:](v2, "setPlaceSubType:", v6);

    objc_msgSend(v1, "placeDescriptors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPlace setPlaceDescriptors:](v2, "setPlaceDescriptors:", v8);

    v9 = objc_msgSend(v1, "personalPlaceType");
    if (v9 == 1)
      v10 = 2;
    else
      v10 = 0x7FFFFFFF;
    if (v9 == 2)
      v11 = 3;
    else
      v11 = v10;
    -[_INPBPlace setPersonalPlaceType:](v2, "setPersonalPlaceType:", v11);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPlaces(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPlace(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPlaces(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPlace(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPlaceFromPlace(void *a1)
{
  return a1;
}

INActivity *INIntentSlotValueTransformFromActivity(void *a1)
{
  id v1;
  INActivity *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INActivity *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INActivity alloc];
    objc_msgSend(v1, "activityType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "activityDescriptors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INActivity initWithActivityType:activityDescriptors:](v2, "initWithActivityType:activityDescriptors:", v4, v6);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBActivity *INIntentSlotValueTransformToActivity(void *a1)
{
  id v1;
  _INPBActivity *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBActivity);
    objc_msgSend(v1, "activityType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBActivity setActivityType:](v2, "setActivityType:", v4);

    objc_msgSend(v1, "activityDescriptors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBActivity setActivityDescriptors:](v2, "setActivityDescriptors:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromActivities(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromActivity(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToActivities(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToActivity(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedActivityFromActivity(void *a1)
{
  return a1;
}

id INIntentSlotValueTransformFromFile(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  INFile *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  INFile *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  INFile *v19;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "hasRemovedOnCompletion"))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v2, "removedOnCompletion"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }
    objc_msgSend(v2, "fileURL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = [INFile alloc];
      objc_msgSend(v2, "filename");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "fileURL");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromURLValue(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "typeIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = -[INFile _initWithData:filename:fileURL:typeIdentifier:removedOnCompletion:](v6, "_initWithData:filename:fileURL:typeIdentifier:removedOnCompletion:", 0, v7, v9, v10, v3);

    }
    else
    {
      objc_msgSend(v2, "data");
      v11 = objc_claimAutoreleasedReturnValue();
      if (v11
        && (v12 = (void *)v11,
            objc_msgSend(v2, "filename"),
            v13 = (void *)objc_claimAutoreleasedReturnValue(),
            v13,
            v12,
            v13))
      {
        v14 = [INFile alloc];
        objc_msgSend(v2, "data");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "filename");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "typeIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[INFile _initWithData:filename:fileURL:typeIdentifier:removedOnCompletion:](v14, "_initWithData:filename:fileURL:typeIdentifier:removedOnCompletion:", v7, v8, 0, v9, v3);
      }
      else
      {
        objc_msgSend(v2, "bookmarkData");
        v16 = objc_claimAutoreleasedReturnValue();
        if (!v16
          || (v17 = (void *)v16,
              objc_msgSend(v2, "filename"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v18,
              v17,
              !v18))
        {
          v4 = 0;
          goto LABEL_16;
        }
        v19 = [INFile alloc];
        objc_msgSend(v2, "bookmarkData");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "filename");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "typeIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[INFile _initWithBookmarkData:filename:typeIdentifier:removedOnCompletion:](v19, "_initWithBookmarkData:filename:typeIdentifier:removedOnCompletion:", v7, v8, v9, v3);
      }
      v4 = (id)v15;
    }

LABEL_16:
    goto LABEL_17;
  }
  v4 = 0;
LABEL_17:

  return v4;
}

_INPBFile *INIntentSlotValueTransformToFile(void *a1)
{
  id v1;
  _INPBFile *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBFile);
    if (objc_msgSend(v1, "_isFileURLBased"))
    {
      objc_msgSend(v1, "fileURL");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToURLValue(v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBFile setFileURL:](v2, "setFileURL:", v4);

    }
    else
    {
      objc_msgSend(v1, "_bookmarkData");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
      {
        objc_msgSend(v1, "_bookmarkData");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBFile setBookmarkData:](v2, "setBookmarkData:", v3);
      }
      else
      {
        objc_msgSend(v1, "data");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBFile setData:](v2, "setData:", v3);
      }
    }

    objc_msgSend(v1, "filename");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFile setFilename:](v2, "setFilename:", v6);

    objc_msgSend(v1, "typeIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFile setTypeIdentifier:](v2, "setTypeIdentifier:", v7);

    objc_msgSend(v1, "_removedOnCompletionValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
      -[_INPBFile setRemovedOnCompletion:](v2, "setRemovedOnCompletion:", objc_msgSend(v1, "removedOnCompletion"));
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromFiles(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromFile(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFiles(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToFile(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

INGeographicalFeature *INIntentSlotValueTransformFromGeographicalFeature(void *a1)
{
  id v1;
  INGeographicalFeature *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INGeographicalFeature *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INGeographicalFeature alloc];
    objc_msgSend(v1, "geographicalFeatureType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "geographicalFeatureDescriptors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INGeographicalFeature initWithGeographicalFeatureType:geographicalFeatureDescriptors:](v2, "initWithGeographicalFeatureType:geographicalFeatureDescriptors:", v4, v6);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBGeographicalFeature *INIntentSlotValueTransformToGeographicalFeature(void *a1)
{
  id v1;
  _INPBGeographicalFeature *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBGeographicalFeature);
    objc_msgSend(v1, "geographicalFeatureType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBGeographicalFeature setGeographicalFeatureType:](v2, "setGeographicalFeatureType:", v4);

    objc_msgSend(v1, "geographicalFeatureDescriptors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBGeographicalFeature setGeographicalFeatureDescriptors:](v2, "setGeographicalFeatureDescriptors:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromGeographicalFeatures(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromGeographicalFeature(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToGeographicalFeatures(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToGeographicalFeature(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedGeographicalFeatureFromGeographicalFeature(void *a1)
{
  return a1;
}

uint64_t _INPBSearchForTimersIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _INPBIntentMetadata *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0)
          goto LABEL_59;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_27;
      case 2u:
        v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLabel:", v19, 0, 0);
LABEL_27:

LABEL_57:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_59:

        return 0;
      case 3u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0.0;
        }
        objc_msgSend(a1, "setDuration:", v23);
        goto LABEL_57;
      case 4u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              v15 = v25++ >= 9;
              if (v15)
              {
                v31 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v26;
LABEL_49:
        objc_msgSend(a1, "setState:", v31);
        goto LABEL_57;
      case 5u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v34 |= (unint64_t)(v38 & 0x7F) << v32;
            if (v38 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                v39 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v34;
LABEL_54:
        objc_msgSend(a1, "setType:", v39);
        goto LABEL_57;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
    }
  }
}

uint64_t _INPBMediaItemValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  _INPBValueMetadata *v18;
  double v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 99)
      {
        switch((int)v17)
        {
          case 1:
            v18 = objc_alloc_init(_INPBValueMetadata);
            if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
              goto LABEL_62;
            PBReaderRecallMark();
            objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
            goto LABEL_51;
          case 2:
            PBReaderReadString();
            v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1, "setIdentifier:", v18);
            goto LABEL_51;
          case 3:
            PBReaderReadString();
            v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1, "setTitle:", v18);
            goto LABEL_51;
          case 4:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            break;
          case 5:
            v18 = objc_alloc_init(_INPBImageValue);
            if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v18, a2) & 1) == 0)
              goto LABEL_62;
            PBReaderRecallMark();
            objc_msgSend(a1, "setArtwork:", v18, 0, 0);
            goto LABEL_51;
          case 6:
            PBReaderReadString();
            v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1, "setArtist:", v18);
            goto LABEL_51;
          case 7:
            PBReaderReadString();
            v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1, "setAssetInfo:", v18);
            goto LABEL_51;
          default:
            goto LABEL_54;
        }
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_57;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_60;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
        else
          v26 = v22;
LABEL_60:
        objc_msgSend(a1, "setType:", v26, v28, v29);
        goto LABEL_52;
      }
      if ((_DWORD)v17 == 100)
      {
        v18 = objc_alloc_init(_INPBScoredValue);
        v28 = 0;
        v29 = 0;
        if (!PBReaderPlaceMark() || !_INPBScoredValueReadFrom(v18, a2))
        {
LABEL_62:

          return 0;
        }
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addTopics:", v18, 0, 0);
        goto LABEL_51;
      }
      if ((_DWORD)v17 == 101)
        break;
      if ((_DWORD)v17 == 102)
      {
        v18 = objc_alloc_init(_INPBPrivateMediaItemValueData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaItemValueDataReadFrom(v18, a2, v19) & 1) == 0)
          goto LABEL_62;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaItemValueData:", v18, 0, 0);
LABEL_51:

        goto LABEL_52;
      }
LABEL_54:
      result = PBReaderSkipValueWithTag();
      if (!(_DWORD)result)
        return result;
LABEL_52:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBScoredValue);
    v28 = 0;
    v29 = 0;
    if (!PBReaderPlaceMark() || !_INPBScoredValueReadFrom(v18, a2))
      goto LABEL_62;
    PBReaderRecallMark();
    if (v18)
      objc_msgSend(a1, "addNamedEntities:", v18, 0, 0);
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDeleteEventIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 3)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setConfirmationReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C18033C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C1805D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C18076C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t _INPBCalendarEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDateTimeRangeValue *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEventIdentifier:", v17);
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTitle:", v17);
        goto LABEL_41;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTimeRange:", v17, 0, 0);
        goto LABEL_41;
      case 4u:
        v17 = objc_alloc_init(_INPBEventParticipant);
        if (!PBReaderPlaceMark() || !_INPBEventParticipantReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addParticipants:", v17, 0, 0);
        goto LABEL_41;
      case 5u:
        v17 = objc_alloc_init(_INPBLocation);
        if (PBReaderPlaceMark() && (_INPBLocationReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLocation:", v17, 0, 0);
LABEL_41:

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_47:
        objc_msgSend(a1, "setIsContactBirthday:", v21 != 0);
        goto LABEL_42;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCalendarPunchoutURI:", v17);
        goto LABEL_41;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

void sub_18C182A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__96048(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__96049(uint64_t a1)
{

}

uint64_t _INPBSetTimerAttributeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  _INPBIntentMetadata *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_33;
      case 2u:
        v19 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v19, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v19, 0, 0);
        goto LABEL_33;
      case 3u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0.0;
        }
        objc_msgSend(a1, "setToDuration:", v23);
        goto LABEL_36;
      case 4u:
        v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setToLabel:", v19, 0, 0);
LABEL_33:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

uint64_t _INPBMessageLinkMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  _INPBURLValue *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v17 = v10 >> 3;
    if ((int)(v10 >> 3) > 79)
      break;
    if ((int)v17 <= 59)
    {
      switch((int)v17)
      {
        case 1:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSiteName:", v18);
          goto LABEL_106;
        case 2:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSummary:", v18);
          goto LABEL_106;
        case 3:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setTitle:", v18);
          goto LABEL_106;
        case 4:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setOpenGraphType:", v18);
          goto LABEL_106;
        case 5:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setItemType:", v18);
          goto LABEL_106;
        case 6:
          v18 = objc_alloc_init(_INPBURLValue);
          if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v18, a2))
            goto LABEL_115;
          PBReaderRecallMark();
          objc_msgSend(a1, "setLinkURL:", v18, 0, 0);
          goto LABEL_106;
        case 7:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setOriginalURL:", v18);
          goto LABEL_106;
        case 8:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          if (v18)
            objc_msgSend(a1, "addImageURL:", v18);
          goto LABEL_106;
        case 9:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          if (v18)
            objc_msgSend(a1, "addIconURL:", v18);
          goto LABEL_106;
        case 10:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setCreator:", v18);
          goto LABEL_106;
        case 11:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          break;
        case 12:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setITunesStoreIdentifier:", v18);
          goto LABEL_106;
        case 13:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setITunesStoreFrontIdentifier:", v18);
          goto LABEL_106;
        case 20:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSongTitle:", v18);
          goto LABEL_106;
        case 21:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSongArtist:", v18);
          goto LABEL_106;
        case 22:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSongAlbum:", v18);
          goto LABEL_106;
        case 30:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAlbumName:", v18);
          goto LABEL_106;
        case 31:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAlbumArtist:", v18);
          goto LABEL_106;
        case 40:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setMusicVideoName:", v18);
          goto LABEL_106;
        case 41:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setMusicVideoArtist:", v18);
          goto LABEL_106;
        case 50:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setArtistName:", v18);
          goto LABEL_106;
        case 51:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setArtistGenre:", v18);
          goto LABEL_106;
        default:
          goto LABEL_53;
      }
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_110;
        v20 += 7;
        v14 = v21++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_113;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_110:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
      else
        v26 = v22;
LABEL_113:
      objc_msgSend(a1, "setLinkMediaType:", v26);
      goto LABEL_107;
    }
    if ((int)v17 > 69)
    {
      if ((_DWORD)v17 == 70)
      {
        PBReaderReadString();
        v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRadioName:", v18);
      }
      else
      {
        if ((_DWORD)v17 != 71)
        {
LABEL_53:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_107;
        }
        PBReaderReadString();
        v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRadioCurator:", v18);
      }
    }
    else if ((_DWORD)v17 == 60)
    {
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setPlaylistName:", v18);
    }
    else
    {
      if ((_DWORD)v17 != 61)
        goto LABEL_53;
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setPlaylistCurator:", v18);
    }
LABEL_106:

LABEL_107:
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return *(_BYTE *)(a2 + *v5) == 0;
  }
  if ((int)v17 > 149)
  {
    if ((int)v17 <= 169)
    {
      switch((_DWORD)v17)
      {
        case 0x96:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setMovieName:", v18);
          break;
        case 0x97:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setMovieGenre:", v18);
          break;
        case 0xA0:
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setTvShowName:", v18);
          break;
        default:
          goto LABEL_53;
      }
    }
    else if ((int)v17 > 179)
    {
      if ((_DWORD)v17 == 180)
      {
        PBReaderReadString();
        v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAppleTvTitle:", v18);
      }
      else
      {
        if ((_DWORD)v17 != 181)
          goto LABEL_53;
        PBReaderReadString();
        v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAppleTvSubtitle:", v18);
      }
    }
    else if ((_DWORD)v17 == 170)
    {
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setMovieBundleName:", v18);
    }
    else
    {
      if ((_DWORD)v17 != 171)
        goto LABEL_53;
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setMovieBundleGenre:", v18);
    }
    goto LABEL_106;
  }
  switch((int)v17)
  {
    case 120:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setPodcastEpisodeName:", v18);
      goto LABEL_106;
    case 121:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setPodcastEpisodePodcastName:", v18);
      goto LABEL_106;
    case 122:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setPodcastEpisodeArtist:", v18);
      goto LABEL_106;
    case 123:
      v18 = objc_alloc_init(_INPBDateTime);
      if (PBReaderPlaceMark() && (_INPBDateTimeReadFrom(v18, a2) & 1) != 0)
      {
        PBReaderRecallMark();
        objc_msgSend(a1, "setPodcastEpisodeReleaseDate:", v18, 0, 0);
        goto LABEL_106;
      }
LABEL_115:

      return 0;
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
      goto LABEL_53;
    case 130:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setTvEpisodeEpisodeName:", v18);
      goto LABEL_106;
    case 131:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setTvEpisodeSeasonName:", v18);
      goto LABEL_106;
    case 132:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setTvEpisodeGenre:", v18);
      goto LABEL_106;
    case 140:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setTvSeasonName:", v18);
      goto LABEL_106;
    case 141:
      PBReaderReadString();
      v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setTvSeasonGenre:", v18);
      goto LABEL_106;
    default:
      switch((int)v17)
      {
        case 'P':
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSoftwareName:", v18);
          goto LABEL_106;
        case 'Q':
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSoftwareGenre:", v18);
          goto LABEL_106;
        case 'R':
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSoftwarePlatform:", v18);
          goto LABEL_106;
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
          goto LABEL_53;
        case 'Z':
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setBookName:", v18);
          goto LABEL_106;
        case '[':
          PBReaderReadString();
          v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setBookAuthor:", v18);
          goto LABEL_106;
        default:
          switch((int)v17)
          {
            case 'd':
              PBReaderReadString();
              v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setAudioBookName:", v18);
              goto LABEL_106;
            case 'e':
              PBReaderReadString();
              v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setAudioBookAuthor:", v18);
              goto LABEL_106;
            case 'f':
              PBReaderReadString();
              v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setAudioBookNarrator:", v18);
              goto LABEL_106;
            case 'n':
              PBReaderReadString();
              v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setPodcastName:", v18);
              goto LABEL_106;
            case 'o':
              PBReaderReadString();
              v18 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setPodcastArtist:", v18);
              goto LABEL_106;
            default:
              goto LABEL_53;
          }
      }
  }
}

__CFString *INPlayMediaIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return off_1E2292808[a1];
}

uint64_t INPlaybackRepeatModeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INPlaybackRepeatModeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INPlaybackRepeatModeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 3) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INPlaybackRepeatModeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return *(&off_1E22928B0 + a1 - 1);
}

uint64_t INPlaybackRepeatModeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("none")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("all")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("one")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPlaybackRepeatModeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("one");
      break;
    case 2:
      v4 = CFSTR("all");
      break;
    case 1:
      v4 = CFSTR("none");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

BOOL INMediaItemTypeHasBackingType(unint64_t a1)
{
  return a1 < 0x15;
}

unint64_t INMediaItemTypeGetBackingType(unint64_t result)
{
  if (result >= 0x15)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMediaItemTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 0x13)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INMediaItemTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13)
    return CFSTR("unknown");
  else
    return *(&off_1E22928C8 + a1 - 1);
}

uint64_t INMediaItemTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("song")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("album")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("artist")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("genre")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playlist")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcastShow")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcastEpisode")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcastPlaylist")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("musicStation")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("audioBook")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("movie")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TVShow")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TVShowEpisode")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("musicVideo")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcastStation")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("radioStation")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("station")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("music")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("algorithmicRadioStation")) & 1) != 0)
  {
    v2 = 19;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("news")))
  {
    v2 = 20;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaItemTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("song");
      goto LABEL_23;
    case 2:
      v4 = CFSTR("album");
      goto LABEL_23;
    case 3:
      v4 = CFSTR("artist");
      goto LABEL_23;
    case 4:
      v4 = CFSTR("genre");
      goto LABEL_23;
    case 5:
      v4 = CFSTR("playlist");
      goto LABEL_23;
    case 6:
      v4 = CFSTR("podcast show");
      goto LABEL_23;
    case 7:
      v4 = CFSTR("podcast episode");
      goto LABEL_23;
    case 8:
      v4 = CFSTR("podcast playlist");
      goto LABEL_23;
    case 9:
      v4 = CFSTR("music station");
      goto LABEL_23;
    case 10:
      v4 = CFSTR("audio book");
      goto LABEL_23;
    case 11:
      v4 = CFSTR("movie");
      goto LABEL_23;
    case 12:
      v4 = CFSTR("t v show");
      goto LABEL_23;
    case 13:
      v4 = CFSTR("t v show episode");
      goto LABEL_23;
    case 14:
      v4 = CFSTR("music video");
      goto LABEL_23;
    case 15:
      v4 = CFSTR("podcast station");
      goto LABEL_23;
    case 16:
      v4 = CFSTR("radio station");
      goto LABEL_23;
    case 17:
      v4 = CFSTR("station");
      goto LABEL_23;
    case 18:
      v4 = CFSTR("music");
      goto LABEL_23;
    case 19:
      v4 = CFSTR("algorithmic radio station");
      goto LABEL_23;
    case 20:
      v4 = CFSTR("news");
LABEL_23:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INSetTimerAttributeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return (uint64_t)*(&off_1E2292968 + a1);
}

uint64_t INResumeTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return (uint64_t)*(&off_1E22929B0 + a1);
}

uint64_t _INPBCreateTimerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTimer *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedTimer:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INResetTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return (uint64_t)*(&off_1E2292A08 + a1);
}

uint64_t INEventAttributeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INEventAttributeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INEventAttributeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INEventAttributeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return *(&off_1E2292A48 + a1 - 1);
}

uint64_t INEventAttributeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("eventLocation")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("participants")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("datetime")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INEventAttributeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("datetime");
      break;
    case 2:
      v4 = CFSTR("participants");
      break;
    case 1:
      v4 = CFSTR("event location");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t INCreateTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return (uint64_t)*(&off_1E2292A60 + a1);
}

uint64_t _INPBCreateTimerIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _INPBIntentMetadata *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_30;
      case 2u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0.0;
        }
        objc_msgSend(a1, "setDuration:", v23);
        goto LABEL_45;
      case 3u:
        v19 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLabel:", v19, 0, 0);
LABEL_30:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      case 4u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              v15 = v25++ >= 9;
              if (v15)
              {
                v31 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v26;
LABEL_42:
        objc_msgSend(a1, "setType:", v31);
        goto LABEL_45;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

uint64_t _INPBDeleteEventIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_38;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_38:
            objc_msgSend(a1, "setDeleteAllOccurrences:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTargetEventIdentifier:", v24);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INDeleteTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return (uint64_t)*(&off_1E2292AD8 + a1);
}

uint64_t _INPBResetTimerIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setResetMultiple:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INPauseTimerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return (uint64_t)*(&off_1E2292B18 + a1);
}

INTimer *INIntentSlotValueTransformFromTimer(void *a1)
{
  id v1;
  INTimer *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  INTimer *v18;

  if (a1)
  {
    v1 = a1;
    v2 = [INTimer alloc];
    objc_msgSend(v1, "label");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "duration");
    v6 = v5;
    objc_msgSend(v1, "remainingTime");
    v8 = v7;
    objc_msgSend(v1, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v1, "hasState");
    v11 = objc_msgSend(v1, "state");
    v12 = v11 == 1;
    if (v11 == 2)
      v12 = 2;
    if (v10)
      v13 = v12;
    else
      v13 = 0;
    v14 = objc_msgSend(v1, "hasType");
    v15 = objc_msgSend(v1, "type");

    v16 = v15 == 1;
    if (v15 == 2)
      v16 = 2;
    if (v14)
      v17 = v16;
    else
      v17 = 0;
    v18 = -[INTimer initWithLabel:duration:remainingTime:identifier:state:type:](v2, "initWithLabel:duration:remainingTime:identifier:state:type:", v4, v9, v13, v17, v6, v8);

  }
  else
  {
    v18 = 0;
  }
  return v18;
}

_INPBTimer *INIntentSlotValueTransformToTimer(void *a1)
{
  id v1;
  _INPBTimer *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTimer);
    objc_msgSend(v1, "label");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTimer setLabel:](v2, "setLabel:", v4);

    objc_msgSend(v1, "duration");
    -[_INPBTimer setDuration:](v2, "setDuration:");
    objc_msgSend(v1, "remainingTime");
    -[_INPBTimer setRemainingTime:](v2, "setRemainingTime:");
    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTimer setIdentifier:](v2, "setIdentifier:", v5);

    v6 = objc_msgSend(v1, "state");
    if (v6 >= 3)
      v7 = 0x7FFFFFFFLL;
    else
      v7 = v6;
    -[_INPBTimer setState:](v2, "setState:", v7);
    v8 = objc_msgSend(v1, "type");

    if (v8 >= 3)
      v9 = 0x7FFFFFFFLL;
    else
      v9 = v8;
    -[_INPBTimer setType:](v2, "setType:", v9);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTimers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTimer(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTimers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTimer(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTimerFromTimer(void *a1)
{
  return a1;
}

uint64_t INSearchForTimersIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E2292B70 + a1);
}

BOOL INTimerStateHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INTimerStateGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INTimerStateGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INTimerStateGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("timerPaused");
  if (a1 == 1)
    return CFSTR("timerRunning");
  else
    return v1;
}

uint64_t INTimerStateWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("timerRunning")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("timerPaused")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTimerStateGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("timer paused");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("timer running");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

INHomeContent *INIntentSlotValueTransformFromHomeContent(void *a1)
{
  id v1;
  INHomeContent *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INHomeContent *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INHomeContent alloc];
    objc_msgSend(v1, "filter");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromHomeFilter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "actions");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromHomeActions(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INHomeContent initWithFilter:actions:](v2, "initWithFilter:actions:", v4, v6);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBHomeContent *INIntentSlotValueTransformToHomeContent(void *a1)
{
  id v1;
  _INPBHomeContent *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeContent);
    objc_msgSend(v1, "filter");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToHomeFilter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeContent setFilter:](v2, "setFilter:", v4);

    objc_msgSend(v1, "actions");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToHomeActions(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeContent setActions:](v2, "setActions:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeContents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeContent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeContents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeContent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeContentFromHomeContent(void *a1)
{
  return a1;
}

uint64_t INHomeServiceTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0x28) & (0xFFFFFFFFFEuLL >> a1);
}

uint64_t INHomeServiceTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0x27)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INHomeServiceTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 0x27) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INHomeServiceTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x26)
    return CFSTR("unknown");
  else
    return *(&off_1E2292BA0 + a1 - 1);
}

uint64_t INHomeServiceTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lightbulb")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("switch")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("thermostat")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("garageDoorOpener")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fan")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("outlet")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("doorLock")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motorizedDoor")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("securitySystem")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motorizedWindow")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shades")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("speaker")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heaterCooler")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humidifierDehumidifier")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("slat")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("irrigationSystem")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("valve")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("faucet")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("television")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ipCamera")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("custom")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("temperatureSensor")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humiditySensor")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airQualitySensor")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("smokeSensor")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonMonoxideSensor")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonDioxideSensor")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("contactSensor")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("occupancySensor")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motionSensor")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lightSensor")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("leakSensor")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("batteryService")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("doorBell")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airPurifier")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("filterMaintenance")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AppleTV")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airportExpress")) & 1) != 0)
  {
    v2 = 38;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("cameraRecording")))
  {
    v2 = 39;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeServiceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("lightbulb");
      goto LABEL_42;
    case 2:
      v4 = CFSTR("switch");
      goto LABEL_42;
    case 3:
      v4 = CFSTR("thermostat");
      goto LABEL_42;
    case 4:
      v4 = CFSTR("garage door opener");
      goto LABEL_42;
    case 5:
      v4 = CFSTR("fan");
      goto LABEL_42;
    case 6:
      v4 = CFSTR("outlet");
      goto LABEL_42;
    case 7:
      v4 = CFSTR("door lock");
      goto LABEL_42;
    case 8:
      v4 = CFSTR("motorized door");
      goto LABEL_42;
    case 9:
      v4 = CFSTR("security system");
      goto LABEL_42;
    case 10:
      v4 = CFSTR("motorized window");
      goto LABEL_42;
    case 11:
      v4 = CFSTR("shades");
      goto LABEL_42;
    case 12:
      v4 = CFSTR("speaker");
      goto LABEL_42;
    case 13:
      v4 = CFSTR("heater cooler");
      goto LABEL_42;
    case 14:
      v4 = CFSTR("humidifier dehumidifier");
      goto LABEL_42;
    case 15:
      v4 = CFSTR("slat");
      goto LABEL_42;
    case 16:
      v4 = CFSTR("irrigation system");
      goto LABEL_42;
    case 17:
      v4 = CFSTR("valve");
      goto LABEL_42;
    case 18:
      v4 = CFSTR("faucet");
      goto LABEL_42;
    case 19:
      v4 = CFSTR("television");
      goto LABEL_42;
    case 20:
      v4 = CFSTR("ip camera");
      goto LABEL_42;
    case 21:
      v4 = CFSTR("custom");
      goto LABEL_42;
    case 22:
      v4 = CFSTR("temperature sensor");
      goto LABEL_42;
    case 23:
      v4 = CFSTR("humidity sensor");
      goto LABEL_42;
    case 24:
      v4 = CFSTR("air quality sensor");
      goto LABEL_42;
    case 25:
      v4 = CFSTR("smoke sensor");
      goto LABEL_42;
    case 26:
      v4 = CFSTR("carbon monoxide sensor");
      goto LABEL_42;
    case 27:
      v4 = CFSTR("carbon dioxide sensor");
      goto LABEL_42;
    case 28:
      v4 = CFSTR("contact sensor");
      goto LABEL_42;
    case 29:
      v4 = CFSTR("occupancy sensor");
      goto LABEL_42;
    case 30:
      v4 = CFSTR("motion sensor");
      goto LABEL_42;
    case 31:
      v4 = CFSTR("light sensor");
      goto LABEL_42;
    case 32:
      v4 = CFSTR("leak sensor");
      goto LABEL_42;
    case 33:
      v4 = CFSTR("battery service");
      goto LABEL_42;
    case 34:
      v4 = CFSTR("door bell");
      goto LABEL_42;
    case 35:
      v4 = CFSTR("air purifier");
      goto LABEL_42;
    case 36:
      v4 = CFSTR("filter maintenance");
      goto LABEL_42;
    case 37:
      v4 = CFSTR("Apple TV");
      goto LABEL_42;
    case 38:
      v4 = CFSTR("airport express");
      goto LABEL_42;
    case 39:
      v4 = CFSTR("camera recording");
LABEL_42:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INHomeFilter *INIntentSlotValueTransformFromHomeFilter(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  INHomeFilter *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  INHomeFilter *v32;
  int v33;
  void *v34;
  void *v35;

  v1 = a1;
  if (v1)
  {
    v32 = [INHomeFilter alloc];
    objc_msgSend(v1, "entityIdentifiers");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "entityName");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (v2)
    {
      v33 = 0;
    }
    else
    {
      objc_msgSend(v1, "service");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if (v2)
      {
        v33 = 0;
        v23 = v2;
      }
      else
      {
        objc_msgSend(v1, "scene");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 0;
        v33 = 1;
      }
    }
    v24 = v2;
    INIntentSlotValueTransformFromDataString(v2);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasEntityType");
    v6 = objc_msgSend(v1, "entityType");
    v7 = 0;
    if (v6 <= 6 && v5)
      v7 = qword_18C3115A8[v6];
    v30 = v7;
    v8 = objc_msgSend(v1, "hasOuterDeviceType");
    v9 = objc_msgSend(v1, "outerDeviceType");
    v10 = 0;
    v34 = v3;
    if (v9 <= 0x31 && v8)
      v10 = qword_18C311868[v9];
    objc_msgSend(v1, "outerDeviceName");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v29);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v1, "hasDeviceType");
    v12 = objc_msgSend(v1, "deviceType");
    v13 = 0;
    if (v12 <= 0x31 && v11)
      v13 = qword_18C311868[v12];
    v25 = v13;
    objc_msgSend(v1, "home");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v27);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "zone");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v26);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "group");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "room");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v1, "isExcludeFilter");
    BYTE1(v22) = objc_msgSend(v1, "hasAllQuantifier");
    LOBYTE(v22) = v20;
    v4 = -[INHomeFilter initWithEntityIdentifiers:entityName:entityType:outerDeviceType:outerDeviceName:deviceType:home:zone:group:room:isExcludeFilter:hasAllQuantifier:](v32, "initWithEntityIdentifiers:entityName:entityType:outerDeviceType:outerDeviceName:deviceType:home:zone:group:room:isExcludeFilter:hasAllQuantifier:", v35, v31, v30, v10, v28, v25, v14, v15, v17, v19, v22);

    if (v33)
    if (!v34)

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

_INPBHomeFilter *INIntentSlotValueTransformToHomeFilter(void *a1)
{
  id v1;
  _INPBHomeFilter *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeFilter);
    objc_msgSend(v1, "entityIdentifiers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setEntityIdentifiers:](v2, "setEntityIdentifiers:", v3);

    objc_msgSend(v1, "entityName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setEntityName:](v2, "setEntityName:", v5);

    v6 = objc_msgSend(v1, "entityType") - 1;
    if (v6 > 9)
      v7 = 0x7FFFFFFFLL;
    else
      v7 = dword_18C311580[v6];
    -[_INPBHomeFilter setEntityType:](v2, "setEntityType:", v7);
    v8 = objc_msgSend(v1, "outerDeviceType") - 1;
    if (v8 > 0x2C)
      v9 = 0x7FFFFFFFLL;
    else
      v9 = dword_18C3117B0[v8];
    -[_INPBHomeFilter setOuterDeviceType:](v2, "setOuterDeviceType:", v9);
    objc_msgSend(v1, "outerDeviceName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setOuterDeviceName:](v2, "setOuterDeviceName:", v11);

    v12 = objc_msgSend(v1, "deviceType") - 1;
    if (v12 > 0x2C)
      v13 = 0x7FFFFFFFLL;
    else
      v13 = dword_18C3117B0[v12];
    -[_INPBHomeFilter setDeviceType:](v2, "setDeviceType:", v13);
    objc_msgSend(v1, "home");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setHome:](v2, "setHome:", v15);

    objc_msgSend(v1, "zone");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setZone:](v2, "setZone:", v17);

    objc_msgSend(v1, "group");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setGroup:](v2, "setGroup:", v19);

    objc_msgSend(v1, "room");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeFilter setRoom:](v2, "setRoom:", v21);

    -[_INPBHomeFilter setIsExcludeFilter:](v2, "setIsExcludeFilter:", objc_msgSend(v1, "isExcludeFilter"));
    v22 = objc_msgSend(v1, "hasAllQuantifier");

    -[_INPBHomeFilter setHasAllQuantifier:](v2, "setHasAllQuantifier:", v22);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeFilters(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeFilter(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeFilters(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeFilter(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeFilterFromHomeFilter(void *a1)
{
  return a1;
}

void *INMetadataPlistDictionary()
{
  return &unk_1E23FE028;
}

void *INSupportedTypesPlist()
{
  return &unk_1E23FAED8;
}

uint64_t INHomeAttributeValueTypeHasBackingType(unint64_t a1)
{
  return (a1 < 7) & (0x7Eu >> a1);
}

uint64_t INHomeAttributeValueTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 6)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INHomeAttributeValueTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 6) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INHomeAttributeValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return *(&off_1E2292CD8 + a1 - 1);
}

uint64_t INHomeAttributeValueTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("BOOLean")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("double")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("string")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("integer")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("limit")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("range")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeAttributeValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("BOOLean");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("double");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("string");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("integer");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("limit");
      goto LABEL_9;
    case 6:
      v4 = CFSTR("range");
LABEL_9:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INHomeServiceSubtypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INHomeServiceSubtypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 4)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INHomeServiceSubtypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 3)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INHomeServiceSubtypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return *(&off_1E2292D08 + a1 - 1);
}

uint64_t INHomeServiceSubtypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("genericValve")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("irrigationValve")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("showerheadValve")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("faucetValve")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeServiceSubtypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("generic valve");
      goto LABEL_7;
    case 2:
      v4 = CFSTR("irrigation valve");
      goto LABEL_7;
    case 3:
      v4 = CFSTR("showerhead valve");
      goto LABEL_7;
    case 4:
      v4 = CFSTR("faucet valve");
LABEL_7:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INMessageLinkMediaTypeHasBackingType(unint64_t a1)
{
  return a1 < 0x12;
}

uint64_t INMessageLinkMediaTypeGetBackingType(unint64_t a1)
{
  if (a1 >= 0x12)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1 + 10);
}

uint64_t INMessageLinkMediaTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    return 0;
  if (a2 <= 99)
  {
    v2 = 7;
    v13 = 8;
    if (a2 != 90)
      v13 = 0;
    if (a2 != 80)
      v2 = v13;
    v14 = 5;
    v15 = 6;
    if (a2 != 70)
      v15 = 0;
    if (a2 != 60)
      v14 = v15;
    if (a2 <= 79)
      v2 = v14;
    v7 = 3;
    v16 = 4;
    if (a2 != 50)
      v16 = 0;
    if (a2 != 40)
      v7 = v16;
    v17 = 1;
    v18 = 2;
    if (a2 != 30)
      v18 = 0;
    if (a2 != 20)
      v17 = v18;
    if (a2 <= 39)
      v7 = v17;
    v11 = a2 <= 59;
  }
  else
  {
    v2 = 15;
    v3 = 16;
    v4 = 17;
    if (a2 != 180)
      v4 = 0;
    if (a2 != 170)
      v3 = v4;
    if (a2 != 160)
      v2 = v3;
    v5 = 13;
    v6 = 14;
    if (a2 != 150)
      v6 = 0;
    if (a2 != 140)
      v5 = v6;
    if (a2 <= 159)
      v2 = v5;
    v7 = 11;
    v8 = 12;
    if (a2 != 130)
      v8 = 0;
    if (a2 != 120)
      v7 = v8;
    v9 = 9;
    v10 = 10;
    if (a2 != 110)
      v10 = 0;
    if (a2 != 100)
      v9 = v10;
    if (a2 <= 119)
      v7 = v9;
    v11 = a2 <= 139;
  }
  if (v11)
    return v7;
  else
    return v2;
}

const __CFString *INMessageLinkMediaTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x10)
    return CFSTR("unknown");
  else
    return *(&off_1E2292D28 + a1 - 1);
}

uint64_t INMessageLinkMediaTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("song")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("album")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("musicVideo")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("artist")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playlist")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("radio")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("software")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("book")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("audioBook")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcast")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcastEpisode")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TVEpisode")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TVSeason")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("movie")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TVShow")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("movieBundle")) & 1) != 0)
  {
    v2 = 16;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("AppleTV")))
  {
    v2 = 17;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessageLinkMediaTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("song");
      goto LABEL_20;
    case 2:
      v4 = CFSTR("album");
      goto LABEL_20;
    case 3:
      v4 = CFSTR("music video");
      goto LABEL_20;
    case 4:
      v4 = CFSTR("artist");
      goto LABEL_20;
    case 5:
      v4 = CFSTR("playlist");
      goto LABEL_20;
    case 6:
      v4 = CFSTR("radio");
      goto LABEL_20;
    case 7:
      v4 = CFSTR("software");
      goto LABEL_20;
    case 8:
      v4 = CFSTR("book");
      goto LABEL_20;
    case 9:
      v4 = CFSTR("audio book");
      goto LABEL_20;
    case 10:
      v4 = CFSTR("podcast");
      goto LABEL_20;
    case 11:
      v4 = CFSTR("podcast episode");
      goto LABEL_20;
    case 12:
      v4 = CFSTR("t v episode");
      goto LABEL_20;
    case 13:
      v4 = CFSTR("t v season");
      goto LABEL_20;
    case 14:
      v4 = CFSTR("movie");
      goto LABEL_20;
    case 15:
      v4 = CFSTR("t v show");
      goto LABEL_20;
    case 16:
      v4 = CFSTR("movie bundle");
      goto LABEL_20;
    case 17:
      v4 = CFSTR("Apple TV");
LABEL_20:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INMessageLinkMetadata *INIntentSlotValueTransformFromMessageLinkMetadata(INMessageLinkMetadata *a1)
{
  INMessageLinkMetadata *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t FacadeType;
  INMessageLinkMetadata *v16;
  INMessageLinkMetadata *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  if (a1)
  {
    v1 = a1;
    v16 = [INMessageLinkMetadata alloc];
    -[INMessageLinkMetadata siteName](v1, "siteName");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata summary](v1, "summary");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata title](v1, "title");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata openGraphType](v1, "openGraphType");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata itemType](v1, "itemType");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata linkURL](v1, "linkURL");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v18);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata originalURL](v1, "originalURL");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata imageURLs](v1, "imageURLs");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata iconURLs](v1, "iconURLs");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata creator](v1, "creator");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    FacadeType = INMessageLinkMediaTypeGetFacadeType(-[INMessageLinkMetadata hasLinkMediaType](v1, "hasLinkMediaType"), -[INMessageLinkMetadata linkMediaType](v1, "linkMediaType"));
    -[INMessageLinkMetadata iTunesStoreIdentifier](v1, "iTunesStoreIdentifier");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata iTunesStoreFrontIdentifier](v1, "iTunesStoreFrontIdentifier");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata songTitle](v1, "songTitle");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata songArtist](v1, "songArtist");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata songAlbum](v1, "songAlbum");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata albumName](v1, "albumName");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata albumArtist](v1, "albumArtist");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata musicVideoName](v1, "musicVideoName");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata musicVideoArtist](v1, "musicVideoArtist");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata artistName](v1, "artistName");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata artistGenre](v1, "artistGenre");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata playlistName](v1, "playlistName");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata playlistCurator](v1, "playlistCurator");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata radioName](v1, "radioName");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata radioCurator](v1, "radioCurator");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata softwareName](v1, "softwareName");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata softwareGenre](v1, "softwareGenre");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata softwarePlatform](v1, "softwarePlatform");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata bookName](v1, "bookName");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata bookAuthor](v1, "bookAuthor");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata audioBookName](v1, "audioBookName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata audioBookAuthor](v1, "audioBookAuthor");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata audioBookNarrator](v1, "audioBookNarrator");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata podcastName](v1, "podcastName");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata podcastArtist](v1, "podcastArtist");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata podcastEpisodeName](v1, "podcastEpisodeName");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata podcastEpisodePodcastName](v1, "podcastEpisodePodcastName");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata podcastEpisodeArtist](v1, "podcastEpisodeArtist");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata podcastEpisodeReleaseDate](v1, "podcastEpisodeReleaseDate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v14);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata tvEpisodeEpisodeName](v1, "tvEpisodeEpisodeName");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata tvEpisodeSeasonName](v1, "tvEpisodeSeasonName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata tvEpisodeGenre](v1, "tvEpisodeGenre");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata tvSeasonName](v1, "tvSeasonName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata tvSeasonGenre](v1, "tvSeasonGenre");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata movieName](v1, "movieName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata movieGenre](v1, "movieGenre");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata tvShowName](v1, "tvShowName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata movieBundleName](v1, "movieBundleName");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata movieBundleGenre](v1, "movieBundleGenre");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata appleTvTitle](v1, "appleTvTitle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessageLinkMetadata appleTvSubtitle](v1, "appleTvSubtitle");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = -[INMessageLinkMetadata initWithSiteName:summary:title:openGraphType:itemType:linkURL:originalURL:imageURLs:iconURLs:creator:linkMediaType:iTunesStoreIdentifier:iTunesStoreFrontIdentifier:songTitle:songArtist:songAlbum:albumName:albumArtist:musicVideoName:musicVideoArtist:artistName:artistGenre:playlistName:playlistCurator:radioName:radioCurator:softwareName:softwareGenre:softwarePlatform:bookName:bookAuthor:audioBookName:audioBookAuthor:audioBookNarrator:podcastName:podcastArtist:podcastEpisodeName:podcastEpisodePodcastName:podcastEpisodeArtist:podcastEpisodeReleaseDate:tvEpisodeEpisodeName:tvEpisodeSeasonName:tvEpisodeGenre:tvSeasonName:tvSeasonGenre:movieName:movieGenre:tvShowName:movieBundleName:movieBundleGenre:appleTvTitle:appleTvSubtitle:](v16, "initWithSiteName:summary:title:openGraphType:itemType:linkURL:originalURL:imageURLs:iconURLs:creator:linkMediaType:iTunesStoreIdentifier:iTunesStoreFrontIdentifier:songTitle:songArtist:songAlbum:albumName:albumArtist:musicVideoName:musicVideoArtist:artistName:artistGenre:playlistName:playlistCurator:radioName:radioCurator:softwareName:softwareGenre:softwarePlatform:bookName:bookAuthor:audioBookName:audioBookAuthor:audioBookNarrator:podcastName:podcastArtist:podcastEpisodeName:podcastEpisodePodcastName:podcastEpisodeArtist:podcastEpisodeReleaseDate:tvEpisodeEpisodeName:tvEpisodeSeasonName:tvEpisodeGenre:tvSeasonName:tvSeasonGenre:movieName:movieGenre:tvShowName:movieBundleName:movieBundleGenre:appleTvTitle:appleTvSubtitle:", v58, v57, v56, v55, v54, v49, v53, v52, v51, v50, FacadeType,
            v46,
            v48,
            v47,
            v43,
            v45,
            v44,
            v40,
            v42,
            v41,
            v38,
            v39,
            v36,
            v37,
            v34,
            v35,
            v32,
            v33,
            v31,
            v13,
            v30,
            v12,
            v29,
            v28,
            v27,
            v26,
            v25,
            v24,
            v23,
            v22,
            v21,
            v19,
            v20,
            v11,
            v2,
            v3,
            v4,
            v5,
            v6,
            v7,
            v8,
            v9);

    a1 = v17;
  }
  return a1;
}

_INPBMessageLinkMetadata *INIntentSlotValueTransformToMessageLinkMetadata(void *a1)
{
  id v1;
  _INPBMessageLinkMetadata *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMessageLinkMetadata);
    objc_msgSend(v1, "siteName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSiteName:](v2, "setSiteName:", v3);

    objc_msgSend(v1, "summary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSummary:](v2, "setSummary:", v4);

    objc_msgSend(v1, "title");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTitle:](v2, "setTitle:", v5);

    objc_msgSend(v1, "openGraphType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setOpenGraphType:](v2, "setOpenGraphType:", v6);

    objc_msgSend(v1, "itemType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setItemType:](v2, "setItemType:", v7);

    objc_msgSend(v1, "linkURL");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setLinkURL:](v2, "setLinkURL:", v9);

    objc_msgSend(v1, "originalURL");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setOriginalURL:](v2, "setOriginalURL:", v10);

    objc_msgSend(v1, "imageURLs");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setImageURLs:](v2, "setImageURLs:", v11);

    objc_msgSend(v1, "iconURLs");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setIconURLs:](v2, "setIconURLs:", v12);

    objc_msgSend(v1, "creator");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setCreator:](v2, "setCreator:", v13);

    v14 = objc_msgSend(v1, "linkMediaType");
    if (v14 >= 0x12)
      v15 = 0x7FFFFFFFLL;
    else
      v15 = (10 * v14 + 10);
    -[_INPBMessageLinkMetadata setLinkMediaType:](v2, "setLinkMediaType:", v15);
    objc_msgSend(v1, "iTunesStoreIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setITunesStoreIdentifier:](v2, "setITunesStoreIdentifier:", v16);

    objc_msgSend(v1, "iTunesStoreFrontIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setITunesStoreFrontIdentifier:](v2, "setITunesStoreFrontIdentifier:", v17);

    objc_msgSend(v1, "songTitle");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSongTitle:](v2, "setSongTitle:", v18);

    objc_msgSend(v1, "songArtist");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSongArtist:](v2, "setSongArtist:", v19);

    objc_msgSend(v1, "songAlbum");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSongAlbum:](v2, "setSongAlbum:", v20);

    objc_msgSend(v1, "albumName");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setAlbumName:](v2, "setAlbumName:", v21);

    objc_msgSend(v1, "albumArtist");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setAlbumArtist:](v2, "setAlbumArtist:", v22);

    objc_msgSend(v1, "musicVideoName");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setMusicVideoName:](v2, "setMusicVideoName:", v23);

    objc_msgSend(v1, "musicVideoArtist");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setMusicVideoArtist:](v2, "setMusicVideoArtist:", v24);

    objc_msgSend(v1, "artistName");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setArtistName:](v2, "setArtistName:", v25);

    objc_msgSend(v1, "artistGenre");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setArtistGenre:](v2, "setArtistGenre:", v26);

    objc_msgSend(v1, "playlistName");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPlaylistName:](v2, "setPlaylistName:", v27);

    objc_msgSend(v1, "playlistCurator");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPlaylistCurator:](v2, "setPlaylistCurator:", v28);

    objc_msgSend(v1, "radioName");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setRadioName:](v2, "setRadioName:", v29);

    objc_msgSend(v1, "radioCurator");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setRadioCurator:](v2, "setRadioCurator:", v30);

    objc_msgSend(v1, "softwareName");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSoftwareName:](v2, "setSoftwareName:", v31);

    objc_msgSend(v1, "softwareGenre");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSoftwareGenre:](v2, "setSoftwareGenre:", v32);

    objc_msgSend(v1, "softwarePlatform");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setSoftwarePlatform:](v2, "setSoftwarePlatform:", v33);

    objc_msgSend(v1, "bookName");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setBookName:](v2, "setBookName:", v34);

    objc_msgSend(v1, "bookAuthor");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setBookAuthor:](v2, "setBookAuthor:", v35);

    objc_msgSend(v1, "audioBookName");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setAudioBookName:](v2, "setAudioBookName:", v36);

    objc_msgSend(v1, "audioBookAuthor");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setAudioBookAuthor:](v2, "setAudioBookAuthor:", v37);

    objc_msgSend(v1, "audioBookNarrator");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setAudioBookNarrator:](v2, "setAudioBookNarrator:", v38);

    objc_msgSend(v1, "podcastName");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPodcastName:](v2, "setPodcastName:", v39);

    objc_msgSend(v1, "podcastArtist");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPodcastArtist:](v2, "setPodcastArtist:", v40);

    objc_msgSend(v1, "podcastEpisodeName");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPodcastEpisodeName:](v2, "setPodcastEpisodeName:", v41);

    objc_msgSend(v1, "podcastEpisodePodcastName");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPodcastEpisodePodcastName:](v2, "setPodcastEpisodePodcastName:", v42);

    objc_msgSend(v1, "podcastEpisodeArtist");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPodcastEpisodeArtist:](v2, "setPodcastEpisodeArtist:", v43);

    objc_msgSend(v1, "podcastEpisodeReleaseDate");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setPodcastEpisodeReleaseDate:](v2, "setPodcastEpisodeReleaseDate:", v45);

    objc_msgSend(v1, "tvEpisodeEpisodeName");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTvEpisodeEpisodeName:](v2, "setTvEpisodeEpisodeName:", v46);

    objc_msgSend(v1, "tvEpisodeSeasonName");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTvEpisodeSeasonName:](v2, "setTvEpisodeSeasonName:", v47);

    objc_msgSend(v1, "tvEpisodeGenre");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTvEpisodeGenre:](v2, "setTvEpisodeGenre:", v48);

    objc_msgSend(v1, "tvSeasonName");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTvSeasonName:](v2, "setTvSeasonName:", v49);

    objc_msgSend(v1, "tvSeasonGenre");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTvSeasonGenre:](v2, "setTvSeasonGenre:", v50);

    objc_msgSend(v1, "movieName");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setMovieName:](v2, "setMovieName:", v51);

    objc_msgSend(v1, "movieGenre");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setMovieGenre:](v2, "setMovieGenre:", v52);

    objc_msgSend(v1, "tvShowName");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setTvShowName:](v2, "setTvShowName:", v53);

    objc_msgSend(v1, "movieBundleName");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setMovieBundleName:](v2, "setMovieBundleName:", v54);

    objc_msgSend(v1, "movieBundleGenre");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setMovieBundleGenre:](v2, "setMovieBundleGenre:", v55);

    objc_msgSend(v1, "appleTvTitle");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageLinkMetadata setAppleTvTitle:](v2, "setAppleTvTitle:", v56);

    objc_msgSend(v1, "appleTvSubtitle");
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBMessageLinkMetadata setAppleTvSubtitle:](v2, "setAppleTvSubtitle:", v57);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromMessageLinkMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMessageLinkMetadata(*(INMessageLinkMetadata **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMessageLinkMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMessageLinkMetadata(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMessageLinkMetadataFromMessageLinkMetadata(void *a1)
{
  return a1;
}

void sub_18C1A044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNPostalAddressClass_block_invoke_101822(uint64_t a1)
{
  Class result;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary_101823)
  {
    ContactsLibraryCore_frameworkLibrary_101823 = _sl_dlopen();
    if (!ContactsLibraryCore_frameworkLibrary_101823)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CNPostalAddress");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCNPostalAddressClass_softClass_101821 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t INIntentCategoryHasBackingType(unint64_t a1)
{
  return (a1 < 0x15) & (0x1FFFFEu >> a1);
}

uint64_t INIntentCategoryGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13)
    return 0x7FFFFFFFLL;
  else
    return dword_18C312080[a1 - 1];
}

uint64_t INIntentCategoryGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 0x14)
    return qword_18C3120D0[a2 - 1];
  else
    return 0;
}

const __CFString *INIntentCategoryGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13)
    return CFSTR("unknown");
  else
    return off_1E2292DC8[a1 - 1];
}

id INIntentCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("Information");
      goto LABEL_23;
    case 2:
      v4 = CFSTR("Play Audio");
      goto LABEL_23;
    case 3:
      v4 = CFSTR("Play Video");
      goto LABEL_23;
    case 4:
      v4 = CFSTR("Order");
      goto LABEL_23;
    case 5:
      v4 = CFSTR("Navigation");
      goto LABEL_23;
    case 6:
      v4 = CFSTR("Start");
      goto LABEL_23;
    case 7:
      v4 = CFSTR("Share");
      goto LABEL_23;
    case 8:
      v4 = CFSTR("Create");
      goto LABEL_23;
    case 9:
      v4 = CFSTR("Search");
      goto LABEL_23;
    case 10:
      v4 = CFSTR("Toggle");
      goto LABEL_23;
    case 11:
      v4 = CFSTR("Download");
      goto LABEL_23;
    case 12:
      v4 = CFSTR("Log");
      goto LABEL_23;
    case 13:
      v4 = CFSTR("Check In");
      goto LABEL_23;
    case 14:
      v4 = CFSTR("Workflow");
      goto LABEL_23;
    case 15:
      v4 = CFSTR("Request");
      goto LABEL_23;
    case 16:
      v4 = CFSTR("Set");
      goto LABEL_23;
    case 17:
      v4 = CFSTR("Call Audio");
      goto LABEL_23;
    case 18:
      v4 = CFSTR("Call Video");
      goto LABEL_23;
    case 19:
      v4 = CFSTR("Play Sound");
      goto LABEL_23;
    case 20:
      v4 = CFSTR("User Activity");
LABEL_23:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INExecutionContextHasBackingType(unint64_t a1)
{
  return (a1 < 0xB) & (0x7FEu >> a1);
}

uint64_t INExecutionContextGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xA)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INExecutionContextGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 9)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INExecutionContextGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E2292E68[a1 - 1];
}

uint64_t INExecutionContextWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("assistantDialog")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("assistantVoiceShortcut")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("coverSheetPrediction")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("spotlightPrediction")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("spotlightSearch")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("maps")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("workflow")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("watchFace")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("assistantVoiceShortcutViaCloudRelay")) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("CarPlayHomeScreen")))
  {
    v2 = 10;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INExecutionContextGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("assistant dialog");
      goto LABEL_13;
    case 2:
      v4 = CFSTR("assistant voice shortcut");
      goto LABEL_13;
    case 3:
      v4 = CFSTR("cover sheet prediction");
      goto LABEL_13;
    case 4:
      v4 = CFSTR("spotlight prediction");
      goto LABEL_13;
    case 5:
      v4 = CFSTR("spotlight search");
      goto LABEL_13;
    case 6:
      v4 = CFSTR("maps");
      goto LABEL_13;
    case 7:
      v4 = CFSTR("workflow");
      goto LABEL_13;
    case 8:
      v4 = CFSTR("watch face");
      goto LABEL_13;
    case 9:
      v4 = CFSTR("assistant voice shortcut via cloud relay");
      goto LABEL_13;
    case 10:
      v4 = CFSTR("car play home screen");
LABEL_13:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INArchivedObject *INIntentSlotValueTransformFromArchivedObject(void *a1)
{
  id v1;
  INArchivedObject *v2;
  void *v3;
  void *v4;
  INArchivedObject *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INArchivedObject alloc];
    objc_msgSend(v1, "typeName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "messageData");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = -[INArchivedObject initWithTypeName:messageData:](v2, "initWithTypeName:messageData:", v3, v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBArchivedObject *INIntentSlotValueTransformToArchivedObject(void *a1)
{
  id v1;
  _INPBArchivedObject *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBArchivedObject);
    objc_msgSend(v1, "typeName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBArchivedObject setTypeName:](v2, "setTypeName:", v3);

    objc_msgSend(v1, "messageData");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBArchivedObject setMessageData:](v2, "setMessageData:", v4);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromArchivedObjects(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromArchivedObject(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToArchivedObjects(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToArchivedObject(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedArchivedObjectFromArchivedObject(void *a1)
{
  return a1;
}

id _INEnumerableValueProcessingBlock(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___INEnumerableValueProcessingBlock_block_invoke;
  v7[3] = &unk_1E2292EC0;
  v8 = v3;
  v9 = a1;
  v4 = v3;
  v5 = (void *)MEMORY[0x18D7812C4](v7);

  return v5;
}

uint64_t INDeviceIdiomHasBackingType(unint64_t a1)
{
  return (a1 < 8) & (0xFEu >> a1);
}

uint64_t INDeviceIdiomGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 7)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INDeviceIdiomGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 6)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INDeviceIdiomGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E2292EE0[a1 - 1];
}

uint64_t INDeviceIdiomWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("phone")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pad")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("watch")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("homePod")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CarPlay")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AppleTV")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Mac")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INDeviceIdiomGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("phone");
      goto LABEL_10;
    case 2:
      v4 = CFSTR("pad");
      goto LABEL_10;
    case 3:
      v4 = CFSTR("watch");
      goto LABEL_10;
    case 4:
      v4 = CFSTR("home pod");
      goto LABEL_10;
    case 5:
      v4 = CFSTR("CarPlay");
      goto LABEL_10;
    case 6:
      v4 = CFSTR("Apple TV");
      goto LABEL_10;
    case 7:
      v4 = CFSTR("Mac");
LABEL_10:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INVoiceCommandDeviceInformation *INIntentSlotValueTransformFromVoiceCommandDeviceInformation(void *a1)
{
  id v1;
  INVoiceCommandDeviceInformation *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  INVoiceCommandDeviceInformation *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INVoiceCommandDeviceInformation alloc];
    v3 = objc_msgSend(v1, "hasDeviceIdiom");
    v4 = objc_msgSend(v1, "deviceIdiom") - 1;
    if (v4 <= 6)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (v3)
      v6 = v5;
    else
      v6 = 0;
    v7 = (void *)MEMORY[0x1E0CB37E8];
    v8 = objc_msgSend(v1, "isHomePodInUltimateMode");

    objc_msgSend(v7, "numberWithBool:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INVoiceCommandDeviceInformation initWithDeviceIdiom:isHomePodInUltimateMode:](v2, "initWithDeviceIdiom:isHomePodInUltimateMode:", v6, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBVoiceCommandDeviceInformation *INIntentSlotValueTransformToVoiceCommandDeviceInformation(void *a1)
{
  id v1;
  _INPBVoiceCommandDeviceInformation *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBVoiceCommandDeviceInformation);
    v3 = objc_msgSend(v1, "deviceIdiom") - 1;
    if (v3 < 7)
      v4 = (v3 + 1);
    else
      v4 = 0x7FFFFFFFLL;
    -[_INPBVoiceCommandDeviceInformation setDeviceIdiom:](v2, "setDeviceIdiom:", v4);
    objc_msgSend(v1, "isHomePodInUltimateMode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBVoiceCommandDeviceInformation setIsHomePodInUltimateMode:](v2, "setIsHomePodInUltimateMode:", objc_msgSend(v5, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromVoiceCommandDeviceInformations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromVoiceCommandDeviceInformation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToVoiceCommandDeviceInformations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToVoiceCommandDeviceInformation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedVoiceCommandDeviceInformationFromVoiceCommandDeviceInformation(void *a1)
{
  return a1;
}

void sub_18C1A2924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCHSWidgetDescriptorsPredicateClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ChronoServicesLibrary();
  result = objc_getClass("CHSWidgetDescriptorsPredicate");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCHSWidgetDescriptorsPredicateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCHSControlDescriptorsPredicateClass_block_invoke(v3);
  }
  return result;
}

Class __getCHSControlDescriptorsPredicateClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ChronoServicesLibrary();
  result = objc_getClass("CHSControlDescriptorsPredicate");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCHSControlDescriptorsPredicateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCHSWidgetExtensionProviderOptionsClass_block_invoke(v3);
  }
  return result;
}

Class __getCHSWidgetExtensionProviderOptionsClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ChronoServicesLibrary();
  result = objc_getClass("CHSWidgetExtensionProviderOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCHSWidgetExtensionProviderOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCHSWidgetExtensionProviderClass_block_invoke(v3);
  }
  return result;
}

void __getCHSWidgetExtensionProviderClass_block_invoke(uint64_t a1)
{
  ChronoServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CHSWidgetExtensionProvider");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCHSWidgetExtensionProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    ChronoServicesLibrary();
  }
}

void ChronoServicesLibrary()
{
  void *v0;

  if (!ChronoServicesLibraryCore_frameworkLibrary)
  {
    ChronoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!ChronoServicesLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

BOOL INToggleStateHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INToggleStateGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INToggleStateGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INToggleStateGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("off");
  if (a1 == 1)
    return CFSTR("on");
  else
    return v1;
}

uint64_t INToggleStateWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("on")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("off")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *INToggleStateGetDisplayName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Turn Off");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("Turn On");
  else
    return v1;
}

id INToggleStateGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("Off");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("On");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL INPersonalPlaceTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INPersonalPlaceTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 2;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 3;
  else
    return v1;
}

uint64_t INPersonalPlaceTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 3);
  if (a2 == 2)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INPersonalPlaceTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("work");
  if (a1 == 1)
    return CFSTR("home");
  else
    return v1;
}

uint64_t INPersonalPlaceTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("home")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("work")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPersonalPlaceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("work");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("home");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

__CFString *INRunWorkflowIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 9)
    return 0;
  else
    return off_1E2293088[a1];
}

id INIntentSlotValueTransformFromMediaSearchs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMediaSearch(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaSearchs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMediaSearch(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMediaSearchFromMediaSearch(void *a1)
{
  return a1;
}

uint64_t _INPBMediaSearchReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _INPBString *v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_69;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_72;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_69:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_72:
        objc_msgSend(a1, "setMediaType:", v23, v40, v41);
        goto LABEL_66;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
        else
          v30 = v26;
LABEL_77:
        objc_msgSend(a1, "setSortOrder:", v30, v40, v41);
        goto LABEL_66;
      case 3u:
        v31 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v31, a2) & 1) == 0)
          goto LABEL_84;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaName:", v31, 0, 0);
        goto LABEL_65;
      case 4u:
        v31 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v31, a2) & 1) == 0)
          goto LABEL_84;
        PBReaderRecallMark();
        objc_msgSend(a1, "setArtistName:", v31, 0, 0);
        goto LABEL_65;
      case 5u:
        v31 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v31, a2) & 1) == 0)
          goto LABEL_84;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlbumName:", v31, 0, 0);
        goto LABEL_65;
      case 7u:
        v31 = objc_alloc_init(_INPBString);
        v40 = 0;
        v41 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v31, a2))
          goto LABEL_84;
        PBReaderRecallMark();
        if (v31)
          objc_msgSend(a1, "addGenreNames:", v31, 0, 0);
        goto LABEL_65;
      case 0xCu:
        v31 = objc_alloc_init(_INPBString);
        v40 = 0;
        v41 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v31, a2))
          goto LABEL_84;
        PBReaderRecallMark();
        if (v31)
          objc_msgSend(a1, "addMoodNames:", v31, 0, 0);
        goto LABEL_65;
      case 0xEu:
        v31 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v31, a2) & 1) == 0)
          goto LABEL_84;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReleaseDate:", v31, 0, 0);
        goto LABEL_65;
      case 0xFu:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_82:
        objc_msgSend(a1, "setReference:", v39, v40, v41);
        goto LABEL_66;
      case 0x10u:
        v31 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v31, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMediaIdentifier:", v31, 0, 0);
LABEL_65:

LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_84:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

__CFString *INUpdateMediaAffinityIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E22931E0[a1];
}

BOOL _INPBUpdateMediaAffinityIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

void sub_18C1A90F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getWFOnScreenContentExtractorClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!VoiceShortcutClientLibraryCore_frameworkLibrary_103530)
  {
    VoiceShortcutClientLibraryCore_frameworkLibrary_103530 = _sl_dlopen();
    if (!VoiceShortcutClientLibraryCore_frameworkLibrary_103530)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("WFOnScreenContentExtractor");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getWFOnScreenContentExtractorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _INPBUpdateMediaAffinityIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_41;
      case 2u:
        v17 = objc_alloc_init(_INPBMediaItemValue);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMediaItems:", v17, 0, 0);
        goto LABEL_41;
      case 3u:
        v17 = objc_alloc_init(_INPBMediaSearch);
        if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaSearch:", v17, 0, 0);
        goto LABEL_41;
      case 4u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_46;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_46:
        objc_msgSend(a1, "setAffinityType:", v24, v26, v27);
        goto LABEL_47;
      case 6u:
        v17 = objc_alloc_init(_INPBPrivateUpdateMediaAffinityIntentData);
        if (PBReaderPlaceMark() && _INPBPrivateUpdateMediaAffinityIntentDataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivateUpdateMediaAffinityIntentData:", v17, 0, 0);
LABEL_41:

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

BOOL _INPBAddMediaIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2))
          goto LABEL_41;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMediaItems:", v17, 0, 0);
        goto LABEL_37;
      case 3u:
        v17 = objc_alloc_init(_INPBMediaSearch);
        if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaSearch:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(_INPBMediaDestination);
        if (!PBReaderPlaceMark() || (_INPBMediaDestinationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaDestination:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        v17 = objc_alloc_init(_INPBPrivateAddMediaIntentData);
        if (PBReaderPlaceMark() && _INPBPrivateAddMediaIntentDataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivateAddMediaIntentData:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

BOOL INMediaAffinityTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INMediaAffinityTypeGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMediaAffinityTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INMediaAffinityTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("dislike");
  if (a1 == 1)
    return CFSTR("like");
  else
    return v1;
}

uint64_t INMediaAffinityTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("like")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("dislike")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaAffinityTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("Dislike");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("Like");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL INMediaReferenceHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INMediaReferenceGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMediaReferenceGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INMediaReferenceGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("my");
  if (a1 == 1)
    return CFSTR("currentlyPlaying");
  else
    return v1;
}

uint64_t INMediaReferenceWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("currentlyPlaying")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("my")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaReferenceGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("my");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("currently playing");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

const __CFString *INAddMediaIntentResponseCodeGetName(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 0:
      result = CFSTR("INAddMediaIntentResponseCodeUnspecified");
      break;
    case 1:
      result = CFSTR("INAddMediaIntentResponseCodeReady");
      break;
    case 2:
      result = CFSTR("INAddMediaIntentResponseCodeInProgress");
      break;
    case 3:
      result = CFSTR("INAddMediaIntentResponseCodeSuccess");
      break;
    case 4:
      result = CFSTR("INAddMediaIntentResponseCodeHandleInApp");
      break;
    case 5:
      result = CFSTR("INAddMediaIntentResponseCodeFailure");
      break;
    case 6:
      result = CFSTR("INAddMediaIntentResponseCodeFailureRequiringAppLaunch");
      break;
    default:
      if (a1 == 1000)
        result = CFSTR("INAddMediaIntentResponseCodeFailureAlreadyInLibrary");
      else
        result = 0;
      break;
  }
  return result;
}

BOOL _INPBAddMediaIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBSearchForMediaIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBMediaSearch *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if ((_DWORD)v17 == 3)
        {
          v18 = objc_alloc_init(_INPBMediaSearch);
          if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v18, a2) & 1) == 0)
          {
LABEL_40:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setMediaSearch:", v18, 0, 0);
          goto LABEL_36;
        }
        if ((_DWORD)v17 == 100)
        {
          v18 = objc_alloc_init(_INPBPrivateSearchForMediaIntentData);
          if (!PBReaderPlaceMark() || (_INPBPrivateSearchForMediaIntentDataReadFrom(v18, a2) & 1) == 0)
            goto LABEL_40;
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivateSearchForMediaIntentData:", v18, 0, 0);
          goto LABEL_36;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v18 = objc_alloc_init(_INPBIntentMetadata);
          if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
            goto LABEL_40;
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
          goto LABEL_36;
        }
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(_INPBMediaItemValue);
          if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v18, a2))
            goto LABEL_40;
          PBReaderRecallMark();
          if (v18)
            objc_msgSend(a1, "addMediaItems:", v18, 0, 0);
LABEL_36:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INSearchForMediaIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E2293268[a1];
}

uint64_t _INPBSearchForMediaIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBMediaItemValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMediaItems:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INMediaSortOrderHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INMediaSortOrderGetBackingType(unint64_t result)
{
  if (result >= 9)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMediaSortOrderGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 7)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INMediaSortOrderGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E22932A0[a1 - 1];
}

uint64_t INMediaSortOrderWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("newest")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("oldest")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("best")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("worst")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("popular")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("unpopular")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("trending")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("recommended")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaSortOrderGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("newest");
      goto LABEL_11;
    case 2:
      v4 = CFSTR("oldest");
      goto LABEL_11;
    case 3:
      v4 = CFSTR("best");
      goto LABEL_11;
    case 4:
      v4 = CFSTR("worst");
      goto LABEL_11;
    case 5:
      v4 = CFSTR("popular");
      goto LABEL_11;
    case 6:
      v4 = CFSTR("unpopular");
      goto LABEL_11;
    case 7:
      v4 = CFSTR("trending");
      goto LABEL_11;
    case 8:
      v4 = CFSTR("recommended");
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INMediaDestinationTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INMediaDestinationTypeGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMediaDestinationTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INMediaDestinationTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("playlist");
  if (a1 == 1)
    return CFSTR("library");
  else
    return v1;
}

uint64_t INMediaDestinationTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("library")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("playlist")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaDestinationTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("playlist");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("library");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL INPlaybackQueueLocationHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INPlaybackQueueLocationGetBackingType(unint64_t result)
{
  if (result >= 4)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INPlaybackQueueLocationGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INPlaybackQueueLocationGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E22932E0[a1 - 1];
}

uint64_t INPlaybackQueueLocationWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("now")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("next")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("later")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPlaybackQueueLocationGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("later");
      break;
    case 2:
      v4 = CFSTR("next");
      break;
    case 1:
      v4 = CFSTR("now");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

BOOL INEventParticipantStatusHasBackingType(unint64_t a1)
{
  return a1 < 8;
}

uint64_t INEventParticipantStatusGetBackingType(unint64_t a1)
{
  if (a1 < 8)
    return (a1 + 1);
  else
    return 0x7FFFFFFFLL;
}

uint64_t INEventParticipantStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 2);
  if (v2 <= 6)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INEventParticipantStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E22932F8[a1 - 1];
}

uint64_t INEventParticipantStatusWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pending")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("accepted")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("declined")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tentative")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("delegated")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("completed")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("inProcess")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INEventParticipantStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("pending");
      goto LABEL_10;
    case 2:
      v4 = CFSTR("accepted");
      goto LABEL_10;
    case 3:
      v4 = CFSTR("declined");
      goto LABEL_10;
    case 4:
      v4 = CFSTR("tentative");
      goto LABEL_10;
    case 5:
      v4 = CFSTR("delegated");
      goto LABEL_10;
    case 6:
      v4 = CFSTR("completed");
      goto LABEL_10;
    case 7:
      v4 = CFSTR("in process");
LABEL_10:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBMediaDestinationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBString *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaylistName:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setMediaDestinationType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INVoiceCommandStepInfo *INIntentSlotValueTransformFromVoiceCommandStepInfo(void *a1)
{
  id v1;
  INVoiceCommandStepInfo *v2;
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  INVoiceCommandStepInfo *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INVoiceCommandStepInfo alloc];
    objc_msgSend(v1, "applicationIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v1, "hasCategory");
    v5 = objc_msgSend(v1, "category");
    if (v4 && (v5 - 1) <= 0x14)
      v6 = qword_18C3120D0[v5 - 1];
    else
      v6 = 0;
    objc_msgSend(v1, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = -[INVoiceCommandStepInfo initWithApplicationIdentifier:category:name:](v2, "initWithApplicationIdentifier:category:name:", v3, v6, v7);
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBVoiceCommandStepInfo *INIntentSlotValueTransformToVoiceCommandStepInfo(void *a1)
{
  id v1;
  _INPBVoiceCommandStepInfo *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBVoiceCommandStepInfo);
    objc_msgSend(v1, "applicationIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBVoiceCommandStepInfo setApplicationIdentifier:](v2, "setApplicationIdentifier:", v3);

    v4 = objc_msgSend(v1, "category") - 1;
    if (v4 > 0x13)
      v5 = 0x7FFFFFFFLL;
    else
      v5 = dword_18C312080[v4];
    -[_INPBVoiceCommandStepInfo setCategory:](v2, "setCategory:", v5);
    objc_msgSend(v1, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBVoiceCommandStepInfo setName:](v2, "setName:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromVoiceCommandStepInfos(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromVoiceCommandStepInfo(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToVoiceCommandStepInfos(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToVoiceCommandStepInfo(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedVoiceCommandStepInfoFromVoiceCommandStepInfo(void *a1)
{
  return a1;
}

uint64_t _INPBVoiceCommandStepInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setApplicationIdentifier:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setCategory:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INMessageEffectTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0xE) & (0x3FFEu >> a1);
}

uint64_t INMessageEffectTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xD)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INMessageEffectTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 0xC)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INMessageEffectTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xC)
    return CFSTR("unknown");
  else
    return off_1E22933F0[a1 - 1];
}

uint64_t INMessageEffectTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("happyBirthday")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("confetti")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lasers")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fireworks")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shootingStar")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("invisibleInk")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("gentle")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("loud")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("impact")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sparkles")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heart")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("echo")) & 1) != 0)
  {
    v2 = 12;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("spotlight")))
  {
    v2 = 13;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessageEffectTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("happy birthday");
      goto LABEL_16;
    case 2:
      v4 = CFSTR("confetti");
      goto LABEL_16;
    case 3:
      v4 = CFSTR("lasers");
      goto LABEL_16;
    case 4:
      v4 = CFSTR("fireworks");
      goto LABEL_16;
    case 5:
      v4 = CFSTR("shooting star");
      goto LABEL_16;
    case 6:
      v4 = CFSTR("invisible ink");
      goto LABEL_16;
    case 7:
      v4 = CFSTR("gentle");
      goto LABEL_16;
    case 8:
      v4 = CFSTR("loud");
      goto LABEL_16;
    case 9:
      v4 = CFSTR("impact");
      goto LABEL_16;
    case 10:
      v4 = CFSTR("sparkles");
      goto LABEL_16;
    case 11:
      v4 = CFSTR("heart");
      goto LABEL_16;
    case 12:
      v4 = CFSTR("echo");
      goto LABEL_16;
    case 13:
      v4 = CFSTR("spotlight");
LABEL_16:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBHomeEntityResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBHomeEntity *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBHomeEntity);
        if (!PBReaderPlaceMark() || (_INPBHomeEntityReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntity:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBHomeUserTaskResponse);
    if (!PBReaderPlaceMark() || !_INPBHomeUserTaskResponseReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addTaskResponses:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBHomeUserTaskResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBHomeUserTask *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBHomeUserTask);
        if (!PBReaderPlaceMark() || (_INPBHomeUserTaskReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserTask:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setTaskOutcome:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBHomeUserTaskReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBHomeAttributeValue *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = objc_alloc_init(_INPBHomeAttributeValue);
        if (!PBReaderPlaceMark() || (_INPBHomeAttributeValueReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v25, 0, 0);

      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_46;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_49:
        objc_msgSend(a1, "setAttribute:", v32);
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_44:
        objc_msgSend(a1, "setTaskType:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INHomeUserTask *INIntentSlotValueTransformFromHomeUserTask(void *a1)
{
  id v1;
  INHomeUserTask *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  INHomeUserTask *v12;

  if (a1)
  {
    v1 = a1;
    v2 = [INHomeUserTask alloc];
    v3 = objc_msgSend(v1, "hasTaskType");
    v4 = objc_msgSend(v1, "taskType") - 1;
    if (v4 <= 5)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (v3)
      v6 = v5;
    else
      v6 = 0;
    v7 = objc_msgSend(v1, "hasAttribute");
    v8 = objc_msgSend(v1, "attribute");
    if (((v8 < 0x42) & v7) != 0)
      v9 = v8 + 1;
    else
      v9 = 0;
    objc_msgSend(v1, "value");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromHomeAttributeValue(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[INHomeUserTask initWithTaskType:attribute:value:](v2, "initWithTaskType:attribute:value:", v6, v9, v11);

  }
  else
  {
    v12 = 0;
  }
  return v12;
}

_INPBHomeUserTask *INIntentSlotValueTransformToHomeUserTask(void *a1)
{
  id v1;
  _INPBHomeUserTask *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeUserTask);
    v3 = objc_msgSend(v1, "taskType") - 1;
    if (v3 < 6)
      v4 = (v3 + 1);
    else
      v4 = 0x7FFFFFFFLL;
    -[_INPBHomeUserTask setTaskType:](v2, "setTaskType:", v4);
    v5 = objc_msgSend(v1, "attribute") - 1;
    if (v5 >= 0x42)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = v5;
    -[_INPBHomeUserTask setAttribute:](v2, "setAttribute:", v6);
    objc_msgSend(v1, "value");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToHomeAttributeValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeUserTask setValue:](v2, "setValue:", v8);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeUserTasks(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeUserTask(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeUserTasks(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeUserTask(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeUserTaskFromHomeUserTask(void *a1)
{
  return a1;
}

INHomeEntityResponse *INIntentSlotValueTransformFromHomeEntityResponse(void *a1)
{
  id v1;
  INHomeEntityResponse *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INHomeEntityResponse *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INHomeEntityResponse alloc];
    objc_msgSend(v1, "entity");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromHomeEntity(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "taskResponses");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromHomeUserTaskResponses(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INHomeEntityResponse initWithEntity:taskResponses:](v2, "initWithEntity:taskResponses:", v4, v6);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBHomeEntityResponse *INIntentSlotValueTransformToHomeEntityResponse(void *a1)
{
  id v1;
  _INPBHomeEntityResponse *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeEntityResponse);
    objc_msgSend(v1, "entity");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToHomeEntity(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntityResponse setEntity:](v2, "setEntity:", v4);

    objc_msgSend(v1, "taskResponses");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToHomeUserTaskResponses(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntityResponse setTaskResponses:](v2, "setTaskResponses:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeEntityResponses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeEntityResponse(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeEntityResponses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeEntityResponse(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeEntityResponseFromHomeEntityResponse(void *a1)
{
  return a1;
}

INHomeUserTaskResponse *INIntentSlotValueTransformFromHomeUserTaskResponse(void *a1)
{
  id v1;
  INHomeUserTaskResponse *v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  INHomeUserTaskResponse *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INHomeUserTaskResponse alloc];
    objc_msgSend(v1, "userTask");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromHomeUserTask(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasTaskOutcome");
    v6 = objc_msgSend(v1, "taskOutcome");

    v7 = (v6 - 1);
    if (v7 <= 0x16)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v5)
      v9 = v8;
    else
      v9 = 0;
    v10 = -[INHomeUserTaskResponse initWithUserTask:taskOutcome:](v2, "initWithUserTask:taskOutcome:", v4, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBHomeUserTaskResponse *INIntentSlotValueTransformToHomeUserTaskResponse(void *a1)
{
  id v1;
  _INPBHomeUserTaskResponse *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeUserTaskResponse);
    objc_msgSend(v1, "userTask");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToHomeUserTask(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeUserTaskResponse setUserTask:](v2, "setUserTask:", v4);

    v5 = objc_msgSend(v1, "taskOutcome");
    if ((unint64_t)(v5 - 1) < 0x17)
      v6 = v5;
    else
      v6 = 0x7FFFFFFFLL;
    -[_INPBHomeUserTaskResponse setTaskOutcome:](v2, "setTaskOutcome:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeUserTaskResponses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeUserTaskResponse(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeUserTaskResponses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeUserTaskResponse(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeUserTaskResponseFromHomeUserTaskResponse(void *a1)
{
  return a1;
}

uint64_t INHomeTaskOutcomeHasBackingType(unint64_t a1)
{
  return (a1 < 0x18) & (0xFFFFFEu >> a1);
}

uint64_t INHomeTaskOutcomeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0x17)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INHomeTaskOutcomeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 0x16)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INHomeTaskOutcomeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x16)
    return CFSTR("unknown");
  else
    return off_1E2293750[a1 - 1];
}

uint64_t INHomeTaskOutcomeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("success")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("unsupportedAttribute")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("readOnly")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("alreadyAtMaxValue")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("alreadyAtMinValue")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("unreachable")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("failure")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("setToMaxValue")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("setToMinValue")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("largerThanMaxValue")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("smallerThanMinValue")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("noRemoteAccess")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("noMatchingAttribute")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bluetoothIsOff")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("wifiIsOff")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bridgedAccessoryUnreachable")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inProgress")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sceneNotSetUp")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("securingFailure")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bluetoothWakeup")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("unlockRequired")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("securedAccessDenied")) & 1) != 0)
  {
    v2 = 22;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("calibrationInProgress")))
  {
    v2 = 23;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeTaskOutcomeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("success");
      goto LABEL_26;
    case 2:
      v4 = CFSTR("unsupported attribute");
      goto LABEL_26;
    case 3:
      v4 = CFSTR("read only");
      goto LABEL_26;
    case 4:
      v4 = CFSTR("already at max value");
      goto LABEL_26;
    case 5:
      v4 = CFSTR("already at min value");
      goto LABEL_26;
    case 6:
      v4 = CFSTR("unreachable");
      goto LABEL_26;
    case 7:
      v4 = CFSTR("failure");
      goto LABEL_26;
    case 8:
      v4 = CFSTR("set to max value");
      goto LABEL_26;
    case 9:
      v4 = CFSTR("set to min value");
      goto LABEL_26;
    case 10:
      v4 = CFSTR("larger than max value");
      goto LABEL_26;
    case 11:
      v4 = CFSTR("smaller than min value");
      goto LABEL_26;
    case 12:
      v4 = CFSTR("no remote access");
      goto LABEL_26;
    case 13:
      v4 = CFSTR("no matching attribute");
      goto LABEL_26;
    case 14:
      v4 = CFSTR("bluetooth is off");
      goto LABEL_26;
    case 15:
      v4 = CFSTR("wifi is off");
      goto LABEL_26;
    case 16:
      v4 = CFSTR("bridged accessory unreachable");
      goto LABEL_26;
    case 17:
      v4 = CFSTR("in progress");
      goto LABEL_26;
    case 18:
      v4 = CFSTR("scene not set up");
      goto LABEL_26;
    case 19:
      v4 = CFSTR("securing failure");
      goto LABEL_26;
    case 20:
      v4 = CFSTR("bluetooth wakeup");
      goto LABEL_26;
    case 21:
      v4 = CFSTR("unlock required");
      goto LABEL_26;
    case 22:
      v4 = CFSTR("secured access denied");
      goto LABEL_26;
    case 23:
      v4 = CFSTR("calibration in progress");
LABEL_26:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INHomeUserTaskTypeHasBackingType(unint64_t a1)
{
  return (a1 < 7) & (0x7Eu >> a1);
}

uint64_t INHomeUserTaskTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 6)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INHomeUserTaskTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 5)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INHomeUserTaskTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E2293808[a1 - 1];
}

uint64_t INHomeUserTaskTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("set")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("increase")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("decrease")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("get")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("getTarget")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("toggle")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeUserTaskTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("set");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("increase");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("decrease");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("get");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("get target");
      goto LABEL_9;
    case 6:
      v4 = CFSTR("toggle");
LABEL_9:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INHomeAttributeLimitHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INHomeAttributeLimitGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INHomeAttributeLimitGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INHomeAttributeLimitGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("max");
  if (a1 == 1)
    return CFSTR("min");
  else
    return v1;
}

uint64_t INHomeAttributeLimitWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("min")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("max")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeAttributeLimitGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("max");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("min");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t INHomeAttributeUnitHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INHomeAttributeUnitGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INHomeAttributeUnitGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INHomeAttributeUnitGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E2293838[a1 - 1];
}

uint64_t INHomeAttributeUnitWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("percent")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fahrenheit")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("celsius")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lux")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("seconds")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeAttributeUnitGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("percent");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("fahrenheit");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("celsius");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("lux");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("seconds");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBAnswerCallIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_39:
            objc_msgSend(a1, "setAudioRoute:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCallIdentifier:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INIdentifyIncomingCallerIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E22938A0[a1];
}

uint64_t _INPBIdentifyIncomingCallerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBCallRecordValue *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(_INPBCallRecordValue);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBCallRecordValueReadFrom(v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addCallRecords:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_35;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_38;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_38:
        objc_msgSend(a1, "setStatusCode:", v23, v26, v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIdentifyIncomingCallerIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INAnswerCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E22938D8[a1];
}

uint64_t _INPBAnswerCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBConnectedCall *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = objc_alloc_init(_INPBConnectedCall);
        if (!PBReaderPlaceMark() || (_INPBConnectedCallReadFrom(v25, a2) & 1) == 0)
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAnsweredCall:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_39;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_42;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_42:
            objc_msgSend(a1, "setStatusCode:", v24, v27, v28);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBCallRecordValue);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !_INPBCallRecordValueReadFrom(v25, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addCallRecords:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCreateEventIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBCalendarEvent *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBCalendarEvent);
        if (!PBReaderPlaceMark() || (_INPBCalendarEventReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedEvent:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_40:
            objc_msgSend(a1, "setConfirmationReason:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBCalendarEvent *)objc_claimAutoreleasedReturnValue();
        if (v25)
          objc_msgSend(a1, "addConflictingEventIdentifiers:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBStartCallIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_130;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_92;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_99:
        objc_msgSend(a1, "setAudioRoute:", v25, v67, v68);
        goto LABEL_93;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_104:
        objc_msgSend(a1, "setDestinationType:", v32, v67, v68);
        goto LABEL_93;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_109:
        objc_msgSend(a1, "setPreferredCallProvider:", v39, v67, v68);
        goto LABEL_93;
      case 5u:
        v17 = objc_alloc_init(_INPBContact);
        v67 = 0;
        v68 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
          goto LABEL_130;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContacts:", v17, 0, 0);
        goto LABEL_92;
      case 6u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_114;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_114:
        objc_msgSend(a1, "setRecordTypeForRedialing:", v46, v67, v68);
        goto LABEL_93;
      case 7u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_119;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
        else
          v53 = v49;
LABEL_119:
        objc_msgSend(a1, "setTtyType:", v53, v67, v68);
        goto LABEL_93;
      case 8u:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v14 = v55++ >= 9;
              if (v14)
              {
                v60 = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v60 = 0;
        else
          v60 = v56;
LABEL_124:
        objc_msgSend(a1, "setCallCapability:", v60, v67, v68);
        goto LABEL_93;
      case 9u:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        while (2)
        {
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 1;
            v63 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              v14 = v62++ >= 9;
              if (v14)
              {
                v63 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v63 = 0;
LABEL_128:
        objc_msgSend(a1, "setIsGroupCall:", v63 != 0);
        goto LABEL_93;
      case 0xAu:
        v17 = objc_alloc_init(_INPBCallGroup);
        v67 = 0;
        v68 = 0;
        if (!PBReaderPlaceMark() || !_INPBCallGroupReadFrom(v17, a2))
          goto LABEL_130;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addCallGroups:", v17, 0, 0);
        goto LABEL_92;
      case 0xBu:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNotificationThreadIdentifier:", v17);
        goto LABEL_92;
      case 0xCu:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFaceTimeLink:", v17);
        goto LABEL_92;
      case 0xDu:
        v17 = objc_alloc_init(_INPBCallRecordFilter);
        if (!PBReaderPlaceMark() || (_INPBCallRecordFilterReadFrom(v17, a2) & 1) == 0)
          goto LABEL_130;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallRecordFilter:", v17, 0, 0);
        goto LABEL_92;
      case 0xEu:
        v17 = objc_alloc_init(_INPBCallRecordValue);
        if (!PBReaderPlaceMark() || (_INPBCallRecordValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_130;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallRecordToCallBack:", v17, 0, 0);
        goto LABEL_92;
      case 0xFu:
        v17 = objc_alloc_init(_INPBStartCallRequestMetadata);
        if (PBReaderPlaceMark() && (_INPBStartCallRequestMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallRequestMetadata:", v17, 0, 0);
LABEL_92:

LABEL_93:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_130:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_93;
    }
  }
}

__CFString *INHangUpCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E22939E8[a1];
}

uint64_t _INPBHangUpCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setHungUpCallType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C1C60EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(void))(a9 + 16))();
  _Unwind_Resume(a1);
}

void sub_18C1C6280(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

BOOL _INPBHangUpCallIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCallIdentifier:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBUpdateEventIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_40;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTargetEventIdentifier:", v17);
        goto LABEL_40;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSetTitle:", v17);
        goto LABEL_40;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSetDateTimeRange:", v17, 0, 0);
        goto LABEL_40;
      case 5u:
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSetLocation:", v17, 0, 0);
        goto LABEL_40;
      case 6u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
          goto LABEL_66;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAddParticipants:", v17, 0, 0);
        goto LABEL_40;
      case 7u:
        v17 = objc_alloc_init(_INPBContact);
        if (PBReaderPlaceMark() && _INPBContactReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addRemoveParticipants:", v17, 0, 0);
LABEL_40:

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_66:

        return 0;
      case 8u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_60:
        objc_msgSend(a1, "setUpdateAllOccurrences:", v21 != 0);
        goto LABEL_41;
      case 9u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_64:
        objc_msgSend(a1, "setRemoveLocation:", v27 != 0);
        goto LABEL_41;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

INIntentExecutionResult *INIntentSlotValueTransformFromIntentExecutionResult(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  INIntentExecutionResult *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "hasEncodedIntent"))
    {
      objc_msgSend(v2, "encodedIntent");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "dataUsingEncoding:", 4);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentCreate(0, v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v5 = 0;
    }
    if (objc_msgSend(v2, "hasEncodedIntentResponse"))
    {
      objc_msgSend(v2, "encodedIntentResponse");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "dataUsingEncoding:", 4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentResponseCreate(0, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v9 = 0;
    }
    v6 = -[INIntentExecutionResult initWithIntent:response:]([INIntentExecutionResult alloc], "initWithIntent:response:", v5, v9);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

_INPBIntentExecutionResult *INIntentSlotValueTransformToIntentExecutionResult(void *a1)
{
  id v1;
  _INPBIntentExecutionResult *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBIntentExecutionResult);
    objc_msgSend(v1, "intent");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(v1, "intent");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_JSONDictionaryRepresentation");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "if_JSONStringRepresentation");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBIntentExecutionResult setEncodedIntent:](v2, "setEncodedIntent:", v6);

    }
    objc_msgSend(v1, "intentResponse");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v1, "intentResponse");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_JSONDictionaryRepresentation");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "if_JSONStringRepresentation");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBIntentExecutionResult setEncodedIntentResponse:](v2, "setEncodedIntentResponse:", v10);

    }
    -[_INPBIntentExecutionResult setEncodingFormat:](v2, "setEncodingFormat:", 1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromIntentExecutionResults(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromIntentExecutionResult(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToIntentExecutionResults(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToIntentExecutionResult(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

const __CFString *INStartCallIntentResponseCodeGetName(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;

  switch(a1)
  {
    case 0:
      result = CFSTR("INStartCallIntentResponseCodeUnspecified");
      break;
    case 1:
      result = CFSTR("INStartCallIntentResponseCodeReady");
      break;
    case 2:
      result = CFSTR("INStartCallIntentResponseCodeContinueInApp");
      break;
    case 3:
      result = CFSTR("INStartCallIntentResponseCodeUserConfirmationRequired");
      break;
    case 4:
      result = CFSTR("INStartCallIntentResponseCodeFailure");
      break;
    case 5:
      result = CFSTR("INStartCallIntentResponseCodeFailureRequiringAppLaunch");
      break;
    case 6:
      result = CFSTR("INStartCallIntentResponseCodeFailureCallingServiceNotAvailable");
      break;
    case 7:
      result = CFSTR("INStartCallIntentResponseCodeFailureContactNotSupportedByApp");
      break;
    case 8:
      result = CFSTR("INStartCallIntentResponseCodeFailureAirplaneModeEnabled");
      break;
    case 9:
      result = CFSTR("INStartCallIntentResponseCodeFailureUnableToHandOff");
      break;
    case 10:
      result = CFSTR("INStartCallIntentResponseCodeFailureAppConfigurationRequired");
      break;
    case 11:
      result = CFSTR("INStartCallIntentResponseCodeFailureCallInProgress");
      break;
    case 12:
      result = CFSTR("INStartCallIntentResponseCodeFailureCallRinging");
      break;
    case 13:
      result = CFSTR("INStartCallIntentResponseCodeFailureRequiringInAppAuthentication");
      break;
    default:
      v2 = CFSTR("INStartCallIntentResponseCodeFailureDownTimeRestrictionEnabled");
      if (a1 != 1001)
        v2 = 0;
      if (a1 == 1000)
        result = CFSTR("INStartCallIntentResponseCodeFailureScreenTimeRestrictionEnabled");
      else
        result = v2;
      break;
  }
  return result;
}

uint64_t _INPBStartCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _INPBConnectedCall *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_44;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_46:
        objc_msgSend(a1, "setShouldDoEmergencyCountdown:", v19 != 0);
        goto LABEL_52;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
        else
          v30 = v26;
LABEL_51:
        objc_msgSend(a1, "setConfirmationReason:", v30, v32, v33);
        goto LABEL_52;
      case 3u:
        v31 = objc_alloc_init(_INPBConnectedCall);
        if (!PBReaderPlaceMark() || (_INPBConnectedCallReadFrom(v31, a2) & 1) == 0)
          goto LABEL_54;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedCall:", v31, 0, 0);
        goto LABEL_42;
      case 4u:
        v31 = objc_alloc_init(_INPBContactValue);
        v32 = 0;
        v33 = 0;
        if (PBReaderPlaceMark() && _INPBContactValueReadFrom(v31, a2))
        {
          PBReaderRecallMark();
          if (v31)
            objc_msgSend(a1, "addRestrictedContacts:", v31, 0, 0);
LABEL_42:

LABEL_52:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_54:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
    }
  }
}

id INIntentSlotValueTransformFromSendMessageAttachment(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_27;
  objc_msgSend(v1, "speechDataURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    objc_msgSend(v2, "sharedLink");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v2, "sharedLink");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromURLValue(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[INSendMessageAttachment attachmentWithSharedLink:](INSendMessageAttachment, "attachmentWithSharedLink:", v5);
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
    if (objc_msgSend(v2, "currentLocation"))
    {
      +[INSendMessageAttachment attachmentWithCurrentLocation](INSendMessageAttachment, "attachmentWithCurrentLocation");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_28;
    }
    objc_msgSend(v2, "audioMessageFileURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v2, "audioMessageFileURL");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromURLValue(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "typeIdentifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      +[INFile fileWithFileURL:filename:typeIdentifier:](INFile, "fileWithFileURL:filename:typeIdentifier:", v11, 0, v12);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    objc_msgSend(v2, "audioMessageFile");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend(v2, "audioMessageFile");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "data");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "audioMessageFile");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "fileName");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "typeIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[INFile fileWithData:filename:typeIdentifier:](INFile, "fileWithData:filename:typeIdentifier:", v11, v14, v15);
      v4 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_14:
      if (v4)
      {
        +[INSendMessageAttachment attachmentWithAudioMessageFile:](INSendMessageAttachment, "attachmentWithAudioMessageFile:", v4);
        v16 = objc_claimAutoreleasedReturnValue();
LABEL_16:
        v8 = (void *)v16;
        goto LABEL_7;
      }
      goto LABEL_20;
    }
    objc_msgSend(v2, "phAssetId");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend(v2, "phAssetId");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        +[INSendMessageAttachment attachmentWithPHAssetId:](INSendMessageAttachment, "attachmentWithPHAssetId:", v4);
        v16 = objc_claimAutoreleasedReturnValue();
        goto LABEL_16;
      }
LABEL_20:
      v8 = 0;
      goto LABEL_7;
    }
    objc_msgSend(v2, "fileURL");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend(v2, "fileURL");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromURLValue(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "typeIdentifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[INFile fileWithFileURL:filename:typeIdentifier:](INFile, "fileWithFileURL:filename:typeIdentifier:", v20, 0, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v2, "file");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v8)
        goto LABEL_28;
      objc_msgSend(v2, "file");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "data");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "file");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "fileName");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "typeIdentifier");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      +[INFile fileWithData:filename:typeIdentifier:](INFile, "fileWithData:filename:typeIdentifier:", v20, v23, v24);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v22)
    {
      +[INSendMessageAttachment attachmentWithFile:](INSendMessageAttachment, "attachmentWithFile:", v22);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_28;
    }
LABEL_27:
    v8 = 0;
    goto LABEL_28;
  }
  objc_msgSend(v2, "speechDataURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformFromURLValue(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[INSendMessageAttachment attachmentWithSpeechDataURL:](INSendMessageAttachment, "attachmentWithSpeechDataURL:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
LABEL_6:
  v8 = (void *)v6;

LABEL_7:
LABEL_28:

  return v8;
}

_INPBSendMessageAttachment *INIntentSlotValueTransformToSendMessageAttachment(void *a1)
{
  id v1;
  _INPBSendMessageAttachment *v2;
  void *v3;
  void *v4;
  _INPBFileDataAttachment *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBSendMessageAttachment);
    objc_msgSend(v1, "speechDataURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(v1, "speechDataURL");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToURLValue(v4);
      v5 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
      -[_INPBSendMessageAttachment setSpeechDataURL:](v2, "setSpeechDataURL:", v5);
LABEL_7:

LABEL_8:
      goto LABEL_9;
    }
    objc_msgSend(v1, "sharedLink");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v1, "sharedLink");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToURLValue(v4);
      v5 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
      -[_INPBSendMessageAttachment setSharedLink:](v2, "setSharedLink:", v5);
      goto LABEL_7;
    }
    if (objc_msgSend(v1, "currentLocation"))
    {
      -[_INPBSendMessageAttachment setCurrentLocation:](v2, "setCurrentLocation:", 1);
      goto LABEL_9;
    }
    objc_msgSend(v1, "audioMessageFile");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v1, "audioMessageFile");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v4, "_isFileURLBased"))
      {
        objc_msgSend(v4, "fileURL");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformToURLValue(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBSendMessageAttachment setAudioMessageFileURL:](v2, "setAudioMessageFileURL:", v10);
LABEL_15:

        objc_msgSend(v4, "typeIdentifier");
        v5 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
        -[_INPBSendMessageAttachment setTypeIdentifier:](v2, "setTypeIdentifier:", v5);
        goto LABEL_7;
      }
      v5 = objc_alloc_init(_INPBFileDataAttachment);
      objc_msgSend(v4, "data");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBFileDataAttachment setData:](v5, "setData:", v12);

      objc_msgSend(v4, "filename");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBFileDataAttachment setFileName:](v5, "setFileName:", v13);

      -[_INPBSendMessageAttachment setAudioMessageFile:](v2, "setAudioMessageFile:", v5);
    }
    else
    {
      objc_msgSend(v1, "phAssetId");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        objc_msgSend(v1, "phAssetId");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBSendMessageAttachment setPhAssetId:](v2, "setPhAssetId:", v4);
        goto LABEL_8;
      }
      objc_msgSend(v1, "file");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v4, "_isFileURLBased"))
      {
        objc_msgSend(v4, "fileURL");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformToURLValue(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBSendMessageAttachment setFileURL:](v2, "setFileURL:", v10);
        goto LABEL_15;
      }
      v5 = objc_alloc_init(_INPBFileDataAttachment);
      objc_msgSend(v4, "data");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBFileDataAttachment setData:](v5, "setData:", v15);

      objc_msgSend(v4, "filename");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBFileDataAttachment setFileName:](v5, "setFileName:", v16);

      -[_INPBSendMessageAttachment setFile:](v2, "setFile:", v5);
    }
    objc_msgSend(v4, "typeIdentifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSendMessageAttachment setTypeIdentifier:](v2, "setTypeIdentifier:", v14);

    goto LABEL_7;
  }
  v2 = 0;
LABEL_9:

  return v2;
}

id INIntentSlotValueTransformFromSendMessageAttachments(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSendMessageAttachment(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSendMessageAttachments(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSendMessageAttachment(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

INSeat *INIntentSlotValueTransformFromSeat(void *a1)
{
  id v1;
  INSeat *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INSeat *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INSeat alloc];
    objc_msgSend(v1, "seatSection");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "seatRow");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "seatNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "seatingType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = -[INSeat initWithSeatSection:seatRow:seatNumber:seatingType:](v2, "initWithSeatSection:seatRow:seatNumber:seatingType:", v3, v4, v5, v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBSeat *INIntentSlotValueTransformToSeat(void *a1)
{
  id v1;
  _INPBSeat *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSeat);
    objc_msgSend(v1, "seatSection");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSeat setSeatSection:](v2, "setSeatSection:", v3);

    objc_msgSend(v1, "seatRow");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSeat setSeatRow:](v2, "setSeatRow:", v4);

    objc_msgSend(v1, "seatNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSeat setSeatNumber:](v2, "setSeatNumber:", v5);

    objc_msgSend(v1, "seatingType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBSeat setSeatingType:](v2, "setSeatingType:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromSeats(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSeat(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSeats(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSeat(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSeatFromSeat(void *a1)
{
  return a1;
}

BOOL _INPBSeatReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSeatSection:", v17);
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSeatRow:", v17);
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSeatNumber:", v17);
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSeatingType:", v17);
LABEL_25:

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INAirport *INIntentSlotValueTransformFromAirport(void *a1)
{
  id v1;
  INAirport *v2;
  void *v3;
  void *v4;
  void *v5;
  INAirport *v6;

  if (a1)
  {
    v1 = a1;
    v2 = [INAirport alloc];
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "iataCode");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "icaoCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = -[INAirport initWithName:iataCode:icaoCode:](v2, "initWithName:iataCode:icaoCode:", v3, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

_INPBAirport *INIntentSlotValueTransformToAirport(void *a1)
{
  id v1;
  _INPBAirport *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAirport);
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAirport setName:](v2, "setName:", v3);

    objc_msgSend(v1, "iataCode");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAirport setIataCode:](v2, "setIataCode:", v4);

    objc_msgSend(v1, "icaoCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBAirport setIcaoCode:](v2, "setIcaoCode:", v5);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAirports(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAirport(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAirports(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAirport(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAirportFromAirport(void *a1)
{
  return a1;
}

BOOL _INPBAirportReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIcaoCode:", v18);
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIataCode:", v18);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setName:", v18);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INReservationStatusHasBackingType(unint64_t a1)
{
  return a1 < 5;
}

uint64_t INReservationStatusGetBackingType(unint64_t a1)
{
  if (a1 < 5)
    return (a1 + 1);
  else
    return 0x7FFFFFFFLL;
}

uint64_t INReservationStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 2);
  if (v2 <= 3)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INReservationStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return *(&off_1E2293B08 + a1 - 1);
}

uint64_t INReservationStatusWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("canceled")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pending")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hold")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("confirmed")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INReservationStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("canceled");
      goto LABEL_7;
    case 2:
      v4 = CFSTR("pending");
      goto LABEL_7;
    case 3:
      v4 = CFSTR("hold");
      goto LABEL_7;
    case 4:
      v4 = CFSTR("confirmed");
LABEL_7:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBFlightReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBReservation *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = objc_alloc_init(_INPBFlight);
        if (!PBReaderPlaceMark() || !_INPBFlightReadFrom(v18, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlight:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INFlight *INIntentSlotValueTransformFromFlight(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  INFlight *v11;
  void *v13;
  INFlight *v14;
  void *v15;

  if (a1)
  {
    v1 = a1;
    v14 = [INFlight alloc];
    objc_msgSend(v1, "airline");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromAirline(v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "flightNumber");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "boardingTime");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "flightDuration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departureAirportGate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromAirportGate(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "arrivalAirportGate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromAirportGate(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[INFlight initWithAirline:flightNumber:boardingTime:flightDuration:departureAirportGate:arrivalAirportGate:](v14, "initWithAirline:flightNumber:boardingTime:flightDuration:departureAirportGate:arrivalAirportGate:", v13, v2, v4, v6, v8, v10);

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBFlight *INIntentSlotValueTransformToFlight(void *a1)
{
  id v1;
  _INPBFlight *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBFlight);
    objc_msgSend(v1, "airline");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToAirline(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlight setAirline:](v2, "setAirline:", v4);

    objc_msgSend(v1, "flightNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlight setFlightNumber:](v2, "setFlightNumber:", v5);

    objc_msgSend(v1, "boardingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlight setBoardingTime:](v2, "setBoardingTime:", v7);

    objc_msgSend(v1, "flightDuration");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlight setFlightDuration:](v2, "setFlightDuration:", v9);

    objc_msgSend(v1, "departureAirportGate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToAirportGate(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlight setDepartureAirportGate:](v2, "setDepartureAirportGate:", v11);

    objc_msgSend(v1, "arrivalAirportGate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToAirportGate(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlight setArrivalAirportGate:](v2, "setArrivalAirportGate:", v13);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromFlights(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromFlight(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFlights(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToFlight(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedFlightFromFlight(void *a1)
{
  return a1;
}

BOOL _INPBFlightReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAirline *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBAirline);
        if (!PBReaderPlaceMark() || !_INPBAirlineReadFrom(v17, a2))
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAirline:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBAirline *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFlightNumber:", v17);
        goto LABEL_37;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBoardingTime:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlightDuration:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        v17 = objc_alloc_init(_INPBAirportGate);
        if (!PBReaderPlaceMark() || !_INPBAirportGateReadFrom(v17, a2))
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureAirportGate:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        v17 = objc_alloc_init(_INPBAirportGate);
        if (PBReaderPlaceMark() && _INPBAirportGateReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalAirportGate:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

INAirline *INIntentSlotValueTransformFromAirline(void *a1)
{
  id v1;
  INAirline *v2;
  void *v3;
  void *v4;
  void *v5;
  INAirline *v6;

  if (a1)
  {
    v1 = a1;
    v2 = [INAirline alloc];
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "iataCode");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "icaoCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = -[INAirline initWithName:iataCode:icaoCode:](v2, "initWithName:iataCode:icaoCode:", v3, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

_INPBAirline *INIntentSlotValueTransformToAirline(void *a1)
{
  id v1;
  _INPBAirline *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAirline);
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAirline setName:](v2, "setName:", v3);

    objc_msgSend(v1, "iataCode");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAirline setIataCode:](v2, "setIataCode:", v4);

    objc_msgSend(v1, "icaoCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBAirline setIcaoCode:](v2, "setIcaoCode:", v5);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAirlines(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAirline(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAirlines(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAirline(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAirlineFromAirline(void *a1)
{
  return a1;
}

BOOL _INPBAirlineReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIcaoCode:", v18);
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIataCode:", v18);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setName:", v18);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDataString *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setItemReference:", v17, 0, 0);
        goto LABEL_43;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setReservationNumber:", v17);
        goto LABEL_43;
      case 3u:
        v17 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v17, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBookingTime:", v17, 0, 0);
        goto LABEL_43;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_50:
        objc_msgSend(a1, "setReservationStatus:", v25, v26, v27);
        goto LABEL_44;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setReservationHolderName:", v17);
        goto LABEL_43;
      case 6u:
        v17 = objc_alloc_init(_INPBReservationAction);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBReservationActionReadFrom(v17, a2))
          goto LABEL_52;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addActions:", v17, 0, 0);
        goto LABEL_43;
      case 7u:
        v17 = objc_alloc_init(_INPBURLValue);
        if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUrl:", v17, 0, 0);
LABEL_43:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

_INPBMediaItemValue *INIntentSlotValueRedactedMediaItemValueFromMediaItemValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _INPBMediaItemValue *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "valueMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_alloc_init(_INPBMediaItemValue);
    objc_msgSend(v5, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setIdentifier:](v9, "setIdentifier:", v10);

    objc_msgSend(v5, "title");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setTitle:](v9, "setTitle:", v11);

    -[_INPBMediaItemValue setType:](v9, "setType:", objc_msgSend(v5, "type"));
    objc_msgSend(v5, "artwork");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedImageValueFromImageValue(v12, a2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setArtwork:](v9, "setArtwork:", v13);

    objc_msgSend(v5, "artist");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setArtist:](v9, "setArtist:", v14);

    objc_msgSend(v5, "topics");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setTopics:](v9, "setTopics:", v15);

    objc_msgSend(v5, "namedEntities");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setNamedEntities:](v9, "setNamedEntities:", v16);

    objc_msgSend(v5, "privateMediaItemValueData");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setPrivateMediaItemValueData:](v9, "setPrivateMediaItemValueData:", v17);

  }
  return v9;
}

uint64_t INHomeSceneTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INHomeSceneTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INHomeSceneTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INHomeSceneTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return *(&off_1E2293B50 + a1 - 1);
}

uint64_t INHomeSceneTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("userDefined")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("goodMorning")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("imLeaving")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("imHome")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("goodNight")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeSceneTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("user defined");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("good morning");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("im leaving");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("im home");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("good night");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INShowHomeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E2293B78 + a1);
}

BOOL _INPBShowHomeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBShowHomeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBHomeFilter);
        if (!PBReaderPlaceMark() || !_INPBHomeFilterReadFrom(v18, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addFilters:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBDateTimeRange);
    if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
      goto LABEL_36;
    PBReaderRecallMark();
    objc_msgSend(a1, "setTime:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBScoredValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setValue:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setScore:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBContactEventTriggerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContact *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTriggerContact:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INTaskReferenceHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INTaskReferenceGetBackingType(uint64_t a1)
{
  if (a1 == 1)
    return 0;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INTaskReferenceGetFacadeType(uint64_t result, int a2)
{
  if (a2)
    return 0;
  else
    return result;
}

const __CFString *INTaskReferenceGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("currentActivity");
  else
    return CFSTR("unknown");
}

uint64_t INTaskReferenceWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("currentActivity"));
}

id INTaskReferenceGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("current activity"), CFSTR("current activity"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_18C1D8FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWFOnScreenContentServiceOptionsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!VoiceShortcutClientLibraryCore_frameworkLibrary_113148)
  {
    VoiceShortcutClientLibraryCore_frameworkLibrary_113148 = _sl_dlopen();
    if (!VoiceShortcutClientLibraryCore_frameworkLibrary_113148)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("WFOnScreenContentServiceOptions");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getWFOnScreenContentServiceOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL INMobileSpaceHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INMobileSpaceGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t INMobileSpaceGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1)
    return result;
  else
    return 0;
}

const __CFString *INMobileSpaceGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("car");
  else
    return CFSTR("unknown");
}

uint64_t INMobileSpaceWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("car"));
}

id INMobileSpaceGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("car"), CFSTR("car"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_18C1D9888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCHSWidgetDescriptorProviderClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!ChronoServicesLibraryCore_frameworkLibrary_113219)
  {
    ChronoServicesLibraryCore_frameworkLibrary_113219 = _sl_dlopen();
    if (!ChronoServicesLibraryCore_frameworkLibrary_113219)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CHSWidgetDescriptorProvider");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCHSWidgetDescriptorProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

INContactEventTrigger *INIntentSlotValueTransformFromContactEventTrigger(void *a1)
{
  id v1;
  INContactEventTrigger *v2;
  void *v3;
  void *v4;
  INContactEventTrigger *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INContactEventTrigger alloc];
    objc_msgSend(v1, "triggerContact");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[INContactEventTrigger initWithTriggerContact:](v2, "initWithTriggerContact:", v4);

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBContactEventTrigger *INIntentSlotValueTransformToContactEventTrigger(void *a1)
{
  id v1;
  _INPBContactEventTrigger *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBContactEventTrigger);
    objc_msgSend(v1, "triggerContact");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactEventTrigger setTriggerContact:](v2, "setTriggerContact:", v4);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromContactEventTriggers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromContactEventTrigger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToContactEventTriggers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToContactEventTrigger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedContactEventTriggerFromContactEventTrigger(void *a1)
{
  return a1;
}

BOOL INIncomingCallStatusCodeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INIncomingCallStatusCodeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INIncomingCallStatusCodeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INIncomingCallStatusCodeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("incomingCall");
  if (a1 == 1)
    return CFSTR("noIncomingCall");
  else
    return v1;
}

uint64_t INIncomingCallStatusCodeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("noIncomingCall")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("incomingCall")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIncomingCallStatusCodeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("incoming call");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("no incoming call");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBTrainTripReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDateTime *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProvider:", v17);
        goto LABEL_38;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTrainName:", v17);
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTrainNumber:", v17);
        goto LABEL_38;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOnlineCheckInTime:", v17, 0, 0);
        goto LABEL_38;
      case 5u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTripDuration:", v17, 0, 0);
        goto LABEL_38;
      case 6u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureStationLocation:", v17, 0, 0);
        goto LABEL_38;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDeparturePlatform:", v17);
        goto LABEL_38;
      case 8u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalStationLocation:", v17, 0, 0);
LABEL_38:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      case 9u:
        PBReaderReadString();
        v17 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setArrivalPlatform:", v17);
        goto LABEL_38;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

BOOL _INPBRentalCarReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBReservation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(_INPBRentalCar);
        if (!PBReaderPlaceMark() || !_INPBRentalCarReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRentalCar:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRentalDuration:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupLocation:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDropOffLocation:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

BOOL _INPBTicketedEventReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBReservation *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = objc_alloc_init(_INPBTicketedEvent);
        if (!PBReaderPlaceMark() || (_INPBTicketedEventReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEvent:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBTrainReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBTrainTrip *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBTrainTrip);
        if (!PBReaderPlaceMark() || !_INPBTrainTripReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrainTrip:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBLodgingReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBReservation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLodgingBusinessLocation:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservationDuration:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumberOfAdults:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(_INPBInteger);
        if (PBReaderPlaceMark() && (_INPBIntegerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNumberOfChildren:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

uint64_t _INPBTicketedEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  _INPBDateTimeRange *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_40:
        objc_msgSend(a1, "setCategory:", v23);
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v25 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v25);
        goto LABEL_35;
      case 3u:
        v25 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v25, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventDuration:", v25, 0, 0);
        goto LABEL_35;
      case 4u:
        v25 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLocation:", v25, 0, 0);
LABEL_35:

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

BOOL _INPBRentalCarReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setRentalCompanyName:", v17);
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setType:", v17);
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setMake:", v17);
          goto LABEL_24;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setModel:", v17);
          goto LABEL_24;
        case 5u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setRentalCarDescription:", v17);
LABEL_24:

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromEnergy(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromEnergyValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromEnergyValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v1, "valueMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  INPrivacyEntitlementValidateValueMetadata(v3);

  if (!objc_msgSend(v2, "hasUnit"))
    goto LABEL_11;
  switch(objc_msgSend(v2, "unit"))
  {
    case 1u:
      objc_msgSend(MEMORY[0x1E0CB3AB0], "kilojoules");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 2u:
      objc_msgSend(MEMORY[0x1E0CB3AB0], "joules");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 3u:
      objc_msgSend(MEMORY[0x1E0CB3AB0], "kilocalories");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 4u:
      objc_msgSend(MEMORY[0x1E0CB3AB0], "calories");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 5u:
      objc_msgSend(MEMORY[0x1E0CB3AB0], "kilowattHours");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      goto LABEL_11;
  }
  v5 = (void *)v4;
  if (!v4)
  {
LABEL_11:
    v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "INIntentSlotValueTransformFromEnergyValue";
      _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s _INPBEnergyValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v10, 0xCu);
    }
    goto LABEL_13;
  }
  v6 = objc_alloc(MEMORY[0x1E0CB3758]);
  objc_msgSend(v2, "magnitude");
  v7 = (void *)objc_msgSend(v6, "initWithDoubleValue:unit:", v5);

LABEL_14:
  return v7;
}

_INPBEnergy *INIntentSlotValueTransformToEnergy(void *a1)
{
  void *v1;
  _INPBEnergy *v2;

  INIntentSlotValueTransformToEnergyValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBEnergy);
    -[_INPBEnergy addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBEnergyValue *INIntentSlotValueTransformToEnergyValue(void *a1)
{
  id v1;
  _INPBEnergyValue *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  int v16;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBEnergyValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    v5 = v4;

    -[_INPBEnergyValue setMagnitude:](v2, "setMagnitude:", v5);
    objc_msgSend(MEMORY[0x1E0CB3AB0], "calories");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v3, "isEqual:", v6);

    if ((v7 & 1) != 0)
    {
      v8 = 4;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3AB0], "joules");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v3, "isEqual:", v9);

      if ((v10 & 1) != 0)
      {
        v8 = 2;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3AB0], "kilocalories");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v3, "isEqual:", v11);

        if ((v12 & 1) != 0)
        {
          v8 = 3;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3AB0], "kilojoules");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v3, "isEqual:", v13);

          if ((v14 & 1) != 0)
          {
            v8 = 1;
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3AB0], "kilowattHours");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v3, "isEqual:", v15);

            if (!v16)
            {
LABEL_14:

              return v2;
            }
            v8 = 5;
          }
        }
      }
    }
    -[_INPBEnergyValue setUnit:](v2, "setUnit:", v8);
    goto LABEL_14;
  }
  v2 = 0;
  return v2;
}

id INIntentSlotValueTransformFromEnergyValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromEnergyValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromEnergies(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromEnergy(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToEnergyValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToEnergyValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToEnergies(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToEnergy(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromEnergyValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

_INPBEnergy *INIntentSlotValueRedactedEnergyFromEnergy(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBEnergy *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBEnergy);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromEnergyValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBEnergy addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedEnergiesFromEnergies(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedEnergyFromEnergy(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

INCalendarEvent *INIntentSlotValueTransformFromCalendarEvent(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  INCalendarEvent *v11;
  INCalendarEvent *v13;
  void *v14;

  if (a1)
  {
    v1 = a1;
    v13 = [INCalendarEvent alloc];
    objc_msgSend(v1, "eventIdentifier");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "title");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dateTimeRange");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRangeValue(v14);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "participants");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromEventParticipants(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "location");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocation(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "isContactBirthday"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "calendarPunchoutURI");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = -[INCalendarEvent initWithEventIdentifier:title:dateTimeRange:participants:location:isContactBirthday:calendarPunchoutURI:](v13, "initWithEventIdentifier:title:dateTimeRange:participants:location:isContactBirthday:calendarPunchoutURI:", v2, v3, v4, v6, v8, v9, v10);
  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBCalendarEvent *INIntentSlotValueTransformToCalendarEvent(void *a1)
{
  id v1;
  _INPBCalendarEvent *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCalendarEvent);
    objc_msgSend(v1, "eventIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCalendarEvent setEventIdentifier:](v2, "setEventIdentifier:", v3);

    objc_msgSend(v1, "title");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCalendarEvent setTitle:](v2, "setTitle:", v4);

    objc_msgSend(v1, "dateTimeRange");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRangeValue(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCalendarEvent setDateTimeRange:](v2, "setDateTimeRange:", v6);

    objc_msgSend(v1, "participants");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToEventParticipants(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCalendarEvent setParticipants:](v2, "setParticipants:", v8);

    objc_msgSend(v1, "location");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocation(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCalendarEvent setLocation:](v2, "setLocation:", v10);

    objc_msgSend(v1, "isContactBirthday");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCalendarEvent setIsContactBirthday:](v2, "setIsContactBirthday:", objc_msgSend(v11, "BOOLValue"));

    objc_msgSend(v1, "calendarPunchoutURI");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBCalendarEvent setCalendarPunchoutURI:](v2, "setCalendarPunchoutURI:", v12);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCalendarEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCalendarEvent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCalendarEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCalendarEvent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCalendarEventFromCalendarEvent(void *a1)
{
  return a1;
}

id INIntentSlotValueTransformFromMediaItemGroup(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "valuesCount"));
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    objc_msgSend(v1, "values", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMediaItemValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v8);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBMediaItemGroup *INIntentSlotValueTransformToMediaItemGroup(void *a1)
{
  id v1;
  _INPBMediaItemGroup *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMediaItemGroup);
    INIntentSlotValueTransformToMediaItemValues(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBMediaItemGroup setValues:](v2, "setValues:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformToMediaItemGroups(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMediaItemGroup(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBMediaItemGroup *INIntentSlotValueRedactedMediaItemGroupFromMediaItemGroup(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBMediaItemGroup *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (a2)
  {
    v7 = 0;
  }
  else
  {
    v7 = objc_alloc_init(_INPBMediaItemGroup);
    objc_msgSend(v5, "values");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedMediaItemValueFromMediaItemValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), 0, v6);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          -[_INPBMediaItemGroup addValues:](v7, "addValues:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  return v7;
}

BOOL _INPBRestaurantReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBReservation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservationDuration:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPartySize:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(_INPBLocation);
        if (PBReaderPlaceMark() && (_INPBLocationReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRestaurantLocation:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

INTrainTrip *INIntentSlotValueTransformFromTrainTrip(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INTrainTrip *v10;
  void *v12;
  void *v13;
  INTrainTrip *v14;
  void *v15;

  if (a1)
  {
    v1 = a1;
    v14 = [INTrainTrip alloc];
    objc_msgSend(v1, "provider");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "trainName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "trainNumber");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "tripDuration");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v15);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departureStationLocation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departurePlatform");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "arrivalStationLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "arrivalPlatform");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = -[INTrainTrip initWithProvider:trainName:trainNumber:tripDuration:departureStationLocation:departurePlatform:arrivalStationLocation:arrivalPlatform:](v14, "initWithProvider:trainName:trainNumber:tripDuration:departureStationLocation:departurePlatform:arrivalStationLocation:arrivalPlatform:", v13, v12, v2, v3, v5, v6, v8, v9);
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBTrainTrip *INIntentSlotValueTransformToTrainTrip(void *a1)
{
  id v1;
  _INPBTrainTrip *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTrainTrip);
    objc_msgSend(v1, "provider");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setProvider:](v2, "setProvider:", v3);

    objc_msgSend(v1, "trainName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setTrainName:](v2, "setTrainName:", v4);

    objc_msgSend(v1, "trainNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setTrainNumber:](v2, "setTrainNumber:", v5);

    objc_msgSend(v1, "tripDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setTripDuration:](v2, "setTripDuration:", v7);

    objc_msgSend(v1, "departureStationLocation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setDepartureStationLocation:](v2, "setDepartureStationLocation:", v9);

    objc_msgSend(v1, "departurePlatform");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setDeparturePlatform:](v2, "setDeparturePlatform:", v10);

    objc_msgSend(v1, "arrivalStationLocation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTrainTrip setArrivalStationLocation:](v2, "setArrivalStationLocation:", v12);

    objc_msgSend(v1, "arrivalPlatform");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBTrainTrip setArrivalPlatform:](v2, "setArrivalPlatform:", v13);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTrainTrips(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTrainTrip(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTrainTrips(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTrainTrip(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTrainTripFromTrainTrip(void *a1)
{
  return a1;
}

INTicketedEvent *INIntentSlotValueTransformFromTicketedEvent(void *a1)
{
  id v1;
  INTicketedEvent *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INTicketedEvent *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INTicketedEvent alloc];
    v3 = objc_msgSend(v1, "hasCategory");
    if (objc_msgSend(v1, "category") == 2)
      v4 = v3;
    else
      v4 = 0;
    objc_msgSend(v1, "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "eventDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "location");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromLocationValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INTicketedEvent initWithCategory:name:eventDuration:location:](v2, "initWithCategory:name:eventDuration:location:", v4, v5, v7, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBTicketedEvent *INIntentSlotValueTransformToTicketedEvent(void *a1)
{
  id v1;
  _INPBTicketedEvent *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTicketedEvent);
    v3 = objc_msgSend(v1, "category");
    if (v3 == 1)
      v4 = 2;
    else
      v4 = 0x7FFFFFFF;
    if (v3)
      v5 = v4;
    else
      v5 = 1;
    -[_INPBTicketedEvent setCategory:](v2, "setCategory:", v5);
    objc_msgSend(v1, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTicketedEvent setName:](v2, "setName:", v6);

    objc_msgSend(v1, "eventDuration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTicketedEvent setEventDuration:](v2, "setEventDuration:", v8);

    objc_msgSend(v1, "location");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToLocationValue(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTicketedEvent setLocation:](v2, "setLocation:", v10);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTicketedEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTicketedEvent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTicketedEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTicketedEvent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTicketedEventFromTicketedEvent(void *a1)
{
  return a1;
}

INRentalCar *INIntentSlotValueTransformFromRentalCar(void *a1)
{
  id v1;
  INRentalCar *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  INRentalCar *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INRentalCar alloc];
    objc_msgSend(v1, "rentalCompanyName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "type");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "make");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "model");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "rentalCarDescription");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = -[INRentalCar initWithRentalCompanyName:type:make:model:rentalCarDescription:](v2, "initWithRentalCompanyName:type:make:model:rentalCarDescription:", v3, v4, v5, v6, v7);
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBRentalCar *INIntentSlotValueTransformToRentalCar(void *a1)
{
  id v1;
  _INPBRentalCar *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBRentalCar);
    objc_msgSend(v1, "rentalCompanyName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCar setRentalCompanyName:](v2, "setRentalCompanyName:", v3);

    objc_msgSend(v1, "type");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCar setType:](v2, "setType:", v4);

    objc_msgSend(v1, "make");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCar setMake:](v2, "setMake:", v5);

    objc_msgSend(v1, "model");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCar setModel:](v2, "setModel:", v6);

    objc_msgSend(v1, "rentalCarDescription");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBRentalCar setRentalCarDescription:](v2, "setRentalCarDescription:", v7);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromRentalCars(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromRentalCar(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToRentalCars(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToRentalCar(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedRentalCarFromRentalCar(void *a1)
{
  return a1;
}

void INTemporalEventTriggerTypeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_7;
  v4 = v3;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_5;
LABEL_9:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
    v3 = v4;
    if ((a1 & 4) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
  v3 = v4;
  if ((a1 & 2) != 0)
    goto LABEL_9;
LABEL_5:
  if ((a1 & 4) != 0)
  {
LABEL_6:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
    v3 = v4;
  }
LABEL_7:

}

uint64_t INTemporalEventTriggerTypeOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = (a1 >> 2) & 1;
  v3 = (a1 >> 1) & 1;
  v4 = a1 & 1;
  if (a2 != 1)
    v4 = 0;
  if (a2 != 2)
    LODWORD(v3) = v4;
  if (a2 != 3)
    LODWORD(v2) = v3;
  if (a1)
    return v2;
  else
    return 0;
}

uint64_t *INTemporalEventTriggerTypeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result | 1;
    if (a2 == 2)
      v2 = *result | 2;
    if (a2 == 3)
      v2 = *result | 4;
    *result = v2;
  }
  return result;
}

unint64_t *INTemporalEventTriggerTypeOptionsRemoveBackingType(unint64_t *result, int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (a2 == 2)
      v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    if (a2 == 3)
      v2 = *result & 0xFFFFFFFFFFFFFFFBLL;
    *result = v2;
  }
  return result;
}

id INTemporalEventTriggerTypeOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0)
      goto LABEL_4;
LABEL_10:
    objc_msgSend(v3, "addObject:", CFSTR("scheduledNonRecurring"));
    if ((v1 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  objc_msgSend(v2, "addObject:", CFSTR("notScheduled"));
  if ((v1 & 2) != 0)
    goto LABEL_10;
LABEL_4:
  if ((v1 & 4) != 0)
LABEL_5:
    objc_msgSend(v3, "addObject:", CFSTR("scheduledRecurring"));
LABEL_6:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INTemporalEventTriggerTypeOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("notScheduled"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("scheduledNonRecurring")))
          v4 |= 2uLL;
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("scheduledRecurring")))
          v4 |= 4uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INTemporalEventTriggerTypeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_8;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_4;
LABEL_10:
    INLocalizedStringWithLocalizer(CFSTR("scheduled non recurring"), CFSTR("scheduled non recurring"), v3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v9);

    if ((a1 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  INLocalizedStringWithLocalizer(CFSTR("not scheduled"), CFSTR("not scheduled"), v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v8);

  if ((a1 & 2) != 0)
    goto LABEL_10;
LABEL_4:
  if ((a1 & 4) != 0)
  {
LABEL_5:
    INLocalizedStringWithLocalizer(CFSTR("scheduled recurring"), CFSTR("scheduled recurring"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_6:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_8:
  return v6;
}

BOOL INTaskPriorityHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INTaskPriorityGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INTaskPriorityGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INTaskPriorityGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("flagged");
  if (a1 == 1)
    return CFSTR("notFlagged");
  else
    return v1;
}

uint64_t INTaskPriorityWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("notFlagged")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("flagged")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTaskPriorityGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("flagged");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("not flagged");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBAppIdentifierReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBundleVersion:", v18);
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAppName:", v18);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setBundleIdentifier:", v18);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPayloadNeedsExecuteIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentExecutionRequest *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentExecutionRequest);
        if (!PBReaderPlaceMark() || (_INPBIntentExecutionRequestReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentExecution:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentExecutionRequestReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  _INPBAppIdentifier *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_35;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_38;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_38:
        objc_msgSend(a1, "setEncodingFormat:", v23);
        goto LABEL_39;
      case 2u:
        v25 = objc_alloc_init(_INPBAppIdentifier);
        if (PBReaderPlaceMark() && _INPBAppIdentifierReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAppIdentifier:", v25, 0, 0);
LABEL_33:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        v25 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEncodedIntent:", v25);
        goto LABEL_33;
      case 4u:
        PBReaderReadString();
        v25 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEncodedIntentDefinition:", v25);
        goto LABEL_33;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

uint64_t _INPBSnoozeTasksIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTasks:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNextTriggerTime:", v17, 0, 0);
LABEL_31:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_42:
        objc_msgSend(a1, "setAll:", v21 != 0);
        goto LABEL_43;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

uint64_t _INPBDeleteTasksIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBTaskList);
        if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v17, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskList:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(_INPBTask);
        if (PBReaderPlaceMark() && _INPBTaskReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addTasks:", v17, 0, 0);
LABEL_31:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_42:
        objc_msgSend(a1, "setAll:", v21 != 0);
        goto LABEL_43;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

__CFString *INSnoozeTasksIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2293C98[a1];
}

uint64_t _INPBSnoozeTasksIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTask *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSnoozedTasks:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INDeleteTasksIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2293CC8[a1];
}

uint64_t _INPBDeleteTasksIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTask *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addDeletedTasks:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBFileDataAttachmentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setData:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setFileName:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C1F0CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  id *v40;

  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void INFileURLSetAssociatedAuditToken(void *a1, _OWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  __int128 v6;
  void *v7;
  _OWORD v8[2];

  v3 = (void *)MEMORY[0x1E0CB3620];
  v4 = a1;
  objc_msgSend(v3, "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  objc_msgSend(v5, "if_setAuditToken:forExtendedAttributeNamed:ofItemAtURL:", v8, CFSTR("INFileURLAssociatedAuditToken"), v4);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "if_setBool:forExtendedAttributeNamed:ofItemAtURL:", 1, CFSTR("INFileURLHasAssociatedAuditToken"), v4);

}

void INFileURLGetAssociatedAuditToken(void *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "if_auditTokenForExtendedAttributeNamed:ofItemAtURL:", CFSTR("INFileURLAssociatedAuditToken"), v5);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }

}

void INFileURLSetMarkedForDeletionOnDeallocation(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB3620];
  v4 = a1;
  objc_msgSend(v3, "defaultManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "if_setBool:forExtendedAttributeNamed:ofItemAtURL:", a2, CFSTR("INFileURLIsMarkedForDeletionOnDeallocation"), v4);

}

uint64_t INFileURLHasAssociatedAuditToken(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x1E0CB3620];
  v2 = a1;
  objc_msgSend(v1, "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "if_BOOLForExtendedAttributeName:ofItemAtURL:", CFSTR("INFileURLHasAssociatedAuditToken"), v2);

  return v4;
}

void INFileURLRemoveAssociatedAuditToken(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = (void *)MEMORY[0x1E0CB3620];
  v2 = a1;
  objc_msgSend(v1, "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "if_removeExtendedAttributeName:ofItemAtURL:", CFSTR("INFileURLAssociatedAuditToken"), v2);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "if_removeExtendedAttributeName:ofItemAtURL:", CFSTR("INFileURLHasAssociatedAuditToken"), v2);

}

BOOL INFileURLAuditTokenEquals(void *a1, _QWORD *a2)
{
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  INFileURLGetAssociatedAuditToken(a1, &v7);
  return (_QWORD)v7 == *a2 && *((_QWORD *)&v7 + 1) == a2[1] && (_QWORD)v8 == a2[2] && *((_QWORD *)&v8 + 1) == a2[3];
}

BOOL INOutgoingMessageTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INOutgoingMessageTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INOutgoingMessageTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INOutgoingMessageTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("outgoingMessageAudio");
  if (a1 == 1)
    return CFSTR("outgoingMessageText");
  else
    return v1;
}

uint64_t INOutgoingMessageTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("outgoingMessageText")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("outgoingMessageAudio")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INOutgoingMessageTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("outgoing message audio");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("outgoing message text");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBFileReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBURLValue *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFilename:", v17);
        goto LABEL_28;
      case 2u:
        PBReaderReadData();
        v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setData:", v17);
        goto LABEL_28;
      case 3u:
        v17 = objc_alloc_init(_INPBURLValue);
        if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFileURL:", v17, 0, 0);
LABEL_28:

LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTypeIdentifier:", v17);
        goto LABEL_28;
      case 5u:
        PBReaderReadData();
        v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBookmarkData:", v17);
        goto LABEL_28;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_41:
        objc_msgSend(a1, "setRemovedOnCompletion:", v21 != 0);
        goto LABEL_29;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_29;
    }
  }
}

uint64_t _INPBIntentExecutionResultReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEncodedIntentResponse:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setEncodingFormat:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEncodedIntent:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  _INPBAppIdentifier *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = objc_alloc_init(_INPBAppIdentifier);
              if (PBReaderPlaceMark() && _INPBAppIdentifierReadFrom(v17, a2))
              {
                PBReaderRecallMark();
                objc_msgSend(a1, "setAppIdentifier:", v17, 0, 0);
                goto LABEL_34;
              }

              return 0;
            case 2u:
              v19 = 0;
              v20 = 0;
              v21 = 0;
              break;
            case 3u:
              PBReaderReadString();
              v17 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setEncodedIntent:", v17);
              goto LABEL_34;
            case 4u:
              PBReaderReadString();
              v17 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setEncodedIntentDefinition:", v17);
              goto LABEL_34;
            case 5u:
              PBReaderReadString();
              v17 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setIntentTypeName:", v17);
LABEL_34:

              goto LABEL_40;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_40:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_36;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_39:
          objc_msgSend(a1, "setEncodingFormat:", v25);
          goto LABEL_40;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBEnergyValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBVolumeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBVolumeValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBVolumeValue);
        if (!PBReaderPlaceMark() || !_INPBVolumeValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBModifyNicknameReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _INPBString *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetNickname:", v23, 0, 0);

      }
      else if ((v10 >> 3) == 3)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        objc_msgSend(a1, "setIsRemoval:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INDeleteEventConfirmationReasonHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INDeleteEventConfirmationReasonGetBackingType(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INDeleteEventConfirmationReasonGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1)
    return result;
  else
    return 0;
}

const __CFString *INDeleteEventConfirmationReasonGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("deleteAllRecurrences");
  else
    return CFSTR("unknown");
}

uint64_t INDeleteEventConfirmationReasonWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("deleteAllRecurrences"));
}

id INDeleteEventConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("delete all recurrences"), CFSTR("delete all recurrences"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t _INPBSpeedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBSpeedValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBSpeedValue);
        if (!PBReaderPlaceMark() || !_INPBSpeedValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBMassValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBMassReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBMassValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBMassValue);
        if (!PBReaderPlaceMark() || !_INPBMassValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBVolumeValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBEnergyReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBEnergyValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBEnergyValue);
        if (!PBReaderPlaceMark() || !_INPBEnergyValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSpeedValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBReservationWrapperReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBFlightReservation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBFlightReservation);
        if (!PBReaderPlaceMark() || !_INPBFlightReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlightReservation:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(_INPBTrainReservation);
        if (!PBReaderPlaceMark() || !_INPBTrainReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrainReservation:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        v17 = objc_alloc_init(_INPBRentalCarReservation);
        if (!PBReaderPlaceMark() || !_INPBRentalCarReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRentalCarReservation:", v17, 0, 0);
        goto LABEL_45;
      case 4u:
        v17 = objc_alloc_init(_INPBLodgingReservation);
        if (!PBReaderPlaceMark() || !_INPBLodgingReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLodgingReservation:", v17, 0, 0);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(_INPBRestaurantReservation);
        if (!PBReaderPlaceMark() || !_INPBRestaurantReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRestaurantReservation:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        v17 = objc_alloc_init(_INPBTicketedEventReservation);
        if (!PBReaderPlaceMark() || !_INPBTicketedEventReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTicketedEventReservation:", v17, 0, 0);
        goto LABEL_45;
      case 7u:
        v17 = objc_alloc_init(_INPBBusReservation);
        if (!PBReaderPlaceMark() || !_INPBBusReservationReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBusReservation:", v17, 0, 0);
        goto LABEL_45;
      case 8u:
        v17 = objc_alloc_init(_INPBBoatReservation);
        if (PBReaderPlaceMark() && _INPBBoatReservationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setBoatReservation:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_46;
    }
  }
}

uint64_t _INPBGetReservationDetailsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBReservationWrapper *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBReservationWrapper);
        if (!PBReaderPlaceMark() || !_INPBReservationWrapperReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addReservations:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBGetReservationDetailsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBDataString *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addReservationItemReferences:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
      goto LABEL_36;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservationContainerReference:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromReservationWrapper(void *a1)
{
  id v1;
  void *v2;
  INTrainReservation *v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_19;
  if (!objc_msgSend(v1, "hasFlightReservation"))
  {
    if (objc_msgSend(v2, "hasTrainReservation"))
    {
      objc_msgSend(v2, "trainReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromTrainReservation(v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (objc_msgSend(v2, "hasRentalCarReservation"))
    {
      objc_msgSend(v2, "rentalCarReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromRentalCarReservation((INRentalCarReservation *)v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (objc_msgSend(v2, "hasLodgingReservation"))
    {
      objc_msgSend(v2, "lodgingReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromLodgingReservation((INLodgingReservation *)v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (objc_msgSend(v2, "hasRestaurantReservation"))
    {
      objc_msgSend(v2, "restaurantReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromRestaurantReservation((INRestaurantReservation *)v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (objc_msgSend(v2, "hasTicketedEventReservation"))
    {
      objc_msgSend(v2, "ticketedEventReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromTicketedEventReservation((INTicketedEventReservation *)v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (objc_msgSend(v2, "hasBusReservation"))
    {
      objc_msgSend(v2, "busReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromBusReservation((INBusReservation *)v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (objc_msgSend(v2, "hasBoatReservation"))
    {
      objc_msgSend(v2, "boatReservation");
      v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromBoatReservation((INBoatReservation *)v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
LABEL_19:
    v5 = 0;
    goto LABEL_20;
  }
  objc_msgSend(v2, "flightReservation");
  v3 = (INTrainReservation *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformFromFlightReservation((INFlightReservation *)v3);
  v4 = objc_claimAutoreleasedReturnValue();
LABEL_18:
  v5 = (void *)v4;

LABEL_20:
  return v5;
}

_INPBReservationWrapper *INIntentSlotValueTransformToReservationWrapper(void *a1)
{
  id v1;
  _INPBReservationWrapper *v2;
  void *v3;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBReservationWrapper);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToFlightReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setFlightReservation:](v2, "setFlightReservation:", v3);
LABEL_19:

      goto LABEL_20;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToTrainReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setTrainReservation:](v2, "setTrainReservation:", v3);
      goto LABEL_19;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToRentalCarReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setRentalCarReservation:](v2, "setRentalCarReservation:", v3);
      goto LABEL_19;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToLodgingReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setLodgingReservation:](v2, "setLodgingReservation:", v3);
      goto LABEL_19;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToRestaurantReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setRestaurantReservation:](v2, "setRestaurantReservation:", v3);
      goto LABEL_19;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToTicketedEventReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setTicketedEventReservation:](v2, "setTicketedEventReservation:", v3);
      goto LABEL_19;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToBusReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setBusReservation:](v2, "setBusReservation:", v3);
      goto LABEL_19;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      INIntentSlotValueTransformToBoatReservation(v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBReservationWrapper setBoatReservation:](v2, "setBoatReservation:", v3);
      goto LABEL_19;
    }
  }
  else
  {
    v2 = 0;
  }
LABEL_20:

  return v2;
}

id INIntentSlotValueTransformFromReservationWrappers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromReservationWrapper(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToReservationWrappers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToReservationWrapper(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedReservationWrapperFromReservationWrapper(void *a1)
{
  return a1;
}

uint64_t _INPBContactCardReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBImageValue *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setContactIdentifier:", v17);
        goto LABEL_82;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNamePrefix:", v17);
        goto LABEL_82;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFirstName:", v17);
        goto LABEL_82;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMiddleName:", v17);
        goto LABEL_82;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLastName:", v17);
        goto LABEL_82;
      case 6u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNameSuffix:", v17);
        goto LABEL_82;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFullName:", v17);
        goto LABEL_82;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNickName:", v17);
        goto LABEL_82;
      case 9u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_88:
        objc_msgSend(a1, "setIsMe:", v21 != 0);
        goto LABEL_83;
      case 0xAu:
        v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setImage:", v17, 0, 0);
        goto LABEL_82;
      case 0xBu:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setOrganizationName:", v17);
        goto LABEL_82;
      case 0xCu:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDepartmentName:", v17);
        goto LABEL_82;
      case 0xDu:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setJobTitle:", v17);
        goto LABEL_82;
      case 0xEu:
        v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPhoneNumbers:", v17, 0, 0);
        goto LABEL_82;
      case 0xFu:
        v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEmailAddresses:", v17, 0, 0);
        goto LABEL_82;
      case 0x10u:
        v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPostalAddresses:", v17, 0, 0);
        goto LABEL_82;
      case 0x11u:
        v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addUrlAddresses:", v17, 0, 0);
        goto LABEL_82;
      case 0x12u:
        v17 = objc_alloc_init(_INPBContactRelationship);
        if (!PBReaderPlaceMark() || !_INPBContactRelationshipReadFrom(v17, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContactRelations:", v17, 0, 0);
        goto LABEL_82;
      case 0x13u:
        v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || !_INPBContactHandleReadFrom(v17, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addInstantMessageAddresses:", v17, 0, 0);
        goto LABEL_82;
      case 0x14u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBirthday:", v17, 0, 0);
        goto LABEL_82;
      case 0x15u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNonGregorianBirthday:", v17, 0, 0);
        goto LABEL_82;
      case 0x16u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (PBReaderPlaceMark() && _INPBDateTimeRangeValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addDates:", v17, 0, 0);
LABEL_82:

LABEL_83:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_90:

        return 0;
      case 0x17u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticNamePrefix:", v17);
        goto LABEL_82;
      case 0x18u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticFirstName:", v17);
        goto LABEL_82;
      case 0x19u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticMiddleName:", v17);
        goto LABEL_82;
      case 0x1Au:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticNickName:", v17);
        goto LABEL_82;
      case 0x1Bu:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticLastName:", v17);
        goto LABEL_82;
      case 0x1Cu:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticNameSuffix:", v17);
        goto LABEL_82;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_83;
    }
  }
}

uint64_t INGetReservationDetailsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E2293FB8 + a1);
}

uint64_t _INPBListShortcutsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_39;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_42;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_42:
            objc_msgSend(a1, "setOriginDevice:", v24, v27, v28);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBAppIdentifier);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v25, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addAppTitle:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INAppIdentifier *INIntentSlotValueTransformFromAppIdentifier(void *a1)
{
  id v1;
  INAppIdentifier *v2;
  void *v3;
  void *v4;
  void *v5;
  INAppIdentifier *v6;

  if (a1)
  {
    v1 = a1;
    v2 = [INAppIdentifier alloc];
    objc_msgSend(v1, "bundleIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "bundleVersion");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "appName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = -[INAppIdentifier initWithBundleIdentifier:bundleVersion:appName:](v2, "initWithBundleIdentifier:bundleVersion:appName:", v3, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

_INPBAppIdentifier *INIntentSlotValueTransformToAppIdentifier(void *a1)
{
  id v1;
  _INPBAppIdentifier *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAppIdentifier);
    objc_msgSend(v1, "bundleIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAppIdentifier setBundleIdentifier:](v2, "setBundleIdentifier:", v3);

    objc_msgSend(v1, "bundleVersion");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAppIdentifier setBundleVersion:](v2, "setBundleVersion:", v4);

    objc_msgSend(v1, "appName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBAppIdentifier setAppName:](v2, "setAppName:", v5);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAppIdentifiers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAppIdentifier(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAppIdentifiers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAppIdentifier(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAppIdentifierFromAppIdentifier(void *a1)
{
  return a1;
}

uint64_t INListShortcutsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E2294020 + a1);
}

uint64_t _INPBListShortcutsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBShortcutOverview *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBShortcutOverview);
        if (!PBReaderPlaceMark() || !_INPBShortcutOverviewReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addShortcuts:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INShortcutOverview *INIntentSlotValueTransformFromShortcutOverview(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  INShortcutOverview *v11;
  INShortcutOverview *v13;
  void *v14;

  if (a1)
  {
    v1 = a1;
    v13 = [INShortcutOverview alloc];
    objc_msgSend(v1, "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v14);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "voiceCommand");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "icon");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromImageValue(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "descriptiveText");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "steps");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromImageValues(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[INShortcutOverview initWithName:voiceCommand:icon:descriptiveText:steps:](v13, "initWithName:voiceCommand:icon:descriptiveText:steps:", v2, v4, v6, v8, v10);

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBShortcutOverview *INIntentSlotValueTransformToShortcutOverview(void *a1)
{
  id v1;
  _INPBShortcutOverview *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBShortcutOverview);
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBShortcutOverview setName:](v2, "setName:", v4);

    objc_msgSend(v1, "voiceCommand");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBShortcutOverview setVoiceCommand:](v2, "setVoiceCommand:", v6);

    objc_msgSend(v1, "icon");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToImageValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBShortcutOverview setIcon:](v2, "setIcon:", v8);

    objc_msgSend(v1, "descriptiveText");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBShortcutOverview setDescriptiveText:](v2, "setDescriptiveText:", v10);

    objc_msgSend(v1, "steps");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToImageValues(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBShortcutOverview setSteps:](v2, "setSteps:", v12);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromShortcutOverviews(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromShortcutOverview(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToShortcutOverviews(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToShortcutOverview(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedShortcutOverviewFromShortcutOverview(void *a1)
{
  return a1;
}

BOOL _INPBShortcutOverviewReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setName:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceCommand:", v17, 0, 0);
        goto LABEL_37;
      case 3u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIcon:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDescriptiveText:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && _INPBImageValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addSteps:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

BOOL _INPBAirportGateReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBAirport *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (_INPBAirport *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTerminal:", v18);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBAirport);
        if (!PBReaderPlaceMark() || !_INPBAirportReadFrom(v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAirport:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBAirport *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setGate:", v18);
LABEL_26:

    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INAirportGate *INIntentSlotValueTransformFromAirportGate(void *a1)
{
  id v1;
  INAirportGate *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INAirportGate *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INAirportGate alloc];
    objc_msgSend(v1, "airport");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromAirport(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "terminal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "gate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = -[INAirportGate initWithAirport:terminal:gate:](v2, "initWithAirport:terminal:gate:", v4, v5, v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBAirportGate *INIntentSlotValueTransformToAirportGate(void *a1)
{
  id v1;
  _INPBAirportGate *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAirportGate);
    objc_msgSend(v1, "airport");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToAirport(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAirportGate setAirport:](v2, "setAirport:", v4);

    objc_msgSend(v1, "terminal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAirportGate setTerminal:](v2, "setTerminal:", v5);

    objc_msgSend(v1, "gate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBAirportGate setGate:](v2, "setGate:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAirportGates(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAirportGate(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAirportGates(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAirportGate(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAirportGateFromAirportGate(void *a1)
{
  return a1;
}

INReservationAction *INIntentSlotValueTransformFromReservationAction(void *a1)
{
  id v1;
  INReservationAction *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  INReservationAction *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INReservationAction alloc];
    LODWORD(v3) = objc_msgSend(v1, "hasType");
    if (objc_msgSend(v1, "type") == 2)
      v3 = v3;
    else
      v3 = 0;
    objc_msgSend(v1, "validDuration");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "userActivity");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    INUserActivityDeserializeFromBackingStore(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INReservationAction initWithType:validDuration:userActivity:](v2, "initWithType:validDuration:userActivity:", v3, v5, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBReservationAction *INIntentSlotValueTransformToReservationAction(void *a1)
{
  id v1;
  _INPBReservationAction *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservationAction);
    v3 = objc_msgSend(v1, "type");
    if (v3 == 1)
      v4 = 2;
    else
      v4 = 0x7FFFFFFF;
    if (v3)
      v5 = v4;
    else
      v5 = 1;
    -[_INPBReservationAction setType:](v2, "setType:", v5);
    objc_msgSend(v1, "validDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservationAction setValidDuration:](v2, "setValidDuration:", v7);

    objc_msgSend(v1, "userActivity");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INUserActivitySerializeToBackingStore(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservationAction setUserActivity:](v2, "setUserActivity:", v9);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromReservationActions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromReservationAction(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToReservationActions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToReservationAction(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedReservationActionFromReservationAction(void *a1)
{
  return a1;
}

uint64_t _INPBReservationActionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBUserActivity *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = objc_alloc_init(_INPBUserActivity);
        if (!PBReaderPlaceMark() || !_INPBUserActivityReadFrom(v25, a2))
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserActivity:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v25, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValidDuration:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INReservationActionTypeHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INReservationActionTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 2;
  else
    v1 = 0x7FFFFFFF;
  if (a1)
    return v1;
  else
    return 1;
}

uint64_t INReservationActionTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 2)
    return result;
  else
    return 0;
}

const __CFString *INReservationActionTypeGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("checkIn");
  else
    return CFSTR("unknown");
}

uint64_t INReservationActionTypeWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("checkIn"));
}

id INReservationActionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("check in"), CFSTR("check in"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL INTicketedEventCategoryHasBackingType(unint64_t a1)
{
  return a1 < 2;
}

uint64_t INTicketedEventCategoryGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 2;
  else
    v1 = 0x7FFFFFFF;
  if (a1)
    return v1;
  else
    return 1;
}

uint64_t INTicketedEventCategoryGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 2)
    return result;
  else
    return 0;
}

const __CFString *INTicketedEventCategoryGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("movie");
  else
    return CFSTR("unknown");
}

uint64_t INTicketedEventCategoryWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("movie"));
}

id INTicketedEventCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("movie"), CFSTR("movie"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

INMediaDestination *INIntentSlotValueTransformFromMediaDestination(void *a1)
{
  id v1;
  INMediaDestination *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  INMediaDestination *v9;

  if (a1)
  {
    v1 = a1;
    v2 = [INMediaDestination alloc];
    v3 = objc_msgSend(v1, "hasMediaDestinationType");
    v4 = objc_msgSend(v1, "mediaDestinationType");
    v5 = v4 == 1;
    if (v4 == 2)
      v5 = 2;
    if (v3)
      v6 = v5;
    else
      v6 = 0;
    objc_msgSend(v1, "playlistName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromString(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[INMediaDestination initWithMediaDestinationType:playlistName:](v2, "initWithMediaDestinationType:playlistName:", v6, v8);

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

_INPBMediaDestination *INIntentSlotValueTransformToMediaDestination(void *a1)
{
  id v1;
  _INPBMediaDestination *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMediaDestination);
    v3 = objc_msgSend(v1, "mediaDestinationType");
    if (v3 >= 3)
      v4 = 0x7FFFFFFFLL;
    else
      v4 = v3;
    -[_INPBMediaDestination setMediaDestinationType:](v2, "setMediaDestinationType:", v4);
    objc_msgSend(v1, "playlistName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaDestination setPlaylistName:](v2, "setPlaylistName:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromMediaDestinations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMediaDestination(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaDestinations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMediaDestination(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMediaDestinationFromMediaDestination(void *a1)
{
  return a1;
}

uint64_t _INPBConfidenceScoreComponentReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      if ((v11 >> 3) == 1)
      {
        PBReaderReadString();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSource:", v22);

      }
      else if ((v11 >> 3) == 2)
      {
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setScore:", a3);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t _INPBConfidenceScoreReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  _INPBConfidenceScoreComponent *v22;
  double v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      if ((v11 >> 3) == 2)
      {
        v22 = objc_alloc_init(_INPBConfidenceScoreComponent);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBConfidenceScoreComponentReadFrom(v22, a2, v23))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v22)
          objc_msgSend(a1, "addComponents:", v22, 0, 0);

      }
      else if ((v11 >> 3) == 1)
      {
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAggregateScore:", a3, v25, v26);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t _INPBHomeAttributeRangeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(double *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v24 = 0.0;
        }
        objc_msgSend(a1, "setUpperValue:", v24);
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(double *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0.0;
        }
        objc_msgSend(a1, "setLowerValue:", v21);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INStartCallIntentConfirmationReasonHasBackingType(uint64_t a1)
{
  _BOOL4 v1;
  _BOOL4 v2;

  v1 = a1 == 3 || a1 == 1000;
  v2 = a1 == 1 || a1 == 2;
  if (a1 <= 2)
    return v2;
  else
    return v1;
}

uint64_t INStartCallIntentConfirmationReasonGetBackingType(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  if (a1 == 1000)
    v1 = 4;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 3)
    v2 = 3;
  else
    v2 = v1;
  if (a1 == 2)
    v3 = 2;
  else
    v3 = 0x7FFFFFFF;
  if (a1 == 1)
    v3 = 1;
  if (a1 <= 2)
    return v3;
  else
    return v2;
}

uint64_t INStartCallIntentConfirmationReasonGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 3)
    return qword_18C3123E0[a2 - 1];
  else
    return 0;
}

const __CFString *INStartCallIntentConfirmationReasonGetName(uint64_t a1)
{
  if (a1 > 2)
  {
    if (a1 != 3)
    {
      if (a1 == 1000)
        return CFSTR("hasRestrictedContacts");
      return CFSTR("unknown");
    }
    return CFSTR("callBackEmergency");
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 2)
        return CFSTR("redialEmergency");
      return CFSTR("unknown");
    }
    return CFSTR("callsOnHomepod");
  }
}

uint64_t INStartCallIntentConfirmationReasonWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("callsOnHomepod")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("redialEmergency")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("callBackEmergency")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("hasRestrictedContacts")))
  {
    v2 = 1000;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INStartCallIntentConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;

  v3 = a2;
  v4 = 0;
  if (a1 > 2)
  {
    if (a1 == 3)
    {
      v5 = CFSTR("call back emergency");
      goto LABEL_10;
    }
    if (a1 == 1000)
    {
      v5 = CFSTR("has restricted contacts");
      goto LABEL_10;
    }
  }
  else
  {
    if (a1 == 1)
    {
      v5 = CFSTR("calls on homepod");
      goto LABEL_10;
    }
    if (a1 == 2)
    {
      v5 = CFSTR("redial emergency");
LABEL_10:
      INLocalizedStringWithLocalizer(v5, v5, v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }

  return v4;
}

uint64_t INPlayMessageSoundIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E2294050 + a1);
}

BOOL _INPBPlayMessageSoundIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBPlayMessageSoundIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_39:
            objc_msgSend(a1, "setSoundType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMessageIdentifier:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INMessageSoundTypeHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INMessageSoundTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INMessageSoundTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1)
    return result;
  else
    return 0;
}

const __CFString *INMessageSoundTypeGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("outgoingMessage");
  else
    return CFSTR("unknown");
}

uint64_t INMessageSoundTypeWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("outgoingMessage"));
}

id INMessageSoundTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("outgoing message"), CFSTR("outgoing message"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void INTaskWarningCodeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_8;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
LABEL_11:
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
      v3 = v4;
      if ((a1 & 8) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  v3 = v4;
  if ((a1 & 4) != 0)
    goto LABEL_11;
LABEL_6:
  if ((a1 & 8) != 0)
  {
LABEL_7:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
    v3 = v4;
  }
LABEL_8:

}

unint64_t INTaskWarningCodeOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        result = (result >> 1) & 1;
        break;
      case 3:
        result = (result >> 2) & 1;
        break;
      case 4:
        result = (result >> 3) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INTaskWarningCodeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INTaskWarningCodeOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INTaskWarningCodeOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("locationServicesDisabled"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      objc_msgSend(v3, "addObject:", CFSTR("contactTriggerNotAllowed"));
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("flaggedNotAllowed"));
  if ((v1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((v1 & 8) != 0)
LABEL_6:
    objc_msgSend(v3, "addObject:", CFSTR("notUpgradedToCloudkit"));
LABEL_7:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INTaskWarningCodeOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("locationServicesDisabled"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("flaggedNotAllowed")))
          v4 |= 2uLL;
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("contactTriggerNotAllowed")))
          v4 |= 4uLL;
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("notUpgradedToCloudkit")))
          v4 |= 8uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INTaskWarningCodeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_9;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("location services disabled"), CFSTR("location services disabled"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      INLocalizedStringWithLocalizer(CFSTR("contact trigger not allowed"), CFSTR("contact trigger not allowed"), v3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

      if ((a1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("flagged not allowed"), CFSTR("flagged not allowed"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((a1 & 8) != 0)
  {
LABEL_6:
    INLocalizedStringWithLocalizer(CFSTR("not upgraded to cloudkit"), CFSTR("not upgraded to cloudkit"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_7:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_9:
  return v6;
}

uint64_t _INPBMediaItemGroupReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBMediaItemValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValues:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INParsecCategoryHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INParsecCategoryGetBackingType(unint64_t result)
{
  if (result >= 9)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INParsecCategoryGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 7)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INParsecCategoryGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return *(&off_1E2294080 + a1 - 1);
}

uint64_t INParsecCategoryWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("movie")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TV")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("webVideo")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("music")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("podcast")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("app")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("book")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("other")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INParsecCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("movie");
      goto LABEL_11;
    case 2:
      v4 = CFSTR("TV");
      goto LABEL_11;
    case 3:
      v4 = CFSTR("web video");
      goto LABEL_11;
    case 4:
      v4 = CFSTR("music");
      goto LABEL_11;
    case 5:
      v4 = CFSTR("podcast");
      goto LABEL_11;
    case 6:
      v4 = CFSTR("app");
      goto LABEL_11;
    case 7:
      v4 = CFSTR("book");
      goto LABEL_11;
    case 8:
      v4 = CFSTR("other");
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INFindEventsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E22940C0 + a1);
}

uint64_t INFindDeviceAndPlaySoundIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E22940F0 + a1);
}

uint64_t _INPBFindDeviceAndPlaySoundIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDeviceDetail *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDeviceDetail);
        if (!PBReaderPlaceMark() || !_INPBDeviceDetailReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addDevicesFound:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBFindDeviceAndPlaySoundIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_39;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_41:
            objc_msgSend(a1, "setIsStopRequest:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBDeviceDetail);
        if (!PBReaderPlaceMark() || !_INPBDeviceDetailReadFrom(v24, a2))
          goto LABEL_44;
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addDevice:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDeviceDetailReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDataString *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v17);
        goto LABEL_41;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_50;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDeviceName:", v17, 0, 0);
        goto LABEL_41;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_48:
        objc_msgSend(a1, "setDeviceClass:", v25);
        goto LABEL_42;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_50;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProductName:", v17, 0, 0);
        goto LABEL_41;
      case 5u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_50;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCategory:", v17, 0, 0);
        goto LABEL_41;
      case 6u:
        v17 = objc_alloc_init(_INPBContact);
        if (PBReaderPlaceMark() && (_INPBContactReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDeviceOwner:", v17, 0, 0);
LABEL_41:

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_50:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

BOOL INDeviceClassHasBackingType(unint64_t a1)
{
  return a1 < 0xA;
}

unint64_t INDeviceClassGetBackingType(unint64_t result)
{
  if (result >= 0xA)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INDeviceClassGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 8)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INDeviceClassGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("unknown");
  else
    return *(&off_1E2294170 + a1 - 1);
}

uint64_t INDeviceClassWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPad")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("watch")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPod")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TV")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("homepod")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("headphone")) & 1) != 0)
  {
    v2 = 8;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("accessories")))
  {
    v2 = 9;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INDeviceClassGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("iPhone");
      goto LABEL_12;
    case 2:
      v4 = CFSTR("iPad");
      goto LABEL_12;
    case 3:
      v4 = CFSTR("watch");
      goto LABEL_12;
    case 4:
      v4 = CFSTR("iPod");
      goto LABEL_12;
    case 5:
      v4 = CFSTR("TV");
      goto LABEL_12;
    case 6:
      v4 = CFSTR("Mac");
      goto LABEL_12;
    case 7:
      v4 = CFSTR("homepod");
      goto LABEL_12;
    case 8:
      v4 = CFSTR("headphone");
      goto LABEL_12;
    case 9:
      v4 = CFSTR("accessories");
LABEL_12:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INDeviceDetail *INIntentSlotValueTransformFromDeviceDetail(void *a1)
{
  id v1;
  INDeviceDetail *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  INDeviceDetail *v15;
  void *v16;
  INDeviceDetail *v17;
  void *v19;

  if (a1)
  {
    v1 = a1;
    v2 = [INDeviceDetail alloc];
    objc_msgSend(v1, "identifier");
    v3 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "deviceName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v19);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasDeviceClass");
    v6 = objc_msgSend(v1, "deviceClass") - 1;
    if (v6 <= 8)
      v7 = v6 + 1;
    else
      v7 = 0;
    if (v5)
      v8 = v7;
    else
      v8 = 0;
    objc_msgSend(v1, "productName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "category");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "deviceOwner");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromContact(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v2;
    v16 = (void *)v3;
    v17 = -[INDeviceDetail initWithIdentifier:deviceName:deviceClass:productName:category:deviceOwner:](v15, "initWithIdentifier:deviceName:deviceClass:productName:category:deviceOwner:", v3, v4, v8, v10, v12, v14);

  }
  else
  {
    v17 = 0;
  }
  return v17;
}

_INPBDeviceDetail *INIntentSlotValueTransformToDeviceDetail(void *a1)
{
  id v1;
  _INPBDeviceDetail *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBDeviceDetail);
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDeviceDetail setIdentifier:](v2, "setIdentifier:", v3);

    objc_msgSend(v1, "deviceName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDeviceDetail setDeviceName:](v2, "setDeviceName:", v5);

    v6 = objc_msgSend(v1, "deviceClass");
    if (v6 >= 0xA)
      v7 = 0x7FFFFFFFLL;
    else
      v7 = v6;
    -[_INPBDeviceDetail setDeviceClass:](v2, "setDeviceClass:", v7);
    objc_msgSend(v1, "productName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDeviceDetail setProductName:](v2, "setProductName:", v9);

    objc_msgSend(v1, "category");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDeviceDetail setCategory:](v2, "setCategory:", v11);

    objc_msgSend(v1, "deviceOwner");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToContact(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDeviceDetail setDeviceOwner:](v2, "setDeviceOwner:", v13);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromDeviceDetails(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromDeviceDetail(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToDeviceDetails(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToDeviceDetail(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedDeviceDetailFromDeviceDetail(void *a1)
{
  return a1;
}

uint64_t _INPBListCarsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBListCarsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCar *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBCar);
        if (!PBReaderPlaceMark() || !_INPBCarReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addCars:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INListCarsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E22941B8 + a1);
}

BOOL _INPBCarReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBColor *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCarIdentifier:", v17);
        goto LABEL_38;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDisplayName:", v17);
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setYear:", v17);
        goto LABEL_38;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMake:", v17);
        goto LABEL_38;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModel:", v17);
        goto LABEL_38;
      case 6u:
        v17 = objc_alloc_init(_INPBColor);
        if (!PBReaderPlaceMark() || (_INPBColorReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setColor:", v17, 0, 0);
        goto LABEL_38;
      case 9u:
        v17 = objc_alloc_init(_INPBCarHeadUnit);
        if (!PBReaderPlaceMark() || !_INPBCarHeadUnitReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHeadUnit:", v17, 0, 0);
        goto LABEL_38;
      case 0xAu:
        PBReaderReadString();
        v17 = (_INPBColor *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addSupportedChargingConnectors:", v17);
        goto LABEL_38;
      case 0xBu:
        v17 = objc_alloc_init(_INPBCarChargingConnectorPower);
        if (PBReaderPlaceMark() && _INPBCarChargingConnectorPowerReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addPowerPerConnector:", v17, 0, 0);
LABEL_38:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

uint64_t _INPBColorReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v25 = *(double *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v25 = 0.0;
        }
        objc_msgSend(a1, "setRed:", v25);
      }
      else if ((_DWORD)v19 == 2)
      {
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(double *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v28 = 0.0;
        }
        objc_msgSend(a1, "setGreen:", v28);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(double *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0.0;
        }
        objc_msgSend(a1, "setBlue:", v22);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INCar *INIntentSlotValueTransformFromCar(void *a1)
{
  id v1;
  INCar *v2;
  void *v3;
  void *v4;
  CFTypeRef v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  INCar *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a1)
  {
    v1 = a1;
    v2 = [INCar alloc];
    objc_msgSend(v1, "carIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "displayName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "year");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "make");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "model");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "color");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = INIntentSlotValueTransformFromColor(v18);
    objc_msgSend(v1, "headUnit");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromCarHeadUnit(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "supportedChargingConnectors");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8)
      v10 = v8;
    else
      v10 = MEMORY[0x1E0C9AA60];
    objc_msgSend(v1, "powerPerConnectors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromCarChargingConnectorPowers(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[INCar initWithCarIdentifier:displayName:year:make:model:color:headUnit:supportedChargingConnectors:powerPerConnectors:](v2, "initWithCarIdentifier:displayName:year:make:model:color:headUnit:supportedChargingConnectors:powerPerConnectors:", v17, v3, v16, v15, v4, v5, v7, v10, v12);

  }
  else
  {
    v13 = 0;
  }
  return v13;
}

_INPBCar *INIntentSlotValueTransformToCar(void *a1)
{
  id v1;
  _INPBCar *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCar);
    objc_msgSend(v1, "carIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setCarIdentifier:](v2, "setCarIdentifier:", v3);

    objc_msgSend(v1, "displayName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setDisplayName:](v2, "setDisplayName:", v4);

    objc_msgSend(v1, "year");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setYear:](v2, "setYear:", v5);

    objc_msgSend(v1, "make");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setMake:](v2, "setMake:", v6);

    objc_msgSend(v1, "model");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setModel:](v2, "setModel:", v7);

    INIntentSlotValueTransformToColor(objc_msgSend(v1, "color"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setColor:](v2, "setColor:", v8);

    objc_msgSend(v1, "headUnit");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCarHeadUnit(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setHeadUnit:](v2, "setHeadUnit:", v10);

    objc_msgSend(v1, "supportedChargingConnectors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setSupportedChargingConnectors:](v2, "setSupportedChargingConnectors:", v11);

    objc_msgSend(v1, "powerPerConnectors");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToCarChargingConnectorPowers(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCar setPowerPerConnectors:](v2, "setPowerPerConnectors:", v13);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCars(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCar(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCars(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCar(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCarFromCar(void *a1)
{
  return a1;
}

uint64_t CoreGraphicsLibrary_125372()
{
  uint64_t v0;
  void *v2;

  if (CoreGraphicsLibraryCore_frameworkLibrary_125377)
    return CoreGraphicsLibraryCore_frameworkLibrary_125377;
  CoreGraphicsLibraryCore_frameworkLibrary_125377 = _sl_dlopen();
  v0 = CoreGraphicsLibraryCore_frameworkLibrary_125377;
  if (!CoreGraphicsLibraryCore_frameworkLibrary_125377)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t soft_CGColorCreateSRGB(double a1, double a2, double a3, double a4)
{
  void *v8;
  void *v9;
  _Unwind_Exception *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v8 = getCGColorCreateSRGBSymbolLoc_ptr_125411;
  v15 = getCGColorCreateSRGBSymbolLoc_ptr_125411;
  if (!getCGColorCreateSRGBSymbolLoc_ptr_125411)
  {
    v9 = (void *)CoreGraphicsLibrary_125372();
    v8 = dlsym(v9, "CGColorCreateSRGB");
    v13[3] = (uint64_t)v8;
    getCGColorCreateSRGBSymbolLoc_ptr_125411 = v8;
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    v11 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v11);
  }
  return ((uint64_t (*)(double, double, double, double))v8)(a1, a2, a3, a4);
}

BOOL _INPBSetRelationshipIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v18, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addContactIdentifiers:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBModifyRelationship);
    if (!PBReaderPlaceMark() || (_INPBModifyRelationshipReadFrom(v18, a2) & 1) == 0)
      goto LABEL_36;
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetRelationship:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void INValidateReservationInteraction(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "intentResponse");
  v25 = (id)objc_claimAutoreleasedReturnValue();
  if (v25 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_alloc(MEMORY[0x1E0C99D48]);
    v3 = (void *)objc_msgSend(v2, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
    v4 = (void *)objc_opt_new();
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v25, "reservations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v27;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v27 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v9);
          objc_msgSend(v10, "itemReference");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "vocabularyIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "if_addObjectIfNonNil:", v12);

          objc_msgSend(v10, "_duration");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "startDateComponents");
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v14)
            NSLog((NSString *)CFSTR("Failed to process event suggestion – reservation start date missing."));
          objc_msgSend(v13, "endDateComponents");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {

          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              NSLog((NSString *)CFSTR("Failed to process event suggestion – reservation end date missing."));
          }
          objc_msgSend(v13, "endDateComponents");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            objc_msgSend(v13, "endDateComponents");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "timeZone");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setTimeZone:", v18);

            objc_msgSend(v13, "endDateComponents");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "dateFromComponents:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v1, "compare:", v20) == 1)
              NSLog((NSString *)CFSTR("Failed to process event suggestion – reservation end date in the past (%@)."), v20);

          }
          ++v9;
        }
        while (v7 != v9);
        v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        v7 = v21;
      }
      while (v21);
    }

    v22 = objc_msgSend(v4, "count");
    objc_msgSend(v25, "reservations");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "count");

    if (v22 != v24)
      NSLog((NSString *)CFSTR("Failed to process event suggestion – two or more INReservation objects share the same INReservation.itemReference.vocabularyIdentifier value."));

  }
  else
  {

  }
}

uint64_t _INPBSearchForContactIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactCard *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || !_INPBContactCardReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMatchedContacts:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForMeCardIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INSearchForMeCardIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return (uint64_t)*(&off_1E2294200 + a1);
}

BOOL _INPBSetNicknameIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBModifyNickname);
    if (!PBReaderPlaceMark() || (_INPBModifyNicknameReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetNickname:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INSearchForContactIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD)
    return 0;
  else
    return (uint64_t)*(&off_1E2294248 + a1);
}

uint64_t _INPBSetRelationshipIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactCard *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || (_INPBContactCardReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMeCard:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INSetRelationshipIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return (uint64_t)*(&off_1E22942B8 + a1);
}

uint64_t _INPBSearchForMeCardIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactCard *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || (_INPBContactCardReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMeCard:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSearchForContactIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContactIdentifiers:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSetNicknameIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactCard *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBContactCard);
        if (!PBReaderPlaceMark() || (_INPBContactCardReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMeCard:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INSetNicknameIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return (uint64_t)*(&off_1E2294310 + a1);
}

BOOL _INPBRetrieveParkingLocationIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBLocation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingLocation:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingNote:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INRetrieveParkingLocationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E2294368 + a1);
}

uint64_t _INPBRetrieveParkingLocationIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPrivateMediaItemValueDataReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  _INPBMediaSubItem *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRecommendationId:", v20);
        goto LABEL_66;
      case 2u:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAssetInfo:", v20);
        goto LABEL_66;
      case 3u:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSharedUserIdFromPlayableMusicAccount:", v20);
        goto LABEL_66;
      case 4u:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPunchoutURI:", v20);
        goto LABEL_66;
      case 5u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (2)
        {
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v16 = v22++ >= 9;
              if (v16)
              {
                v23 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v23 = 0;
LABEL_74:
        objc_msgSend(a1, "setRequiresSubscription:", v23 != 0);
        goto LABEL_67;
      case 6u:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProvider:", v20);
        goto LABEL_66;
      case 7u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        while (2)
        {
          v31 = *v4;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v16 = v29++ >= 9;
              if (v16)
              {
                v30 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v30 = 0;
LABEL_78:
        objc_msgSend(a1, "setIsAvailable:", v30 != 0);
        goto LABEL_67;
      case 8u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        while (2)
        {
          v38 = *v4;
          v39 = *(_QWORD *)(a2 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v39);
            *(_QWORD *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              v16 = v36++ >= 9;
              if (v16)
              {
                v37 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v37 = 0;
LABEL_82:
        objc_msgSend(a1, "setIsHardBan:", v37 != 0);
        goto LABEL_67;
      case 9u:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBundleId:", v20);
        goto LABEL_66;
      case 0xAu:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUniversalResourceLink:", v20);
        goto LABEL_66;
      case 0xBu:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProviderAppName:", v20);
        goto LABEL_66;
      case 0xCu:
        PBReaderReadString();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        if (v20)
          objc_msgSend(a1, "addInternalSignal:", v20);
        goto LABEL_66;
      case 0xDu:
        v42 = *v4;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAmpConfidenceScore:", a3, v53, v54);
        goto LABEL_67;
      case 0xEu:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (2)
        {
          v47 = *v4;
          v48 = *(_QWORD *)(a2 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v48);
            *(_QWORD *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v16 = v45++ >= 9;
              if (v16)
              {
                v51 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v51 = 0;
        else
          v51 = v46;
LABEL_87:
        objc_msgSend(a1, "setAmpConfidenceLevel:", v51, v53, v54);
        goto LABEL_67;
      case 0xFu:
        PBReaderReadData();
        v20 = (_INPBMediaSubItem *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPegasusMetaData:", v20);
        goto LABEL_66;
      default:
        if ((v11 >> 3) != 100)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
LABEL_67:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
        v20 = objc_alloc_init(_INPBMediaSubItem);
        v53 = 0;
        v54 = 0;
        if (PBReaderPlaceMark() && _INPBMediaSubItemReadFrom(v20, a2))
        {
          PBReaderRecallMark();
          if (v20)
            objc_msgSend(a1, "addMediaSubItems:", v20, 0, 0);
LABEL_66:

          goto LABEL_67;
        }

        return 0;
    }
  }
}

id INIntentSlotValueTransformFromPrivateMediaItemValueDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPrivateMediaItemValueData(*(INPrivateMediaItemValueData **)(*((_QWORD *)&v11 + 1)
                                                                                                  + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateMediaItemValueDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPrivateMediaItemValueData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateMediaItemValueDataFromPrivateMediaItemValueData(void *a1)
{
  return a1;
}

BOOL _INPBStopShareETAIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addRecipient:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBShareETAIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _INPBContact *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v25, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addRecipient:", v25, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            while (1)
            {
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
                break;
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_32;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_32:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_49;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
          PBRepeatedInt32Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBShareETAIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addRecipient:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void INShareETAMediumOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_8;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, _QWORD))v3 + 2))(v3, 0);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
LABEL_11:
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
      v3 = v4;
      if ((a1 & 8) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 1);
  v3 = v4;
  if ((a1 & 4) != 0)
    goto LABEL_11;
LABEL_6:
  if ((a1 & 8) != 0)
  {
LABEL_7:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
    v3 = v4;
  }
LABEL_8:

}

unint64_t INShareETAMediumOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result &= 1u;
        break;
      case 1:
        result = (result >> 1) & 1;
        break;
      case 2:
        result = (result >> 2) & 1;
        break;
      case 3:
        result = (result >> 3) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INShareETAMediumOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 0:
        v2 |= 1uLL;
        break;
      case 1:
        v2 |= 2uLL;
        break;
      case 2:
        v2 |= 4uLL;
        break;
      case 3:
        v2 |= 8uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INShareETAMediumOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 0:
        v2 &= ~1uLL;
        break;
      case 1:
        v2 &= ~2uLL;
        break;
      case 2:
        v2 &= ~4uLL;
        break;
      case 3:
        v2 &= ~8uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INShareETAMediumOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("none"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      objc_msgSend(v3, "addObject:", CFSTR("iMessage"));
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("ids"));
  if ((v1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((v1 & 8) != 0)
LABEL_6:
    objc_msgSend(v3, "addObject:", CFSTR("SMS"));
LABEL_7:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INShareETAMediumOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("none"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("ids")))
          v4 |= 2uLL;
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("iMessage")))
          v4 |= 4uLL;
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("SMS")))
          v4 |= 8uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INShareETAMediumOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_9;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("none"), CFSTR("none"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      INLocalizedStringWithLocalizer(CFSTR("iMessage"), CFSTR("iMessage"), v3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

      if ((a1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("ids"), CFSTR("ids"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((a1 & 8) != 0)
  {
LABEL_6:
    INLocalizedStringWithLocalizer(CFSTR("SMS"), CFSTR("SMS"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_7:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_9:
  return v6;
}

uint64_t INShareETAIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xF)
    return 0;
  else
    return (uint64_t)*(&off_1E22943B8 + a1);
}

uint64_t _INPBStopShareETAIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _INPBContact *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v25, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addRecipient:", v25, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            while (1)
            {
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
                break;
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_32;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_32:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_49;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
          PBRepeatedInt32Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INStopShareETAIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0x10)
    return 0;
  else
    return (uint64_t)*(&off_1E2294458 + a1);
}

uint64_t _INPBPrivatePlayMediaIntentDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  _INPBMediaItemValue *v30;
  double v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_125;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_127;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_125:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_127:
        objc_msgSend(a1, "setAppSelectionEnabled:", v19 != 0);
        goto LABEL_122;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_131:
        objc_msgSend(a1, "setAppInferred:", v25 != 0);
        goto LABEL_122;
      case 4u:
        v30 = objc_alloc_init(_INPBMediaItemValue);
        v96 = 0;
        v97 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v30, a2))
          goto LABEL_177;
        PBReaderRecallMark();
        if (v30)
          objc_msgSend(a1, "addAudioSearchResults:", v30, 0, 0);
        goto LABEL_121;
      case 5u:
        v30 = objc_alloc_init(_INPBPrivateMediaIntentData);
        v96 = 0;
        v97 = 0;
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v30, a2, v31) & 1) == 0)
          goto LABEL_177;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v30);
        goto LABEL_121;
      case 6u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_135:
        objc_msgSend(a1, "setAppSelectionSignalsEnabled:", v34 != 0);
        goto LABEL_122;
      case 7u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
        else
          v44 = v40;
LABEL_140:
        objc_msgSend(a1, "setAppSelectionSignalsFrequencyDenominator:", v44, v96, v97);
        goto LABEL_122;
      case 8u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v47 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_144:
        objc_msgSend(a1, "setShouldSuppressCommonWholeHouseAudioRoutes:", v47 != 0);
        goto LABEL_122;
      case 9u:
        v51 = 0;
        v52 = 0;
        v53 = 0;
        while (2)
        {
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 1;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v14 = v52++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
LABEL_148:
        objc_msgSend(a1, "setImmediatelyStartPlayback:", v53 != 0);
        goto LABEL_122;
      case 0xAu:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        while (2)
        {
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v61 + 1;
            v59 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              v14 = v58++ >= 9;
              if (v14)
              {
                v59 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
LABEL_152:
        objc_msgSend(a1, "setIsAmbiguousPlay:", v59 != 0);
        goto LABEL_122;
      case 0xBu:
        v63 = 0;
        v64 = 0;
        v65 = 0;
        while (2)
        {
          v66 = *v3;
          v67 = *(_QWORD *)(a2 + v66);
          if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
            *(_QWORD *)(a2 + v66) = v67 + 1;
            v65 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              v14 = v64++ >= 9;
              if (v14)
              {
                v65 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v65 = 0;
LABEL_156:
        objc_msgSend(a1, "setIsPersonalizedRequest:", v65 != 0);
        goto LABEL_122;
      case 0xCu:
        PBReaderReadString();
        v30 = (_INPBMediaItemValue *)objc_claimAutoreleasedReturnValue();
        if (v30)
          objc_msgSend(a1, "addInternalSignal:", v30);
        goto LABEL_121;
      case 0xDu:
        v69 = 0;
        v70 = 0;
        v71 = 0;
        while (2)
        {
          v72 = *v3;
          v73 = *(_QWORD *)(a2 + v72);
          if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
            *(_QWORD *)(a2 + v72) = v73 + 1;
            v71 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              v14 = v70++ >= 9;
              if (v14)
              {
                v71 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v71 = 0;
LABEL_160:
        objc_msgSend(a1, "setEntityConfidenceSignalsEnabled:", v71 != 0);
        goto LABEL_122;
      case 0xEu:
        v75 = 0;
        v76 = 0;
        v77 = 0;
        while (2)
        {
          v78 = *v3;
          v79 = *(_QWORD *)(a2 + v78);
          if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v79);
            *(_QWORD *)(a2 + v78) = v79 + 1;
            v77 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              v14 = v76++ >= 9;
              if (v14)
              {
                v81 = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v81 = 0;
        else
          v81 = v77;
LABEL_165:
        objc_msgSend(a1, "setEntityConfidenceSignalsFrequencyDenominatorInternal:", v81, v96, v97);
        goto LABEL_122;
      case 0xFu:
        v82 = 0;
        v83 = 0;
        v84 = 0;
        while (2)
        {
          v85 = *v3;
          v86 = *(_QWORD *)(a2 + v85);
          if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v86);
            *(_QWORD *)(a2 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              v14 = v83++ >= 9;
              if (v14)
              {
                v88 = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v88 = 0;
        else
          v88 = v84;
LABEL_170:
        objc_msgSend(a1, "setEntityConfidenceSignalsFrequencyDenominatorProd:", v88, v96, v97);
        goto LABEL_122;
      case 0x10u:
        v89 = 0;
        v90 = 0;
        v91 = 0;
        while (2)
        {
          v92 = *v3;
          v93 = *(_QWORD *)(a2 + v92);
          if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
            *(_QWORD *)(a2 + v92) = v93 + 1;
            v91 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              v14 = v90++ >= 9;
              if (v14)
              {
                v95 = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v95 = 0;
        else
          v95 = v91;
LABEL_175:
        objc_msgSend(a1, "setEntityConfidenceSignalsMaxItemsToDisambiguate:", v95, v96, v97);
        goto LABEL_122;
      case 0x11u:
        v30 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v30, a2) & 1) == 0)
          goto LABEL_177;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlternativeProviderBundleIdentifier:", v30, 0, 0);
        goto LABEL_121;
      case 0x12u:
        v30 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v30, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAmpPAFDataSetID:", v30, 0, 0);
LABEL_121:

LABEL_122:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_177:

        return 0;
      case 0x13u:
        PBReaderReadData();
        v30 = (_INPBMediaItemValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPegasusMetaData:", v30);
        goto LABEL_121;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_122;
    }
  }
}

_INPBPrivatePlayMediaIntentData *INIntentSlotValueTransformToPrivatePlayMediaIntentData(void *a1)
{
  id v1;
  _INPBPrivatePlayMediaIntentData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPrivatePlayMediaIntentData);
    objc_msgSend(v1, "appSelectionEnabled");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAppSelectionEnabled:](v2, "setAppSelectionEnabled:", objc_msgSend(v3, "BOOLValue"));

    objc_msgSend(v1, "appInferred");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAppInferred:](v2, "setAppInferred:", objc_msgSend(v4, "BOOLValue"));

    objc_msgSend(v1, "audioSearchResults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMediaItemValues(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAudioSearchResults:](v2, "setAudioSearchResults:", v6);

    objc_msgSend(v1, "privateMediaIntentData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToPrivateMediaIntentData(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setPrivateMediaIntentData:](v2, "setPrivateMediaIntentData:", v8);

    objc_msgSend(v1, "appSelectionSignalsEnabled");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAppSelectionSignalsEnabled:](v2, "setAppSelectionSignalsEnabled:", objc_msgSend(v9, "BOOLValue"));

    objc_msgSend(v1, "appSelectionSignalsFrequencyDenominator");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAppSelectionSignalsFrequencyDenominator:](v2, "setAppSelectionSignalsFrequencyDenominator:", objc_msgSend(v10, "intValue"));

    objc_msgSend(v1, "shouldSuppressCommonWholeHouseAudioRoutes");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setShouldSuppressCommonWholeHouseAudioRoutes:](v2, "setShouldSuppressCommonWholeHouseAudioRoutes:", objc_msgSend(v11, "BOOLValue"));

    objc_msgSend(v1, "immediatelyStartPlayback");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setImmediatelyStartPlayback:](v2, "setImmediatelyStartPlayback:", objc_msgSend(v12, "BOOLValue"));

    objc_msgSend(v1, "isAmbiguousPlay");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setIsAmbiguousPlay:](v2, "setIsAmbiguousPlay:", objc_msgSend(v13, "BOOLValue"));

    objc_msgSend(v1, "isPersonalizedRequest");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setIsPersonalizedRequest:](v2, "setIsPersonalizedRequest:", objc_msgSend(v14, "BOOLValue"));

    objc_msgSend(v1, "internalSignals");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setInternalSignals:](v2, "setInternalSignals:", v15);

    objc_msgSend(v1, "entityConfidenceSignalsEnabled");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsEnabled:](v2, "setEntityConfidenceSignalsEnabled:", objc_msgSend(v16, "BOOLValue"));

    objc_msgSend(v1, "entityConfidenceSignalsFrequencyDenominatorInternal");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsFrequencyDenominatorInternal:](v2, "setEntityConfidenceSignalsFrequencyDenominatorInternal:", objc_msgSend(v17, "intValue"));

    objc_msgSend(v1, "entityConfidenceSignalsFrequencyDenominatorProd");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsFrequencyDenominatorProd:](v2, "setEntityConfidenceSignalsFrequencyDenominatorProd:", objc_msgSend(v18, "intValue"));

    objc_msgSend(v1, "entityConfidenceSignalsMaxItemsToDisambiguate");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setEntityConfidenceSignalsMaxItemsToDisambiguate:](v2, "setEntityConfidenceSignalsMaxItemsToDisambiguate:", objc_msgSend(v19, "intValue"));

    objc_msgSend(v1, "alternativeProviderBundleIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAlternativeProviderBundleIdentifier:](v2, "setAlternativeProviderBundleIdentifier:", v21);

    objc_msgSend(v1, "ampPAFDataSetID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivatePlayMediaIntentData setAmpPAFDataSetID:](v2, "setAmpPAFDataSetID:", v23);

    objc_msgSend(v1, "pegasusMetaData");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBPrivatePlayMediaIntentData setPegasusMetaData:](v2, "setPegasusMetaData:", v24);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPrivatePlayMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPrivatePlayMediaIntentData(*(INPrivatePlayMediaIntentData **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivatePlayMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPrivatePlayMediaIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivatePlayMediaIntentDataFromPrivatePlayMediaIntentData(void *a1)
{
  return a1;
}

BOOL _INPBBusTripReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDateTimeRange *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProvider:", v17);
        goto LABEL_35;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBusName:", v17);
        goto LABEL_35;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBusNumber:", v17);
        goto LABEL_35;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_39;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTripDuration:", v17, 0, 0);
        goto LABEL_35;
      case 5u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_39;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureBusStopLocation:", v17, 0, 0);
        goto LABEL_35;
      case 6u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDeparturePlatform:", v17);
        goto LABEL_35;
      case 7u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalBusStopLocation:", v17, 0, 0);
LABEL_35:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setArrivalPlatform:", v17);
        goto LABEL_35;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_36;
    }
  }
}

BOOL _INPBBoatTripReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDateTimeRange *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setProvider:", v17);
        goto LABEL_33;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBoatName:", v17);
        goto LABEL_33;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBoatNumber:", v17);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_37;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTripDuration:", v17, 0, 0);
        goto LABEL_33;
      case 5u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_37;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDepartureBoatTerminalLocation:", v17, 0, 0);
        goto LABEL_33;
      case 6u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setArrivalBoatTerminalLocation:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

INBusTrip *INIntentSlotValueTransformFromBusTrip(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INBusTrip *v10;
  void *v12;
  void *v13;
  INBusTrip *v14;
  void *v15;

  if (a1)
  {
    v1 = a1;
    v14 = [INBusTrip alloc];
    objc_msgSend(v1, "provider");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "busName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "busNumber");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "tripDuration");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v15);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departureBusStopLocation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departurePlatform");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "arrivalBusStopLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "arrivalPlatform");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = -[INBusTrip initWithProvider:busName:busNumber:tripDuration:departureBusStopLocation:departurePlatform:arrivalBusStopLocation:arrivalPlatform:](v14, "initWithProvider:busName:busNumber:tripDuration:departureBusStopLocation:departurePlatform:arrivalBusStopLocation:arrivalPlatform:", v13, v12, v2, v3, v5, v6, v8, v9);
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBBusTrip *INIntentSlotValueTransformToBusTrip(void *a1)
{
  id v1;
  _INPBBusTrip *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBBusTrip);
    objc_msgSend(v1, "provider");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setProvider:](v2, "setProvider:", v3);

    objc_msgSend(v1, "busName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setBusName:](v2, "setBusName:", v4);

    objc_msgSend(v1, "busNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setBusNumber:](v2, "setBusNumber:", v5);

    objc_msgSend(v1, "tripDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setTripDuration:](v2, "setTripDuration:", v7);

    objc_msgSend(v1, "departureBusStopLocation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setDepartureBusStopLocation:](v2, "setDepartureBusStopLocation:", v9);

    objc_msgSend(v1, "departurePlatform");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setDeparturePlatform:](v2, "setDeparturePlatform:", v10);

    objc_msgSend(v1, "arrivalBusStopLocation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusTrip setArrivalBusStopLocation:](v2, "setArrivalBusStopLocation:", v12);

    objc_msgSend(v1, "arrivalPlatform");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBBusTrip setArrivalPlatform:](v2, "setArrivalPlatform:", v13);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromBusTrips(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromBusTrip(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBusTrips(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToBusTrip(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBusTripFromBusTrip(void *a1)
{
  return a1;
}

INBoatTrip *INIntentSlotValueTransformFromBoatTrip(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  INBoatTrip *v11;
  INBoatTrip *v13;

  if (a1)
  {
    v1 = a1;
    v13 = [INBoatTrip alloc];
    objc_msgSend(v1, "provider");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "boatName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "boatNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "tripDuration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departureBoatTerminalLocation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "arrivalBoatTerminalLocation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromLocationValue(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[INBoatTrip initWithProvider:boatName:boatNumber:tripDuration:departureBoatTerminalLocation:arrivalBoatTerminalLocation:](v13, "initWithProvider:boatName:boatNumber:tripDuration:departureBoatTerminalLocation:arrivalBoatTerminalLocation:", v2, v3, v4, v6, v8, v10);

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBBoatTrip *INIntentSlotValueTransformToBoatTrip(void *a1)
{
  id v1;
  _INPBBoatTrip *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBBoatTrip);
    objc_msgSend(v1, "provider");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatTrip setProvider:](v2, "setProvider:", v3);

    objc_msgSend(v1, "boatName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatTrip setBoatName:](v2, "setBoatName:", v4);

    objc_msgSend(v1, "boatNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatTrip setBoatNumber:](v2, "setBoatNumber:", v5);

    objc_msgSend(v1, "tripDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatTrip setTripDuration:](v2, "setTripDuration:", v7);

    objc_msgSend(v1, "departureBoatTerminalLocation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatTrip setDepartureBoatTerminalLocation:](v2, "setDepartureBoatTerminalLocation:", v9);

    objc_msgSend(v1, "arrivalBoatTerminalLocation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToLocationValue(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatTrip setArrivalBoatTerminalLocation:](v2, "setArrivalBoatTerminalLocation:", v11);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromBoatTrips(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromBoatTrip(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBoatTrips(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToBoatTrip(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBoatTripFromBoatTrip(void *a1)
{
  return a1;
}

BOOL _INPBMediaSubItemReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAssetInfo:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setIdentifier:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INMediaSubItem *INIntentSlotValueTransformFromMediaSubItem(void *a1)
{
  id v1;
  INMediaSubItem *v2;
  void *v3;
  void *v4;
  INMediaSubItem *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INMediaSubItem alloc];
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "assetInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = -[INMediaSubItem initWithIdentifier:assetInfo:](v2, "initWithIdentifier:assetInfo:", v3, v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBMediaSubItem *INIntentSlotValueTransformToMediaSubItem(void *a1)
{
  id v1;
  _INPBMediaSubItem *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMediaSubItem);
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSubItem setIdentifier:](v2, "setIdentifier:", v3);

    objc_msgSend(v1, "assetInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBMediaSubItem setAssetInfo:](v2, "setAssetInfo:", v4);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromMediaSubItems(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMediaSubItem(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMediaSubItems(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMediaSubItem(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMediaSubItemFromMediaSubItem(void *a1)
{
  return a1;
}

INSpeakerIDInfo *INIntentSlotValueTransformFromSpeakerIDInfo(void *a1)
{
  id v1;
  INSpeakerIDInfo *v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  INSpeakerIDInfo *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INSpeakerIDInfo alloc];
    objc_msgSend(v1, "sharedUserID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasSpeakerIDConfidence");
    v6 = objc_msgSend(v1, "speakerIDConfidence");

    v7 = (v6 - 1);
    if (v7 <= 4)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v5)
      v9 = v8;
    else
      v9 = 0;
    v10 = -[INSpeakerIDInfo initWithSharedUserID:speakerIDConfidence:](v2, "initWithSharedUserID:speakerIDConfidence:", v4, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBSpeakerIDInfo *INIntentSlotValueTransformToSpeakerIDInfo(void *a1)
{
  id v1;
  _INPBSpeakerIDInfo *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSpeakerIDInfo);
    objc_msgSend(v1, "sharedUserID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSpeakerIDInfo setSharedUserID:](v2, "setSharedUserID:", v4);

    v5 = objc_msgSend(v1, "speakerIDConfidence");
    if (v5 >= 6)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = v5;
    -[_INPBSpeakerIDInfo setSpeakerIDConfidence:](v2, "setSpeakerIDConfidence:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromSpeakerIDInfos(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSpeakerIDInfo(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSpeakerIDInfos(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSpeakerIDInfo(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSpeakerIDInfoFromSpeakerIDInfo(void *a1)
{
  return a1;
}

INPrivateMediaIntentData *INIntentSlotValueTransformFromPrivateMediaIntentData(INPrivateMediaIntentData *a1)
{
  INPrivateMediaIntentData *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  INHomeAutomationEntityProvider *v18;
  void *v19;
  void *v21;
  INPrivateMediaIntentData *v22;
  INPrivateMediaIntentData *v23;
  INWholeHouseAudioMetadata *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a1)
  {
    v1 = a1;
    v22 = [INPrivateMediaIntentData alloc];
    -[INPrivateMediaIntentData speakerIDInfo](v1, "speakerIDInfo");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSpeakerIDInfo(v2);
    v3 = objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaIntentData proxiedThirdPartyAppInfo](v1, "proxiedThirdPartyAppInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromAppIdentifier(v28);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivateMediaIntentData isAppAttributionRequired](v1, "isAppAttributionRequired"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivateMediaIntentData useDialogMemoryForAttribution](v1, "useDialogMemoryForAttribution"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivateMediaIntentData isAppCorrection](v1, "isAppCorrection"));
    v4 = objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaIntentData fallbackUsername](v1, "fallbackUsername");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v26);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaIntentData wholeHouseAudioMetadata](v1, "wholeHouseAudioMetadata");
    v24 = (INWholeHouseAudioMetadata *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromWholeHouseAudioMetadata(v24);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0CB37E8];
    -[INPrivateMediaIntentData nlConfidenceScore](v1, "nlConfidenceScore");
    objc_msgSend(v6, "numberWithFloat:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INPrivateMediaIntentData hasNlConfidenceLevel](v1, "hasNlConfidenceLevel");
    v9 = -[INPrivateMediaIntentData nlConfidenceLevel](v1, "nlConfidenceLevel");
    v29 = v2;
    v32 = (void *)v3;
    if (!v8)
      goto LABEL_7;
    switch(v9)
    {
      case 30:
        v10 = 3;
        break;
      case 20:
        v10 = 2;
        break;
      case 10:
        v10 = 1;
        break;
      default:
LABEL_7:
        v10 = 0;
        break;
    }
    v11 = (void *)MEMORY[0x1E0CB37E8];
    -[INPrivateMediaIntentData asrConfidenceScore](v1, "asrConfidenceScore");
    objc_msgSend(v11, "numberWithFloat:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[INPrivateMediaIntentData hasAsrConfidenceLevel](v1, "hasAsrConfidenceLevel");
    v14 = -[INPrivateMediaIntentData asrConfidenceLevel](v1, "asrConfidenceLevel");
    v21 = (void *)v4;
    if (!v13)
      goto LABEL_13;
    switch(v14)
    {
      case 30:
        v15 = 3;
        break;
      case 20:
        v15 = 2;
        break;
      case 10:
        v15 = 1;
        break;
      default:
LABEL_13:
        v15 = 0;
        break;
    }
    -[INPrivateMediaIntentData resolvedSharedUserID](v1, "resolvedSharedUserID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaIntentData homeAutomationEntityProvider](v1, "homeAutomationEntityProvider");
    v18 = (INHomeAutomationEntityProvider *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromHomeAutomationEntityProvider(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[INPrivateMediaIntentData initWithSpeakerIDInfo:proxiedThirdPartyAppInfo:isAppAttributionRequired:useDialogMemoryForAttribution:isAppCorrection:fallbackUsername:wholeHouseAudioMetadata:nlConfidenceScore:nlConfidenceLevel:asrConfidenceScore:asrConfidenceLevel:resolvedSharedUserID:homeAutomationEntityProvider:](v22, "initWithSpeakerIDInfo:proxiedThirdPartyAppInfo:isAppAttributionRequired:useDialogMemoryForAttribution:isAppCorrection:fallbackUsername:wholeHouseAudioMetadata:nlConfidenceScore:nlConfidenceLevel:asrConfidenceScore:asrConfidenceLevel:resolvedSharedUserID:homeAutomationEntityProvider:", v32, v31, v30, v27, v21, v25, v5, v7, v10, v12, v15, v17, v19);

    a1 = v23;
  }
  return a1;
}

_INPBPrivateMediaIntentData *INIntentSlotValueTransformToPrivateMediaIntentData(void *a1)
{
  id v1;
  _INPBPrivateMediaIntentData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPrivateMediaIntentData);
    objc_msgSend(v1, "speakerIDInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSpeakerIDInfo(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setSpeakerIDInfo:](v2, "setSpeakerIDInfo:", v4);

    objc_msgSend(v1, "proxiedThirdPartyAppInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToAppIdentifier(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setProxiedThirdPartyAppInfo:](v2, "setProxiedThirdPartyAppInfo:", v6);

    objc_msgSend(v1, "isAppAttributionRequired");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setIsAppAttributionRequired:](v2, "setIsAppAttributionRequired:", objc_msgSend(v7, "BOOLValue"));

    objc_msgSend(v1, "useDialogMemoryForAttribution");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setUseDialogMemoryForAttribution:](v2, "setUseDialogMemoryForAttribution:", objc_msgSend(v8, "BOOLValue"));

    objc_msgSend(v1, "isAppCorrection");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setIsAppCorrection:](v2, "setIsAppCorrection:", objc_msgSend(v9, "BOOLValue"));

    objc_msgSend(v1, "fallbackUsername");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setFallbackUsername:](v2, "setFallbackUsername:", v11);

    objc_msgSend(v1, "wholeHouseAudioMetadata");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToWholeHouseAudioMetadata(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setWholeHouseAudioMetadata:](v2, "setWholeHouseAudioMetadata:", v13);

    objc_msgSend(v1, "nlConfidenceScore");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "floatValue");
    -[_INPBPrivateMediaIntentData setNlConfidenceScore:](v2, "setNlConfidenceScore:");

    v15 = objc_msgSend(v1, "nlConfidenceLevel");
    if (v15 >= 4)
      v16 = 0x7FFFFFFFLL;
    else
      v16 = (10 * v15);
    -[_INPBPrivateMediaIntentData setNlConfidenceLevel:](v2, "setNlConfidenceLevel:", v16);
    objc_msgSend(v1, "asrConfidenceScore");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "floatValue");
    -[_INPBPrivateMediaIntentData setAsrConfidenceScore:](v2, "setAsrConfidenceScore:");

    v18 = objc_msgSend(v1, "asrConfidenceLevel");
    if (v18 >= 4)
      v19 = 0x7FFFFFFFLL;
    else
      v19 = (10 * v18);
    -[_INPBPrivateMediaIntentData setAsrConfidenceLevel:](v2, "setAsrConfidenceLevel:", v19);
    objc_msgSend(v1, "resolvedSharedUserID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setResolvedSharedUserID:](v2, "setResolvedSharedUserID:", v21);

    objc_msgSend(v1, "homeAutomationEntityProvider");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToHomeAutomationEntityProvider(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaIntentData setHomeAutomationEntityProvider:](v2, "setHomeAutomationEntityProvider:", v23);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPrivateMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPrivateMediaIntentData(*(INPrivateMediaIntentData **)(*((_QWORD *)&v11 + 1)
                                                                                            + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPrivateMediaIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateMediaIntentDataFromPrivateMediaIntentData(void *a1)
{
  return a1;
}

uint64_t _INPBSpeakerIDInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBString *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSharedUserID:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSpeakerIDConfidence:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPrivateMediaIntentDataReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  _INPBSpeakerIDInfo *v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = objc_alloc_init(_INPBSpeakerIDInfo);
        if (!PBReaderPlaceMark() || (_INPBSpeakerIDInfoReadFrom(v20, a2) & 1) == 0)
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeakerIDInfo:", v20, 0, 0);
        goto LABEL_80;
      case 2u:
        v20 = objc_alloc_init(_INPBAppIdentifier);
        if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v20, a2))
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProxiedThirdPartyAppInfo:", v20, 0, 0);
        goto LABEL_80;
      case 3u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        while (2)
        {
          v25 = *v4;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v26);
            *(_QWORD *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              v16 = v23++ >= 9;
              if (v16)
              {
                v24 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v24 = 0;
LABEL_86:
        objc_msgSend(a1, "setIsAppAttributionRequired:", v24 != 0);
        goto LABEL_81;
      case 4u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        while (2)
        {
          v32 = *v4;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v16 = v30++ >= 9;
              if (v16)
              {
                v31 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v31 = 0;
LABEL_90:
        objc_msgSend(a1, "setUseDialogMemoryForAttribution:", v31 != 0);
        goto LABEL_81;
      case 5u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (2)
        {
          v39 = *v4;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v16 = v37++ >= 9;
              if (v16)
              {
                v38 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v38 = 0;
LABEL_94:
        objc_msgSend(a1, "setIsAppCorrection:", v38 != 0);
        goto LABEL_81;
      case 6u:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFallbackUsername:", v20, 0, 0);
        goto LABEL_80;
      case 7u:
        v20 = objc_alloc_init(_INPBWholeHouseAudioMetadata);
        if (!PBReaderPlaceMark() || (_INPBWholeHouseAudioMetadataReadFrom(v20, a2) & 1) == 0)
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWholeHouseAudioMetadata:", v20, 0, 0);
        goto LABEL_80;
      case 8u:
        v43 = *v4;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v44);
          *(_QWORD *)(a2 + v43) = v44 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setNlConfidenceScore:", a3);
        goto LABEL_81;
      case 9u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v4;
          v49 = *(_QWORD *)(a2 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
            *(_QWORD *)(a2 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v16 = v46++ >= 9;
              if (v16)
              {
                v52 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v52 = 0;
        else
          v52 = v47;
LABEL_99:
        objc_msgSend(a1, "setNlConfidenceLevel:", v52);
        goto LABEL_81;
      case 0xAu:
        v53 = *v4;
        v54 = *(_QWORD *)(a2 + v53);
        if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v54);
          *(_QWORD *)(a2 + v53) = v54 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAsrConfidenceScore:", a3);
        goto LABEL_81;
      case 0xBu:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        while (2)
        {
          v58 = *v4;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              v16 = v56++ >= 9;
              if (v16)
              {
                v62 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v62 = 0;
        else
          v62 = v57;
LABEL_104:
        objc_msgSend(a1, "setAsrConfidenceLevel:", v62);
        goto LABEL_81;
      case 0xCu:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_110;
        PBReaderRecallMark();
        objc_msgSend(a1, "setResolvedSharedUserID:", v20, 0, 0);
        goto LABEL_80;
      case 0xDu:
        v20 = objc_alloc_init(_INPBHomeAutomationEntityProvider);
        if (PBReaderPlaceMark() && _INPBHomeAutomationEntityProviderReadFrom(v20, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setHomeAutomationEntityProvider:", v20, 0, 0);
LABEL_80:

LABEL_81:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_110:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_81;
    }
  }
}

BOOL _INPBPrivateAddMediaIntentDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBPrivateMediaIntentData *v17;
  double v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBPrivateMediaIntentData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v17, a2, v18) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBMediaItemValue);
        if (PBReaderPlaceMark() && _INPBMediaItemValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addAudioSearchResults:", v17, 0, 0);
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addInternalSignal:", v17);
        goto LABEL_31;
      case 4u:
        PBReaderReadData();
        v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPegasusMetaData:", v17);
        goto LABEL_31;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

INPrivateAddMediaIntentData *INIntentSlotValueTransformFromPrivateAddMediaIntentData(void *a1)
{
  id v1;
  INPrivateAddMediaIntentData *v2;
  INPrivateMediaIntentData *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  INPrivateAddMediaIntentData *v9;

  if (a1)
  {
    v1 = a1;
    v2 = [INPrivateAddMediaIntentData alloc];
    objc_msgSend(v1, "privateMediaIntentData");
    v3 = (INPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromPrivateMediaIntentData(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "audioSearchResults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMediaItemValues(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "internalSignals");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "pegasusMetaData");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = -[INPrivateAddMediaIntentData initWithPrivateMediaIntentData:audioSearchResults:internalSignals:pegasusMetaData:](v2, "initWithPrivateMediaIntentData:audioSearchResults:internalSignals:pegasusMetaData:", v4, v6, v7, v8);
  }
  else
  {
    v9 = 0;
  }
  return v9;
}

_INPBPrivateAddMediaIntentData *INIntentSlotValueTransformToPrivateAddMediaIntentData(void *a1)
{
  id v1;
  _INPBPrivateAddMediaIntentData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPrivateAddMediaIntentData);
    objc_msgSend(v1, "privateMediaIntentData");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToPrivateMediaIntentData(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateAddMediaIntentData setPrivateMediaIntentData:](v2, "setPrivateMediaIntentData:", v4);

    objc_msgSend(v1, "audioSearchResults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMediaItemValues(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateAddMediaIntentData setAudioSearchResults:](v2, "setAudioSearchResults:", v6);

    objc_msgSend(v1, "internalSignals");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateAddMediaIntentData setInternalSignals:](v2, "setInternalSignals:", v7);

    objc_msgSend(v1, "pegasusMetaData");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBPrivateAddMediaIntentData setPegasusMetaData:](v2, "setPegasusMetaData:", v8);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPrivateAddMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPrivateAddMediaIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateAddMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPrivateAddMediaIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateAddMediaIntentDataFromPrivateAddMediaIntentData(void *a1)
{
  return a1;
}

BOOL _INPBPrivateUpdateMediaAffinityIntentDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBPrivateMediaIntentData *v18;
  double v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBPrivateMediaIntentData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v18, a2, v19) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v18, 0, 0);
        goto LABEL_27;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addInternalSignal:", v18);
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setPegasusMetaData:", v18);
LABEL_27:

    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INPrivateUpdateMediaAffinityIntentData *INIntentSlotValueTransformFromPrivateUpdateMediaAffinityIntentData(void *a1)
{
  id v1;
  INPrivateUpdateMediaAffinityIntentData *v2;
  INPrivateMediaIntentData *v3;
  void *v4;
  void *v5;
  void *v6;
  INPrivateUpdateMediaAffinityIntentData *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INPrivateUpdateMediaAffinityIntentData alloc];
    objc_msgSend(v1, "privateMediaIntentData");
    v3 = (INPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromPrivateMediaIntentData(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "internalSignals");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "pegasusMetaData");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = -[INPrivateUpdateMediaAffinityIntentData initWithPrivateMediaIntentData:internalSignals:pegasusMetaData:](v2, "initWithPrivateMediaIntentData:internalSignals:pegasusMetaData:", v4, v5, v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBPrivateUpdateMediaAffinityIntentData *INIntentSlotValueTransformToPrivateUpdateMediaAffinityIntentData(void *a1)
{
  id v1;
  _INPBPrivateUpdateMediaAffinityIntentData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPrivateUpdateMediaAffinityIntentData);
    objc_msgSend(v1, "privateMediaIntentData");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToPrivateMediaIntentData(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateUpdateMediaAffinityIntentData setPrivateMediaIntentData:](v2, "setPrivateMediaIntentData:", v4);

    objc_msgSend(v1, "internalSignals");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateUpdateMediaAffinityIntentData setInternalSignals:](v2, "setInternalSignals:", v5);

    objc_msgSend(v1, "pegasusMetaData");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBPrivateUpdateMediaAffinityIntentData setPegasusMetaData:](v2, "setPegasusMetaData:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPrivateUpdateMediaAffinityIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPrivateUpdateMediaAffinityIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateUpdateMediaAffinityIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPrivateUpdateMediaAffinityIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateUpdateMediaAffinityIntentDataFromPrivateUpdateMediaAffinityIntentData(void *a1)
{
  return a1;
}

BOOL INSpeakerIDConfidenceHasBackingType(unint64_t a1)
{
  return a1 < 6;
}

unint64_t INSpeakerIDConfidenceGetBackingType(unint64_t result)
{
  if (result >= 6)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INSpeakerIDConfidenceGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INSpeakerIDConfidenceGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return *(&off_1E2294510 + a1 - 1);
}

uint64_t INSpeakerIDConfidenceWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fullConfidence")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("highConfidence")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mediumConfidence")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ambiguousConfidence")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("noConfidence")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSpeakerIDConfidenceGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("full confidence");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("high confidence");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("medium confidence");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("ambiguous confidence");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("no confidence");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBSendAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(_INPBAnnouncement);
        if (!PBReaderPlaceMark() || (_INPBAnnouncementReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAnnouncement:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        v17 = objc_alloc_init(_INPBHomeFilter);
        if (PBReaderPlaceMark() && _INPBHomeFilterReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addRecipients:", v17, 0, 0);
LABEL_39:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_43:
        objc_msgSend(a1, "setIsReply:", v21 != 0);
        goto LABEL_44;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSharedUserID:", v17);
        goto LABEL_39;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

uint64_t _INPBSendAnnouncementIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAnnouncementRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBAnnouncementRecord);
        if (!PBReaderPlaceMark() || !_INPBAnnouncementRecordReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSentAnnouncements:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INSendAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xE)
    return 0;
  else
    return (uint64_t)*(&off_1E2294538 + a1);
}

uint64_t INSetNumericSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 9)
    return 0;
  else
    return (uint64_t)*(&off_1E22945B0 + a1);
}

uint64_t INGetSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return (uint64_t)*(&off_1E2294600 + a1);
}

BOOL _INPBSetLabeledSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUpdatedValue:", v18);
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDetail:", v18);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setOldValue:", v18);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INSetTemporalSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return (uint64_t)*(&off_1E2294640 + a1);
}

uint64_t _INPBSetBinarySettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_44;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_47:
        objc_msgSend(a1, "setOldValue:", v31);
      }
      else if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDetail:", v32);

      }
      else if ((_DWORD)v17 == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        objc_msgSend(a1, "setUpdatedValue:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INSettingMetadata *INIntentSlotValueTransformFromSettingMetadata(void *a1)
{
  id v1;
  INSettingMetadata *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  INSettingMetadata *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INSettingMetadata alloc];
    objc_msgSend(v1, "settingId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "targetDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDevice(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "targetApp");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromAppIdentifier(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INSettingMetadata initWithSettingId:targetDevice:targetApp:](v2, "initWithSettingId:targetDevice:targetApp:", v3, v5, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBSettingMetadata *INIntentSlotValueTransformToSettingMetadata(void *a1)
{
  id v1;
  _INPBSettingMetadata *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSettingMetadata);
    objc_msgSend(v1, "settingId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSettingMetadata setSettingId:](v2, "setSettingId:", v3);

    objc_msgSend(v1, "targetDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDevice(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSettingMetadata setTargetDevice:](v2, "setTargetDevice:", v5);

    objc_msgSend(v1, "targetApp");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToAppIdentifier(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSettingMetadata setTargetApp:](v2, "setTargetApp:", v7);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromSettingMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSettingMetadata(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSettingMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSettingMetadata(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSettingMetadataFromSettingMetadata(void *a1)
{
  return a1;
}

uint64_t INSetLabeledSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return (uint64_t)*(&off_1E22946A0 + a1);
}

uint64_t INBinarySettingValueHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INBinarySettingValueGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INBinarySettingValueGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INBinarySettingValueGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return *(&off_1E22946E8 + a1 - 1);
}

uint64_t INBinarySettingValueWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("on")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("off")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("toggle")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INBinarySettingValueGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("toggle");
      break;
    case 2:
      v4 = CFSTR("off");
      break;
    case 1:
      v4 = CFSTR("on");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBGetSettingResponseDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBSettingMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2))
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (PBReaderPlaceMark() && (_INPBNumericSettingValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNumericValue:", v17, 0, 0);
LABEL_42:

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_47:
        objc_msgSend(a1, "setBoundedValue:", v25);
        goto LABEL_53;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_52:
        objc_msgSend(a1, "setBinaryValue:", v32);
        goto LABEL_53;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBSettingMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLabeledValue:", v17);
        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

uint64_t _INPBDeviceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDeviceName:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setDeviceCategory:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDeviceModel:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSetTemporalSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBDateTimeRange *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOldValue:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (_INPBDateTimeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDetail:", v18);
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBDateTimeRange);
    if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
      goto LABEL_33;
    PBReaderRecallMark();
    objc_msgSend(a1, "setUpdatedValue:", v18, 0, 0);
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INSettingDevice *INIntentSlotValueTransformFromDevice(void *a1)
{
  id v1;
  INSettingDevice *v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  INSettingDevice *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INSettingDevice alloc];
    objc_msgSend(v1, "deviceName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "deviceModel");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasDeviceCategory");
    v6 = objc_msgSend(v1, "deviceCategory");

    v7 = (v6 - 1);
    if (v7 <= 0xD)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v5)
      v9 = v8;
    else
      v9 = 0;
    v10 = -[INSettingDevice initWithDeviceName:deviceModel:deviceCategory:](v2, "initWithDeviceName:deviceModel:deviceCategory:", v3, v4, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBDevice *INIntentSlotValueTransformToDevice(void *a1)
{
  id v1;
  _INPBDevice *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBDevice);
    objc_msgSend(v1, "deviceName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDevice setDeviceName:](v2, "setDeviceName:", v3);

    objc_msgSend(v1, "deviceModel");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBDevice setDeviceModel:](v2, "setDeviceModel:", v4);

    v5 = objc_msgSend(v1, "deviceCategory");
    if ((unint64_t)(v5 - 1) < 0xE)
      v6 = v5;
    else
      v6 = 0x7FFFFFFFLL;
    -[_INPBDevice setDeviceCategory:](v2, "setDeviceCategory:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromDevices(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromDevice(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToDevices(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToDevice(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedDeviceFromDevice(void *a1)
{
  return a1;
}

uint64_t INSettingActionHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INSettingActionGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INSettingActionGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INSettingActionGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return *(&off_1E22947A0 + a1 - 1);
}

uint64_t INSettingActionWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("set")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("increase")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("decrease")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSettingActionGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("decrease");
      break;
    case 2:
      v4 = CFSTR("increase");
      break;
    case 1:
      v4 = CFSTR("set");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t INSetBinarySettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return (uint64_t)*(&off_1E22947B8 + a1);
}

uint64_t _INPBSetTemporalSettingIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2))
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTimeValue:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_33:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_48:

        return 0;
      case 5u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_45:
        objc_msgSend(a1, "setAction:", v25);
        goto LABEL_46;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

BOOL _INPBSettingMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBAppIdentifier *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBAppIdentifier);
        if (!PBReaderPlaceMark() || !_INPBAppIdentifierReadFrom(v18, a2))
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetApp:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = (_INPBAppIdentifier *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSettingId:", v18);
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBDevice);
    if (!PBReaderPlaceMark() || (_INPBDeviceReadFrom(v18, a2) & 1) == 0)
      goto LABEL_33;
    PBReaderRecallMark();
    objc_msgSend(a1, "setTargetDevice:", v18, 0, 0);
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INNumericSettingValue *INIntentSlotValueTransformFromNumericSettingValue(void *a1)
{
  id v1;
  INNumericSettingValue *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  INNumericSettingValue *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INNumericSettingValue alloc];
    v3 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "value");
    objc_msgSend(v3, "numberWithDouble:");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasUnit");
    v6 = objc_msgSend(v1, "unit");

    if (v6 == 1)
      v7 = v5;
    else
      v7 = 0;
    v8 = -[INNumericSettingValue initWithValue:unit:](v2, "initWithValue:unit:", v4, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBNumericSettingValue *INIntentSlotValueTransformToNumericSettingValue(void *a1)
{
  id v1;
  _INPBNumericSettingValue *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBNumericSettingValue);
    objc_msgSend(v1, "value");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "doubleValue");
    -[_INPBNumericSettingValue setValue:](v2, "setValue:");

    v4 = objc_msgSend(v1, "unit");
    if (v4 == 1)
      v5 = 1;
    else
      v5 = 0x7FFFFFFFLL;
    -[_INPBNumericSettingValue setUnit:](v2, "setUnit:", v5);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromNumericSettingValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromNumericSettingValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToNumericSettingValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToNumericSettingValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedNumericSettingValueFromNumericSettingValue(void *a1)
{
  return a1;
}

uint64_t _INPBGetSettingIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setConfirmationValue:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v25, a2))
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSetNumericSettingIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_47;
      case 2u:
        v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2))
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_47;
      case 3u:
        v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumericValue:", v17, 0, 0);
        goto LABEL_47;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_52:
        objc_msgSend(a1, "setBoundedValue:", v25);
        goto LABEL_58;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_57:
        objc_msgSend(a1, "setAction:", v32);
        goto LABEL_58;
      case 6u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_47:

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_60:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

uint64_t _INPBNumericSettingValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(double *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0.0;
        }
        objc_msgSend(a1, "setValue:", v29);
      }
      else if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v26 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        v26 = *(_BYTE *)(a2 + *v5) ? 0 : v21;
LABEL_36:
        objc_msgSend(a1, "setUnit:", v26);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBGetSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBGetSettingResponseData *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (_INPBGetSettingResponseData *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDetail:", v17);
LABEL_25:

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBGetSettingResponseData);
    if (!PBReaderPlaceMark() || !_INPBGetSettingResponseDataReadFrom(v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addSettingResponseData:", v17, 0, 0);
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C25397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MediaRemoteLibrary()
{
  uint64_t v0;
  void *v2;

  if (MediaRemoteLibraryCore_frameworkLibrary)
    return MediaRemoteLibraryCore_frameworkLibrary;
  MediaRemoteLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = MediaRemoteLibraryCore_frameworkLibrary;
  if (!MediaRemoteLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t MediaPlayerLibrary()
{
  uint64_t v0;
  void *v2;

  if (MediaPlayerLibraryCore_frameworkLibrary)
    return MediaPlayerLibraryCore_frameworkLibrary;
  MediaPlayerLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = MediaPlayerLibraryCore_frameworkLibrary;
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id getMPMediaItemPropertyArtwork()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  v7 = getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  if (!getMPMediaItemPropertyArtworkSymbolLoc_ptr)
  {
    v1 = (void *)MediaPlayerLibrary();
    v0 = (id *)dlsym(v1, "MPMediaItemPropertyArtwork");
    v5[3] = (uint64_t)v0;
    getMPMediaItemPropertyArtworkSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

uint64_t getkMRMediaRemoteNowPlayingInfoArtworkData()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr;
  v7 = getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr;
  if (!getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr)
  {
    v1 = (void *)MediaRemoteLibrary();
    v0 = dlsym(v1, "kMRMediaRemoteNowPlayingInfoArtworkData");
    v5[3] = (uint64_t)v0;
    getkMRMediaRemoteNowPlayingInfoArtworkDataSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(_QWORD *)v0;
}

uint64_t getkMRMediaRemoteNowPlayingInfoArtworkDataWidth()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr;
  v7 = getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr;
  if (!getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr)
  {
    v1 = (void *)MediaRemoteLibrary();
    v0 = dlsym(v1, "kMRMediaRemoteNowPlayingInfoArtworkDataWidth");
    v5[3] = (uint64_t)v0;
    getkMRMediaRemoteNowPlayingInfoArtworkDataWidthSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(_QWORD *)v0;
}

uint64_t getkMRMediaRemoteNowPlayingInfoArtworkDataHeight()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr;
  v7 = getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr;
  if (!getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr)
  {
    v1 = (void *)MediaRemoteLibrary();
    v0 = dlsym(v1, "kMRMediaRemoteNowPlayingInfoArtworkDataHeight");
    v5[3] = (uint64_t)v0;
    getkMRMediaRemoteNowPlayingInfoArtworkDataHeightSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(_QWORD *)v0;
}

uint64_t _INPBSetBinarySettingIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_42:
        objc_msgSend(a1, "setBinaryValue:", v25);
        goto LABEL_43;
      case 4u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_37:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

BOOL _INPBSetNumericSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBNumericSettingValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOldValue:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUpdatedValue:", v17, 0, 0);
        goto LABEL_34;
      case 3u:
        v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (!PBReaderPlaceMark() || (_INPBNumericSettingValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_38;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMinValue:", v17, 0, 0);
        goto LABEL_34;
      case 4u:
        v17 = objc_alloc_init(_INPBNumericSettingValue);
        if (PBReaderPlaceMark() && (_INPBNumericSettingValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMaxValue:", v17, 0, 0);
LABEL_34:

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBNumericSettingValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDetail:", v17);
        goto LABEL_34;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_35;
    }
  }
}

BOOL INNumericSettingUnitHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INNumericSettingUnitGetBackingType(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INNumericSettingUnitGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1)
    return result;
  else
    return 0;
}

const __CFString *INNumericSettingUnitGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("percentage");
  else
    return CFSTR("unknown");
}

uint64_t INNumericSettingUnitWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("percentage"));
}

id INNumericSettingUnitGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("percentage"), CFSTR("percentage"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL _INPBSetLabeledSettingIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBSettingMetadata);
        if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v17, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSettingMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLabeledValue:", v17);
        goto LABEL_31;
      case 4u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (PBReaderPlaceMark() && (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

uint64_t INDeviceCategoryHasBackingType(unint64_t a1)
{
  return (a1 < 0xF) & (0x7FFEu >> a1);
}

uint64_t INDeviceCategoryGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xE)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INDeviceCategoryGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 0xD)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INDeviceCategoryGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xD)
    return CFSTR("unknown");
  else
    return off_1E22948B0[a1 - 1];
}

uint64_t INDeviceCategoryWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("phone")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pad")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("watch")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Mac")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AppleTV")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("homePod")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TVRemote")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("speaker")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("headphone")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("batteryCase")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("keyboard")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("trackpad")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mouse")) & 1) != 0)
  {
    v2 = 13;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("pencil")))
  {
    v2 = 14;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INDeviceCategoryGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("phone");
      goto LABEL_17;
    case 2:
      v4 = CFSTR("pad");
      goto LABEL_17;
    case 3:
      v4 = CFSTR("watch");
      goto LABEL_17;
    case 4:
      v4 = CFSTR("Mac");
      goto LABEL_17;
    case 5:
      v4 = CFSTR("Apple TV");
      goto LABEL_17;
    case 6:
      v4 = CFSTR("home pod");
      goto LABEL_17;
    case 7:
      v4 = CFSTR("t v remote");
      goto LABEL_17;
    case 8:
      v4 = CFSTR("speaker");
      goto LABEL_17;
    case 9:
      v4 = CFSTR("headphone");
      goto LABEL_17;
    case 10:
      v4 = CFSTR("battery case");
      goto LABEL_17;
    case 11:
      v4 = CFSTR("keyboard");
      goto LABEL_17;
    case 12:
      v4 = CFSTR("trackpad");
      goto LABEL_17;
    case 13:
      v4 = CFSTR("mouse");
      goto LABEL_17;
    case 14:
      v4 = CFSTR("pencil");
LABEL_17:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INBoundedSettingValueHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INBoundedSettingValueGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INBoundedSettingValueGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INBoundedSettingValueGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2294920[a1 - 1];
}

uint64_t INBoundedSettingValueWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("min")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("median")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("max")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INBoundedSettingValueGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("max");
      break;
    case 2:
      v4 = CFSTR("median");
      break;
    case 1:
      v4 = CFSTR("min");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

INGetSettingResponseData *INIntentSlotValueTransformFromGetSettingResponseData(void *a1)
{
  id v1;
  INGetSettingResponseData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  INGetSettingResponseData *v16;

  if (a1)
  {
    v1 = a1;
    v2 = [INGetSettingResponseData alloc];
    objc_msgSend(v1, "settingMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSettingMetadata(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "numericValue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromNumericSettingValue(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v1, "hasBoundedValue");
    v8 = objc_msgSend(v1, "boundedValue") - 1;
    if (v8 <= 2)
      v9 = v8 + 1;
    else
      v9 = 0;
    if (v7)
      v10 = v9;
    else
      v10 = 0;
    v11 = objc_msgSend(v1, "hasBinaryValue");
    v12 = objc_msgSend(v1, "binaryValue") - 1;
    if (v12 <= 2)
      v13 = v12 + 1;
    else
      v13 = 0;
    if (v11)
      v14 = v13;
    else
      v14 = 0;
    objc_msgSend(v1, "labeledValue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = -[INGetSettingResponseData initWithSettingMetadata:numericValue:boundedValue:binaryValue:labeledValue:](v2, "initWithSettingMetadata:numericValue:boundedValue:binaryValue:labeledValue:", v4, v6, v10, v14, v15);
  }
  else
  {
    v16 = 0;
  }
  return v16;
}

_INPBGetSettingResponseData *INIntentSlotValueTransformToGetSettingResponseData(void *a1)
{
  id v1;
  _INPBGetSettingResponseData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBGetSettingResponseData);
    objc_msgSend(v1, "settingMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSettingMetadata(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBGetSettingResponseData setSettingMetadata:](v2, "setSettingMetadata:", v4);

    objc_msgSend(v1, "numericValue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToNumericSettingValue(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBGetSettingResponseData setNumericValue:](v2, "setNumericValue:", v6);

    v7 = objc_msgSend(v1, "boundedValue") - 1;
    if (v7 < 3)
      v8 = (v7 + 1);
    else
      v8 = 0x7FFFFFFFLL;
    -[_INPBGetSettingResponseData setBoundedValue:](v2, "setBoundedValue:", v8);
    v9 = objc_msgSend(v1, "binaryValue") - 1;
    if (v9 < 3)
      v10 = (v9 + 1);
    else
      v10 = 0x7FFFFFFFLL;
    -[_INPBGetSettingResponseData setBinaryValue:](v2, "setBinaryValue:", v10);
    objc_msgSend(v1, "labeledValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBGetSettingResponseData setLabeledValue:](v2, "setLabeledValue:", v11);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromGetSettingResponseDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromGetSettingResponseData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToGetSettingResponseDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToGetSettingResponseData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedGetSettingResponseDataFromGetSettingResponseData(void *a1)
{
  return a1;
}

BOOL _INPBSaveParkingLocationIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBLocation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingLocation:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingNote:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBDeleteParkingLocationIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBLocation *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingLocation:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingNote:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INDeleteParkingLocationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294938[a1];
}

uint64_t _INPBDeleteParkingLocationIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INSaveParkingLocationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294968[a1];
}

BOOL _INPBSaveParkingLocationIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBString *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParkingNote:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBLocation);
    if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setParkingLocation:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBReadAnnouncementIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAnnouncementRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBAnnouncementRecord);
        if (!PBReaderPlaceMark() || !_INPBAnnouncementRecordReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAnnouncementRecords:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBReadAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(_INPBIntentMetadata);
          if (PBReaderPlaceMark() && (_INPBIntentMetadataReadFrom(v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
            goto LABEL_32;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_41;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_44;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_44:
          objc_msgSend(a1, "setReadType:", v25);
          continue;
        case 3u:
          PBReaderReadString();
          v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setStartAnnouncementIdentifier:", v17);
LABEL_32:

          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_46;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          v32 = 0;
          goto LABEL_49;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      v32 = *(_BYTE *)(a2 + *v5) ? 0 : v28;
LABEL_49:
      objc_msgSend(a1, "setUserNotificationType:", v32);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INReadAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294998[a1];
}

INAnnouncement *INIntentSlotValueTransformFromAnnouncement(void *a1)
{
  id v1;
  INAnnouncement *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INAnnouncement *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INAnnouncement alloc];
    objc_msgSend(v1, "speechDataURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "speechDataTranscription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = -[INAnnouncement initWithSpeechDataURL:identifier:speechDataTranscription:](v2, "initWithSpeechDataURL:identifier:speechDataTranscription:", v4, v5, v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBAnnouncement *INIntentSlotValueTransformToAnnouncement(void *a1)
{
  id v1;
  _INPBAnnouncement *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAnnouncement);
    objc_msgSend(v1, "speechDataURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAnnouncement setSpeechDataURL:](v2, "setSpeechDataURL:", v4);

    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAnnouncement setIdentifier:](v2, "setIdentifier:", v5);

    objc_msgSend(v1, "speechDataTranscription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBAnnouncement setSpeechDataTranscription:](v2, "setSpeechDataTranscription:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAnnouncements(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAnnouncement(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAnnouncements(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAnnouncement(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAnnouncementFromAnnouncement(void *a1)
{
  return a1;
}

uint64_t _INPBAnnouncementReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBURLValue *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(_INPBURLValue);
          if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setSpeechDataURL:", v17, 0, 0);
            goto LABEL_40;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_42;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_45:
          objc_msgSend(a1, "setStartTime:", v25);
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          break;
        case 4u:
          PBReaderReadString();
          v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setIdentifier:", v17);
          goto LABEL_40;
        case 5u:
          PBReaderReadString();
          v17 = (_INPBURLValue *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSpeechDataTranscription:", v17);
LABEL_40:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_47;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          v32 = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      v32 = *(_BYTE *)(a2 + *v5) ? 0 : v28;
LABEL_50:
      objc_msgSend(a1, "setEndTime:", v32);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBOpenSettingIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDetail:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setPunchoutUrl:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBOpenSettingIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBDataString *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSearchQuery:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBSettingMetadata);
    if (!PBReaderPlaceMark() || !_INPBSettingMetadataReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setSettingMetadata:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INOpenSettingIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return off_1E22949C8[a1];
}

INPrivateSearchForMediaIntentData *INIntentSlotValueTransformFromPrivateSearchForMediaIntentData(void *a1)
{
  id v1;
  INPrivateSearchForMediaIntentData *v2;
  INPrivateMediaIntentData *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INPrivateSearchForMediaIntentData *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INPrivateSearchForMediaIntentData alloc];
    objc_msgSend(v1, "privateMediaIntentData");
    v3 = (INPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromPrivateMediaIntentData(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "audioSearchResults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMediaItemValues(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "internalSignals");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "appInferred"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "pegasusMetaData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = -[INPrivateSearchForMediaIntentData initWithPrivateMediaIntentData:audioSearchResults:internalSignals:appInferred:pegasusMetaData:](v2, "initWithPrivateMediaIntentData:audioSearchResults:internalSignals:appInferred:pegasusMetaData:", v4, v6, v7, v8, v9);
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBPrivateSearchForMediaIntentData *INIntentSlotValueTransformToPrivateSearchForMediaIntentData(void *a1)
{
  id v1;
  _INPBPrivateSearchForMediaIntentData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPrivateSearchForMediaIntentData);
    objc_msgSend(v1, "privateMediaIntentData");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToPrivateMediaIntentData(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateSearchForMediaIntentData setPrivateMediaIntentData:](v2, "setPrivateMediaIntentData:", v4);

    objc_msgSend(v1, "audioSearchResults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMediaItemValues(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateSearchForMediaIntentData setAudioSearchResults:](v2, "setAudioSearchResults:", v6);

    objc_msgSend(v1, "internalSignals");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateSearchForMediaIntentData setInternalSignals:](v2, "setInternalSignals:", v7);

    objc_msgSend(v1, "appInferred");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateSearchForMediaIntentData setAppInferred:](v2, "setAppInferred:", objc_msgSend(v8, "BOOLValue"));

    objc_msgSend(v1, "pegasusMetaData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBPrivateSearchForMediaIntentData setPegasusMetaData:](v2, "setPegasusMetaData:", v9);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPrivateSearchForMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPrivateSearchForMediaIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPrivateSearchForMediaIntentDatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPrivateSearchForMediaIntentData(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPrivateSearchForMediaIntentDataFromPrivateSearchForMediaIntentData(void *a1)
{
  return a1;
}

uint64_t _INPBPrivateSearchForMediaIntentDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBPrivateMediaIntentData *v17;
  double v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBPrivateMediaIntentData);
        if (!PBReaderPlaceMark() || (_INPBPrivateMediaIntentDataReadFrom(v17, a2, v18) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrivateMediaIntentData:", v17, 0, 0);
        goto LABEL_38;
      case 2u:
        v17 = objc_alloc_init(_INPBMediaItemValue);
        if (PBReaderPlaceMark() && _INPBMediaItemValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addAudioSearchResults:", v17, 0, 0);
LABEL_38:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addInternalSignal:", v17);
        goto LABEL_38;
      case 4u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_42:
        objc_msgSend(a1, "setAppInferred:", v22 != 0);
        goto LABEL_43;
      case 5u:
        PBReaderReadData();
        v17 = (_INPBPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPegasusMetaData:", v17);
        goto LABEL_38;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

void INDayOfWeekOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_11;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0)
      goto LABEL_9;
LABEL_17:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 6);
    v3 = v4;
    if ((a1 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_16:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
  v3 = v4;
  if ((a1 & 0x20) != 0)
    goto LABEL_17;
LABEL_9:
  if ((a1 & 0x40) != 0)
  {
LABEL_10:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 7);
    v3 = v4;
  }
LABEL_11:

}

unint64_t INDayOfWeekOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        result = (result >> 1) & 1;
        break;
      case 3:
        result = (result >> 2) & 1;
        break;
      case 4:
        result = (result >> 3) & 1;
        break;
      case 5:
        result = (result >> 4) & 1;
        break;
      case 6:
        result = (result >> 5) & 1;
        break;
      case 7:
        result = (result >> 6) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INDayOfWeekOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      case 5:
        v2 |= 0x10uLL;
        break;
      case 6:
        v2 |= 0x20uLL;
        break;
      case 7:
        v2 |= 0x40uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INDayOfWeekOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      case 5:
        v2 &= ~0x10uLL;
        break;
      case 6:
        v2 &= ~0x20uLL;
        break;
      case 7:
        v2 &= ~0x40uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INDayOfWeekOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("monday"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("tuesday"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", CFSTR("wednesday"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("thursday"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    objc_msgSend(v3, "addObject:", CFSTR("saturday"));
    if ((v1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("friday"));
  if ((v1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v1 & 0x40) != 0)
LABEL_9:
    objc_msgSend(v3, "addObject:", CFSTR("sunday"));
LABEL_10:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INDayOfWeekOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("monday"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("tuesday")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("wednesday")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("thursday")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("friday")))
          v3 |= 0x10uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("saturday")))
          v3 |= 0x20uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sunday")))
          v3 |= 0x40uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INDayOfWeekOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_12;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("monday"), CFSTR("monday"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("tuesday"), CFSTR("tuesday"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  INLocalizedStringWithLocalizer(CFSTR("wednesday"), CFSTR("wednesday"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  INLocalizedStringWithLocalizer(CFSTR("thursday"), CFSTR("thursday"), v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v11);

  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    INLocalizedStringWithLocalizer(CFSTR("saturday"), CFSTR("saturday"), v3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v13);

    if ((a1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  INLocalizedStringWithLocalizer(CFSTR("friday"), CFSTR("friday"), v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v12);

  if ((a1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((a1 & 0x40) != 0)
  {
LABEL_9:
    INLocalizedStringWithLocalizer(CFSTR("sunday"), CFSTR("sunday"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_10:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_12:
  return v6;
}

void INShortcutAvailabilityOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_11;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, _QWORD))v3 + 2))(v3, 0);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 1);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0)
      goto LABEL_9;
LABEL_17:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
    v3 = v4;
    if ((a1 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_16:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  v3 = v4;
  if ((a1 & 0x20) != 0)
    goto LABEL_17;
LABEL_9:
  if ((a1 & 0x40) != 0)
  {
LABEL_10:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 6);
    v3 = v4;
  }
LABEL_11:

}

unint64_t INShortcutAvailabilityOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result &= 1u;
        break;
      case 1:
        result = (result >> 1) & 1;
        break;
      case 2:
        result = (result >> 2) & 1;
        break;
      case 3:
        result = (result >> 3) & 1;
        break;
      case 4:
        result = (result >> 4) & 1;
        break;
      case 5:
        result = (result >> 5) & 1;
        break;
      case 6:
        result = (result >> 6) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INShortcutAvailabilityOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 0:
        v2 |= 1uLL;
        break;
      case 1:
        v2 |= 2uLL;
        break;
      case 2:
        v2 |= 4uLL;
        break;
      case 3:
        v2 |= 8uLL;
        break;
      case 4:
        v2 |= 0x10uLL;
        break;
      case 5:
        v2 |= 0x20uLL;
        break;
      case 6:
        v2 |= 0x40uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INShortcutAvailabilityOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 0:
        v2 &= ~1uLL;
        break;
      case 1:
        v2 &= ~2uLL;
        break;
      case 2:
        v2 &= ~4uLL;
        break;
      case 3:
        v2 &= ~8uLL;
        break;
      case 4:
        v2 &= ~0x10uLL;
        break;
      case 5:
        v2 &= ~0x20uLL;
        break;
      case 6:
        v2 &= ~0x40uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INShortcutAvailabilityOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("sleepMindfulness"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("sleepJournaling"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", CFSTR("sleepMusic"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("sleepPodcasts"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    objc_msgSend(v3, "addObject:", CFSTR("sleepWrapUpYourDay"));
    if ((v1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("sleepReading"));
  if ((v1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v1 & 0x40) != 0)
LABEL_9:
    objc_msgSend(v3, "addObject:", CFSTR("sleepYogaAndStretching"));
LABEL_10:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INShortcutAvailabilityOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("sleepMindfulness"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sleepJournaling")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sleepMusic")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sleepPodcasts")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sleepReading")))
          v3 |= 0x10uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sleepWrapUpYourDay")))
          v3 |= 0x20uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sleepYogaAndStretching")))
          v3 |= 0x40uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INShortcutAvailabilityOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_12;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("sleep mindfulness"), CFSTR("sleep mindfulness"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("sleep journaling"), CFSTR("sleep journaling"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  INLocalizedStringWithLocalizer(CFSTR("sleep music"), CFSTR("sleep music"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  INLocalizedStringWithLocalizer(CFSTR("sleep podcasts"), CFSTR("sleep podcasts"), v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v11);

  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    INLocalizedStringWithLocalizer(CFSTR("sleep wrap up your day"), CFSTR("sleep wrap up your day"), v3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v13);

    if ((a1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  INLocalizedStringWithLocalizer(CFSTR("sleep reading"), CFSTR("sleep reading"), v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v12);

  if ((a1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((a1 & 0x40) != 0)
  {
LABEL_9:
    INLocalizedStringWithLocalizer(CFSTR("sleep yoga and stretching"), CFSTR("sleep yoga and stretching"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_10:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_12:
  return v6;
}

uint64_t _INPBAnnouncementRecordReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  _INPBHomeFilter *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v23 = objc_alloc_init(_INPBHomeFilter);
        if (!PBReaderPlaceMark() || (_INPBHomeFilterReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginator:", v23, 0, 0);
      }
      else
      {
        if ((_DWORD)v19 != 2)
        {
          if ((_DWORD)v19 == 3)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
            {
              v22 = *(double *)(*(_QWORD *)(a2 + *v7) + v21);
              *(_QWORD *)(a2 + v20) = v21 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + v16) = 1;
              v22 = 0.0;
            }
            objc_msgSend(a1, "setDuration:", v22);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v23 = (_INPBHomeFilter *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v23);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INAnnouncementRecord *INIntentSlotValueTransformFromAnnouncementRecord(void *a1)
{
  id v1;
  INAnnouncementRecord *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  INAnnouncementRecord *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INAnnouncementRecord alloc];
    objc_msgSend(v1, "originator");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromHomeFilter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "duration");
    v8 = v7;

    objc_msgSend(v6, "numberWithDouble:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INAnnouncementRecord initWithOriginator:identifier:duration:](v2, "initWithOriginator:identifier:duration:", v4, v5, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBAnnouncementRecord *INIntentSlotValueTransformToAnnouncementRecord(void *a1)
{
  id v1;
  _INPBAnnouncementRecord *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAnnouncementRecord);
    objc_msgSend(v1, "originator");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToHomeFilter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAnnouncementRecord setOriginator:](v2, "setOriginator:", v4);

    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAnnouncementRecord setIdentifier:](v2, "setIdentifier:", v5);

    objc_msgSend(v1, "duration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "doubleValue");
    -[_INPBAnnouncementRecord setDuration:](v2, "setDuration:");

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAnnouncementRecords(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAnnouncementRecord(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAnnouncementRecords(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAnnouncementRecord(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAnnouncementRecordFromAnnouncementRecord(void *a1)
{
  return a1;
}

uint64_t _INPBStopAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBStopAnnouncementIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAnnouncementRecord *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBAnnouncementRecord);
        if (!PBReaderPlaceMark() || !_INPBAnnouncementRecordReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addStoppedAnnouncementRecords:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INStopAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294A10[a1];
}

INWholeHouseAudioMetadata *INIntentSlotValueTransformFromWholeHouseAudioMetadata(INWholeHouseAudioMetadata *a1)
{
  INWholeHouseAudioMetadata *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  INWholeHouseAudioMetadata *v17;
  INWholeHouseAudioMetadata *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (a1)
  {
    v1 = a1;
    v17 = [INWholeHouseAudioMetadata alloc];
    -[INWholeHouseAudioMetadata speakerNames](v1, "speakerNames");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v26);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata speakerRooms](v1, "speakerRooms");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v25);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata permanentNames](v1, "permanentNames");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v24);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata intentSpeakerNames](v1, "intentSpeakerNames");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v23);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata intentSpeakerRooms](v1, "intentSpeakerRooms");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v22);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata intentDestinationSpeakers](v1, "intentDestinationSpeakers");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v21);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata intentPermanentNames](v1, "intentPermanentNames");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v20);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata spokenEntityTypes](v1, "spokenEntityTypes");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v19);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[INWholeHouseAudioMetadata spokenEntityNames](v1, "spokenEntityNames");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v16);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[INWholeHouseAudioMetadata numberOfHomeAutomationWords](v1, "numberOfHomeAutomationWords"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INWholeHouseAudioMetadata isAllSpeakers](v1, "isAllSpeakers"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INWholeHouseAudioMetadata isPauseOrStop](v1, "isPauseOrStop"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INWholeHouseAudioMetadata isWholeHouseAudioCommand](v1, "isWholeHouseAudioCommand"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INWholeHouseAudioMetadata isInHere](v1, "isInHere"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INWholeHouseAudioMetadata hasExcept](v1, "hasExcept"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1E0CB37E8];
    v9 = -[INWholeHouseAudioMetadata isParticipatingSpeaker](v1, "isParticipatingSpeaker");

    objc_msgSend(v8, "numberWithBool:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[INWholeHouseAudioMetadata initWithSpeakerNames:speakerRooms:permanentNames:intentSpeakerNames:intentSpeakerRooms:intentDestinationSpeakers:intentPermanentNames:spokenEntityTypes:spokenEntityNames:numberOfHomeAutomationWords:isAllSpeakers:isPauseOrStop:isWholeHouseAudioCommand:isInHere:hasExcept:isParticipatingSpeaker:](v17, "initWithSpeakerNames:speakerRooms:permanentNames:intentSpeakerNames:intentSpeakerRooms:intentDestinationSpeakers:intentPermanentNames:spokenEntityTypes:spokenEntityNames:numberOfHomeAutomationWords:isAllSpeakers:isPauseOrStop:isWholeHouseAudioCommand:isInHere:hasExcept:isParticipatingSpeaker:", v31, v30, v29, v28, v15, v14, v27, v13, v2, v3, v12, v4, v5, v6, v7,
            v10);

    a1 = v18;
  }
  return a1;
}

_INPBWholeHouseAudioMetadata *INIntentSlotValueTransformToWholeHouseAudioMetadata(void *a1)
{
  id v1;
  _INPBWholeHouseAudioMetadata *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBWholeHouseAudioMetadata);
    objc_msgSend(v1, "speakerNames");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setSpeakerNames:](v2, "setSpeakerNames:", v4);

    objc_msgSend(v1, "speakerRooms");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setSpeakerRooms:](v2, "setSpeakerRooms:", v6);

    objc_msgSend(v1, "permanentNames");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setPermanentNames:](v2, "setPermanentNames:", v8);

    objc_msgSend(v1, "intentSpeakerNames");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIntentSpeakerNames:](v2, "setIntentSpeakerNames:", v10);

    objc_msgSend(v1, "intentSpeakerRooms");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIntentSpeakerRooms:](v2, "setIntentSpeakerRooms:", v12);

    objc_msgSend(v1, "intentDestinationSpeakers");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIntentDestinationSpeakers:](v2, "setIntentDestinationSpeakers:", v14);

    objc_msgSend(v1, "intentPermanentNames");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIntentPermanentNames:](v2, "setIntentPermanentNames:", v16);

    objc_msgSend(v1, "spokenEntityTypes");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setSpokenEntityTypes:](v2, "setSpokenEntityTypes:", v18);

    objc_msgSend(v1, "spokenEntityNames");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setSpokenEntityNames:](v2, "setSpokenEntityNames:", v20);

    objc_msgSend(v1, "numberOfHomeAutomationWords");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setNumberOfHomeAutomationWords:](v2, "setNumberOfHomeAutomationWords:", objc_msgSend(v21, "intValue"));

    objc_msgSend(v1, "isAllSpeakers");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIsAllSpeakers:](v2, "setIsAllSpeakers:", objc_msgSend(v22, "BOOLValue"));

    objc_msgSend(v1, "isPauseOrStop");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIsPauseOrStop:](v2, "setIsPauseOrStop:", objc_msgSend(v23, "BOOLValue"));

    objc_msgSend(v1, "isWholeHouseAudioCommand");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIsWholeHouseAudioCommand:](v2, "setIsWholeHouseAudioCommand:", objc_msgSend(v24, "BOOLValue"));

    objc_msgSend(v1, "isInHere");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setIsInHere:](v2, "setIsInHere:", objc_msgSend(v25, "BOOLValue"));

    objc_msgSend(v1, "hasExcept");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWholeHouseAudioMetadata setHasExcept:](v2, "setHasExcept:", objc_msgSend(v26, "BOOLValue"));

    objc_msgSend(v1, "isParticipatingSpeaker");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBWholeHouseAudioMetadata setIsParticipatingSpeaker:](v2, "setIsParticipatingSpeaker:", objc_msgSend(v27, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromWholeHouseAudioMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromWholeHouseAudioMetadata(*(INWholeHouseAudioMetadata **)(*((_QWORD *)&v11 + 1)
                                                                                              + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWholeHouseAudioMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToWholeHouseAudioMetadata(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedWholeHouseAudioMetadataFromWholeHouseAudioMetadata(void *a1)
{
  return a1;
}

uint64_t _INPBWholeHouseAudioMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBString *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSpeakerNames:", v17, 0, 0);
        goto LABEL_57;
      case 2u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSpeakerRooms:", v17, 0, 0);
        goto LABEL_57;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPermanentNames:", v17, 0, 0);
        goto LABEL_57;
      case 4u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentSpeakerNames:", v17, 0, 0);
        goto LABEL_57;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentSpeakerRooms:", v17, 0, 0);
        goto LABEL_57;
      case 6u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentDestinationSpeakers:", v17, 0, 0);
        goto LABEL_57;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentPermanentNames:", v17, 0, 0);
        goto LABEL_57;
      case 8u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_139;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSpokenEntityType:", v17, 0, 0);
        goto LABEL_57;
      case 9u:
        v17 = objc_alloc_init(_INPBString);
        v62 = 0;
        v63 = 0;
        if (PBReaderPlaceMark() && _INPBStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addSpokenEntityName:", v17, 0, 0);
LABEL_57:

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_139:

        return 0;
      case 0xAu:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_113:
        objc_msgSend(a1, "setNumberOfHomeAutomationWords:", v25, v62, v63);
        goto LABEL_58;
      case 0xBu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_117:
        objc_msgSend(a1, "setIsAllSpeakers:", v28 != 0);
        goto LABEL_58;
      case 0xCu:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_121:
        objc_msgSend(a1, "setIsPauseOrStop:", v34 != 0);
        goto LABEL_58;
      case 0xDu:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v40 = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v40 = 0;
LABEL_125:
        objc_msgSend(a1, "setIsWholeHouseAudioCommand:", v40 != 0);
        goto LABEL_58;
      case 0xEu:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
LABEL_129:
        objc_msgSend(a1, "setIsInHere:", v46 != 0);
        goto LABEL_58;
      case 0xFu:
        v50 = 0;
        v51 = 0;
        v52 = 0;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 1;
            v52 |= (unint64_t)(v55 & 0x7F) << v50;
            if (v55 < 0)
            {
              v50 += 7;
              v14 = v51++ >= 9;
              if (v14)
              {
                v52 = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v52 = 0;
LABEL_133:
        objc_msgSend(a1, "setHasExcept:", v52 != 0);
        goto LABEL_58;
      case 0x10u:
        v56 = 0;
        v57 = 0;
        v58 = 0;
        while (2)
        {
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v60 + 1;
            v58 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v14 = v57++ >= 9;
              if (v14)
              {
                v58 = 0;
                goto LABEL_137;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
LABEL_137:
        objc_msgSend(a1, "setIsParticipatingSpeaker:", v58 != 0, v62, v63);
        goto LABEL_58;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

BOOL INMediaConfidenceLevelHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

uint64_t INMediaConfidenceLevelGetBackingType(unint64_t a1)
{
  if (a1 >= 4)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1);
}

uint64_t INMediaConfidenceLevelGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 3;
  v3 = 2;
  if (a2 != 20)
    v3 = a2 == 10;
  if (a2 != 30)
    v2 = v3;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INMediaConfidenceLevelGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2294A40[a1 - 1];
}

uint64_t INMediaConfidenceLevelWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("low")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("medium")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("high")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaConfidenceLevelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("high");
      break;
    case 2:
      v4 = CFSTR("medium");
      break;
    case 1:
      v4 = CFSTR("low");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBPlayAnnouncementSoundIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSoundType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INPlayAnnouncementSoundIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294A58[a1];
}

BOOL _INPBPlayAnnouncementSoundIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL INAnnouncementSoundTypeHasBackingType(uint64_t a1)
{
  return a1 == 1;
}

uint64_t INAnnouncementSoundTypeGetBackingType(uint64_t a1)
{
  if (a1 == 1)
    return 1;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INAnnouncementSoundTypeGetFacadeType(uint64_t result, int a2)
{
  if (a2 == 1)
    return result;
  else
    return 0;
}

const __CFString *INAnnouncementSoundTypeGetName(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("announcementSent");
  else
    return CFSTR("unknown");
}

uint64_t INAnnouncementSoundTypeWithString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("announcementSent"));
}

id INAnnouncementSoundTypeGetLocalizedName(uint64_t a1, void *a2)
{
  if (a1 != 1)
    return 0;
  INLocalizedStringWithLocalizer(CFSTR("announcement sent"), CFSTR("announcement sent"), a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

INConnectedCall *INIntentSlotValueTransformFromConnectedCall(INConnectedCall *a1)
{
  INConnectedCall *v1;
  INConnectedCall *v2;
  int v3;
  int v4;
  uint64_t v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INConnectedCall alloc];
    v3 = -[INConnectedCall hasAudioRoute](v1, "hasAudioRoute");
    v4 = -[INConnectedCall audioRoute](v1, "audioRoute");

    if (v3 && (v4 - 2) <= 2)
      v5 = qword_18C311CB0[v4 - 2];
    else
      v5 = 0;
    a1 = -[INConnectedCall initWithAudioRoute:](v2, "initWithAudioRoute:", v5);
  }
  return a1;
}

_INPBConnectedCall *INIntentSlotValueTransformToConnectedCall(void *a1)
{
  id v1;
  _INPBConnectedCall *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBConnectedCall);
    v3 = objc_msgSend(v1, "audioRoute");

    if (v3 == 1)
      v4 = 2;
    else
      v4 = 0x7FFFFFFF;
    if (v3 == 2)
      v4 = 3;
    if (v3 == 1000)
      v5 = 4;
    else
      v5 = v4;
    -[_INPBConnectedCall setAudioRoute:](v2, "setAudioRoute:", v5);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromConnectedCalls(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromConnectedCall(*(INConnectedCall **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToConnectedCalls(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToConnectedCall(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedConnectedCallFromConnectedCall(void *a1)
{
  return a1;
}

uint64_t _INPBConnectedCallReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setAudioRoute:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBAlarmSearchReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  _INPBDateTimeRangeValue *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_65;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_68;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_68:
        objc_msgSend(a1, "setAlarmReferenceType:", v23);
        goto LABEL_87;
      case 2u:
        PBReaderReadString();
        v25 = (_INPBDateTimeRangeValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v25);
        goto LABEL_35;
      case 3u:
        v25 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v25, a2) & 1) == 0)
          goto LABEL_89;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTime:", v25, 0, 0);
        goto LABEL_35;
      case 4u:
        v25 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLabel:", v25, 0, 0);
LABEL_35:

LABEL_87:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_89:

        return 0;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_73:
        objc_msgSend(a1, "setAlarmSearchStatus:", v32);
        goto LABEL_87;
      case 6u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_77:
        objc_msgSend(a1, "setIncludeSleepAlarm:", v35 != 0);
        goto LABEL_87;
      case 7u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
        else
          v45 = v41;
LABEL_82:
        objc_msgSend(a1, "setPeriod:", v45);
        goto LABEL_87;
      case 8u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v48 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_86:
        objc_msgSend(a1, "setIsMeridianInferred:", v48 != 0);
        goto LABEL_87;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_87;
    }
  }
}

__CFString *INDeleteAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294B28[a1];
}

INAlarm *INIntentSlotValueTransformFromAlarm(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  INAlarm *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  INAlarm *v13;
  void *v14;
  INAlarm *v15;
  void *v17;
  void *v18;
  uint64_t v19;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v19 = 0;
    if (objc_msgSend(v1, "alarmRepeatScheduleOptionsCount"))
    {
      v3 = 0;
      do
        INAlarmRepeatScheduleOptionsAddBackingType(&v19, objc_msgSend(v2, "alarmRepeatScheduleOptionsAtIndex:", v3++));
      while (v3 < objc_msgSend(v2, "alarmRepeatScheduleOptionsCount"));
    }
    v4 = [INAlarm alloc];
    objc_msgSend(v2, "identifier");
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateTime");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v18);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "label");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v17);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v2, "enabled"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v2, "firing"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v19;
    objc_msgSend(v2, "sleepAlarmAttribute");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSleepAlarmAttribute(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v4;
    v14 = (void *)v5;
    v15 = -[INAlarm initWithIdentifier:dateTime:label:enabled:firing:alarmRepeatScheduleOptions:sleepAlarmAttribute:](v13, "initWithIdentifier:dateTime:label:enabled:firing:alarmRepeatScheduleOptions:sleepAlarmAttribute:", v5, v6, v7, v8, v9, v10, v12);

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

_INPBAlarm *INIntentSlotValueTransformToAlarm(void *a1)
{
  id v1;
  _INPBAlarm *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _INPBAlarm *v11;
  void *v12;
  void *v13;
  _QWORD v15[4];
  _INPBAlarm *v16;

  if (!a1)
    return (_INPBAlarm *)0;
  v1 = a1;
  v2 = objc_alloc_init(_INPBAlarm);
  objc_msgSend(v1, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBAlarm setIdentifier:](v2, "setIdentifier:", v3);

  objc_msgSend(v1, "dateTime");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformToDateTime(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBAlarm setDateTime:](v2, "setDateTime:", v5);

  objc_msgSend(v1, "label");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformToDataString(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBAlarm setLabel:](v2, "setLabel:", v7);

  objc_msgSend(v1, "enabled");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBAlarm setEnabled:](v2, "setEnabled:", objc_msgSend(v8, "BOOLValue"));

  objc_msgSend(v1, "firing");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBAlarm setFiring:](v2, "setFiring:", objc_msgSend(v9, "BOOLValue"));

  v10 = objc_msgSend(v1, "alarmRepeatScheduleOptions");
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __INIntentSlotValueTransformToAlarm_block_invoke;
  v15[3] = &unk_1E2295130;
  v11 = v2;
  v16 = v11;
  INAlarmRepeatScheduleOptionsEnumerateBackingTypes(v10, v15);
  objc_msgSend(v1, "sleepAlarmAttribute");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  INIntentSlotValueTransformToSleepAlarmAttribute(v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBAlarm setSleepAlarmAttribute:](v11, "setSleepAlarmAttribute:", v13);

  return v11;
}

id INIntentSlotValueTransformFromAlarms(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAlarm(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAlarms(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAlarm(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAlarmFromAlarm(void *a1)
{
  return a1;
}

INAlarmSearch *INIntentSlotValueTransformFromAlarmSearch(void *a1)
{
  id v1;
  INAlarmSearch *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  INAlarmSearch *v23;
  uint64_t v25;
  void *v26;
  void *v27;

  if (a1)
  {
    v1 = a1;
    v2 = [INAlarmSearch alloc];
    v3 = objc_msgSend(v1, "hasAlarmReferenceType");
    v4 = objc_msgSend(v1, "alarmReferenceType");
    if (((v4 < 4) & v3) != 0)
      v5 = v4 + 1;
    else
      v5 = 0;
    v25 = v5;
    objc_msgSend(v1, "identifier");
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "time");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRangeValue(v7);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "label");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v1, "hasAlarmSearchStatus");
    v11 = objc_msgSend(v1, "alarmSearchStatus") - 1;
    if (v11 <= 3)
      v12 = v11 + 1;
    else
      v12 = 0;
    if (v10)
      v13 = v12;
    else
      v13 = 0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "includeSleepAlarm"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v1, "hasPeriod");
    v16 = objc_msgSend(v1, "period");
    v27 = v7;
    v17 = (void *)v6;
    if (v15 && (v18 = (v16 - 1), v18 <= 7))
      v19 = v18 + 1;
    else
      v19 = 0;
    v20 = (void *)MEMORY[0x1E0CB37E8];
    v21 = objc_msgSend(v1, "isMeridianInferred");

    objc_msgSend(v20, "numberWithBool:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[INAlarmSearch initWithAlarmReferenceType:identifier:time:label:alarmSearchStatus:includeSleepAlarm:period:isMeridianInferred:](v2, "initWithAlarmReferenceType:identifier:time:label:alarmSearchStatus:includeSleepAlarm:period:isMeridianInferred:", v25, v17, v26, v9, v13, v14, v19, v22);

  }
  else
  {
    v23 = 0;
  }
  return v23;
}

_INPBAlarmSearch *INIntentSlotValueTransformToAlarmSearch(void *a1)
{
  id v1;
  _INPBAlarmSearch *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBAlarmSearch);
    v3 = objc_msgSend(v1, "alarmReferenceType") - 1;
    if (v3 >= 4)
      v4 = 0x7FFFFFFFLL;
    else
      v4 = v3;
    -[_INPBAlarmSearch setAlarmReferenceType:](v2, "setAlarmReferenceType:", v4);
    objc_msgSend(v1, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAlarmSearch setIdentifier:](v2, "setIdentifier:", v5);

    objc_msgSend(v1, "time");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRangeValue(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAlarmSearch setTime:](v2, "setTime:", v7);

    objc_msgSend(v1, "label");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAlarmSearch setLabel:](v2, "setLabel:", v9);

    v10 = objc_msgSend(v1, "alarmSearchStatus") - 1;
    if (v10 < 4)
      v11 = (v10 + 1);
    else
      v11 = 0x7FFFFFFFLL;
    -[_INPBAlarmSearch setAlarmSearchStatus:](v2, "setAlarmSearchStatus:", v11);
    objc_msgSend(v1, "includeSleepAlarm");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAlarmSearch setIncludeSleepAlarm:](v2, "setIncludeSleepAlarm:", objc_msgSend(v12, "BOOLValue"));

    v13 = objc_msgSend(v1, "period");
    if (v13 >= 9)
      v14 = 0x7FFFFFFFLL;
    else
      v14 = v13;
    -[_INPBAlarmSearch setPeriod:](v2, "setPeriod:", v14);
    objc_msgSend(v1, "isMeridianInferred");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBAlarmSearch setIsMeridianInferred:](v2, "setIsMeridianInferred:", objc_msgSend(v15, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromAlarmSearchs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromAlarmSearch(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToAlarmSearchs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToAlarmSearch(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedAlarmSearchFromAlarmSearch(void *a1)
{
  return a1;
}

BOOL INAlarmPeriodHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INAlarmPeriodGetBackingType(unint64_t result)
{
  if (result >= 9)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INAlarmPeriodGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 7)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INAlarmPeriodGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E2294B58[a1 - 1];
}

uint64_t INAlarmPeriodWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("morning")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("afternoon")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("evening")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("night")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("noon")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("midnight")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("today")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("tomorrow")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAlarmPeriodGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("morning");
      goto LABEL_11;
    case 2:
      v4 = CFSTR("afternoon");
      goto LABEL_11;
    case 3:
      v4 = CFSTR("evening");
      goto LABEL_11;
    case 4:
      v4 = CFSTR("night");
      goto LABEL_11;
    case 5:
      v4 = CFSTR("noon");
      goto LABEL_11;
    case 6:
      v4 = CFSTR("midnight");
      goto LABEL_11;
    case 7:
      v4 = CFSTR("today");
      goto LABEL_11;
    case 8:
      v4 = CFSTR("tomorrow");
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBUpdateAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBAlarmSearch *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBAlarmSearch);
        if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v17, a2) & 1) == 0)
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmSearch:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || (_INPBAlarmReadFrom(v17, a2) & 1) == 0)
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarm:", v17, 0, 0);
        goto LABEL_42;
      case 3u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_51:
        objc_msgSend(a1, "setOperation:", v24);
        goto LABEL_43;
      case 4u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProposedTime:", v17, 0, 0);
        goto LABEL_42;
      case 5u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProposedLabel:", v17, 0, 0);
        goto LABEL_42;
      default:
        if ((v10 >> 3) != 100)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (PBReaderPlaceMark() && (_INPBIntentMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_42:

          goto LABEL_43;
        }
LABEL_53:

        return 0;
    }
  }
}

uint64_t _INPBCreateAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBDateTimeRange *v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_53;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_56:
        objc_msgSend(a1, "setRelativeOffsetInMinutes:", v24, v39, v40);
        goto LABEL_67;
      case 2u:
        v25 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v25, a2) & 1) == 0)
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTime:", v25, 0, 0);
        goto LABEL_36;
      case 3u:
        v25 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v25, a2))
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLabel:", v25, 0, 0);
        goto LABEL_36;
      case 4u:
        if (v16 == 2)
        {
          v39 = 0;
          v40 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            while (1)
            {
              v30 = *v3;
              v31 = *(_QWORD *)(a2 + v30);
              if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
                break;
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
              *(_QWORD *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v14 = v28++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_49;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (1)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
              break;
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_66;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_66:
          PBRepeatedInt32Add();
        }
        goto LABEL_67;
      default:
        if ((v10 >> 3) != 100)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          goto LABEL_67;
        }
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (PBReaderPlaceMark() && (_INPBIntentMetadataReadFrom(v25, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
LABEL_36:

LABEL_67:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_70:

        return 0;
    }
  }
}

BOOL _INPBSnoozeAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAlarm *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 100)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAlarms:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INChangeAlarmStatusOperationHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INChangeAlarmStatusOperationGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INChangeAlarmStatusOperationGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INChangeAlarmStatusOperationGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2294BD8[a1 - 1];
}

uint64_t INChangeAlarmStatusOperationWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("enable")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("disable")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("dismiss")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INChangeAlarmStatusOperationGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("dismiss");
      break;
    case 2:
      v4 = CFSTR("disable");
      break;
    case 1:
      v4 = CFSTR("enable");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

BOOL _INPBUpdateAlarmIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAlarm *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addConflictAlarms:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBAlarm);
    if (!PBReaderPlaceMark() || (_INPBAlarmReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setUpdatedAlarm:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBChangeAlarmStatusIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2)
        break;
      if ((_DWORD)v17 == 100)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_50:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_40:

        goto LABEL_48;
      }
      if ((_DWORD)v17 != 3)
      {
LABEL_41:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
      }
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_44;
        v19 += 7;
        v14 = v20++ >= 9;
        if (v14)
        {
          v25 = 0;
          goto LABEL_47;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        v25 = 0;
      else
        v25 = v21;
LABEL_47:
      objc_msgSend(a1, "setOperation:", v25, v27, v28);
LABEL_48:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 1)
    {
      v18 = objc_alloc_init(_INPBAlarmSearch);
      v27 = 0;
      v28 = 0;
      if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v18, a2) & 1) == 0)
        goto LABEL_50;
      PBReaderRecallMark();
      objc_msgSend(a1, "setAlarmSearch:", v18);
    }
    else
    {
      if ((_DWORD)v17 != 2)
        goto LABEL_41;
      v18 = objc_alloc_init(_INPBAlarm);
      v27 = 0;
      v28 = 0;
      if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v18, a2))
        goto LABEL_50;
      PBReaderRecallMark();
      if (v18)
        objc_msgSend(a1, "addAlarms:", v18, 0, 0);
    }
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBDeleteAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 100)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBAlarmSearch);
        if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v18, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmSearch:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBAlarm);
    if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v18, a2))
      goto LABEL_36;
    PBReaderRecallMark();
    if (v18)
      objc_msgSend(a1, "addAlarms:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INCreateAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294C08[a1];
}

__CFString *INSnoozeAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294C38[a1];
}

BOOL INUpdateAlarmOperationHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INUpdateAlarmOperationGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INUpdateAlarmOperationGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INUpdateAlarmOperationGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("updateTime");
  if (a1 == 1)
    return CFSTR("updateLabel");
  else
    return v1;
}

uint64_t INUpdateAlarmOperationWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("updateLabel")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("updateTime")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INUpdateAlarmOperationGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("update time");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("update label");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL INAlarmReferenceTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INAlarmReferenceTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 4)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INAlarmReferenceTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 4) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INAlarmReferenceTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2294C68[a1 - 1];
}

uint64_t INAlarmReferenceTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("default")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("this")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("next")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("all")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAlarmReferenceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("default");
      goto LABEL_7;
    case 2:
      v4 = CFSTR("this");
      goto LABEL_7;
    case 3:
      v4 = CFSTR("next");
      goto LABEL_7;
    case 4:
      v4 = CFSTR("all");
LABEL_7:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBCreateAlarmIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBAlarm *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || (_INPBAlarmReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedAlarm:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSuccessCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSnoozeAlarmIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBChangeAlarmStatusIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAlarm *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBAlarm);
        if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addModifiedAlarms:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBAlarmReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBDateTime *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = (_INPBDateTime *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v18);
        goto LABEL_58;
      case 2u:
        v18 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_80;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v18, 0, 0);
        goto LABEL_58;
      case 3u:
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_80;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLabel:", v18, 0, 0);
        goto LABEL_58;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_62:
        objc_msgSend(a1, "setEnabled:", v21 != 0, v44, v45);
        goto LABEL_77;
      case 5u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_66:
        objc_msgSend(a1, "setFiring:", v27 != 0);
        goto LABEL_77;
      case 6u:
        if (v16 == 2)
        {
          v44 = 0;
          v45 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            while (1)
            {
              v35 = *v3;
              v36 = *(_QWORD *)(a2 + v35);
              if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
                break;
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_54;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (1)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
              break;
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_76;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
        goto LABEL_77;
      case 7u:
        v18 = objc_alloc_init(_INPBSleepAlarmAttribute);
        if (PBReaderPlaceMark() && (_INPBSleepAlarmAttributeReadFrom(v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSleepAlarmAttribute:", v18, 0, 0);
LABEL_58:

LABEL_77:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_80:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_77;
    }
  }
}

__CFString *INChangeAlarmStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294CE0[a1];
}

__CFString *INUpdateAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294D10[a1];
}

BOOL _INPBDeleteAlarmIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t INCreateAlarmSuccessCodeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCreateAlarmSuccessCodeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INCreateAlarmSuccessCodeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 3) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INCreateAlarmSuccessCodeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2294D40[a1 - 1];
}

uint64_t INCreateAlarmSuccessCodeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("alarmCreated")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("duplicateAlarmExists")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("duplicateAlarmEnabled")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCreateAlarmSuccessCodeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("duplicate alarm enabled");
      break;
    case 2:
      v4 = CFSTR("duplicate alarm exists");
      break;
    case 1:
      v4 = CFSTR("alarm created");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBSleepAlarmAttributeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _INPBDateTime *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBedtime:", v23, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        objc_msgSend(a1, "setOverride:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C283A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C283B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C283E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C283EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C283FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18C284204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLNMetadataProviderClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!LinkServicesLibraryCore_frameworkLibrary)
  {
    LinkServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!LinkServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("LNMetadataProvider");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getLNMetadataProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

INSleepAlarmAttribute *INIntentSlotValueTransformFromSleepAlarmAttribute(void *a1)
{
  id v1;
  INSleepAlarmAttribute *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  INSleepAlarmAttribute *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INSleepAlarmAttribute alloc];
    objc_msgSend(v1, "bedtime");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB37E8];
    v6 = objc_msgSend(v1, "override");

    objc_msgSend(v5, "numberWithBool:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INSleepAlarmAttribute initWithBedtime:override:](v2, "initWithBedtime:override:", v4, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBSleepAlarmAttribute *INIntentSlotValueTransformToSleepAlarmAttribute(void *a1)
{
  id v1;
  _INPBSleepAlarmAttribute *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSleepAlarmAttribute);
    objc_msgSend(v1, "bedtime");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSleepAlarmAttribute setBedtime:](v2, "setBedtime:", v4);

    objc_msgSend(v1, "override");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBSleepAlarmAttribute setOverride:](v2, "setOverride:", objc_msgSend(v5, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromSleepAlarmAttributes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSleepAlarmAttribute(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSleepAlarmAttributes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSleepAlarmAttribute(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSleepAlarmAttributeFromSleepAlarmAttribute(void *a1)
{
  return a1;
}

void INAlarmRepeatScheduleOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_12;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, _QWORD))v3 + 2))(v3, 0);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 1);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  v3 = v4;
  if ((a1 & 0x20) == 0)
  {
LABEL_9:
    if ((a1 & 0x40) == 0)
      goto LABEL_10;
LABEL_19:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 6);
    v3 = v4;
    if ((a1 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_18:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
  v3 = v4;
  if ((a1 & 0x40) != 0)
    goto LABEL_19;
LABEL_10:
  if ((a1 & 0x80) != 0)
  {
LABEL_11:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 7);
    v3 = v4;
  }
LABEL_12:

}

unint64_t INAlarmRepeatScheduleOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result &= 1u;
        break;
      case 1:
        result = (result >> 1) & 1;
        break;
      case 2:
        result = (result >> 2) & 1;
        break;
      case 3:
        result = (result >> 3) & 1;
        break;
      case 4:
        result = (result >> 4) & 1;
        break;
      case 5:
        result = (result >> 5) & 1;
        break;
      case 6:
        result = (result >> 6) & 1;
        break;
      case 7:
        result = (result >> 7) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INAlarmRepeatScheduleOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 0:
        v2 |= 1uLL;
        break;
      case 1:
        v2 |= 2uLL;
        break;
      case 2:
        v2 |= 4uLL;
        break;
      case 3:
        v2 |= 8uLL;
        break;
      case 4:
        v2 |= 0x10uLL;
        break;
      case 5:
        v2 |= 0x20uLL;
        break;
      case 6:
        v2 |= 0x40uLL;
        break;
      case 7:
        v2 |= 0x80uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INAlarmRepeatScheduleOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 0:
        v2 &= ~1uLL;
        break;
      case 1:
        v2 &= ~2uLL;
        break;
      case 2:
        v2 &= ~4uLL;
        break;
      case 3:
        v2 &= ~8uLL;
        break;
      case 4:
        v2 &= ~0x10uLL;
        break;
      case 5:
        v2 &= ~0x20uLL;
        break;
      case 6:
        v2 &= ~0x40uLL;
        break;
      case 7:
        v2 &= ~0x80uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INAlarmRepeatScheduleOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("none"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("monday"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("tuesday"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("wednesday"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  objc_msgSend(v3, "addObject:", CFSTR("thursday"));
  if ((v1 & 0x20) == 0)
  {
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_9;
LABEL_20:
    objc_msgSend(v3, "addObject:", CFSTR("saturday"));
    if ((v1 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  objc_msgSend(v3, "addObject:", CFSTR("friday"));
  if ((v1 & 0x40) != 0)
    goto LABEL_20;
LABEL_9:
  if (v1 < 0)
LABEL_10:
    objc_msgSend(v3, "addObject:", CFSTR("sunday"));
LABEL_11:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INAlarmRepeatScheduleOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("none"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("monday")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("tuesday")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("wednesday")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("thursday")))
          v3 |= 0x10uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("friday")))
          v3 |= 0x20uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("saturday")))
          v3 |= 0x40uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("sunday")))
          v3 |= 0x80uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INAlarmRepeatScheduleOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_13;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("none"), CFSTR("none"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("monday"), CFSTR("monday"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  INLocalizedStringWithLocalizer(CFSTR("tuesday"), CFSTR("tuesday"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  INLocalizedStringWithLocalizer(CFSTR("wednesday"), CFSTR("wednesday"), v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v11);

  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  INLocalizedStringWithLocalizer(CFSTR("thursday"), CFSTR("thursday"), v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v12);

  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0)
      goto LABEL_9;
LABEL_20:
    INLocalizedStringWithLocalizer(CFSTR("saturday"), CFSTR("saturday"), v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v14);

    if ((a1 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  INLocalizedStringWithLocalizer(CFSTR("friday"), CFSTR("friday"), v3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v13);

  if ((a1 & 0x40) != 0)
    goto LABEL_20;
LABEL_9:
  if ((a1 & 0x80) != 0)
  {
LABEL_10:
    INLocalizedStringWithLocalizer(CFSTR("sunday"), CFSTR("sunday"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_11:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_13:
  return v6;
}

BOOL INAlarmSearchStatusHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INAlarmSearchStatusGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 4)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INAlarmSearchStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 3)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INAlarmSearchStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2294E58[a1 - 1];
}

uint64_t INAlarmSearchStatusWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("enabled")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("disabled")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("firing")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("snoozed")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAlarmSearchStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("enabled");
      goto LABEL_7;
    case 2:
      v4 = CFSTR("disabled");
      goto LABEL_7;
    case 3:
      v4 = CFSTR("firing");
      goto LABEL_7;
    case 4:
      v4 = CFSTR("snoozed");
LABEL_7:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBSearchAlarmIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBAlarmSearch *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v25 = objc_alloc_init(_INPBAlarmSearch);
        if (!PBReaderPlaceMark() || (_INPBAlarmSearchReadFrom(v25, a2) & 1) == 0)
          goto LABEL_50;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmSearch:", v25, 0, 0);
LABEL_40:

        goto LABEL_48;
      }
      if ((_DWORD)v17 != 2)
        goto LABEL_41;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          break;
        v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
        *(_QWORD *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0)
          goto LABEL_44;
        v18 += 7;
        v14 = v19++ >= 9;
        if (v14)
        {
          v24 = 0;
          goto LABEL_47;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        v24 = 0;
      else
        v24 = v20;
LABEL_47:
      objc_msgSend(a1, "setAlarmSearchType:", v24, v27, v28);
LABEL_48:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 3)
    {
      v25 = objc_alloc_init(_INPBAlarm);
      v27 = 0;
      v28 = 0;
      if (!PBReaderPlaceMark() || !_INPBAlarmReadFrom(v25, a2))
      {
LABEL_50:

        return 0;
      }
      PBReaderRecallMark();
      if (v25)
        objc_msgSend(a1, "addAlarms:", v25, 0, 0);
    }
    else
    {
      if ((_DWORD)v17 != 100)
      {
LABEL_41:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
      }
      v25 = objc_alloc_init(_INPBIntentMetadata);
      if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        goto LABEL_50;
      PBReaderRecallMark();
      objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
    }
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSearchAlarmIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

__CFString *INSearchAlarmIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294EA0[a1];
}

uint64_t INAlarmSearchTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INAlarmSearchTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INAlarmSearchTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INAlarmSearchTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E2294ED0[a1 - 1];
}

uint64_t INAlarmSearchTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("find")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("whenIs")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("howLongUntil")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("read")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("howMany")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAlarmSearchTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("find");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("when is");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("how long until");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("read");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("how many");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INBoatReservation *INIntentSlotValueTransformFromBoatReservation(INBoatReservation *a1)
{
  INBoatReservation *v1;
  void *v2;
  INBoatReservation *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  id v16;
  INBoatReservation *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    -[INBoatReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = [INBoatReservation alloc];
    objc_msgSend(v2, "itemReference");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v21);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "hasReservationStatus");
    v6 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v6 <= 3)
      v7 = (void *)(v6 + 1);
    else
      v7 = 0;
    if (!v5)
      v7 = 0;
    v16 = v7;
    objc_msgSend(v2, "reservationHolderName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INBoatReservation reservedSeat](v1, "reservedSeat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSeat(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INBoatReservation boatTrip](v1, "boatTrip");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromBoatTrip(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INBoatReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:boatTrip:](v3, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:boatTrip:", v23, v4, v19, v16, v15, v14, v8, v10, v12);

    a1 = v17;
  }
  return a1;
}

_INPBBoatReservation *INIntentSlotValueTransformToBoatReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBBoatReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBBoatReservation);
    -[_INPBBoatReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "reservedSeat");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSeat(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatReservation setReservedSeat:](v15, "setReservedSeat:", v17);

    objc_msgSend(v1, "boatTrip");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToBoatTrip(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBoatReservation setBoatTrip:](v15, "setBoatTrip:", v19);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromBoatReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromBoatReservation(*(INBoatReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBoatReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToBoatReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBoatReservationFromBoatReservation(void *a1)
{
  return a1;
}

BOOL _INPBBusReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBReservation *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = objc_alloc_init(_INPBBusTrip);
        if (!PBReaderPlaceMark() || !_INPBBusTripReadFrom(v18, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBusTrip:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBBoatReservationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBReservation *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBReservation);
        if (!PBReaderPlaceMark() || (_INPBReservationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setReservation:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = objc_alloc_init(_INPBBoatTrip);
        if (!PBReaderPlaceMark() || !_INPBBoatTripReadFrom(v18, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBoatTrip:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBSeat);
    if (!PBReaderPlaceMark() || !_INPBSeatReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReservedSeat:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INBusReservation *INIntentSlotValueTransformFromBusReservation(INBusReservation *a1)
{
  INBusReservation *v1;
  void *v2;
  INBusReservation *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  id v16;
  INBusReservation *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    -[INBusReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = [INBusReservation alloc];
    objc_msgSend(v2, "itemReference");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v21);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "hasReservationStatus");
    v6 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v6 <= 3)
      v7 = (void *)(v6 + 1);
    else
      v7 = 0;
    if (!v5)
      v7 = 0;
    v16 = v7;
    objc_msgSend(v2, "reservationHolderName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INBusReservation reservedSeat](v1, "reservedSeat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSeat(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INBusReservation busTrip](v1, "busTrip");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromBusTrip(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INBusReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:busTrip:](v3, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:busTrip:", v23, v4, v19, v16, v15, v14, v8, v10, v12);

    a1 = v17;
  }
  return a1;
}

_INPBBusReservation *INIntentSlotValueTransformToBusReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBBusReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBBusReservation);
    -[_INPBBusReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "reservedSeat");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSeat(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusReservation setReservedSeat:](v15, "setReservedSeat:", v17);

    objc_msgSend(v1, "busTrip");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToBusTrip(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBusReservation setBusTrip:](v15, "setBusTrip:", v19);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromBusReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromBusReservation(*(INBusReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBusReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToBusReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedBusReservationFromBusReservation(void *a1)
{
  return a1;
}

uint64_t _INPBSkipAnnouncementIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INReadActionTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INReadActionTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INReadActionTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INReadActionTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("repeat");
  if (a1 == 1)
    return CFSTR("read");
  else
    return v1;
}

uint64_t INReadActionTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("read")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("repeat")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INReadActionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("repeat");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("read");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBSkipAnnouncementIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

__CFString *INSkipAnnouncementIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2294EF8[a1];
}

uint64_t _INPBPowerValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBJSONDictionaryReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setJsonString:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCallRecordFilterReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBContact *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = objc_alloc_init(_INPBContact);
              v46 = 0;
              v47 = 0;
              if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v18, a2))
              {

                return 0;
              }
              PBReaderRecallMark();
              if (v18)
                objc_msgSend(a1, "addParticipants:", v18, 0, 0);

              goto LABEL_73;
            case 2u:
              if (v16 == 2)
              {
                v46 = 0;
                v47 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v20 = 0;
                  v21 = 0;
                  v22 = 0;
                  while (1)
                  {
                    v23 = *v3;
                    v24 = *(_QWORD *)(a2 + v23);
                    if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
                    *(_QWORD *)(a2 + v23) = v24 + 1;
                    v22 |= (unint64_t)(v25 & 0x7F) << v20;
                    if (v25 < 0)
                    {
                      v20 += 7;
                      v14 = v21++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_38;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
                  PBRepeatedInt32Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v40 = 0;
                v41 = 0;
                v42 = 0;
                while (1)
                {
                  v43 = *v3;
                  v44 = *(_QWORD *)(a2 + v43);
                  if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
                  *(_QWORD *)(a2 + v43) = v44 + 1;
                  v42 |= (unint64_t)(v45 & 0x7F) << v40;
                  if (v45 < 0)
                  {
                    v40 += 7;
                    v14 = v41++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_72;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_72:
                PBRepeatedInt32Add();
              }
LABEL_73:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            case 3u:
              v26 = 0;
              v27 = 0;
              v28 = 0;
              while (2)
              {
                v29 = *v3;
                v30 = *(_QWORD *)(a2 + v29);
                if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
                  *(_QWORD *)(a2 + v29) = v30 + 1;
                  v28 |= (unint64_t)(v31 & 0x7F) << v26;
                  if (v31 < 0)
                  {
                    v26 += 7;
                    v14 = v27++ >= 9;
                    if (v14)
                    {
                      v32 = 0;
                      goto LABEL_57;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v32 = 0;
              else
                v32 = v28;
LABEL_57:
              objc_msgSend(a1, "setCallCapability:", v32, v46, v47);
              goto LABEL_73;
            case 4u:
              v33 = 0;
              v34 = 0;
              v35 = 0;
              while (2)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v35 |= (unint64_t)(v38 & 0x7F) << v33;
                  if (v38 < 0)
                  {
                    v33 += 7;
                    v14 = v34++ >= 9;
                    if (v14)
                    {
                      v39 = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v39 = 0;
              else
                v39 = v35;
LABEL_62:
              objc_msgSend(a1, "setPreferredCallProvider:", v39, v46, v47);
              goto LABEL_73;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_73;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INCallRecordFilter *INIntentSlotValueTransformFromCallRecordFilter(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  INCallRecordFilter *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  INCallRecordFilter *v16;
  uint64_t v18;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v18 = 0;
    if (objc_msgSend(v1, "callTypesCount"))
    {
      v3 = 0;
      do
        INCallRecordTypeOptionsAddBackingType(&v18, objc_msgSend(v2, "callTypesAtIndex:", v3++));
      while (v3 < objc_msgSend(v2, "callTypesCount"));
    }
    v4 = [INCallRecordFilter alloc];
    objc_msgSend(v2, "participants");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContacts(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v18;
    v8 = objc_msgSend(v2, "hasCallCapability");
    v9 = objc_msgSend(v2, "callCapability");
    v10 = 2 * (v9 == 2);
    if (v9 == 1)
      v10 = 1;
    if (v8)
      v11 = v10;
    else
      v11 = 0;
    v12 = objc_msgSend(v2, "hasPreferredCallProvider");
    v13 = objc_msgSend(v2, "preferredCallProvider") - 2;
    if (v13 <= 2)
      v14 = v13 + 1;
    else
      v14 = 0;
    if (v12)
      v15 = v14;
    else
      v15 = 0;
    v16 = -[INCallRecordFilter initWithParticipants:callTypes:callCapability:preferredCallProvider:](v4, "initWithParticipants:callTypes:callCapability:preferredCallProvider:", v6, v7, v11, v15);

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

_INPBCallRecordFilter *INIntentSlotValueTransformToCallRecordFilter(void *a1)
{
  id v1;
  _INPBCallRecordFilter *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _INPBCallRecordFilter *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  _INPBCallRecordFilter *v14;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCallRecordFilter);
    objc_msgSend(v1, "participants");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContacts(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordFilter setParticipants:](v2, "setParticipants:", v4);

    v5 = objc_msgSend(v1, "callTypes");
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __INIntentSlotValueTransformToCallRecordFilter_block_invoke;
    v13[3] = &unk_1E2295130;
    v6 = v2;
    v14 = v6;
    INCallRecordTypeOptionsEnumerateBackingTypes(v5, v13);
    v7 = objc_msgSend(v1, "callCapability");
    if (v7 == 1)
      v8 = 1;
    else
      v8 = 0x7FFFFFFF;
    if (v7 == 2)
      v9 = 2;
    else
      v9 = v8;
    -[_INPBCallRecordFilter setCallCapability:](v6, "setCallCapability:", v9);
    v10 = objc_msgSend(v1, "preferredCallProvider");

    if ((unint64_t)(v10 - 1) >= 3)
      v11 = 0x7FFFFFFFLL;
    else
      v11 = (v10 + 1);
    -[_INPBCallRecordFilter setPreferredCallProvider:](v6, "setPreferredCallProvider:", v11);

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id INIntentSlotValueTransformFromCallRecordFilters(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCallRecordFilter(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallRecordFilters(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCallRecordFilter(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallRecordFilterFromCallRecordFilter(void *a1)
{
  return a1;
}

uint64_t _INPBPowerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBPowerValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBPowerValue);
        if (!PBReaderPlaceMark() || !_INPBPowerValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INCarChargingConnectorTypeGetFacadeObject(int a1, int a2)
{
  if (a1 && (a2 - 2) <= 9)
    return off_1E2295038[a2 - 2];
  else
    return 0;
}

uint64_t INCarChargingConnectorTypeGetBackingType(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.J1772")) & 1) != 0)
    {
      v3 = 2;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.CCS1")) & 1) != 0)
    {
      v3 = 3;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.CCS2")) & 1) != 0)
    {
      v3 = 4;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.CHAdeMO")) & 1) != 0)
    {
      v3 = 5;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.GBTAC")) & 1) != 0)
    {
      v3 = 6;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.GBTDC")) & 1) != 0)
    {
      v3 = 7;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.Tesla")) & 1) != 0)
    {
      v3 = 8;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.Mennekes")) & 1) != 0)
    {
      v3 = 9;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.NACSDC")) & 1) != 0)
    {
      v3 = 10;
    }
    else if (objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.CarChargingConnectorType.NACSAC")))
    {
      v3 = 11;
    }
    else
    {
      v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INCarChargingConnectorTypeValueAsString(void *a1)
{
  uint64_t BackingType;

  if (a1)
  {
    BackingType = INCarChargingConnectorTypeGetBackingType(a1);
    if ((BackingType - 2) < 0xA)
      return off_1E2295088[(BackingType - 2)];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), BackingType);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return (__CFString *)a1;
}

INCarChargingConnectorPower *INIntentSlotValueTransformFromCarChargingConnectorPower(void *a1)
{
  id v1;
  INCarChargingConnectorPower *v2;
  int v3;
  int v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  INCarChargingConnectorPower *v9;

  if (a1)
  {
    v1 = a1;
    v2 = [INCarChargingConnectorPower alloc];
    v3 = objc_msgSend(v1, "hasChargingConnector");
    v4 = objc_msgSend(v1, "chargingConnector");
    if (v3 && (v4 - 2) <= 9)
      v5 = off_1E2295038[v4 - 2];
    else
      v5 = 0;
    v6 = v5;
    objc_msgSend(v1, "maximumPower");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromPower(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[INCarChargingConnectorPower initWithChargingConnector:maximumPower:](v2, "initWithChargingConnector:maximumPower:", v6, v8);

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

_INPBCarChargingConnectorPower *INIntentSlotValueTransformToCarChargingConnectorPower(void *a1)
{
  id v1;
  _INPBCarChargingConnectorPower *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCarChargingConnectorPower);
    objc_msgSend(v1, "chargingConnector");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCarChargingConnectorPower setChargingConnector:](v2, "setChargingConnector:", INCarChargingConnectorTypeGetBackingType(v3));

    objc_msgSend(v1, "maximumPower");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToPower(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCarChargingConnectorPower setMaximumPower:](v2, "setMaximumPower:", v5);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCarChargingConnectorPowers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCarChargingConnectorPower(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCarChargingConnectorPowers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCarChargingConnectorPower(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCarChargingConnectorPowerFromCarChargingConnectorPower(void *a1)
{
  return a1;
}

uint64_t _INPBCarChargingConnectorPowerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBPower *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(_INPBPower);
        if (!PBReaderPlaceMark() || (_INPBPowerReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMaximumPower:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setChargingConnector:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBCarHeadUnitReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBluetoothIdentifier:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setIAP2Identifier:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INCarHeadUnit *INIntentSlotValueTransformFromCarHeadUnit(void *a1)
{
  id v1;
  INCarHeadUnit *v2;
  void *v3;
  void *v4;
  INCarHeadUnit *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INCarHeadUnit alloc];
    objc_msgSend(v1, "bluetoothIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "iAP2Identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = -[INCarHeadUnit initWithBluetoothIdentifier:iAP2Identifier:](v2, "initWithBluetoothIdentifier:iAP2Identifier:", v3, v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBCarHeadUnit *INIntentSlotValueTransformToCarHeadUnit(void *a1)
{
  id v1;
  _INPBCarHeadUnit *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCarHeadUnit);
    objc_msgSend(v1, "bluetoothIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCarHeadUnit setBluetoothIdentifier:](v2, "setBluetoothIdentifier:", v3);

    objc_msgSend(v1, "iAP2Identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBCarHeadUnit setIAP2Identifier:](v2, "setIAP2Identifier:", v4);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCarHeadUnits(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCarHeadUnit(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCarHeadUnits(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCarHeadUnit(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCarHeadUnitFromCarHeadUnit(void *a1)
{
  return a1;
}

BOOL _INPBDataValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBValueMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setValue:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBValueMetadata);
    if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INReportIncidentIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD)
    return 0;
  else
    return off_1E2295150[a1];
}

uint64_t _INPBReportIncidentIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _INPBIntentMetadata *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
        goto LABEL_43;
      case 2u:
        v19 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
        if (!PBReaderPlaceMark() || (_INPBSupportedTrafficIncidentTypeReadFrom(v19, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIncidentType:", v19, 0, 0);
        goto LABEL_43;
      case 3u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0.0;
        }
        objc_msgSend(a1, "setStartTime:", v23);
        goto LABEL_50;
      case 4u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              v15 = v25++ >= 9;
              if (v15)
              {
                v26 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_47:
        objc_msgSend(a1, "setIsClear:", v26 != 0);
        goto LABEL_50;
      case 5u:
        v19 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v19, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserLocation:", v19, 0, 0);
        goto LABEL_43;
      case 6u:
        v19 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v19, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAdditionalDetails:", v19, 0, 0);
LABEL_43:

LABEL_50:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

uint64_t _INPBReportIncidentIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  _INPBLocation *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
                break;
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_36;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_53;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          PBRepeatedInt32Add();
        }
        goto LABEL_54;
      }
      if ((_DWORD)v18 == 3)
        break;
      if ((_DWORD)v18 == 2)
      {
        v19 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v19, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v19, 0, 0);
LABEL_41:

        goto LABEL_54;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_54:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
    if (!PBReaderPlaceMark() || !_INPBSupportedTrafficIncidentTypeReadFrom(v19, a2))
    {
LABEL_57:

      return 0;
    }
    PBReaderRecallMark();
    if (v19)
      objc_msgSend(a1, "addSupportedType:", v19, 0, 0);
    goto LABEL_41;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INMapsTransportTypeHasBackingType(unint64_t a1)
{
  return a1 < 6;
}

unint64_t INMapsTransportTypeGetBackingType(unint64_t result)
{
  if (result >= 6)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMapsTransportTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INMapsTransportTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E22951F0[a1 - 1];
}

uint64_t INMapsTransportTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("driving")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("walking")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cycling")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("transit")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("rideshare")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMapsTransportTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("driving");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("walking");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("cycling");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("transit");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("rideshare");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INWorkoutAssociatedItemLabelHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INWorkoutAssociatedItemLabelGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INWorkoutAssociatedItemLabelGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INWorkoutAssociatedItemLabelGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E2295218[a1 - 1];
}

uint64_t INWorkoutAssociatedItemLabelWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("narrator")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playlist")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("song")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("trainer")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("workout")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutAssociatedItemLabelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("narrator");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("playlist");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("song");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("trainer");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("workout");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INWorkoutAssociatedItem *INIntentSlotValueTransformFromWorkoutAssociatedItem(void *a1)
{
  id v1;
  INWorkoutAssociatedItem *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  INWorkoutAssociatedItem *v13;

  if (a1)
  {
    v1 = a1;
    v2 = [INWorkoutAssociatedItem alloc];
    v3 = objc_msgSend(v1, "hasItemLabel");
    v4 = objc_msgSend(v1, "itemLabel");
    if (((v4 < 5) & v3) != 0)
      v5 = v4 + 1;
    else
      v5 = 0;
    objc_msgSend(v1, "itemID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v1, "hasContentRating");
    v8 = objc_msgSend(v1, "contentRating");
    v9 = 2 * (v8 == 1);
    if (!v8)
      v9 = 1;
    if (v7)
      v10 = v9;
    else
      v10 = 0;
    objc_msgSend(v1, "itemName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromDataString(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[INWorkoutAssociatedItem initWithItemLabel:itemID:contentRating:itemName:](v2, "initWithItemLabel:itemID:contentRating:itemName:", v5, v6, v10, v12);

  }
  else
  {
    v13 = 0;
  }
  return v13;
}

_INPBWorkoutAssociatedItem *INIntentSlotValueTransformToWorkoutAssociatedItem(void *a1)
{
  id v1;
  _INPBWorkoutAssociatedItem *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBWorkoutAssociatedItem);
    v3 = objc_msgSend(v1, "itemLabel") - 1;
    if (v3 >= 5)
      v4 = 0x7FFFFFFFLL;
    else
      v4 = v3;
    -[_INPBWorkoutAssociatedItem setItemLabel:](v2, "setItemLabel:", v4);
    objc_msgSend(v1, "itemID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWorkoutAssociatedItem setItemID:](v2, "setItemID:", v5);

    v6 = objc_msgSend(v1, "contentRating");
    if (v6 == 1)
      v7 = 0;
    else
      v7 = 0x7FFFFFFF;
    if (v6 == 2)
      v8 = 1;
    else
      v8 = v7;
    -[_INPBWorkoutAssociatedItem setContentRating:](v2, "setContentRating:", v8);
    objc_msgSend(v1, "itemName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToDataString(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWorkoutAssociatedItem setItemName:](v2, "setItemName:", v10);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromWorkoutAssociatedItems(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromWorkoutAssociatedItem(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWorkoutAssociatedItems(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToWorkoutAssociatedItem(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedWorkoutAssociatedItemFromWorkoutAssociatedItem(void *a1)
{
  return a1;
}

BOOL INWorkoutContentRatingLabelHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INWorkoutContentRatingLabelGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 0;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 1;
  else
    return v1;
}

uint64_t INWorkoutContentRatingLabelGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 1);
  if (!a2)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INWorkoutContentRatingLabelGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("explicit");
  if (a1 == 1)
    return CFSTR("clean");
  else
    return v1;
}

uint64_t INWorkoutContentRatingLabelWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("clean")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("explicit")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutContentRatingLabelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("explicit");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("clean");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL INWorkoutSequenceLabelHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INWorkoutSequenceLabelGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 0;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 1;
  else
    return v1;
}

uint64_t INWorkoutSequenceLabelGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 1);
  if (!a2)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INWorkoutSequenceLabelGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("next");
  if (a1 == 1)
    return CFSTR("last");
  else
    return v1;
}

uint64_t INWorkoutSequenceLabelWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("last")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("next")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutSequenceLabelGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("next");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("last");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBWorkoutAssociatedItemReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  _INPBDataString *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_41;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_44:
        objc_msgSend(a1, "setItemLabel:", v23);
        goto LABEL_50;
      case 2u:
        PBReaderReadString();
        v25 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setItemID:", v25);
        goto LABEL_39;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_49:
        objc_msgSend(a1, "setContentRating:", v32);
        goto LABEL_50;
      case 4u:
        v25 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setItemName:", v25, 0, 0);
LABEL_39:

LABEL_50:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

uint64_t _INPBResolveObjectReferenceResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResolvedReference:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBResolveObjectReferenceIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setReference:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INResolveObjectReferenceIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xC)
    return 0;
  else
    return off_1E2295268[a1];
}

uint64_t _INPBResolveObjectReferenceIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResolvedReferences:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSupportedTrafficIncidentTypeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBString *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalizedDisplayString:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void INMapsTransportTypeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_9;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
LABEL_13:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
    v3 = v4;
    if ((a1 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_12:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 8) != 0)
    goto LABEL_13;
LABEL_7:
  if ((a1 & 0x10) != 0)
  {
LABEL_8:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
    v3 = v4;
  }
LABEL_9:

}

unint64_t INMapsTransportTypeOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        result = (result >> 1) & 1;
        break;
      case 3:
        result = (result >> 2) & 1;
        break;
      case 4:
        result = (result >> 3) & 1;
        break;
      case 5:
        result = (result >> 4) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INMapsTransportTypeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      case 5:
        v2 |= 0x10uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INMapsTransportTypeOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      case 5:
        v2 &= ~0x10uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INMapsTransportTypeOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("driving"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("walking"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
LABEL_14:
    objc_msgSend(v3, "addObject:", CFSTR("transit"));
    if ((v1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  objc_msgSend(v3, "addObject:", CFSTR("cycling"));
  if ((v1 & 8) != 0)
    goto LABEL_14;
LABEL_6:
  if ((v1 & 0x10) != 0)
LABEL_7:
    objc_msgSend(v3, "addObject:", CFSTR("rideshare"));
LABEL_8:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INMapsTransportTypeOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("driving"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("walking")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("cycling")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("transit")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("rideshare")))
          v3 |= 0x10uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INMapsTransportTypeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_10;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("driving"), CFSTR("driving"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("walking"), CFSTR("walking"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
LABEL_14:
    INLocalizedStringWithLocalizer(CFSTR("transit"), CFSTR("transit"), v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v11);

    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  INLocalizedStringWithLocalizer(CFSTR("cycling"), CFSTR("cycling"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) != 0)
    goto LABEL_14;
LABEL_6:
  if ((a1 & 0x10) != 0)
  {
LABEL_7:
    INLocalizedStringWithLocalizer(CFSTR("rideshare"), CFSTR("rideshare"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_8:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_10:
  return v6;
}

uint64_t INTrafficIncidentTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INTrafficIncidentTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INTrafficIncidentTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 5) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INTrafficIncidentTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E22952F8[a1 - 1];
}

uint64_t INTrafficIncidentTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("accident")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hazard")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("speedtrap")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("construction")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("roadwork")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTrafficIncidentTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("accident");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("hazard");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("speedtrap");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("construction");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("roadwork");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INSupportedTrafficIncidentType *INIntentSlotValueTransformFromSupportedTrafficIncidentType(void *a1)
{
  id v1;
  INSupportedTrafficIncidentType *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  INSupportedTrafficIncidentType *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INSupportedTrafficIncidentType alloc];
    v3 = objc_msgSend(v1, "hasType");
    v4 = objc_msgSend(v1, "type");
    if (((v4 < 5) & v3) != 0)
      v5 = v4 + 1;
    else
      v5 = 0;
    objc_msgSend(v1, "localizedDisplayString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromString(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INSupportedTrafficIncidentType initWithType:localizedDisplayString:](v2, "initWithType:localizedDisplayString:", v5, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBSupportedTrafficIncidentType *INIntentSlotValueTransformToSupportedTrafficIncidentType(void *a1)
{
  id v1;
  _INPBSupportedTrafficIncidentType *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSupportedTrafficIncidentType);
    v3 = objc_msgSend(v1, "type") - 1;
    if (v3 >= 5)
      v4 = 0x7FFFFFFFLL;
    else
      v4 = v3;
    -[_INPBSupportedTrafficIncidentType setType:](v2, "setType:", v4);
    objc_msgSend(v1, "localizedDisplayString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSupportedTrafficIncidentType setLocalizedDisplayString:](v2, "setLocalizedDisplayString:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromSupportedTrafficIncidentTypes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSupportedTrafficIncidentType(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSupportedTrafficIncidentTypes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSupportedTrafficIncidentType(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSupportedTrafficIncidentTypeFromSupportedTrafficIncidentType(void *a1)
{
  return a1;
}

BOOL _INPBWorkoutCustomizationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEnvironment:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setFocus:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INWorkoutCustomization *INIntentSlotValueTransformFromWorkoutCustomization(void *a1)
{
  id v1;
  INWorkoutCustomization *v2;
  void *v3;
  void *v4;
  INWorkoutCustomization *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INWorkoutCustomization alloc];
    objc_msgSend(v1, "focus");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "environment");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = -[INWorkoutCustomization initWithFocus:environment:](v2, "initWithFocus:environment:", v3, v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBWorkoutCustomization *INIntentSlotValueTransformToWorkoutCustomization(void *a1)
{
  id v1;
  _INPBWorkoutCustomization *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBWorkoutCustomization);
    objc_msgSend(v1, "focus");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWorkoutCustomization setFocus:](v2, "setFocus:", v3);

    objc_msgSend(v1, "environment");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBWorkoutCustomization setEnvironment:](v2, "setEnvironment:", v4);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromWorkoutCustomizations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromWorkoutCustomization(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWorkoutCustomizations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToWorkoutCustomization(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedWorkoutCustomizationFromWorkoutCustomization(void *a1)
{
  return a1;
}

INHomeAutomationEntityProvider *INIntentSlotValueTransformFromHomeAutomationEntityProvider(INHomeAutomationEntityProvider *a1)
{
  INHomeAutomationEntityProvider *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  INHomeAutomationEntityProvider *v16;
  INHomeAutomationEntityProvider *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (a1)
  {
    v1 = a1;
    v16 = [INHomeAutomationEntityProvider alloc];
    -[INHomeAutomationEntityProvider roomNames](v1, "roomNames");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider homeName](v1, "homeName");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v24);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider zoneNames](v1, "zoneNames");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider accessoryNames](v1, "accessoryNames");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v22);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider serviceNames](v1, "serviceNames");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v21);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider serviceGroups](v1, "serviceGroups");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider intentFromEntities](v1, "intentFromEntities");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromHomeAutomationFromEntities(v19);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider intentDeviceQuantifier](v1, "intentDeviceQuantifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v18);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider destinationDeviceId](v1, "destinationDeviceId");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v13);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider intentDeviceType](v1, "intentDeviceType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider intentPlaceHint](v1, "intentPlaceHint");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[INHomeAutomationEntityProvider intentReference](v1, "intentReference");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromString(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INHomeAutomationEntityProvider initWithRoomNames:homeName:zoneNames:accessoryNames:serviceNames:serviceGroups:intentFromEntities:intentDeviceQuantifier:destinationDeviceId:intentDeviceType:intentPlaceHint:intentReference:](v16, "initWithRoomNames:homeName:zoneNames:accessoryNames:serviceNames:serviceGroups:intentFromEntities:intentDeviceQuantifier:destinationDeviceId:intentDeviceType:intentPlaceHint:intentReference:", v28, v27, v26, v15, v14, v12, v11, v10, v2, v4, v6, v8);

    a1 = v17;
  }
  return a1;
}

_INPBHomeAutomationEntityProvider *INIntentSlotValueTransformToHomeAutomationEntityProvider(void *a1)
{
  id v1;
  _INPBHomeAutomationEntityProvider *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeAutomationEntityProvider);
    objc_msgSend(v1, "roomNames");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setRoomNames:](v2, "setRoomNames:", v4);

    objc_msgSend(v1, "homeName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setHomeName:](v2, "setHomeName:", v6);

    objc_msgSend(v1, "zoneNames");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setZoneNames:](v2, "setZoneNames:", v8);

    objc_msgSend(v1, "accessoryNames");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setAccessoryNames:](v2, "setAccessoryNames:", v10);

    objc_msgSend(v1, "serviceNames");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setServiceNames:](v2, "setServiceNames:", v12);

    objc_msgSend(v1, "serviceGroups");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setServiceGroups:](v2, "setServiceGroups:", v14);

    objc_msgSend(v1, "intentFromEntities");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToHomeAutomationFromEntities(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setIntentFromEntities:](v2, "setIntentFromEntities:", v16);

    objc_msgSend(v1, "intentDeviceQuantifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setIntentDeviceQuantifier:](v2, "setIntentDeviceQuantifier:", v18);

    objc_msgSend(v1, "destinationDeviceId");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setDestinationDeviceId:](v2, "setDestinationDeviceId:", v20);

    objc_msgSend(v1, "intentDeviceType");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setIntentDeviceType:](v2, "setIntentDeviceType:", v22);

    objc_msgSend(v1, "intentPlaceHint");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setIntentPlaceHint:](v2, "setIntentPlaceHint:", v24);

    objc_msgSend(v1, "intentReference");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToString(v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationEntityProvider setIntentReference:](v2, "setIntentReference:", v26);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeAutomationEntityProviders(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeAutomationEntityProvider(*(INHomeAutomationEntityProvider **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeAutomationEntityProviders(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeAutomationEntityProvider(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeAutomationEntityProviderFromHomeAutomationEntityProvider(void *a1)
{
  return a1;
}

BOOL _INPBHomeAutomationEntityProviderReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_67;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addRoomNames:", v17, 0, 0);
        goto LABEL_63;
      case 2u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeName:", v17, 0, 0);
        goto LABEL_63;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_67;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addZoneNames:", v17, 0, 0);
        goto LABEL_63;
      case 4u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_67;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAccessoryNames:", v17, 0, 0);
        goto LABEL_63;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_67;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addServiceNames:", v17, 0, 0);
        goto LABEL_63;
      case 6u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_67;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addServiceGroups:", v17, 0, 0);
        goto LABEL_63;
      case 7u:
        v17 = objc_alloc_init(_INPBHomeAutomationFromEntity);
        if (!PBReaderPlaceMark() || !_INPBHomeAutomationFromEntityReadFrom(v17, a2))
          goto LABEL_67;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentFromEntities:", v17, 0, 0);
        goto LABEL_63;
      case 8u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentDeviceQuantifier:", v17, 0, 0);
        goto LABEL_63;
      case 9u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDestinationDeviceId:", v17, 0, 0);
        goto LABEL_63;
      case 0xAu:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentDeviceType:", v17, 0, 0);
        goto LABEL_63;
      case 0xBu:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentPlaceHint:", v17, 0, 0);
        goto LABEL_63;
      case 0xCu:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIntentReference:", v17, 0, 0);
LABEL_63:

LABEL_64:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_64;
    }
  }
}

void sub_18C2A14C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18C2A15CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18C2A16E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18C2A2178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  void *v62;
  void *v63;

  _Unwind_Resume(a1);
}

void sub_18C2A276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_18C2A280C()
{
  void *v0;

  JUMPOUT(0x18C2A27FCLL);
}

void sub_18C2A281C()
{
  JUMPOUT(0x18C2A27FCLL);
}

void sub_18C2A2A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18C2A2D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_18C2A2F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18C2A308C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18C2A3500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

void sub_18C2A3978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_18C2A3BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

BOOL std::less<std::string>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]();
}

void std::__throw_length_error[abi:ne180100]()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E2288088, MEMORY[0x1E0DE42D0]);
}

void sub_18C2A3E30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "basic_string");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,INSystemApp>,std::__map_value_compare<std::string,std::__value_type<std::string,INSystemApp>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,INSystemApp>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v10, a2))
        break;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = v7;
    v7 = (uint64_t **)operator new(0x50uLL);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a3;
    v12 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v7[6] = (uint64_t *)v12;
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v11;
    *v8 = (uint64_t *)v7;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v7;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    v15 = *v6;
    v16 = v14 == *v6;
    *((_BYTE *)v14 + 24) = v16;
    if (!v16)
    {
      do
      {
        v17 = v14[2];
        if (*(_BYTE *)(v17 + 24))
          break;
        v18 = *(uint64_t **)(v17 + 16);
        v19 = *v18;
        if (*v18 == v17)
        {
          v22 = v18[1];
          if (!v22 || (v23 = *(unsigned __int8 *)(v22 + 24), v20 = (_BYTE *)(v22 + 24), v23))
          {
            if (*(uint64_t **)v17 == v14)
            {
              v24 = (uint64_t *)v14[2];
            }
            else
            {
              v24 = *(uint64_t **)(v17 + 8);
              v25 = *v24;
              *(_QWORD *)(v17 + 8) = *v24;
              if (v25)
              {
                *(_QWORD *)(v25 + 16) = v17;
                v18 = *(uint64_t **)(v17 + 16);
              }
              v24[2] = (uint64_t)v18;
              *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * (**(_QWORD **)(v17 + 16) != v17)) = v24;
              *v24 = v17;
              *(_QWORD *)(v17 + 16) = v24;
              v18 = (uint64_t *)v24[2];
              v17 = *v18;
            }
            *((_BYTE *)v24 + 24) = 1;
            *((_BYTE *)v18 + 24) = 0;
            v28 = *(_QWORD *)(v17 + 8);
            *v18 = v28;
            if (v28)
              *(_QWORD *)(v28 + 16) = v18;
            *(_QWORD *)(v17 + 16) = v18[2];
            *(_QWORD *)(v18[2] + 8 * (*(_QWORD *)v18[2] != (_QWORD)v18)) = v17;
            *(_QWORD *)(v17 + 8) = v18;
            goto LABEL_35;
          }
        }
        else if (!v19 || (v21 = *(unsigned __int8 *)(v19 + 24), v20 = (_BYTE *)(v19 + 24), v21))
        {
          if (*(uint64_t **)v17 == v14)
          {
            v26 = v14[1];
            *(_QWORD *)v17 = v26;
            if (v26)
            {
              *(_QWORD *)(v26 + 16) = v17;
              v18 = *(uint64_t **)(v17 + 16);
            }
            v14[2] = (uint64_t)v18;
            *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * (**(_QWORD **)(v17 + 16) != v17)) = v14;
            v14[1] = v17;
            *(_QWORD *)(v17 + 16) = v14;
            v18 = (uint64_t *)v14[2];
          }
          else
          {
            v14 = (uint64_t *)v14[2];
          }
          *((_BYTE *)v14 + 24) = 1;
          *((_BYTE *)v18 + 24) = 0;
          v17 = v18[1];
          v27 = *(uint64_t **)v17;
          v18[1] = *(_QWORD *)v17;
          if (v27)
            v27[2] = (uint64_t)v18;
          *(_QWORD *)(v17 + 16) = v18[2];
          *(_QWORD *)(v18[2] + 8 * (*(_QWORD *)v18[2] != (_QWORD)v18)) = v17;
          *(_QWORD *)v17 = v18;
LABEL_35:
          v18[2] = v17;
          break;
        }
        *(_BYTE *)(v17 + 24) = 1;
        v14 = v18;
        *((_BYTE *)v18 + 24) = v18 == v15;
        *v20 = 1;
      }
      while (v18 != v15);
    }
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_18C2A42F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

BOOL INHomeAutomationEntityTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INHomeAutomationEntityTypeGetBackingType(unint64_t result)
{
  if (result >= 4)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INHomeAutomationEntityTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INHomeAutomationEntityTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2295320[a1 - 1];
}

uint64_t INHomeAutomationEntityTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("accessory")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("room")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("zone")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeAutomationEntityTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("zone");
      break;
    case 2:
      v4 = CFSTR("room");
      break;
    case 1:
      v4 = CFSTR("accessory");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

INHomeAutomationFromEntity *INIntentSlotValueTransformFromHomeAutomationFromEntity(void *a1)
{
  id v1;
  INHomeAutomationFromEntity *v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  INHomeAutomationFromEntity *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INHomeAutomationFromEntity alloc];
    objc_msgSend(v1, "value");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasType");
    v6 = objc_msgSend(v1, "type");

    v7 = (v6 - 1);
    if (v7 <= 2)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v5)
      v9 = v8;
    else
      v9 = 0;
    v10 = -[INHomeAutomationFromEntity initWithValue:type:](v2, "initWithValue:type:", v4, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBHomeAutomationFromEntity *INIntentSlotValueTransformToHomeAutomationFromEntity(void *a1)
{
  id v1;
  _INPBHomeAutomationFromEntity *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBHomeAutomationFromEntity);
    objc_msgSend(v1, "value");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeAutomationFromEntity setValue:](v2, "setValue:", v4);

    v5 = objc_msgSend(v1, "type");
    if (v5 >= 4)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = v5;
    -[_INPBHomeAutomationFromEntity setType:](v2, "setType:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromHomeAutomationFromEntities(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeAutomationFromEntity(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeAutomationFromEntities(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeAutomationFromEntity(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeAutomationFromEntityFromHomeAutomationFromEntity(void *a1)
{
  return a1;
}

uint64_t _INPBHomeAutomationFromEntityReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBString *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INJoinCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E2295358[a1];
}

BOOL _INPBJoinCallIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 10)
      {
        v18 = objc_alloc_init(_INPBCallGroupConversation);
        if (!PBReaderPlaceMark() || !_INPBCallGroupConversationReadFrom(v18, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupConversation:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBCallGroupConversationFilter);
    if (!PBReaderPlaceMark() || (_INPBCallGroupConversationFilterReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setGroupConversationFilter:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBJoinCallIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBCallGroupConversationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBContactValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConversationId:", v17);
        goto LABEL_32;
      case 2u:
        v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || (_INPBContactValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCaller:", v17, 0, 0);
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v17, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addOtherParticipants:", v17, 0, 0);
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(_INPBCallGroup);
        if (PBReaderPlaceMark() && _INPBCallGroupReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallGroup:", v17, 0, 0);
LABEL_32:

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

INCallGroupConversation *INIntentSlotValueTransformFromCallGroupConversation(void *a1)
{
  id v1;
  INCallGroupConversation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INCallGroupConversation *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INCallGroupConversation alloc];
    objc_msgSend(v1, "conversationId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "caller");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContactValueWithAlternatives(v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "otherParticipants");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContactValues(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "callGroup");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromCallGroup(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INCallGroupConversation initWithConversationId:caller:otherParticipants:callGroup:](v2, "initWithConversationId:caller:otherParticipants:callGroup:", v3, v5, v7, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBCallGroupConversation *INIntentSlotValueTransformToCallGroupConversation(void *a1)
{
  id v1;
  _INPBCallGroupConversation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCallGroupConversation);
    objc_msgSend(v1, "conversationId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversation setConversationId:](v2, "setConversationId:", v3);

    objc_msgSend(v1, "caller");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContactValue(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversation setCaller:](v2, "setCaller:", v5);

    objc_msgSend(v1, "otherParticipants");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContactValues(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversation setOtherParticipants:](v2, "setOtherParticipants:", v7);

    objc_msgSend(v1, "callGroup");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToCallGroup(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversation setCallGroup:](v2, "setCallGroup:", v9);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCallGroupConversations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCallGroupConversation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallGroupConversations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCallGroupConversation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallGroupConversationFromCallGroupConversation(void *a1)
{
  return a1;
}

void sub_18C2AAC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLNActionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!LinkServicesLibraryCore_frameworkLibrary_152514)
  {
    LinkServicesLibraryCore_frameworkLibrary_152514 = _sl_dlopen();
    if (!LinkServicesLibraryCore_frameworkLibrary_152514)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("LNAction");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getLNActionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _INPBCallGroupConversationFilterReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBContact *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCaller:", v17, 0, 0);
        goto LABEL_38;
      case 2u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addParticipants:", v17, 0, 0);
        goto LABEL_38;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_42:
        objc_msgSend(a1, "setMatchCallerAndParticipantsExactly:", v21 != 0);
        goto LABEL_43;
      case 4u:
        v17 = objc_alloc_init(_INPBCallGroup);
        if (PBReaderPlaceMark() && _INPBCallGroupReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallGroup:", v17, 0, 0);
LABEL_38:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

INCallGroupConversationFilter *INIntentSlotValueTransformFromCallGroupConversationFilter(void *a1)
{
  id v1;
  INCallGroupConversationFilter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INCallGroupConversationFilter *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INCallGroupConversationFilter alloc];
    objc_msgSend(v1, "caller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "participants");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContacts(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "matchCallerAndParticipantsExactly"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "callGroup");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromCallGroup(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INCallGroupConversationFilter initWithCaller:participants:matchCallerAndParticipantsExactly:callGroup:](v2, "initWithCaller:participants:matchCallerAndParticipantsExactly:callGroup:", v4, v6, v7, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBCallGroupConversationFilter *INIntentSlotValueTransformToCallGroupConversationFilter(void *a1)
{
  id v1;
  _INPBCallGroupConversationFilter *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCallGroupConversationFilter);
    objc_msgSend(v1, "caller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversationFilter setCaller:](v2, "setCaller:", v4);

    objc_msgSend(v1, "participants");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContacts(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversationFilter setParticipants:](v2, "setParticipants:", v6);

    objc_msgSend(v1, "matchCallerAndParticipantsExactly");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversationFilter setMatchCallerAndParticipantsExactly:](v2, "setMatchCallerAndParticipantsExactly:", objc_msgSend(v7, "BOOLValue"));

    objc_msgSend(v1, "callGroup");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToCallGroup(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroupConversationFilter setCallGroup:](v2, "setCallGroup:", v9);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCallGroupConversationFilters(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCallGroupConversationFilter(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallGroupConversationFilters(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCallGroupConversationFilter(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallGroupConversationFilterFromCallGroupConversationFilter(void *a1)
{
  return a1;
}

BOOL _INPBShareFocusStatusIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBFocusStatus *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBFocusStatus);
        if (!PBReaderPlaceMark() || (_INPBFocusStatusReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFocusStatus:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBFocusStatusReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setIsFocused:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INFocusStatus *INIntentSlotValueTransformFromFocusStatus(void *a1)
{
  id v1;
  INFocusStatus *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  INFocusStatus *v6;

  if (a1)
  {
    v1 = a1;
    v2 = [INFocusStatus alloc];
    v3 = (void *)MEMORY[0x1E0CB37E8];
    v4 = objc_msgSend(v1, "isFocused");

    objc_msgSend(v3, "numberWithBool:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[INFocusStatus initWithIsFocused:](v2, "initWithIsFocused:", v5);

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

_INPBFocusStatus *INIntentSlotValueTransformToFocusStatus(void *a1)
{
  id v1;
  _INPBFocusStatus *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBFocusStatus);
    objc_msgSend(v1, "isFocused");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBFocusStatus setIsFocused:](v2, "setIsFocused:", objc_msgSend(v3, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromFocusStatuses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromFocusStatus(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFocusStatuses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToFocusStatus(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedFocusStatusFromFocusStatus(void *a1)
{
  return a1;
}

BOOL _INPBShareFocusStatusIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

__CFString *INShareFocusStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E22953F8[a1];
}

BOOL _INPBAddCallParticipantIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addParticipants:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INAddCallParticipantIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xD)
    return 0;
  else
    return off_1E2295428[a1];
}

uint64_t _INPBAddCallParticipantIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCallInvite *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBCallInvite);
        if (!PBReaderPlaceMark() || !_INPBCallInviteReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addInvites:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBUnsendMessagesIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBUnsendMessagesIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend(a1, "addMessageIdentifiers:", v17);
LABEL_25:

    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *INUnsendMessagesIntentResponseCodeGetName(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;
  const __CFString *v3;

  if (a1 > 999)
  {
    v2 = CFSTR("INUnsendMessagesIntentResponseCodeFailureScreenTimeRestrictionEnabled");
    v3 = CFSTR("INUnsendMessagesIntentResponseCodeFailureDownTimeRestrictionEnabled");
    if (a1 != 1002)
      v3 = 0;
    if (a1 != 1001)
      v2 = v3;
    if (a1 == 1000)
      return CFSTR("INUnsendMessagesIntentResponseCodeFailureNotAMemberOfConversation");
    else
      return v2;
  }
  else
  {
    switch(a1)
    {
      case 0:
        result = CFSTR("INUnsendMessagesIntentResponseCodeUnspecified");
        break;
      case 1:
        result = CFSTR("INUnsendMessagesIntentResponseCodeReady");
        break;
      case 2:
        result = CFSTR("INUnsendMessagesIntentResponseCodeInProgress");
        break;
      case 3:
        result = CFSTR("INUnsendMessagesIntentResponseCodeSuccess");
        break;
      case 4:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailure");
        break;
      case 5:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailureRequiringAppLaunch");
        break;
      case 6:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailureMessageNotFound");
        break;
      case 7:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailurePastUnsendTimeLimit");
        break;
      case 8:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailureMessageTypeUnsupported");
        break;
      case 9:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailureUnsupportedOnService");
        break;
      case 10:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailureMessageServiceNotAvailable");
        break;
      case 11:
        result = CFSTR("INUnsendMessagesIntentResponseCodeFailureRequiringInAppAuthentication");
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

BOOL _INPBEditMessageIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBEditMessageIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEditedContent:", v18);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setMessageIdentifier:", v18);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *INEditMessageIntentResponseCodeGetName(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;
  const __CFString *v3;

  if (a1 > 999)
  {
    v2 = CFSTR("INEditMessageIntentResponseCodeFailureScreenTimeRestrictionEnabled");
    v3 = CFSTR("INEditMessageIntentResponseCodeFailureDownTimeRestrictionEnabled");
    if (a1 != 1002)
      v3 = 0;
    if (a1 != 1001)
      v2 = v3;
    if (a1 == 1000)
      return CFSTR("INEditMessageIntentResponseCodeFailureNotAMemberOfConversation");
    else
      return v2;
  }
  else
  {
    switch(a1)
    {
      case 0:
        result = CFSTR("INEditMessageIntentResponseCodeUnspecified");
        break;
      case 1:
        result = CFSTR("INEditMessageIntentResponseCodeReady");
        break;
      case 2:
        result = CFSTR("INEditMessageIntentResponseCodeInProgress");
        break;
      case 3:
        result = CFSTR("INEditMessageIntentResponseCodeSuccess");
        break;
      case 4:
        result = CFSTR("INEditMessageIntentResponseCodeFailure");
        break;
      case 5:
        result = CFSTR("INEditMessageIntentResponseCodeFailureRequiringAppLaunch");
        break;
      case 6:
        result = CFSTR("INEditMessageIntentResponseCodeFailureMessageNotFound");
        break;
      case 7:
        result = CFSTR("INEditMessageIntentResponseCodeFailurePastEditTimeLimit");
        break;
      case 8:
        result = CFSTR("INEditMessageIntentResponseCodeFailureMessageTypeUnsupported");
        break;
      case 9:
        result = CFSTR("INEditMessageIntentResponseCodeFailureUnsupportedOnService");
        break;
      case 10:
        result = CFSTR("INEditMessageIntentResponseCodeFailureMessageServiceNotAvailable");
        break;
      case 11:
        result = CFSTR("INEditMessageIntentResponseCodeFailureRequiringInAppAuthentication");
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t _INPBCallInviteReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBContact *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBContact);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v25, a2))
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addParticipants:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_39;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_42;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_42:
            objc_msgSend(a1, "setInviteType:", v24, v27, v28);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBURLValue);
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v25, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCallURL:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INCallInviteTypeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCallInviteTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INCallInviteTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INCallInviteTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E22954B0[a1 - 1];
}

uint64_t INCallInviteTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("add")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ring")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("link")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallInviteTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("link");
      break;
    case 2:
      v4 = CFSTR("ring");
      break;
    case 1:
      v4 = CFSTR("add");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

INCallInvite *INIntentSlotValueTransformFromCallInvite(void *a1)
{
  id v1;
  INCallInvite *v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  INCallInvite *v11;

  if (a1)
  {
    v1 = a1;
    v2 = [INCallInvite alloc];
    objc_msgSend(v1, "participants");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContacts(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasInviteType");
    v6 = objc_msgSend(v1, "inviteType") - 1;
    if (v6 <= 2)
      v7 = v6 + 1;
    else
      v7 = 0;
    if (v5)
      v8 = v7;
    else
      v8 = 0;
    objc_msgSend(v1, "callURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromURLValue(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[INCallInvite initWithParticipants:inviteType:callURL:](v2, "initWithParticipants:inviteType:callURL:", v4, v8, v10);

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBCallInvite *INIntentSlotValueTransformToCallInvite(void *a1)
{
  id v1;
  _INPBCallInvite *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCallInvite);
    objc_msgSend(v1, "participants");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContacts(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallInvite setParticipants:](v2, "setParticipants:", v4);

    v5 = objc_msgSend(v1, "inviteType") - 1;
    if (v5 < 3)
      v6 = (v5 + 1);
    else
      v6 = 0x7FFFFFFFLL;
    -[_INPBCallInvite setInviteType:](v2, "setInviteType:", v6);
    objc_msgSend(v1, "callURL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToURLValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallInvite setCallURL:](v2, "setCallURL:", v8);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCallInvites(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCallInvite(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallInvites(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCallInvite(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallInviteFromCallInvite(void *a1)
{
  return a1;
}

uint64_t _INPBStartCallRequestMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setAppInferred:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INStartCallRequestMetadata *INIntentSlotValueTransformFromStartCallRequestMetadata(INStartCallRequestMetadata *a1)
{
  INStartCallRequestMetadata *v1;
  INStartCallRequestMetadata *v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    v2 = [INStartCallRequestMetadata alloc];
    v3 = -[INStartCallRequestMetadata appInferred](v1, "appInferred");

    a1 = -[INStartCallRequestMetadata initWithAppInferred:](v2, "initWithAppInferred:", v3);
  }
  return a1;
}

_INPBStartCallRequestMetadata *INIntentSlotValueTransformToStartCallRequestMetadata(void *a1)
{
  id v1;
  _INPBStartCallRequestMetadata *v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBStartCallRequestMetadata);
    v3 = objc_msgSend(v1, "appInferred");

    -[_INPBStartCallRequestMetadata setAppInferred:](v2, "setAppInferred:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromStartCallRequestMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromStartCallRequestMetadata(*(INStartCallRequestMetadata **)(*((_QWORD *)&v11 + 1)
                                                                                                + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToStartCallRequestMetadatas(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToStartCallRequestMetadata(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedStartCallRequestMetadataFromStartCallRequestMetadata(void *a1)
{
  return a1;
}

INSticker *INIntentSlotValueTransformFromSticker(void *a1)
{
  id v1;
  INSticker *v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INSticker *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INSticker alloc];
    v3 = objc_msgSend(v1, "hasType");
    v4 = objc_msgSend(v1, "type");
    if (v3 && (v4 - 1) <= 5)
      v5 = qword_18C312CB8[v4 - 1];
    else
      v5 = 0;
    objc_msgSend(v1, "avatarDescriptor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "appBundleID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "stickerDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "emoji");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = -[INSticker initWithType:avatarDescriptor:appBundleID:stickerDescription:emoji:](v2, "initWithType:avatarDescriptor:appBundleID:stickerDescription:emoji:", v5, v6, v7, v8, v9);
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBSticker *INIntentSlotValueTransformToSticker(void *a1)
{
  id v1;
  _INPBSticker *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSticker);
    -[_INPBSticker setType:](v2, "setType:", INStickerTypeGetBackingType(objc_msgSend(v1, "type")));
    objc_msgSend(v1, "avatarDescriptor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSticker setAvatarDescriptor:](v2, "setAvatarDescriptor:", v3);

    objc_msgSend(v1, "appBundleID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSticker setAppBundleID:](v2, "setAppBundleID:", v4);

    objc_msgSend(v1, "stickerDescription");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSticker setStickerDescription:](v2, "setStickerDescription:", v5);

    objc_msgSend(v1, "emoji");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBSticker setEmoji:](v2, "setEmoji:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromStickers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSticker(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToStickers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSticker(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedStickerFromSticker(void *a1)
{
  return a1;
}

uint64_t _INPBStickerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              break;
            case 2u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setAvatarDescriptor:", v25);
              goto LABEL_32;
            case 3u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setAppBundleID:", v25);
              goto LABEL_32;
            case 4u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setStickerDescription:", v25);
              goto LABEL_32;
            case 5u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setEmoji:", v25);
LABEL_32:

              goto LABEL_38;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_38:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_34;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_37;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_37:
          objc_msgSend(a1, "setType:", v23);
          goto LABEL_38;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INStickerTypeHasBackingType(uint64_t a1)
{
  uint64_t result;
  _BOOL4 v2;

  if (a1 <= 999)
  {
    v2 = a1 == 1 || a1 == 2;
    return !a1 || v2;
  }
  else
  {
    switch(a1)
    {
      case 1000:
      case 1001:
      case 1002:
      case 1003:
        result = 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t INStickerTypeGetBackingType(uint64_t a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  result = 0x7FFFFFFFLL;
  if (a1 <= 999)
  {
    if (a1 == 2)
      v3 = 5;
    else
      v3 = 0x7FFFFFFF;
    if (a1 == 1)
      v4 = 1;
    else
      v4 = v3;
    if (a1)
      return v4;
    else
      return 0;
  }
  else
  {
    switch(a1)
    {
      case 1000:
        result = 2;
        break;
      case 1001:
        result = 3;
        break;
      case 1002:
        result = 4;
        break;
      case 1003:
        result = 6;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t INStickerTypeGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 5)
    return qword_18C312CB8[a2 - 1];
  else
    return 0;
}

const __CFString *INStickerTypeGetName(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;

  switch(a1)
  {
    case 1000:
      result = CFSTR("memoji");
      break;
    case 1001:
      result = CFSTR("appBased");
      break;
    case 1002:
      result = CFSTR("generated");
      break;
    case 1003:
      result = CFSTR("custom");
      break;
    default:
      v2 = CFSTR("generic");
      if (a1 != 2)
        v2 = CFSTR("unknown");
      if (a1 == 1)
        result = CFSTR("emoji");
      else
        result = v2;
      break;
  }
  return result;
}

uint64_t INStickerTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("emoji")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("memoji")) & 1) != 0)
  {
    v2 = 1000;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("appBased")) & 1) != 0)
  {
    v2 = 1001;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("generated")) & 1) != 0)
  {
    v2 = 1002;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("generic")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("custom")))
  {
    v2 = 1003;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INStickerTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1000:
      v4 = CFSTR("memoji");
      goto LABEL_11;
    case 1001:
      v4 = CFSTR("app based");
      goto LABEL_11;
    case 1002:
      v4 = CFSTR("generated");
      goto LABEL_11;
    case 1003:
      v4 = CFSTR("custom");
      goto LABEL_11;
    default:
      if (a1 == 2)
      {
        v4 = CFSTR("generic");
      }
      else
      {
        if (a1 != 1)
        {
          v5 = 0;
          goto LABEL_12;
        }
        v4 = CFSTR("emoji");
      }
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:

      return v5;
  }
}

uint64_t ADClientAddValueForScalarKey()
{
  return MEMORY[0x1E0CF63A0]();
}

uint64_t ADClientClearScalarKey()
{
  return MEMORY[0x1E0CF63B0]();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return MEMORY[0x1E0CF63C0]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1E0C97FF8](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1E0C98060]();
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1E0C98088](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFArrayRef)MEMORY[0x1E0C98098](bundle, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98100](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1E0C987B8](allocator, localeID);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BD68](color);
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x1E0C9E300]((__n128)coord, *(__n128 *)&coord.longitude);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return MEMORY[0x1E0CFA360]();
}

uint64_t CPPhoneNumberCopyNetworkCountryCode()
{
  return MEMORY[0x1E0CFA370]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1E0CFA6C0]();
}

uint64_t GEOLocationReadAllFrom()
{
  return MEMORY[0x1E0D26628]();
}

uint64_t GEOMapItemStorageReadAllFrom()
{
  return MEMORY[0x1E0D26660]();
}

uint64_t GEOPDPlaceReadAllFrom()
{
  return MEMORY[0x1E0D26788]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MISAppApprovalState()
{
  return MEMORY[0x1E0DE7160]();
}

uint64_t MISEnumerateInstalledProvisioningProfiles()
{
  return MEMORY[0x1E0DE7198]();
}

uint64_t MISProfileGetValue()
{
  return MEMORY[0x1E0DE71D8]();
}

uint64_t MISProvisioningProfileGetDeveloperCertificates()
{
  return MEMORY[0x1E0DE71F0]();
}

uint64_t MISProvisioningProfileProvisionsAllDevices()
{
  return MEMORY[0x1E0DE7228]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

Protocol *__cdecl NSProtocolFromString(NSString *namestr)
{
  return (Protocol *)MEMORY[0x1E0CB3118](namestr);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1E0D82C68]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1E0D82DD8]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1E0D82DE0]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1E0D82DE8]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1E0D82DF0]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1E0D82DF8]();
}

uint64_t PBRepeatedInt32Set()
{
  return MEMORY[0x1E0D82E08]();
}

uint64_t PNCreateFormattedStringWithCountry()
{
  return MEMORY[0x1E0CFA9D0]();
}

uint64_t PNPhoneNumbersEqual()
{
  return MEMORY[0x1E0CFA9E0]();
}

CFStringRef SecCertificateCopySubjectSummary(SecCertificateRef certificate)
{
  return (CFStringRef)MEMORY[0x1E0CD5FF8](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t TCCAccessCheckAuditToken()
{
  return MEMORY[0x1E0DB0F90]();
}

uint64_t TCCAccessCopyInformationForBundle()
{
  return MEMORY[0x1E0DB0FC0]();
}

uint64_t TCCAccessPreflight()
{
  return MEMORY[0x1E0DB0FF0]();
}

uint64_t TCCAccessRequest()
{
  return MEMORY[0x1E0DB1018]();
}

uint64_t TCCAccessRestricted()
{
  return MEMORY[0x1E0DB1048]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x1E0C99F70]();
}

uint64_t _CFBundleCreateUnique()
{
  return MEMORY[0x1E0C99FF0]();
}

uint64_t _CFLocaleCopyPreferred()
{
  return MEMORY[0x1E0C9A210]();
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return MEMORY[0x1E0C9A5B0]();
}

uint64_t _CFURLCopySecurityScopeFromFileURL()
{
  return MEMORY[0x1E0C9A678]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

void operator delete(void *__p)
{
  off_1E2288098(__p);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E22880A0(__sz);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1E0DE7A80](cls, outCount);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1E0DE7AD0](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F80](source);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1E0DE7CD8](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C50](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

char *__cdecl property_copyAttributeValue(objc_property_t property, const char *attributeName)
{
  return (char *)MEMORY[0x1E0DE8060](property, attributeName);
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8068](property);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8070](property);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x1E0C851B0]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1E0C855F0](__stringp, __delim);
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

uint64_t xpc_get_instance()
{
  return MEMORY[0x1E0C86510]();
}

uint64_t objc_msgSenduint64_tValueForAttribute_(void *a1, const char *a2, ...)
{
  return MEMORY[0x1E0DE7D20](a1, seluint64_tValueForAttribute_);
}

