id getCSSearchableIndexClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCSSearchableIndexClass_softClass;
  v7 = getCSSearchableIndexClass_softClass;
  if (!getCSSearchableIndexClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCSSearchableIndexClass_block_invoke;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getCSSearchableIndexClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18BEBE2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL INDescriptorContainsBundleIdentifiers(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
  {
    v3 = 1;
  }
  else
  {
    objc_msgSend(v1, "extensionBundleIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "length") != 0;

  }
  return v3;
}

uint64_t INCodableScalarAttributeTypeFromString(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  v3 = a1;
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("Double"));
  if (a2 && (v4 & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = objc_msgSend(v3, "isEqualToString:", CFSTR("Int32"));
    if (a2 && (v6 & 1) != 0)
    {
      v5 = 2;
    }
    else
    {
      v7 = objc_msgSend(v3, "isEqualToString:", CFSTR("Int64"));
      if (a2 && (v7 & 1) != 0)
      {
        v5 = 3;
      }
      else
      {
        v8 = objc_msgSend(v3, "isEqualToString:", CFSTR("Bool"));
        if (a2 && (v8 & 1) != 0)
        {
          v5 = 6;
        }
        else if ((objc_msgSend(v3, "isEqualToString:", CFSTR("String")) & 1) != 0)
        {
          v5 = 7;
        }
        else if (objc_msgSend(v3, "isEqualToString:", CFSTR("Data")))
        {
          v5 = 8;
        }
        else
        {
          v5 = -1;
        }
      }
    }
  }

  return v5;
}

void sub_18BEC1420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

id INCodableAttributeMetadataClassWithMetadataTypeName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (INCodableAttributeMetadataClassWithMetadataTypeName_onceToken != -1)
      dispatch_once(&INCodableAttributeMetadataClassWithMetadataTypeName_onceToken, &__block_literal_global_7);
    objc_msgSend((id)INCodableAttributeMetadataClassWithMetadataTypeName_classForTypeName, "objectForKeyedSubscript:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCodableAttributeMetadataTypeNameWithTypeName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (INCodableAttributeMetadataTypeNameWithTypeName_onceToken != -1)
      dispatch_once(&INCodableAttributeMetadataTypeNameWithTypeName_onceToken, &__block_literal_global_95083);
    objc_msgSend((id)INCodableAttributeMetadataTypeNameWithTypeName_metadataTypeToAttributeNameMapping, "objectForKeyedSubscript:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t INCodableStringAttributeMetadataCapitalizationWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("None")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Words")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Sentences")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("AllCharacters")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _INIntentSchemaBuildIntentSlotDescriptionMap(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = (objc_class *)MEMORY[0x1E0C99E08];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithCapacity:", objc_msgSend(v2, "count"));
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___INIntentSchemaBuildIntentSlotDescriptionMap_block_invoke;
  v7[3] = &unk_1E2289620;
  v8 = v3;
  v4 = v3;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v7);

  v5 = (void *)objc_msgSend(v4, "copy");
  return v5;
}

id _INParameterCombinationsWithDictionary(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  INParameterCombination *v18;
  void *v19;
  INCodableLocalizationTable *v20;
  void *v21;
  INCodableLocalizationTable *v22;
  void *v23;
  id obj;
  id v26;
  id v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v27 = a2;
  v26 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v28 = v5;
  objc_msgSend(v5, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v30;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v30 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v10);
        objc_msgSend(v28, "objectForKeyedSubscript:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = (void *)MEMORY[0x1E0C99E60];
        objc_msgSend(v11, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E2295770);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "componentsSeparatedByString:", CFSTR(","));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setWithArray:", v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (_INParameterCombinationsWithDictionary_onceToken != -1)
          dispatch_once(&_INParameterCombinationsWithDictionary_onceToken, &__block_literal_global_227);
        objc_msgSend(v16, "filteredSetUsingPredicate:", _INParameterCombinationsWithDictionary_predicate);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        v18 = objc_alloc_init(INParameterCombination);
        objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("INIntentParameterCombinationUnsupportedPlatforms"));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[INParameterCombination updateWithDictionary:](v18, "updateWithDictionary:", v12);
        v20 = [INCodableLocalizationTable alloc];
        objc_msgSend(v27, "stringByDeletingPathExtension");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = -[INCodableLocalizationTable initWithBundleIdentifier:tableName:](v20, "initWithBundleIdentifier:tableName:", v26, v21);
        -[INParameterCombination _setLocalizationTable:](v18, "_setLocalizationTable:", v22);

        objc_msgSend(v6, "setObject:forKeyedSubscript:", v18, v17);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v8);
  }

  v23 = (void *)objc_msgSend(v6, "copy");
  return v23;
}

void sub_18BECD108(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id INIntentDefinitionNamespacedName(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), a1, v3);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v3;
  }
  v6 = v5;

  return v6;
}

id INIntentSlotValueTransformFromMediaItemValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMediaItemValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t INAppCanDonateIntent(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t CanDonateIntent;

  v3 = (void *)MEMORY[0x1E0CA5890];
  v4 = a2;
  objc_msgSend(v3, "bundleProxyForIdentifier:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CanDonateIntent = INBundleProxyCanDonateIntent(v5, v4);

  return CanDonateIntent;
}

uint64_t INBundleProxyCanDonateIntent(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;

  v3 = a2;
  _INContainingBundleProxyWithBundleProxy(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    +[INAppInfo appInfoWithAppProxy:](INAppInfo, "appInfoWithAppProxy:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "supportedActionsByExtensions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "containsObject:", v3);

    if ((v7 & 1) != 0)
    {

LABEL_8:
      v8 = 1;
      goto LABEL_9;
    }
    objc_msgSend(v4, "if_userActivityTypes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "containsObject:", v3);

    if ((v10 & 1) != 0)
      goto LABEL_8;
  }
  else
  {

    v4 = 0;
  }
  v8 = 0;
LABEL_9:

  return v8;
}

id _INContainingBundleProxyWithBundleProxy(void *a1)
{
  id v1;
  void *v2;
  char isKindOfClass;
  id v4;

  v1 = a1;
  objc_msgSend(v1, "bundleType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CA5808]))
  {

    goto LABEL_6;
  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  if (!v1)
  {
LABEL_7:
    v4 = v1;
    goto LABEL_8;
  }
  objc_msgSend(v1, "containingBundle");
  v4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_8:
  return v4;
}

uint64_t _INPBIntentMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBString *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_259;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserUtterance:", v18, 0, 0);
        goto LABEL_152;
      case 2u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLaunchId:", v18);
        goto LABEL_152;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_182:
        objc_msgSend(a1, "setBackgroundLaunch:", v28 != 0, v133, v134);
        goto LABEL_153;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_186:
        objc_msgSend(a1, "setConfirmed:", v34 != 0);
        goto LABEL_153;
      case 5u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIntentId:", v18);
        goto LABEL_152;
      case 6u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_191;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
        else
          v44 = v40;
LABEL_191:
        objc_msgSend(a1, "setTriggerMethod:", v44, v133, v134);
        goto LABEL_153;
      case 7u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSystemExtensionBundleId:", v18);
        goto LABEL_152;
      case 8u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIntentDescription:", v18);
        goto LABEL_152;
      case 9u:
        v18 = objc_alloc_init(_INPBPair);
        v133 = 0;
        v134 = 0;
        if (!PBReaderPlaceMark() || !_INPBPairReadFrom(v18, a2))
          goto LABEL_259;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addParameterImages:", v18, 0, 0);
        goto LABEL_152;
      case 0xAu:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNanoLaunchId:", v18);
        goto LABEL_152;
      case 0xBu:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v51 = 0;
                goto LABEL_196;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
        else
          v51 = v47;
LABEL_196:
        objc_msgSend(a1, "setIntentCategory:", v51, v133, v134);
        goto LABEL_153;
      case 0xCu:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSuggestedInvocationPhrase:", v18);
        goto LABEL_152;
      case 0xDu:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v58 = 0;
                goto LABEL_201;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
        else
          v58 = v54;
LABEL_201:
        objc_msgSend(a1, "setExecutionContext:", v58, v133, v134);
        goto LABEL_153;
      case 0xEu:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setOriginatingDeviceIdsIdentifier:", v18);
        goto LABEL_152;
      case 0xFu:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v61 = 0;
                goto LABEL_205;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v61 = 0;
LABEL_205:
        objc_msgSend(a1, "setUserConfirmationRequired:", v61 != 0);
        goto LABEL_153;
      case 0x10u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCategoryVerb:", v18);
        goto LABEL_152;
      case 0x11u:
        v18 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && (_INPBImageValueReadFrom(v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDefaultImageValue:", v18, 0, 0);
LABEL_152:

LABEL_153:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_259:

        return 0;
      case 0x12u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSystemUIExtensionBundleId:", v18);
        goto LABEL_152;
      case 0x13u:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v69 + 1;
            v67 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v14 = v66++ >= 9;
              if (v14)
              {
                v67 = 0;
                goto LABEL_209;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v67 = 0;
LABEL_209:
        objc_msgSend(a1, "setIsPrimaryDisplayDisabled:", v67 != 0);
        goto LABEL_153;
      case 0x14u:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        while (2)
        {
          v74 = *v3;
          v75 = *(_QWORD *)(a2 + v74);
          if (v75 == -1 || v75 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v75);
            *(_QWORD *)(a2 + v74) = v75 + 1;
            v73 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v14 = v72++ >= 9;
              if (v14)
              {
                v77 = 0;
                goto LABEL_214;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v77 = 0;
        else
          v77 = v73;
LABEL_214:
        objc_msgSend(a1, "setIdiom:", v77, v133, v134);
        goto LABEL_153;
      case 0x15u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setOriginatingDeviceRapportEffectiveId:", v18);
        goto LABEL_152;
      case 0x16u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setOriginatingDeviceRapportMediaSystemId:", v18);
        goto LABEL_152;
      case 0x17u:
        v78 = 0;
        v79 = 0;
        v80 = 0;
        while (2)
        {
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v82 + 1;
            v80 |= (unint64_t)(v83 & 0x7F) << v78;
            if (v83 < 0)
            {
              v78 += 7;
              v14 = v79++ >= 9;
              if (v14)
              {
                v80 = 0;
                goto LABEL_218;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v80 = 0;
LABEL_218:
        objc_msgSend(a1, "setIsOwnedByCurrentUser:", v80 != 0);
        goto LABEL_153;
      case 0x18u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addForceNeedsValueForParameter:", v18);
        goto LABEL_152;
      case 0x19u:
        if (v16 != 2)
        {
          v127 = 0;
          v128 = 0;
          v129 = 0;
          while (1)
          {
            v130 = *v3;
            v131 = *(_QWORD *)(a2 + v130);
            if (v131 == -1 || v131 >= *(_QWORD *)(a2 + *v4))
              break;
            v132 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v131);
            *(_QWORD *)(a2 + v130) = v131 + 1;
            v129 |= (unint64_t)(v132 & 0x7F) << v127;
            if (v132 < 0)
            {
              v127 += 7;
              v14 = v128++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_256;
          }
          *(_BYTE *)(a2 + *v5) = 1;
          goto LABEL_256;
        }
        v133 = 0;
        v134 = 0;
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v84 = 0;
          v85 = 0;
          v86 = 0;
          while (1)
          {
            v87 = *v3;
            v88 = *(_QWORD *)(a2 + v87);
            if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
              break;
            v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v88);
            *(_QWORD *)(a2 + v87) = v88 + 1;
            v86 |= (unint64_t)(v89 & 0x7F) << v84;
            if (v89 < 0)
            {
              v84 += 7;
              v14 = v85++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_131;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_131:
          PBRepeatedInt32Add();
        }
        goto LABEL_178;
      case 0x1Au:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addAirPlayRouteIds:", v18);
        goto LABEL_152;
      case 0x1Bu:
        PBReaderReadData();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAuditTokenData:", v18);
        goto LABEL_152;
      case 0x1Cu:
        v90 = 0;
        v91 = 0;
        v92 = 0;
        while (2)
        {
          v93 = *v3;
          v94 = *(_QWORD *)(a2 + v93);
          if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v94);
            *(_QWORD *)(a2 + v93) = v94 + 1;
            v92 |= (unint64_t)(v95 & 0x7F) << v90;
            if (v95 < 0)
            {
              v90 += 7;
              v14 = v91++ >= 9;
              if (v14)
              {
                v92 = 0;
                goto LABEL_222;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v92 = 0;
LABEL_222:
        objc_msgSend(a1, "setShowsWhenRun:", v92 != 0);
        goto LABEL_153;
      case 0x1Du:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEndpointId:", v18);
        goto LABEL_152;
      case 0x1Eu:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMediaRouteId:", v18);
        goto LABEL_152;
      case 0x1Fu:
        v96 = 0;
        v97 = 0;
        v98 = 0;
        while (2)
        {
          v99 = *v3;
          v100 = *(_QWORD *)(a2 + v99);
          if (v100 == -1 || v100 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v100);
            *(_QWORD *)(a2 + v99) = v100 + 1;
            v98 |= (unint64_t)(v101 & 0x7F) << v96;
            if (v101 < 0)
            {
              v96 += 7;
              v14 = v97++ >= 9;
              if (v14)
              {
                v102 = 0;
                goto LABEL_227;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v102 = 0;
        else
          v102 = v98;
LABEL_227:
        objc_msgSend(a1, "setVersioningHash:", v102, v133, v134);
        goto LABEL_153;
      case 0x20u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPreferredAudioOutputRouteId:", v18);
        goto LABEL_152;
      case 0x21u:
        v103 = 0;
        v104 = 0;
        v105 = 0;
        while (2)
        {
          v106 = *v3;
          v107 = *(_QWORD *)(a2 + v106);
          if (v107 == -1 || v107 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v107);
            *(_QWORD *)(a2 + v106) = v107 + 1;
            v105 |= (unint64_t)(v108 & 0x7F) << v103;
            if (v108 < 0)
            {
              v103 += 7;
              v14 = v104++ >= 9;
              if (v14)
              {
                v105 = 0;
                goto LABEL_231;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v105 = 0;
LABEL_231:
        objc_msgSend(a1, "setMsLimitReached:", v105 != 0);
        goto LABEL_153;
      case 0x22u:
        v109 = 0;
        v110 = 0;
        v111 = 0;
        while (2)
        {
          v112 = *v3;
          v113 = *(_QWORD *)(a2 + v112);
          if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v113 + 1;
            v111 |= (unint64_t)(v114 & 0x7F) << v109;
            if (v114 < 0)
            {
              v109 += 7;
              v14 = v110++ >= 9;
              if (v14)
              {
                v111 = 0;
                goto LABEL_235;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v111 = 0;
LABEL_235:
        objc_msgSend(a1, "setEndpointMediaPlaybackEnabled:", v111 != 0);
        goto LABEL_153;
      case 0x23u:
        v115 = 0;
        v116 = 0;
        v117 = 0;
        while (2)
        {
          v118 = *v3;
          v119 = *(_QWORD *)(a2 + v118);
          if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v119);
            *(_QWORD *)(a2 + v118) = v119 + 1;
            v117 |= (unint64_t)(v120 & 0x7F) << v115;
            if (v120 < 0)
            {
              v115 += 7;
              v14 = v116++ >= 9;
              if (v14)
              {
                v117 = 0;
                goto LABEL_239;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v117 = 0;
LABEL_239:
        objc_msgSend(a1, "setBypassAppProtectionAuthentication:", v117 != 0);
        goto LABEL_153;
      default:
        if ((v10 >> 3) == 9999)
        {
          if (v16 == 2)
          {
            v133 = 0;
            v134 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v20 = 0;
              v21 = 0;
              v22 = 0;
              while (1)
              {
                v23 = *v3;
                v24 = *(_QWORD *)(a2 + v23);
                if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                  break;
                v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
                *(_QWORD *)(a2 + v23) = v24 + 1;
                v22 |= (unint64_t)(v25 & 0x7F) << v20;
                if (v25 < 0)
                {
                  v20 += 7;
                  v14 = v21++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_35;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
              PBRepeatedInt32Add();
            }
LABEL_178:
            PBReaderRecallMark();
          }
          else
          {
            v121 = 0;
            v122 = 0;
            v123 = 0;
            while (1)
            {
              v124 = *v3;
              v125 = *(_QWORD *)(a2 + v124);
              if (v125 == -1 || v125 >= *(_QWORD *)(a2 + *v4))
                break;
              v126 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v125);
              *(_QWORD *)(a2 + v124) = v125 + 1;
              v123 |= (unint64_t)(v126 & 0x7F) << v121;
              if (v126 < 0)
              {
                v121 += 7;
                v14 = v122++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_256;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_256:
            PBRepeatedInt32Add();
          }
        }
        else if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
          return 0;
        }
        goto LABEL_153;
    }
  }
}

uint64_t INIntentCategoryWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("information")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playAudio")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playVideo")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("order")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("navigation")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("start")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("share")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("create")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("search")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("toggle")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("download")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("log")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("checkIn")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("workflow")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("request")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("set")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("callAudio")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("callVideo")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playSound")) & 1) != 0)
  {
    v2 = 19;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("userActivity")))
  {
    v2 = 20;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSchemaGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1, "hasPrefix:", CFSTR("IN")))
    {
      objc_msgSend(v1, "substringFromIndex:", 2);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSchemaGetIntentDescriptionWithName(v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INIntentSchemaGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    if (INIntentSchemaGetIntentDescriptionWithName_onceToken != -1)
      dispatch_once(&INIntentSchemaGetIntentDescriptionWithName_onceToken, &__block_literal_global_451);
    objc_msgSend((id)INIntentSchemaGetIntentDescriptionWithName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

    switch(v3)
    {
      case 1:
        INAlarmDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        INCalendarEventDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        INCallsDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 4:
        INCarPlayDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 5:
        INContactDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 6:
        INFilesDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 7:
        INFindDeviceDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 8:
        INFocusStatusDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 9:
        INGeoDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 10:
        INHomeCommunicationDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 11:
        INHomeKitDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 12:
        INMediaDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 13:
        INMessagesDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 14:
        INNotebookDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 15:
        INPaymentsDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 16:
        INPhotosDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 17:
        INRRaaSDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 18:
        INRadioDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 19:
        INReservationsDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 20:
        INRidesharingDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 21:
        INSettingsDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 22:
        INTimersDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 23:
        INVisualCodeDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 24:
        INVoiceCommandsDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 25:
        INWellnessDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 26:
        INWorkflowDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 27:
        INWorkoutsDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 28:
        INGenericDomainGetIntentDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_6;
    }
    v5 = (void *)v4;
  }
  else
  {
LABEL_6:
    v5 = 0;
  }

  return v5;
}

id INMediaDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMediaDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMediaDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3615);
    objc_msgSend((id)sMediaDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

INIntent *INIntentWithTypedIntent(void *a1)
{
  INIntent *v1;
  void *v2;
  INIntent *v3;
  INIntent *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = a1;
  -[INIntent backingStore](v1, "backingStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1;
  if (v2)
  {
    objc_opt_class();
    v3 = v1;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v4 = [INIntent alloc];
      -[INIntent identifier](v1, "identifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = -[INIntent initWithIdentifier:backingStore:](v4, "initWithIdentifier:backingStore:", v5, v2);

      -[INIntent launchId](v1, "launchId");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[INIntent _setLaunchId:](v3, "_setLaunchId:", v6);

      -[INIntent extensionBundleId](v1, "extensionBundleId");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[INIntent _setExtensionBundleId:](v3, "_setExtensionBundleId:", v7);

      -[INIntent suggestedInvocationPhrase](v1, "suggestedInvocationPhrase");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[INIntent setSuggestedInvocationPhrase:](v3, "setSuggestedInvocationPhrase:", v8);

      -[INIntent _parameterCombinations](v1, "_parameterCombinations");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[INIntent _setParameterCombinations:](v3, "_setParameterCombinations:", v9);

      objc_msgSend(v2, "_objectDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      _INUntypePropertiesWithCodableDescription(v3, v10);

    }
  }

  return v3;
}

void _INUntypePropertiesWithCodableDescription(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend(a2, "attributes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allValues");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v36;
    v26 = v5;
    v27 = v3;
    v25 = *(_QWORD *)v36;
    do
    {
      v9 = 0;
      v28 = v7;
      do
      {
        if (*(_QWORD *)v36 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v35 + 1) + 8 * v9);
        if (v10)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v10, "propertyName");
            v11 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "codableDescription");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = v10;
            v13 = objc_msgSend(v10, "modifier");
            v30 = (void *)v11;
            objc_msgSend(v3, "valueForKey:", v11);
            v14 = objc_claimAutoreleasedReturnValue();
            v15 = (id)v14;
            if (v13)
            {
              if (v14)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  _INObjectWithTypedObject(v15, v12);
                  v16 = objc_claimAutoreleasedReturnValue();

                  objc_msgSend(v3, "setValue:forKey:", v16, v11);
                  v15 = (id)v16;
                }
              }
            }
            else if (v14)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                v31 = 0u;
                v32 = 0u;
                v33 = 0u;
                v34 = 0u;
                v15 = v15;
                v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
                if (v18)
                {
                  v19 = v18;
                  v20 = *(_QWORD *)v32;
                  do
                  {
                    for (i = 0; i != v19; ++i)
                    {
                      if (*(_QWORD *)v32 != v20)
                        objc_enumerationMutation(v15);
                      v22 = *(id *)(*((_QWORD *)&v31 + 1) + 8 * i);
                      if (v22 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                      {
                        _INObjectWithTypedObject(v22, v12);
                        v23 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v17, "addObject:", v23);

                      }
                      else
                      {

                        objc_msgSend(v17, "addObject:", v22);
                      }
                    }
                    v19 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
                  }
                  while (v19);
                }

                v24 = (void *)objc_msgSend(v17, "copy");
                v3 = v27;
                objc_msgSend(v27, "setValue:forKey:", v24, v30);

                v8 = v25;
                v5 = v26;
                v7 = v28;
              }
            }

            v10 = v29;
          }
        }

        ++v9;
      }
      while (v9 != v7);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v7);
  }

}

uint64_t _INIsIntentValidForSuggestion(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;

  v1 = a1;
  if (objc_msgSend(v1, "_type") == 2)
  {
    objc_msgSend(v1, "_codableDescription");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isDeprecated");

    if (v3)
    {
      NSLog((NSString *)CFSTR("Cannot create shortcut from intent (%@) because it has been deprecated"), v1);
LABEL_13:
      v6 = 0;
      goto LABEL_14;
    }
  }
  objc_msgSend(v1, "_validParameterCombinations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (!v5)
  {
    NSLog((NSString *)CFSTR("Cannot create shortcut from intent (%@) because it has no valid parameter combinations"), v1);
    goto LABEL_13;
  }
  if ((objc_msgSend(v1, "_hasTitle") & 1) == 0)
  {
    objc_msgSend(v1, "_nonNilParameters");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "mutableCopy");

    objc_msgSend((id)objc_opt_class(), "_ignoredParameters");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "minusSet:", v9);

    if (objc_msgSend(v8, "count"))
    {
      objc_msgSend(v8, "allObjects");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "componentsJoinedByString:", CFSTR(", "));
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v11 = CFSTR("(No Parameters)");
    }
    objc_msgSend(v1, "_className");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog((NSString *)CFSTR("Cannot create shortcut from intent (%@) because title is empty. Please make sure that your intent definition includes the following shortcut type for %@: %@."), v1, v12, v11);

    goto LABEL_13;
  }
  v6 = 1;
LABEL_14:

  return v6;
}

id INContainingBundleIdentifierForCurrentProcess()
{
  void *v0;
  uint64_t v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForCurrentProcess");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v0, "containingBundle");
    v1 = objc_claimAutoreleasedReturnValue();

    v0 = (void *)v1;
  }
  objc_msgSend(v0, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id INContainingAppProxyForCurrentProcess()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForCurrentProcess");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _INContainingBundleProxyWithBundleProxy(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v2 = v1;
    else
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  v3 = v2;

  return v3;
}

id INRemoveItemAtPath(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;

  v1 = (void *)MEMORY[0x1E0CB3620];
  v2 = a1;
  objc_msgSend(v1, "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(v3, "removeItemAtPath:error:", v2, &v7);

  v4 = v7;
  objc_msgSend(v4, "domain");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v3) = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0CB28A8]);

  if ((_DWORD)v3 && (objc_msgSend(v4, "code") & 0xFFFFFFFFFFFFFEFFLL) == 4)
  {

    v4 = 0;
  }
  return v4;
}

void _CleanUpDirectoryAsNeeded(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v6 = a1;
  v3 = a2;
  if ((objc_msgSend(v6, "isEqualToString:", v3) & 1) == 0)
  {
    v4 = objc_retainAutorelease(v6);
    if (!rmdir((const char *)objc_msgSend(v4, "fileSystemRepresentation")))
    {
      objc_msgSend(v4, "stringByDeletingLastPathComponent");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      _CleanUpDirectoryAsNeeded(v5, v3);

    }
  }

}

void sub_18BED5EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id INUserSupportDirectoryPath()
{
  if (INUserSupportDirectoryPath_once != -1)
    dispatch_once(&INUserSupportDirectoryPath_once, &__block_literal_global_52_69000);
  return (id)INUserSupportDirectoryPath_sUserSupportDirectoryPath;
}

id INIntentSlotValueTransformFromDataStrings(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDataString(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromStrings(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromString(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INLocalizedDeferredString(void *a1, id *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  _QWORD v45[4];
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD v53[4];
  _QWORD v54[5];

  v15 = a1;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v43 = v15;
  v44 = 0;
  v41 = v17;
  v42 = v16;
  v40 = v20;
  INLocalizedFormat(v15, v16, v17, v18, v20, v19, v21, &v44);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v44;
  v24 = v22;
  v25 = v23;
  v26 = *a2;
  if (objc_msgSend(v26, "count"))
  {
    v38 = v19;
    v39 = v18;
    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v26, "count"));
    v54[0] = 0;
    v54[1] = v54;
    v54[2] = 0x2020000000;
    v54[3] = 0;
    v53[0] = 0;
    v53[1] = v53;
    v53[2] = 0x2020000000;
    v53[3] = 0;
    v28 = (void *)objc_msgSend(v24, "mutableCopy");
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = __INPopulateFormatStringWithArguments_block_invoke;
    v45[3] = &unk_1E228B998;
    v51 = v54;
    v29 = v24;
    v46 = v29;
    v47 = v26;
    v48 = v25;
    v30 = v28;
    v49 = v30;
    v52 = v53;
    v31 = v27;
    v50 = v31;
    v32 = (void *)MEMORY[0x18D7812C4](v45);
    INSharedFormatRegularExpression();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "enumerateMatchesInString:options:range:usingBlock:", v29, 0, 0, objc_msgSend(v29, "length"), v32);

    objc_msgSend(v30, "replaceOccurrencesOfString:withString:options:range:", CFSTR("%%"), CFSTR("%"), 0, 0, objc_msgSend(v30, "length"));
    v34 = *a2;
    *a2 = v31;
    v35 = v31;

    v36 = v30;
    _Block_object_dispose(v53, 8);
    _Block_object_dispose(v54, 8);
    v19 = v38;
    v18 = v39;
  }
  else
  {
    v36 = v24;
  }

  return v36;
}

void sub_18BED768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 120), 8);
  _Unwind_Resume(a1);
}

id INSharedFormatRegularExpression()
{
  if (INSharedFormatRegularExpression_onceToken != -1)
    dispatch_once(&INSharedFormatRegularExpression_onceToken, &__block_literal_global_24705);
  return (id)INSharedFormatRegularExpression_regularExpression;
}

id INLocalizedFormat(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  __CFBundle *v22;
  __CFBundle *v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  id v57;
  __int16 v58;
  id v59;
  __int16 v60;
  id v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = (__CFBundle *)INCreateUniqueBundle(v17, v18);
  if (v22)
  {
    v23 = v22;
    INLocalizedFormatForBundle(v22, v15, v16, v19, a8);
    v24 = (id)objc_claimAutoreleasedReturnValue();
    CFRelease(v23);
  }
  else
  {
    if (!v17 || !v21)
      goto LABEL_14;
    v48 = 0;
    v49 = &v48;
    v50 = 0x3032000000;
    v51 = __Block_byref_object_copy__24711;
    v52 = __Block_byref_object_dispose__24712;
    v53 = 0;
    v42 = 0;
    v43 = &v42;
    v44 = 0x3032000000;
    v45 = __Block_byref_object_copy__24711;
    v46 = __Block_byref_object_dispose__24712;
    v47 = 0;
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v17);
    v24 = (id)objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = __INLocalizedFormat_block_invoke;
    v34[3] = &unk_1E228B950;
    v31 = v17;
    v35 = v31;
    v36 = v18;
    v40 = &v48;
    v25 = v15;
    v37 = v25;
    v38 = v16;
    v39 = v19;
    v41 = &v42;
    v33 = 0;
    objc_msgSend(v21, "accessBundleContentForBundleIdentifiers:withBlock:error:", v24, v34, &v33);
    v30 = v25;
    v32 = v33;

    v26 = v49[5];
    if (v26)
    {
      if (a8)
        *a8 = objc_retainAutorelease((id)v43[5]);
      v24 = (id)v49[5];
    }
    else if (v32)
    {
      v29 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v55 = "INLocalizedFormat";
        v56 = 2114;
        v57 = v31;
        v58 = 2114;
        v59 = v30;
        v60 = 2114;
        v61 = v32;
        _os_log_error_impl(&dword_18BEBC000, v29, OS_LOG_TYPE_ERROR, "%s Failed to access bundle %{public}@ to localize \"%{public}@\": %{public}@", buf, 0x2Au);
      }
    }

    _Block_object_dispose(&v42, 8);
    _Block_object_dispose(&v48, 8);

    if (!v26)
    {
LABEL_14:
      if (v20)
      {
        v27 = v20;
      }
      else
      {
        if (a8)
        {
          objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
          *a8 = (id)objc_claimAutoreleasedReturnValue();
        }
        v27 = v15;
      }
      v24 = v27;
    }
  }

  return v24;
}

void sub_18BED7A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

__CFString *INLocalizedFormatForBundle(__CFBundle *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  __CFString *v9;
  __CFString *v10;
  id v11;
  void *v12;
  void *v13;
  const __CFArray *v14;
  CFArrayRef v15;
  const __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  _QWORD *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  if (v11)
  {
    v25 = a5;
    objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v12, "mutableCopy");

    objc_msgSend(v13, "insertObject:atIndex:", v11, 0);
    v14 = CFBundleCopyBundleLocalizations(a1);
    v26 = v13;
    v15 = CFBundleCopyLocalizationsForPreferences(v14, (CFArrayRef)v13);
    CFRelease(v14);
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v16 = v15;
    v17 = -[__CFArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v28;
      while (2)
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v28 != v19)
            objc_enumerationMutation(v16);
          v21 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
          v22 = CFBundleCopyLocalizedStringForLocalization();
          if (v22)
          {
            v23 = (__CFString *)v22;
            if (v25)
            {
              objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v21);
              *v25 = (id)objc_claimAutoreleasedReturnValue();
            }

            goto LABEL_14;
          }
        }
        v18 = -[__CFArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
        if (v18)
          continue;
        break;
      }
    }

    v23 = v9;
LABEL_14:

  }
  else
  {
    if (a5)
    {
      objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    v23 = (__CFString *)CFBundleCopyLocalizedString(a1, v9, v9, v10);
  }

  return v23;
}

uint64_t INCreateUniqueBundle(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  uint64_t Unique;
  void *v14;
  void *v15;
  int v16;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForCurrentProcess");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bundleIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", v3);

    if ((v7 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForIdentifier:", v3);
      v8 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v8;
    }
    objc_msgSend(v5, "bundleURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "isFileURL")
      && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v9, "path"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v12 = objc_msgSend(v10, "isReadableFileAtPath:", v11),
          v11,
          v10,
          (v12 & 1) != 0))
    {
      Unique = _CFBundleCreateUnique();

      if (Unique)
        goto LABEL_13;
    }
    else
    {

    }
  }
  if (objc_msgSend(v4, "isFileURL")
    && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v4, "path"),
        v15 = (void *)objc_claimAutoreleasedReturnValue(),
        v16 = objc_msgSend(v14, "isReadableFileAtPath:", v15),
        v15,
        v14,
        v16))
  {
    Unique = _CFBundleCreateUnique();
  }
  else
  {
    Unique = 0;
  }
LABEL_13:

  return Unique;
}

void sub_18BED91B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t INCodablePlacemarkAttributeMetadataTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Name")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Address")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("City")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t INCodableDateComponentsAttributeMetadataStyleFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Full")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Long")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Medium")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Short")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("No")))
  {
    v2 = 0;
  }
  else
  {
    v2 = 4;
  }

  return v2;
}

uint64_t INCodableDateComponentsAttributeMetadataTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("DateTime")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Date")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Time")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t INCodableDateComponentsAttributeMetadataFormatFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Style")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Relative")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Template")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t INCodableAttributeMetadataInputTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Field")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Stepper")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Slider")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t INCodableTimeIntervalAttributeMetadataUnitWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Seconds")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Minutes")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Hours")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Days")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id _INVCVoiceShortcutClient()
{
  SEL v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 buf;
  Class (*v13)(uint64_t);
  void *v14;
  uint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = NSSelectorFromString((NSString *)CFSTR("standardClient"));
  v8 = 0;
  v9 = &v8;
  v10 = 0x2050000000;
  v1 = (void *)getVCVoiceShortcutClientClass_softClass;
  v11 = getVCVoiceShortcutClientClass_softClass;
  if (!getVCVoiceShortcutClientClass_softClass)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v13 = __getVCVoiceShortcutClientClass_block_invoke;
    v14 = &unk_1E22953C0;
    v15 = &v8;
    __getVCVoiceShortcutClientClass_block_invoke((uint64_t)&buf);
    v1 = (void *)v9[3];
  }
  v2 = v1;
  _Block_object_dispose(&v8, 8);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v2, "performSelector:", v0, v8);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "conformsToProtocol:", &unk_1EE0B83E0) & 1) != 0)
    {
      v4 = v3;
    }
    else
    {
      v6 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "_INVCVoiceShortcutClient";
        _os_log_fault_impl(&dword_18BEBC000, v6, OS_LOG_TYPE_FAULT, "%s VCVoiceShortcutClient doesn't conform to the INVCVoiceShortcutClient protocol.", (uint8_t *)&buf, 0xCu);
      }
      v4 = 0;
    }

  }
  else
  {
    v5 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "_INVCVoiceShortcutClient";
      _os_log_fault_impl(&dword_18BEBC000, v5, OS_LOG_TYPE_FAULT, "%s VCVoiceShortcutClient doesn't have a standardClient class method", (uint8_t *)&buf, 0xCu);
    }
    v4 = 0;
  }

  return v4;
}

void sub_18BEDB96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t INObjectIsConsideredNil(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  double v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
    goto LABEL_3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "doubleValue");
    if (v6 == 0.0 && (a2 & 1) != 0)
      goto LABEL_3;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend(v3, "length"))
    goto LABEL_3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "spokenPhrase");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "length"))
    {

    }
    else
    {
      objc_msgSend(v3, "vocabularyIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "length");

      if (!v9)
        goto LABEL_3;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_18;
  objc_msgSend(v3, "displayString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "length"))
  {

    goto LABEL_18;
  }
  objc_msgSend(v3, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "length");

  if (!v12)
  {
LABEL_3:
    v4 = 1;
    goto LABEL_4;
  }
LABEL_18:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v4 = 0;
    goto LABEL_4;
  }
  if (!objc_msgSend(v3, "count"))
    goto LABEL_3;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v13 = v3;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v19;
    while (2)
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v19 != v16)
          objc_enumerationMutation(v13);
        if (!INObjectIsConsideredNil(*(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v17), a2))
        {
          v4 = 0;
          goto LABEL_31;
        }
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v15)
        continue;
      break;
    }
  }
  v4 = 1;
LABEL_31:

LABEL_4:
  return v4;
}

Class __getVCVoiceShortcutClientClass_block_invoke(uint64_t a1)
{
  Class result;

  VoiceShortcutClientLibrary();
  result = objc_getClass("VCVoiceShortcutClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVCVoiceShortcutClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)VoiceShortcutClientLibrary();
  }
  return result;
}

uint64_t VoiceShortcutClientLibrary()
{
  uint64_t v0;
  void *v2;

  if (VoiceShortcutClientLibraryCore_frameworkLibrary_25871)
    return VoiceShortcutClientLibraryCore_frameworkLibrary_25871;
  VoiceShortcutClientLibraryCore_frameworkLibrary_25871 = _sl_dlopen();
  v0 = VoiceShortcutClientLibraryCore_frameworkLibrary_25871;
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary_25871)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id INKeyImageUtilitiesKeyImageBySubProducerComparison(void *a1, void *a2)
{
  id v3;
  id v4;
  char v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  char v20;

  v3 = a1;
  v4 = a2;
  v5 = objc_opt_respondsToSelector();
  v6 = MEMORY[0x1E0C809B0];
  v7 = (void *)MEMORY[0x1E0CB3880];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __INKeyImageUtilitiesKeyImageBySubProducerComparison_block_invoke;
  v18[3] = &unk_1E228CCD0;
  v20 = v5 & 1;
  v8 = v3;
  v19 = v8;
  objc_msgSend(v7, "predicateWithBlock:", v18);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "filteredArrayUsingPredicate:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v16[0] = v6;
  v16[1] = 3221225472;
  v16[2] = __INKeyImageUtilitiesKeyImageBySubProducerComparison_block_invoke_2;
  v16[3] = &unk_1E228CCF8;
  v17 = v8;
  v11 = v8;
  objc_msgSend(v10, "sortedArrayUsingComparator:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "firstObject");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "_keyImage");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

_INPBMediaItemValue *INIntentSlotValueTransformToMediaItemValue(void *a1)
{
  id v1;
  _INPBMediaItemValue *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  _INPBScoredValue *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  _INPBScoredValue *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _INPBMediaItemValue *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBMediaItemValue);
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setIdentifier:](v2, "setIdentifier:", v3);

    objc_msgSend(v1, "title");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setTitle:](v2, "setTitle:", v4);

    v5 = objc_msgSend(v1, "type");
    if (v5 >= 0x15)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = v5;
    -[_INPBMediaItemValue setType:](v2, "setType:", v6);
    objc_msgSend(v1, "artwork");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToImageValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setArtwork:](v2, "setArtwork:", v8);

    objc_msgSend(v1, "artist");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setArtist:](v2, "setArtist:", v9);

    objc_msgSend(v1, "topics");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v37 = v2;
    if (v10)
    {
      v11 = objc_alloc(MEMORY[0x1E0C99DE8]);
      objc_msgSend(v1, "topics");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)objc_msgSend(v11, "initWithCapacity:", objc_msgSend(v12, "count"));

      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      objc_msgSend(v1, "topics");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v43;
        do
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v43 != v16)
              objc_enumerationMutation(v13);
            v18 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i);
            v19 = objc_alloc_init(_INPBScoredValue);
            -[_INPBScoredValue setValue:](v19, "setValue:", v18);
            objc_msgSend(v1, "topics");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "objectForKey:", v18);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBScoredValue setScore:](v19, "setScore:", objc_msgSend(v21, "integerValue"));

            objc_msgSend(v10, "addObject:", v19);
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
        }
        while (v15);
      }

      v2 = v37;
    }
    -[_INPBMediaItemValue setTopics:](v2, "setTopics:", v10);

    objc_msgSend(v1, "namedEntities");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      v23 = objc_alloc(MEMORY[0x1E0C99DE8]);
      objc_msgSend(v1, "namedEntities");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_msgSend(v23, "initWithCapacity:", objc_msgSend(v24, "count"));

      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      objc_msgSend(v1, "namedEntities");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v39;
        do
        {
          for (j = 0; j != v27; ++j)
          {
            if (*(_QWORD *)v39 != v28)
              objc_enumerationMutation(v25);
            v30 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * j);
            v31 = objc_alloc_init(_INPBScoredValue);
            -[_INPBScoredValue setValue:](v31, "setValue:", v30);
            objc_msgSend(v1, "namedEntities");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "objectForKey:", v30);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBScoredValue setScore:](v31, "setScore:", objc_msgSend(v33, "integerValue"));

            objc_msgSend(v22, "addObject:", v31);
          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        }
        while (v27);
      }

      v2 = v37;
    }
    -[_INPBMediaItemValue setNamedEntities:](v2, "setNamedEntities:", v22);

    objc_msgSend(v1, "privateMediaItemValueData");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToPrivateMediaItemValueData(v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaItemValue setPrivateMediaItemValueData:](v2, "setPrivateMediaItemValueData:", v35);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

INMediaItem *INIntentSlotValueTransformFromMediaItemValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  INPrivateMediaItemValueData *v30;
  void *v31;
  INMediaItem *v32;
  uint64_t v34;
  void *v35;
  INMediaItem *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    objc_msgSend(v2, "topics");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v2, "topicsCount"));
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      objc_msgSend(v2, "topics");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v42;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v42 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v10, "score"));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "value");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "setObject:forKey:", v11, v12);

          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
        }
        while (v7);
      }

    }
    objc_msgSend(v2, "namedEntities");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v2, "namedEntitiesCount"));
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      objc_msgSend(v2, "namedEntities");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v38;
        do
        {
          for (j = 0; j != v16; ++j)
          {
            if (*(_QWORD *)v38 != v17)
              objc_enumerationMutation(v14);
            v19 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * j);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v19, "score"));
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "value");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "setObject:forKey:", v20, v21);

          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
        }
        while (v16);
      }

    }
    v36 = [INMediaItem alloc];
    objc_msgSend(v2, "identifier");
    v22 = objc_claimAutoreleasedReturnValue();
    v35 = (void *)v22;
    objc_msgSend(v2, "title");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v2, "hasType");
    v25 = objc_msgSend(v2, "type") - 1;
    if (v25 <= 0x13)
      v26 = v25 + 1;
    else
      v26 = 0;
    if (!v24)
      v26 = 0;
    v34 = v26;
    objc_msgSend(v2, "artwork");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromImageValue(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "artist");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "privateMediaItemValueData");
    v30 = (INPrivateMediaItemValueData *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromPrivateMediaItemValueData(v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[INMediaItem initWithIdentifier:title:type:artwork:artist:topics:namedEntities:privateMediaItemValueData:](v36, "initWithIdentifier:title:type:artwork:artist:topics:namedEntities:privateMediaItemValueData:", v22, v23, v34, v28, v29, v4, v13, v31);

  }
  else
  {
    v32 = 0;
  }

  return v32;
}

uint64_t INPrivacyEntitlementValidateValueMetadata(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v1 = a1;
  v2 = objc_msgSend(v1, "requiredEntitlementsCount");
  if (v2)
  {
    v3 = v2;
    for (i = 0; i != v3; ++i)
      objc_msgSend(v1, "requiredEntitlementAtIndex:", i);
  }

  return 1;
}

INPrivateMediaItemValueData *INIntentSlotValueTransformFromPrivateMediaItemValueData(INPrivateMediaItemValueData *a1)
{
  INPrivateMediaItemValueData *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  INPrivateMediaItemValueData *v22;
  INPrivateMediaItemValueData *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (a1)
  {
    v1 = a1;
    v22 = [INPrivateMediaItemValueData alloc];
    -[INPrivateMediaItemValueData recommendationId](v1, "recommendationId");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData assetInfo](v1, "assetInfo");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData sharedUserIdFromPlayableMusicAccount](v1, "sharedUserIdFromPlayableMusicAccount");
    v2 = objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData punchoutURI](v1, "punchoutURI");
    v3 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivateMediaItemValueData requiresSubscription](v1, "requiresSubscription"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData provider](v1, "provider");
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivateMediaItemValueData isAvailable](v1, "isAvailable"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivateMediaItemValueData isHardBan](v1, "isHardBan"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData bundleId](v1, "bundleId");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData universalResourceLink](v1, "universalResourceLink");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData providerAppName](v1, "providerAppName");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivateMediaItemValueData internalSignals](v1, "internalSignals");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1E0CB37E8];
    -[INPrivateMediaItemValueData ampConfidenceScore](v1, "ampConfidenceScore");
    objc_msgSend(v8, "numberWithFloat:");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INPrivateMediaItemValueData hasAmpConfidenceLevel](v1, "hasAmpConfidenceLevel");
    v11 = -[INPrivateMediaItemValueData ampConfidenceLevel](v1, "ampConfidenceLevel");
    v21 = (void *)v5;
    v26 = (void *)v2;
    v27 = (void *)v3;
    if (v10)
    {
      v12 = v24;
      switch(v11)
      {
        case 30:
          v13 = 3;
          goto LABEL_9;
        case 20:
          v13 = 2;
          goto LABEL_9;
        case 10:
          v13 = 1;
LABEL_9:
          -[INPrivateMediaItemValueData pegasusMetaData](v1, "pegasusMetaData");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          -[INPrivateMediaItemValueData mediaSubItems](v1, "mediaSubItems");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          INIntentSlotValueTransformFromMediaSubItems(v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = -[INPrivateMediaItemValueData initWithRecommendationId:assetInfo:sharedUserIdFromPlayableMusicAccount:punchoutURI:requiresSubscription:provider:isAvailable:isHardBan:bundleId:universalResourceLink:providerAppName:internalSignals:ampConfidenceScore:ampConfidenceLevel:pegasusMetaData:mediaSubItems:](v22, "initWithRecommendationId:assetInfo:sharedUserIdFromPlayableMusicAccount:punchoutURI:requiresSubscription:provider:isAvailable:isHardBan:bundleId:universalResourceLink:providerAppName:internalSignals:ampConfidenceScore:ampConfidenceLevel:pegasusMetaData:mediaSubItems:", v12, v25, v26, v27, v4, v21, v28, v6, v20, v19, v18, v7, v9, v13, v14,
                  v16);

          a1 = v23;
          return a1;
      }
    }
    else
    {
      v12 = v24;
    }
    v13 = 0;
    goto LABEL_9;
  }
  return a1;
}

_INPBPrivateMediaItemValueData *INIntentSlotValueTransformToPrivateMediaItemValueData(void *a1)
{
  id v1;
  _INPBPrivateMediaItemValueData *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPrivateMediaItemValueData);
    objc_msgSend(v1, "recommendationId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setRecommendationId:](v2, "setRecommendationId:", v3);

    objc_msgSend(v1, "assetInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setAssetInfo:](v2, "setAssetInfo:", v4);

    objc_msgSend(v1, "sharedUserIdFromPlayableMusicAccount");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setSharedUserIdFromPlayableMusicAccount:](v2, "setSharedUserIdFromPlayableMusicAccount:", v5);

    objc_msgSend(v1, "punchoutURI");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setPunchoutURI:](v2, "setPunchoutURI:", v6);

    objc_msgSend(v1, "requiresSubscription");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setRequiresSubscription:](v2, "setRequiresSubscription:", objc_msgSend(v7, "BOOLValue"));

    objc_msgSend(v1, "provider");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setProvider:](v2, "setProvider:", v8);

    objc_msgSend(v1, "isAvailable");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setIsAvailable:](v2, "setIsAvailable:", objc_msgSend(v9, "BOOLValue"));

    objc_msgSend(v1, "isHardBan");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setIsHardBan:](v2, "setIsHardBan:", objc_msgSend(v10, "BOOLValue"));

    objc_msgSend(v1, "bundleId");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setBundleId:](v2, "setBundleId:", v11);

    objc_msgSend(v1, "universalResourceLink");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setUniversalResourceLink:](v2, "setUniversalResourceLink:", v12);

    objc_msgSend(v1, "providerAppName");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setProviderAppName:](v2, "setProviderAppName:", v13);

    objc_msgSend(v1, "internalSignals");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setInternalSignals:](v2, "setInternalSignals:", v14);

    objc_msgSend(v1, "ampConfidenceScore");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "floatValue");
    -[_INPBPrivateMediaItemValueData setAmpConfidenceScore:](v2, "setAmpConfidenceScore:");

    v16 = objc_msgSend(v1, "ampConfidenceLevel");
    if (v16 >= 4)
      v17 = 0x7FFFFFFFLL;
    else
      v17 = (10 * v16);
    -[_INPBPrivateMediaItemValueData setAmpConfidenceLevel:](v2, "setAmpConfidenceLevel:", v17);
    objc_msgSend(v1, "pegasusMetaData");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setPegasusMetaData:](v2, "setPegasusMetaData:", v18);

    objc_msgSend(v1, "mediaSubItems");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToMediaSubItems(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPrivateMediaItemValueData setMediaSubItems:](v2, "setMediaSubItems:", v20);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromImageValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "uri");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    switch(objc_msgSend(v2, "type"))
    {
      case 0u:
        v6 = -[INImage _initWithIdentifier:]([INImage alloc], "_initWithIdentifier:", v3);
        break;
      case 1u:
        objc_msgSend(v2, "data");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        +[INImage imageWithImageData:](INImage, "imageWithImageData:", v4);
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_8;
      case 2u:
      case 3u:
        objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v3);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        +[INImage imageWithURL:](INImage, "imageWithURL:", v4);
        v5 = objc_claimAutoreleasedReturnValue();
LABEL_8:
        v6 = (id)v5;
        goto LABEL_10;
      case 4u:
        v6 = -[INImage _initWithIdentifier:]([INRemoteImageProxy alloc], "_initWithIdentifier:", v3);
        objc_msgSend(v6, "_setProxyIdentifier:", v3);
        objc_msgSend(v2, "proxyServiceIdentifier");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "_setStorageServiceIdentifier:", v4);
LABEL_10:

        break;
      default:
        v6 = 0;
        break;
    }
    objc_msgSend(v2, "width");
    v8 = v7;
    objc_msgSend(v2, "height");
    objc_msgSend(v6, "_setImageSize:", v8, v9);
    v10 = objc_msgSend(v2, "renderingMode");
    if (v10 <= 2)
      objc_msgSend(v6, "_setRenderingMode:", v10);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

_INPBImageValue *INIntentSlotValueTransformToImageValue(void *a1)
{
  id v1;
  _INPBImageValue *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;

  v1 = a1;
  if (!v1)
  {
    v2 = 0;
    goto LABEL_20;
  }
  v2 = objc_alloc_init(_INPBImageValue);
  objc_msgSend(v1, "_imageSize");
  if (v3 == 0.0 && (objc_msgSend(v1, "_imageSize"), v4 == 0.0))
  {
    +[INCache sharedCache](INCache, "sharedCache");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "cacheableObjectForIdentifier:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v8 = v7;
        objc_msgSend(v8, "_imageSize");
        -[_INPBImageValue setWidth:](v2, "setWidth:");
        objc_msgSend(v8, "_imageSize");
        v10 = v9;

        -[_INPBImageValue setHeight:](v2, "setHeight:", v10);
      }
    }

  }
  else
  {
    objc_msgSend(v1, "_imageSize");
    -[_INPBImageValue setWidth:](v2, "setWidth:");
    objc_msgSend(v1, "_imageSize");
    -[_INPBImageValue setHeight:](v2, "setHeight:", v11);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "_imageData");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBImageValue setData:](v2, "setData:", v12);
    v13 = 1;
LABEL_17:

    goto LABEL_18;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "_URLRepresentation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "absoluteString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBImageValue setUri:](v2, "setUri:", v14);

    v13 = 3;
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v1, "_URLRepresentation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "absoluteString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBImageValue setUri:](v2, "setUri:", v15);

    v13 = 2;
    goto LABEL_17;
  }
  v13 = 0;
LABEL_18:
  -[_INPBImageValue setType:](v2, "setType:", v13);
  v16 = objc_msgSend(v1, "_renderingMode");
  if (v16 <= 2)
    -[_INPBImageValue setRenderingMode:](v2, "setRenderingMode:", v16);
LABEL_20:

  return v2;
}

uint64_t INCodablePersonAttributeMetadataTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Contact")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Email")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Phone")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EmailORPhone")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Username")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id INIntentSlotValueTransformFromTimestamp(void *a1)
{
  id v1;
  uint64_t v2;
  int v3;
  double v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_msgSend(v1, "seconds");
    v3 = objc_msgSend(v1, "nanos");

    v4 = (double)v2;
    if (v3 >= 1)
      v4 = (double)v3 / 1000000000.0 + v4;
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v4);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

id INIntentSlotValueTransformFromMediaItemGroups(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMediaItemGroup(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBMediaSearch *INIntentSlotValueTransformToMediaSearch(void *a1)
{
  id v1;
  _INPBMediaSearch *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMediaSearch);
    v3 = objc_msgSend(v1, "mediaType");
    if (v3 >= 0x15)
      v4 = 0x7FFFFFFFLL;
    else
      v4 = v3;
    -[_INPBMediaSearch setMediaType:](v2, "setMediaType:", v4);
    v5 = objc_msgSend(v1, "sortOrder");
    if (v5 >= 9)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = v5;
    -[_INPBMediaSearch setSortOrder:](v2, "setSortOrder:", v6);
    objc_msgSend(v1, "mediaName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setMediaName:](v2, "setMediaName:", v8);

    objc_msgSend(v1, "artistName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setArtistName:](v2, "setArtistName:", v10);

    objc_msgSend(v1, "albumName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setAlbumName:](v2, "setAlbumName:", v12);

    objc_msgSend(v1, "genreNames");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setGenreNames:](v2, "setGenreNames:", v14);

    objc_msgSend(v1, "moodNames");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToStrings(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setMoodNames:](v2, "setMoodNames:", v16);

    objc_msgSend(v1, "releaseDate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setReleaseDate:](v2, "setReleaseDate:", v18);

    v19 = objc_msgSend(v1, "reference");
    if (v19 >= 3)
      v20 = 0x7FFFFFFFLL;
    else
      v20 = v19;
    -[_INPBMediaSearch setReference:](v2, "setReference:", v20);
    objc_msgSend(v1, "mediaIdentifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToString(v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMediaSearch setMediaIdentifier:](v2, "setMediaIdentifier:", v22);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformToMediaItemValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMediaItemValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void *_INVocabularyStringTypeFromSlotName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ContactNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D00;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ContactGroupNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PhotoAlbumNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PhotoMemoryNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D48;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PhotoTagsType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D60;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HealthActivityNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D78;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CarProfileNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9D90;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CarNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9DA8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PaymentsOrganizationNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9DC0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PaymentsAccountNicknameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9DD8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NotebookItemTitleType")) & 1) != 0)
  {
    v2 = &unk_1E23E9DF0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NotebookItemGroupNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E08;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("VoiceCommandNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AutoShortcutNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PlaylistTitleType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E50;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MusicArtistNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E68;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AudiobookTitleType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E80;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AudiobookAuthorNameType")) & 1) != 0)
  {
    v2 = &unk_1E23E9E98;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ShowTitleType")) & 1) != 0)
  {
    v2 = &unk_1E23E9EB0;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("MediaUserContextType")))
  {
    v2 = &unk_1E23E9EC8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPluginKitCompatiblePathFromPath(void *a1)
{
  id v1;
  char *v2;
  char *v3;
  size_t v4;
  void *v5;

  v1 = objc_retainAutorelease(a1);
  if (objc_msgSend(v1, "fileSystemRepresentation"))
  {
    v2 = realpath_DARWIN_EXTSN((const char *)objc_msgSend(objc_retainAutorelease(v1), "fileSystemRepresentation"), 0);
    v3 = v2;
    if (v2)
      v4 = strlen(v2);
    else
      v4 = 0;
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v3, v4, 4, 1);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id _INImageFilePersistenceDirectoryPathWithStoreTypeCreateIfNeeded(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  NSObject *v9;
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  CPSharedResourcesDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("Library/Intents/Images"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (a1 == 2)
  {
    objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("Persistent"));
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v4;
  }
  v5 = v3;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  v7 = objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v5, 1, 0, &v11);
  v8 = v11;

  if ((v7 & 1) == 0)
  {
    v9 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v13 = "_INImageFilePersistenceCreateDirectoryIfNeeded";
      v14 = 2114;
      v15 = v5;
      v16 = 2114;
      v17 = v8;
      _os_log_error_impl(&dword_18BEBC000, v9, OS_LOG_TYPE_ERROR, "%s Couldn't create image file directory at path %{public}@ %{public}@", buf, 0x20u);
    }
  }

  return v5;
}

void sub_18BEE408C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *_INSyncSlotFromVocabularyStringType(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *result;

  if (a1 > 500)
  {
    switch(a1)
    {
      case 700:
        result = CFSTR("PlaylistTitleType");
        break;
      case 701:
        result = CFSTR("MusicArtistNameType");
        break;
      case 702:
        result = CFSTR("AudiobookTitleType");
        break;
      case 703:
        result = CFSTR("AudiobookAuthorNameType");
        break;
      case 704:
        result = CFSTR("ShowTitleType");
        break;
      default:
        switch(a1)
        {
          case 50000:
            result = CFSTR("VoiceCommandNameType");
            break;
          case 50001:
            result = CFSTR("PhotoMemoryNameType");
            break;
          case 50002:
            result = CFSTR("MediaUserContextType");
            break;
          case 50003:
            result = CFSTR("AutoShortcutNameType");
            break;
          default:
            if (a1 == 501)
              result = CFSTR("NotebookItemGroupNameType");
            else
              result = 0;
            break;
        }
        break;
    }
  }
  else
  {
    v1 = CFSTR("PaymentsOrganizationNameType");
    v2 = CFSTR("PaymentsAccountNicknameType");
    v3 = CFSTR("NotebookItemTitleType");
    if (a1 != 500)
      v3 = 0;
    if (a1 != 401)
      v2 = v3;
    if (a1 != 400)
      v1 = v2;
    v4 = CFSTR("CarProfileNameType");
    v5 = CFSTR("CarNameType");
    if (a1 != 301)
      v5 = 0;
    if (a1 != 300)
      v4 = v5;
    if (a1 <= 399)
      v1 = v4;
    v6 = CFSTR("PhotoTagsType");
    v7 = CFSTR("PhotoAlbumNameType");
    v8 = CFSTR("HealthActivityNameType");
    if (a1 != 200)
      v8 = 0;
    if (a1 != 101)
      v7 = v8;
    if (a1 != 100)
      v6 = v7;
    v9 = CFSTR("ContactNameType");
    v10 = CFSTR("ContactGroupNameType");
    if (a1 != 2)
      v10 = 0;
    if (a1 != 1)
      v9 = v10;
    if (a1 <= 99)
      v6 = v9;
    if (a1 <= 299)
      return v6;
    else
      return v1;
  }
  return result;
}

const __CFString *_INStringFromVocabularyStringType(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;

  if (a1 <= 499)
  {
    v2 = CFSTR("INVocabularyStringTypeCarName");
    v3 = CFSTR("INVocabularyStringTypePaymentsOrganizationName");
    v4 = CFSTR("INVocabularyStringTypePaymentsAccountNickname");
    if (a1 != 401)
      v4 = 0;
    if (a1 != 400)
      v3 = v4;
    if (a1 != 301)
      v2 = v3;
    v5 = CFSTR("INVocabularyStringTypeWorkoutActivityName");
    v6 = CFSTR("INVocabularyStringTypeCarProfileName");
    if (a1 != 300)
      v6 = 0;
    if (a1 != 200)
      v5 = v6;
    if (a1 <= 300)
      v2 = v5;
    v7 = CFSTR("INVocabularyStringTypePhotoTag");
    v8 = CFSTR("INVocabularyStringTypePhotoAlbumName");
    if (a1 != 101)
      v8 = 0;
    if (a1 != 100)
      v7 = v8;
    v9 = CFSTR("INVocabularyStringTypeContactName");
    v10 = CFSTR("INVocabularyStringTypeContactGroupName");
    if (a1 != 2)
      v10 = 0;
    if (a1 != 1)
      v9 = v10;
    if (a1 <= 99)
      v7 = v9;
    if (a1 <= 199)
      return v7;
    else
      return v2;
  }
  else if (a1 > 49999)
  {
    if (a1 == 50003)
      v11 = CFSTR("_INVocabularyStringTypeAutoShortcutName");
    else
      v11 = 0;
    if (a1 == 50001)
      v12 = CFSTR("INVocabularyStringTypePhotoMemoryName");
    else
      v12 = v11;
    if (a1 == 50000)
      return CFSTR("_INVocabularyStringTypeVoiceCommandName");
    else
      return v12;
  }
  else
  {
    switch(a1)
    {
      case 700:
        result = CFSTR("INVocabularyStringTypeMediaPlaylistTitle");
        break;
      case 701:
        result = CFSTR("INVocabularyStringTypeMediaMusicArtistName");
        break;
      case 702:
        result = CFSTR("INVocabularyStringTypeMediaAudiobookTitle");
        break;
      case 703:
        result = CFSTR("INVocabularyStringTypeMediaAudiobookAuthorName");
        break;
      case 704:
        result = CFSTR("INVocabularyStringTypeMediaShowTitle");
        break;
      default:
        v13 = CFSTR("INVocabularyStringTypeNotebookItemGroupName");
        if (a1 != 501)
          v13 = 0;
        if (a1 == 500)
          result = CFSTR("INVocabularyStringTypeNotebookItemTitle");
        else
          result = v13;
        break;
    }
  }
  return result;
}

void sub_18BEE4FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t INResolveInstanceMethod(const char *a1, objc_class *a2)
{
  const char *Name;
  void *v5;
  char v6;
  char v7;
  const char *v8;
  size_t v9;
  char *v10;
  size_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  void (*v17)(void);
  void *v18;
  NSObject *v19;
  void *v20;
  char types[8];
  char *v24;
  objc_class *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  objc_class *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  objc_class *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  Name = sel_getName(a1);
  v24 = 0;
  v25 = 0;
  if (!strncmp("set", Name, 3uLL) && Name[strlen(Name) - 1] == 58)
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      v7 = v6;
      v8 = sel_getName(a1) + 3;
      v9 = strlen(v8);
      v10 = &types[-((MEMORY[0x1E0C80A78]() + 16) & 0xFFFFFFFFFFFFFFF0) - 8];
      strlcpy(v10, v8, v11);
      if ((v7 & 1) != 0)
        *v10 = __tolower(*v10);
      v10[v9 - 1] = 0;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (_INGetPropertyInfo(a2, v12, 1, &v25, (const char **)&v24))
        break;
      v6 = 0;
      v5 = v12;
      if ((v7 & 1) == 0)
      {
        v13 = v24;
        goto LABEL_19;
      }
    }
    strcpy(types, "v@: ");
    v13 = v24;
    types[3] = *v24;
    v16 = types[3];
    v17 = (void (*)(void))_INSetIntProperty;
    if (types[3] > 82)
    {
      switch(types[3])
      {
        case 'c':
        case 'i':
        case 's':
          goto LABEL_52;
        case 'd':
          v17 = (void (*)(void))_INSetDoubleProperty;
          goto LABEL_52;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
          goto LABEL_20;
        case 'f':
          v17 = (void (*)(void))_INSetFloatProperty;
          goto LABEL_52;
        case 'l':
          v17 = (void (*)(void))_INSetLongProperty;
          goto LABEL_52;
        case 'q':
          v17 = (void (*)(void))_INSetLongLongProperty;
          goto LABEL_52;
        default:
          goto LABEL_35;
      }
    }
    switch(types[3])
    {
      case '@':
        if (!_INClassFromType((uint64_t)v24, a2))
        {
          _INProtocolFromType((uint64_t)v13, a2);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v20)
            goto LABEL_20;
        }
        v17 = (void (*)(void))_INSetIdProperty;
        goto LABEL_52;
      case 'A':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
        goto LABEL_20;
      case 'B':
        v17 = (void (*)(void))_INSetBoolProperty;
        goto LABEL_52;
      case 'C':
        goto LABEL_52;
      case 'I':
        v17 = (void (*)(void))_INSetUnsignedIntProperty;
        goto LABEL_52;
      default:
        if (types[3] == 76)
        {
          v17 = (void (*)(void))_INSetUnsignedLongProperty;
        }
        else
        {
          if (types[3] != 81)
            goto LABEL_20;
          v17 = (void (*)(void))_INSetUnsignedLongLongProperty;
        }
        break;
    }
    goto LABEL_52;
  }
  v12 = 0;
  v14 = 0;
  if (*Name && *Name != 95)
  {
    if (Name[strlen(Name) - 1] == 58)
    {
      v14 = 0;
      v12 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sel_getName(a1));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = _INGetPropertyInfo(a2, v12, 0, &v25, (const char **)&v24);
      v13 = v24;
      if (v15)
      {
        strcpy(types, " @:");
        types[0] = *v24;
        v16 = types[0];
        v17 = (void (*)(void))_INGetIntProperty;
        if (types[0] > 82)
        {
          switch(types[0])
          {
            case 'c':
            case 'i':
            case 's':
              goto LABEL_52;
            case 'd':
              v17 = (void (*)(void))_INGetDoubleProperty;
              goto LABEL_52;
            case 'e':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'r':
              goto LABEL_20;
            case 'f':
              v17 = (void (*)(void))_INGetFloatProperty;
              goto LABEL_52;
            case 'l':
              v17 = (void (*)(void))_INGetLongProperty;
              goto LABEL_52;
            case 'q':
              v17 = (void (*)(void))_INGetLongLongProperty;
              goto LABEL_52;
            default:
LABEL_35:
              if (v16 != 83)
                goto LABEL_20;
              goto LABEL_52;
          }
        }
        switch(types[0])
        {
          case '@':
            if (!_INClassFromType((uint64_t)v24, a2))
            {
              _INProtocolFromType((uint64_t)v13, a2);
              v18 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v18)
                goto LABEL_20;
            }
            v17 = (void (*)(void))_INGetIdProperty;
            break;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_20;
          case 'B':
            v17 = (void (*)(void))_INGetBoolProperty;
            break;
          case 'C':
            break;
          case 'I':
            v17 = (void (*)(void))_INGetUnsignedIntProperty;
            break;
          default:
            if (types[0] == 76)
            {
              v17 = (void (*)(void))_INGetUnsignedLongProperty;
            }
            else
            {
              if (types[0] != 81)
                goto LABEL_20;
              v17 = (void (*)(void))_INGetUnsignedLongLongProperty;
            }
            break;
        }
LABEL_52:
        class_addMethod(v25, a1, v17, types);
        v14 = 1;
        goto LABEL_53;
      }
LABEL_19:
      if (v13)
      {
LABEL_20:
        v19 = INSiriLogContextIntents;
        if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          v27 = "INResolveInstanceMethod";
          v28 = 2112;
          v29 = a2;
          v30 = 2112;
          v31 = v12;
          v32 = 2080;
          v33 = v13;
          v34 = 2112;
          v35 = a2;
          _os_log_error_impl(&dword_18BEBC000, v19, OS_LOG_TYPE_ERROR, "%s Dynamic property %@.%@ has type '%s' unsupported by %@", buf, 0x34u);
        }
      }
      v14 = 0;
    }
  }
LABEL_53:

  return v14;
}

objc_property *_INGetPropertyInfo(objc_class *Superclass, id a2, int a3, objc_class **a4, const char **a5)
{
  const char *v9;
  objc_property *result;
  objc_property *v11;
  const char *v12;
  char v13;

  v9 = (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  result = class_getProperty(Superclass, v9);
  if (result)
  {
    v11 = result;
    do
    {
      *a4 = Superclass;
      Superclass = class_getSuperclass(Superclass);
    }
    while (class_getProperty(Superclass, v9) == v11);
    v13 = 0;
    v12 = _INGetPropertyType(v11, &v13);
    if (v13)
      result = (objc_property *)(a3 ^ 1u);
    else
      result = (objc_property *)1;
    if (!(_DWORD)result)
      v12 = 0;
    *a5 = v12;
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t INThisProcessCanMapLSDatabase(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  if (INThisProcessCanMapLSDatabase_onceToken != -1)
    dispatch_once(&INThisProcessCanMapLSDatabase_onceToken, &__block_literal_global_33);
  v2 = (void *)INThisProcessCanMapLSDatabase_cache;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", INThisProcessHasEntitlement(CFSTR("com.apple.private.coreservices.canmaplsdatabase"), a1));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)INThisProcessCanMapLSDatabase_cache;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

  }
  v8 = (void *)INThisProcessCanMapLSDatabase_cache;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKeyedSubscript:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "BOOLValue");

  return v11;
}

uint64_t INThisProcessHasEntitlement(void *a1, int a2)
{
  id v3;
  __SecTask *v4;
  __SecTask *v5;
  uint64_t HasEntitlement;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = SecTaskCreateFromSelf(0);
  if (v4)
  {
    v5 = v4;
    HasEntitlement = _INProcessHasEntitlement(v4, v3);
    CFRelease(v5);
    if ((HasEntitlement & 1) != 0 || !a2)
      goto LABEL_13;
    goto LABEL_7;
  }
  v7 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315138;
    v15 = "INThisProcessHasEntitlement";
    _os_log_error_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_ERROR, "%s SecTaskCreateFromSelf() failed, assuming this process is NOT entitled.", (uint8_t *)&v14, 0xCu);
    if (a2)
      goto LABEL_7;
LABEL_12:
    HasEntitlement = 0;
    goto LABEL_13;
  }
  if (!a2)
    goto LABEL_12;
LABEL_7:
  objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForCurrentProcess");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _INContainingBundleProxyWithBundleProxy(v8);
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "entitlementValuesForKeys:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    HasEntitlement = objc_msgSend(v12, "BOOLForKey:", v3);
  }
  else
  {
    HasEntitlement = 0;
  }

LABEL_13:
  return HasEntitlement;
}

uint64_t _INProcessHasEntitlement(__SecTask *a1, void *a2)
{
  __CFString *v3;
  void *v4;
  CFErrorRef v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  error = 0;
  v4 = (void *)SecTaskCopyValueForEntitlement(a1, v3, &error);
  v5 = error;
  if (error)
  {
    v6 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "_INProcessHasEntitlement";
      v13 = 2114;
      v14 = v5;
      _os_log_fault_impl(&dword_18BEBC000, v6, OS_LOG_TYPE_FAULT, "%s SecTaskCopyValueForEntitlement() failed with error %{public}@", buf, 0x16u);
      v5 = error;
    }
    CFRelease(v5);
  }
  if (v4 && (objc_opt_respondsToSelector() & 1) == 0)
  {
    v7 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "_INProcessHasEntitlement";
      v13 = 2114;
      v14 = v3;
      _os_log_error_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_ERROR, "%s Expected a Boolean value for the %{public}@ entitlement, but found something else.", buf, 0x16u);
    }

    v4 = 0;
  }
  v8 = objc_msgSend(v4, "BOOLValue");

  return v8;
}

void INExtractAppInfoFromSiriLaunchId(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v11 = 0;
  v12 = 0;
  INExtractAppInfoFromSiriLaunchIdWithoutLaunchServices(a1, &v12, &v11);
  v5 = v12;
  v6 = v11;
  if (a2)
    *a2 = objc_retainAutorelease(v5);
  if (a3)
  {
    if (!v6 && v5)
    {
      v7 = (void *)MEMORY[0x1E0CA5890];
      INLocalAppBundleIdentifierForIntentBundleIdentifier(v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "bundleProxyForIdentifier:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "bundleURL");
      v6 = (id)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(v6, "path");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringByRemovingPercentEncoding");
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
}

void INExtractAppInfoFromSiriLaunchIdWithoutLaunchServices(void *a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a1;
  if ((objc_msgSend(v9, "hasPrefix:", CFSTR("x-apple-siri-app")) & 1) != 0
    || objc_msgSend(v9, "hasPrefix:", CFSTR("x-apple-siri-watch-app")))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v9);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "host");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "path");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = 0;
  v7 = 0;
  v6 = v9;
  if (a2)
LABEL_4:
    *a2 = objc_retainAutorelease(v6);
LABEL_5:
  if (a3)
  {
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v7);
      v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *a3 = v8;

    }
    else
    {
      *a3 = 0;
    }
  }

}

id INSchemaURLsWithBundle(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  INSchemaFileExtensions();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v21;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v1, "URLsForResourcesWithExtension:subdirectory:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v7), 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObjectsFromArray:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v5);
  }

  if (!objc_msgSend(v2, "count"))
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    INSchemaFileExtensions();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v17;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v17 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(v1, "URLsForResourcesWithExtension:subdirectory:localization:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v13), 0, CFSTR("en"), (_QWORD)v16);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObjectsFromArray:", v14);

          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
      }
      while (v11);
    }

  }
  return v2;
}

id INSchemaFileExtensions()
{
  if (INSchemaFileExtensions_onceToken != -1)
    dispatch_once(&INSchemaFileExtensions_onceToken, &__block_literal_global_11086);
  return (id)INSchemaFileExtensions_extensions;
}

id INContainingBundleURLForCurrentProcess()
{
  id v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForCurrentProcess");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = v0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v0, "containingBundle");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v1, "bundleURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id INApplicationBundleIdentifierFromBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  INExecutionFrameworkMapper *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v25;

  v1 = a1;
  if (v1)
  {
    if (INApplicationBundleIdentifierFromBundleIdentifier_onceToken != -1)
      dispatch_once(&INApplicationBundleIdentifierFromBundleIdentifier_onceToken, &__block_literal_global_218);
    objc_msgSend((id)INApplicationBundleIdentifierFromBundleIdentifier_resultsCache, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (v2)
    {
      v4 = v2;
LABEL_42:

      goto LABEL_43;
    }
    v5 = v1;
    if (INThisProcessCanMapLSDatabase(0))
    {
      v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CA5848]), "initWithBundleIdentifier:error:", v5, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordForCurrentProcess");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "bundleIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v5, "isEqualToString:", v8);

      if (v9)
      {
        v10 = v7;
        if (v10)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v11 = v10;
          else
            v11 = 0;
        }
        else
        {
          v11 = 0;
        }
        v6 = v11;

      }
      else
      {
        v6 = 0;
      }

    }
    v12 = v5;
    v13 = v5;
    if (v6)
    {
      objc_msgSend(v6, "containingBundleRecord");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        objc_opt_class();
        v15 = (objc_opt_isKindOfClass() & 1) != 0 ? v14 : 0;
      }
      else
      {
        v15 = 0;
      }
      v16 = v15;

      objc_msgSend(v16, "bundleIdentifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "bundleIdentifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
      {
        v21 = v5;
LABEL_35:
        if (v12)
          v22 = v12;
        else
          v22 = v21;
        v4 = v22;
        objc_msgSend((id)INApplicationBundleIdentifierFromBundleIdentifier_resultsCache, "objectForKey:", v4);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v23 && v4)
          objc_msgSend((id)INApplicationBundleIdentifierFromBundleIdentifier_resultsCache, "setObject:forKey:", v4, v5);

        goto LABEL_42;
      }
    }
    v25 = v6;
    v17 = objc_alloc_init(INExecutionFrameworkMapper);
    -[INExecutionFrameworkMapper launchableAppBundleIdentifierForSystemExtensionBundleIdentifier:](v17, "launchableAppBundleIdentifierForSystemExtensionBundleIdentifier:", v13);
    v18 = objc_claimAutoreleasedReturnValue();
    -[INExecutionFrameworkMapper displayableAppBundleIdentifierForSystemExtensionBundleIdentifier:](v17, "displayableAppBundleIdentifierForSystemExtensionBundleIdentifier:", v13);
    v19 = objc_claimAutoreleasedReturnValue();
    if (v19 | v18)
    {
      v20 = (id)v18;

      v21 = (id)v19;
      if (v20 || !v19)
      {
        if (!v20 || v19)
          goto LABEL_34;
      }
      else
      {
        v20 = v21;
      }
      v21 = v20;
      v20 = v21;
    }
    else
    {
      v21 = v5;
      v20 = v12;
    }
LABEL_34:

    v12 = v20;
    v6 = v25;
    goto LABEL_35;
  }
  v4 = 0;
LABEL_43:

  return v4;
}

void sub_18BEE7F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18BEE94D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

id _INImageSizeProviderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getINUIImageSizeProviderClass_softClass;
  v7 = getINUIImageSizeProviderClass_softClass;
  if (!getINUIImageSizeProviderClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getINUIImageSizeProviderClass_block_invoke;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getINUIImageSizeProviderClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = objc_retainAutorelease(v0);
  _Block_object_dispose(&v4, 8);
  if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EE0B8320))
    return v1;
  else
    return 0;
}

void sub_18BEEA2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _INImageFilePersistenceUpdateModifiedDateAtFilePath(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  id v12;
  id v14;
  id v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v15);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v15;
  v5 = (void *)objc_msgSend(v3, "mutableCopy");

  if (v4)
  {
    v6 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v17 = "_INImageFilePersistenceUpdateModifiedDateAtFilePath";
      v18 = 2112;
      v19 = v1;
      v20 = 2112;
      v21 = v4;
      _os_log_error_impl(&dword_18BEBC000, v6, OS_LOG_TYPE_ERROR, "%s Failed to get attributes for item currently at path %@: %@", buf, 0x20u);
    }
    v7 = v4;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKey:", v8, *MEMORY[0x1E0CB2A88]);

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 0;
    objc_msgSend(v9, "setAttributes:ofItemAtPath:error:", v5, v1, &v14);
    v7 = v14;

    if (v7)
    {
      v10 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v17 = "_INImageFilePersistenceUpdateModifiedDateAtFilePath";
        v18 = 2112;
        v19 = v1;
        v20 = 2112;
        v21 = v7;
        _os_log_error_impl(&dword_18BEBC000, v10, OS_LOG_TYPE_ERROR, "%s Failed to set attributes for item currently at path %@: %@", buf, 0x20u);
      }
      v11 = v7;
    }

  }
  v12 = v7;

  return v12;
}

void sub_18BEEB09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;
  id *v23;
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v25 - 88));
  _Unwind_Resume(a1);
}

id INHelperServingXPCInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0B8590);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_loadDataImageForImage_scaledWidth_scaledHeight_usingPortableImageLoader_completion_, 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_loadDataImageForImage_scaledWidth_scaledHeight_usingPortableImageLoader_completion_, 0, 1);
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_loadDataImageForImage_scaledWidth_scaledHeight_usingPortableImageLoader_completion_, 1, 0);

  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_storeImage_scaled_qualityOfService_storeType_completion_, 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_retrieveImageWithIdentifier_completion_, 0, 1);
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  objc_msgSend(v4, "setWithObjects:", v5, v6, v7, objc_opt_class(), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v8, sel_loadSchemaURLsWithCompletion_, 0, 1);

  v9 = (void *)MEMORY[0x1E0C99E60];
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  objc_msgSend(v9, "setWithObjects:", v10, v11, v12, objc_opt_class(), 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_loadSchemaURLsForBundleIdentifiers_completion_, 0, 1);

  v14 = (void *)MEMORY[0x1E0C99E60];
  v15 = objc_opt_class();
  v16 = objc_opt_class();
  objc_msgSend(v14, "setWithObjects:", v15, v16, objc_opt_class(), 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v17, sel_loadBundleURLsForBundleIdentifiers_completion_, 0, 1);

  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_fetchShareExtensionIntentForExtensionContextUUID_completion_, 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_fetchShareExtensionIntentForExtensionContextUUID_completion_, 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_storeUserContext_forBundleIdentifier_, 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_filePathForImage_usingPortableImageLoader_completion_, 0, 0);
  v18 = (void *)MEMORY[0x1E0C99E60];
  v19 = objc_opt_class();
  objc_msgSend(v18, "setWithObjects:", v19, objc_opt_class(), 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v20, sel_filePathForImage_usingPortableImageLoader_completion_, 1, 0);

  return v0;
}

id INDictionaryWithObjectsForKeysPassingTest(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, _QWORD);
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_msgSend(v3, "mutableCopy");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend(v3, "allKeys", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        if ((v4[2](v4, v11) & 1) == 0)
          objc_msgSend(v5, "removeObjectForKey:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  return v5;
}

INMediaSearch *INIntentSlotValueTransformFromMediaSearch(void *a1)
{
  id v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  INMediaSearch *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  INMediaSearch *v28;
  void *v29;
  void *v30;

  if (a1)
  {
    v1 = a1;
    v28 = [INMediaSearch alloc];
    v2 = objc_msgSend(v1, "hasMediaType");
    v3 = objc_msgSend(v1, "mediaType") - 1;
    if (v3 <= 0x13)
      v4 = v3 + 1;
    else
      v4 = 0;
    if (v2)
      v5 = v4;
    else
      v5 = 0;
    v6 = objc_msgSend(v1, "hasSortOrder");
    v7 = objc_msgSend(v1, "sortOrder") - 1;
    if (v7 <= 7)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v6)
      v9 = v8;
    else
      v9 = 0;
    objc_msgSend(v1, "mediaName");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v30);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "artistName");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v29);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "albumName");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v27);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "genreNames");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v26);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "moodNames");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromStrings(v25);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "releaseDate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v1, "hasReference");
    v15 = objc_msgSend(v1, "reference");
    v16 = v15 == 1;
    if (v15 == 2)
      v16 = 2;
    if (v14)
      v17 = v16;
    else
      v17 = 0;
    objc_msgSend(v1, "mediaIdentifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromString(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[INMediaSearch initWithMediaType:sortOrder:mediaName:artistName:albumName:genreNames:moodNames:releaseDate:reference:mediaIdentifier:](v28, "initWithMediaType:sortOrder:mediaName:artistName:albumName:genreNames:moodNames:releaseDate:reference:mediaIdentifier:", v5, v9, v10, v24, v23, v22, v11, v13, v17, v19);

  }
  else
  {
    v20 = 0;
  }
  return v20;
}

id INKeyImageUtilitiesSortedSubProducersForSlotComposingProducer(void *a1)
{
  id v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  char v18;

  v1 = a1;
  v2 = objc_opt_respondsToSelector() & 1;
  objc_msgSend(v1, "intentSlotDescriptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB3880];
  v5 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __INKeyImageUtilitiesSortedSubProducersForSlotComposingProducer_block_invoke;
  v16[3] = &unk_1E228CD20;
  v6 = v1;
  v17 = v6;
  v18 = v2;
  objc_msgSend(v4, "predicateWithBlock:", v16);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "filteredArrayUsingPredicate:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v14[0] = v5;
  v14[1] = 3221225472;
  v14[2] = __INKeyImageUtilitiesSortedSubProducersForSlotComposingProducer_block_invoke_2;
  v14[3] = &unk_1E228CD48;
  v15 = v6;
  v9 = v6;
  objc_msgSend(v8, "sortedArrayUsingComparator:", v14);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "reverseObjectEnumerator");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "allObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void INImageProxyInjectionUtilitiesInjectProxiesIntoObjectWithContinuationHandler(void *a1, unsigned int a2, char a3, char a4, void *a5, void *a6, double a7, double a8)
{
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  double v21;
  void *v22;
  char v23;
  char v24;
  NSObject *v25;
  INWatchdogTimer *v26;
  uint64_t v27;
  id v28;
  id v29;
  INWatchdogTimer *v30;
  id v31;
  id v32;
  INWatchdogTimer *v33;
  id v34;
  id v35;
  NSObject *v36;
  _QWORD v37[4];
  id v38;
  INWatchdogTimer *v39;
  id v40;
  id v41;
  _QWORD *v42;
  __int128 v43;
  unsigned int v44;
  _QWORD v45[4];
  id v46;
  id v47;
  INWatchdogTimer *v48;
  id v49;
  _QWORD *v50;
  double v51;
  double v52;
  unsigned int v53;
  char v54;
  char v55;
  _QWORD v56[4];
  id v57;
  id v58;
  double v59;
  __int128 v60;
  _QWORD v61[5];
  id v62;
  _BYTE buf[22];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a5;
  v17 = a6;
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x3032000000;
  v61[3] = __Block_byref_object_copy_;
  v61[4] = __Block_byref_object_dispose_;
  v62 = 0;
  v18 = (id)INSiriLogContextIntents;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = (objc_class *)objc_opt_class();
    NSStringFromClass(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "INImageProxyInjectionUtilitiesInjectProxiesIntoObjectWithContinuationHandler";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl(&dword_18BEBC000, v18, OS_LOG_TYPE_INFO, "%s Starting image proxy injection for %@", buf, 0x16u);

  }
  v21 = 1.0;
  INImageProxyInjectionQueue();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = a3;
  v24 = a4;
  if (a2 <= 0x15 && ((1 << a2) & 0x220200) != 0)
    v21 = 15.0;
  v25 = _os_activity_create(&dword_18BEBC000, "Inject Image Proxy", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v36 = v25;
  os_activity_scope_enter(v25, (os_activity_scope_state_t)buf);
  v26 = [INWatchdogTimer alloc];
  v27 = MEMORY[0x1E0C809B0];
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3221225472;
  v56[2] = __INImageProxyInjectionUtilitiesInjectProxiesIntoObjectWithContinuationHandler_block_invoke;
  v56[3] = &unk_1E2288EC0;
  v59 = v21;
  v28 = v15;
  v57 = v28;
  v29 = v17;
  v58 = v29;
  v60 = *(_OWORD *)buf;
  v30 = -[INWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:](v26, "initWithTimeoutInterval:onQueue:timeoutHandler:", v22, v56, v21);
  v45[0] = v27;
  v45[1] = 3221225472;
  v45[2] = __INImageProxyInjectionUtilitiesInjectProxiesIntoObjectWithContinuationHandler_block_invoke_13;
  v45[3] = &unk_1E2288F38;
  v46 = v22;
  v53 = a2;
  v54 = v23;
  v47 = v28;
  v48 = v30;
  v31 = v16;
  v51 = a7;
  v52 = a8;
  v55 = v24;
  v49 = v31;
  v50 = v61;
  v37[0] = v27;
  v37[1] = 3221225472;
  v37[2] = __INImageProxyInjectionUtilitiesInjectProxiesIntoObjectWithContinuationHandler_block_invoke_20;
  v37[3] = &unk_1E2288F88;
  v32 = v46;
  v38 = v32;
  v44 = a2;
  v33 = v48;
  v39 = v33;
  v34 = v47;
  v40 = v34;
  v35 = v29;
  v41 = v35;
  v42 = v61;
  v43 = *(_OWORD *)buf;
  objc_msgSend(v34, "_injectProxiesForImages:completion:", v45, v37);
  -[INWatchdogTimer start](v33, "start");

  _Block_object_dispose(v61, 8);
}

void sub_18BEEDE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

id INImageProxyInjectionQueue()
{
  if (INImageProxyInjectionQueue_onceToken != -1)
    dispatch_once(&INImageProxyInjectionQueue_onceToken, &__block_literal_global);
  return (id)INImageProxyInjectionQueue_injectionQueue;
}

INPrivatePlayMediaIntentData *INIntentSlotValueTransformFromPrivatePlayMediaIntentData(INPrivatePlayMediaIntentData *a1)
{
  INPrivatePlayMediaIntentData *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  INPrivatePlayMediaIntentData *v16;
  INPrivatePlayMediaIntentData *v17;
  void *v18;
  INPrivateMediaIntentData *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a1)
  {
    v1 = a1;
    v16 = [INPrivatePlayMediaIntentData alloc];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData appSelectionEnabled](v1, "appSelectionEnabled"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData appInferred](v1, "appInferred"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivatePlayMediaIntentData audioSearchResults](v1, "audioSearchResults");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMediaItemValues(v20);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivatePlayMediaIntentData privateMediaIntentData](v1, "privateMediaIntentData");
    v19 = (INPrivateMediaIntentData *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromPrivateMediaIntentData(v19);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData appSelectionSignalsEnabled](v1, "appSelectionSignalsEnabled"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[INPrivatePlayMediaIntentData appSelectionSignalsFrequencyDenominator](v1, "appSelectionSignalsFrequencyDenominator"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData shouldSuppressCommonWholeHouseAudioRoutes](v1, "shouldSuppressCommonWholeHouseAudioRoutes"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData immediatelyStartPlayback](v1, "immediatelyStartPlayback"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData isAmbiguousPlay](v1, "isAmbiguousPlay"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData isPersonalizedRequest](v1, "isPersonalizedRequest"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivatePlayMediaIntentData internalSignals](v1, "internalSignals");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsEnabled](v1, "entityConfidenceSignalsEnabled"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsFrequencyDenominatorInternal](v1, "entityConfidenceSignalsFrequencyDenominatorInternal"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsFrequencyDenominatorProd](v1, "entityConfidenceSignalsFrequencyDenominatorProd"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[INPrivatePlayMediaIntentData entityConfidenceSignalsMaxItemsToDisambiguate](v1, "entityConfidenceSignalsMaxItemsToDisambiguate"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivatePlayMediaIntentData alternativeProviderBundleIdentifier](v1, "alternativeProviderBundleIdentifier");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivatePlayMediaIntentData ampPAFDataSetID](v1, "ampPAFDataSetID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[INPrivatePlayMediaIntentData pegasusMetaData](v1, "pegasusMetaData");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = -[INPrivatePlayMediaIntentData initWithAppSelectionEnabled:appInferred:audioSearchResults:privateMediaIntentData:appSelectionSignalsEnabled:appSelectionSignalsFrequencyDenominator:shouldSuppressCommonWholeHouseAudioRoutes:immediatelyStartPlayback:isAmbiguousPlay:isPersonalizedRequest:internalSignals:entityConfidenceSignalsEnabled:entityConfidenceSignalsFrequencyDenominatorInternal:entityConfidenceSignalsFrequencyDenominatorProd:entityConfidenceSignalsMaxItemsToDisambiguate:alternativeProviderBundleIdentifier:ampPAFDataSetID:pegasusMetaData:](v16, "initWithAppSelectionEnabled:appInferred:audioSearchResults:privateMediaIntentData:appSelectionSignalsEnabled:appSelectionSignalsFrequencyDenominator:shouldSuppressCommonWholeHouseAudioRoutes:immediatelyStartPlayback:isAmbiguousPlay:isPersonalizedRequest:internalSignals:entityConfidenceSignalsEnabled:entityConfidenceSignalsFrequencyDenominatorInternal:entityConfidenceSignalsFrequencyDenominatorProd:entityConfidenceSignalsMaxItemsToDisambiguate:alternativeProviderBundleIdentifier:ampPAFDataSetID:pegasusMetaData:", v26, v25, v24, v18, v15, v14, v23, v22, v21, v13, v11, v12, v10,
            v9,
            v8,
            v3,
            v5,
            v6);

    a1 = v17;
  }
  return a1;
}

id INTypedIntentWithIntent(void *a1)
{
  id v1;
  NSString *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  char isKindOfClass;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = a1;
  objc_msgSend(v1, "_className");
  v2 = (NSString *)objc_claimAutoreleasedReturnValue();
  v3 = NSClassFromString(v2);

  v4 = v1;
  if (v3)
  {
    objc_msgSend(v1, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    v4 = v1;
    if ((isKindOfClass & 1) != 0)
    {
      v7 = [v3 alloc];
      objc_msgSend(v1, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "backingStore");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = (void *)objc_msgSend(v7, "initWithIdentifier:backingStore:", v8, v9);

      objc_msgSend(v1, "launchId");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_setLaunchId:", v10);

      objc_msgSend(v1, "extensionBundleId");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_setExtensionBundleId:", v11);

      objc_msgSend(v1, "suggestedInvocationPhrase");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setSuggestedInvocationPhrase:", v12);

      objc_msgSend(v1, "_parameterCombinations");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_setParameterCombinations:", v13);

      objc_msgSend(v1, "_parameterContexts");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_setParameterContexts:", v14);

    }
  }
  v15 = v4;

  return v15;
}

void sub_18BEEF75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18BEEF878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCSSearchableIndexClass_block_invoke(uint64_t a1)
{
  CoreSpotlightLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CSSearchableIndex");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCSSearchableIndexClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    CoreSpotlightLibrary();
  }
}

void CoreSpotlightLibrary()
{
  void *v0;

  if (!CoreSpotlightLibraryCore_frameworkLibrary)
  {
    CoreSpotlightLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!CoreSpotlightLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

uint64_t INIsReservationInteraction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char isKindOfClass;

  v1 = a1;
  objc_msgSend(v1, "intent");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "intentResponse");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_18BEF0FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getINUIImageSizeProviderClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!IntentsUILibraryCore_frameworkLibrary)
  {
    IntentsUILibraryCore_frameworkLibrary = _sl_dlopen();
    if (!IntentsUILibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("INUIImageSizeProvider");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getINUIImageSizeProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void _INSetIdProperty(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  size_t v8;
  char *v9;
  size_t v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a1;
  v7 = sel_getName(a2) + 3;
  v8 = strlen(v7);
  v9 = (char *)v12 - ((MEMORY[0x1E0C80A78]() + 16) & 0xFFFFFFFFFFFFFFF0);
  strlcpy(v9, v7, v10);
  *v9 = __tolower(*v9);
  v9[v8 - 1] = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setValue:forProperty:", v5, v11);

}

id _INLookupNameInModule(char *a1, objc_class *a2, void *a3)
{
  void (**v5)(id, char *);
  void *v6;
  char *Name;
  char *v9;
  int v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!a2)
    goto LABEL_3;
  if (strchr(a1, 46))
    goto LABEL_3;
  Name = (char *)class_getName(a2);
  v9 = strchr(Name, 46);
  if (!v9
    || (v10 = (_DWORD)v9 - (_DWORD)Name,
        strlen(a1),
        MEMORY[0x1E0C80A78](),
        v12 = (char *)v13 - v11,
        sprintf((char *)v13 - v11, "%.*s.%s", v10, Name, a1),
        v5[2](v5, v12),
        (v6 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_3:
    v5[2](v5, a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

const char *_INGetPropertyType(objc_property *a1, _BYTE *a2)
{
  const char *Attributes;
  char *v4;
  size_t v5;
  const char *v6;
  char *v7;
  int v8;
  id v9;
  char *__stringp;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  Attributes = property_getAttributes(a1);
  strlen(Attributes);
  v4 = (char *)&__stringp - ((MEMORY[0x1E0C80A78]() + 16) & 0xFFFFFFFFFFFFFFF0);
  strlcpy(v4, Attributes, v5);
  __stringp = v4;
  v6 = "@";
  while (1)
  {
    v7 = strsep(&__stringp, ",");
    if (!v7)
      break;
    v8 = *v7;
    if (v8 == 82)
    {
      *a2 = 1;
    }
    else if (v8 == 84)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v7 + 1, strlen(v7), __stringp, v12);
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v6 = (const char *)objc_msgSend(v9, "bytes");

    }
  }
  return v6;
}

id _INClassFromType(uint64_t a1, objc_class *a2)
{
  size_t v4;
  void *v5;
  char *v6;
  size_t v7;
  char *v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = strlen((const char *)a1);
  if (*(_BYTE *)a1 != 64)
    goto LABEL_11;
  if (v4 == 1)
  {
    objc_opt_class();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    return v5;
  }
  if (v4 < 4 || *(_BYTE *)(a1 + 1) != 34 || *(_BYTE *)(v4 + a1 - 1) != 34)
  {
LABEL_11:
    v5 = 0;
    return v5;
  }
  v6 = (char *)v10 - ((MEMORY[0x1E0C80A78]() + 13) & 0xFFFFFFFFFFFFFFF0);
  strlcpy(v6, (const char *)(a1 + 2), v7);
  v8 = strchr(v6, 60);
  if (v8)
  {
    if (v8 == v6)
    {
      v5 = 0;
      return v5;
    }
    *v8 = 0;
  }
  _INLookupNameInModule(v6, a2, &__block_literal_global_84015);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  return v5;
}

uint64_t INThisProcessIsDonatingBySiri()
{
  if (INThisProcessIsDonatingBySiri_onceToken != -1)
    dispatch_once(&INThisProcessIsDonatingBySiri_onceToken, &__block_literal_global_36);
  if (INThisProcessIsAssistantd_onceToken != -1)
    dispatch_once(&INThisProcessIsAssistantd_onceToken, &__block_literal_global_68956);
  if (INThisProcessIsAssistantd_isAssistantd
    || (objc_msgSend((id)INThisProcessIsDonatingBySiri_bundleIdentifier, "isEqualToString:", CFSTR("com.apple.springboard")) & 1) != 0|| (objc_msgSend((id)INThisProcessIsDonatingBySiri_bundleIdentifier, "isEqualToString:", CFSTR("com.apple.AppPredictionWidget.Siri.ActionPredictionNotificationContentIntents")) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return objc_msgSend((id)INThisProcessIsDonatingBySiri_bundleIdentifier, "isEqualToString:", CFSTR("com.apple.WorkflowKit.ShortcutsIntents"));
  }
}

uint64_t INThisProcessHasAssistantdEntitlement()
{
  __SecTask *v0;
  __SecTask *v1;
  void *v2;
  void *v3;
  CFErrorRef v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  CFErrorRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    v1 = v0;
    error = 0;
    v2 = (void *)SecTaskCopyValueForEntitlement(v0, CFSTR("application-identifier"), &error);
    v3 = v2;
    v4 = error;
    if (error)
    {
      v5 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v11 = "_INThisProcessHasEntitlementEqualToValue";
        v12 = 2114;
        v13 = v4;
        _os_log_error_impl(&dword_18BEBC000, v5, OS_LOG_TYPE_ERROR, "%s Error copying value for entitlement: %{public}@.", buf, 0x16u);
        v4 = error;
      }
      CFRelease(v4);
    }
    else if (v2)
    {
      v6 = objc_msgSend(v2, "isEqual:", CFSTR("com.apple.assistant.assistantd"));
      goto LABEL_12;
    }
    v6 = 0;
LABEL_12:
    CFRelease(v1);

    return v6;
  }
  v7 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v11 = "_INThisProcessHasEntitlementEqualToValue";
    _os_log_error_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_ERROR, "%s SecTaskCreateFromSelf() failed, assuming this process is NOT entitled.", buf, 0xCu);
  }
  return 0;
}

_QWORD *INInteractionWithTypedInteraction(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char isKindOfClass;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v1 = a1;
  objc_msgSend(v1, "intent");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  v5 = v1;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = (_QWORD *)objc_msgSend(v1, "copy");

    objc_msgSend(v1, "intent");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentWithTypedIntent(v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v5[1];
    v5[1] = v7;

    objc_msgSend(v1, "intentResponse");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentResponseWithTypedIntentResponse(v9);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v5[2];
    v5[2] = v10;

  }
  return v5;
}

id INIntentSlotValueTransformToStrings(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToString(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToDataStrings(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDataString(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotDescriptionsWithCodable(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSString *v16;
  INIntentSlotDescription *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  INIntentSlotDescription *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v43;
  id obj;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  SEL v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  void *v64;
  _QWORD v65[6];

  v65[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v54 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v43 = v1;
  objc_msgSend(v1, "_objectDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  objc_msgSend(v2, "attributes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
  if (v56)
  {
    v55 = *(_QWORD *)v60;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v60 != v55)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * v3);
        objc_msgSend(v2, "attributes");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "objectForKey:", v4);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        v7 = objc_msgSend(v4, "unsignedIntegerValue");
        objc_msgSend(v2, "typeName");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v6;
        v10 = v8;
        objc_msgSend(v9, "propertyName");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v11, "length"))
        {
          v58 = objc_msgSend(v9, "valueType");
          if (objc_msgSend(v9, "supportsResolution"))
          {
            v12 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "propertyName");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "if_ASCIIStringByUppercasingFirstCharacter");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = v10;
            objc_msgSend(v12, "stringWithFormat:", CFSTR("resolve%@For%@:withCompletion:"), v14, v10);
            v16 = (NSString *)objc_claimAutoreleasedReturnValue();
            v57 = NSSelectorFromString(v16);

          }
          else
          {
            v15 = v10;
            v57 = 0;
          }
          v18 = objc_msgSend(v9, "supportsDynamicEnumeration");
          v19 = (void *)MEMORY[0x1E0C9AA60];
          v20 = (void *)MEMORY[0x1E0C9AA60];
          if (v18)
          {
            v21 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "propertyName");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "if_ASCIIStringByUppercasingFirstCharacter");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = v7;
            v22 = v15;
            objc_msgSend(v21, "stringWithFormat:", CFSTR("provide%@OptionsCollectionFor%@:searchTerm:withCompletion:"), v51, v15);
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            v65[0] = v50;
            v23 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "propertyName");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v49, "if_ASCIIStringByUppercasingFirstCharacter");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "stringWithFormat:", CFSTR("provide%@OptionsCollectionFor%@:withCompletion:"), v48, v15);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v65[1] = v47;
            v24 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "propertyName");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "if_ASCIIStringByUppercasingFirstCharacter");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "stringWithFormat:", CFSTR("provide%@OptionsFor%@:searchTerm:withCompletion:"), v45, v15);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v65[2] = v25;
            v26 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "propertyName");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "if_ASCIIStringByUppercasingFirstCharacter");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "stringWithFormat:", CFSTR("provide%@OptionsFor%@:withCompletion:"), v28, v22);
            v29 = v2;
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v65[3] = v30;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v65, 4);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            v2 = v29;
            v31 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "propertyName");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "if_ASCIIStringByUppercasingFirstCharacter");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = v22;
            objc_msgSend(v31, "stringWithFormat:", CFSTR("default%@For%@:"), v33, v22);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v64 = v34;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v64, 1);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            v7 = v53;
          }
          v35 = [INIntentSlotDescription alloc];
          v36 = objc_msgSend(v9, "modifier");
          if (v36 > 2)
            v37 = 0;
          else
            v37 = qword_18C311F88[v36];
          v17 = -[INIntentSlotDescription initWithName:tag:facadePropertyName:dataPropertyName:isExtended:isPrivate:valueType:valueStyle:codableAttribute:defaultValueSelectorStrings:provideOptionsSelectorStrings:resolutionResultClass:resolveSelectors:](v35, "initWithName:tag:facadePropertyName:dataPropertyName:isExtended:isPrivate:valueType:valueStyle:codableAttribute:defaultValueSelectorStrings:provideOptionsSelectorStrings:resolutionResultClass:resolveSelectors:", v11, v7, v11, v11, 0, 0, v58, v37, v9, v20, v19, objc_msgSend(v9, "resolutionResultClass"), v57, 0);

          v10 = v15;
        }
        else
        {
          v17 = 0;
        }

        objc_msgSend(v9, "displayPriorityRank");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[INIntentSlotDescription setRank:](v17, "setRank:", v38);

        -[INIntentSlotDescription name](v17, "name");
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        if (v39)
        {
          -[INIntentSlotDescription name](v17, "name");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "setObject:forKeyedSubscript:", v17, v40);

        }
        ++v3;
      }
      while (v56 != v3);
      v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
    }
    while (v56);
  }

  v41 = (void *)objc_msgSend(v54, "copy");
  return v41;
}

INIntentResponse *INIntentResponseWithTypedIntentResponse(void *a1)
{
  INIntentResponse *v1;
  INIntentResponse *v2;
  uint64_t v3;
  INIntentResponse *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = v1;
  if (-[INIntentResponse _type](v1, "_type") == 2)
  {
    v3 = objc_opt_class();
    v2 = v1;
    if (v3 != objc_opt_class())
    {
      v4 = [INIntentResponse alloc];
      -[INIntentResponse backingStore](v1, "backingStore");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = -[INIntentResponse initWithBackingStore:](v4, "initWithBackingStore:", v5);

      -[INIntentResponse _responseMessagePBRepresentation](v2, "_responseMessagePBRepresentation");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v6, "_objectDescription");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          _INUntypePropertiesWithCodableDescription(v2, v7);

        }
      }

    }
  }

  return v2;
}

__CFString *INStartPhotoPlaybackIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2288D78[a1];
}

BOOL _INPBBillPayeeValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBValueMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNickname:", v17, 0, 0);
        goto LABEL_31;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAccountNumber:", v17);
        goto LABEL_31;
      case 6u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setOrganizationName:", v17, 0, 0);
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

__CFString *INQueryHomeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2288DA8[a1];
}

uint64_t _INPBSetTaskAttributeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_53;
      case 2u:
        v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || (_INPBTaskReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTask:", v17, 0, 0);
        goto LABEL_53;
      case 3u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_60:
        objc_msgSend(a1, "setStatus:", v24);
        goto LABEL_54;
      case 5u:
        v17 = objc_alloc_init(_INPBSpatialEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBSpatialEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpatialEventTrigger:", v17, 0, 0);
        goto LABEL_53;
      case 6u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
        goto LABEL_53;
      case 7u:
        v17 = objc_alloc_init(_INPBContactEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBContactEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactEventTrigger:", v17, 0, 0);
        goto LABEL_53;
      case 8u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_65:
        objc_msgSend(a1, "setPriority:", v32);
        goto LABEL_54;
      case 9u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTaskTitle:", v17, 0, 0);
LABEL_53:

LABEL_54:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_54;
    }
  }
}

void INImageProxyInjectionUtilitiesInjectProxiesIntoSlotComposer(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v18;
  _QWORD block[4];
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;
  NSObject *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v18 = a2;
  v17 = a3;
  v6 = (void *)objc_msgSend(v5, "copyWithZone:", 0);
  v7 = dispatch_group_create();
  v16 = dispatch_queue_create("com.apple.intents.slot-composer-queue", MEMORY[0x1E0C80D50]);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend(v5, "intentSlotDescriptions");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v13, "valueForSlotComposer:", v5);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v14 && objc_msgSend(v14, "conformsToProtocol:", &unk_1EE0390D0))
        {
          dispatch_group_enter(v7);
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 3221225472;
          v22[2] = __INImageProxyInjectionUtilitiesInjectProxiesIntoSlotComposer_block_invoke;
          v22[3] = &unk_1E2288E98;
          v22[4] = v13;
          v23 = v6;
          v24 = v7;
          objc_msgSend(v15, "_injectProxiesForImages:completion:", v18, v22);

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v10);
  }

  if (v17)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __INImageProxyInjectionUtilitiesInjectProxiesIntoSlotComposer_block_invoke_2;
    block[3] = &unk_1E2293BE8;
    v21 = v17;
    v20 = v6;
    dispatch_group_notify(v7, v16, block);

  }
}

void INImageProxyInjectionUtilitiesInjectProxiesIntoObject(void *a1, void *a2, double a3, double a4)
{
  INImageProxyInjectionUtilitiesInjectProxiesIntoObjectWithContinuationHandler(a1, 0x15u, 0, 1, 0, a2, a3, a4);
}

id INTrimToKeyImage(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  dispatch_time_t v7;
  NSObject *v8;
  id v9;
  _QWORD v11[4];
  NSObject *v12;
  uint64_t *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy_;
  v21 = __Block_byref_object_dispose_;
  v22 = 0;
  objc_msgSend(v1, "_keyImage");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __INTrimToKeyImage_block_invoke;
  v14[3] = &unk_1E2288FB0;
  v5 = v3;
  v15 = v5;
  v16 = 0;
  v11[0] = v4;
  v11[1] = 3221225472;
  v11[2] = __INTrimToKeyImage_block_invoke_2;
  v11[3] = &unk_1E2288FD8;
  v13 = &v17;
  v6 = v2;
  v12 = v6;
  objc_msgSend(v1, "_injectProxiesForImages:completion:", v14, v11);
  v7 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(v6, v7))
  {
    v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v24 = "INTrimToKeyImage";
      v25 = 2112;
      v26 = &unk_1E23E9F40;
      v27 = 2112;
      v28 = v1;
      _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s Timing out after %@ seconds during trimming to key image of %@", buf, 0x20u);
    }
  }
  v9 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v9;
}

void sub_18BEFB564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id INExtractKeyImage(void *a1, _QWORD *a2)
{
  id v3;
  dispatch_semaphore_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  id v11;
  _QWORD v13[4];
  NSObject *v14;
  uint64_t *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = dispatch_semaphore_create(0);
  v26 = 0;
  v27 = &v26;
  v28 = 0x3032000000;
  v29 = __Block_byref_object_copy_;
  v30 = __Block_byref_object_dispose_;
  v31 = 0;
  objc_msgSend(v3, "_keyImage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy_;
  v24 = __Block_byref_object_dispose_;
  v25 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __INExtractKeyImage_block_invoke;
  v16[3] = &unk_1E2289000;
  v7 = v5;
  v17 = v7;
  v18 = 0;
  v19 = &v20;
  v13[0] = v6;
  v13[1] = 3221225472;
  v13[2] = __INExtractKeyImage_block_invoke_2;
  v13[3] = &unk_1E2288FD8;
  v15 = &v26;
  v8 = v4;
  v14 = v8;
  objc_msgSend(v3, "_injectProxiesForImages:completion:", v16, v13);
  v9 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(v8, v9))
  {
    v10 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v33 = "INExtractKeyImage";
      v34 = 2112;
      v35 = &unk_1E23E9F40;
      v36 = 2112;
      v37 = v3;
      _os_log_error_impl(&dword_18BEBC000, v10, OS_LOG_TYPE_ERROR, "%s Timing out after %@ seconds during key image extraction from %@", buf, 0x20u);
    }
  }
  *a2 = objc_retainAutorelease((id)v21[5]);
  v11 = (id)v27[5];

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v26, 8);

  return v11;
}

void sub_18BEFB89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id INInsertKeyImageExtraction(void *a1, void *a2)
{
  id v3;
  id v4;
  dispatch_semaphore_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSObject *v10;
  id v11;
  _QWORD v13[4];
  NSObject *v14;
  uint64_t *v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy_;
  v22 = __Block_byref_object_dispose_;
  v23 = 0;
  v5 = dispatch_semaphore_create(0);
  v6 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __INInsertKeyImageExtraction_block_invoke;
  v16[3] = &unk_1E2289028;
  v7 = v4;
  v17 = v7;
  v13[0] = v6;
  v13[1] = 3221225472;
  v13[2] = __INInsertKeyImageExtraction_block_invoke_2;
  v13[3] = &unk_1E2288FD8;
  v15 = &v18;
  v8 = v5;
  v14 = v8;
  objc_msgSend(v3, "_injectProxiesForImages:completion:", v16, v13);
  v9 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(v8, v9))
  {
    v10 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v25 = "INInsertKeyImageExtraction";
      v26 = 2112;
      v27 = &unk_1E23E9F40;
      v28 = 2112;
      v29 = v7;
      v30 = 2112;
      v31 = v3;
      _os_log_error_impl(&dword_18BEBC000, v10, OS_LOG_TYPE_ERROR, "%s Timing out after %@ seconds during insertion of key image extraction %@ to %@", buf, 0x2Au);
    }
  }
  v11 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v11;
}

void sub_18BEFBC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _INPBConfigureHomeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBHomeEntity *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBHomeEntity);
        if (!PBReaderPlaceMark() || !_INPBHomeEntityReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEntities:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPayloadNeedsValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBSelectionItem *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBSelectionItem);
        if (!PBReaderPlaceMark() || !_INPBSelectionItemReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPromptItems:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INPaymentAccount *INIntentSlotValueTransformFromFinancialAccountValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  INPaymentAccount *v16;
  void *v18;
  INPaymentAccount *v19;
  void *v20;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    v19 = [INPaymentAccount alloc];
    objc_msgSend(v2, "accountNickname");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v20);
    v4 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v4;
    objc_msgSend(v2, "accountNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v2, "hasAccountType");
    v7 = objc_msgSend(v2, "accountType") - 1;
    if (v7 <= 6)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v6)
      v9 = v8;
    else
      v9 = 0;
    objc_msgSend(v2, "organizationName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "balance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromBalanceAmountValue(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "secondaryBalance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromBalanceAmountValue(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[INPaymentAccount initWithNickname:number:accountType:organizationName:balance:secondaryBalance:](v19, "initWithNickname:number:accountType:organizationName:balance:secondaryBalance:", v4, v5, v9, v11, v13, v15);

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

_INPBFinancialAccountValue *INIntentSlotValueTransformToFinancialAccountValue(void *a1)
{
  id v1;
  _INPBFinancialAccountValue *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBFinancialAccountValue);
    objc_msgSend(v1, "nickname");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setAccountNickname:](v2, "setAccountNickname:", v4);

    objc_msgSend(v1, "accountNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setAccountNumber:](v2, "setAccountNumber:", v5);

    v6 = objc_msgSend(v1, "accountType") - 1;
    if (v6 < 7)
      v7 = (v6 + 1);
    else
      v7 = 0x7FFFFFFFLL;
    -[_INPBFinancialAccountValue setAccountType:](v2, "setAccountType:", v7);
    objc_msgSend(v1, "organizationName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setOrganizationName:](v2, "setOrganizationName:", v9);

    objc_msgSend(v1, "balance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToBalanceAmountValue(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setBalance:](v2, "setBalance:", v11);

    objc_msgSend(v1, "secondaryBalance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToBalanceAmountValue(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setSecondaryBalance:](v2, "setSecondaryBalance:", v13);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromFinancialAccountValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromFinancialAccountValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFinancialAccountValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToFinancialAccountValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBFinancialAccountValue *INIntentSlotValueRedactedFinancialAccountValueFromFinancialAccountValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _INPBFinancialAccountValue *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "valueMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_alloc_init(_INPBFinancialAccountValue);
    objc_msgSend(v5, "accountNickname");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setAccountNickname:](v9, "setAccountNickname:", v10);

    objc_msgSend(v5, "accountNumber");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setAccountNumber:](v9, "setAccountNumber:", v11);

    -[_INPBFinancialAccountValue setAccountType:](v9, "setAccountType:", objc_msgSend(v5, "accountType"));
    objc_msgSend(v5, "organizationName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setOrganizationName:](v9, "setOrganizationName:", v12);

    objc_msgSend(v5, "balance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedBalanceAmountValueFromBalanceAmountValue(v13, a2, v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setBalance:](v9, "setBalance:", v14);

    objc_msgSend(v5, "secondaryBalance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedBalanceAmountValueFromBalanceAmountValue(v15, a2, v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFinancialAccountValue setSecondaryBalance:](v9, "setSecondaryBalance:", v16);

  }
  return v9;
}

__CFString *INActivateCarSignalIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2289048[a1];
}

BOOL _INPBPaymentMethodListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBPaymentMethod);
    if (!PBReaderPlaceMark() || !_INPBPaymentMethodReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addPaymentMethods:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INSetMessageAttributeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E2289078[a1];
}

BOOL _INPBHomeContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBHomeAttribute *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBHomeAttribute);
        if (!PBReaderPlaceMark() || !_INPBHomeAttributeReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addActions:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBHomeFilter);
    if (!PBReaderPlaceMark() || (_INPBHomeFilterReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setFilter:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBHomeFilterReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDataString *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addEntityIdentifiers:", v17);
        goto LABEL_78;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHome:", v17, 0, 0);
        goto LABEL_78;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setScene:", v17, 0, 0);
        goto LABEL_78;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setZone:", v17, 0, 0);
        goto LABEL_78;
      case 5u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroup:", v17, 0, 0);
        goto LABEL_78;
      case 6u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRoom:", v17, 0, 0);
        goto LABEL_78;
      case 7u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAccessory:", v17, 0, 0);
        goto LABEL_78;
      case 8u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setService:", v17, 0, 0);
        goto LABEL_78;
      case 9u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_106:
        objc_msgSend(a1, "setEntityType:", v25);
        goto LABEL_79;
      case 0xAu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_111:
        objc_msgSend(a1, "setServiceType:", v32);
        goto LABEL_79;
      case 0xBu:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_116:
        objc_msgSend(a1, "setSubServiceType:", v39);
        goto LABEL_79;
      case 0xCu:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v42 = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v42 = 0;
LABEL_120:
        objc_msgSend(a1, "setIsExcludeFilter:", v42 != 0);
        goto LABEL_79;
      case 0xDu:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_136;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v17, 0, 0);
        goto LABEL_78;
      case 0xEu:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setOuterDeviceName:", v17, 0, 0);
LABEL_78:

LABEL_79:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_136:

        return 0;
      case 0xFu:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v52 = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v52 = 0;
        else
          v52 = v48;
LABEL_125:
        objc_msgSend(a1, "setOuterDeviceType:", v52);
        goto LABEL_79;
      case 0x10u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v59 = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
        else
          v59 = v55;
LABEL_130:
        objc_msgSend(a1, "setDeviceType:", v59);
        goto LABEL_79;
      case 0x11u:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                v62 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v62 = 0;
LABEL_134:
        objc_msgSend(a1, "setHasAllQuantifier:", v62 != 0);
        goto LABEL_79;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_79;
    }
  }
}

BOOL _INPBRunWorkflowIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkflow:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18BF078B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18BF07E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  (*(void (**)(void))(a16 + 16))();
  _Unwind_Resume(a1);
}

id INCounterpartIdentifiersForApplicationRecord(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (objc_class *)MEMORY[0x1E0C99E20];
  v2 = a1;
  v3 = [v1 alloc];
  objc_msgSend(v2, "counterpartIdentifiers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    v5 = v4;
  else
    v5 = (void *)MEMORY[0x1E0C9AA60];
  v6 = (void *)objc_msgSend(v3, "initWithArray:", v5);

  return v6;
}

uint64_t INCancelRideIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return (uint64_t)*(&off_1E2289400 + a1);
}

BOOL INMenstruationValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

unint64_t INMenstruationValueTypeGetBackingType(unint64_t result)
{
  if (result >= 4)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INMenstruationValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INMenstruationValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return *(&off_1E2289420 + a1 - 1);
}

uint64_t INMenstruationValueTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("light")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("medium")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("heavy")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMenstruationValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("heavy");
      break;
    case 2:
      v4 = CFSTR("medium");
      break;
    case 1:
      v4 = CFSTR("light");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBShareFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_44:
        objc_msgSend(a1, "setShareMode:", v25, v26, v27);
        goto LABEL_45;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_47;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEntityName:", v17, 0, 0);
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(_INPBShareDestination);
        v26 = 0;
        v27 = 0;
        if (PBReaderPlaceMark() && _INPBShareDestinationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addRecipients:", v17, 0, 0);
LABEL_39:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

BOOL _INPBAppBuildReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBAppId *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBAppId);
        if (!PBReaderPlaceMark() || (_INPBAppIdReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppId:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBBuildId);
    if (!PBReaderPlaceMark() || !_INPBBuildIdReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setBuildId:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18BF0B3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWFOnScreenContentNodeClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!VoiceShortcutClientLibraryCore_frameworkLibrary)
  {
    VoiceShortcutClientLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!VoiceShortcutClientLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("WFOnScreenContentNode");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getWFOnScreenContentNodeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _INPBDataStringListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDoubleReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDoubleValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDoubleValue);
        if (!PBReaderPlaceMark() || !_INPBDoubleValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void INIssueSandboxExtensionToProcess(void *a1, __int128 *a2)
{
  __int128 v2;
  _QWORD v3[4];
  __int128 v4;
  __int128 v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __INIssueSandboxExtensionToProcess_block_invoke;
  v3[3] = &__block_descriptor_64_e15__16__0__NSURL_8l;
  v2 = a2[1];
  v4 = *a2;
  v5 = v2;
  _INIssueSandboxExtensionWithTokenGeneratorBlock(a1, v3);
}

void _INIssueSandboxExtensionWithTokenGeneratorBlock(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, id);
  const char *v5;
  NSObject *v6;
  void *v7;
  int *v8;
  char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isFileURL"))
  {
    v5 = (const char *)v4[2](v4, v3);
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v5, strlen(v5) + 1);
      v6 = objc_claimAutoreleasedReturnValue();
      MEMORY[0x18D780D9C](v3, v6);
    }
    else
    {
      v7 = (void *)INSiriLogContextIntents;
      if (!os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
        goto LABEL_6;
      v6 = v7;
      v8 = __error();
      v9 = strerror(*v8);
      v10 = 136315650;
      v11 = "_INIssueSandboxExtensionWithTokenGeneratorBlock";
      v12 = 2112;
      v13 = v3;
      v14 = 2080;
      v15 = v9;
      _os_log_error_impl(&dword_18BEBC000, v6, OS_LOG_TYPE_ERROR, "%s Could not create sandbox read extension for file URL %@, error: %s", (uint8_t *)&v10, 0x20u);
    }

  }
LABEL_6:

}

void INIssueSandboxExtensionsForFileURLEnumerableToProcess(void *a1, __int128 *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;

  v3 = a1;
  v4 = objc_opt_class();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __INIssueSandboxExtensionsForFileURLEnumerableToProcess_block_invoke;
  v6[3] = &__block_descriptor_64_e15_B16__0__NSURL_8l;
  v5 = a2[1];
  v7 = *a2;
  v8 = v5;
  objc_msgSend(v3, "_intents_enumerateObjectsOfClass:withBlock:", v4, v6);

}

void INIssueSandboxExtensionsForFileURLEnumerable(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "_intents_enumerateObjectsOfClass:withBlock:", objc_opt_class(), &__block_literal_global_3346);

}

BOOL INNotebookItemTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

uint64_t INNotebookItemTypeGetBackingType(unint64_t a1)
{
  if (a1 >= 4)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1);
}

uint64_t INNotebookItemTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 3;
  v3 = 2;
  if (a2 != 20)
    v3 = a2 == 10;
  if (a2 != 30)
    v2 = v3;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INNotebookItemTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E22894E0[a1 - 1];
}

uint64_t INNotebookItemTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("note")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("taskList")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("task")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INNotebookItemTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("task");
      break;
    case 2:
      v4 = CFSTR("task list");
      break;
    case 1:
      v4 = CFSTR("note");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

id INIntentSchemaGetIntentNames()
{
  if (INIntentSchemaGetIntentNames_onceToken != -1)
    dispatch_once(&INIntentSchemaGetIntentNames_onceToken, &__block_literal_global_3530);
  return (id)INIntentSchemaGetIntentNames_list;
}

id INIntentSchemaGetIntentTypes()
{
  if (INIntentSchemaGetIntentTypes_onceToken != -1)
    dispatch_once(&INIntentSchemaGetIntentTypes_onceToken, &__block_literal_global_224);
  return (id)INIntentSchemaGetIntentTypes_list;
}

id INAlarmDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INAlarmDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INAlarmDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_949);
    objc_msgSend((id)sAlarmDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCalendarEventDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCalendarEventDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCalendarEventDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_1257);
    objc_msgSend((id)sCalendarEventDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallsDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCallsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCallsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_1678);
    objc_msgSend((id)sCallsDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarPlayDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCarPlayDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCarPlayDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_2108);
    objc_msgSend((id)sCarPlayDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INContactDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INContactDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INContactDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_2930);
    objc_msgSend((id)sContactDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFilesDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFilesDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFilesDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3048);
    objc_msgSend((id)sFilesDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFindDeviceDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFindDeviceDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFindDeviceDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3050);
    objc_msgSend((id)sFindDeviceDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFocusStatusDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFocusStatusDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFocusStatusDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3089);
    objc_msgSend((id)sFocusStatusDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGeoDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGeoDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGeoDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3101);
    objc_msgSend((id)sGeoDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeCommunicationDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeCommunicationDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeCommunicationDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3344);
    objc_msgSend((id)sHomeCommunicationDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeKitDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeKitDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeKitDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3444);
    objc_msgSend((id)sHomeKitDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessagesDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMessagesDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMessagesDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3904);
    objc_msgSend((id)sMessagesDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INNotebookDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INNotebookDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INNotebookDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_4253);
    objc_msgSend((id)sNotebookDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPaymentsDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPaymentsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPaymentsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5101);
    objc_msgSend((id)sPaymentsDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPhotosDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPhotosDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPhotosDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5692);
    objc_msgSend((id)sPhotosDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRRaaSDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRRaaSDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRRaaSDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5896);
    objc_msgSend((id)sRRaaSDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRadioDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRadioDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRadioDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5928);
    objc_msgSend((id)sRadioDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INReservationsDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INReservationsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INReservationsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6039);
    objc_msgSend((id)sReservationsDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRidesharingDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRidesharingDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRidesharingDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6079);
    objc_msgSend((id)sRidesharingDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSettingsDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INSettingsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INSettingsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6249);
    objc_msgSend((id)sSettingsDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTimersDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INTimersDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INTimersDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6679);
    objc_msgSend((id)sTimersDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVisualCodeDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVisualCodeDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVisualCodeDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7103);
    objc_msgSend((id)sVisualCodeDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVoiceCommandsDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVoiceCommandsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVoiceCommandsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7144);
    objc_msgSend((id)sVoiceCommandsDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWellnessDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWellnessDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7264);
    objc_msgSend((id)sWellnessDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkflowDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkflowDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkflowDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7549);
    objc_msgSend((id)sWorkflowDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutsDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkoutsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkoutsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7586);
    objc_msgSend((id)sWorkoutsDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGenericDomainGetIntentDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGenericDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGenericDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7812);
    objc_msgSend((id)sGenericDomain_intentDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSchemaGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    if (INIntentSchemaGetIntentDescriptionWithType_onceToken != -1)
      dispatch_once(&INIntentSchemaGetIntentDescriptionWithType_onceToken, &__block_literal_global_481);
    objc_msgSend((id)INIntentSchemaGetIntentDescriptionWithType_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

    switch(v3)
    {
      case 1:
        INAlarmDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        INCalendarEventDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        INCallsDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 4:
        INCarPlayDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 5:
        INContactDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 6:
        INFilesDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 7:
        INFindDeviceDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 8:
        INFocusStatusDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 9:
        INGeoDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 10:
        INHomeCommunicationDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 11:
        INHomeKitDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 12:
        INMediaDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 13:
        INMessagesDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 14:
        INNotebookDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 15:
        INPaymentsDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 16:
        INPhotosDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 17:
        INRRaaSDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 18:
        INRadioDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 19:
        INReservationsDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 20:
        INRidesharingDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 21:
        INSettingsDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 22:
        INTimersDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 23:
        INVisualCodeDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 24:
        INVoiceCommandsDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 25:
        INWellnessDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 26:
        INWorkflowDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 27:
        INWorkoutsDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 28:
        INGenericDomainGetIntentDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_6;
    }
    v5 = (void *)v4;
  }
  else
  {
LABEL_6:
    v5 = 0;
  }

  return v5;
}

id INAlarmDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INAlarmDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INAlarmDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_949);
    objc_msgSend((id)sAlarmDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCalendarEventDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCalendarEventDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCalendarEventDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_1257);
    objc_msgSend((id)sCalendarEventDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallsDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCallsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCallsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_1678);
    objc_msgSend((id)sCallsDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarPlayDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCarPlayDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCarPlayDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_2108);
    objc_msgSend((id)sCarPlayDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INContactDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INContactDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INContactDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_2930);
    objc_msgSend((id)sContactDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFilesDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFilesDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFilesDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3048);
    objc_msgSend((id)sFilesDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFindDeviceDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFindDeviceDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFindDeviceDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3050);
    objc_msgSend((id)sFindDeviceDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFocusStatusDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFocusStatusDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFocusStatusDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3089);
    objc_msgSend((id)sFocusStatusDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGeoDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGeoDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGeoDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3101);
    objc_msgSend((id)sGeoDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeCommunicationDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeCommunicationDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeCommunicationDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3344);
    objc_msgSend((id)sHomeCommunicationDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeKitDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeKitDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeKitDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3444);
    objc_msgSend((id)sHomeKitDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMediaDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMediaDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3615);
    objc_msgSend((id)sMediaDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessagesDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMessagesDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMessagesDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_3904);
    objc_msgSend((id)sMessagesDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INNotebookDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INNotebookDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INNotebookDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_4253);
    objc_msgSend((id)sNotebookDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPaymentsDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPaymentsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPaymentsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5101);
    objc_msgSend((id)sPaymentsDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPhotosDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPhotosDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPhotosDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5692);
    objc_msgSend((id)sPhotosDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRRaaSDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRRaaSDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRRaaSDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5896);
    objc_msgSend((id)sRRaaSDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRadioDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRadioDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRadioDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_5928);
    objc_msgSend((id)sRadioDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INReservationsDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INReservationsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INReservationsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6039);
    objc_msgSend((id)sReservationsDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRidesharingDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRidesharingDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRidesharingDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6079);
    objc_msgSend((id)sRidesharingDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSettingsDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INSettingsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INSettingsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6249);
    objc_msgSend((id)sSettingsDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTimersDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INTimersDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INTimersDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_6679);
    objc_msgSend((id)sTimersDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVisualCodeDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVisualCodeDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVisualCodeDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7103);
    objc_msgSend((id)sVisualCodeDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVoiceCommandsDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVoiceCommandsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVoiceCommandsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7144);
    objc_msgSend((id)sVoiceCommandsDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWellnessDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWellnessDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7264);
    objc_msgSend((id)sWellnessDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkflowDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkflowDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkflowDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7549);
    objc_msgSend((id)sWorkflowDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutsDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkoutsDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkoutsDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7586);
    objc_msgSend((id)sWorkoutsDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGenericDomainGetIntentDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGenericDomainLoadIntentDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGenericDomainLoadIntentDescriptionIfNeeded_onceToken, &__block_literal_global_7812);
    objc_msgSend((id)sGenericDomain_intentDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSchemaGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSchemaGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INIntentSchemaGetIntentResponseNames()
{
  if (INIntentSchemaGetIntentResponseNames_onceToken != -1)
    dispatch_once(&INIntentSchemaGetIntentResponseNames_onceToken, &__block_literal_global_487);
  return (id)INIntentSchemaGetIntentResponseNames_list;
}

id INIntentSchemaGetIntentResponseTypes()
{
  if (INIntentSchemaGetIntentResponseTypes_onceToken != -1)
    dispatch_once(&INIntentSchemaGetIntentResponseTypes_onceToken, &__block_literal_global_714);
  return (id)INIntentSchemaGetIntentResponseTypes_list;
}

id INIntentSchemaGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    if (INIntentSchemaGetIntentResponseDescriptionWithName_onceToken != -1)
      dispatch_once(&INIntentSchemaGetIntentResponseDescriptionWithName_onceToken, &__block_literal_global_941);
    objc_msgSend((id)INIntentSchemaGetIntentResponseDescriptionWithName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

    switch(v3)
    {
      case 1:
        INAlarmDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        INCalendarEventDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        INCallsDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 4:
        INCarPlayDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 5:
        INContactDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 6:
        INFilesDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 7:
        INFindDeviceDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 8:
        INFocusStatusDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 9:
        INGeoDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 10:
        INHomeCommunicationDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 11:
        INHomeKitDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 12:
        INMediaDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 13:
        INMessagesDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 14:
        INNotebookDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 15:
        INPaymentsDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 16:
        INPhotosDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 17:
        INRRaaSDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 18:
        INRadioDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 19:
        INReservationsDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 20:
        INRidesharingDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 21:
        INSettingsDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 22:
        INTimersDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 23:
        INVisualCodeDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 24:
        INVoiceCommandsDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 25:
        INWellnessDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 26:
        INWorkflowDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 27:
        INWorkoutsDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 28:
        INGenericDomainGetIntentResponseDescriptionWithName(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_6;
    }
    v5 = (void *)v4;
  }
  else
  {
LABEL_6:
    v5 = 0;
  }

  return v5;
}

id INAlarmDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INAlarmDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INAlarmDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_1233);
    objc_msgSend((id)sAlarmDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCalendarEventDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCalendarEventDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCalendarEventDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_1659);
    objc_msgSend((id)sCalendarEventDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallsDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCallsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCallsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_2067);
    objc_msgSend((id)sCallsDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarPlayDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCarPlayDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCarPlayDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_2869);
    objc_msgSend((id)sCarPlayDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INContactDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INContactDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INContactDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3035);
    objc_msgSend((id)sContactDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFilesDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFilesDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFilesDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3049);
    objc_msgSend((id)sFilesDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFindDeviceDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFindDeviceDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFindDeviceDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3082);
    objc_msgSend((id)sFindDeviceDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFocusStatusDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFocusStatusDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFocusStatusDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3098);
    objc_msgSend((id)sFocusStatusDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGeoDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGeoDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGeoDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3319);
    objc_msgSend((id)sGeoDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeCommunicationDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeCommunicationDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeCommunicationDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3427);
    objc_msgSend((id)sHomeCommunicationDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeKitDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeKitDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeKitDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3604);
    objc_msgSend((id)sHomeKitDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMediaDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMediaDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3893);
    objc_msgSend((id)sMediaDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessagesDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMessagesDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMessagesDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_4234);
    objc_msgSend((id)sMessagesDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INNotebookDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INNotebookDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INNotebookDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5060);
    objc_msgSend((id)sNotebookDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPaymentsDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPaymentsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPaymentsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5669);
    objc_msgSend((id)sPaymentsDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPhotosDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPhotosDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPhotosDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5889);
    objc_msgSend((id)sPhotosDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRRaaSDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRRaaSDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRRaaSDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5923);
    objc_msgSend((id)sRRaaSDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRadioDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRadioDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRadioDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6036);
    objc_msgSend((id)sRadioDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INReservationsDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INReservationsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INReservationsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6074);
    objc_msgSend((id)sReservationsDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRidesharingDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRidesharingDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRidesharingDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6236);
    objc_msgSend((id)sRidesharingDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSettingsDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INSettingsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INSettingsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6650);
    objc_msgSend((id)sSettingsDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTimersDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INTimersDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INTimersDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7072);
    objc_msgSend((id)sTimersDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVisualCodeDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVisualCodeDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVisualCodeDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7137);
    objc_msgSend((id)sVisualCodeDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVoiceCommandsDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVoiceCommandsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVoiceCommandsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7225);
    objc_msgSend((id)sVoiceCommandsDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWellnessDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWellnessDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7528);
    objc_msgSend((id)sWellnessDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkflowDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkflowDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkflowDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7577);
    objc_msgSend((id)sWorkflowDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutsDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkoutsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkoutsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7801);
    objc_msgSend((id)sWorkoutsDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGenericDomainGetIntentResponseDescriptionWithName(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGenericDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGenericDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7815);
    objc_msgSend((id)sGenericDomain_intentResponseDescsByName, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSchemaGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    if (INIntentSchemaGetIntentResponseDescriptionWithType_onceToken != -1)
      dispatch_once(&INIntentSchemaGetIntentResponseDescriptionWithType_onceToken, &__block_literal_global_945);
    objc_msgSend((id)INIntentSchemaGetIntentResponseDescriptionWithType_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

    switch(v3)
    {
      case 1:
        INAlarmDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        INCalendarEventDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        INCallsDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 4:
        INCarPlayDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 5:
        INContactDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 6:
        INFilesDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 7:
        INFindDeviceDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 8:
        INFocusStatusDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 9:
        INGeoDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 10:
        INHomeCommunicationDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 11:
        INHomeKitDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 12:
        INMediaDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 13:
        INMessagesDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 14:
        INNotebookDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 15:
        INPaymentsDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 16:
        INPhotosDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 17:
        INRRaaSDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 18:
        INRadioDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 19:
        INReservationsDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 20:
        INRidesharingDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 21:
        INSettingsDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 22:
        INTimersDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 23:
        INVisualCodeDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 24:
        INVoiceCommandsDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 25:
        INWellnessDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 26:
        INWorkflowDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 27:
        INWorkoutsDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 28:
        INGenericDomainGetIntentResponseDescriptionWithType(v1);
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_6;
    }
    v5 = (void *)v4;
  }
  else
  {
LABEL_6:
    v5 = 0;
  }

  return v5;
}

id INAlarmDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INAlarmDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INAlarmDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_1233);
    objc_msgSend((id)sAlarmDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCalendarEventDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCalendarEventDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCalendarEventDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_1659);
    objc_msgSend((id)sCalendarEventDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallsDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCallsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCallsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_2067);
    objc_msgSend((id)sCallsDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarPlayDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INCarPlayDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INCarPlayDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_2869);
    objc_msgSend((id)sCarPlayDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INContactDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INContactDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INContactDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3035);
    objc_msgSend((id)sContactDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFilesDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFilesDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFilesDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3049);
    objc_msgSend((id)sFilesDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFindDeviceDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFindDeviceDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFindDeviceDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3082);
    objc_msgSend((id)sFindDeviceDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INFocusStatusDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INFocusStatusDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INFocusStatusDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3098);
    objc_msgSend((id)sFocusStatusDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGeoDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGeoDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGeoDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3319);
    objc_msgSend((id)sGeoDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeCommunicationDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeCommunicationDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeCommunicationDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3427);
    objc_msgSend((id)sHomeCommunicationDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeKitDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INHomeKitDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INHomeKitDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3604);
    objc_msgSend((id)sHomeKitDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMediaDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMediaDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMediaDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_3893);
    objc_msgSend((id)sMediaDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessagesDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INMessagesDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INMessagesDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_4234);
    objc_msgSend((id)sMessagesDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INNotebookDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INNotebookDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INNotebookDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5060);
    objc_msgSend((id)sNotebookDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPaymentsDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPaymentsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPaymentsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5669);
    objc_msgSend((id)sPaymentsDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPhotosDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INPhotosDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INPhotosDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5889);
    objc_msgSend((id)sPhotosDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRRaaSDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRRaaSDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRRaaSDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_5923);
    objc_msgSend((id)sRRaaSDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRadioDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRadioDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRadioDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6036);
    objc_msgSend((id)sRadioDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INReservationsDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INReservationsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INReservationsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6074);
    objc_msgSend((id)sReservationsDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRidesharingDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INRidesharingDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INRidesharingDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6236);
    objc_msgSend((id)sRidesharingDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSettingsDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INSettingsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INSettingsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_6650);
    objc_msgSend((id)sSettingsDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTimersDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INTimersDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INTimersDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7072);
    objc_msgSend((id)sTimersDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVisualCodeDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVisualCodeDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVisualCodeDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7137);
    objc_msgSend((id)sVisualCodeDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVoiceCommandsDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INVoiceCommandsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INVoiceCommandsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7225);
    objc_msgSend((id)sVoiceCommandsDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWellnessDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWellnessDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7528);
    objc_msgSend((id)sWellnessDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkflowDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkflowDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkflowDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7577);
    objc_msgSend((id)sWorkflowDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutsDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INWorkoutsDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INWorkoutsDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7801);
    objc_msgSend((id)sWorkoutsDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INGenericDomainGetIntentResponseDescriptionWithType(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_INGenericDomainLoadIntentResponseDescriptionIfNeeded_onceToken != -1)
      dispatch_once(&_INGenericDomainLoadIntentResponseDescriptionIfNeeded_onceToken, &__block_literal_global_7815);
    objc_msgSend((id)sGenericDomain_intentResponseDescsByType, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSchemaGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1, "hasPrefix:", CFSTR("IN")))
    {
      objc_msgSend(v1, "substringFromIndex:", 2);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSchemaGetIntentResponseDescriptionWithName(v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INIntentSchemaGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSchemaGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INAlarmDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INAlarmDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INAlarmDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INAlarmDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INAlarmDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INAlarmDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INAlarmDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INAlarmDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCalendarEventDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCalendarEventDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCalendarEventDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCalendarEventDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCalendarEventDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCalendarEventDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCalendarEventDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCalendarEventDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCallsDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCallsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCallsDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCallsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCallsDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCallsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCallsDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCallsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCarPlayDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCarPlayDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCarPlayDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCarPlayDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCarPlayDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCarPlayDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INCarPlayDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INCarPlayDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INContactDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INContactDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INContactDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INContactDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INContactDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INContactDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INContactDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INContactDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFilesDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFilesDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFilesDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFilesDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFilesDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFilesDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFilesDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFilesDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFindDeviceDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFindDeviceDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFindDeviceDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFindDeviceDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFindDeviceDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFindDeviceDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFindDeviceDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFindDeviceDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFocusStatusDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFocusStatusDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFocusStatusDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFocusStatusDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFocusStatusDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFocusStatusDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INFocusStatusDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INFocusStatusDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGeoDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGeoDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGeoDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGeoDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGeoDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGeoDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGeoDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGeoDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeCommunicationDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeCommunicationDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeCommunicationDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeCommunicationDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeCommunicationDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeCommunicationDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeCommunicationDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeCommunicationDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeKitDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeKitDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeKitDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeKitDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeKitDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeKitDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INHomeKitDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INHomeKitDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMediaDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMediaDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMediaDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMediaDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMediaDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMediaDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMediaDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMediaDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMessagesDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMessagesDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMessagesDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMessagesDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMessagesDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMessagesDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INMessagesDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INMessagesDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INNotebookDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INNotebookDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INNotebookDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INNotebookDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INNotebookDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INNotebookDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INNotebookDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INNotebookDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPaymentsDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPaymentsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPaymentsDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPaymentsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPaymentsDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPaymentsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPaymentsDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPaymentsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPhotosDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPhotosDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPhotosDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPhotosDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPhotosDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPhotosDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INPhotosDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INPhotosDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRRaaSDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRRaaSDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRRaaSDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRRaaSDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRRaaSDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRRaaSDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRRaaSDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRRaaSDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRadioDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRadioDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRadioDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRadioDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRadioDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRadioDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRadioDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRadioDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INReservationsDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INReservationsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INReservationsDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INReservationsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INReservationsDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INReservationsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INReservationsDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INReservationsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRidesharingDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRidesharingDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRidesharingDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRidesharingDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRidesharingDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRidesharingDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INRidesharingDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INRidesharingDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INSettingsDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INSettingsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INSettingsDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INSettingsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INSettingsDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INSettingsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INSettingsDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INSettingsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INTimersDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INTimersDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INTimersDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INTimersDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INTimersDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INTimersDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INTimersDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INTimersDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVisualCodeDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVisualCodeDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVisualCodeDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVisualCodeDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVisualCodeDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVisualCodeDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVisualCodeDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVisualCodeDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVoiceCommandsDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVoiceCommandsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVoiceCommandsDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVoiceCommandsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVoiceCommandsDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVoiceCommandsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INVoiceCommandsDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INVoiceCommandsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWellnessDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWellnessDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWellnessDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWellnessDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWellnessDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWellnessDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWellnessDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWellnessDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkflowDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkflowDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkflowDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkflowDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkflowDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkflowDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkflowDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkflowDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkoutsDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkoutsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkoutsDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkoutsDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkoutsDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkoutsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INWorkoutsDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INWorkoutsDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGenericDomainGetIntentDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGenericDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGenericDomainGetIntentDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGenericDomainGetIntentDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGenericDomainGetIntentResponseDescriptionWithFacadeClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGenericDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id INGenericDomainGetIntentResponseDescriptionWithDataClass(objc_class *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    NSStringFromClass(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringFromIndex:", 5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INGenericDomainGetIntentResponseDescriptionWithName(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

Class __getPDCPreflightManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!PrivacyDisclosureCoreLibraryCore_frameworkLibrary)
  {
    PrivacyDisclosureCoreLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!PrivacyDisclosureCoreLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PDCPreflightManager");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getPDCPreflightManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _INPBVoiceCommandDeviceInformationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v29 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        v29 = *(_BYTE *)(a2 + *v5) ? 0 : v25;
LABEL_44:
        objc_msgSend(a1, "setDeviceIdiom:", v29);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        objc_msgSend(a1, "setIsHomePodInUltimateMode:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18BF326B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCSSearchableItemAttributeSetClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  CoreSpotlightLibrary();
  result = objc_getClass("CSSearchableItemAttributeSet");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCSSearchableItemAttributeSetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCSSearchableItemClass_block_invoke(v3);
  }
  return result;
}

Class __getCSSearchableItemClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;
  uint64_t v4;

  CoreSpotlightLibrary();
  result = objc_getClass("CSSearchableItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCSSearchableItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__52__INInteraction__injectProxiesForImages_completion___block_invoke_3(v3, v4);
  }
  return result;
}

Class __getSAUISnippetClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!SAObjectsLibraryCore_frameworkLibrary)
  {
    SAObjectsLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!SAObjectsLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("SAUISnippet");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getSAUISnippetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *INAppendToNoteIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E2289FF8[a1];
}

id INIntentSlotValueTransformFromInteger(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromIntegerValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromIntegerValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1
    && (objc_msgSend(v1, "valueMetadata"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        INPrivacyEntitlementValidateValueMetadata(v3),
        v3,
        objc_msgSend(v2, "hasValue")))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v2, "value"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

_INPBInteger *INIntentSlotValueTransformToInteger(void *a1)
{
  void *v1;
  _INPBInteger *v2;

  INIntentSlotValueTransformToIntegerValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBInteger);
    -[_INPBInteger addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBIntegerValue *INIntentSlotValueTransformToIntegerValue(void *a1)
{
  id v1;
  _INPBIntegerValue *v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBIntegerValue);
    v3 = objc_msgSend(v1, "intValue");

    -[_INPBIntegerValue setValue:](v2, "setValue:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromLong(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromLongValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromLongValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1
    && (objc_msgSend(v1, "valueMetadata"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        INPrivacyEntitlementValidateValueMetadata(v3),
        v3,
        objc_msgSend(v2, "hasValue")))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v2, "value"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

_INPBLong *INIntentSlotValueTransformToLong(void *a1)
{
  void *v1;
  _INPBLong *v2;

  INIntentSlotValueTransformToLongValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBLong);
    -[_INPBLong addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBLongValue *INIntentSlotValueTransformToLongValue(void *a1)
{
  id v1;
  _INPBLongValue *v2;
  int v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBLongValue);
    v3 = objc_msgSend(v1, "intValue");

    -[_INPBLongValue setValue:](v2, "setValue:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromIntegers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromInteger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromLongs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromLong(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToIntegers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToInteger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToLongs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToLong(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromIntegerValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromIntegerValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToIntegerValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToIntegerValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromLongValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromLongValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToLongValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToLongValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBInteger *INIntentSlotValueRedactedIntegerFromInteger(void *a1, uint64_t a2)
{
  id v3;
  _INPBInteger *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = objc_alloc_init(_INPBInteger);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v3, "values", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = *(_QWORD *)v15;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
      objc_msgSend(v10, "valueMetadata");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = INPrivacyEntitlementOptionsForValueMetadata(v11);

      if ((v12 & a2) == 0)
      {
        if (!v10)
          continue;
        -[_INPBInteger addValue:](v4, "addValue:", v10);
      }

    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  }
  while (v7);
LABEL_13:

LABEL_15:
  return v4;
}

id INIntentSlotValueRedactedIntegersFromIntegers(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedIntegerFromInteger(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

_INPBLong *INIntentSlotValueRedactedLongFromLong(void *a1, uint64_t a2)
{
  id v3;
  _INPBLong *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = objc_alloc_init(_INPBLong);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v3, "values", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = *(_QWORD *)v15;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
      objc_msgSend(v10, "valueMetadata");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = INPrivacyEntitlementOptionsForValueMetadata(v11);

      if ((v12 & a2) == 0)
      {
        if (!v10)
          continue;
        -[_INPBLong addValue:](v4, "addValue:", v10);
      }

    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  }
  while (v7);
LABEL_13:

LABEL_15:
  return v4;
}

id INIntentSlotValueRedactedLongssFromLongs(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedLongFromLong(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

__CFString *INStartWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return off_1E228A030[a1];
}

__CFString *INAddTasksIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228A078[a1];
}

void INPrivacyEntitlementOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (a1 && v3)
  {
    v4 = v3;
    if ((a1 & 1) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
      v3 = v4;
    }
    if ((a1 & 2) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
      v3 = v4;
    }
  }

}

uint64_t INPrivacyEntitlementOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = (a1 >> 1) & 1;
  v3 = a1 & 1;
  if (a2 != 1)
    v3 = 0;
  if (a2 != 2)
    LODWORD(v2) = v3;
  if (a1)
    return v2;
  else
    return 0;
}

uint64_t *INPrivacyEntitlementOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result | 1;
    if (a2 == 2)
      v2 = *result | 2;
    *result = v2;
  }
  return result;
}

unint64_t *INPrivacyEntitlementOptionsRemoveBackingType(unint64_t *result, int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (a2 == 2)
      v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    *result = v2;
  }
  return result;
}

id INPrivacyEntitlementOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("contacts"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("location"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t INPrivacyEntitlementOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("contacts"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("location")))
          v4 |= 2uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INPrivacyEntitlementOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((a1 & 1) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("contacts"), CFSTR("contacts"), v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v5);

    }
    if ((a1 & 2) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("location"), CFSTR("location"), v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);

    }
    v7 = (void *)objc_msgSend(v4, "copy");

  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v7;
}

__CFString *INRunVoiceCommandIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0x15)
    return 0;
  else
    return off_1E228A0A8[a1];
}

__CFString *INSetRadioStationIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E228A158[a1];
}

id INIntentSlotValueTransformFromBool(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromBoolValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromBoolValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1
    && (objc_msgSend(v1, "valueMetadata"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        INPrivacyEntitlementValidateValueMetadata(v3),
        v3,
        objc_msgSend(v2, "hasValue")))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v2, "value"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

_INPBBool *INIntentSlotValueTransformToBool(void *a1)
{
  void *v1;
  _INPBBool *v2;

  INIntentSlotValueTransformToBoolValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBBool);
    -[_INPBBool addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBBoolValue *INIntentSlotValueTransformToBoolValue(void *a1)
{
  id v1;
  _INPBBoolValue *v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBBoolValue);
    v3 = objc_msgSend(v1, "BOOLValue");

    -[_INPBBoolValue setValue:](v2, "setValue:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromBools(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromBool(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToBools(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToBool(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromBoolValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromBoolValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToBoolValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToBoolValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBBool *INIntentSlotValueRedactedBoolFromBool(void *a1, uint64_t a2)
{
  id v3;
  _INPBBool *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = objc_alloc_init(_INPBBool);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v3, "values", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = *(_QWORD *)v15;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
      objc_msgSend(v10, "valueMetadata");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = INPrivacyEntitlementOptionsForValueMetadata(v11);

      if ((v12 & a2) == 0)
      {
        if (!v10)
          continue;
        -[_INPBBool addValue:](v4, "addValue:", v10);
      }

    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  }
  while (v7);
LABEL_13:

LABEL_15:
  return v4;
}

id INIntentSlotValueRedactedBoolsFromBools(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedBoolFromBool(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

BOOL _INPBIntentVocabularyReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentSlotVocabularyPolicy *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBIntentSlotVocabularyPolicy);
        if (!PBReaderPlaceMark() || !_INPBIntentSlotVocabularyPolicyReadFrom(v17, a2))
          goto LABEL_33;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentSlotVocabularyPolicies:", v17, 0, 0);
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentTypePhrases);
    if (!PBReaderPlaceMark() || !_INPBIntentTypePhrasesReadFrom(v17, a2))
    {
LABEL_33:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addIntentTypePhrases:", v17, 0, 0);
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

Class __getCSSearchableIndexClass_block_invoke_5410(uint64_t a1)
{
  Class result;
  void *v3;

  if (!CoreSpotlightLibraryCore_frameworkLibrary_5412)
  {
    CoreSpotlightLibraryCore_frameworkLibrary_5412 = _sl_dlopen();
    if (!CoreSpotlightLibraryCore_frameworkLibrary_5412)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CSSearchableIndex");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCSSearchableIndexClass_softClass_5409 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _INPBDateTimeRangeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDateTimeRangeValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || !_INPBDateTimeRangeValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBBoolReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBBoolValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBBoolValue);
        if (!PBReaderPlaceMark() || !_INPBBoolValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBRunWorkflowIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBArchivedObject *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBArchivedObject);
        if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnderlyingIntent:", v17, 0, 0);
        goto LABEL_46;
      case 2u:
        v17 = objc_alloc_init(_INPBArchivedObject);
        if (!PBReaderPlaceMark() || !_INPBArchivedObjectReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnderlyingIntentResponse:", v17, 0, 0);
        goto LABEL_46;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBArchivedObject *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUtterance:", v17);
        goto LABEL_46;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_57:
        objc_msgSend(a1, "setWaitingForResume:", v21 != 0);
        goto LABEL_66;
      case 5u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_61:
        objc_msgSend(a1, "setContinueRunning:", v27 != 0);
        goto LABEL_66;
      case 6u:
        v17 = objc_alloc_init(_INPBVoiceCommandStepInfo);
        if (PBReaderPlaceMark() && _INPBVoiceCommandStepInfoReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addStep:", v17, 0, 0);
LABEL_46:

LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_68:

        return 0;
      case 7u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_65:
        objc_msgSend(a1, "setRequestsIntentExecution:", v33 != 0);
        goto LABEL_66;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

uint64_t _INPBSendMessageAttachmentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBFileDataAttachment *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBFileDataAttachment);
        if (!PBReaderPlaceMark() || !_INPBFileDataAttachmentReadFrom(v17, a2))
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFile:", v17, 0, 0);
        goto LABEL_48;
      case 2u:
        v17 = objc_alloc_init(_INPBURLValue);
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v17, a2))
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFileURL:", v17, 0, 0);
        goto LABEL_48;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_54:
        objc_msgSend(a1, "setCurrentLocation:", v21 != 0);
        goto LABEL_49;
      case 4u:
        v17 = objc_alloc_init(_INPBURLValue);
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v17, a2))
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeechDataURL:", v17, 0, 0);
        goto LABEL_48;
      case 5u:
        v17 = objc_alloc_init(_INPBFileDataAttachment);
        if (!PBReaderPlaceMark() || !_INPBFileDataAttachmentReadFrom(v17, a2))
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudioMessageFile:", v17, 0, 0);
        goto LABEL_48;
      case 6u:
        v17 = objc_alloc_init(_INPBURLValue);
        if (!PBReaderPlaceMark() || !_INPBURLValueReadFrom(v17, a2))
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudioMessageFileURL:", v17, 0, 0);
        goto LABEL_48;
      case 7u:
        v17 = objc_alloc_init(_INPBURLValue);
        if (PBReaderPlaceMark() && _INPBURLValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSharedLink:", v17, 0, 0);
LABEL_48:

LABEL_49:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_56:

        return 0;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTypeIdentifier:", v17);
        goto LABEL_48;
      case 9u:
        PBReaderReadString();
        v17 = (_INPBFileDataAttachment *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhAssetId:", v17);
        goto LABEL_48;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

INPaymentAmount *INIntentSlotValueTransformFromPaymentAmountValue(void *a1)
{
  id v1;
  INPaymentAmount *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  INPaymentAmount *v9;

  if (a1)
  {
    v1 = a1;
    v2 = [INPaymentAmount alloc];
    v3 = objc_msgSend(v1, "hasAmountType");
    v4 = objc_msgSend(v1, "amountType") - 1;
    if (v4 <= 5)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (v3)
      v6 = v5;
    else
      v6 = 0;
    objc_msgSend(v1, "value");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromCurrencyAmountValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[INPaymentAmount initWithAmountType:amount:](v2, "initWithAmountType:amount:", v6, v8);

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

_INPBPaymentAmountValue *INIntentSlotValueTransformToPaymentAmountValue(void *a1)
{
  id v1;
  _INPBPaymentAmountValue *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPaymentAmountValue);
    objc_msgSend(v1, "amount");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCurrencyAmountValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentAmountValue setValue:](v2, "setValue:", v4);

    v5 = objc_msgSend(v1, "amountType");
    if ((unint64_t)(v5 - 1) < 6)
      v6 = v5;
    else
      v6 = 0x7FFFFFFFLL;
    -[_INPBPaymentAmountValue setAmountType:](v2, "setAmountType:", v6);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPaymentAmountValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPaymentAmountValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPaymentAmountValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPaymentAmountValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPaymentAmountValueFromPaymentAmountValue(void *a1)
{
  return a1;
}

INModifyNickname *INIntentSlotValueTransformFromModifyNickname(void *a1)
{
  id v1;
  INModifyNickname *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  INModifyNickname *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INModifyNickname alloc];
    objc_msgSend(v1, "targetNickname");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB37E8];
    v6 = objc_msgSend(v1, "isRemoval");

    objc_msgSend(v5, "numberWithBool:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INModifyNickname initWithTargetNickname:isRemoval:](v2, "initWithTargetNickname:isRemoval:", v4, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBModifyNickname *INIntentSlotValueTransformToModifyNickname(void *a1)
{
  id v1;
  _INPBModifyNickname *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBModifyNickname);
    objc_msgSend(v1, "targetNickname");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBModifyNickname setTargetNickname:](v2, "setTargetNickname:", v4);

    objc_msgSend(v1, "isRemoval");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBModifyNickname setIsRemoval:](v2, "setIsRemoval:", objc_msgSend(v5, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromModifyNicknames(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromModifyNickname(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToModifyNicknames(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToModifyNickname(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedModifyNicknameFromModifyNickname(void *a1)
{
  return a1;
}

INCallGroup *INIntentSlotValueTransformFromCallGroup(void *a1)
{
  id v1;
  INCallGroup *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INCallGroup *v7;

  if (a1)
  {
    v1 = a1;
    v2 = [INCallGroup alloc];
    objc_msgSend(v1, "groupName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "groupId");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INCallGroup initWithGroupName:groupId:](v2, "initWithGroupName:groupId:", v4, v6);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBCallGroup *INIntentSlotValueTransformToCallGroup(void *a1)
{
  id v1;
  _INPBCallGroup *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCallGroup);
    objc_msgSend(v1, "groupName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroup setGroupName:](v2, "setGroupName:", v4);

    objc_msgSend(v1, "groupId");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToString(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallGroup setGroupId:](v2, "setGroupId:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCallGroups(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCallGroup(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallGroups(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCallGroup(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallGroupFromCallGroup(void *a1)
{
  return a1;
}

uint64_t INCarAudioSourceHasBackingType(unint64_t a1)
{
  return (a1 < 0xA) & (0x3FEu >> a1);
}

uint64_t INCarAudioSourceGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 9)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INCarAudioSourceGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 8)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INCarAudioSourceGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("unknown");
  else
    return off_1E228A3D8[a1 - 1];
}

uint64_t INCarAudioSourceWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CarPlay")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPod")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("radio")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bluetooth")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AUX")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("USB")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("memoryCard")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("opticalDrive")) & 1) != 0)
  {
    v2 = 8;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("hardDrive")))
  {
    v2 = 9;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarAudioSourceGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("CarPlay");
      goto LABEL_12;
    case 2:
      v4 = CFSTR("iPod");
      goto LABEL_12;
    case 3:
      v4 = CFSTR("radio");
      goto LABEL_12;
    case 4:
      v4 = CFSTR("bluetooth");
      goto LABEL_12;
    case 5:
      v4 = CFSTR("AUX");
      goto LABEL_12;
    case 6:
      v4 = CFSTR("USB");
      goto LABEL_12;
    case 7:
      v4 = CFSTR("memory card");
      goto LABEL_12;
    case 8:
      v4 = CFSTR("optical drive");
      goto LABEL_12;
    case 9:
      v4 = CFSTR("hard drive");
LABEL_12:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

id __INExtensionGetDefaultIntentHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSString *v6;
  void *v7;
  void *v8;
  NSObject *v10;
  objc_class *v11;
  void *v12;
  int v13;
  const char *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  NSString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    objc_msgSend(a2, "_className");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingString:", CFSTR("Handling"));
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();

    NSProtocolFromString(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 && objc_msgSend(v3, "conformsToProtocol:", v7))
    {
      v4 = v3;
    }
    else
    {
      v8 = (void *)INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        v10 = v8;
        v11 = (objc_class *)objc_opt_class();
        NSStringFromClass(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 136315906;
        v14 = "__INExtensionGetDefaultIntentHandler";
        v15 = 2114;
        v16 = v12;
        v17 = 2082;
        v18 = "__INExtensionGetDefaultIntentHandler";
        v19 = 2114;
        v20 = v6;
        _os_log_error_impl(&dword_18BEBC000, v10, OS_LOG_TYPE_ERROR, "%s Class %{public}@ must either implement the method %{public}s or must itself conform to protocol %{public}@", (uint8_t *)&v13, 0x2Au);

      }
      v4 = 0;
    }

  }
  return v4;
}

id _INExtensionContextWithContext(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  NSObject *v16;
  id v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  void *v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v2 = v1;
    else
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  v3 = v2;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend(v3, "inputItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (v5)
  {
    v6 = v5;
    v18 = v3;
    v19 = v1;
    v7 = *(_QWORD *)v22;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i), "userInfo", v18, v19);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", CFSTR("_INExtensionItemExtensionContextData"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v11 = (void *)MEMORY[0x1E0CB3710];
            v12 = objc_opt_class();
            v20 = 0;
            objc_msgSend(v11, "unarchivedObjectOfClass:fromData:error:", v12, v10, &v20);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = v20;
            v15 = v14;
            if (v13)
            {

              goto LABEL_22;
            }
            if (v14)
            {
              v16 = INSiriLogContextIntents;
              if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v26 = "_INExtensionContextWithContext";
                v27 = 2112;
                v28 = v15;
                _os_log_error_impl(&dword_18BEBC000, v16, OS_LOG_TYPE_ERROR, "%s Error decoding extension context: %@", buf, 0x16u);
              }
            }

          }
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      if (v6)
        continue;
      break;
    }
    v13 = 0;
LABEL_22:
    v3 = v18;
    v1 = v19;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void __INExtensionInitialize(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  if (a1 != a2)
  {
    v4 = objc_msgSend(a1, "instanceMethodForSelector:", sel_beginRequestWithExtensionContext_);
    if (v4 != objc_msgSend(a2, "instanceMethodForSelector:", sel_beginRequestWithExtensionContext_))
    {
      v5 = (void *)MEMORY[0x1E0CB3940];
      NSStringFromClass((Class)a1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromSelector(sel_beginRequestWithExtensionContext_);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "stringWithFormat:", CFSTR("%@ is not allowed to override %@"), v6, v7);
      v9 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99858], v9, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "raise");

    }
  }
}

uint64_t _INExtensionValidateClass(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

BOOL _INPBCreateEventIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_39;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_35;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTitle:", v17);
        goto LABEL_35;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_39;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTimeRange:", v17, 0, 0);
        goto LABEL_35;
      case 4u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
          goto LABEL_39;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addParticipants:", v17, 0, 0);
        goto LABEL_35;
      case 5u:
        v17 = objc_alloc_init(_INPBLocation);
        if (PBReaderPlaceMark() && (_INPBLocationReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLocation:", v17, 0, 0);
LABEL_35:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_36;
    }
  }
}

uint64_t INAudioCallTTYTypeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INAudioCallTTYTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INAudioCallTTYTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 3) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INAudioCallTTYTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E228A420[a1 - 1];
}

uint64_t INAudioCallTTYTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("none")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("direct")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("relay")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAudioCallTTYTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("relay");
      break;
    case 2:
      v4 = CFSTR("direct");
      break;
    case 1:
      v4 = CFSTR("none");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBHomeEntityReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBString *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_108;
        PBReaderRecallMark();
        objc_msgSend(a1, "setName:", v18, 0, 0);
        goto LABEL_78;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_85:
        objc_msgSend(a1, "setEntityType:", v25, v53, v54);
        goto LABEL_79;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_90:
        objc_msgSend(a1, "setDeviceType:", v32, v53, v54);
        goto LABEL_79;
      case 4u:
        if (v16 == 2)
        {
          v53 = 0;
          v54 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            while (1)
            {
              v37 = *v3;
              v38 = *(_QWORD *)(a2 + v37);
              if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                break;
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_50;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          while (1)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
              break;
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_105;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_105:
          PBRepeatedInt32Add();
        }
        goto LABEL_79;
      case 5u:
        PBReaderReadString();
        v18 = (_INPBString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEntityIdentifier:", v18);
        goto LABEL_78;
      case 6u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_95:
        objc_msgSend(a1, "setSceneType:", v46, v53, v54);
        goto LABEL_79;
      case 7u:
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_108;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRoom:", v18, 0, 0);
        goto LABEL_78;
      case 8u:
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_108;
        PBReaderRecallMark();
        objc_msgSend(a1, "setZone:", v18, 0, 0);
        goto LABEL_78;
      case 9u:
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_108;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHome:", v18, 0, 0);
        goto LABEL_78;
      case 0xAu:
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_108;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v18, 0, 0);
        goto LABEL_78;
      case 0xBu:
        v18 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_108;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroup:", v18, 0, 0);
        goto LABEL_78;
      case 0xCu:
        v18 = objc_alloc_init(_INPBDataString);
        v53 = 0;
        v54 = 0;
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          if (v18)
            objc_msgSend(a1, "addZones:", v18, 0, 0);
LABEL_78:

LABEL_79:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_108:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_79;
    }
  }
}

BOOL INUpdateEventConfirmationReasonHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INUpdateEventConfirmationReasonGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INUpdateEventConfirmationReasonGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INUpdateEventConfirmationReasonGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("updateAllRecurrences");
  if (a1 == 1)
    return CFSTR("scheduleConflict");
  else
    return v1;
}

uint64_t INUpdateEventConfirmationReasonWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scheduleConflict")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("updateAllRecurrences")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INUpdateEventConfirmationReasonGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("update all recurrences");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("schedule conflict");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t INSaveHealthSampleIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return (uint64_t)*(&off_1E228A648 + a1);
}

uint64_t _INPBActivateCarSignalIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  _INPBDataString *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v18 == 3)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
                break;
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_40;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_52;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
          PBRepeatedInt32Add();
        }
        goto LABEL_53;
      }
      if ((_DWORD)v18 == 2)
      {
        v19 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v19, a2))
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCarName:", v19, 0, 0);
LABEL_27:

        goto LABEL_53;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_53:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v19, a2) & 1) == 0)
    {
LABEL_56:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v19, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INLodgingReservation *INIntentSlotValueTransformFromLodgingReservation(INLodgingReservation *a1)
{
  INLodgingReservation *v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  INLodgingReservation *v20;
  INLodgingReservation *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (a1)
  {
    v1 = a1;
    -[INLodgingReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = [INLodgingReservation alloc];
    objc_msgSend(v2, "itemReference");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v24);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "hasReservationStatus");
    v4 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v4 <= 3)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (!v3)
      v5 = 0;
    v18 = v5;
    objc_msgSend(v2, "reservationHolderName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v23);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v22);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[INLodgingReservation lodgingBusinessLocation](v1, "lodgingBusinessLocation");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocation(v19);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[INLodgingReservation reservationDuration](v1, "reservationDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[INLodgingReservation numberOfAdults](v1, "numberOfAdults");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromInteger(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[INLodgingReservation numberOfChildren](v1, "numberOfChildren");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromInteger(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[INLodgingReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:lodgingBusinessLocation:reservationDuration:numberOfAdults:numberOfChildren:](v20, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:lodgingBusinessLocation:reservationDuration:numberOfAdults:numberOfChildren:", v27, v26, v17, v18, v16, v15, v14, v13, v7, v9, v11);

    a1 = v21;
  }
  return a1;
}

_INPBLodgingReservation *INIntentSlotValueTransformToLodgingReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBLodgingReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBLodgingReservation);
    -[_INPBLodgingReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "lodgingBusinessLocation");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocation(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBLodgingReservation setLodgingBusinessLocation:](v15, "setLodgingBusinessLocation:", v17);

    objc_msgSend(v1, "reservationDuration");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBLodgingReservation setReservationDuration:](v15, "setReservationDuration:", v19);

    objc_msgSend(v1, "numberOfAdults");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToInteger(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBLodgingReservation setNumberOfAdults:](v15, "setNumberOfAdults:", v21);

    objc_msgSend(v1, "numberOfChildren");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToInteger(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBLodgingReservation setNumberOfChildren:](v15, "setNumberOfChildren:", v23);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromLodgingReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromLodgingReservation(*(INLodgingReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToLodgingReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToLodgingReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedLodgingReservationFromLodgingReservation(void *a1)
{
  return a1;
}

id INIntentSlotValueTransformFromString(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromStringValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromStringValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "valueMetadata");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  INPrivacyEntitlementValidateValueMetadata(v2);

  objc_msgSend(v1, "value");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

_INPBString *INIntentSlotValueTransformToString(void *a1)
{
  void *v1;
  _INPBString *v2;

  INIntentSlotValueTransformToStringValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBString);
    -[_INPBString addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBStringValue *INIntentSlotValueTransformToStringValue(void *a1)
{
  id v1;
  _INPBStringValue *v2;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBStringValue);
    -[_INPBStringValue setValue:](v2, "setValue:", v1);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromStringValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromStringValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToStringValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToStringValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromStringValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

_INPBString *INIntentSlotValueRedactedStringFromString(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBString);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromStringValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBString addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedStringsFromStrings(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedStringFromString(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

uint64_t _INPBIntentResponsePayloadSuccessReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResponseMessageData:", v24);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_36:
            objc_msgSend(a1, "setShouldOpenContainingApplication:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResponseTypeName:", v24);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBValueMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBConfidenceScore *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  double v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = (_INPBConfidenceScore *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCanonicalValue:", v18);
        goto LABEL_48;
      case 2u:
        PBReaderReadString();
        v18 = (_INPBConfidenceScore *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUuid:", v18);
        goto LABEL_48;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_56:
        objc_msgSend(a1, "setConfirmed:", v28 != 0, v39, v40);
        goto LABEL_49;
      case 4u:
        PBReaderReadString();
        v18 = (_INPBConfidenceScore *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setInput:", v18);
        goto LABEL_48;
      case 5u:
        PBReaderReadString();
        v18 = (_INPBConfidenceScore *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSource:", v18);
        goto LABEL_48;
      case 6u:
        PBReaderReadString();
        v18 = (_INPBConfidenceScore *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSourceAppBundleIdentifier:", v18);
        goto LABEL_48;
      case 7u:
        v18 = objc_alloc_init(_INPBConfidenceScore);
        if (PBReaderPlaceMark() && (_INPBConfidenceScoreReadFrom(v18, a2, v32) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setConfidenceScore:", v18, 0, 0);
LABEL_48:

LABEL_49:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        if ((v10 >> 3) == 9999)
        {
          if (v16 == 2)
          {
            v39 = 0;
            v40 = 0;
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
            {
              v20 = 0;
              v21 = 0;
              v22 = 0;
              while (1)
              {
                v23 = *v3;
                v24 = *(_QWORD *)(a2 + v23);
                if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                  break;
                v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
                *(_QWORD *)(a2 + v23) = v24 + 1;
                v22 |= (unint64_t)(v25 & 0x7F) << v20;
                if (v25 < 0)
                {
                  v20 += 7;
                  v14 = v21++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_33;
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            while (1)
            {
              v36 = *v3;
              v37 = *(_QWORD *)(a2 + v36);
              if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                break;
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_66;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_66:
            PBRepeatedInt32Add();
          }
        }
        else if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
          return 0;
        }
        goto LABEL_49;
    }
  }
}

BOOL _INPBGeographicalFeatureReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addGeographicalFeatureDescriptors:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setGeographicalFeatureType:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBGetVisualCodeIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBImageValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVisualCodeImage:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INPaymentStatusHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INPaymentStatusGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INPaymentStatusGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INPaymentStatusGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return *(&off_1E228A690 + a1 - 1);
}

uint64_t INPaymentStatusWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pending")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("completed")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("canceled")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("failed")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("unpaid")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPaymentStatusGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("pending");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("completed");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("canceled");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("failed");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("unpaid");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBAppIdReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBundleId:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBGetCarLockStatusIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id getCNPostalAddressFormatterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNPostalAddressFormatterClass_softClass;
  v7 = getCNPostalAddressFormatterClass_softClass;
  if (!getCNPostalAddressFormatterClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCNPostalAddressFormatterClass_block_invoke;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getCNPostalAddressFormatterClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18BF56CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNPostalAddressFormatterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!ContactsLibraryCore_frameworkLibrary)
  {
    ContactsLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!ContactsLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CNPostalAddressFormatter");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCNPostalAddressFormatterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL INWorkoutLocationTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INWorkoutLocationTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 0;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 1;
  else
    return v1;
}

uint64_t INWorkoutLocationTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 1);
  if (!a2)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INWorkoutLocationTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("indoor");
  if (a1 == 1)
    return CFSTR("outdoor");
  else
    return v1;
}

uint64_t INWorkoutLocationTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("outdoor")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("indoor")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutLocationTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("indoor");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("outdoor");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBGetVisualCodeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setVisualCodeType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBMessageReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBContact *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBContact);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v18, a2))
          goto LABEL_124;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addRecipient:", v18, 0, 0);
        goto LABEL_99;
      case 2u:
        v18 = objc_alloc_init(_INPBContact);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSender:", v18);
        goto LABEL_99;
      case 3u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setContent:", v18);
        goto LABEL_99;
      case 4u:
        if (v16 == 2)
        {
          v46 = 0;
          v47 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_39;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          while (1)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
              break;
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_121;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_121:
          PBRepeatedInt32Add();
        }
        goto LABEL_100;
      case 5u:
        v18 = objc_alloc_init(_INPBDateTime);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateSent:", v18);
        goto LABEL_99;
      case 6u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v18);
        goto LABEL_99;
      case 7u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setGroupName:", v18);
        goto LABEL_99;
      case 8u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConversationIdentifier:", v18);
        goto LABEL_99;
      case 9u:
        v18 = objc_alloc_init(_INPBDataString);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v18, a2))
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeakableGroupName:", v18);
        goto LABEL_99;
      case 0xAu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_106:
        objc_msgSend(a1, "setType:", v32, v46, v47);
        goto LABEL_100;
      case 0xBu:
        v18 = objc_alloc_init(_INPBMessage);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || (_INPBMessageReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReferencedMessage:", v18);
        goto LABEL_99;
      case 0xCu:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_111:
        objc_msgSend(a1, "setEffect:", v39, v46, v47);
        goto LABEL_100;
      case 0xDu:
        v18 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumberOfAttachments:", v18, 0, 0);
        goto LABEL_99;
      case 0xEu:
        v18 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateLastMessageRead:", v18, 0, 0);
        goto LABEL_99;
      case 0xFu:
        v18 = objc_alloc_init(_INPBMessageLinkMetadata);
        if (!PBReaderPlaceMark() || (_INPBMessageLinkMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkMetadata:", v18, 0, 0);
        goto LABEL_99;
      case 0x10u:
        v18 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v18, a2))
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentAmount:", v18, 0, 0);
        goto LABEL_99;
      case 0x11u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLocationName:", v18);
        goto LABEL_99;
      case 0x12u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFileExtension:", v18);
        goto LABEL_99;
      case 0x16u:
        PBReaderReadString();
        v18 = (_INPBContact *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setServiceName:", v18);
        goto LABEL_99;
      case 0x17u:
        v18 = objc_alloc_init(_INPBFile);
        if (!PBReaderPlaceMark() || (_INPBFileReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudioMessageFile:", v18, 0, 0);
        goto LABEL_99;
      case 0x18u:
        v18 = objc_alloc_init(_INPBFile);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || !_INPBFileReadFrom(v18, a2))
          goto LABEL_124;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addAttachmentFile:", v18, 0, 0);
        goto LABEL_99;
      case 0x19u:
        v18 = objc_alloc_init(_INPBMessageReaction);
        if (!PBReaderPlaceMark() || (_INPBMessageReactionReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReaction:", v18, 0, 0);
        goto LABEL_99;
      case 0x1Au:
        v18 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0)
          goto LABEL_124;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v18, 0, 0);
        goto LABEL_99;
      case 0x1Bu:
        v18 = objc_alloc_init(_INPBSticker);
        if (PBReaderPlaceMark() && (_INPBStickerReadFrom(v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSticker:", v18, 0, 0);
LABEL_99:

LABEL_100:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_124:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_100;
    }
  }
}

INHomeEntity *INIntentSlotValueTransformFromHomeEntity(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  INHomeEntity *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  INHomeEntity *v20;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1, "deviceTypesCount"))
    {
      v3 = 0;
      do
      {
        v4 = (void *)MEMORY[0x1E0CB37E8];
        v5 = objc_msgSend(v1, "deviceTypesAtIndex:", v3);
        if (v5 > 0x31)
          v6 = 0;
        else
          v6 = qword_18C311868[v5];
        objc_msgSend(v4, "numberWithInteger:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v7);

        ++v3;
      }
      while (v3 < objc_msgSend(v1, "deviceTypesCount"));
    }
    v8 = [INHomeEntity alloc];
    objc_msgSend(v1, "entityName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v28);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v1, "hasEntityType");
    v10 = objc_msgSend(v1, "entityType");
    v11 = 0;
    if (v10 <= 6 && v9)
      v11 = qword_18C3115A8[v10];
    objc_msgSend(v1, "entityIdentifier");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v1, "hasSceneType");
    v13 = objc_msgSend(v1, "sceneType");
    if (((v13 < 5) & v12) != 0)
      v14 = v13 + 1;
    else
      v14 = 0;
    v23 = v14;
    objc_msgSend(v1, "room");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v26);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "home");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v24);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "group");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "zones");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataStrings(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[INHomeEntity initWithEntityName:type:entityIdentifier:deviceTypes:sceneType:room:home:group:zones:](v8, "initWithEntityName:type:entityIdentifier:deviceTypes:sceneType:room:home:group:zones:", v27, v11, v25, v2, v23, v22, v15, v17, v19);

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

_INPBHomeEntity *INIntentSlotValueTransformToHomeEntity(void *a1)
{
  id v1;
  _INPBHomeEntity *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBHomeEntity);
    objc_msgSend(v1, "entityName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntity setEntityName:](v2, "setEntityName:", v4);

    v5 = objc_msgSend(v1, "type") - 1;
    if (v5 > 9)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = dword_18C311580[v5];
    -[_INPBHomeEntity setEntityType:](v2, "setEntityType:", v6);
    objc_msgSend(v1, "entityIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntity setEntityIdentifier:](v2, "setEntityIdentifier:", v7);

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    objc_msgSend(v1, "deviceTypes", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v27 != v11)
            objc_enumerationMutation(v8);
          v13 = objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "integerValue") - 1;
          if (v13 > 0x2C)
            v14 = 0x7FFFFFFFLL;
          else
            v14 = dword_18C3117B0[v13];
          -[_INPBHomeEntity addDeviceTypes:](v2, "addDeviceTypes:", v14);
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v10);
    }

    v15 = objc_msgSend(v1, "sceneType") - 1;
    if (v15 >= 5)
      v16 = 0x7FFFFFFFLL;
    else
      v16 = v15;
    -[_INPBHomeEntity setSceneType:](v2, "setSceneType:", v16);
    objc_msgSend(v1, "room");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntity setRoom:](v2, "setRoom:", v18);

    objc_msgSend(v1, "home");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntity setHome:](v2, "setHome:", v20);

    objc_msgSend(v1, "group");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntity setGroup:](v2, "setGroup:", v22);

    objc_msgSend(v1, "zones");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataStrings(v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBHomeEntity setZones:](v2, "setZones:", v24);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeEntities(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeEntity(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeEntities(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeEntity(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedHomeEntityFromHomeEntity(void *a1)
{
  return a1;
}

uint64_t INPlayAudioMessageIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return (uint64_t)*(&off_1E228A8A8 + a1);
}

BOOL _INPBRideFareLineItemReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBDecimalNumberValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBDecimalNumberValue);
        if (!PBReaderPlaceMark() || (_INPBDecimalNumberValueReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrice:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v18 = (_INPBDecimalNumberValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCurrencyCode:", v18);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBDecimalNumberValue *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setTitle:", v18);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id getAVSystemControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVSystemControllerClass_softClass;
  v7 = getAVSystemControllerClass_softClass;
  if (!getAVSystemControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAVSystemControllerClass_block_invoke;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getAVSystemControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18BF5EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getAVSystemController_AllowAppToInitiatePlaybackTemporarilyAttributeSymbolLoc_ptr;
  v7 = getAVSystemController_AllowAppToInitiatePlaybackTemporarilyAttributeSymbolLoc_ptr;
  if (!getAVSystemController_AllowAppToInitiatePlaybackTemporarilyAttributeSymbolLoc_ptr)
  {
    v1 = (void *)CelestialLibrary();
    v0 = (id *)dlsym(v1, "AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute");
    v5[3] = (uint64_t)v0;
    getAVSystemController_AllowAppToInitiatePlaybackTemporarilyAttributeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

uint64_t CelestialLibrary()
{
  uint64_t v0;
  void *v2;

  if (CelestialLibraryCore_frameworkLibrary)
    return CelestialLibraryCore_frameworkLibrary;
  CelestialLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = CelestialLibraryCore_frameworkLibrary;
  if (!CelestialLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

Class __getAVSystemControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  INShareFocusStatusIntent *v3;
  SEL v4;
  id v5;
  unint64_t v6;
  id *v7;

  CelestialLibrary();
  result = objc_getClass("AVSystemController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVSystemControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (INShareFocusStatusIntent *)abort_report_np();
    return (Class)-[INShareFocusStatusIntent _intents_backgroundHandlingAssertionForBundleIdentifier:context:error:](v3, v4, v5, v6, v7);
  }
  return result;
}

uint64_t INConfigureHomeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return (uint64_t)*(&off_1E228A900 + a1);
}

uint64_t _INPBStartPhotoPlaybackIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBLocation *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 2)
      {
        v25 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocationCreated:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 4)
        {
          if ((_DWORD)v17 == 7)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_39:
            objc_msgSend(a1, "setSearchResultsCount:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBLocation *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAlbumName:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromTemperature(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromTemperatureValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromTemperatureValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    if (!objc_msgSend(v2, "hasUnit"))
      goto LABEL_11;
    v4 = objc_msgSend(v2, "unit");
    switch(v4)
    {
      case 3:
        objc_msgSend(MEMORY[0x1E0CB3B00], "kelvin");
        v5 = objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        objc_msgSend(MEMORY[0x1E0CB3B00], "fahrenheit");
        v5 = objc_claimAutoreleasedReturnValue();
        break;
      case 1:
        objc_msgSend(MEMORY[0x1E0CB3B00], "celsius");
        v5 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_11;
    }
    v7 = (void *)v5;
    if (v5)
    {
LABEL_21:
      v13 = objc_alloc(MEMORY[0x1E0CB3758]);
      objc_msgSend(v2, "magnitude");
      v6 = (void *)objc_msgSend(v13, "initWithDoubleValue:unit:", v7);

      goto LABEL_22;
    }
LABEL_11:
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0C99828]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0C99830]))
    {
      objc_msgSend(MEMORY[0x1E0CB3B00], "celsius");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0C99838]))
        goto LABEL_16;
      objc_msgSend(MEMORY[0x1E0CB3B00], "fahrenheit");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    v7 = (void *)v10;
    if (v10)
    {
LABEL_20:

      goto LABEL_21;
    }
LABEL_16:
    objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0C99840]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "BOOLValue");

    if (v12)
      objc_msgSend(MEMORY[0x1E0CB3B00], "celsius");
    else
      objc_msgSend(MEMORY[0x1E0CB3B00], "fahrenheit");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_20;
  }
  v6 = 0;
LABEL_22:

  return v6;
}

_INPBTemperature *INIntentSlotValueTransformToTemperature(void *a1)
{
  void *v1;
  _INPBTemperature *v2;

  INIntentSlotValueTransformToTemperatureValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBTemperature);
    -[_INPBTemperature addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBTemperatureValue *INIntentSlotValueTransformToTemperatureValue(void *a1)
{
  id v1;
  _INPBTemperatureValue *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  int v7;
  _INPBTemperatureValue *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBTemperatureValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    if (v3)
    {
      v5 = v4;
      objc_msgSend(MEMORY[0x1E0CB3B00], "kelvin");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v3, "isEqual:", v6);

      if (v7)
      {
        v8 = v2;
        v9 = 3;
LABEL_10:
        -[_INPBTemperatureValue setUnit:](v8, "setUnit:", v9);
        -[_INPBTemperatureValue setMagnitude:](v2, "setMagnitude:", v5);
LABEL_17:

        goto LABEL_18;
      }
      objc_msgSend(v3, "symbol");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("°C"));

      if (v11)
      {
        v8 = v2;
        v9 = 1;
        goto LABEL_10;
      }
      objc_msgSend(v3, "symbol");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("°F"));

      if (v13)
      {
        v8 = v2;
        v9 = 2;
        goto LABEL_10;
      }
    }
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0C99828]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0C99830])
      || !objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0C99838])
      && (objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0C99840]),
          v17 = (void *)objc_claimAutoreleasedReturnValue(),
          v18 = objc_msgSend(v17, "BOOLValue"),
          v17,
          v18))
    {
      -[_INPBTemperatureValue setUnit:](v2, "setUnit:", 1);
      objc_msgSend(MEMORY[0x1E0CB3B00], "celsius");
      v16 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[_INPBTemperatureValue setUnit:](v2, "setUnit:", 2);
      objc_msgSend(MEMORY[0x1E0CB3B00], "fahrenheit");
      v16 = objc_claimAutoreleasedReturnValue();
    }
    v19 = (void *)v16;
    objc_msgSend(v1, "measurementByConvertingToUnit:", v16);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "doubleValue");
    -[_INPBTemperatureValue setMagnitude:](v2, "setMagnitude:");

    goto LABEL_17;
  }
  v2 = 0;
LABEL_18:

  return v2;
}

id INIntentSlotValueTransformFromTemperatureValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromTemperatureValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromTemperatures(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromTemperature(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToTemperatureValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToTemperatureValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToTemperatures(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToTemperature(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromTemperatureValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

_INPBTemperature *INIntentSlotValueRedactedTemperatureFromTemperature(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBTemperature *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBTemperature);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromTemperatureValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBTemperature addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedTemperaturesFromTemperatures(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedTemperatureFromTemperature(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

void sub_18BF60DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHAssetClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!PhotosLibraryCore_frameworkLibrary)
  {
    PhotosLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!PhotosLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PHAsset");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getPHAssetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18BF62234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11003(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11004(uint64_t a1)
{

}

id INSyncedSchemaWithBundleID(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  objc_msgSend(_INVCIntentDefinitionManagerClass(), "intentDefinitionURLsForBundleID:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
    v3 = -[INSchema _initWithContentsOfURLs:bundleIdentifier:mainBundleIdentifier:]([INSchema alloc], "_initWithContentsOfURLs:bundleIdentifier:mainBundleIdentifier:", v2, v1, v1);
  else
    v3 = 0;

  return v3;
}

uint64_t INCustomIntentTypeName(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@.%@"), CFSTR("sirikit.intents.custom."), a1, a2);
}

uint64_t INParseCustomIntentTypeName(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v5 = a1;
  v6 = objc_msgSend(v5, "hasPrefix:", CFSTR("sirikit.intents.custom."));
  if ((_DWORD)v6)
  {
    objc_msgSend(v5, "substringFromIndex:", objc_msgSend(CFSTR("sirikit.intents.custom."), "length"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_alloc(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v7, "componentsSeparatedByString:", CFSTR("."));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(v8, "initWithArray:", v9);

    objc_msgSend(v10, "lastObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeLastObject");
    objc_msgSend(v10, "componentsJoinedByString:", CFSTR("."));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
      *a2 = objc_retainAutorelease(v11);
    if (a3)
      *a3 = objc_retainAutorelease(v12);

  }
  return v6;
}

id INSchemaWithTypeName(void *a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  NSString *v6;
  id v7;
  void *v8;
  Class v9;
  objc_class *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  char CanMapLSDatabase;
  uint64_t v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  int HasEntitlement;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  NSObject *v42;
  NSObject *v44;
  NSObject *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  id v54;
  __int16 v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v50 = 0;
  v5 = INParseCustomIntentTypeName(a1, &v50, &v49);
  v6 = (NSString *)v50;
  v7 = v49;
  v8 = 0;
  if (v5)
  {
    if (a2)
      *a2 = objc_retainAutorelease(v6);
    if (a3)
      *a3 = objc_retainAutorelease(v7);
    v9 = NSClassFromString(v6);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSchemaGetIntentDescriptionWithFacadeClass(v10);
      v12 = objc_claimAutoreleasedReturnValue();
      if (v12
        && (v13 = (void *)v12,
            v14 = objc_msgSend(v7, "isEqualToString:", CFSTR("com.apple.Intents")),
            v13,
            (v14 & 1) == 0))
      {

      }
      else if (v11)
      {
        +[INSchema _defaultSchemaForBundle:](INSchema, "_defaultSchemaForBundle:", v11);
        v15 = objc_claimAutoreleasedReturnValue();
        if (!v15)
        {
          v41 = (void *)INSiriLogContextIntents;
          if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
            v45 = v41;
            objc_msgSend(v11, "bundleURL");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136315394;
            v52 = "INSchemaWithTypeName";
            v53 = 2112;
            v54 = v46;
            _os_log_error_impl(&dword_18BEBC000, v45, OS_LOG_TYPE_ERROR, "%s Did not find schema inside of bundle URL: \"%@\"", buf, 0x16u);

          }
          v16 = 0;
          goto LABEL_45;
        }
        v16 = (id)v15;
LABEL_44:
        v16 = v16;
LABEL_45:

        v8 = v16;
        goto LABEL_46;
      }
    }
    objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordForCurrentProcess");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "bundleIdentifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v18, "isEqualToString:", v7) & 1) != 0)
    {

    }
    else
    {
      CanMapLSDatabase = INThisProcessCanMapLSDatabase(0);

      if ((CanMapLSDatabase & 1) != 0)
      {
        v48 = 0;
        objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v7, 0, &v48);
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v48;

        if (v21)
        {
          v22 = INSiriLogContextIntents;
          if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v52 = "INSchemaWithTypeName";
            v53 = 2112;
            v54 = v7;
            v55 = 2112;
            v56 = v21;
            _os_log_error_impl(&dword_18BEBC000, v22, OS_LOG_TYPE_ERROR, "%s Unable to create bundle record for bundle identifier: \"%@\", %@", buf, 0x20u);
          }
        }
        v17 = (void *)v20;
LABEL_21:
        objc_msgSend(v17, "URL");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v23)
        {
          v26 = INSiriLogContextIntents;
          if (!os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
LABEL_33:
            v16 = 0;
            v8 = 0;
            goto LABEL_34;
          }
          *(_DWORD *)buf = 136315394;
          v52 = "INSchemaWithTypeName";
          v53 = 2112;
          v54 = v7;
          v27 = "%s Unable to find bundle URL for bundle identifier: \"%@\"";
LABEL_51:
          _os_log_error_impl(&dword_18BEBC000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x16u);
          goto LABEL_33;
        }
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v24 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "path");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v24, "isReadableFileAtPath:", v25) & 1) == 0)
        {
          HasEntitlement = INThisProcessHasEntitlement(CFSTR("com.apple.intents.extension.discovery"), 0);

          if (!HasEntitlement)
            goto LABEL_29;
          +[INImageServiceConnection sharedConnection](INImageServiceConnection, "sharedConnection");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v7);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = 0;
          objc_msgSend(v29, "loadSchemasForBundleIdentifiers:error:", v30, &v47);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = v47;

          if (objc_msgSend(v25, "count"))
          {
            objc_msgSend(v25, "allValues");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "firstObject");
            v8 = (void *)objc_claimAutoreleasedReturnValue();

            v16 = 0;
LABEL_34:
            v40 = 1;
LABEL_42:

            if (v40)
            {
LABEL_46:

              goto LABEL_47;
            }
            v11 = 0;
            goto LABEL_44;
          }
          v44 = INSiriLogContextIntents;
          if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v52 = "INSchemaWithTypeName";
            v53 = 2114;
            v54 = v24;
            _os_log_error_impl(&dword_18BEBC000, v44, OS_LOG_TYPE_ERROR, "%s Unable to load schema using intents helper: %{public}@", buf, 0x16u);
          }
        }

LABEL_29:
        objc_msgSend(v17, "intentDefinitionURLs");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v32, "count");

        if (v33)
        {
          v34 = (void *)MEMORY[0x1E0C99E40];
          objc_msgSend(v17, "intentDefinitionURLs");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "allValues");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "orderedSetWithArray:", v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v37, "array");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          INApplicationBundleIdentifierFromBundleIdentifier(v7);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          +[INSchema _schemaWithIntentDefinitionURLs:bundleIdentifier:mainBundleIdentifier:contentOptions:](INSchema, "_schemaWithIntentDefinitionURLs:bundleIdentifier:mainBundleIdentifier:contentOptions:", v38, v7, v39, 31);
          v16 = (id)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            v40 = 0;
          }
          else
          {
            v42 = INSiriLogContextIntents;
            if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v52 = "INSchemaWithTypeName";
              v53 = 2112;
              v54 = v23;
              _os_log_error_impl(&dword_18BEBC000, v42, OS_LOG_TYPE_ERROR, "%s Did not find schema inside of bundle URL: \"%@\"", buf, 0x16u);
            }
            v40 = 1;
          }

          v8 = 0;
          goto LABEL_42;
        }
        v26 = INSiriLogContextIntents;
        if (!os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)buf = 136315394;
        v52 = "INSchemaWithTypeName";
        v53 = 2112;
        v54 = v7;
        v27 = "%s Intent Definition URLs count == 0 for \"%@\"";
        goto LABEL_51;
      }
    }
    v21 = 0;
    goto LABEL_21;
  }
LABEL_47:

  return v8;
}

id INSchemaWithApplicationProxy(void *a1, int a2)
{
  id v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  INSchema *v14;
  void *v15;
  void *v16;
  id v17;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend(v2, "siriActionDefinitionURLs");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allValues");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        INSchemaFileExtensions();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "pathExtension");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "containsObject:", v12);

        if (v13)
          objc_msgSend(v3, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v3, "count"))
  {
    v14 = [INSchema alloc];
    objc_msgSend(v2, "bundleIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bundleIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INSchema _initWithContentsOfURLs:bundleIdentifier:mainBundleIdentifier:](v14, "_initWithContentsOfURLs:bundleIdentifier:mainBundleIdentifier:", v3, v15, v16);

    if (v17)
      goto LABEL_16;
  }
  else
  {
    v17 = 0;
  }
  if (a2)
  {
    +[INSchema systemSchema](INSchema, "systemSchema");
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_16:

  return v17;
}

id INSchemaURLsWithBundleURL(void *a1)
{
  id v1;
  __CFBundle *Unique;
  __CFBundle *v3;
  void *v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  Unique = (__CFBundle *)_CFBundleCreateUnique();
  if (Unique)
  {
    v3 = Unique;
    INSchemaURLsWithCFBundle(Unique);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(v3);
  }
  else
  {
    v5 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315394;
      v8 = "INSchemaURLsWithBundleURL";
      v9 = 2114;
      v10 = v1;
      _os_log_error_impl(&dword_18BEBC000, v5, OS_LOG_TYPE_ERROR, "%s Unable to create bundle with URL %{public}@", (uint8_t *)&v7, 0x16u);
    }
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v4;
}

id INSchemaURLsWithCFBundle(__CFBundle *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFArrayRef v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    INSchemaFileExtensions();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = CFBundleCopyResourceURLsOfType(a1, *(CFStringRef *)(*((_QWORD *)&v10 + 1) + 8 * v7), 0);
          objc_msgSend(v2, "addObjectsFromArray:", v8, (_QWORD)v10);

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

__CFString *INTransferMoneyIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228AA78[a1];
}

uint64_t _INPBQueryHealthSampleIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_74;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_49;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_61:
        objc_msgSend(a1, "setObjectType:", v25, v40, v41);
        goto LABEL_72;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        v40 = 0;
        v41 = 0;
        if (!PBReaderPlaceMark() || !_INPBDateTimeRangeReadFrom(v17, a2))
          goto LABEL_74;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addRecordDate:", v17, 0, 0);
        goto LABEL_49;
      case 4u:
        v17 = objc_alloc_init(_INPBWellnessUnitType);
        if (!PBReaderPlaceMark() || (_INPBWellnessUnitTypeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_74;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnit:", v17, 0, 0);
        goto LABEL_49;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_66:
        objc_msgSend(a1, "setQuestionType:", v32, v40, v41);
        goto LABEL_72;
      case 6u:
        v17 = objc_alloc_init(_INPBWellnessValue);
        v40 = 0;
        v41 = 0;
        if (PBReaderPlaceMark() && _INPBWellnessValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addThresholdValues:", v17, 0, 0);
LABEL_49:

LABEL_72:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_74:

        return 0;
      case 7u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_71:
        objc_msgSend(a1, "setExpectedResultType:", v39, v40, v41);
        goto LABEL_72;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_72;
    }
  }
}

BOOL INCallCapabilityHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INCallCapabilityGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INCallCapabilityGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INCallCapabilityGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("videoCall");
  if (a1 == 1)
    return CFSTR("audioCall");
  else
    return v1;
}

uint64_t INCallCapabilityWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("audioCall")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("videoCall")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallCapabilityGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("video call");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("audio call");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBGetCarPowerLevelStatusIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBDouble *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFuelPercentRemaining:", v17, 0, 0);
        goto LABEL_81;
      case 2u:
        v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setChargePercentRemaining:", v17, 0, 0);
        goto LABEL_81;
      case 3u:
        v17 = objc_alloc_init(_INPBDistance);
        if (!PBReaderPlaceMark() || (_INPBDistanceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDistanceRemaining:", v17, 0, 0);
        goto LABEL_81;
      case 4u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_87:
        objc_msgSend(a1, "setCharging:", v20 != 0);
        goto LABEL_82;
      case 5u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMinutesToFull:", v17, 0, 0);
        goto LABEL_81;
      case 6u:
        v17 = objc_alloc_init(_INPBDistance);
        if (!PBReaderPlaceMark() || (_INPBDistanceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMaximumDistance:", v17, 0, 0);
        goto LABEL_81;
      case 7u:
        v17 = objc_alloc_init(_INPBDistance);
        if (!PBReaderPlaceMark() || (_INPBDistanceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDistanceRemainingElectric:", v17, 0, 0);
        goto LABEL_81;
      case 8u:
        v17 = objc_alloc_init(_INPBDistance);
        if (!PBReaderPlaceMark() || (_INPBDistanceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMaximumDistanceElectric:", v17, 0, 0);
        goto LABEL_81;
      case 9u:
        v17 = objc_alloc_init(_INPBDistance);
        if (!PBReaderPlaceMark() || (_INPBDistanceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDistanceRemainingFuel:", v17, 0, 0);
        goto LABEL_81;
      case 0xAu:
        v17 = objc_alloc_init(_INPBDistance);
        if (!PBReaderPlaceMark() || (_INPBDistanceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMaximumDistanceFuel:", v17, 0, 0);
        goto LABEL_81;
      case 0xFu:
        v17 = objc_alloc_init(_INPBJSONDictionary);
        if (!PBReaderPlaceMark() || (_INPBJSONDictionaryReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setConsumptionFormulaArguments:", v17, 0, 0);
        goto LABEL_81;
      case 0x10u:
        v17 = objc_alloc_init(_INPBJSONDictionary);
        if (!PBReaderPlaceMark() || (_INPBJSONDictionaryReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setChargingFormulaArguments:", v17, 0, 0);
        goto LABEL_81;
      case 0x11u:
        PBReaderReadString();
        v17 = (_INPBDouble *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCarIdentifier:", v17);
        goto LABEL_81;
      case 0x12u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateOfLastStateUpdate:", v17, 0, 0);
        goto LABEL_81;
      case 0x13u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_92:
        objc_msgSend(a1, "setActiveConnector:", v31);
        goto LABEL_82;
      case 0x14u:
        v17 = objc_alloc_init(_INPBEnergy);
        if (!PBReaderPlaceMark() || (_INPBEnergyReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMaximumBatteryCapacity:", v17, 0, 0);
        goto LABEL_81;
      case 0x15u:
        v17 = objc_alloc_init(_INPBEnergy);
        if (!PBReaderPlaceMark() || (_INPBEnergyReadFrom(v17, a2) & 1) == 0)
          goto LABEL_94;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrentBatteryCapacity:", v17, 0, 0);
        goto LABEL_81;
      case 0x16u:
        v17 = objc_alloc_init(_INPBEnergy);
        if (PBReaderPlaceMark() && (_INPBEnergyReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMinimumBatteryCapacity:", v17, 0, 0);
LABEL_81:

LABEL_82:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_94:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_82;
    }
  }
}

id INIntentSlotValueTransformFromDecimalNumberValue(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0CB3598];
    v2 = a1;
    v3 = [v1 alloc];
    v4 = objc_msgSend(v2, "mantissa");
    v5 = objc_msgSend(v2, "exponent");
    v6 = objc_msgSend(v2, "isNegative");

    a1 = (void *)objc_msgSend(v3, "initWithMantissa:exponent:isNegative:", v4, v5, v6);
  }
  return a1;
}

_INPBDecimalNumberValue *INIntentSlotValueTransformToDecimalNumberValue(void *a1)
{
  id v1;
  _INPBDecimalNumberValue *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBDecimalNumberValue);
    v4 = 0;
    v5 = 0;
    v6 = 0;
    objc_msgSend(v1, "decimalValue");
    -[_INPBDecimalNumberValue setMantissa:](v2, "setMantissa:", 0);
    -[_INPBDecimalNumberValue setExponent:](v2, "setExponent:", 0);
    -[_INPBDecimalNumberValue setIsNegative:](v2, "setIsNegative:", 0);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromDecimalNumberValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

void sub_18BF6A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18BF6A4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12107(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12108(uint64_t a1)
{

}

void sub_18BF6B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id INCodableDescriptionClassFromType(uint64_t a1)
{
  void *v2;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 - 1) >= 5)
  {
    v2 = (void *)INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_FAULT))
    {
      v4 = (void *)MEMORY[0x1E0CB37E8];
      v5 = v2;
      objc_msgSend(v4, "numberWithInteger:", a1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 136315394;
      v8 = "INCodableDescriptionClassFromType";
      v9 = 2112;
      v10 = v6;
      _os_log_fault_impl(&dword_18BEBC000, v5, OS_LOG_TYPE_FAULT, "%s Unknown type for codable description of type: %@", (uint8_t *)&v7, 0x16u);

    }
  }
  objc_opt_class();
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL _INPBTaskListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_38;
      case 2u:
        v17 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || !_INPBTaskReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTasks:", v17, 0, 0);
        goto LABEL_38;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupName:", v17, 0, 0);
        goto LABEL_38;
      case 5u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedDateTime:", v17, 0, 0);
        goto LABEL_38;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (PBReaderPlaceMark() && (_INPBDateTimeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setModifiedDateTime:", v17, 0, 0);
LABEL_38:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v17);
        goto LABEL_38;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

__CFString *INEndWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228AED8[a1];
}

uint64_t _INPBContactReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || !_INPBContactValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSearchForMessagesIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBMessage *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBMessage);
        if (!PBReaderPlaceMark() || !_INPBMessageReadFrom(v17, a2))
          goto LABEL_33;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMessages:", v17, 0, 0);
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBMessage);
    if (!PBReaderPlaceMark() || !_INPBMessageReadFrom(v17, a2))
    {
LABEL_33:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addSearchResults:", v17, 0, 0);
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBCreateNoteIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(_INPBNoteContent);
        if (!PBReaderPlaceMark() || (_INPBNoteContentReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContent:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setGroupName:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

__CFString *INControlHomeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0x12)
    return 0;
  else
    return off_1E228AF18[a1];
}

BOOL INRecurrenceFrequencyHasBackingType(unint64_t a1)
{
  return a1 < 7;
}

uint64_t INRecurrenceFrequencyGetBackingType(unint64_t a1)
{
  if (a1 > 6)
    return 0x7FFFFFFFLL;
  else
    return dword_18C3112E8[a1];
}

uint64_t INRecurrenceFrequencyGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = 4;
  v3 = 5;
  v4 = 6;
  if (a2 != 110)
    v4 = 0;
  if (a2 != 80)
    v3 = v4;
  if (a2 != 60)
    v2 = v3;
  v5 = 1;
  v6 = 2;
  v7 = 3;
  if (a2 != 50)
    v7 = 0;
  if (a2 != 40)
    v6 = v7;
  if (a2 != 30)
    v5 = v6;
  if (a2 <= 59)
    v2 = v5;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INRecurrenceFrequencyGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E228AFB0[a1 - 1];
}

uint64_t INRecurrenceFrequencyWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("minute")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hourly")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("daily")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("weekly")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("monthly")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("yearly")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRecurrenceFrequencyGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("minute");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("hourly");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("daily");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("weekly");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("monthly");
      goto LABEL_9;
    case 6:
      v4 = CFSTR("yearly");
LABEL_9:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBGetRideStatusIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBRideStatus *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBRideStatus);
        if (!PBReaderPlaceMark() || (_INPBRideStatusReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRideStatus:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentSlotVocabularyConceptReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentSlotVocabularyValue *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (_INPBIntentSlotVocabularyValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v24);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_39:
            objc_msgSend(a1, "setRequiresUserIdentification:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBIntentSlotVocabularyValue);
        if (!PBReaderPlaceMark() || !_INPBIntentSlotVocabularyValueReadFrom(v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addSynonyms:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSearchCallHistoryIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCallRecordValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        PBReaderReadString();
        v17 = (_INPBCallRecordValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTargetContact:", v17);
        goto LABEL_28;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBCallRecordValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDateCreated:", v17);
        goto LABEL_28;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBCallRecordValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setStatus:", v17);
        goto LABEL_28;
      case 6u:
        v17 = objc_alloc_init(_INPBCallRecordValue);
        if (PBReaderPlaceMark() && _INPBCallRecordValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addCallRecords:", v17, 0, 0);
LABEL_28:

LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_29;
    }
  }
}

uint64_t _INPBSearchForFilesIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_65;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_51;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_58:
        objc_msgSend(a1, "setEntityType:", v25, v33, v34);
        goto LABEL_52;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_65;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v17, 0, 0);
        goto LABEL_51;
      case 4u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_65;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppId:", v17, 0, 0);
        goto LABEL_51;
      case 5u:
        v17 = objc_alloc_init(_INPBFileProperty);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark() || !_INPBFilePropertyReadFrom(v17, a2))
          goto LABEL_65;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addProperties:", v17, 0, 0);
        goto LABEL_51;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_63:
        objc_msgSend(a1, "setScope:", v32, v33, v34);
        goto LABEL_52;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setScopeEntityName:", v17, 0, 0);
LABEL_51:

LABEL_52:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_65:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
    }
  }
}

uint64_t INCarSeatHasBackingType(unint64_t a1)
{
  return (a1 < 0xD) & (0x1FFEu >> a1);
}

uint64_t INCarSeatGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return 0x7FFFFFFFLL;
  else
    return dword_18C311304[a1 - 1];
}

uint64_t INCarSeatGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 0x15)
    return qword_18C311338[a2 - 1];
  else
    return 0;
}

const __CFString *INCarSeatGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return CFSTR("unknown");
  else
    return off_1E228B018[a1 - 1];
}

uint64_t INCarSeatWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("driver")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("passenger")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("frontLeft")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("frontRight")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("front")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rearLeft")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rearRight")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rear")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("thirdRowLeft")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("thirdRowRight")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("thirdRow")) & 1) != 0)
  {
    v2 = 11;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("all")))
  {
    v2 = 12;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarSeatGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("driver");
      goto LABEL_14;
    case 2:
      v4 = CFSTR("passenger");
      goto LABEL_14;
    case 3:
      v4 = CFSTR("front left");
      goto LABEL_14;
    case 4:
      v4 = CFSTR("front right");
      goto LABEL_14;
    case 5:
      v4 = CFSTR("front");
      goto LABEL_14;
    case 6:
      v4 = CFSTR("rear left");
      goto LABEL_14;
    case 7:
      v4 = CFSTR("rear right");
      goto LABEL_14;
    case 8:
      v4 = CFSTR("rear");
      goto LABEL_14;
    case 9:
      v4 = CFSTR("third row left");
      goto LABEL_14;
    case 10:
      v4 = CFSTR("third row right");
      goto LABEL_14;
    case 11:
      v4 = CFSTR("third row");
      goto LABEL_14;
    case 12:
      v4 = CFSTR("all");
LABEL_14:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

__CFString *INResumeWorkoutIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228B078[a1];
}

uint64_t INHomeAttributeTypeHasBackingType(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t INHomeAttributeTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0x42)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INHomeAttributeTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 0x42) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INHomeAttributeTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x41)
    return CFSTR("unknown");
  else
    return off_1E228B0B8[a1 - 1];
}

uint64_t INHomeAttributeTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("enabled")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("brightness")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hue")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("saturation")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("colorValue")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("temperature")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humidity")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lock")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("position")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("raise")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rotationSpeed")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rotationDirection")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("securitySystemState")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heatingCoolingMode")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heaterCoolerMode")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("controlLock")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("coolingThreshold")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fanOperatingMode")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heatingThreshold")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humidifierDehumidifierMode")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("slatOperatingMode")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("swingMode")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humidifierThreshold")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dehumidifierThreshold")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("programMode")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("duration")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("power")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airQualityRating")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airParticulateDensity")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airParticulateSize")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("smokeDetected")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonMonoxideDetected")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonMonoxideLevel")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonMonoxidePeakLevel")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonDioxideDetected")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonDioxideLevel")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonDioxidePeakLevel")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("contactDetected")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("occupancyDetected")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("leakDetected")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motionDetected")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ambientLightLevel")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("batteryLevel")) & 1) != 0)
  {
    v2 = 43;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("chargingState")) & 1) != 0)
  {
    v2 = 44;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lowBattery")) & 1) != 0)
  {
    v2 = 45;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inUse")) & 1) != 0)
  {
    v2 = 46;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airPurifierOperatingMode")) & 1) != 0)
  {
    v2 = 47;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("filterChange")) & 1) != 0)
  {
    v2 = 48;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("filterLife")) & 1) != 0)
  {
    v2 = 49;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("waterLevel")) & 1) != 0)
  {
    v2 = 50;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("remainingDuration")) & 1) != 0)
  {
    v2 = 51;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("statusFault")) & 1) != 0)
  {
    v2 = 52;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sulphurDioxideDensity")) & 1) != 0)
  {
    v2 = 53;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("nitrogenDioxideDensity")) & 1) != 0)
  {
    v2 = 54;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("particulateMatter25Density")) & 1) != 0)
  {
    v2 = 55;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("particulateMatter10Density")) & 1) != 0)
  {
    v2 = 56;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("volatileOrganicCompoundDensity")) & 1) != 0)
  {
    v2 = 57;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ozoneDensity")) & 1) != 0)
  {
    v2 = 58;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("colorTemperature")) & 1) != 0)
  {
    v2 = 59;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("count")) & 1) != 0)
  {
    v2 = 60;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("location")) & 1) != 0)
  {
    v2 = 61;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inventory")) & 1) != 0)
  {
    v2 = 62;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("capabilities")) & 1) != 0)
  {
    v2 = 63;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("open")) & 1) != 0)
  {
    v2 = 64;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("media")) & 1) != 0)
  {
    v2 = 65;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("adaptiveLighting")))
  {
    v2 = 66;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeAttributeTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("enabled");
      goto LABEL_69;
    case 2:
      v4 = CFSTR("brightness");
      goto LABEL_69;
    case 3:
      v4 = CFSTR("hue");
      goto LABEL_69;
    case 4:
      v4 = CFSTR("saturation");
      goto LABEL_69;
    case 5:
      v4 = CFSTR("color value");
      goto LABEL_69;
    case 6:
      v4 = CFSTR("temperature");
      goto LABEL_69;
    case 7:
      v4 = CFSTR("humidity");
      goto LABEL_69;
    case 8:
      v4 = CFSTR("lock");
      goto LABEL_69;
    case 9:
      v4 = CFSTR("position");
      goto LABEL_69;
    case 10:
      v4 = CFSTR("raise");
      goto LABEL_69;
    case 11:
      v4 = CFSTR("rotation speed");
      goto LABEL_69;
    case 12:
      v4 = CFSTR("rotation direction");
      goto LABEL_69;
    case 13:
      v4 = CFSTR("security system state");
      goto LABEL_69;
    case 14:
      v4 = CFSTR("heating cooling mode");
      goto LABEL_69;
    case 15:
      v4 = CFSTR("heater cooler mode");
      goto LABEL_69;
    case 16:
      v4 = CFSTR("control lock");
      goto LABEL_69;
    case 17:
      v4 = CFSTR("cooling threshold");
      goto LABEL_69;
    case 18:
      v4 = CFSTR("fan operating mode");
      goto LABEL_69;
    case 19:
      v4 = CFSTR("heating threshold");
      goto LABEL_69;
    case 20:
      v4 = CFSTR("humidifier dehumidifier mode");
      goto LABEL_69;
    case 21:
      v4 = CFSTR("slat operating mode");
      goto LABEL_69;
    case 22:
      v4 = CFSTR("swing mode");
      goto LABEL_69;
    case 23:
      v4 = CFSTR("humidifier threshold");
      goto LABEL_69;
    case 24:
      v4 = CFSTR("dehumidifier threshold");
      goto LABEL_69;
    case 25:
      v4 = CFSTR("program mode");
      goto LABEL_69;
    case 26:
      v4 = CFSTR("duration");
      goto LABEL_69;
    case 27:
      v4 = CFSTR("power");
      goto LABEL_69;
    case 28:
      v4 = CFSTR("air quality rating");
      goto LABEL_69;
    case 29:
      v4 = CFSTR("air particulate density");
      goto LABEL_69;
    case 30:
      v4 = CFSTR("air particulate size");
      goto LABEL_69;
    case 31:
      v4 = CFSTR("smoke detected");
      goto LABEL_69;
    case 32:
      v4 = CFSTR("carbon monoxide detected");
      goto LABEL_69;
    case 33:
      v4 = CFSTR("carbon monoxide level");
      goto LABEL_69;
    case 34:
      v4 = CFSTR("carbon monoxide peak level");
      goto LABEL_69;
    case 35:
      v4 = CFSTR("carbon dioxide detected");
      goto LABEL_69;
    case 36:
      v4 = CFSTR("carbon dioxide level");
      goto LABEL_69;
    case 37:
      v4 = CFSTR("carbon dioxide peak level");
      goto LABEL_69;
    case 38:
      v4 = CFSTR("contact detected");
      goto LABEL_69;
    case 39:
      v4 = CFSTR("occupancy detected");
      goto LABEL_69;
    case 40:
      v4 = CFSTR("leak detected");
      goto LABEL_69;
    case 41:
      v4 = CFSTR("motion detected");
      goto LABEL_69;
    case 42:
      v4 = CFSTR("ambient light level");
      goto LABEL_69;
    case 43:
      v4 = CFSTR("battery level");
      goto LABEL_69;
    case 44:
      v4 = CFSTR("charging state");
      goto LABEL_69;
    case 45:
      v4 = CFSTR("low battery");
      goto LABEL_69;
    case 46:
      v4 = CFSTR("in use");
      goto LABEL_69;
    case 47:
      v4 = CFSTR("air purifier operating mode");
      goto LABEL_69;
    case 48:
      v4 = CFSTR("filter change");
      goto LABEL_69;
    case 49:
      v4 = CFSTR("filter life");
      goto LABEL_69;
    case 50:
      v4 = CFSTR("water level");
      goto LABEL_69;
    case 51:
      v4 = CFSTR("remaining duration");
      goto LABEL_69;
    case 52:
      v4 = CFSTR("status fault");
      goto LABEL_69;
    case 53:
      v4 = CFSTR("sulphur dioxide density");
      goto LABEL_69;
    case 54:
      v4 = CFSTR("nitrogen dioxide density");
      goto LABEL_69;
    case 55:
      v4 = CFSTR("particulate matter25 density");
      goto LABEL_69;
    case 56:
      v4 = CFSTR("particulate matter10 density");
      goto LABEL_69;
    case 57:
      v4 = CFSTR("volatile organic compound density");
      goto LABEL_69;
    case 58:
      v4 = CFSTR("ozone density");
      goto LABEL_69;
    case 59:
      v4 = CFSTR("color temperature");
      goto LABEL_69;
    case 60:
      v4 = CFSTR("count");
      goto LABEL_69;
    case 61:
      v4 = CFSTR("location");
      goto LABEL_69;
    case 62:
      v4 = CFSTR("inventory");
      goto LABEL_69;
    case 63:
      v4 = CFSTR("capabilities");
      goto LABEL_69;
    case 64:
      v4 = CFSTR("open");
      goto LABEL_69;
    case 65:
      v4 = CFSTR("media");
      goto LABEL_69;
    case 66:
      v4 = CFSTR("adaptive lighting");
LABEL_69:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBLocalizedProjectReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBLanguageTag *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBLanguageTag);
        if (!PBReaderPlaceMark() || (_INPBLanguageTagReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLanguage:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBAppNames);
        if (!PBReaderPlaceMark() || !_INPBAppNamesReadFrom(v18, a2))
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppNames:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBIntentVocabulary);
    if (!PBReaderPlaceMark() || !_INPBIntentVocabularyReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentVocabulary:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentSlotResolutionMulticardinalResultReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentSlotResolutionResult *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentSlotResolutionResult);
        if (!PBReaderPlaceMark() || !_INPBIntentSlotResolutionResultReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addResolutionResults:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INHomeAttribute *INIntentSlotValueTransformFromHomeAttribute(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  INHomeAttribute *v11;
  void *v12;
  double v13;
  double v14;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "hasAttributeType");
    v4 = objc_msgSend(v2, "attributeType");
    if (((v4 < 0x42) & v3) != 0)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (objc_msgSend(v2, "hasAttributeValue"))
    {
      objc_msgSend(v2, "attributeValue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasValueType");
      v8 = objc_msgSend(v6, "valueType");
      if (((v8 < 6) & v7) != 0)
        v9 = v8 + 1;
      else
        v9 = 0;
      if (objc_msgSend(v6, "hasBooleanValue"))
        v10 = objc_msgSend(v6, "BOOLeanValue");
      else
        v10 = 0;
      v13 = 0.0;
      if (objc_msgSend(v6, "hasDoubleValue"))
      {
        objc_msgSend(v6, "doubleValue");
        v13 = v14;
      }
      if (objc_msgSend(v6, "hasStringValue"))
      {
        objc_msgSend(v6, "stringValue");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v12 = 0;
      }

    }
    else
    {
      v9 = 0;
      v10 = 0;
      v12 = 0;
      v13 = 0.0;
    }
    v11 = -[INHomeAttribute initWithType:valueType:BOOLValue:doubleValue:stringValue:]([INHomeAttribute alloc], "initWithType:valueType:BOOLValue:doubleValue:stringValue:", v5, v9, v10, v12, v13);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

_INPBHomeAttribute *INIntentSlotValueTransformToHomeAttribute(void *a1)
{
  id v1;
  _INPBHomeAttribute *v2;
  unint64_t v3;
  uint64_t v4;
  _INPBHomeAttributeValue *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBHomeAttribute);
    if (INHomeAttributeTypeHasBackingType(objc_msgSend(v1, "type")))
    {
      v3 = objc_msgSend(v1, "type") - 1;
      if (v3 >= 0x42)
        v4 = 0x7FFFFFFFLL;
      else
        v4 = v3;
      -[_INPBHomeAttribute setAttributeType:](v2, "setAttributeType:", v4);
    }
    v5 = objc_alloc_init(_INPBHomeAttributeValue);
    v6 = objc_msgSend(v1, "valueType");
    if (v6 <= 6 && ((0x7Eu >> v6) & 1) != 0)
    {
      v7 = objc_msgSend(v1, "valueType") - 1;
      if (v7 >= 6)
        v8 = 0x7FFFFFFFLL;
      else
        v8 = v7;
      -[_INPBHomeAttributeValue setValueType:](v5, "setValueType:", v8);
    }
    v9 = objc_msgSend(v1, "valueType");
    switch(v9)
    {
      case 3:
        objc_msgSend(v1, "stringValue");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBHomeAttributeValue setStringValue:](v5, "setStringValue:", v10);

        break;
      case 2:
        objc_msgSend(v1, "doubleValue");
        -[_INPBHomeAttributeValue setDoubleValue:](v5, "setDoubleValue:");
        break;
      case 1:
        -[_INPBHomeAttributeValue setBooleanValue:](v5, "setBooleanValue:", objc_msgSend(v1, "BOOLValue"));
        break;
    }
    -[_INPBHomeAttribute setAttributeValue:](v2, "setAttributeValue:", v5);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeAttributes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeAttribute(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeAttributes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeAttribute(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

BOOL _INPBGenericIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_34;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v17, 0, 0);
        goto LABEL_30;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDomain:", v17);
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setVerb:", v17);
        goto LABEL_30;
      case 4u:
        v17 = objc_alloc_init(_INPBProperty);
        if (PBReaderPlaceMark() && _INPBPropertyReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addParameters:", v17, 0, 0);
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_34:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_31;
    }
  }
}

BOOL _INPBCustomObjectReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentifier:", v17);
        goto LABEL_32;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDisplayString:", v17);
        goto LABEL_32;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPronunciationHint:", v17);
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAlternative:", v17, 0, 0);
        goto LABEL_32;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSubtitleString:", v17);
        goto LABEL_32;
      case 6u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && (_INPBImageValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDisplayImage:", v17, 0, 0);
LABEL_32:

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

void INRideFeedbackTypeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (a1 && v3)
  {
    v4 = v3;
    if ((a1 & 1) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
      v3 = v4;
    }
    if ((a1 & 2) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
      v3 = v4;
    }
  }

}

uint64_t INRideFeedbackTypeOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = (a1 >> 1) & 1;
  v3 = a1 & 1;
  if (a2 != 1)
    v3 = 0;
  if (a2 != 2)
    LODWORD(v2) = v3;
  if (a1)
    return v2;
  else
    return 0;
}

uint64_t *INRideFeedbackTypeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result | 1;
    if (a2 == 2)
      v2 = *result | 2;
    *result = v2;
  }
  return result;
}

unint64_t *INRideFeedbackTypeOptionsRemoveBackingType(unint64_t *result, int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (a2 == 2)
      v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    *result = v2;
  }
  return result;
}

id INRideFeedbackTypeOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("rate"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("tip"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t INRideFeedbackTypeOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("rate"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("tip")))
          v4 |= 2uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INRideFeedbackTypeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((a1 & 1) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("rate"), CFSTR("rate"), v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v5);

    }
    if ((a1 & 2) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("tip"), CFSTR("tip"), v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);

    }
    v7 = (void *)objc_msgSend(v4, "copy");

  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v7;
}

uint64_t _INPBDeleteTimerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTimer *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addDeletedTimers:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBGetCarLockStatusIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setLocked:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBLongValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBValueMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setValue:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBDataStringReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLocalizedValue:", v17);
        goto LABEL_28;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setVocabularyIdentifier:", v17);
        goto LABEL_28;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addAlternatives:", v17, 0, 0);
LABEL_28:

LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPronunciationHint:", v17);
        goto LABEL_28;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_29;
    }
  }
}

uint64_t _INPBIntegerValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBValueMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setValue:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INTriggerMethodHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t INTriggerMethodGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 4)
    return 0x7FFFFFFFLL;
  else
    return (10 * (a1 - 1));
}

uint64_t INTriggerMethodGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 3;
  v3 = 4;
  if (a2 != 30)
    v3 = 0;
  if (a2 != 20)
    v2 = v3;
  v4 = 1;
  v5 = 2;
  if (a2 != 10)
    v5 = 0;
  if (a2)
    v4 = v5;
  if (a2 <= 19)
    v2 = v4;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INTriggerMethodGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return *(&off_1E228B370 + a1 - 1);
}

uint64_t INTriggerMethodWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("other")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("homeButton")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("remoteButton")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("voiceTrigger")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTriggerMethodGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("other");
      goto LABEL_7;
    case 2:
      v4 = CFSTR("home button");
      goto LABEL_7;
    case 3:
      v4 = CFSTR("remote button");
      goto LABEL_7;
    case 4:
      v4 = CFSTR("voice trigger");
LABEL_7:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBSendPaymentIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayee:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(_INPBCurrencyAmount);
        if (!PBReaderPlaceMark() || (_INPBCurrencyAmountReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrencyAmount:", v17, 0, 0);
        goto LABEL_33;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNote:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

BOOL _INPBCallGroupReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupId:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setGroupName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromPower(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromPowerValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromPowerValue(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "hasUnit"))
    {
      switch(objc_msgSend(v2, "unit"))
      {
        case 1u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "terawatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 2u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "gigawatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 3u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "megawatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 4u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "kilowatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 5u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "watts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 6u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "milliwatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 7u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "microwatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 8u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "nanowatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 9u:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "picowatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 0xAu:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "femtowatts");
          v3 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 0xBu:
          objc_msgSend(MEMORY[0x1E0CB3AE8], "horsepower");
          v3 = objc_claimAutoreleasedReturnValue();
LABEL_16:
          v5 = (void *)v3;
          if (!v3)
            goto LABEL_19;
          v6 = objc_alloc(MEMORY[0x1E0CB3758]);
          objc_msgSend(v2, "magnitude");
          v4 = (void *)objc_msgSend(v6, "initWithDoubleValue:unit:", v5);
          goto LABEL_18;
        default:
LABEL_19:
          v8 = INSiriLogContextIntents;
          if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
          {
            v10 = 136315138;
            v11 = "INIntentSlotValueTransformFromPowerValue";
            _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s _INPBPowerValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v10, 0xCu);
          }
          goto LABEL_21;
      }
    }
    v4 = 0;
    v5 = 0;
LABEL_18:
    v7 = v4;

  }
  else
  {
LABEL_21:
    v7 = 0;
  }

  return v7;
}

_INPBPower *INIntentSlotValueTransformToPower(void *a1)
{
  void *v1;
  _INPBPower *v2;

  INIntentSlotValueTransformToPowerValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBPower);
    -[_INPBPower addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBPowerValue *INIntentSlotValueTransformToPowerValue(void *a1)
{
  id v1;
  void *v2;
  _INPBPowerValue *v3;
  double v4;
  double v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  int v28;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "unit");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_alloc_init(_INPBPowerValue);
    objc_msgSend(v1, "doubleValue");
    v5 = v4;

    -[_INPBPowerValue setMagnitude:](v3, "setMagnitude:", v5);
    objc_msgSend(MEMORY[0x1E0CB3AE8], "terawatts");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v2, "isEqual:", v6);

    if ((v7 & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3AE8], "gigawatts");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v2, "isEqual:", v9);

      if ((v10 & 1) != 0)
      {
        v8 = 2;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3AE8], "megawatts");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v2, "isEqual:", v11);

        if ((v12 & 1) != 0)
        {
          v8 = 3;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3AE8], "kilowatts");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v2, "isEqual:", v13);

          if ((v14 & 1) != 0)
          {
            v8 = 4;
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3AE8], "watts");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v2, "isEqual:", v15);

            if ((v16 & 1) != 0)
            {
              v8 = 5;
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3AE8], "milliwatts");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v2, "isEqual:", v17);

              if ((v18 & 1) != 0)
              {
                v8 = 6;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB3AE8], "microwatts");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                v20 = objc_msgSend(v2, "isEqual:", v19);

                if ((v20 & 1) != 0)
                {
                  v8 = 7;
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB3AE8], "nanowatts");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v2, "isEqual:", v21);

                  if ((v22 & 1) != 0)
                  {
                    v8 = 8;
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB3AE8], "picowatts");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    v24 = objc_msgSend(v2, "isEqual:", v23);

                    if ((v24 & 1) != 0)
                    {
                      v8 = 9;
                    }
                    else
                    {
                      objc_msgSend(MEMORY[0x1E0CB3AE8], "femtowatts");
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      v26 = objc_msgSend(v2, "isEqual:", v25);

                      if ((v26 & 1) != 0)
                      {
                        v8 = 10;
                      }
                      else
                      {
                        objc_msgSend(MEMORY[0x1E0CB3AE8], "horsepower");
                        v27 = (void *)objc_claimAutoreleasedReturnValue();
                        v28 = objc_msgSend(v2, "isEqual:", v27);

                        if (!v28)
                        {
LABEL_26:

                          return v3;
                        }
                        v8 = 11;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    -[_INPBPowerValue setUnit:](v3, "setUnit:", v8);
    goto LABEL_26;
  }
  v3 = 0;
  return v3;
}

id INIntentSlotValueTransformFromPowerValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromPowerValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromPowers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromPower(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToPowerValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToPowerValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToPowers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToPower(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

uint64_t _INPBQueryHealthSampleIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBWellnessObjectResultValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBWellnessObjectResultValue);
        if (!PBReaderPlaceMark() || !_INPBWellnessObjectResultValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addResultValues:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBTransferMoneyIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFromAccount:", v17, 0, 0);
        goto LABEL_37;
      case 5u:
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setToAccount:", v17, 0, 0);
        goto LABEL_37;
      case 6u:
        v17 = objc_alloc_init(_INPBPaymentAmountValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentAmountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_41;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionAmount:", v17, 0, 0);
        goto LABEL_37;
      case 7u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTransactionScheduledDate:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTransactionNote:", v17);
        goto LABEL_37;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

id INPersonToCSPerson(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  id *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id *v22;
  void *v23;
  void *v24;
  void *v25;
  objc_class *v26;
  id v27;
  void *v28;
  void *v29;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v31 = a1;
  objc_msgSend(v31, "personHandle");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "value");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "length"))
  {
    objc_msgSend(v31, "customIdentifier");
    v3 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v3;
  }
  if (!objc_msgSend(v2, "length"))
  {
    v17 = 0;
    goto LABEL_41;
  }
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v2, 0);
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  objc_msgSend(v31, "aliases");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v45, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v33 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        v10 = objc_msgSend(v9, "type");
        if (v10 == objc_msgSend(v1, "type"))
        {
          objc_msgSend(v9, "value");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "length") == 0;

          if (!v12)
          {
            objc_msgSend(v9, "value");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "addObject:", v13);

          }
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v45, 16);
    }
    while (v6);
  }

  v14 = objc_msgSend(v1, "type");
  switch(v14)
  {
    case 0:
      getCNContactInstantMessageAddressesKey();
      v19 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_27;
    case 2:
      v36 = 0;
      v37 = (uint64_t)&v36;
      v38 = 0x2020000000;
      v15 = (id *)getCNContactPhoneNumbersKeySymbolLoc_ptr;
      v39 = (void *)getCNContactPhoneNumbersKeySymbolLoc_ptr;
      if (!getCNContactPhoneNumbersKeySymbolLoc_ptr)
      {
        v18 = (void *)ContactsLibrary();
        v15 = (id *)dlsym(v18, "CNContactPhoneNumbersKey");
        *(_QWORD *)(v37 + 24) = v15;
        getCNContactPhoneNumbersKeySymbolLoc_ptr = (uint64_t)v15;
      }
      _Block_object_dispose(&v36, 8);
      if (!v15)
      {
LABEL_42:
        dlerror();
        abort_report_np();
        __break(1u);
      }
      goto LABEL_25;
    case 1:
      v36 = 0;
      v37 = (uint64_t)&v36;
      v38 = 0x2020000000;
      v15 = (id *)getCNContactEmailAddressesKeySymbolLoc_ptr;
      v39 = (void *)getCNContactEmailAddressesKeySymbolLoc_ptr;
      if (!getCNContactEmailAddressesKeySymbolLoc_ptr)
      {
        v16 = (void *)ContactsLibrary();
        v15 = (id *)dlsym(v16, "CNContactEmailAddressesKey");
        *(_QWORD *)(v37 + 24) = v15;
        getCNContactEmailAddressesKeySymbolLoc_ptr = (uint64_t)v15;
      }
      _Block_object_dispose(&v36, 8);
      if (!v15)
        goto LABEL_42;
LABEL_25:
      v19 = *v15;
LABEL_27:
      v20 = v19;
      goto LABEL_29;
  }
  v20 = 0;
LABEL_29:
  if (objc_msgSend(v1, "type") == 104)
  {
    getCNContactInstantMessageAddressesKey();
    v21 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(v1, "type") != 103)
    {
      v24 = v20;
      goto LABEL_38;
    }
    v36 = 0;
    v37 = (uint64_t)&v36;
    v38 = 0x2020000000;
    v22 = (id *)getCNContactUrlAddressesKeySymbolLoc_ptr;
    v39 = (void *)getCNContactUrlAddressesKeySymbolLoc_ptr;
    if (!getCNContactUrlAddressesKeySymbolLoc_ptr)
    {
      v23 = (void *)ContactsLibrary();
      v22 = (id *)dlsym(v23, "CNContactUrlAddressesKey");
      *(_QWORD *)(v37 + 24) = v22;
      getCNContactUrlAddressesKeySymbolLoc_ptr = (uint64_t)v22;
    }
    _Block_object_dispose(&v36, 8);
    if (!v22)
      goto LABEL_42;
    v21 = *v22;
  }
  v24 = v21;

LABEL_38:
  v41 = 0;
  v42 = &v41;
  v43 = 0x2050000000;
  v25 = (void *)getCSPersonClass_softClass;
  v44 = getCSPersonClass_softClass;
  if (!getCSPersonClass_softClass)
  {
    v36 = MEMORY[0x1E0C809B0];
    v37 = 3221225472;
    v38 = (uint64_t)__getCSPersonClass_block_invoke;
    v39 = &unk_1E22953C0;
    v40 = &v41;
    __getCSPersonClass_block_invoke((uint64_t)&v36);
    v25 = (void *)v42[3];
  }
  v26 = objc_retainAutorelease(v25);
  _Block_object_dispose(&v41, 8);
  v27 = [v26 alloc];
  objc_msgSend(v31, "displayName");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v27, "initWithDisplayName:handles:handleIdentifier:", v28, v4, v24);

  objc_msgSend(v31, "contactIdentifier");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setContactIdentifier:", v29);

LABEL_41:
  return v17;
}

void sub_18BF899F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ContactsLibrary()
{
  uint64_t v0;
  void *v2;

  if (ContactsLibraryCore_frameworkLibrary_17877)
    return ContactsLibraryCore_frameworkLibrary_17877;
  ContactsLibraryCore_frameworkLibrary_17877 = _sl_dlopen();
  v0 = ContactsLibraryCore_frameworkLibrary_17877;
  if (!ContactsLibraryCore_frameworkLibrary_17877)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id getCNContactInstantMessageAddressesKey()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getCNContactInstantMessageAddressesKeySymbolLoc_ptr;
  v7 = getCNContactInstantMessageAddressesKeySymbolLoc_ptr;
  if (!getCNContactInstantMessageAddressesKeySymbolLoc_ptr)
  {
    v1 = (void *)ContactsLibrary();
    v0 = (id *)dlsym(v1, "CNContactInstantMessageAddressesKey");
    v5[3] = (uint64_t)v0;
    getCNContactInstantMessageAddressesKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

void __getCSPersonClass_block_invoke(uint64_t a1)
{
  CoreSpotlightLibrary_17871();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CSPerson");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCSPersonClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    CoreSpotlightLibrary_17871();
  }
}

void CoreSpotlightLibrary_17871()
{
  void *v0;

  if (!CoreSpotlightLibraryCore_frameworkLibrary_17874)
  {
    CoreSpotlightLibraryCore_frameworkLibrary_17874 = _sl_dlopen();
    if (!CoreSpotlightLibraryCore_frameworkLibrary_17874)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

id INCSLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  objc_class *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend(v5, "localizations", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v22;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v22 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v10);
        CFBundleGetBundleWithIdentifier((CFStringRef)objc_msgSend(v5, "bundleIdentifier"));
        v12 = (void *)CFBundleCopyLocalizedStringForLocalization();
        if (objc_msgSend(v4, "length"))
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v8);
  }

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "languageCode");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(v6, "objectForKey:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15 == 0;

    if (v16)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v4, v14);
  }
  if (objc_msgSend(v6, "count"))
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x2050000000;
    v17 = (void *)getCSLocalizedStringClass_softClass;
    v29 = getCSLocalizedStringClass_softClass;
    if (!getCSLocalizedStringClass_softClass)
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __getCSLocalizedStringClass_block_invoke;
      v25[3] = &unk_1E22953C0;
      v25[4] = &v26;
      __getCSLocalizedStringClass_block_invoke((uint64_t)v25);
      v17 = (void *)v27[3];
    }
    v18 = objc_retainAutorelease(v17);
    _Block_object_dispose(&v26, 8);
    v19 = (void *)objc_msgSend([v18 alloc], "initWithLocalizedStrings:", v6);
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_18BF89F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCSLocalizedStringClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;

  CoreSpotlightLibrary_17871();
  result = objc_getClass("CSLocalizedString");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCSLocalizedStringClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)INPersonHandleLabelForCNLabeledValueWithLanguages(v3, v4);
  }
  return result;
}

id INPersonHandleLabelForCNLabeledValueWithLanguages(void *a1, void *a2)
{
  id *v3;
  void *v4;
  id v5;
  id *v6;
  void *v7;
  id v8;
  id *v9;
  void *v10;
  id v11;
  id *v12;
  void *v13;
  id v14;
  id *v15;
  void *v16;
  id v17;
  id *v18;
  void *v19;
  id v20;
  id *v21;
  void *v22;
  id v23;
  id *v24;
  void *v25;
  id v26;
  id *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v48;
  id v49;
  id obj;
  id obja;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[128];
  _BYTE v69[128];
  _QWORD v70[9];
  id v71;
  _QWORD v72[12];

  v72[10] = *MEMORY[0x1E0C80C00];
  v48 = a1;
  v49 = a2;
  objc_msgSend(v48, "label");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  if (v55)
  {
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v3 = (id *)getCNLabelHomeSymbolLoc_ptr;
    v67 = getCNLabelHomeSymbolLoc_ptr;
    if (!getCNLabelHomeSymbolLoc_ptr)
    {
      v4 = (void *)ContactsLibrary_17888();
      v3 = (id *)dlsym(v4, "CNLabelHome");
      v65[3] = (uint64_t)v3;
      getCNLabelHomeSymbolLoc_ptr = (uint64_t)v3;
    }
    _Block_object_dispose(&v64, 8);
    if (!v3)
      goto LABEL_57;
    v5 = *v3;
    v70[0] = v5;
    v72[0] = CFSTR("com.apple.intents.PersonHandleLabel.Home");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v6 = (id *)getCNLabelWorkSymbolLoc_ptr;
    v67 = getCNLabelWorkSymbolLoc_ptr;
    if (!getCNLabelWorkSymbolLoc_ptr)
    {
      v7 = (void *)ContactsLibrary_17888();
      v6 = (id *)dlsym(v7, "CNLabelWork");
      v65[3] = (uint64_t)v6;
      getCNLabelWorkSymbolLoc_ptr = (uint64_t)v6;
    }
    _Block_object_dispose(&v64, 8);
    if (!v6)
      goto LABEL_57;
    v8 = *v6;
    v70[1] = v8;
    v72[1] = CFSTR("com.apple.intents.PersonHandleLabel.Work");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v9 = (id *)getCNLabelOtherSymbolLoc_ptr;
    v67 = getCNLabelOtherSymbolLoc_ptr;
    if (!getCNLabelOtherSymbolLoc_ptr)
    {
      v10 = (void *)ContactsLibrary_17888();
      v9 = (id *)dlsym(v10, "CNLabelOther");
      v65[3] = (uint64_t)v9;
      getCNLabelOtherSymbolLoc_ptr = (uint64_t)v9;
    }
    _Block_object_dispose(&v64, 8);
    if (!v9)
      goto LABEL_57;
    v11 = *v9;
    v70[2] = v11;
    v72[2] = CFSTR("com.apple.intents.PersonHandleLabel.Other");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v12 = (id *)getCNLabelSchoolSymbolLoc_ptr;
    v67 = getCNLabelSchoolSymbolLoc_ptr;
    if (!getCNLabelSchoolSymbolLoc_ptr)
    {
      v13 = (void *)ContactsLibrary_17888();
      v12 = (id *)dlsym(v13, "CNLabelSchool");
      v65[3] = (uint64_t)v12;
      getCNLabelSchoolSymbolLoc_ptr = (uint64_t)v12;
    }
    _Block_object_dispose(&v64, 8);
    if (!v12)
      goto LABEL_57;
    v14 = *v12;
    v70[3] = v14;
    v72[3] = CFSTR("com.apple.intents.PersonHandleLabel.School");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v15 = (id *)getCNLabelPhoneNumberiPhoneSymbolLoc_ptr;
    v67 = getCNLabelPhoneNumberiPhoneSymbolLoc_ptr;
    if (!getCNLabelPhoneNumberiPhoneSymbolLoc_ptr)
    {
      v16 = (void *)ContactsLibrary_17888();
      v15 = (id *)dlsym(v16, "CNLabelPhoneNumberiPhone");
      v65[3] = (uint64_t)v15;
      getCNLabelPhoneNumberiPhoneSymbolLoc_ptr = (uint64_t)v15;
    }
    _Block_object_dispose(&v64, 8);
    if (!v15)
      goto LABEL_57;
    v17 = *v15;
    v70[4] = v17;
    v72[4] = CFSTR("com.apple.intents.PersonHandleLabel.iPhone");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v18 = (id *)getCNLabelPhoneNumberMobileSymbolLoc_ptr;
    v67 = getCNLabelPhoneNumberMobileSymbolLoc_ptr;
    if (!getCNLabelPhoneNumberMobileSymbolLoc_ptr)
    {
      v19 = (void *)ContactsLibrary_17888();
      v18 = (id *)dlsym(v19, "CNLabelPhoneNumberMobile");
      v65[3] = (uint64_t)v18;
      getCNLabelPhoneNumberMobileSymbolLoc_ptr = (uint64_t)v18;
    }
    _Block_object_dispose(&v64, 8);
    if (!v18)
      goto LABEL_57;
    v20 = *v18;
    v70[5] = v20;
    v72[5] = CFSTR("com.apple.intents.PersonHandleLabel.Mobile");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v21 = (id *)getCNLabelPhoneNumberMainSymbolLoc_ptr;
    v67 = getCNLabelPhoneNumberMainSymbolLoc_ptr;
    if (!getCNLabelPhoneNumberMainSymbolLoc_ptr)
    {
      v22 = (void *)ContactsLibrary_17888();
      v21 = (id *)dlsym(v22, "CNLabelPhoneNumberMain");
      v65[3] = (uint64_t)v21;
      getCNLabelPhoneNumberMainSymbolLoc_ptr = (uint64_t)v21;
    }
    _Block_object_dispose(&v64, 8);
    if (!v21)
      goto LABEL_57;
    v23 = *v21;
    v70[6] = v23;
    v72[6] = CFSTR("com.apple.intents.PersonHandleLabel.Main");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v24 = (id *)getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr;
    v67 = getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr;
    if (!getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr)
    {
      v25 = (void *)ContactsLibrary_17888();
      v24 = (id *)dlsym(v25, "CNLabelPhoneNumberHomeFax");
      v65[3] = (uint64_t)v24;
      getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr = (uint64_t)v24;
    }
    _Block_object_dispose(&v64, 8);
    if (!v24)
      goto LABEL_57;
    v26 = *v24;
    v70[7] = v26;
    v72[7] = CFSTR("com.apple.intents.PersonHandleLabel.Home_Fax");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v27 = (id *)getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr;
    v67 = getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr;
    if (!getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr)
    {
      v28 = (void *)ContactsLibrary_17888();
      v27 = (id *)dlsym(v28, "CNLabelPhoneNumberWorkFax");
      v65[3] = (uint64_t)v27;
      getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr = (uint64_t)v27;
    }
    _Block_object_dispose(&v64, 8);
    if (!v27)
      goto LABEL_57;
    v29 = v5;
    v30 = v11;
    obj = v29;
    v52 = v8;
    v31 = *v27;
    v70[8] = v31;
    v72[8] = CFSTR("com.apple.intents.PersonHandleLabel.Work_Fax");
    v64 = 0;
    v65 = &v64;
    v66 = 0x2020000000;
    v32 = (id *)getCNLabelPhoneNumberPagerSymbolLoc_ptr;
    v67 = getCNLabelPhoneNumberPagerSymbolLoc_ptr;
    if (!getCNLabelPhoneNumberPagerSymbolLoc_ptr)
    {
      v33 = (void *)ContactsLibrary_17888();
      v32 = (id *)dlsym(v33, "CNLabelPhoneNumberPager");
      v65[3] = (uint64_t)v32;
      getCNLabelPhoneNumberPagerSymbolLoc_ptr = (uint64_t)v32;
    }
    _Block_object_dispose(&v64, 8);
    if (!v32)
    {
LABEL_57:
      dlerror();
      abort_report_np();
      __break(1u);
    }
    v71 = *v32;
    v72[9] = CFSTR("com.apple.intents.PersonHandleLabel.Pager");
    v34 = (void *)MEMORY[0x1E0C99D80];
    v35 = v71;
    objc_msgSend(v34, "dictionaryWithObjects:forKeys:count:", v72, v70, 10);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v54, "objectForKey:", v55);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v36)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      obja = v49;
      v37 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v60, v69, 16);
      if (v37)
      {
        v53 = *(_QWORD *)v61;
        do
        {
          for (i = 0; i != v37; ++i)
          {
            if (*(_QWORD *)v61 != v53)
              objc_enumerationMutation(obja);
            v39 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
            INLocalizedStringForContactLabelAndLanguage(v55, v39);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v41 = v54;
            v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
            if (v42)
            {
              v43 = *(_QWORD *)v57;
LABEL_40:
              v44 = 0;
              while (1)
              {
                if (*(_QWORD *)v57 != v43)
                  objc_enumerationMutation(v41);
                v45 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * v44);
                INLocalizedStringForContactLabelAndLanguage(v45, v39);
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                if (!objc_msgSend(v40, "caseInsensitiveCompare:", v46))
                  break;

                if (v42 == ++v44)
                {
                  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
                  if (v42)
                    goto LABEL_40;
                  goto LABEL_46;
                }
              }
              objc_msgSend(v41, "objectForKey:", v45);
              v36 = (void *)objc_claimAutoreleasedReturnValue();

              if (v36)
                goto LABEL_52;
            }
            else
            {
LABEL_46:

            }
          }
          v37 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v60, v69, 16);
        }
        while (v37);
      }

      if (objc_msgSend(obja, "count"))
      {
        objc_msgSend(obja, "firstObject");
        obja = (id)objc_claimAutoreleasedReturnValue();
        INLocalizedStringForContactLabelAndLanguage(v55, obja);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_52:

      }
      else
      {
        v36 = 0;
      }
    }

  }
  else
  {
    v36 = 0;
  }

  return v36;
}

void sub_18BF8A824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t ContactsLibrary_17888()
{
  uint64_t v0;
  void *v2;

  if (ContactsLibraryCore_frameworkLibrary_17902)
    return ContactsLibraryCore_frameworkLibrary_17902;
  ContactsLibraryCore_frameworkLibrary_17902 = _sl_dlopen();
  v0 = ContactsLibraryCore_frameworkLibrary_17902;
  if (!ContactsLibraryCore_frameworkLibrary_17902)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id INLocalizedStringForContactLabelAndLanguage(void *a1, void *a2)
{
  id v3;
  id v4;
  objc_class *CNLabeledValueClass;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v3 = a2;
  v4 = a1;
  CNLabeledValueClass = (objc_class *)getCNLabeledValueClass();
  NSStringFromClass(CNLabeledValueClass);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", getCNLabeledValueClass());
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "_cfBundle");

  +[INStringLocalizer localizerForLanguage:](INStringLocalizer, "localizerForLanguage:", v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  INLocalizedStringFromBundle(v4, 0, v6, v9, v8, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
    v11 = v10;
  else
    v11 = v4;
  v12 = v11;

  return v12;
}

id getCNLabeledValueClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCNLabeledValueClass_softClass;
  v7 = getCNLabeledValueClass_softClass;
  if (!getCNLabeledValueClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18BF8AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNLabeledValueClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ContactsLibrary_17888();
  result = objc_getClass("CNLabeledValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)INPersonHandleLabelForCNLabeledValue(v3);
  }
  return result;
}

id INPersonHandleLabelForCNLabeledValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  INPersonHandleLabelUtilsLanguageCodes();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  INPersonHandleLabelForCNLabeledValueWithLanguages(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id INPersonHandleLabelUtilsLanguageCodes()
{
  id v0;
  void *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99E10]);
  +[INPreferences sharedPreferences](INPreferences, "sharedPreferences");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_cachedSiriLanguageCode");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = INSiriLogContextIntents;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_DEBUG))
    {
      v12 = 136315138;
      v13 = "INPersonHandleLabelUtilsLanguageCodes";
      _os_log_debug_impl(&dword_18BEBC000, v3, OS_LOG_TYPE_DEBUG, "%s _cachedSiriLanguageCode is set", (uint8_t *)&v12, 0xCu);
    }
    +[INPreferences sharedPreferences](INPreferences, "sharedPreferences");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_cachedSiriLanguageCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v5, "length"))
    {
      objc_msgSend(v0, "addObject:", v5);
    }
    else
    {
      v6 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        v12 = 136315138;
        v13 = "INPersonHandleLabelUtilsLanguageCodes";
        _os_log_error_impl(&dword_18BEBC000, v6, OS_LOG_TYPE_ERROR, "%s siriLanguageCode is nil", (uint8_t *)&v12, 0xCu);
      }
    }

  }
  else if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
  {
    v12 = 136315138;
    v13 = "INPersonHandleLabelUtilsLanguageCodes";
    _os_log_error_impl(&dword_18BEBC000, v3, OS_LOG_TYPE_ERROR, "%s _cachedSiriLanguageCode is not set, using deviceLocale only", (uint8_t *)&v12, 0xCu);
  }
  v7 = (void *)_CFLocaleCopyPreferred();
  objc_msgSend(v7, "languageIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "length"))
  {
    objc_msgSend(v0, "addObject:", v8);
  }
  else
  {
    v9 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315138;
      v13 = "INPersonHandleLabelUtilsLanguageCodes";
      _os_log_error_impl(&dword_18BEBC000, v9, OS_LOG_TYPE_ERROR, "%s deviceLocale is nil", (uint8_t *)&v12, 0xCu);
    }
  }
  objc_msgSend(v0, "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t INPersonHandleLabelEqualsCNLabeledValueWithLanguages(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  INPersonHandleLabelForCNLabeledValueWithLanguages(v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "caseInsensitiveCompare:", v8))
  {
    objc_msgSend(v6, "label");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v10 = v7;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v11)
    {
      v17 = v8;
      v12 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v19 != v12)
            objc_enumerationMutation(v10);
          INLocalizedStringForContactLabelAndLanguage(v9, *(void **)(*((_QWORD *)&v18 + 1) + 8 * i));
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v5, "caseInsensitiveCompare:", v14);

          if (!v15)
          {
            v11 = 1;
            goto LABEL_12;
          }
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v11)
          continue;
        break;
      }
LABEL_12:
      v8 = v17;
    }

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

uint64_t INPersonHandleLabelEqualsCNLabeledValue(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  INPersonHandleLabelUtilsLanguageCodes();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = INPersonHandleLabelEqualsCNLabeledValueWithLanguages(v4, v3, v5);

  return v6;
}

uint64_t _INPBFilePropertyValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBContact *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPerson:", v17, 0, 0);
        goto LABEL_40;
      case 2u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v17, 0, 0);
        goto LABEL_40;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v17, 0, 0);
        goto LABEL_40;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_45:
        objc_msgSend(a1, "setFileType:", v25);
        goto LABEL_46;
      case 5u:
        v17 = objc_alloc_init(_INPBLong);
        if (PBReaderPlaceMark() && (_INPBLongReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setQuantity:", v17, 0, 0);
LABEL_40:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_48:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

BOOL _INPBPlayAudioMessageIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

__CFString *INRequestRideIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return off_1E228B450[a1];
}

uint64_t _INPBCallMetricsValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(double *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v24 = 0.0;
        }
        objc_msgSend(a1, "setTimeToEstablish:", v24);
      }
      else if ((v10 >> 3) == 2)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(double *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0.0;
        }
        objc_msgSend(a1, "setCallDuration:", v21);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBUncompressFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _INPBString *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v23, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        objc_msgSend(a1, "setSuccess:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPaymentRecordReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBContact *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayee:", v17, 0, 0);
        goto LABEL_46;
      case 3u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayer:", v17, 0, 0);
        goto LABEL_46;
      case 5u:
        v17 = objc_alloc_init(_INPBCurrencyAmount);
        if (!PBReaderPlaceMark() || (_INPBCurrencyAmountReadFrom(v17, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrencyAmount:", v17, 0, 0);
        goto LABEL_46;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNote:", v17, 0, 0);
        goto LABEL_46;
      case 8u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_53:
        objc_msgSend(a1, "setStatus:", v25);
        goto LABEL_47;
      case 9u:
        v17 = objc_alloc_init(_INPBPaymentMethodValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentMethodValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentMethod:", v17, 0, 0);
        goto LABEL_46;
      case 0xAu:
        v17 = objc_alloc_init(_INPBCurrencyAmount);
        if (PBReaderPlaceMark() && (_INPBCurrencyAmountReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFeeAmount:", v17, 0, 0);
LABEL_46:

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

void sub_18BF91B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19226(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19227(uint64_t a1)
{

}

__CFString *INSearchCallHistoryIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228B5E0[a1];
}

INNote *INIntentSlotValueTransformFromNote(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  INNote *v11;
  INNote *v13;
  void *v14;
  void *v15;
  void *v16;

  if (a1)
  {
    v1 = a1;
    v13 = [INNote alloc];
    objc_msgSend(v1, "title");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v16);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "contents");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromNoteContents(v15);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "groupName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v14);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "createdDateTime");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "modifiedDateTime");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "accountIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = -[INNote initWithTitle:contents:groupName:createdDateComponents:modifiedDateComponents:identifier:accountIdentifier:](v13, "initWithTitle:contents:groupName:createdDateComponents:modifiedDateComponents:identifier:accountIdentifier:", v2, v3, v4, v6, v8, v9, v10);
  }
  else
  {
    v11 = 0;
  }
  return v11;
}

_INPBNote *INIntentSlotValueTransformToNote(void *a1)
{
  id v1;
  _INPBNote *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBNote);
    objc_msgSend(v1, "title");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBNote setTitle:](v2, "setTitle:", v4);

    objc_msgSend(v1, "contents");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToNoteContents(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBNote setContents:](v2, "setContents:", v6);

    objc_msgSend(v1, "groupName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBNote setGroupName:](v2, "setGroupName:", v8);

    objc_msgSend(v1, "createdDateComponents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBNote setCreatedDateTime:](v2, "setCreatedDateTime:", v10);

    objc_msgSend(v1, "modifiedDateComponents");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBNote setModifiedDateTime:](v2, "setModifiedDateTime:", v12);

    objc_msgSend(v1, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBNote setIdentifier:](v2, "setIdentifier:", v13);

    objc_msgSend(v1, "accountIdentifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBNote setAccountIdentifier:](v2, "setAccountIdentifier:", v14);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromNotes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromNote(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToNotes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToNote(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedNoteFromNote(void *a1)
{
  return a1;
}

uint64_t _INPBOpenFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_65;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_51;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_58:
        objc_msgSend(a1, "setEntityType:", v25, v33, v34);
        goto LABEL_52;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_65;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v17, 0, 0);
        goto LABEL_51;
      case 4u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_65;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppId:", v17, 0, 0);
        goto LABEL_51;
      case 5u:
        v17 = objc_alloc_init(_INPBFileProperty);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark() || !_INPBFilePropertyReadFrom(v17, a2))
          goto LABEL_65;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addProperties:", v17, 0, 0);
        goto LABEL_51;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_63:
        objc_msgSend(a1, "setScope:", v32, v33, v34);
        goto LABEL_52;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setScopeEntityName:", v17, 0, 0);
LABEL_51:

LABEL_52:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_65:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
    }
  }
}

uint64_t _INPBHomeAttributeValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  _INPBHomeAttributeRange *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_65;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v26 = 0;
            goto LABEL_68;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
        else
          v26 = v21;
LABEL_68:
        objc_msgSend(a1, "setValueType:", v26);
        goto LABEL_90;
      case 2u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                v30 = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_72:
        objc_msgSend(a1, "setBooleanValue:", v30 != 0);
        goto LABEL_90;
      case 3u:
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(double *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v37 = 0.0;
        }
        objc_msgSend(a1, "setDoubleValue:", v37);
        goto LABEL_90;
      case 4u:
        PBReaderReadString();
        v38 = (_INPBHomeAttributeRange *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setStringValue:", v38);
        goto LABEL_63;
      case 5u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v15 = v40++ >= 9;
              if (v15)
              {
                v46 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v41;
LABEL_77:
        objc_msgSend(a1, "setIntegerValue:", v46);
        goto LABEL_90;
      case 6u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v15 = v48++ >= 9;
              if (v15)
              {
                v54 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v54 = 0;
        else
          v54 = v49;
LABEL_82:
        objc_msgSend(a1, "setLimitValue:", v54);
        goto LABEL_90;
      case 7u:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              v15 = v56++ >= 9;
              if (v15)
              {
                v62 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v62 = 0;
        else
          v62 = v57;
LABEL_87:
        objc_msgSend(a1, "setUnit:", v62);
        goto LABEL_90;
      case 8u:
        v38 = objc_alloc_init(_INPBHomeAttributeRange);
        if (PBReaderPlaceMark() && (_INPBHomeAttributeRangeReadFrom(v38, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRangeValue:", v38, 0, 0);
LABEL_63:

LABEL_90:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
    }
  }
}

BOOL _INPBAppBundleInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentSupport *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentSupport);
        if (!PBReaderPlaceMark() || !_INPBIntentSupportReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addIntentSupport:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(_INPBLocalizedProject);
        if (!PBReaderPlaceMark() || !_INPBLocalizedProjectReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addLocalizedProjects:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        v17 = objc_alloc_init(_INPBAppId);
        if (!PBReaderPlaceMark() || (_INPBAppIdReadFrom(v17, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppId:", v17, 0, 0);
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(_INPBBuildId);
        if (!PBReaderPlaceMark() || !_INPBBuildIdReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBuildId:", v17, 0, 0);
        goto LABEL_39;
      case 5u:
        v17 = objc_alloc_init(_INPBPlatformSupport);
        if (PBReaderPlaceMark() && _INPBPlatformSupportReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addSupportedPlatforms:", v17, 0, 0);
LABEL_39:

LABEL_40:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_40;
    }
  }
}

BOOL _INPBDeleteHealthSampleIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id INIntentSlotValueTransformFromWellnessValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_7;
  if (!objc_msgSend(v1, "hasPbDoubleValue"))
  {
    if (objc_msgSend(v2, "hasOrdinalValue"))
    {
      objc_msgSend(v2, "ordinalValue");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromInteger(v3);
      v4 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  objc_msgSend(v2, "pbDoubleValue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformFromDouble(v3);
  v4 = objc_claimAutoreleasedReturnValue();
LABEL_6:
  v5 = (void *)v4;

LABEL_8:
  return v5;
}

_INPBWellnessValue *INIntentSlotValueTransformToWellnessValue(void *a1)
{
  const __CFNumber *v1;
  _INPBWellnessValue *v2;
  CFNumberType Type;
  void *v4;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBWellnessValue);
    Type = CFNumberGetType(v1);
    if ((unint64_t)Type <= kCFNumberDoubleType && ((1 << Type) & 0x3060) != 0)
    {
      INIntentSlotValueTransformToDouble(v1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBWellnessValue setPbDoubleValue:](v2, "setPbDoubleValue:", v4);
    }
    else
    {
      INIntentSlotValueTransformToInteger(v1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBWellnessValue setOrdinalValue:](v2, "setOrdinalValue:", v4);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromWellnessValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromWellnessValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWellnessValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToWellnessValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t _INPBFindEventsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_51;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_35;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSearchQuery:", v17);
        goto LABEL_35;
      case 3u:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_51;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTimeRange:", v17, 0, 0);
        goto LABEL_35;
      case 4u:
        v17 = objc_alloc_init(_INPBContact);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
          goto LABEL_51;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addParticipants:", v17, 0, 0);
        goto LABEL_35;
      case 5u:
        v17 = objc_alloc_init(_INPBLocation);
        if (PBReaderPlaceMark() && (_INPBLocationReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLocation:", v17, 0, 0);
LABEL_35:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_51:

        return 0;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_49:
        objc_msgSend(a1, "setRequestedEventAttribute:", v25, v26, v27);
        goto LABEL_36;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

uint64_t _INPBControlHomeIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBHomeEntityResponse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBHomeEntityResponse);
        if (!PBReaderPlaceMark() || !_INPBHomeEntityResponseReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addEntityResponses:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INActionsAndApplicationRecordMatchesRequirementsFromDescriptor(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  unsigned int v10;
  void *v11;
  char v12;
  int v13;
  void *v14;
  void *v15;
  _BOOL4 v16;

  v7 = a2;
  v8 = a4;
  v9 = a1;
  v10 = INApplicationRecordMatchesRequirementsFromDescriptor(a3, v8, 0);
  objc_msgSend(v8, "intentIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v9, "containsObject:", v11);

  if ((v12 & 1) != 0)
  {
    v13 = 0;
  }
  else
  {
    objc_msgSend(v8, "intentIdentifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v7, "containsObject:", v14) ^ 1;

  }
  objc_msgSend(v8, "intentIdentifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15 == 0;

  return (v16 | ~v13) & v10;
}

uint64_t INApplicationRecordMatchesRequirementsFromDescriptor(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)MEMORY[0x18D7810F0]();
  objc_msgSend(v6, "teamIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {

  }
  else
  {
    objc_msgSend(v6, "supportedIntents");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");

    if (!v11)
    {
LABEL_13:
      v16 = 1;
      goto LABEL_25;
    }
  }
  objc_msgSend(v6, "teamIdentifier");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v12)
    goto LABEL_6;
  v13 = (void *)v12;
  objc_msgSend(v6, "teamIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "teamIdentifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "isEqualToString:", v15);

  if ((_DWORD)v16)
  {
LABEL_6:
    objc_msgSend(v6, "teamIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("0000000000"));

    objc_msgSend(v6, "bundleIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v19, "hasPrefix:", CFSTR("com.apple.")))
    {

    }
    else
    {
      objc_msgSend(v6, "extensionBundleIdentifier");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "hasPrefix:", CFSTR("com.apple."));

      if (((v18 | v21) & 1) == 0)
      {
        objc_msgSend(v5, "teamIdentifier");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("0000000000"));

        objc_msgSend(v5, "bundleIdentifier");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "hasPrefix:", CFSTR("com.apple."));

        v16 = 0;
        if ((v23 & 1) != 0 || (v25 & 1) != 0)
          goto LABEL_25;
      }
    }
    if (v7 && (objc_msgSend(v7, "skipSupportedIntentsCheck") & 1) != 0)
      goto LABEL_13;
    objc_msgSend(v5, "in_supportedIntents");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bundleIdentifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[INSystemAppMapper supportedIntentsOverridesForBundleIdentifier:](INSystemAppMapper, "supportedIntentsOverridesForBundleIdentifier:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v28, "count"))
    {
      v29 = (void *)objc_msgSend(v26, "mutableCopy");
      objc_msgSend(v29, "unionSet:", v28);

      v26 = v29;
    }
    objc_msgSend(v5, "bundleIdentifier");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    +[INAppResolver supportedIntentsOverridesForThirdPartyBundleIdentifier:](INAppResolver, "supportedIntentsOverridesForThirdPartyBundleIdentifier:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v31, "count"))
    {
      v32 = (void *)objc_msgSend(v26, "mutableCopy");
      objc_msgSend(v32, "unionSet:", v31);

      v26 = v32;
    }
    if (v7 && objc_msgSend(v7, "includeUserActivityTypes"))
    {
      v33 = (void *)objc_msgSend(v26, "mutableCopy");
      objc_msgSend(v5, "if_userActivityTypes");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "addObjectsFromArray:", v34);

      v26 = v33;
    }
    objc_msgSend(v6, "supportedIntents");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v35, "count"))
    {
      objc_msgSend(v6, "supportedIntents");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v36, "intersectsSet:", v26);

    }
    else
    {
      v16 = 1;
    }

  }
LABEL_25:
  objc_autoreleasePoolPop(v8);

  return v16;
}

uint64_t INApplicationRecordMatchesRequirementsFromUserActivityDescriptor(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;

  v5 = a2;
  v6 = a1;
  v7 = INApplicationRecordMatchesRequirementsFromDescriptor(v6, v5, a3);
  objc_msgSend(v6, "if_userActivityTypes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(v8, "mutableCopy");
  objc_msgSend(v9, "addObject:", *MEMORY[0x1E0CB3418]);
  objc_msgSend(v5, "userActivityType");
  v10 = objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = (void *)v10;
    objc_msgSend(v5, "userActivityType");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v9, "containsObject:", v12);

    v7 = v13 & v7;
  }

  return v7;
}

uint64_t INApplicationRecordMatchesRequirementsFromIntentDescriptor(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  int v21;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = INApplicationRecordMatchesRequirementsFromDescriptor(v5, v6, v7);
  if (!v7 || (objc_msgSend(v7, "skipSupportedIntentsCheck") & 1) == 0)
  {
    objc_msgSend(v5, "in_supportedIntents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bundleIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[INSystemAppMapper supportedIntentsOverridesForBundleIdentifier:](INSystemAppMapper, "supportedIntentsOverridesForBundleIdentifier:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v11, "count"))
    {
      v12 = (void *)objc_msgSend(v9, "mutableCopy");
      objc_msgSend(v12, "unionSet:", v11);

      v9 = v12;
    }
    objc_msgSend(v5, "bundleIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[INAppResolver supportedIntentsOverridesForThirdPartyBundleIdentifier:](INAppResolver, "supportedIntentsOverridesForThirdPartyBundleIdentifier:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v14, "count"))
    {
      v15 = (void *)objc_msgSend(v9, "mutableCopy");
      objc_msgSend(v15, "unionSet:", v14);

      v9 = v15;
    }
    if (v7 && objc_msgSend(v7, "includeUserActivityTypes"))
    {
      v16 = (void *)objc_msgSend(v9, "mutableCopy");
      objc_msgSend(v5, "if_userActivityTypes");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addObjectsFromArray:", v17);

      v9 = v16;
    }
    objc_msgSend(v6, "intentClassName");
    v18 = objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v19 = (void *)v18;
      objc_msgSend(v6, "intentClassName");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v9, "containsObject:", v20);

      v8 = v21 & v8;
    }

  }
  return v8;
}

id INIntentSlotValueTransformFromDateTime(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v4 = 0;
    goto LABEL_61;
  }
  if (objc_msgSend(v1, "hasDate"))
  {
    objc_msgSend(v2, "date");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "hasYear"))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v4, "setYear:", objc_msgSend(v3, "year"));
      if ((objc_msgSend(v3, "hasMonth") & 1) == 0)
        goto LABEL_12;
      if (v4)
      {
LABEL_11:
        objc_msgSend(v4, "setMonth:", objc_msgSend(v3, "month"));
LABEL_12:
        if ((objc_msgSend(v3, "hasDayOfMonth") & 1) == 0)
          goto LABEL_19;
        if (v4)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    else if ((objc_msgSend(v3, "hasMonth") & 1) == 0)
    {
      if ((objc_msgSend(v3, "hasDayOfMonth") & 1) == 0)
      {
        v4 = 0;
LABEL_19:
        if (objc_msgSend(v3, "hasDayOfWeek") && objc_msgSend(v3, "dayOfWeek"))
        {
          if (!v4)
            v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
          if (objc_msgSend(v3, "dayOfWeek") == 7)
            v5 = 1;
          else
            v5 = (int)objc_msgSend(v3, "dayOfWeek") + 1;
          objc_msgSend(v4, "setWeekday:", v5);
        }

        goto LABEL_28;
      }
LABEL_16:
      v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
LABEL_17:
      objc_msgSend(v4, "setDay:", objc_msgSend(v3, "dayOfMonth"));
      goto LABEL_19;
    }
    v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
    goto LABEL_11;
  }
  v4 = 0;
LABEL_28:
  if (objc_msgSend(v2, "hasTime"))
  {
    objc_msgSend(v2, "time");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "hasHourOfDay"))
    {
      if (!v4)
        v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v4, "setHour:", objc_msgSend(v6, "hourOfDay"));
    }
    if (objc_msgSend(v6, "hasMinuteOfHour"))
    {
      if (!v4)
        v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v4, "setMinute:", objc_msgSend(v6, "minuteOfHour"));
    }
    if (objc_msgSend(v6, "hasSecondOfMinute"))
    {
      if (!v4)
        v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v4, "setSecond:", objc_msgSend(v6, "secondOfMinute"));
    }
    if (objc_msgSend(v6, "hasMillisOfSecond"))
    {
      if (!v4)
        v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v4, "setNanosecond:", 1000000 * objc_msgSend(v6, "millisOfSecond"));
    }

  }
  if (objc_msgSend(v2, "hasCalendarSystem"))
  {
    v7 = objc_msgSend(v2, "calendarSystem") - 1;
    if (v7 <= 0xB && ((0xDF7u >> v7) & 1) != 0)
    {
      v8 = **((id **)&unk_1E228B7D0 + v7);
      if (v8)
      {
        v9 = v8;
        objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          if (!v4)
            v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
          objc_msgSend(v4, "setCalendar:", v10);
        }

      }
    }
  }
  if (objc_msgSend(v2, "hasTimeZoneID"))
  {
    v11 = (void *)MEMORY[0x1E0C99E80];
    objc_msgSend(v2, "timeZoneID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeZoneWithName:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      if (!v4)
        v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
      objc_msgSend(v4, "setTimeZone:", v13);
    }

  }
LABEL_61:

  return v4;
}

_INPBDateTime *INIntentSlotValueTransformToDateTime(void *a1)
{
  id v1;
  void *v2;
  _INPBLocalDate *v3;
  _INPBDateTime *v4;
  uint64_t v5;
  _INPBLocalTime *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "year") == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend(v2, "month") == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend(v2, "day") == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend(v2, "weekday") == 0x7FFFFFFFFFFFFFFFLL)
          {
            v3 = 0;
            goto LABEL_25;
          }
          goto LABEL_18;
        }
        goto LABEL_14;
      }
    }
    else
    {
      v3 = objc_alloc_init(_INPBLocalDate);
      -[_INPBLocalDate setYear:](v3, "setYear:", objc_msgSend(v2, "year"));
      if (objc_msgSend(v2, "month") == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_12;
      if (v3)
      {
LABEL_11:
        -[_INPBLocalDate setMonth:](v3, "setMonth:", objc_msgSend(v2, "month"));
LABEL_12:
        if (objc_msgSend(v2, "day") == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_16;
        if (v3)
        {
LABEL_15:
          -[_INPBLocalDate setDayOfMonth:](v3, "setDayOfMonth:", objc_msgSend(v2, "day"));
LABEL_16:
          if (objc_msgSend(v2, "weekday") == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_23;
          if (v3)
          {
LABEL_19:
            if (objc_msgSend(v2, "weekday") == 1)
              v5 = 7;
            else
              v5 = objc_msgSend(v2, "weekday") - 1;
            -[_INPBLocalDate setDayOfWeek:](v3, "setDayOfWeek:", v5);
LABEL_23:
            if (v3)
            {
              v4 = objc_alloc_init(_INPBDateTime);
              -[_INPBDateTime setDate:](v4, "setDate:", v3);
              goto LABEL_26;
            }
LABEL_25:
            v4 = 0;
LABEL_26:
            if (objc_msgSend(v2, "hour") == 0x7FFFFFFFFFFFFFFFLL)
            {
              if (objc_msgSend(v2, "minute") == 0x7FFFFFFFFFFFFFFFLL)
              {
                if (objc_msgSend(v2, "second") == 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (objc_msgSend(v2, "nanosecond") == 0x7FFFFFFFFFFFFFFFLL)
                    goto LABEL_47;
                  goto LABEL_41;
                }
                goto LABEL_37;
              }
            }
            else
            {
              v6 = objc_alloc_init(_INPBLocalTime);
              -[_INPBLocalTime setHourOfDay:](v6, "setHourOfDay:", objc_msgSend(v2, "hour"));
              if (objc_msgSend(v2, "minute") == 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_35;
              if (v6)
              {
LABEL_34:
                -[_INPBLocalTime setMinuteOfHour:](v6, "setMinuteOfHour:", objc_msgSend(v2, "minute"));
LABEL_35:
                if (objc_msgSend(v2, "second") == 0x7FFFFFFFFFFFFFFFLL)
                  goto LABEL_39;
                if (v6)
                {
LABEL_38:
                  -[_INPBLocalTime setSecondOfMinute:](v6, "setSecondOfMinute:", objc_msgSend(v2, "second"));
LABEL_39:
                  if (objc_msgSend(v2, "nanosecond") == 0x7FFFFFFFFFFFFFFFLL)
                    goto LABEL_43;
                  if (v6)
                  {
LABEL_42:
                    -[_INPBLocalTime setMillisOfSecond:](v6, "setMillisOfSecond:", objc_msgSend(v2, "nanosecond") / 0xF4240uLL);
LABEL_43:
                    if (v6)
                    {
                      if (!v4)
                        v4 = objc_alloc_init(_INPBDateTime);
                      -[_INPBDateTime setTime:](v4, "setTime:", v6);

                    }
LABEL_47:
                    objc_msgSend(v2, "timeZone");
                    v7 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v7)
                    {
                      if (!v4)
                        v4 = objc_alloc_init(_INPBDateTime);
                      objc_msgSend(v7, "name");
                      v8 = (void *)objc_claimAutoreleasedReturnValue();
                      -[_INPBDateTime setTimeZoneID:](v4, "setTimeZoneID:", v8);

                    }
                    objc_msgSend(v2, "calendar");
                    v9 = (void *)objc_claimAutoreleasedReturnValue();
                    v10 = v9;
                    if (!v9)
                      goto LABEL_62;
                    objc_msgSend(v9, "calendarIdentifier");
                    v11 = (void *)objc_claimAutoreleasedReturnValue();
                    if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996C8]) & 1) != 0)
                    {
                      v12 = 8;
                    }
                    else if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C99698]) & 1) != 0)
                    {
                      v12 = 1;
                    }
                    else
                    {
                      if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996A0]) & 1) == 0)
                      {
                        if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996A8]) & 1) == 0
                          && (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996B8]) & 1) == 0
                          && (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996B0]) & 1) == 0)
                        {
                          if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996D0]) & 1) != 0)
                          {
                            v12 = 3;
                            goto LABEL_58;
                          }
                          if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996D8]) & 1) == 0)
                          {
                            if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996E0]) & 1) != 0)
                            {
                              v12 = 5;
                              goto LABEL_58;
                            }
                            if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996E8]) & 1) != 0)
                            {
                              v12 = 7;
                              goto LABEL_58;
                            }
                            if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996F0]) & 1) == 0)
                            {
                              if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C99708]) & 1) != 0)
                              {
                                v12 = 9;
                                goto LABEL_58;
                              }
                              if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C99710]) & 1) != 0)
                              {
                                v12 = 11;
                                goto LABEL_58;
                              }
                              if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C99718]) & 1) != 0)
                              {
                                v12 = 12;
                                goto LABEL_58;
                              }
                              if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C996F8]) & 1) == 0
                                && objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C99700]))
                              {
                                v12 = 6;
                                goto LABEL_58;
                              }
                            }
                          }
                        }
LABEL_61:

LABEL_62:
                        goto LABEL_63;
                      }
                      v12 = 2;
                    }
LABEL_58:
                    if (!v4)
                      v4 = objc_alloc_init(_INPBDateTime);
                    -[_INPBDateTime setCalendarSystem:](v4, "setCalendarSystem:", v12);
                    goto LABEL_61;
                  }
LABEL_41:
                  v6 = objc_alloc_init(_INPBLocalTime);
                  goto LABEL_42;
                }
LABEL_37:
                v6 = objc_alloc_init(_INPBLocalTime);
                goto LABEL_38;
              }
            }
            v6 = objc_alloc_init(_INPBLocalTime);
            goto LABEL_34;
          }
LABEL_18:
          v3 = objc_alloc_init(_INPBLocalDate);
          goto LABEL_19;
        }
LABEL_14:
        v3 = objc_alloc_init(_INPBLocalDate);
        goto LABEL_15;
      }
    }
    v3 = objc_alloc_init(_INPBLocalDate);
    goto LABEL_11;
  }
  v4 = 0;
LABEL_63:

  return v4;
}

id INIntentSlotValueTransformFromDateTimes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDateTime(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDateTimes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDateTime(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

BOOL _INPBIntentTypePhrasesReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentType *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentType);
        if (!PBReaderPlaceMark() || (_INPBIntentTypeReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentType:", v17, 0, 0);
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (_INPBIntentType *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend(a1, "addIntentVocabularyExamples:", v17);
LABEL_25:

    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INSetAudioSourceInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228B830[a1];
}

uint64_t _INPBShareFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _INPBShareDestination *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_48;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_50;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_50:
        objc_msgSend(a1, "setConfirm:", v19 != 0);
        goto LABEL_60;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_54:
        objc_msgSend(a1, "setSuccess:", v26 != 0);
        goto LABEL_60;
      case 3u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v36 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
        else
          v36 = v32;
LABEL_59:
        objc_msgSend(a1, "setShareMode:", v36, v38, v39);
        goto LABEL_60;
      case 4u:
        v37 = objc_alloc_init(_INPBShareDestination);
        v38 = 0;
        v39 = 0;
        if (PBReaderPlaceMark() && _INPBShareDestinationReadFrom(v37, a2))
        {
          PBReaderRecallMark();
          if (v37)
            objc_msgSend(a1, "addRecipients:", v37, 0, 0);

LABEL_60:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_60;
    }
  }
}

uint64_t _INPBOpenFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  _INPBString *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_40;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_42:
        objc_msgSend(a1, "setSuccess:", v19 != 0);
        goto LABEL_43;
      case 2u:
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v24, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addEntities:", v24, 0, 0);
        goto LABEL_38;
      case 3u:
        v24 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v24, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumResults:", v24, 0, 0);
        goto LABEL_38;
      case 4u:
        v24 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v24, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setQuery:", v24, 0, 0);
LABEL_38:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

BOOL _INPBStartWorkoutIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

INRestaurantReservation *INIntentSlotValueTransformFromRestaurantReservation(INRestaurantReservation *a1)
{
  INRestaurantReservation *v1;
  void *v2;
  INRestaurantReservation *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  INRestaurantReservation *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a1)
  {
    v1 = a1;
    -[INRestaurantReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = [INRestaurantReservation alloc];
    objc_msgSend(v2, "itemReference");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v23);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "hasReservationStatus");
    v6 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v6 <= 3)
      v7 = (void *)(v6 + 1);
    else
      v7 = 0;
    if (!v5)
      v7 = 0;
    v18 = v7;
    objc_msgSend(v2, "reservationHolderName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v22);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRestaurantReservation reservationDuration](v1, "reservationDuration");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v17);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRestaurantReservation partySize](v1, "partySize");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromInteger(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRestaurantReservation restaurantLocation](v1, "restaurantLocation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromLocation(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = -[INRestaurantReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservationDuration:partySize:restaurantLocation:](v3, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservationDuration:partySize:restaurantLocation:", v25, v4, v21, v18, v16, v15, v14, v8, v10, v12);

    a1 = v19;
  }
  return a1;
}

_INPBRestaurantReservation *INIntentSlotValueTransformToRestaurantReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBRestaurantReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBRestaurantReservation);
    -[_INPBRestaurantReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "reservationDuration");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRestaurantReservation setReservationDuration:](v15, "setReservationDuration:", v17);

    objc_msgSend(v1, "partySize");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToInteger(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRestaurantReservation setPartySize:](v15, "setPartySize:", v19);

    objc_msgSend(v1, "restaurantLocation");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToLocation(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRestaurantReservation setRestaurantLocation:](v15, "setRestaurantLocation:", v21);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromRestaurantReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromRestaurantReservation(*(INRestaurantReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToRestaurantReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToRestaurantReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedRestaurantReservationFromRestaurantReservation(void *a1)
{
  return a1;
}

uint64_t _INPBDecimalNumberValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(_INPBValueMetadata);
          if (PBReaderPlaceMark() && (_INPBValueMetadataReadFrom(v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);

            continue;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_46;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_49;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_49:
          objc_msgSend(a1, "setMantissa:", v25);
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
          else
            v32 = v28;
LABEL_54:
          objc_msgSend(a1, "setExponent:", v32);
          continue;
        case 4u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v36 = *v3;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          break;
        v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
        *(_QWORD *)(a2 + v36) = v37 + 1;
        v35 |= (unint64_t)(v38 & 0x7F) << v33;
        if ((v38 & 0x80) == 0)
          goto LABEL_56;
        v33 += 7;
        v14 = v34++ >= 9;
        if (v14)
        {
          v35 = 0;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
      if (*(_BYTE *)(a2 + *v5))
        v35 = 0;
LABEL_58:
      objc_msgSend(a1, "setIsNegative:", v35 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INRideStatus *INIntentSlotValueTransformFromRideStatus(void *a1)
{
  id v1;
  INRideStatus *v2;
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  INRideStatus *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  INRideStatus *v16;
  void *v17;
  void *v18;
  void *v19;
  INPersonHandle *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  INPersonHandle *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  id v33;
  void *v34;
  INRideVehicle *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  INRideCompletionStatus *v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t k;
  void *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  id v87;
  void *v88;
  INRideStatus *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[128];
  _BYTE v103[128];
  _BYTE v104[128];
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(INRideStatus);
    objc_msgSend(v1, "rideIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setRideIdentifier:](v2, "setRideIdentifier:", v3);

    LODWORD(v3) = objc_msgSend(v1, "hasPhase");
    v4 = objc_msgSend(v1, "phase");
    if ((_DWORD)v3 && (v4 - 1) <= 6)
      v5 = qword_18C311510[v4 - 1];
    else
      v5 = 0;
    -[INRideStatus setPhase:](v2, "setPhase:", v5);
    v89 = v2;
    if (objc_msgSend(v1, "hasDriver"))
    {
      objc_msgSend(v1, "driver");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v6, "hasRating"))
      {
        objc_msgSend(v6, "rating");
        v85 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v85 = 0;
      }
      if (objc_msgSend(v6, "hasPhoneNumber"))
      {
        objc_msgSend(v6, "phoneNumber");
        v8 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v8 = 0;
      }
      objc_msgSend(v6, "person");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      v86 = v6;
      v83 = v9;
      v84 = (void *)v8;
      v82 = v1;
      if (v9)
      {
        objc_msgSend(v9, "valueMetadata");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        INPrivacyEntitlementValidateValueMetadata(v11);

        if ((objc_msgSend(v10, "hasFirstName") & 1) != 0 || objc_msgSend(v10, "hasLastName"))
        {
          v12 = objc_alloc_init(MEMORY[0x1E0CB3850]);
          if (objc_msgSend(v10, "hasFirstName"))
          {
            objc_msgSend(v10, "firstName");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setGivenName:", v13);

          }
          if (objc_msgSend(v10, "hasLastName"))
          {
            objc_msgSend(v10, "lastName");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setFamilyName:", v14);

          }
        }
        else
        {
          v12 = 0;
        }
        if (objc_msgSend(v10, "hasFullName"))
        {
          objc_msgSend(v10, "fullName");
          v22 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v22 = 0;
        }
        v81 = (void *)v22;
        if (objc_msgSend(v10, "hasContactHandle"))
        {
          objc_msgSend(v10, "contactHandle");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromContactHandle(v23);
          v20 = (INPersonHandle *)objc_claimAutoreleasedReturnValue();

        }
        else if (v8)
        {
          v20 = -[INPersonHandle initWithValue:type:]([INPersonHandle alloc], "initWithValue:type:", v8, 2);
        }
        else
        {
          v20 = 0;
        }
        if (objc_msgSend(v10, "hasImage"))
        {
          objc_msgSend(v10, "image");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromImageValue(v24);
          v80 = objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v80 = 0;
        }
        v25 = v20;
        if (objc_msgSend(v10, "hasValueMetadata"))
        {
          objc_msgSend(v10, "valueMetadata");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v26, "hasInput"))
          {
            objc_msgSend(v26, "input");
            v79 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v79 = 0;
          }
          if (objc_msgSend(v26, "hasUuid"))
          {
            objc_msgSend(v26, "uuid");
            v78 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v78 = 0;
          }

        }
        else
        {
          v78 = 0;
          v79 = 0;
        }
        if (objc_msgSend(v10, "aliasesCount"))
        {
          v87 = v12;
          v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v98 = 0u;
          v99 = 0u;
          v100 = 0u;
          v101 = 0u;
          objc_msgSend(v10, "aliases");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v98, v104, 16);
          if (v28)
          {
            v29 = v28;
            v30 = *(_QWORD *)v99;
            do
            {
              for (i = 0; i != v29; ++i)
              {
                if (*(_QWORD *)v99 != v30)
                  objc_enumerationMutation(v27);
                INIntentSlotValueTransformFromContactHandle(*(void **)(*((_QWORD *)&v98 + 1) + 8 * i));
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v15, "addObject:", v32);

              }
              v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v98, v104, 16);
            }
            while (v29);
          }

          v12 = v87;
          v16 = v89;
          v21 = (void *)v85;
          v10 = (void *)v80;
          v19 = v81;
          v20 = v25;
        }
        else
        {
          v15 = 0;
          v21 = (void *)v85;
          v10 = (void *)v80;
          v19 = v81;
          v16 = v2;
        }
        v18 = (void *)v78;
        v17 = (void *)v79;
      }
      else
      {
        v15 = 0;
        v16 = v2;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v12 = 0;
        v20 = 0;
        v21 = (void *)v85;
      }
      v88 = v12;
      v33 = -[INRideDriver _initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:rating:aliases:]([INRideDriver alloc], "_initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:rating:aliases:", v17, v20, v12, v19, v10, v18, v21, v15);
      -[INRideStatus setDriver:](v16, "setDriver:", v33);

      v2 = v16;
      v1 = v82;
    }
    if (objc_msgSend(v1, "hasVehicle"))
    {
      objc_msgSend(v1, "vehicle");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_alloc_init(INRideVehicle);
      objc_msgSend(v34, "location");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromGEOLocation(v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideVehicle setLocation:](v35, "setLocation:", v37);

      objc_msgSend(v34, "registrationPlate");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideVehicle setRegistrationPlate:](v35, "setRegistrationPlate:", v38);

      objc_msgSend(v34, "manufacturer");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideVehicle setManufacturer:](v35, "setManufacturer:", v39);

      objc_msgSend(v34, "model");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideVehicle setModel:](v35, "setModel:", v40);

      objc_msgSend(v34, "mapAnnotationImage");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromImageValue(v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideVehicle setMapAnnotationImage:](v35, "setMapAnnotationImage:", v42);

      -[INRideStatus setVehicle:](v2, "setVehicle:", v35);
    }
    objc_msgSend(v1, "estimatedPickupDate");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setEstimatedPickupDate:](v2, "setEstimatedPickupDate:", v44);

    objc_msgSend(v1, "estimatedDropOffDate");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setEstimatedDropOffDate:](v2, "setEstimatedDropOffDate:", v46);

    objc_msgSend(v1, "estimatedPickupEndDate");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setEstimatedPickupEndDate:](v2, "setEstimatedPickupEndDate:", v48);

    objc_msgSend(v1, "scheduledPickupTime");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRangeValue(v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setScheduledPickupTime:](v2, "setScheduledPickupTime:", v50);

    objc_msgSend(v1, "pickupLocation");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setPickupLocation:](v2, "setPickupLocation:", v52);

    objc_msgSend(v1, "waypoints");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v53, "count"));
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v55 = v53;
    v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v94, v103, 16);
    if (v56)
    {
      v57 = v56;
      v58 = *(_QWORD *)v95;
      do
      {
        for (j = 0; j != v57; ++j)
        {
          if (*(_QWORD *)v95 != v58)
            objc_enumerationMutation(v55);
          INIntentSlotValueTransformFromLocationValue(*(void **)(*((_QWORD *)&v94 + 1) + 8 * j));
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          if (v60)
            objc_msgSend(v54, "addObject:", v60);

        }
        v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v94, v103, 16);
      }
      while (v57);
    }

    -[INRideStatus setWaypoints:](v2, "setWaypoints:", v54);
    objc_msgSend(v1, "dropOffLocation");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setDropOffLocation:](v2, "setDropOffLocation:", v62);

    objc_msgSend(v1, "rideOption");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromRideOption(v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setRideOption:](v2, "setRideOption:", v64);

    objc_msgSend(v1, "userActivityForCancelingInApplication");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    INUserActivityDeserializeFromBackingStore(v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideStatus setUserActivityForCancelingInApplication:](v2, "setUserActivityForCancelingInApplication:", v66);

    if (objc_msgSend(v1, "hasCompletionStatus"))
    {
      v67 = [INRideCompletionStatus alloc];
      objc_msgSend(v1, "completionStatus");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = -[INRideCompletionStatus _initWithValue:](v67, "_initWithValue:", v68);
      -[INRideStatus setCompletionStatus:](v2, "setCompletionStatus:", v69);

    }
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    objc_msgSend(v1, "additionalActionItems");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v90, v102, 16);
    if (v71)
    {
      v72 = v71;
      v73 = 0;
      v74 = *(_QWORD *)v91;
      do
      {
        for (k = 0; k != v72; ++k)
        {
          if (*(_QWORD *)v91 != v74)
            objc_enumerationMutation(v70);
          INUserActivityDeserializeFromBackingStore(*(void **)(*((_QWORD *)&v90 + 1) + 8 * k));
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          if (v76)
          {
            if (!v73)
              v73 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(v73, "addObject:", v76);
          }

        }
        v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v90, v102, 16);
      }
      while (v72);
    }
    else
    {
      v73 = 0;
    }

    v7 = v89;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

_INPBRideStatus *INIntentSlotValueTransformToRideStatus(void *a1)
{
  id v1;
  _INPBRideStatus *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  _INPBRideDriver *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _INPBRideVehicle *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  void *v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBRideStatus);
    objc_msgSend(v1, "rideIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setRideIdentifier:](v2, "setRideIdentifier:", v3);

    v4 = objc_msgSend(v1, "phase");
    if (v4 <= 6 && ((0x7Eu >> v4) & 1) != 0)
    {
      v5 = objc_msgSend(v1, "phase") - 1;
      if (v5 > 5)
        v6 = 0x7FFFFFFFLL;
      else
        v6 = dword_18C3114F8[v5];
      -[_INPBRideStatus setPhase:](v2, "setPhase:", v6);
    }
    objc_msgSend(v1, "driver");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = objc_alloc_init(_INPBRideDriver);
      INIntentSlotValueTransformToContactValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideDriver setPerson:](v8, "setPerson:", v9);

      objc_msgSend(v7, "rating");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideDriver setRating:](v8, "setRating:", v10);

      objc_msgSend(v7, "phoneNumber");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideDriver setPhoneNumber:](v8, "setPhoneNumber:", v11);

      -[_INPBRideStatus setDriver:](v2, "setDriver:", v8);
    }
    objc_msgSend(v1, "vehicle");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = objc_alloc_init(_INPBRideVehicle);
      objc_msgSend(v12, "location");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToGEOLocation(v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideVehicle setLocation:](v13, "setLocation:", v15);

      objc_msgSend(v12, "registrationPlate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideVehicle setRegistrationPlate:](v13, "setRegistrationPlate:", v16);

      objc_msgSend(v12, "manufacturer");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideVehicle setManufacturer:](v13, "setManufacturer:", v17);

      objc_msgSend(v12, "model");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideVehicle setModel:](v13, "setModel:", v18);

      objc_msgSend(v12, "mapAnnotationImage");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToImageValue(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideVehicle setMapAnnotationImage:](v13, "setMapAnnotationImage:", v20);

      -[_INPBRideStatus setVehicle:](v2, "setVehicle:", v13);
    }
    objc_msgSend(v1, "estimatedPickupDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setEstimatedPickupDate:](v2, "setEstimatedPickupDate:", v22);

    objc_msgSend(v1, "estimatedDropOffDate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setEstimatedDropOffDate:](v2, "setEstimatedDropOffDate:", v24);

    objc_msgSend(v1, "estimatedPickupEndDate");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setEstimatedPickupEndDate:](v2, "setEstimatedPickupEndDate:", v26);

    objc_msgSend(v1, "scheduledPickupTime");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRangeValue(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setScheduledPickupTime:](v2, "setScheduledPickupTime:", v28);

    objc_msgSend(v1, "pickupLocation");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setPickupLocation:](v2, "setPickupLocation:", v30);

    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    objc_msgSend(v1, "waypoints");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v57;
      do
      {
        for (i = 0; i != v33; ++i)
        {
          if (*(_QWORD *)v57 != v34)
            objc_enumerationMutation(v31);
          INIntentSlotValueTransformToLocationValue(*(void **)(*((_QWORD *)&v56 + 1) + 8 * i));
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          if (v36)
            -[_INPBRideStatus addWaypoints:](v2, "addWaypoints:", v36);

        }
        v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
      }
      while (v33);
    }

    objc_msgSend(v1, "dropOffLocation");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setDropOffLocation:](v2, "setDropOffLocation:", v38);

    objc_msgSend(v1, "rideOption");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToRideOption(v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setRideOption:](v2, "setRideOption:", v40);

    objc_msgSend(v1, "userActivityForCancelingInApplication");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    INUserActivitySerializeToBackingStore(v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideStatus setUserActivityForCancelingInApplication:](v2, "setUserActivityForCancelingInApplication:", v42);

    objc_msgSend(v1, "completionStatus");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = (void *)objc_msgSend(v43, "_newValue");
    -[_INPBRideStatus setCompletionStatus:](v2, "setCompletionStatus:", v44);

    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    objc_msgSend(v1, "additionalActionActivities", 0);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
    if (v46)
    {
      v47 = v46;
      v48 = *(_QWORD *)v53;
      do
      {
        for (j = 0; j != v47; ++j)
        {
          if (*(_QWORD *)v53 != v48)
            objc_enumerationMutation(v45);
          INUserActivitySerializeToBackingStore(*(void **)(*((_QWORD *)&v52 + 1) + 8 * j));
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          if (v50)
            -[_INPBRideStatus addAdditionalActionItems:](v2, "addAdditionalActionItems:", v50);

        }
        v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
      }
      while (v47);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t _INPBSetProfileInCarIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_40;
      case 2u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProfileNumber:", v17, 0, 0);
        goto LABEL_40;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProfileName:", v17, 0, 0);
        goto LABEL_40;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_44:
        objc_msgSend(a1, "setDefaultProfile:", v21 != 0);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_40:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

uint64_t _INPBContactHandleReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setValue:", v17);
          goto LABEL_30;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (2)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (v14)
                {
                  v25 = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_56:
          objc_msgSend(a1, "setType:", v25);
          continue;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setLabel:", v17);
LABEL_30:

          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
          else
            v32 = v28;
LABEL_61:
          objc_msgSend(a1, "setEmergencyType:", v32);
          continue;
        case 5u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_65:
          objc_msgSend(a1, "setSuggested:", v35 != 0);
          continue;
        case 6u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_67;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v45 = 0;
          goto LABEL_70;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
      v45 = *(_BYTE *)(a2 + *v5) ? 0 : v41;
LABEL_70:
      objc_msgSend(a1, "setFaceTimeType:", v45);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBStringReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBStringValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBStringValue);
        if (!PBReaderPlaceMark() || !_INPBStringValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBStartVideoCallIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_50;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(_INPBDialingContact);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v17, a2))
          goto LABEL_50;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTargetContacts:", v17, 0, 0);
        goto LABEL_42;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_47:
        objc_msgSend(a1, "setAudioRoute:", v25, v26, v27);
        goto LABEL_48;
      case 4u:
        v17 = objc_alloc_init(_INPBDialingContact);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBDialingContactReadFrom(v17, a2))
          goto LABEL_50;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContact:", v17, 0, 0);
        goto LABEL_42;
      case 5u:
        v17 = objc_alloc_init(_INPBStartCallRequestMetadata);
        if (PBReaderPlaceMark() && (_INPBStartCallRequestMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCallRequestMetadata:", v17, 0, 0);
LABEL_42:

LABEL_48:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_50:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
    }
  }
}

BOOL _INPBWellnessMetadataValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBString *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPbStringValue:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPbDoubleValue:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBInteger);
    if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setOrdinalValue:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBContactValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_100;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_64;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFirstName:", v17);
        goto LABEL_64;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLastName:", v17);
        goto LABEL_64;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFullName:", v17);
        goto LABEL_64;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setHandle:", v17);
        goto LABEL_64;
      case 6u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_100;
        PBReaderRecallMark();
        objc_msgSend(a1, "setImage:", v17, 0, 0);
        goto LABEL_64;
      case 7u:
        v17 = objc_alloc_init(_INPBContactHandle);
        if (!PBReaderPlaceMark() || (_INPBContactHandleReadFrom(v17, a2) & 1) == 0)
          goto LABEL_100;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactHandle:", v17, 0, 0);
        goto LABEL_64;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCustomIdentifier:", v17);
        goto LABEL_64;
      case 9u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRelationship:", v17);
        goto LABEL_64;
      case 0xAu:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_84:
        objc_msgSend(a1, "setIsMe:", v21 != 0);
        goto LABEL_65;
      case 0xBu:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_89:
        objc_msgSend(a1, "setSuggestionType:", v31, v45, v46);
        goto LABEL_65;
      case 0xCu:
        v17 = objc_alloc_init(_INPBContactHandle);
        v45 = 0;
        v46 = 0;
        if (PBReaderPlaceMark() && _INPBContactHandleReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addAliases:", v17, 0, 0);
LABEL_64:

LABEL_65:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_100:

        return 0;
      case 0xDu:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNickName:", v17);
        goto LABEL_64;
      case 0xEu:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNamePrefix:", v17);
        goto LABEL_64;
      case 0xFu:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMiddleName:", v17);
        goto LABEL_64;
      case 0x10u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNameSuffix:", v17);
        goto LABEL_64;
      case 0x11u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticNamePrefix:", v17);
        goto LABEL_64;
      case 0x12u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticFirstName:", v17);
        goto LABEL_64;
      case 0x13u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticMiddleName:", v17);
        goto LABEL_64;
      case 0x14u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticLastName:", v17);
        goto LABEL_64;
      case 0x15u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneticNameSuffix:", v17);
        goto LABEL_64;
      case 0x16u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhonemeData:", v17);
        goto LABEL_64;
      case 0x17u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_93:
        objc_msgSend(a1, "setIsContactSuggestion:", v34 != 0);
        goto LABEL_65;
      case 0x18u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
        else
          v44 = v40;
LABEL_98:
        objc_msgSend(a1, "setSearchProvider:", v44, v45, v46);
        goto LABEL_65;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_65;
    }
  }
}

BOOL _INPBRideVehicleReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBImageValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (_INPBImageValue *)objc_alloc_init(MEMORY[0x1E0D27168]);
        if (!PBReaderPlaceMark() || (GEOLocationReadAllFrom() & 1) == 0)
          goto LABEL_34;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v17, 0, 0);
        goto LABEL_30;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRegistrationPlate:", v17);
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setManufacturer:", v17);
        goto LABEL_30;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBImageValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModel:", v17);
        goto LABEL_30;
      case 5u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && (_INPBImageValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMapAnnotationImage:", v17, 0, 0);
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_34:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_31;
    }
  }
}

uint64_t _INPBSetTaskAttributeIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBTask *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_35;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_47;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
          PBRepeatedInt32Add();
        }
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBTask);
        if (!PBReaderPlaceMark() || (_INPBTaskReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setModifiedTask:", v18, 0, 0);

      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__24711(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24712(uint64_t a1)
{

}

void sub_18BFB6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24972(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24973(uint64_t a1)
{

}

uint64_t _INPBSearchForMessagesIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBIntentMetadata *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_67;
      case 2u:
        v18 = objc_alloc_init(_INPBContactList);
        if (!PBReaderPlaceMark() || !_INPBContactListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecipient:", v18, 0, 0);
        goto LABEL_67;
      case 3u:
        v18 = objc_alloc_init(_INPBContactList);
        if (!PBReaderPlaceMark() || !_INPBContactListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSender:", v18, 0, 0);
        goto LABEL_67;
      case 4u:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContent:", v18, 0, 0);
        goto LABEL_67;
      case 5u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_45;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_79;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_79:
          PBRepeatedInt32Add();
        }
        goto LABEL_68;
      case 6u:
        v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTimeRange:", v18, 0, 0);
        goto LABEL_67;
      case 7u:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIdentifier:", v18, 0, 0);
        goto LABEL_67;
      case 8u:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNotificationIdentifier:", v18, 0, 0);
        goto LABEL_67;
      case 9u:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSearchTerm:", v18, 0, 0);
        goto LABEL_67;
      case 0xAu:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupName:", v18, 0, 0);
        goto LABEL_67;
      case 0xBu:
        v18 = objc_alloc_init(_INPBDataStringList);
        if (!PBReaderPlaceMark() || !_INPBDataStringListReadFrom(v18, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeakableGroupName:", v18, 0, 0);
        goto LABEL_67;
      case 0xCu:
        v18 = objc_alloc_init(_INPBStringList);
        if (PBReaderPlaceMark() && _INPBStringListReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setConversationIdentifier:", v18, 0, 0);
LABEL_67:

LABEL_68:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_82:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_68;
    }
  }
}

uint64_t _INPBTextNoteContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setText:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBTemperatureValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _INPBValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 2)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setMagnitude:", v31);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setUnit:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _INVCIntentDefinitionManagerClass()
{
  void *v0;
  id v1;
  id v2;
  NSObject *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 buf;
  Class (*v10)(uint64_t);
  void *v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2050000000;
  v0 = (void *)getVCIntentDefinitionManagerClass_softClass;
  v8 = getVCIntentDefinitionManagerClass_softClass;
  if (!getVCIntentDefinitionManagerClass_softClass)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v10 = __getVCIntentDefinitionManagerClass_block_invoke;
    v11 = &unk_1E22953C0;
    v12 = &v5;
    __getVCIntentDefinitionManagerClass_block_invoke((uint64_t)&buf);
    v0 = (void *)v6[3];
  }
  v1 = v0;
  _Block_object_dispose(&v5, 8);
  if ((objc_msgSend(v1, "conformsToProtocol:", &unk_1EE0B8380, v5) & 1) != 0)
  {
    v2 = v1;
  }
  else
  {
    v3 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "_INVCIntentDefinitionManagerClass";
      _os_log_fault_impl(&dword_18BEBC000, v3, OS_LOG_TYPE_FAULT, "%s VCIntentDefinitionManager doesn't conform to the INVCIntentDefinitionManager protocol.", (uint8_t *)&buf, 0xCu);
    }
    v2 = 0;
  }

  return v2;
}

void sub_18BFBA790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getVCIntentDefinitionManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!VoiceShortcutsLibraryCore_frameworkLibrary)
  {
    VoiceShortcutsLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!VoiceShortcutsLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VCIntentDefinitionManager");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getVCIntentDefinitionManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id _INVCVoiceShortcutErrorDomain()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getVCVoiceShortcutsErrorDomainSymbolLoc_ptr;
  v7 = getVCVoiceShortcutsErrorDomainSymbolLoc_ptr;
  if (!getVCVoiceShortcutsErrorDomainSymbolLoc_ptr)
  {
    v1 = (void *)VoiceShortcutClientLibrary();
    v0 = (id *)dlsym(v1, "VCVoiceShortcutsErrorDomain");
    v5[3] = (uint64_t)v0;
    getVCVoiceShortcutsErrorDomainSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

id _INItemProviderMetadataFromData(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE buf[24];
  void *v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2050000000;
  v2 = (void *)getWFItemProviderRequestMetadataClass_softClass;
  v13 = getWFItemProviderRequestMetadataClass_softClass;
  if (!getWFItemProviderRequestMetadataClass_softClass)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __getWFItemProviderRequestMetadataClass_block_invoke;
    v15 = &unk_1E22953C0;
    v16 = &v10;
    __getWFItemProviderRequestMetadataClass_block_invoke((uint64_t)buf);
    v2 = (void *)v11[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v10, 8);
  v9 = 0;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", v3, v1, &v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v9;
  if (v4)
  {
    v6 = v4;
  }
  else
  {
    v7 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_INItemProviderMetadataFromData";
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v1;
      *(_WORD *)&buf[22] = 2112;
      v15 = v5;
      _os_log_error_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_ERROR, "%s Could not unarchive data %@ with error: %@", buf, 0x20u);
    }
  }

  return v4;
}

void sub_18BFBAAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWFItemProviderRequestMetadataClass_block_invoke(uint64_t a1)
{
  Class result;
  _INPBSetDefrosterSettingsInCarIntentResponse *v3;
  SEL v4;
  id v5;

  VoiceShortcutClientLibrary();
  result = objc_getClass("WFItemProviderRequestMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWFItemProviderRequestMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (_INPBSetDefrosterSettingsInCarIntentResponse *)abort_report_np();
    return (Class)-[_INPBSetDefrosterSettingsInCarIntentResponse readFrom:](v3, v4, v5);
  }
  return result;
}

BOOL _INPBSetDefrosterSettingsInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBControlHomeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_38;
      case 4u:
        v17 = objc_alloc_init(_INPBHomeContent);
        if (!PBReaderPlaceMark() || !_INPBHomeContentReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContents:", v17, 0, 0);
        goto LABEL_38;
      case 5u:
        v17 = objc_alloc_init(_INPBHomeUserTask);
        if (!PBReaderPlaceMark() || (_INPBHomeUserTaskReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserTask:", v17, 0, 0);
        goto LABEL_38;
      case 6u:
        v17 = objc_alloc_init(_INPBHomeFilter);
        if (!PBReaderPlaceMark() || !_INPBHomeFilterReadFrom(v17, a2))
          goto LABEL_42;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addFilters:", v17, 0, 0);
        goto LABEL_38;
      case 7u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTime:", v17, 0, 0);
LABEL_38:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

BOOL _INPBIntentSupportReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentType *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentType);
        if (!PBReaderPlaceMark() || !_INPBIntentTypeReadFrom(v18, a2))
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addIntentsSupported:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBIntentType);
        if (!PBReaderPlaceMark() || !_INPBIntentTypeReadFrom(v18, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addIntentsRestrictedWhileLocked:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBIntentType *)objc_claimAutoreleasedReturnValue();
    if (v18)
      objc_msgSend(a1, "addSupportedMediaCategories:", v18);
LABEL_31:

    goto LABEL_33;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBGetRideStatusIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INBalanceTypeHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INBalanceTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INBalanceTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INBalanceTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E228BA50[a1 - 1];
}

uint64_t INBalanceTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("money")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("points")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("miles")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INBalanceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("miles");
      break;
    case 2:
      v4 = CFSTR("points");
      break;
    case 1:
      v4 = CFSTR("money");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBImageNoteContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBImageValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setImage:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INRidePhaseHasBackingType(unint64_t a1)
{
  return (a1 < 7) & (0x7Eu >> a1);
}

uint64_t INRidePhaseGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return 0x7FFFFFFFLL;
  else
    return dword_18C3114F8[a1 - 1];
}

uint64_t INRidePhaseGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 6)
    return qword_18C311510[a2 - 1];
  else
    return 0;
}

const __CFString *INRidePhaseGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E228BA68[a1 - 1];
}

uint64_t INRidePhaseWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("received")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("confirmed")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ongoing")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("completed")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("approachingPickup")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("pickup")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRidePhaseGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("received");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("confirmed");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("ongoing");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("completed");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("approaching pickup");
      goto LABEL_9;
    case 6:
      v4 = CFSTR("pickup");
LABEL_9:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBDeleteTimerIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setDeleteMultiple:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentResponseObserverXPCInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0B84D0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_intentResponseDidUpdate_withSerializedCacheItems_, 0, 0);
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_intentResponseDidUpdate_withSerializedCacheItems_, 1, 0);

  return v0;
}

__CFString *INSetProfileInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228BAD8[a1];
}

BOOL _INPBPlayVoicemailIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCallRecordIdentifier:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18BFC3944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18BFC3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 64), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27395(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27396(uint64_t a1)
{

}

Class __getAFPreferencesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!AssistantServicesLibraryCore_frameworkLibrary)
  {
    AssistantServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!AssistantServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("AFPreferences");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getAFPreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _INPBModifyRelationshipReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _INPBString *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetRelationship:", v23, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        objc_msgSend(a1, "setIsRemoval:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBStartPhotoPlaybackIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBIntentMetadata *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_87;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_65;
      case 2u:
        v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_87;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateCreated:", v18, 0, 0);
        goto LABEL_65;
      case 3u:
        v18 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0)
          goto LABEL_87;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocationCreated:", v18, 0, 0);
        goto LABEL_65;
      case 5u:
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_87;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlbumName:", v18, 0, 0);
        goto LABEL_65;
      case 7u:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_87;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSearchTerm:", v18, 0, 0);
        goto LABEL_65;
      case 8u:
        if (v16 != 2)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
              goto LABEL_83;
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_84;
          }
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_48;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
          PBRepeatedInt32Add();
        }
        goto LABEL_68;
      case 9u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = *v3;
              v30 = *(_QWORD *)(a2 + v29);
              if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
                break;
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_61;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_61:
            PBRepeatedInt32Add();
          }
LABEL_68:
          PBReaderRecallMark();
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (1)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
              break;
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_84;
          }
LABEL_83:
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
          PBRepeatedInt32Add();
        }
        goto LABEL_66;
      case 0xAu:
        v18 = objc_alloc_init(_INPBContactList);
        if (PBReaderPlaceMark() && _INPBContactListReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPeopleInPhoto:", v18, 0, 0);
LABEL_65:

LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_87:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_66;
    }
  }
}

INFlightReservation *INIntentSlotValueTransformFromFlightReservation(INFlightReservation *a1)
{
  INFlightReservation *v1;
  void *v2;
  INFlightReservation *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  id v16;
  INFlightReservation *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    -[INFlightReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = [INFlightReservation alloc];
    objc_msgSend(v2, "itemReference");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v21);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "hasReservationStatus");
    v6 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v6 <= 3)
      v7 = (void *)(v6 + 1);
    else
      v7 = 0;
    if (!v5)
      v7 = 0;
    v16 = v7;
    objc_msgSend(v2, "reservationHolderName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INFlightReservation reservedSeat](v1, "reservedSeat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSeat(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INFlightReservation flight](v1, "flight");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromFlight(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INFlightReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:flight:](v3, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:flight:", v23, v4, v19, v16, v15, v14, v8, v10, v12);

    a1 = v17;
  }
  return a1;
}

_INPBFlightReservation *INIntentSlotValueTransformToFlightReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBFlightReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBFlightReservation);
    -[_INPBFlightReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "reservedSeat");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToSeat(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlightReservation setReservedSeat:](v15, "setReservedSeat:", v17);

    objc_msgSend(v1, "flight");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToFlight(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBFlightReservation setFlight:](v15, "setFlight:", v19);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromFlightReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromFlightReservation(*(INFlightReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToFlightReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToFlightReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedFlightReservationFromFlightReservation(void *a1)
{
  return a1;
}

uint64_t INWellnessObjectTypeHasBackingType(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t INWellnessObjectTypeGetBackingType(unint64_t result)
{
  if (result >= 0x4B)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INWellnessObjectTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 0x49)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INWellnessObjectTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x49)
    return CFSTR("unknown");
  else
    return off_1E228BC08[a1 - 1];
}

uint64_t INWellnessObjectTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("basalBodyTemperature")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("biotin")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloodAlcoholContent")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloodGlucose")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloodPressure")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloodPressureDiastolic")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloodPressureSystolic")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloodType")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bodyFatPercentage")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bodyMassIndex")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bodyTemperature")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("caffeine")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("calcium")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbohydrates")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("chloride")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("chromium")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("copper")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dietaryCholesterol")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dietarySugar")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("electrodermalActivity")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("energyConsumed")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fatMonounSaturated")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fatPolyunSaturated")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fatSaturated")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fatTotal")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fiber")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("folate")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("forcedExpiratoryVolume")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("forcedVitalCapacity")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heartRate")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heartRateVariabilitySdnn")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("height")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inhalerUsage")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("insulinDelivery")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iodine")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iron")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("leanBodyMass")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("magnesium")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("manganese")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("molybdenum")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("niacin")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("numberOfTimesFallen")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("oxygenSaturation")) & 1) != 0)
  {
    v2 = 43;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pantothenicAcid")) & 1) != 0)
  {
    v2 = 44;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("peakExpiratoryFlowRate")) & 1) != 0)
  {
    v2 = 45;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("peripheralPerfusionIndex")) & 1) != 0)
  {
    v2 = 46;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("phosphorus")) & 1) != 0)
  {
    v2 = 47;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("potassium")) & 1) != 0)
  {
    v2 = 48;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("protein")) & 1) != 0)
  {
    v2 = 49;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("respiratoryRate")) & 1) != 0)
  {
    v2 = 50;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("restingheartRate")) & 1) != 0)
  {
    v2 = 51;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("riboflavin")) & 1) != 0)
  {
    v2 = 52;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("selenium")) & 1) != 0)
  {
    v2 = 53;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sodium")) & 1) != 0)
  {
    v2 = 54;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("thiamin")) & 1) != 0)
  {
    v2 = 55;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("uvIndex")) & 1) != 0)
  {
    v2 = 56;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminA")) & 1) != 0)
  {
    v2 = 57;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminB12")) & 1) != 0)
  {
    v2 = 58;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminB6")) & 1) != 0)
  {
    v2 = 59;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminC")) & 1) != 0)
  {
    v2 = 60;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminD")) & 1) != 0)
  {
    v2 = 61;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminE")) & 1) != 0)
  {
    v2 = 62;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vitaminK")) & 1) != 0)
  {
    v2 = 63;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("waistCircumference")) & 1) != 0)
  {
    v2 = 64;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("walkingHeartRateAverage")) & 1) != 0)
  {
    v2 = 65;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("water")) & 1) != 0)
  {
    v2 = 66;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("weight")) & 1) != 0)
  {
    v2 = 67;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("zinc")) & 1) != 0)
  {
    v2 = 68;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cervicalMucusQuality")) & 1) != 0)
  {
    v2 = 69;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ovulationTestResult")) & 1) != 0)
  {
    v2 = 70;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("menstrualFlow")) & 1) != 0)
  {
    v2 = 71;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("intermenstrualBleeding")) & 1) != 0)
  {
    v2 = 72;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sexualActivity")) & 1) != 0)
  {
    v2 = 73;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("mindfulSession")))
  {
    v2 = 74;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessObjectTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("basal body temperature");
      goto LABEL_77;
    case 2:
      v4 = CFSTR("biotin");
      goto LABEL_77;
    case 3:
      v4 = CFSTR("blood alcohol content");
      goto LABEL_77;
    case 4:
      v4 = CFSTR("blood glucose");
      goto LABEL_77;
    case 5:
      v4 = CFSTR("blood pressure");
      goto LABEL_77;
    case 6:
      v4 = CFSTR("blood pressure diastolic");
      goto LABEL_77;
    case 7:
      v4 = CFSTR("blood pressure systolic");
      goto LABEL_77;
    case 8:
      v4 = CFSTR("blood type");
      goto LABEL_77;
    case 9:
      v4 = CFSTR("body fat percentage");
      goto LABEL_77;
    case 10:
      v4 = CFSTR("body mass index");
      goto LABEL_77;
    case 11:
      v4 = CFSTR("body temperature");
      goto LABEL_77;
    case 12:
      v4 = CFSTR("caffeine");
      goto LABEL_77;
    case 13:
      v4 = CFSTR("calcium");
      goto LABEL_77;
    case 14:
      v4 = CFSTR("carbohydrates");
      goto LABEL_77;
    case 15:
      v4 = CFSTR("chloride");
      goto LABEL_77;
    case 16:
      v4 = CFSTR("chromium");
      goto LABEL_77;
    case 17:
      v4 = CFSTR("copper");
      goto LABEL_77;
    case 18:
      v4 = CFSTR("dietary cholesterol");
      goto LABEL_77;
    case 19:
      v4 = CFSTR("dietary sugar");
      goto LABEL_77;
    case 20:
      v4 = CFSTR("electrodermal activity");
      goto LABEL_77;
    case 21:
      v4 = CFSTR("energy consumed");
      goto LABEL_77;
    case 22:
      v4 = CFSTR("fat monoun saturated");
      goto LABEL_77;
    case 23:
      v4 = CFSTR("fat polyun saturated");
      goto LABEL_77;
    case 24:
      v4 = CFSTR("fat saturated");
      goto LABEL_77;
    case 25:
      v4 = CFSTR("fat total");
      goto LABEL_77;
    case 26:
      v4 = CFSTR("fiber");
      goto LABEL_77;
    case 27:
      v4 = CFSTR("folate");
      goto LABEL_77;
    case 28:
      v4 = CFSTR("forced expiratory volume");
      goto LABEL_77;
    case 29:
      v4 = CFSTR("forced vital capacity");
      goto LABEL_77;
    case 30:
      v4 = CFSTR("heart rate");
      goto LABEL_77;
    case 31:
      v4 = CFSTR("heart rate variability sdnn");
      goto LABEL_77;
    case 32:
      v4 = CFSTR("height");
      goto LABEL_77;
    case 33:
      v4 = CFSTR("inhaler usage");
      goto LABEL_77;
    case 34:
      v4 = CFSTR("insulin delivery");
      goto LABEL_77;
    case 35:
      v4 = CFSTR("iodine");
      goto LABEL_77;
    case 36:
      v4 = CFSTR("iron");
      goto LABEL_77;
    case 37:
      v4 = CFSTR("lean body mass");
      goto LABEL_77;
    case 38:
      v4 = CFSTR("magnesium");
      goto LABEL_77;
    case 39:
      v4 = CFSTR("manganese");
      goto LABEL_77;
    case 40:
      v4 = CFSTR("molybdenum");
      goto LABEL_77;
    case 41:
      v4 = CFSTR("niacin");
      goto LABEL_77;
    case 42:
      v4 = CFSTR("number of times fallen");
      goto LABEL_77;
    case 43:
      v4 = CFSTR("oxygen saturation");
      goto LABEL_77;
    case 44:
      v4 = CFSTR("pantothenic acid");
      goto LABEL_77;
    case 45:
      v4 = CFSTR("peak expiratory flow rate");
      goto LABEL_77;
    case 46:
      v4 = CFSTR("peripheral perfusion index");
      goto LABEL_77;
    case 47:
      v4 = CFSTR("phosphorus");
      goto LABEL_77;
    case 48:
      v4 = CFSTR("potassium");
      goto LABEL_77;
    case 49:
      v4 = CFSTR("protein");
      goto LABEL_77;
    case 50:
      v4 = CFSTR("respiratory rate");
      goto LABEL_77;
    case 51:
      v4 = CFSTR("restingheart rate");
      goto LABEL_77;
    case 52:
      v4 = CFSTR("riboflavin");
      goto LABEL_77;
    case 53:
      v4 = CFSTR("selenium");
      goto LABEL_77;
    case 54:
      v4 = CFSTR("sodium");
      goto LABEL_77;
    case 55:
      v4 = CFSTR("thiamin");
      goto LABEL_77;
    case 56:
      v4 = CFSTR("uv index");
      goto LABEL_77;
    case 57:
      v4 = CFSTR("vitamin a");
      goto LABEL_77;
    case 58:
      v4 = CFSTR("vitamin b12");
      goto LABEL_77;
    case 59:
      v4 = CFSTR("vitamin b6");
      goto LABEL_77;
    case 60:
      v4 = CFSTR("vitamin c");
      goto LABEL_77;
    case 61:
      v4 = CFSTR("vitamin d");
      goto LABEL_77;
    case 62:
      v4 = CFSTR("vitamin e");
      goto LABEL_77;
    case 63:
      v4 = CFSTR("vitamin k");
      goto LABEL_77;
    case 64:
      v4 = CFSTR("waist circumference");
      goto LABEL_77;
    case 65:
      v4 = CFSTR("walking heart rate average");
      goto LABEL_77;
    case 66:
      v4 = CFSTR("water");
      goto LABEL_77;
    case 67:
      v4 = CFSTR("weight");
      goto LABEL_77;
    case 68:
      v4 = CFSTR("zinc");
      goto LABEL_77;
    case 69:
      v4 = CFSTR("cervical mucus quality");
      goto LABEL_77;
    case 70:
      v4 = CFSTR("ovulation test result");
      goto LABEL_77;
    case 71:
      v4 = CFSTR("menstrual flow");
      goto LABEL_77;
    case 72:
      v4 = CFSTR("intermenstrual bleeding");
      goto LABEL_77;
    case 73:
      v4 = CFSTR("sexual activity");
      goto LABEL_77;
    case 74:
      v4 = CFSTR("mindful session");
LABEL_77:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INSpatialEventTrigger *INIntentSlotValueTransformFromSpatialEventTrigger(void *a1)
{
  id v1;
  INSpatialEventTrigger *v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  INSpatialEventTrigger *v14;

  if (a1)
  {
    v1 = a1;
    v2 = [INSpatialEventTrigger alloc];
    objc_msgSend(v1, "location");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "hasEvent");
    v6 = objc_msgSend(v1, "event");
    v7 = v6 == 10;
    if (v6 == 20)
      v7 = 2;
    if (v5)
      v8 = v7;
    else
      v8 = 0;
    objc_msgSend(v1, "suggestedValues");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValues(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v1, "hasMobileSpace");
    v12 = objc_msgSend(v1, "mobileSpace");

    if (v12 == 1)
      v13 = v11;
    else
      v13 = 0;
    v14 = -[INSpatialEventTrigger initWithPlacemark:event:suggestedValues:mobileSpace:](v2, "initWithPlacemark:event:suggestedValues:mobileSpace:", v4, v8, v10, v13);

  }
  else
  {
    v14 = 0;
  }
  return v14;
}

_INPBSpatialEventTrigger *INIntentSlotValueTransformToSpatialEventTrigger(void *a1)
{
  id v1;
  _INPBSpatialEventTrigger *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSpatialEventTrigger);
    objc_msgSend(v1, "placemark");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSpatialEventTrigger setLocation:](v2, "setLocation:", v4);

    v5 = objc_msgSend(v1, "event");
    if (v5 >= 3)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = (10 * v5);
    -[_INPBSpatialEventTrigger setEvent:](v2, "setEvent:", v6);
    objc_msgSend(v1, "suggestedValues");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValues(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBSpatialEventTrigger setSuggestedValues:](v2, "setSuggestedValues:", v8);

    v9 = objc_msgSend(v1, "mobileSpace");
    if (v9 == 1)
      v10 = 1;
    else
      v10 = 0x7FFFFFFF;
    if (v9)
      v11 = v10;
    else
      v11 = 0;
    -[_INPBSpatialEventTrigger setMobileSpace:](v2, "setMobileSpace:", v11);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromSpatialEventTriggers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromSpatialEventTrigger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToSpatialEventTriggers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToSpatialEventTrigger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedSpatialEventTriggerFromSpatialEventTrigger(void *a1)
{
  return a1;
}

id INIntentSlotValueTransformFromVolume(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromVolumeValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromVolumeValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_36:
    v7 = 0;
    goto LABEL_37;
  }
  objc_msgSend(v1, "valueMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  INPrivacyEntitlementValidateValueMetadata(v3);

  if (!objc_msgSend(v2, "hasUnit"))
    goto LABEL_34;
  switch(objc_msgSend(v2, "unit"))
  {
    case 1u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "megaliters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 2u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "kiloliters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 3u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "liters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 4u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "deciliters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 5u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "centiliters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 6u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "milliliters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 7u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicKilometers");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 8u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicDecimeters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 9u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicMillimeters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xAu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicInches");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xBu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicFeet");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xCu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicYards");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xDu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicMiles");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xEu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "acreFeet");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xFu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "bushels");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x10u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "teaspoons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x11u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "tablespoons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x12u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "fluidOunces");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x13u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cups");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x14u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "pints");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x15u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "quarts");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x16u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "gallons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x17u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "imperialTeaspoons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x18u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "imperialQuarts");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x19u:
      objc_msgSend(MEMORY[0x1E0CB3B08], "imperialGallons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x1Au:
      objc_msgSend(MEMORY[0x1E0CB3B08], "metricCups");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x1Bu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicCentimeters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x1Cu:
      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicMeters");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      goto LABEL_34;
  }
  v5 = (void *)v4;
  if (!v4)
  {
LABEL_34:
    v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "INIntentSlotValueTransformFromVolumeValue";
      _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s _INPBVolumeValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v10, 0xCu);
    }
    goto LABEL_36;
  }
  v6 = objc_alloc(MEMORY[0x1E0CB3758]);
  objc_msgSend(v2, "magnitude");
  v7 = (void *)objc_msgSend(v6, "initWithDoubleValue:unit:", v5);

LABEL_37:
  return v7;
}

_INPBVolume *INIntentSlotValueTransformToVolume(void *a1)
{
  void *v1;
  _INPBVolume *v2;

  INIntentSlotValueTransformToVolumeValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBVolume);
    -[_INPBVolume addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBVolumeValue *INIntentSlotValueTransformToVolumeValue(void *a1)
{
  id v1;
  _INPBVolumeValue *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  int v62;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBVolumeValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    v5 = v4;

    -[_INPBVolumeValue setMagnitude:](v2, "setMagnitude:", v5);
    objc_msgSend(MEMORY[0x1E0CB3B08], "megaliters");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v3, "isEqual:", v6);

    if ((v7 & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3B08], "kiloliters");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v3, "isEqual:", v9);

      if ((v10 & 1) != 0)
      {
        v8 = 2;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3B08], "liters");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v3, "isEqual:", v11);

        if ((v12 & 1) != 0)
        {
          v8 = 3;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3B08], "deciliters");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v3, "isEqual:", v13);

          if ((v14 & 1) != 0)
          {
            v8 = 4;
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3B08], "centiliters");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v3, "isEqual:", v15);

            if ((v16 & 1) != 0)
            {
              v8 = 5;
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3B08], "milliliters");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v3, "isEqual:", v17);

              if ((v18 & 1) != 0)
              {
                v8 = 6;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB3B08], "cubicCentimeters");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                v20 = objc_msgSend(v3, "isEqual:", v19);

                if ((v20 & 1) != 0)
                {
                  v8 = 27;
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB3B08], "cubicMeters");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v3, "isEqual:", v21);

                  if ((v22 & 1) != 0)
                  {
                    v8 = 28;
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB3B08], "cubicKilometers");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    v24 = objc_msgSend(v3, "isEqual:", v23);

                    if ((v24 & 1) != 0)
                    {
                      v8 = 7;
                    }
                    else
                    {
                      objc_msgSend(MEMORY[0x1E0CB3B08], "cubicDecimeters");
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      v26 = objc_msgSend(v3, "isEqual:", v25);

                      if ((v26 & 1) != 0)
                      {
                        v8 = 8;
                      }
                      else
                      {
                        objc_msgSend(MEMORY[0x1E0CB3B08], "cubicMillimeters");
                        v27 = (void *)objc_claimAutoreleasedReturnValue();
                        v28 = objc_msgSend(v3, "isEqual:", v27);

                        if ((v28 & 1) != 0)
                        {
                          v8 = 9;
                        }
                        else
                        {
                          objc_msgSend(MEMORY[0x1E0CB3B08], "cubicInches");
                          v29 = (void *)objc_claimAutoreleasedReturnValue();
                          v30 = objc_msgSend(v3, "isEqual:", v29);

                          if ((v30 & 1) != 0)
                          {
                            v8 = 10;
                          }
                          else
                          {
                            objc_msgSend(MEMORY[0x1E0CB3B08], "cubicFeet");
                            v31 = (void *)objc_claimAutoreleasedReturnValue();
                            v32 = objc_msgSend(v3, "isEqual:", v31);

                            if ((v32 & 1) != 0)
                            {
                              v8 = 11;
                            }
                            else
                            {
                              objc_msgSend(MEMORY[0x1E0CB3B08], "cubicYards");
                              v33 = (void *)objc_claimAutoreleasedReturnValue();
                              v34 = objc_msgSend(v3, "isEqual:", v33);

                              if ((v34 & 1) != 0)
                              {
                                v8 = 12;
                              }
                              else
                              {
                                objc_msgSend(MEMORY[0x1E0CB3B08], "cubicMiles");
                                v35 = (void *)objc_claimAutoreleasedReturnValue();
                                v36 = objc_msgSend(v3, "isEqual:", v35);

                                if ((v36 & 1) != 0)
                                {
                                  v8 = 13;
                                }
                                else
                                {
                                  objc_msgSend(MEMORY[0x1E0CB3B08], "acreFeet");
                                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                                  v38 = objc_msgSend(v3, "isEqual:", v37);

                                  if ((v38 & 1) != 0)
                                  {
                                    v8 = 14;
                                  }
                                  else
                                  {
                                    objc_msgSend(MEMORY[0x1E0CB3B08], "bushels");
                                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                                    v40 = objc_msgSend(v3, "isEqual:", v39);

                                    if ((v40 & 1) != 0)
                                    {
                                      v8 = 15;
                                    }
                                    else
                                    {
                                      objc_msgSend(MEMORY[0x1E0CB3B08], "teaspoons");
                                      v41 = (void *)objc_claimAutoreleasedReturnValue();
                                      v42 = objc_msgSend(v3, "isEqual:", v41);

                                      if ((v42 & 1) != 0)
                                      {
                                        v8 = 16;
                                      }
                                      else
                                      {
                                        objc_msgSend(MEMORY[0x1E0CB3B08], "tablespoons");
                                        v43 = (void *)objc_claimAutoreleasedReturnValue();
                                        v44 = objc_msgSend(v3, "isEqual:", v43);

                                        if ((v44 & 1) != 0)
                                        {
                                          v8 = 17;
                                        }
                                        else
                                        {
                                          objc_msgSend(MEMORY[0x1E0CB3B08], "fluidOunces");
                                          v45 = (void *)objc_claimAutoreleasedReturnValue();
                                          v46 = objc_msgSend(v3, "isEqual:", v45);

                                          if ((v46 & 1) != 0)
                                          {
                                            v8 = 18;
                                          }
                                          else
                                          {
                                            objc_msgSend(MEMORY[0x1E0CB3B08], "cups");
                                            v47 = (void *)objc_claimAutoreleasedReturnValue();
                                            v48 = objc_msgSend(v3, "isEqual:", v47);

                                            if ((v48 & 1) != 0)
                                            {
                                              v8 = 19;
                                            }
                                            else
                                            {
                                              objc_msgSend(MEMORY[0x1E0CB3B08], "pints");
                                              v49 = (void *)objc_claimAutoreleasedReturnValue();
                                              v50 = objc_msgSend(v3, "isEqual:", v49);

                                              if ((v50 & 1) != 0)
                                              {
                                                v8 = 20;
                                              }
                                              else
                                              {
                                                objc_msgSend(MEMORY[0x1E0CB3B08], "quarts");
                                                v51 = (void *)objc_claimAutoreleasedReturnValue();
                                                v52 = objc_msgSend(v3, "isEqual:", v51);

                                                if ((v52 & 1) != 0)
                                                {
                                                  v8 = 21;
                                                }
                                                else
                                                {
                                                  objc_msgSend(MEMORY[0x1E0CB3B08], "gallons");
                                                  v53 = (void *)objc_claimAutoreleasedReturnValue();
                                                  v54 = objc_msgSend(v3, "isEqual:", v53);

                                                  if ((v54 & 1) != 0)
                                                  {
                                                    v8 = 22;
                                                  }
                                                  else
                                                  {
                                                    objc_msgSend(MEMORY[0x1E0CB3B08], "imperialTeaspoons");
                                                    v55 = (void *)objc_claimAutoreleasedReturnValue();
                                                    v56 = objc_msgSend(v3, "isEqual:", v55);

                                                    if ((v56 & 1) != 0)
                                                    {
                                                      v8 = 23;
                                                    }
                                                    else
                                                    {
                                                      objc_msgSend(MEMORY[0x1E0CB3B08], "imperialQuarts");
                                                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                                                      v58 = objc_msgSend(v3, "isEqual:", v57);

                                                      if ((v58 & 1) != 0)
                                                      {
                                                        v8 = 24;
                                                      }
                                                      else
                                                      {
                                                        objc_msgSend(MEMORY[0x1E0CB3B08], "imperialGallons");
                                                        v59 = (void *)objc_claimAutoreleasedReturnValue();
                                                        v60 = objc_msgSend(v3, "isEqual:", v59);

                                                        if ((v60 & 1) != 0)
                                                        {
                                                          v8 = 25;
                                                        }
                                                        else
                                                        {
                                                          objc_msgSend(MEMORY[0x1E0CB3B08], "metricCups");
                                                          v61 = (void *)objc_claimAutoreleasedReturnValue();
                                                          v62 = objc_msgSend(v3, "isEqual:", v61);

                                                          if (!v62)
                                                          {
LABEL_60:

                                                            return v2;
                                                          }
                                                          v8 = 26;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    -[_INPBVolumeValue setUnit:](v2, "setUnit:", v8);
    goto LABEL_60;
  }
  v2 = 0;
  return v2;
}

id INIntentSlotValueTransformFromVolumeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromVolumeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromVolumes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromVolume(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToVolumeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToVolumeValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToVolumes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToVolume(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromVolumeValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

_INPBVolume *INIntentSlotValueRedactedVolumeFromVolume(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBVolume *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBVolume);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromVolumeValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBVolume addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedVolumesFromVolumes(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedVolumeFromVolume(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

INPaymentMethod *INIntentSlotValueTransformFromPaymentMethodValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  INPaymentMethod *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  INPaymentMethod *v13;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    v4 = [INPaymentMethod alloc];
    v5 = objc_msgSend(v2, "hasType");
    v6 = objc_msgSend(v2, "type") - 1;
    if (v6 <= 7)
      v7 = v6 + 1;
    else
      v7 = 0;
    if (v5)
      v8 = v7;
    else
      v8 = 0;
    objc_msgSend(v2, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "identificationHint");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "icon");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromImageValue(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[INPaymentMethod initWithType:name:identificationHint:icon:](v4, "initWithType:name:identificationHint:icon:", v8, v9, v10, v12);

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

_INPBPaymentMethodValue *INIntentSlotValueTransformToPaymentMethodValue(void *a1)
{
  id v1;
  _INPBPaymentMethodValue *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPaymentMethodValue);
    v3 = objc_msgSend(v1, "type") - 1;
    if (v3 < 8)
      v4 = (v3 + 1);
    else
      v4 = 0x7FFFFFFFLL;
    -[_INPBPaymentMethodValue setType:](v2, "setType:", v4);
    objc_msgSend(v1, "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentMethodValue setName:](v2, "setName:", v5);

    objc_msgSend(v1, "icon");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToImageValue(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentMethodValue setIcon:](v2, "setIcon:", v7);

    objc_msgSend(v1, "identificationHint");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBPaymentMethodValue setIdentificationHint:](v2, "setIdentificationHint:", v8);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPaymentMethodValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPaymentMethodValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformFromPaymentMethod(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(a1, "values", 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v10;
      while (2)
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v10 != v4)
            objc_enumerationMutation(v1);
          INIntentSlotValueTransformFromPaymentMethodValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
          v6 = objc_claimAutoreleasedReturnValue();
          if (v6)
          {
            v7 = (void *)v6;
            goto LABEL_12;
          }
          ++v5;
        }
        while (v3 != v5);
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v3)
          continue;
        break;
      }
    }
    v7 = 0;
LABEL_12:

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

id INIntentSlotValueTransformFromPaymentMethods(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromPaymentMethod(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToPaymentMethodValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPaymentMethodValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBPaymentMethod *INIntentSlotValueTransformToPaymentMethod(void *a1)
{
  id v1;
  _INPBPaymentMethod *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPaymentMethod);
    INIntentSlotValueTransformToPaymentMethodValue(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
      -[_INPBPaymentMethod addValue:](v2, "addValue:", v3);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformToPaymentMethods(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToPaymentMethod(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBPaymentMethodValue *INIntentSlotValueRedactedPaymentMethodValueFromPaymentMethodValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _INPBPaymentMethodValue *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "valueMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_alloc_init(_INPBPaymentMethodValue);
    -[_INPBPaymentMethodValue setType:](v9, "setType:", objc_msgSend(v5, "type"));
    objc_msgSend(v5, "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentMethodValue setName:](v9, "setName:", v10);

    objc_msgSend(v5, "icon");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedImageValueFromImageValue(v11, a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentMethodValue setIcon:](v9, "setIcon:", v12);

    objc_msgSend(v5, "identificationHint");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentMethodValue setIdentificationHint:](v9, "setIdentificationHint:", v13);

  }
  return v9;
}

_INPBPaymentMethod *INIntentSlotValueRedactedPaymentMethodFromPaymentMethod(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBPaymentMethod *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBPaymentMethod);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedPaymentMethodValueFromPaymentMethodValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2, v6);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBPaymentMethod addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t _INPBTimestampReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setNanos:", v30);
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setSeconds:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBMoveFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBIntentMetadata *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_65;
      case 2u:
        if (v16 == 2)
        {
          v46 = 0;
          v47 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_36;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          while (1)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
              break;
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_87;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_87:
          PBRepeatedInt32Add();
        }
        goto LABEL_66;
      case 3u:
        v18 = objc_alloc_init(_INPBString);
        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v18, a2))
          goto LABEL_90;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addEntityName:", v18, 0, 0);
        goto LABEL_65;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_72:
        objc_msgSend(a1, "setSourceType:", v32, v46, v47);
        goto LABEL_66;
      case 5u:
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSourceName:", v18, 0, 0);
        goto LABEL_65;
      case 6u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_77:
        objc_msgSend(a1, "setDestinationType:", v39, v46, v47);
        goto LABEL_66;
      case 7u:
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_90;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDestinationName:", v18, 0, 0);
        goto LABEL_65;
      case 8u:
        v18 = objc_alloc_init(_INPBFileProperty);
        v46 = 0;
        v47 = 0;
        if (PBReaderPlaceMark() && _INPBFilePropertyReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          if (v18)
            objc_msgSend(a1, "addProperties:", v18, 0, 0);
LABEL_65:

LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_90:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_66;
    }
  }
}

BOOL _INPBPriceRangeValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBValueMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBDecimalNumberValue);
        if (!PBReaderPlaceMark() || (_INPBDecimalNumberValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMinimumPrice:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(_INPBDecimalNumberValue);
        if (PBReaderPlaceMark() && (_INPBDecimalNumberValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMaximumPrice:", v17, 0, 0);
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCurrencyCode:", v17);
        goto LABEL_31;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

uint64_t _INPBDurationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setNanos:", v30);
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setSeconds:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSetTimerAttributeIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTimer *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUpdatedTimer:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBGetFileInformationIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBFileProperty *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_INPBFileProperty);
        if (!PBReaderPlaceMark() || (_INPBFilePropertyReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProperty:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setSuccess:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBDeleteHealthSampleIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addSampleUuids:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INSetDefrosterSettingsInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228BF70[a1];
}

BOOL _INPBPlayAudioMessageIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setMessageIdentifier:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSpatialEventTriggerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBLocationValue *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocation:", v17, 0, 0);
        goto LABEL_35;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_47:
        objc_msgSend(a1, "setEvent:", v25, v33, v34);
        goto LABEL_53;
      case 3u:
        v17 = objc_alloc_init(_INPBLocationValue);
        v33 = 0;
        v34 = 0;
        if (PBReaderPlaceMark() && _INPBLocationValueReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addSuggestedValues:", v17, 0, 0);
LABEL_35:

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_52:
        objc_msgSend(a1, "setMobileSpace:", v32, v33, v34);
        goto LABEL_53;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

BOOL _INPBCancelWorkoutIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBTemperatureReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTemperatureValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTemperatureValue);
        if (!PBReaderPlaceMark() || !_INPBTemperatureValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INRadioTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INRadioTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INRadioTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INRadioTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E228BFA8[a1 - 1];
}

uint64_t INRadioTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AM")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("FM")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HD")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("satellite")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("DAB")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRadioTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("AM");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("FM");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("HD");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("satellite");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("DAB");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INEnumerateObjectsInCodable(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "_objectDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "attributes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allValues");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = _INEnumerateObjectAttributes(v4, v7, v3);

  return v8;
}

BOOL _INEnumerateObjectAttributes(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t k;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  _BOOL8 v37;
  id obj;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void (**v44)(_QWORD, _QWORD);
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[4];
  id v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v40 = a1;
  v5 = a2;
  v6 = a3;
  v61 = 0;
  v62 = &v61;
  v63 = 0x2020000000;
  v64 = 0;
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3221225472;
  v58[2] = ___INEnumerateObjectAttributes_block_invoke;
  v58[3] = &unk_1E228BFD8;
  v45 = v6;
  v59 = v45;
  v60 = &v61;
  v44 = (void (**)(_QWORD, _QWORD))MEMORY[0x18D7812C4](v58);
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v67, 16);
  if (v7)
  {
    v41 = *(_QWORD *)v55;
    do
    {
      v42 = v7;
      for (i = 0; i != v42; ++i)
      {
        if (*(_QWORD *)v55 != v41)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
        objc_msgSend(v8, "propertyName");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "hasPrefix:", CFSTR("_"));

        if ((v10 & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v8, "propertyName");
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "valueForPropertyNamed:", v11);
            }
            else
            {
              objc_msgSend(v8, "propertyName");
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "valueForKey:", v11);
            }
            v13 = (id)objc_claimAutoreleasedReturnValue();

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v14 = v13;
              v50 = 0u;
              v51 = 0u;
              v52 = 0u;
              v53 = 0u;
              v13 = v14;
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v50, v66, 16);
              if (v15)
              {
                v16 = *(_QWORD *)v51;
                do
                {
                  for (j = 0; j != v15; ++j)
                  {
                    if (*(_QWORD *)v51 != v16)
                      objc_enumerationMutation(v13);
                    v18 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * j);
                    v19 = v8;
                    if (v8)
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v20 = v19;
                      else
                        v20 = 0;
                    }
                    else
                    {
                      v20 = 0;
                    }
                    v21 = v20;

                    objc_msgSend(v21, "codableDescription");
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v22, "attributes");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v23, "allValues");
                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                    v25 = _INEnumerateObjectAttributes(v18, v24, v45);

                    if (v25)
                      *((_BYTE *)v62 + 24) = 1;
                  }
                  v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v50, v66, 16);
                }
                while (v15);
              }
              goto LABEL_29;
            }
            if (v13)
            {
              v26 = v8;
              if (v26)
              {
                objc_opt_class();
                v27 = (objc_opt_isKindOfClass() & 1) != 0 ? v26 : 0;
              }
              else
              {
                v27 = 0;
              }
              v32 = v27;

              objc_msgSend(v32, "codableDescription");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "attributes");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "allValues");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = _INEnumerateObjectAttributes(v13, v35, v45);

              if (v36)
                *((_BYTE *)v62 + 24) = 1;
            }
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              continue;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v8, "propertyName");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "valueForPropertyNamed:", v12);
            }
            else
            {
              objc_msgSend(v8, "propertyName");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "valueForKey:", v12);
            }
            v13 = (id)objc_claimAutoreleasedReturnValue();

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v28 = v13;
              v46 = 0u;
              v47 = 0u;
              v48 = 0u;
              v49 = 0u;
              v13 = v28;
              v29 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v46, v65, 16);
              if (v29)
              {
                v30 = *(_QWORD *)v47;
                do
                {
                  for (k = 0; k != v29; ++k)
                  {
                    if (*(_QWORD *)v47 != v30)
                      objc_enumerationMutation(v13);
                    v44[2](v44, *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * k));
                  }
                  v29 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v46, v65, 16);
                }
                while (v29);
              }
LABEL_29:

            }
            else
            {
              ((void (**)(_QWORD, id))v44)[2](v44, v13);
            }
          }

          continue;
        }
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v67, 16);
    }
    while (v7);
  }

  v37 = *((_BYTE *)v62 + 24) != 0;
  _Block_object_dispose(&v61, 8);

  return v37;
}

void sub_18BFD77D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

uint64_t INEnumerateObjectsInIntentSlotComposing(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD);
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t i;
  id v19;
  uint64_t v20;
  id obj;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  objc_msgSend(v3, "intentSlotDescriptions");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v5)
  {
    v22 = 0;
    v6 = *(_QWORD *)v35;
    v19 = v3;
    do
    {
      v7 = 0;
      v20 = v5;
      do
      {
        if (*(_QWORD *)v35 != v6)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * v7), "facadePropertyName", v19);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 0;
        v31 = &v30;
        v32 = 0x2020000000;
        v33 = 0;
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = __INEnumerateObjectsInIntentSlotComposing_block_invoke;
        v27[3] = &unk_1E228BFD8;
        v29 = &v30;
        v28 = v4;
        v9 = (void (**)(_QWORD, _QWORD))MEMORY[0x18D7812C4](v27);
        objc_msgSend(v3, "valueForKey:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v11 = v10;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v12 = v11;
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
          v14 = v6;
          v15 = v4;
          if (v13)
          {
            v16 = *(_QWORD *)v24;
            do
            {
              for (i = 0; i != v13; ++i)
              {
                if (*(_QWORD *)v24 != v16)
                  objc_enumerationMutation(v12);
                v9[2](v9, *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i));
              }
              v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
            }
            while (v13);
          }

          v4 = v15;
          v6 = v14;
          v3 = v19;
          v5 = v20;

        }
        else
        {
          ((void (**)(_QWORD, void *))v9)[2](v9, v10);
        }
        if (*((_BYTE *)v31 + 24))
        {
          objc_msgSend(v3, "setValue:forKey:", v10, v8);
          v22 = 1;
        }

        _Block_object_dispose(&v30, 8);
        ++v7;
      }
      while (v7 != v5);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v5);
  }
  else
  {
    v22 = 0;
  }

  return v22 & 1;
}

void sub_18BFD7B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18BFD9488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id getCNContactPhoneNumbersKey()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getCNContactPhoneNumbersKeySymbolLoc_ptr_30926;
  v7 = getCNContactPhoneNumbersKeySymbolLoc_ptr_30926;
  if (!getCNContactPhoneNumbersKeySymbolLoc_ptr_30926)
  {
    v1 = (void *)ContactsLibrary_30915();
    v0 = (id *)dlsym(v1, "CNContactPhoneNumbersKey");
    v5[3] = (uint64_t)v0;
    getCNContactPhoneNumbersKeySymbolLoc_ptr_30926 = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

id getCNContactEmailAddressesKey()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getCNContactEmailAddressesKeySymbolLoc_ptr_30924;
  v7 = getCNContactEmailAddressesKeySymbolLoc_ptr_30924;
  if (!getCNContactEmailAddressesKeySymbolLoc_ptr_30924)
  {
    v1 = (void *)ContactsLibrary_30915();
    v0 = (id *)dlsym(v1, "CNContactEmailAddressesKey");
    v5[3] = (uint64_t)v0;
    getCNContactEmailAddressesKeySymbolLoc_ptr_30924 = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

id getCNContactIdentifierKey()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getCNContactIdentifierKeySymbolLoc_ptr;
  v7 = getCNContactIdentifierKeySymbolLoc_ptr;
  if (!getCNContactIdentifierKeySymbolLoc_ptr)
  {
    v1 = (void *)ContactsLibrary_30915();
    v0 = (id *)dlsym(v1, "CNContactIdentifierKey");
    v5[3] = (uint64_t)v0;
    getCNContactIdentifierKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

uint64_t ContactsLibrary_30915()
{
  uint64_t v0;
  void *v2;

  if (ContactsLibraryCore_frameworkLibrary_30920)
    return ContactsLibraryCore_frameworkLibrary_30920;
  ContactsLibraryCore_frameworkLibrary_30920 = _sl_dlopen();
  v0 = ContactsLibraryCore_frameworkLibrary_30920;
  if (!ContactsLibraryCore_frameworkLibrary_30920)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_18BFDA0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _INPBSetDefrosterSettingsInCarIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_53;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_41;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_45:
        objc_msgSend(a1, "setEnable:", v21 != 0);
        goto LABEL_51;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_50:
        objc_msgSend(a1, "setDefroster:", v31);
        goto LABEL_51;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_41:

LABEL_51:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_53:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_51;
    }
  }
}

BOOL _INPBRefinementItemReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBSelectionItem *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBSelectionItem);
        if (!PBReaderPlaceMark() || !_INPBSelectionItemReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setItem:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (_INPBSelectionItem *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setSubKeyPath:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBStringValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBValueMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setValue:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBValueMetadata);
    if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INBalanceAmount *INIntentSlotValueTransformFromBalanceAmountValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  INBalanceAmount *v8;
  void *v9;
  void *v10;
  void *v11;
  INBalanceAmount *v12;
  INBalanceAmount *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "customAmount");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "valueMetadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v4);
    objc_msgSend(v2, "currencyAmount");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "valueMetadata");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v6);

    if (objc_msgSend(v2, "hasCurrencyAmount"))
    {
      objc_msgSend(v2, "currencyAmount");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = [INBalanceAmount alloc];
      objc_msgSend(v7, "amount");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromDecimalNumberValue(v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "currencyCode");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[INBalanceAmount initWithAmount:currencyCode:](v8, "initWithAmount:currencyCode:", v10, v11);

    }
    else
    {
      v13 = [INBalanceAmount alloc];
      objc_msgSend(v2, "customAmount");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromDecimalNumberValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v2, "hasType");
      v15 = objc_msgSend(v2, "type") - 1;
      if (v15 <= 2)
        v16 = v15 + 1;
      else
        v16 = 0;
      if (v14)
        v17 = v16;
      else
        v17 = 0;
      v12 = -[INBalanceAmount initWithAmount:balanceType:](v13, "initWithAmount:balanceType:", v9, v17);
    }

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

_INPBBalanceAmountValue *INIntentSlotValueTransformToBalanceAmountValue(void *a1)
{
  id v1;
  _INPBBalanceAmountValue *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  INCurrencyAmount *v8;
  void *v9;
  void *v10;
  INCurrencyAmount *v11;
  void *v12;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBBalanceAmountValue);
    v3 = objc_msgSend(v1, "balanceType") - 1;
    if (v3 < 3)
      v4 = (v3 + 1);
    else
      v4 = 0x7FFFFFFFLL;
    -[_INPBBalanceAmountValue setType:](v2, "setType:", v4);
    if (objc_msgSend(v1, "balanceType") == 1
      && (objc_msgSend(v1, "amount"), (v5 = objc_claimAutoreleasedReturnValue()) != 0)
      && (v6 = (void *)v5,
          objc_msgSend(v1, "currencyCode"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v7,
          v6,
          v7))
    {
      v8 = [INCurrencyAmount alloc];
      objc_msgSend(v1, "amount");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "currencyCode");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[INCurrencyAmount initWithAmount:currencyCode:](v8, "initWithAmount:currencyCode:", v9, v10);

      INIntentSlotValueTransformToCurrencyAmountValue(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBBalanceAmountValue setCurrencyAmount:](v2, "setCurrencyAmount:", v12);
    }
    else
    {
      objc_msgSend(v1, "amount");
      v11 = (INCurrencyAmount *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToDecimalNumberValue(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBBalanceAmountValue setCustomAmount:](v2, "setCustomAmount:", v12);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBBalanceAmountValue *INIntentSlotValueRedactedBalanceAmountValueFromBalanceAmountValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _INPBBalanceAmountValue *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "currencyAmount");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "valueMetadata");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = INPrivacyEntitlementOptionsForValueMetadata(v8);

  objc_msgSend(v5, "customAmount");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "valueMetadata");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = INPrivacyEntitlementOptionsForValueMetadata(v11) | v9;

  if ((v12 & a2) != 0)
  {
    v13 = 0;
  }
  else
  {
    v13 = objc_alloc_init(_INPBBalanceAmountValue);
    objc_msgSend(v5, "currencyAmount");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedCurrencyAmountValueFromCurrencyAmountValue(v14, a2, v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBalanceAmountValue setCurrencyAmount:](v13, "setCurrencyAmount:", v15);

    objc_msgSend(v5, "customAmount");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedValueFromDecimalNumberValue(v16, a2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBalanceAmountValue setCustomAmount:](v13, "setCustomAmount:", v17);

    -[_INPBBalanceAmountValue setType:](v13, "setType:", objc_msgSend(v5, "type"));
  }

  return v13;
}

__CFString *INSetSeatSettingsInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228C028[a1];
}

id INIntentSlotValueTransformFromDateTimeRange(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromDateTimeRangeValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

INDateComponentsRange *INIntentSlotValueTransformFromDateTimeRangeValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  INDateComponentsRange *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  unint64_t v18;
  INRecurrenceRule *v19;
  INRecurrenceRule *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v30;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    if (objc_msgSend(v2, "hasValueMetadata"))
    {
      objc_msgSend(v2, "valueMetadata");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v4, "hasInput"))
      {
        objc_msgSend(v4, "input");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v5 = 0;
      }

    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v2, "startDateTime");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "endDateTime");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v2, "hasRecurrence"))
    {
      v30 = v5;
      objc_msgSend(v2, "recurrence");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "weeklyRecurrenceDaysCount");

      if (v12)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          objc_msgSend(v2, "recurrence");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = *(_DWORD *)(objc_msgSend(v15, "weeklyRecurrenceDays") + 4 * v13);

          v14 |= 1 << (v16 - 1);
          ++v13;
          objc_msgSend(v2, "recurrence");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "weeklyRecurrenceDaysCount");

        }
        while (v13 < v18);
      }
      else
      {
        v14 = 0;
      }
      v20 = [INRecurrenceRule alloc];
      objc_msgSend(v2, "recurrence");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "interval");
      objc_msgSend(v2, "recurrence");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "hasFrequency");
      objc_msgSend(v2, "recurrence");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = -[INRecurrenceRule initWithInterval:frequency:weeklyRecurrenceDays:](v20, "initWithInterval:frequency:weeklyRecurrenceDays:", v22, INRecurrenceFrequencyGetFacadeType(v24, objc_msgSend(v25, "frequency")), v14);

      objc_msgSend(v2, "recurrence");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v20) = objc_msgSend(v26, "hasOrdinal");

      if ((v20 & 1) != 0)
      {
        objc_msgSend(v2, "recurrence");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setWeekdayOrdinal:", objc_msgSend(v27, "ordinal"));

      }
      v5 = v30;
    }
    else
    {
      v19 = 0;
    }
    if (objc_msgSend(v2, "hasAllDay"))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v2, "allDay"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v28 = 0;
    }
    v6 = -[INDateComponentsRange initWithStartDateComponents:endDateComponents:recurrenceRule:userInput:allDay:]([INDateComponentsRange alloc], "initWithStartDateComponents:endDateComponents:recurrenceRule:userInput:allDay:", v8, v10, v19, v5, v28);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

_INPBDateTimeRange *INIntentSlotValueTransformToDateTimeRange(void *a1)
{
  void *v1;
  _INPBDateTimeRange *v2;

  INIntentSlotValueTransformToDateTimeRangeValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBDateTimeRange);
    -[_INPBDateTimeRange addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBDateTimeRangeValue *INIntentSlotValueTransformToDateTimeRangeValue(void *a1)
{
  id v1;
  _INPBDateTimeRangeValue *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _INPBRecurrenceValue *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  _INPBValueMetadata *v20;
  void *v21;
  void *v22;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBDateTimeRangeValue);
    objc_msgSend(v1, "startDateComponents");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBDateTimeRangeValue setStartDateTime:](v2, "setStartDateTime:", v4);
    -[_INPBDateTimeRangeValue setStartCalendar:](v2, "setStartCalendar:", (int)objc_msgSend(v4, "calendarSystem"));
    objc_msgSend(v1, "endDateComponents");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBDateTimeRangeValue setEndDateTime:](v2, "setEndDateTime:", v6);
    -[_INPBDateTimeRangeValue setEndCalendar:](v2, "setEndCalendar:", (int)objc_msgSend(v6, "calendarSystem"));
    objc_msgSend(v1, "recurrenceRule");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v8 = objc_alloc_init(_INPBRecurrenceValue);
      objc_msgSend(v1, "recurrenceRule");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRecurrenceValue setInterval:](v8, "setInterval:", objc_msgSend(v9, "interval"));

      objc_msgSend(v1, "recurrenceRule");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "frequency");
      if (v11 > 6)
        v12 = 0x7FFFFFFFLL;
      else
        v12 = dword_18C3112E8[v11];
      -[_INPBRecurrenceValue setFrequency:](v8, "setFrequency:", v12);

      objc_msgSend(v1, "startDateComponents");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "weekdayOrdinal");

      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(v1, "startDateComponents");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBRecurrenceValue setOrdinal:](v8, "setOrdinal:", objc_msgSend(v15, "weekdayOrdinal"));

      }
      objc_msgSend(v1, "recurrenceRule");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "weeklyRecurrenceDays");

      if (v17)
      {
        for (i = 0; i != 7; ++i)
        {
          if ((v17 & (1 << i)) != 0)
            -[_INPBRecurrenceValue addWeeklyRecurrenceDays:](v8, "addWeeklyRecurrenceDays:", (i + 1));
        }
      }
      -[_INPBDateTimeRangeValue setRecurrence:](v2, "setRecurrence:", v8);

    }
    objc_msgSend(v1, "userInput");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      v20 = objc_alloc_init(_INPBValueMetadata);
      -[_INPBValueMetadata setInput:](v20, "setInput:", v19);
      -[_INPBDateTimeRangeValue setValueMetadata:](v2, "setValueMetadata:", v20);

    }
    objc_msgSend(v1, "allDay");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      objc_msgSend(v1, "allDay");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBDateTimeRangeValue setAllDay:](v2, "setAllDay:", objc_msgSend(v22, "BOOLValue"));

    }
    else
    {
      -[_INPBDateTimeRangeValue setHasAllDay:](v2, "setHasAllDay:", 0);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromDateTimeRanges(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDateTimeRange(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromDateTimeRangeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDateTimeRangeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDateTimeRanges(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDateTimeRange(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDateTimeRangeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDateTimeRangeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBDateTimeRange *INIntentSlotValueRedactedDateTimeRangeFromDateTimeRange(void *a1, uint64_t a2)
{
  id v3;
  _INPBDateTimeRange *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = objc_alloc_init(_INPBDateTimeRange);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v3, "values", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = *(_QWORD *)v15;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
      objc_msgSend(v10, "valueMetadata");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = INPrivacyEntitlementOptionsForValueMetadata(v11);

      if ((v12 & a2) == 0)
      {
        if (!v10)
          continue;
        -[_INPBDateTimeRange addValue:](v4, "addValue:", v10);
      }

    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  }
  while (v7);
LABEL_13:

LABEL_15:
  return v4;
}

id INIntentSlotValueRedactedDateTimeRangesFromDateTimeRanges(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedDateTimeRangeFromDateTimeRange(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

uint64_t _INPBUpdateEventIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBCalendarEvent *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBCalendarEvent);
        if (!PBReaderPlaceMark() || (_INPBCalendarEventReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUpdatedEvent:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_40:
            objc_msgSend(a1, "setConfirmationReason:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBCalendarEvent *)objc_claimAutoreleasedReturnValue();
        if (v25)
          objc_msgSend(a1, "addConflictingEventIdentifiers:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBFilePropertyReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _INPBFilePropertyValue *v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_46;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_49:
        objc_msgSend(a1, "setName:", v31);
      }
      else if ((_DWORD)v17 == 3)
      {
        v32 = objc_alloc_init(_INPBFilePropertyValue);
        if (!PBReaderPlaceMark() || (_INPBFilePropertyValueReadFrom(v32, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v32, 0, 0);

      }
      else if ((_DWORD)v17 == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_44:
        objc_msgSend(a1, "setQualifier:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INCallDestinationTypeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INCallDestinationTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INCallDestinationTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INCallDestinationTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E228C100[a1 - 1];
}

uint64_t INCallDestinationTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("normal")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("emergency")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("voicemail")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("redial")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("callBack")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallDestinationTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("normal");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("emergency");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("voicemail");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("redial");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("call back");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

id INIntentSlotValueTransformFromUUIDValue(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0CB3A28];
    v2 = a1;
    v3 = [v1 alloc];
    objc_msgSend(v2, "uuidString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = (void *)objc_msgSend(v3, "initWithUUIDString:", v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBUUIDValue *INIntentSlotValueTransformToUUIDValue(void *a1)
{
  id v1;
  _INPBUUIDValue *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBUUIDValue);
    objc_msgSend(v1, "UUIDString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBUUIDValue setUuidString:](v2, "setUuidString:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueRedactedValueFromUUIDValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

__CFString *INCreateEventIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228C128[a1];
}

__CFString *INPersonRelationshipGetFacadeObject(int a1, unsigned int a2)
{
  __CFString *result;

  result = 0;
  if (a2 <= 0xC)
  {
    if (a1)
      return off_1E228C1C0[a2];
  }
  return result;
}

uint64_t INPersonRelationshipGetBackingType(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Father")) & 1) != 0)
    {
      v3 = 0;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Mother")) & 1) != 0)
    {
      v3 = 1;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Parent")) & 1) != 0)
    {
      v3 = 2;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Brother")) & 1) != 0)
    {
      v3 = 3;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Sister")) & 1) != 0)
    {
      v3 = 4;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Child")) & 1) != 0)
    {
      v3 = 5;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Friend")) & 1) != 0)
    {
      v3 = 6;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Spouse")) & 1) != 0)
    {
      v3 = 7;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Partner")) & 1) != 0)
    {
      v3 = 8;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Assistant")) & 1) != 0)
    {
      v3 = 9;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Manager")) & 1) != 0)
    {
      v3 = 10;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Son")) & 1) != 0)
    {
      v3 = 11;
    }
    else if (objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonRelationship.Daughter")))
    {
      v3 = 12;
    }
    else
    {
      v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INPersonRelationshipValueAsString(void *a1)
{
  uint64_t BackingType;

  if (a1)
  {
    BackingType = INPersonRelationshipGetBackingType(a1);
    if (BackingType < 0xD)
      return off_1E228C228[BackingType];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), BackingType);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return (__CFString *)a1;
}

__CFString *INGetVisualCodeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228C290[a1];
}

id INIntentSlotValueTransformFromDataValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "valueMetadata");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  INPrivacyEntitlementValidateValueMetadata(v2);

  objc_msgSend(v1, "value");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

id INIntentSlotValueTransformFromDataValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDataValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBDataValue *INIntentSlotValueTransformToDataValue(void *a1)
{
  id v1;
  _INPBDataValue *v2;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBDataValue);
    -[_INPBDataValue setValue:](v2, "setValue:", v1);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformToDataValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDataValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformFromURLValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(v1, "absoluteString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "URLWithString:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v5, "isFileURL") && objc_msgSend(v2, "hasScope"))
      MEMORY[0x18D780D9C](v5, objc_msgSend(v2, "scope"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

_INPBURLValue *INIntentSlotValueTransformToURLValue(void *a1)
{
  id v1;
  _INPBURLValue *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBURLValue);
    objc_msgSend(v1, "absoluteString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBURLValue setAbsoluteString:](v2, "setAbsoluteString:", v3);

    if (objc_msgSend(v1, "isFileURL"))
    {
      v4 = (void *)MEMORY[0x18D780DA8](v1);
      -[_INPBURLValue setScope:](v2, "setScope:", v4);

    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromURLValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromURLValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToURLValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToURLValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromURLValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

uint64_t INHomeEntityTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0xB) & (0x7FEu >> a1);
}

uint64_t INHomeEntityTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return 0x7FFFFFFFLL;
  else
    return dword_18C311580[a1 - 1];
}

uint64_t INHomeEntityTypeGetFacadeType(int a1, unsigned int a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 6)
  {
    if (a1)
      return qword_18C3115A8[a2];
  }
  return result;
}

const __CFString *INHomeEntityTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E228C2D0[a1 - 1];
}

uint64_t INHomeEntityTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("home")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("zone")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("room")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("group")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scene")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("trigger")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("device")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("serviceGroup")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("accessory")) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("service")))
  {
    v2 = 10;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeEntityTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("home");
      goto LABEL_13;
    case 2:
      v4 = CFSTR("zone");
      goto LABEL_13;
    case 3:
      v4 = CFSTR("room");
      goto LABEL_13;
    case 4:
      v4 = CFSTR("group");
      goto LABEL_13;
    case 5:
      v4 = CFSTR("scene");
      goto LABEL_13;
    case 6:
      v4 = CFSTR("trigger");
      goto LABEL_13;
    case 7:
      v4 = CFSTR("device");
      goto LABEL_13;
    case 8:
      v4 = CFSTR("service group");
      goto LABEL_13;
    case 9:
      v4 = CFSTR("accessory");
      goto LABEL_13;
    case 10:
      v4 = CFSTR("service");
LABEL_13:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBStartVideoCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  _INPBCallMetrics *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2)
        break;
      if ((_DWORD)v17 == 1000)
      {
        v18 = objc_alloc_init(_INPBCallMetrics);
        if (!PBReaderPlaceMark() || (_INPBCallMetricsReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetrics:", v18, 0, 0);
LABEL_36:

        goto LABEL_44;
      }
      if ((_DWORD)v17 != 3)
      {
LABEL_37:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
      }
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_40;
        v19 += 7;
        v14 = v20++ >= 9;
        if (v14)
        {
          v25 = 0;
          goto LABEL_43;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + *v5))
        v25 = 0;
      else
        v25 = v21;
LABEL_43:
      objc_msgSend(a1, "setAudioRoute:", v25);
LABEL_44:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 1)
    {
      PBReaderReadString();
      v18 = (_INPBCallMetrics *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setStatus:", v18);
    }
    else
    {
      if ((_DWORD)v17 != 2)
        goto LABEL_37;
      PBReaderReadString();
      v18 = (_INPBCallMetrics *)objc_claimAutoreleasedReturnValue();
      if (v18)
        objc_msgSend(a1, "addTargetContacts:", v18);
    }
    goto LABEL_36;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBConflictingParameterReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBSelectionItem *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBSelectionItem);
        if (!PBReaderPlaceMark() || !_INPBSelectionItemReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAlternateItems:", v17, 0, 0);
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (_INPBSelectionItem *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setKeyPath:", v17);
LABEL_25:

    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBUUIDValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBValueMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUuidString:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBValueMetadata);
    if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBWellnessMetadataPairReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBValueMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setKey:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBWellnessMetadataValue);
    if (!PBReaderPlaceMark() || !_INPBWellnessMetadataValueReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setValue:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INIntentSlotValueTransformFromCondition(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1
    && objc_msgSend(v1, "hasConditionalOperator")
    && (v3 = objc_msgSend(v2, "conditionalOperator") - 2, v3 <= 2))
  {
    v4 = qword_18C3115E0[v3];
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

__CFString *INSearchForPhotosIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228C360[a1];
}

id INIntentSlotValueTransformFromProperty(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;
  id v15;

  v1 = a1;
  objc_msgSend(v1, "payload");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "hasType"))
  {
    v3 = objc_msgSend(v2, "type");
    if (v3 <= 49)
    {
      switch(v3)
      {
        case 1:
          objc_msgSend(v2, "payloadStringValues");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "firstObject");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromStringValue(v5);
          v6 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 2:
          objc_msgSend(v2, "payloadDoubleValues");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "firstObject");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromDoubleValue(v5);
          v6 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 4:
          objc_msgSend(v2, "payloadContactValues");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "firstObject");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromContactValueWithAlternatives(v5, 0);
          v6 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        case 6:
          objc_msgSend(v2, "payloadLocations");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "firstObject");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromLocationValue(v5);
          v6 = objc_claimAutoreleasedReturnValue();
          goto LABEL_16;
        default:
          goto LABEL_22;
      }
    }
    if (v3 > 52)
    {
      if (v3 == 53)
      {
        objc_msgSend(v2, "payloadContactLists");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "firstObject");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "contacts");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromContacts(v8);
        v9 = objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
      if (v3 == 105)
      {
        objc_msgSend(v2, "payloadDateTimeValues");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "firstObject");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDateTime(v5);
        v6 = objc_claimAutoreleasedReturnValue();
LABEL_16:
        v7 = (void *)v6;
        goto LABEL_20;
      }
    }
    else
    {
      if (v3 == 50)
      {
        objc_msgSend(v2, "payloadStringLists");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "firstObject");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "dataStrings");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromStrings(v8);
        v9 = objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
      if (v3 == 51)
      {
        objc_msgSend(v2, "payloadDoubleLists");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "firstObject");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "dataStrings");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDoubles(v8);
        v9 = objc_claimAutoreleasedReturnValue();
LABEL_19:
        v7 = (void *)v9;

LABEL_20:
        goto LABEL_21;
      }
    }
LABEL_22:
    v11 = (void *)MEMORY[0x1E0CB3940];
    v12 = objc_msgSend(v2, "type");
    v13 = CFSTR("String");
    switch((int)v12)
    {
      case 1:
        break;
      case 2:
        v13 = CFSTR("Double");
        break;
      case 3:
        v13 = CFSTR("Integer");
        break;
      case 4:
        v13 = CFSTR("Contact");
        break;
      case 5:
        v13 = CFSTR("DateTimeRange");
        break;
      case 6:
        v13 = CFSTR("Location");
        break;
      case 7:
        v13 = CFSTR("DataString");
        break;
      case 8:
        v13 = CFSTR("Long");
        break;
      case 9:
        v13 = CFSTR("PaymentMethod");
        break;
      case 10:
        v13 = CFSTR("Temperature");
        break;
      case 11:
        v13 = CFSTR("Distance");
        break;
      case 12:
        v13 = CFSTR("FinancialAccount");
        break;
      case 13:
        v13 = CFSTR("BillType");
        break;
      case 14:
        v13 = CFSTR("Mass");
        break;
      case 15:
        v13 = CFSTR("Volume");
        break;
      case 16:
        v13 = CFSTR("Speed");
        break;
      case 17:
        v13 = CFSTR("Energy");
        break;
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
LABEL_28:
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), v12);
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
        break;
      case 50:
        v13 = CFSTR("StringList");
        break;
      case 51:
        v13 = CFSTR("DoubleList");
        break;
      case 52:
        v13 = CFSTR("IntegerList");
        break;
      case 53:
        v13 = CFSTR("ContactList");
        break;
      case 54:
        v13 = CFSTR("DateTimeRangeList");
        break;
      case 55:
        v13 = CFSTR("LocationList");
        break;
      case 56:
        v13 = CFSTR("DataStringList");
        break;
      case 57:
        v13 = CFSTR("LongList");
        break;
      case 58:
        v13 = CFSTR("PaymentMethodList");
        break;
      case 59:
        v13 = CFSTR("TemperatureList");
        break;
      case 60:
        v13 = CFSTR("DistanceList");
        break;
      default:
        switch((int)v12)
        {
          case 'd':
            v13 = CFSTR("PrimitiveBool");
            goto LABEL_66;
          case 'e':
            v13 = CFSTR("PrimitiveInt");
            goto LABEL_66;
          case 'f':
            v13 = CFSTR("PrimitiveLong");
            goto LABEL_66;
          case 'g':
            v13 = CFSTR("PrimitiveDouble");
            goto LABEL_66;
          case 'h':
            v13 = CFSTR("PrimitiveString");
            goto LABEL_66;
          case 'i':
            v13 = CFSTR("DateTime");
            goto LABEL_66;
          case 'j':
            goto LABEL_28;
          case 'k':
            v13 = CFSTR("Intent");
            goto LABEL_66;
          case 'l':
            v13 = CFSTR("ModifyRelationship");
            goto LABEL_66;
          case 'm':
            v13 = CFSTR("ModifyNickname");
            goto LABEL_66;
          case 'n':
            v13 = CFSTR("CalendarEvent");
            goto LABEL_66;
          case 'o':
            v13 = CFSTR("EventParticipant");
            goto LABEL_66;
          case 'p':
            v13 = CFSTR("EventAttribute");
            goto LABEL_66;
          default:
            if ((_DWORD)v12 != 1000)
              goto LABEL_28;
            v13 = CFSTR("Extension");
            break;
        }
        break;
    }
LABEL_66:
    objc_msgSend(v11, "stringWithFormat:", CFSTR("Unsupported Property of type %@ is not yet supported."), v13);
    v14 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v14, 0);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v15);
  }
  v7 = 0;
LABEL_21:

  return v7;
}

_INPBProperty *INIntentSlotValueTransformToProperty(void *a1, void *a2)
{
  id v3;
  id v4;
  _INPBProperty *v5;
  id v6;
  _INPBIntentSlotValue *v7;
  void *v8;
  char v9;
  id v10;
  _INPBStringList *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t k;
  void *v17;
  void *v18;
  void *v19;
  char isKindOfClass;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(_INPBProperty);
  v6 = v3;
  v7 = objc_alloc_init(_INPBIntentSlotValue);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || (objc_msgSend(v6, "firstObject"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_opt_class(),
        v9 = objc_opt_isKindOfClass(),
        v8,
        (v9 & 1) == 0))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[_INPBIntentSlotValue setType:](v7, "setType:", 4);
      INIntentSlotValueTransformToContactValue(v6);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBIntentSlotValue addPayloadContactValue:](v7, "addPayloadContactValue:", v18);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[_INPBIntentSlotValue setType:](v7, "setType:", 1);
        INIntentSlotValueTransformToStringValue(v6);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBIntentSlotValue addPayloadStringValue:](v7, "addPayloadStringValue:", v18);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v6, "firstObject");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
          {
            -[_INPBIntentSlotValue setType:](v7, "setType:", 50);
            v21 = v6;
            v11 = objc_alloc_init(_INPBStringList);
            v37 = 0u;
            v38 = 0u;
            v39 = 0u;
            v40 = 0u;
            v12 = v21;
            v22 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
            if (v22)
            {
              v23 = v22;
              v24 = *(_QWORD *)v38;
              do
              {
                for (i = 0; i != v23; ++i)
                {
                  if (*(_QWORD *)v38 != v24)
                    objc_enumerationMutation(v12);
                  INIntentSlotValueTransformToString(*(void **)(*((_QWORD *)&v37 + 1) + 8 * i));
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  -[_INPBStringList addDataString:](v11, "addDataString:", v26);

                }
                v23 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
              }
              while (v23);
            }

            -[_INPBIntentSlotValue addPayloadStringList:](v7, "addPayloadStringList:", v11);
            goto LABEL_11;
          }
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[_INPBIntentSlotValue setType:](v7, "setType:", 2);
          INIntentSlotValueTransformToDoubleValue(v6);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          -[_INPBIntentSlotValue addPayloadDoubleValue:](v7, "addPayloadDoubleValue:", v18);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v6, "firstObject");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            v28 = objc_opt_isKindOfClass();

            if ((v28 & 1) != 0)
            {
              -[_INPBIntentSlotValue setType:](v7, "setType:", 51);
              v29 = v6;
              v11 = objc_alloc_init(_INPBDoubleList);
              v37 = 0u;
              v38 = 0u;
              v39 = 0u;
              v40 = 0u;
              v12 = v29;
              v30 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
              if (v30)
              {
                v31 = v30;
                v32 = *(_QWORD *)v38;
                do
                {
                  for (j = 0; j != v31; ++j)
                  {
                    if (*(_QWORD *)v38 != v32)
                      objc_enumerationMutation(v12);
                    INIntentSlotValueTransformToDouble(*(void **)(*((_QWORD *)&v37 + 1) + 8 * j));
                    v34 = (void *)objc_claimAutoreleasedReturnValue();
                    -[_INPBStringList addDataString:](v11, "addDataString:", v34);

                  }
                  v31 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
                }
                while (v31);
              }

              -[_INPBIntentSlotValue addPayloadDoubleList:](v7, "addPayloadDoubleList:", v11);
              goto LABEL_11;
            }
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            -[_INPBIntentSlotValue setType:](v7, "setType:", 105);
            INIntentSlotValueTransformToDateTime(v6);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBIntentSlotValue addPayloadDateTimeValue:](v7, "addPayloadDateTimeValue:", v18);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Property of the type of object %@ is not yet supported."), v6);
              objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], objc_claimAutoreleasedReturnValue(), 0);
              v36 = (id)objc_claimAutoreleasedReturnValue();
              objc_exception_throw(v36);
            }
            -[_INPBIntentSlotValue setType:](v7, "setType:", 6);
            INIntentSlotValueTransformToLocationValue(v6);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBIntentSlotValue addPayloadLocation:](v7, "addPayloadLocation:", v18);
          }
        }
      }
    }

    goto LABEL_43;
  }
  -[_INPBIntentSlotValue setType:](v7, "setType:", 53);
  v10 = v6;
  v11 = objc_alloc_init(_INPBContactList);
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v38;
    do
    {
      for (k = 0; k != v14; ++k)
      {
        if (*(_QWORD *)v38 != v15)
          objc_enumerationMutation(v12);
        INIntentSlotValueTransformToContact(*(void **)(*((_QWORD *)&v37 + 1) + 8 * k));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBStringList addContact:](v11, "addContact:", v17);

      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    }
    while (v14);
  }

  -[_INPBIntentSlotValue addPayloadContactList:](v7, "addPayloadContactList:", v11);
LABEL_11:

LABEL_43:
  -[_INPBProperty setPayload:](v5, "setPayload:", v7);
  -[_INPBProperty setRole:](v5, "setRole:", v4);

  return v5;
}

uint64_t _INPBUncompressFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setEntityType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v25, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INListRideOptionsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return off_1E228C3B0[a1];
}

__CFString *INGetRideStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228C408[a1];
}

void sub_18BFE9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34148(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34149(uint64_t a1)
{

}

BOOL _INPBRequestPaymentIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayer:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(_INPBCurrencyAmount);
        if (!PBReaderPlaceMark() || (_INPBCurrencyAmountReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrencyAmount:", v17, 0, 0);
        goto LABEL_33;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNote:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

void sub_18BFEC0D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _INPBIntegerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntegerValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntegerValue);
        if (!PBReaderPlaceMark() || !_INPBIntegerValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INModifyRelationship *INIntentSlotValueTransformFromModifyRelationship(void *a1)
{
  id v1;
  INModifyRelationship *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  INModifyRelationship *v8;

  if (a1)
  {
    v1 = a1;
    v2 = [INModifyRelationship alloc];
    objc_msgSend(v1, "targetRelationship");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB37E8];
    v6 = objc_msgSend(v1, "isRemoval");

    objc_msgSend(v5, "numberWithBool:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INModifyRelationship initWithTargetRelationship:isRemoval:](v2, "initWithTargetRelationship:isRemoval:", v4, v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

_INPBModifyRelationship *INIntentSlotValueTransformToModifyRelationship(void *a1)
{
  id v1;
  _INPBModifyRelationship *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBModifyRelationship);
    objc_msgSend(v1, "targetRelationship");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBModifyRelationship setTargetRelationship:](v2, "setTargetRelationship:", v4);

    objc_msgSend(v1, "isRemoval");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBModifyRelationship setIsRemoval:](v2, "setIsRemoval:", objc_msgSend(v5, "BOOLValue"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromModifyRelationships(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromModifyRelationship(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToModifyRelationships(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToModifyRelationship(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedModifyRelationshipFromModifyRelationship(void *a1)
{
  return a1;
}

uint64_t _INPBDeleteFilePermanentlyIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v25 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_43:
        objc_msgSend(a1, "setConfirm:", v25 != 0);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        objc_msgSend(a1, "setSuccess:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForPhotosIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBIntentMetadata *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_80;
      case 2u:
        v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateCreated:", v18, 0, 0);
        goto LABEL_80;
      case 3u:
        v18 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocationCreated:", v18, 0, 0);
        goto LABEL_80;
      case 5u:
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlbumName:", v18, 0, 0);
        goto LABEL_80;
      case 8u:
        v18 = objc_alloc_init(_INPBStringList);
        if (!PBReaderPlaceMark() || !_INPBStringListReadFrom(v18, a2))
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSearchTerm:", v18, 0, 0);
        goto LABEL_80;
      case 9u:
        if (v16 != 2)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
              goto LABEL_98;
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_99;
          }
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_48;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
          PBRepeatedInt32Add();
        }
        goto LABEL_83;
      case 0xAu:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = *v3;
              v30 = *(_QWORD *)(a2 + v29);
              if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
                break;
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_61;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_61:
            PBRepeatedInt32Add();
          }
LABEL_83:
          PBReaderRecallMark();
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (1)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
              break;
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_99;
          }
LABEL_98:
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_99:
          PBRepeatedInt32Add();
        }
        goto LABEL_81;
      case 0xBu:
        v18 = objc_alloc_init(_INPBContactList);
        if (!PBReaderPlaceMark() || !_INPBContactListReadFrom(v18, a2))
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPeopleInPhoto:", v18, 0, 0);
        goto LABEL_80;
      case 0xCu:
        v18 = objc_alloc_init(_INPBEventList);
        if (!PBReaderPlaceMark() || !_INPBEventListReadFrom(v18, a2))
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEvents:", v18, 0, 0);
        goto LABEL_80;
      case 0xDu:
        v18 = objc_alloc_init(_INPBPlaceList);
        if (!PBReaderPlaceMark() || !_INPBPlaceListReadFrom(v18, a2))
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaces:", v18, 0, 0);
        goto LABEL_80;
      case 0xEu:
        v18 = objc_alloc_init(_INPBActivityList);
        if (!PBReaderPlaceMark() || !_INPBActivityListReadFrom(v18, a2))
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setActivities:", v18, 0, 0);
        goto LABEL_80;
      case 0xFu:
        v18 = objc_alloc_init(_INPBGeographicalFeatureList);
        if (!PBReaderPlaceMark() || !_INPBGeographicalFeatureListReadFrom(v18, a2))
          goto LABEL_102;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGeographicalFeatures:", v18, 0, 0);
        goto LABEL_80;
      case 0x10u:
        v18 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMemoryName:", v18, 0, 0);
LABEL_80:

LABEL_81:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_102:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_81;
    }
  }
}

BOOL _INPBSetClimateSettingsInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBSendMessageIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBMessage *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBMessage);
        if (!PBReaderPlaceMark() || (_INPBMessageReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSentMessage:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBMessage);
    if (!PBReaderPlaceMark() || !_INPBMessageReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addSentMessages:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBEventListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBEvent);
    if (!PBReaderPlaceMark() || !_INPBEventReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addEvent:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForAccountsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAccountNickname:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_49:
        objc_msgSend(a1, "setAccountType:", v25);
        goto LABEL_55;
      case 5u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setOrganizationName:", v17, 0, 0);
LABEL_37:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_57:

        return 0;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_54:
        objc_msgSend(a1, "setRequestedBalanceType:", v32);
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

id INIntentSlotValueTransformFromCallRecordValue(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  INCallRecord *v32;
  uint64_t v33;
  void *v34;
  void *v35;

  v1 = a1;
  if (v1)
  {
    v32 = [INCallRecord alloc];
    objc_msgSend(v1, "identifier");
    v2 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dateCreated");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    if (v34)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "dateCreated");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromDateTime(v23);
      v24 = v3;
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "dateFromComponents:");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = 0;
    }
    v6 = objc_msgSend(v1, "hasCallType");
    v7 = objc_msgSend(v1, "callType");
    v35 = (void *)v2;
    if (v6 && (v7 - 2) <= 8)
      v29 = qword_18C311768[v7 - 2];
    else
      v29 = 0;
    v8 = objc_msgSend(v1, "hasCallCapability");
    v9 = objc_msgSend(v1, "callCapability");
    v10 = 2 * (v9 == 2);
    if (v9 == 1)
      v10 = 1;
    if (!v8)
      v10 = 0;
    v27 = v10;
    v11 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "callMetrics");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "value");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "callDuration");
    objc_msgSend(v11, "numberWithDouble:");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "unseen"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v11) = objc_msgSend(v1, "hasPreferredCallProvider");
    v12 = objc_msgSend(v1, "preferredCallProvider");
    v13 = 0;
    if ((_DWORD)v11)
    {
      v14 = (v12 - 2);
      if (v14 > 2)
        v13 = 0;
      else
        v13 = v14 + 1;
    }
    objc_msgSend(v1, "participants");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContactValues(v25);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "numberOfCalls");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromInteger(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "providerId");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "providerBundleId");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "isCallerIdBlocked"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = -[INCallRecord initWithIdentifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:](v32, "initWithIdentifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:", v35, v4, v29, v27, v28, v26, v13, v15, v17, v18, v19, v20);

    if (v34)
    {

    }
    v5 = (void *)v33;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

_INPBCallRecordValue *INIntentSlotValueTransformToCallRecordValue(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  _INPBCallRecordValue *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _INPBCallMetricsValue *v13;
  void *v14;
  float v15;
  _INPBCallMetrics *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v3 = a1;
  if (v3)
  {
    v4 = objc_alloc_init(_INPBCallRecordValue);
    objc_msgSend(v3, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setIdentifier:](v4, "setIdentifier:", v5);

    objc_msgSend(v3, "dateCreated");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v3, "dateCreated");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
        v1 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "dateCreated");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "components:fromDate:", 3178748, v2);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v8 = 0;
      }
      INIntentSlotValueTransformToDateTime(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBCallRecordValue setDateCreated:](v4, "setDateCreated:", v9);

      if (v7)
      {

      }
    }
    v10 = objc_msgSend(v3, "callRecordType") - 1;
    if (v10 > 7)
      v11 = 0x7FFFFFFFLL;
    else
      v11 = dword_18C311748[v10];
    -[_INPBCallRecordValue setCallType:](v4, "setCallType:", v11);
    objc_msgSend(v3, "callDuration");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = objc_alloc_init(_INPBCallMetricsValue);
      objc_msgSend(v3, "callDuration");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "floatValue");
      -[_INPBCallMetricsValue setCallDuration:](v13, "setCallDuration:", v15);

      v16 = objc_alloc_init(_INPBCallMetrics);
      -[_INPBCallMetrics setValue:](v16, "setValue:", v13);
      -[_INPBCallRecordValue setCallMetrics:](v4, "setCallMetrics:", v16);

    }
    objc_msgSend(v3, "unseen");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setUnseen:](v4, "setUnseen:", objc_msgSend(v17, "BOOLValue"));

    v18 = objc_msgSend(v3, "callCapability");
    if (v18 == 1)
      v19 = 1;
    else
      v19 = 0x7FFFFFFF;
    if (v18 == 2)
      v20 = 2;
    else
      v20 = v19;
    -[_INPBCallRecordValue setCallCapability:](v4, "setCallCapability:", v20);
    objc_msgSend(v3, "numberOfCalls");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToInteger(v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setNumberOfCalls:](v4, "setNumberOfCalls:", v22);

    v23 = objc_msgSend(v3, "preferredCallProvider");
    if ((unint64_t)(v23 - 1) >= 3)
      v24 = 0x7FFFFFFFLL;
    else
      v24 = (v23 + 1);
    -[_INPBCallRecordValue setPreferredCallProvider:](v4, "setPreferredCallProvider:", v24);
    objc_msgSend(v3, "providerId");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setProviderId:](v4, "setProviderId:", v25);

    objc_msgSend(v3, "providerBundleId");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setProviderBundleId:](v4, "setProviderBundleId:", v26);

    objc_msgSend(v3, "isCallerIdBlocked");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setIsCallerIdBlocked:](v4, "setIsCallerIdBlocked:", objc_msgSend(v27, "BOOLValue"));

    objc_msgSend(v3, "participants");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContactValues(v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCallRecordValue setParticipants:](v4, "setParticipants:", v29);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INIntentSlotValueTransformFromCallRecordValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCallRecordValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCallRecordValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCallRecordValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCallRecordValueFromCallRecordValue(void *a1)
{
  return a1;
}

uint64_t INWorkoutGoalUnitTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0xB) & (0x7FEu >> a1);
}

uint64_t INWorkoutGoalUnitTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0xA)
    return 0x7FFFFFFFLL;
  else
    return (a1 - 1);
}

uint64_t INWorkoutGoalUnitTypeGetFacadeType(unsigned __int8 a1, unsigned int a2)
{
  if (((a2 < 0xA) & a1) != 0)
    return a2 + 1;
  else
    return 0;
}

const __CFString *INWorkoutGoalUnitTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E228C560[a1 - 1];
}

uint64_t INWorkoutGoalUnitTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inch")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("meter")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("foot")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mile")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("yard")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("second")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("minute")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hour")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("joule")) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("kiloCalorie")))
  {
    v2 = 10;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWorkoutGoalUnitTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("inch");
      goto LABEL_13;
    case 2:
      v4 = CFSTR("meter");
      goto LABEL_13;
    case 3:
      v4 = CFSTR("foot");
      goto LABEL_13;
    case 4:
      v4 = CFSTR("mile");
      goto LABEL_13;
    case 5:
      v4 = CFSTR("yard");
      goto LABEL_13;
    case 6:
      v4 = CFSTR("second");
      goto LABEL_13;
    case 7:
      v4 = CFSTR("minute");
      goto LABEL_13;
    case 8:
      v4 = CFSTR("hour");
      goto LABEL_13;
    case 9:
      v4 = CFSTR("joule");
      goto LABEL_13;
    case 10:
      v4 = CFSTR("kilo calorie");
LABEL_13:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

id INIntentSlotValueTransformFromDouble(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromDoubleValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromDoubleValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1
    && (objc_msgSend(v1, "valueMetadata"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        INPrivacyEntitlementValidateValueMetadata(v3),
        v3,
        objc_msgSend(v2, "hasValue")))
  {
    v4 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v2, "value");
    objc_msgSend(v4, "numberWithDouble:");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

_INPBDouble *INIntentSlotValueTransformToDouble(void *a1)
{
  void *v1;
  _INPBDouble *v2;

  INIntentSlotValueTransformToDoubleValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBDouble);
    -[_INPBDouble addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBDoubleValue *INIntentSlotValueTransformToDoubleValue(void *a1)
{
  id v1;
  _INPBDoubleValue *v2;
  double v3;
  double v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBDoubleValue);
    objc_msgSend(v1, "doubleValue");
    v4 = v3;

    -[_INPBDoubleValue setValue:](v2, "setValue:", v4);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromDoubles(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDouble(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDoubles(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDouble(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromDoubleValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDoubleValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDoubleValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDoubleValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBDouble *INIntentSlotValueRedactedDoubleFromDouble(void *a1, uint64_t a2)
{
  id v3;
  _INPBDouble *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = objc_alloc_init(_INPBDouble);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v3, "values", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = *(_QWORD *)v15;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
      objc_msgSend(v10, "valueMetadata");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = INPrivacyEntitlementOptionsForValueMetadata(v11);

      if ((v12 & a2) == 0)
      {
        if (!v10)
          continue;
        -[_INPBDouble addValue:](v4, "addValue:", v10);
      }

    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  }
  while (v7);
LABEL_13:

LABEL_15:
  return v4;
}

id INIntentSlotValueRedactedDoublesFromDoubles(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedDoubleFromDouble(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

uint64_t _INPBCreateTaskListIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTaskList *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTaskList);
        if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedTaskList:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDictionaryReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBPair *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBPair);
        if (!PBReaderPlaceMark() || !_INPBPairReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPair:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INVoicemailPlaybackStateHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

uint64_t INVoicemailPlaybackStateGetBackingType(unint64_t a1)
{
  if (a1 < 4)
    return (a1 + 1);
  else
    return 0x7FFFFFFFLL;
}

uint64_t INVoicemailPlaybackStateGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 2);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INVoicemailPlaybackStateGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E228C5B0[a1 - 1];
}

uint64_t INVoicemailPlaybackStateWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("stopped")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("playing")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("completed")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVoicemailPlaybackStateGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("completed");
      break;
    case 2:
      v4 = CFSTR("playing");
      break;
    case 1:
      v4 = CFSTR("stopped");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

__CFString *INQueryHealthSampleIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E228C680[a1];
}

uint64_t INPrivacyEntitlementOptionsMissingForExtension(char a1, _OWORD *a2, void *a3)
{
  id v5;
  uint64_t v6;
  __CFDictionary *Mutable;
  __int128 v8;
  int v9;
  __int128 v10;
  __SecTask *v11;
  __SecTask *v12;
  CFTypeRef v13;
  void *v14;
  CFErrorRef v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  void *v19;
  void *v20;
  NSObject *v22;
  CFErrorRef error;
  audit_token_t token;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if ((a1 & 1) != 0)
  {
    Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0DB1088], (const void *)*MEMORY[0x1E0C9AE40]);
    v8 = a2[1];
    *(_OWORD *)token.val = *a2;
    *(_OWORD *)&token.val[4] = v8;
    v9 = TCCAccessCheckAuditToken();
    CFRelease(Mutable);
    v6 = 0;
    if (v9 == 1)
      goto LABEL_15;
    v10 = a2[1];
    *(_OWORD *)token.val = *a2;
    *(_OWORD *)&token.val[4] = v10;
    v11 = SecTaskCreateWithAuditToken(0, &token);
    if (!v11)
    {
      v17 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        token.val[0] = 136315138;
        *(_QWORD *)&token.val[1] = "_INPrivacyEntitlementHasContactsDBAccessEntitlement";
        _os_log_error_impl(&dword_18BEBC000, v17, OS_LOG_TYPE_ERROR, "%s SecTaskCreateWithAuditToken() failed, assuming the extension process is NOT entitled.", (uint8_t *)&token, 0xCu);
      }
      v14 = 0;
      goto LABEL_14;
    }
    v12 = v11;
    error = 0;
    v13 = SecTaskCopyValueForEntitlement(v11, CFSTR("com.apple.Contacts.database-allow"), &error);
    v14 = (void *)v13;
    v15 = error;
    if (error)
    {
      v16 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        token.val[0] = 136315394;
        *(_QWORD *)&token.val[1] = "_INPrivacyEntitlementHasContactsDBAccessEntitlement";
        LOWORD(token.val[3]) = 2114;
        *(_QWORD *)((char *)&token.val[3] + 2) = v15;
        _os_log_error_impl(&dword_18BEBC000, v16, OS_LOG_TYPE_ERROR, "%s Failed reading entitlement with error: %{public}@", (uint8_t *)&token, 0x16u);
      }

      CFRelease(error);
    }
    else
    {
      if (!v13 || (objc_opt_respondsToSelector() & 1) != 0)
        goto LABEL_10;
      v22 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        token.val[0] = 136315394;
        *(_QWORD *)&token.val[1] = "_INPrivacyEntitlementHasContactsDBAccessEntitlement";
        LOWORD(token.val[3]) = 2114;
        *(_QWORD *)((char *)&token.val[3] + 2) = CFSTR("com.apple.Contacts.database-allow");
        _os_log_error_impl(&dword_18BEBC000, v22, OS_LOG_TYPE_ERROR, "%s Expected a Boolean value for the %{public}@ entitlement, but found something else.", (uint8_t *)&token, 0x16u);
      }

    }
    v14 = 0;
LABEL_10:
    CFRelease(v12);
LABEL_14:
    v18 = objc_msgSend(v14, "BOOLValue");

    v6 = v18 ^ 1u;
    goto LABEL_15;
  }
  v6 = 0;
LABEL_15:
  if ((a1 & 2) != 0)
  {
    v19 = (void *)MEMORY[0x1E0C9E3C8];
    objc_msgSend(v5, "bundleIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v19) = objc_msgSend(v19, "authorizationStatusForBundleIdentifier:", v20);

    if (v19 < 3)
      v6 |= 2uLL;
  }

  return v6;
}

uint64_t INPrivacyEntitlementValidateIntentMetadata(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v1 = a1;
  v2 = objc_msgSend(v1, "requiredEntitlementsCount");
  if (v2)
  {
    v3 = v2;
    for (i = 0; i != v3; ++i)
      objc_msgSend(v1, "requiredEntitlementAtIndex:", i);
  }

  return 1;
}

uint64_t INPrivacyEntitlementOptionsForIntentMetadata(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  uint64_t v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "requiredEntitlementsCount");
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    for (i = 0; i != v3; ++i)
    {
      v6 = objc_msgSend(v1, "requiredEntitlementAtIndex:", i);
      v7 = v4 | 1;
      if (v6 != 1)
        v7 = v4;
      if (v6 == 2)
        v4 |= 2uLL;
      else
        v4 = v7;
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t INPrivacyEntitlementOptionsForValueMetadata(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  uint64_t v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "requiredEntitlementsCount");
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    for (i = 0; i != v3; ++i)
    {
      v6 = objc_msgSend(v1, "requiredEntitlementAtIndex:", i);
      v7 = v4 | 1;
      if (v6 != 1)
        v7 = v4;
      if (v6 == 2)
        v4 |= 2uLL;
      else
        v4 = v7;
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t _INPBDialingContactReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDialingContactValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDialingContactValue);
        if (!PBReaderPlaceMark() || !_INPBDialingContactValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBResumeTimerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTimer *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addResumedTimers:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromJSONDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v10;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasJsonString"))
  {
    objc_msgSend(v2, "jsonString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      objc_msgSend(v3, "dataUsingEncoding:", 4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 0;
      objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v5, 0, &v10);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v6;
      v8 = 0;
      if (!v10)
        v8 = v6;

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

_INPBJSONDictionary *INIntentSlotValueTransformToJSONDictionary(uint64_t a1)
{
  void *v1;
  _INPBJSONDictionary *v2;
  void *v3;
  uint64_t v5;

  if (a1)
  {
    v5 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", a1, 0, &v5);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = 0;
    if (!v5)
    {
      v2 = objc_alloc_init(_INPBJSONDictionary);
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v1, 4);
      -[_INPBJSONDictionary setJsonString:](v2, "setJsonString:", v3);

    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

__CFString *INStartAudioCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return off_1E228C748[a1];
}

uint64_t _INPBCopyFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _INPBString *v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_50;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_52;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_52:
        objc_msgSend(a1, "setOverwrite:", v19 != 0);
        goto LABEL_62;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_56:
        objc_msgSend(a1, "setSuccess:", v26 != 0);
        goto LABEL_62;
      case 3u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v36 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
        else
          v36 = v32;
LABEL_61:
        objc_msgSend(a1, "setEntityType:", v36);
        goto LABEL_62;
      case 4u:
        v37 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v37, a2) & 1) == 0)
          goto LABEL_64;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v37, 0, 0);
        goto LABEL_48;
      case 5u:
        v37 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v37, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDestinationName:", v37, 0, 0);
LABEL_48:

LABEL_62:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_64:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

uint64_t _INPBPaymentMethodReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBPaymentMethodValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBPaymentMethodValue);
        if (!PBReaderPlaceMark() || !_INPBPaymentMethodValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INMessageReaction *INIntentSlotValueTransformFromMessageReaction(void *a1)
{
  id v1;
  INMessageReaction *v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  INMessageReaction *v10;

  if (a1)
  {
    v1 = a1;
    v2 = [INMessageReaction alloc];
    v3 = objc_msgSend(v1, "hasReactionType");
    v4 = objc_msgSend(v1, "reactionType");
    if (v3 && (v4 - 1) <= 0xA)
      v5 = qword_18C3116C8[v4 - 1];
    else
      v5 = 0;
    objc_msgSend(v1, "reactionDescription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "emoji");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "sticker");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromSticker(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[INMessageReaction initWithReactionType:reactionDescription:emoji:sticker:](v2, "initWithReactionType:reactionDescription:emoji:sticker:", v5, v6, v7, v9);

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

_INPBMessageReaction *INIntentSlotValueTransformToMessageReaction(void *a1)
{
  id v1;
  _INPBMessageReaction *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMessageReaction);
    -[_INPBMessageReaction setReactionType:](v2, "setReactionType:", INMessageReactionTypeGetBackingType(objc_msgSend(v1, "reactionType")));
    objc_msgSend(v1, "reactionDescription");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageReaction setReactionDescription:](v2, "setReactionDescription:", v3);

    objc_msgSend(v1, "emoji");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageReaction setEmoji:](v2, "setEmoji:", v4);

    objc_msgSend(v1, "sticker");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToSticker(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessageReaction setSticker:](v2, "setSticker:", v6);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromMessageReactions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromMessageReaction(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToMessageReactions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToMessageReaction(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedMessageReactionFromMessageReaction(void *a1)
{
  return a1;
}

BOOL _INPBResumeWorkoutIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL INMessageReactionTypeHasBackingType(uint64_t a1)
{
  _BOOL8 result;

  switch(a1)
  {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
      result = 1;
      break;
    default:
      result = a1 == 1 || a1 == 2;
      break;
  }
  return result;
}

uint64_t INMessageReactionTypeGetBackingType(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  switch(a1)
  {
    case 1000:
      result = 1;
      break;
    case 1001:
      result = 2;
      break;
    case 1002:
      result = 3;
      break;
    case 1003:
      result = 4;
      break;
    case 1004:
      result = 5;
      break;
    case 1005:
      result = 6;
      break;
    case 1006:
      result = 7;
      break;
    case 1007:
      result = 8;
      break;
    case 1008:
      result = 9;
      break;
    default:
      if (a1 == 2)
        v2 = 11;
      else
        v2 = 0x7FFFFFFF;
      if (a1 == 1)
        result = 10;
      else
        result = v2;
      break;
  }
  return result;
}

uint64_t INMessageReactionTypeGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 1) <= 0xA)
    return qword_18C3116C8[a2 - 1];
  else
    return 0;
}

const __CFString *INMessageReactionTypeGetName(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;
  const __CFString *v3;

  v1 = a1 - 1000;
  result = CFSTR("tapbackLikedReaction");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("tapbackDislikedReaction");
      break;
    case 2:
      result = CFSTR("tapbackEmphasizedReaction");
      break;
    case 3:
      result = CFSTR("tapbackLovedReaction");
      break;
    case 4:
      result = CFSTR("tapbackQuestionedReaction");
      break;
    case 5:
      result = CFSTR("tapbackLaughedReaction");
      break;
    case 6:
      result = CFSTR("droppedSticker");
      break;
    case 7:
      result = CFSTR("tapbackSticker");
      break;
    case 8:
      result = CFSTR("tapbackGeneratedEmoji");
      break;
    default:
      v3 = CFSTR("generic");
      if (CFSTR("tapbackLikedReaction") != (__CFString *)2)
        v3 = CFSTR("unknown");
      if (CFSTR("tapbackLikedReaction") == (__CFString *)1)
        result = CFSTR("emoji");
      else
        result = v3;
      break;
  }
  return result;
}

uint64_t INMessageReactionTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackLikedReaction")) & 1) != 0)
  {
    v2 = 1000;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackDislikedReaction")) & 1) != 0)
  {
    v2 = 1001;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackEmphasizedReaction")) & 1) != 0)
  {
    v2 = 1002;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackLovedReaction")) & 1) != 0)
  {
    v2 = 1003;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackQuestionedReaction")) & 1) != 0)
  {
    v2 = 1004;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackLaughedReaction")) & 1) != 0)
  {
    v2 = 1005;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("droppedSticker")) & 1) != 0)
  {
    v2 = 1006;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackSticker")) & 1) != 0)
  {
    v2 = 1007;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tapbackGeneratedEmoji")) & 1) != 0)
  {
    v2 = 1008;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("emoji")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("generic")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessageReactionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1000:
      v4 = CFSTR("tapback liked reaction");
      goto LABEL_15;
    case 1001:
      v4 = CFSTR("tapback disliked reaction");
      goto LABEL_15;
    case 1002:
      v4 = CFSTR("tapback emphasized reaction");
      goto LABEL_15;
    case 1003:
      v4 = CFSTR("tapback loved reaction");
      goto LABEL_15;
    case 1004:
      v4 = CFSTR("tapback questioned reaction");
      goto LABEL_15;
    case 1005:
      v4 = CFSTR("tapback laughed reaction");
      goto LABEL_15;
    case 1006:
      v4 = CFSTR("dropped sticker");
      goto LABEL_15;
    case 1007:
      v4 = CFSTR("tapback sticker");
      goto LABEL_15;
    case 1008:
      v4 = CFSTR("tapback generated emoji");
      goto LABEL_15;
    default:
      if (a1 == 1)
      {
        v4 = CFSTR("emoji");
        goto LABEL_15;
      }
      if (a1 == 2)
      {
        v4 = CFSTR("generic");
LABEL_15:
        INLocalizedStringWithLocalizer(v4, v4, v3);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_16;
      }
      v5 = 0;
LABEL_16:

      return v5;
  }
}

INObject *INIntentSlotValueTransformFromCustomObject(void *a1)
{
  id v1;
  INObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = [INObject alloc];
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "displayString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_intents_decodeFromProto");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "pronunciationHint");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INObject initWithIdentifier:displayString:pronunciationHint:](v2, "initWithIdentifier:displayString:pronunciationHint:", v3, v5, v6);

    objc_msgSend(v1, "alternatives");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataStrings(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[INObject setAlternativeSpeakableMatches:](v7, "setAlternativeSpeakableMatches:", v9);

    objc_msgSend(v1, "subtitleString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_intents_decodeFromProto");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[INObject setSubtitleString:](v7, "setSubtitleString:", v11);

    objc_msgSend(v1, "displayImage");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromImageValue(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[INObject setDisplayImage:](v7, "setDisplayImage:", v13);

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

_INPBCustomObject *INIntentSlotValueTransformToCustomObject(void *a1)
{
  id v1;
  _INPBCustomObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBCustomObject);
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCustomObject setIdentifier:](v2, "setIdentifier:", v3);

    objc_msgSend(v1, "displayString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_intents_encodeForProto");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCustomObject setDisplayString:](v2, "setDisplayString:", v5);

    objc_msgSend(v1, "pronunciationHint");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCustomObject setPronunciationHint:](v2, "setPronunciationHint:", v6);

    objc_msgSend(v1, "alternativeSpeakableMatches");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v8 = v7;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    v9 = v8;

    INIntentSlotValueTransformToDataStrings(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBCustomObject setAlternatives:](v2, "setAlternatives:", v10);
    objc_msgSend(v1, "subtitleString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_intents_encodeForProto");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCustomObject setSubtitleString:](v2, "setSubtitleString:", v12);

    objc_msgSend(v1, "displayImage");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToImageValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCustomObject setDisplayImage:](v2, "setDisplayImage:", v14);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromCustomObjects(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromCustomObject(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToCustomObjects(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToCustomObject(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedCustomObjectFromCustomObject(void *a1)
{
  return a1;
}

id INIntentCreate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  objc_class *v9;
  BOOL v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  objc_class *v15;
  id v17;
  id v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v19 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v4, 0, &v19);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v19;
    if (v5)
    {
      INIntentCreateFromDictionary(v3, v5);
      v7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_22:

      goto LABEL_23;
    }
  }
  else
  {
    v6 = 0;
  }
  if (v3)
  {
    INIntentSchemaGetIntentDescriptionWithType(v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v8;
    if (v8)
    {
      v9 = (objc_class *)objc_msgSend(v8, "dataClass");
      if (v9)
        v10 = v4 == 0;
      else
        v10 = 1;
      if (v10)
        v11 = 0;
      else
        v11 = (id)objc_msgSend([v9 alloc], "initWithData:", v4);
      v15 = (objc_class *)objc_msgSend(v5, "facadeClass");
      v7 = 0;
      if (v15 && v11)
        v7 = (id)objc_msgSend([v15 alloc], "initWithIdentifier:backingStore:", 0, v11);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      INSchemaWithTypeName(v3, &v18, &v17);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v18;
      v13 = v17;
      if (v12)
      {
        v7 = -[INIntent _initWithIdentifier:schema:name:data:]([INIntent alloc], "_initWithIdentifier:schema:name:data:", 0, v12, v11, v4);
        objc_msgSend(v12, "_mainBundleIdentifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "_setLaunchId:", v14);

      }
      else
      {
        v7 = 0;
      }

    }
    goto LABEL_22;
  }
  v7 = 0;
LABEL_23:

  return v7;
}

INAppIntent *INIntentCreateFromDictionary(void *a1, void *a2)
{
  NSString *v3;
  id v4;
  void *v5;
  INAppIntent *v6;
  void *v7;
  objc_class *v8;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("appIntentIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = -[INAppIntent initWithJSONDictionary:]([INAppIntent alloc], "initWithJSONDictionary:", v4);
  }
  else
  {
    if (!v3)
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("typeName"));
      v3 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (!v3)
      {
        v6 = 0;
        goto LABEL_10;
      }
    }
    INIntentSchemaGetIntentDescriptionWithType(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (objc_class *)objc_msgSend(v7, "facadeClass");
    if (v8 || (v8 = NSClassFromString(v3)) != 0)
    {
      v6 = (INAppIntent *)objc_alloc_init(v8);
    }
    else
    {
      v14 = 0;
      v15 = 0;
      INSchemaWithTypeName(v3, &v15, &v14);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v15;
      v12 = v14;
      v6 = -[INIntent _initWithIdentifier:schema:name:data:]([INIntent alloc], "_initWithIdentifier:schema:name:data:", 0, v10, v11, 0);

      objc_msgSend(v10, "_mainBundleIdentifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[INAppIntent _setLaunchId:](v6, "_setLaunchId:", v13);

    }
    -[INIntent _updateWithJSONDictionary:](v6, "_updateWithJSONDictionary:", v4);

  }
LABEL_10:

  return v6;
}

id INIntentResponseCreate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  char v7;
  void *v8;
  void *v9;
  id v10;
  _INPBIntentResponse *v11;
  _INPBIntentResponsePayloadSuccess *v12;
  objc_class *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  id v18;
  id v19;

  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v6 = 0;
    v5 = 0;
LABEL_6:
    v7 = 1;
    if (!v3)
      goto LABEL_18;
    goto LABEL_7;
  }
  v19 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v4, 0, &v19);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v19;
  if (!v5)
    goto LABEL_6;

  if (v3)
  {
    v4 = 0;
    v7 = 0;
    goto LABEL_7;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("typeName"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v4 = 0;
  if (!v3)
  {
LABEL_18:
    v15 = 0;
    goto LABEL_19;
  }
LABEL_7:
  INIntentSchemaGetIntentResponseDescriptionWithType(v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "facadeClass")
    || (v17 = 0,
        v18 = 0,
        INSchemaWithTypeName(v3, &v18, &v17),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = v18,
        v9,
        v10,
        v9))
  {
    v11 = -[_INPBIntentResponse initWithData:]([_INPBIntentResponse alloc], "initWithData:", v4);
    if (!-[_INPBIntentResponse hasPayloadSuccess](v11, "hasPayloadSuccess"))
    {
      v12 = objc_alloc_init(_INPBIntentResponsePayloadSuccess);
      -[_INPBIntentResponsePayloadSuccess setResponseTypeName:](v12, "setResponseTypeName:", v3);
      -[_INPBIntentResponse setPayloadSuccess:](v11, "setPayloadSuccess:", v12);

    }
    v13 = (objc_class *)objc_msgSend(v8, "facadeClass");
    if (!v13)
      v13 = (objc_class *)objc_opt_class();
    v14 = (void *)objc_msgSend([v13 alloc], "initWithBackingStore:", v11);
    v15 = v14;
    if ((v7 & 1) == 0)
      objc_msgSend(v14, "_updateWithJSONDictionary:", v5);

  }
  else
  {
    v15 = 0;
  }

LABEL_19:
  return v15;
}

uint64_t INIntentResponseIsAutoSendFailure()
{
  return 0;
}

uint64_t INIntentResponseIsFailure(void *a1)
{
  unint64_t v1;

  v1 = objc_msgSend(a1, "_intentResponseCode");
  return (v1 < 7) & (0x61u >> v1);
}

__CFString *INSearchForNotebookItemsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228C7B0[a1];
}

__CFString *INSetClimateSettingsInCarIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228C7E0[a1];
}

uint64_t _INPBPaymentMethodValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_41:
        objc_msgSend(a1, "setType:", v25);
        goto LABEL_42;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v17);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && (_INPBImageValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setIcon:", v17, 0, 0);
LABEL_36:

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIdentificationHint:", v17);
        goto LABEL_36;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

id _INVoiceShortcutError(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, *MEMORY[0x1E0CB2938]);

  if (v5)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0CB3388]);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IntentsErrorDomain"), a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t _INPBSetAudioSourceInCarIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);

      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_46;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_49:
        objc_msgSend(a1, "setAudioSource:", v32);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_44:
        objc_msgSend(a1, "setRelativeAudioSourceReference:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  _INPBIntentResponsePayloadSuccess *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_56:
        objc_msgSend(a1, "setType:", v23);
        goto LABEL_65;
      case 2u:
        v25 = objc_alloc_init(_INPBIntentResponsePayloadSuccess);
        if (!PBReaderPlaceMark() || (_INPBIntentResponsePayloadSuccessReadFrom(v25, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadSuccess:", v25, 0, 0);
        goto LABEL_37;
      case 3u:
        v25 = objc_alloc_init(_INPBIntentResponsePayloadFailure);
        if (!PBReaderPlaceMark() || (_INPBIntentResponsePayloadFailureReadFrom(v25, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayloadFailure:", v25, 0, 0);
        goto LABEL_37;
      case 4u:
        v25 = objc_alloc_init(_INPBUserActivity);
        if (PBReaderPlaceMark() && _INPBUserActivityReadFrom(v25, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUserActivity:", v25, 0, 0);
LABEL_37:

LABEL_65:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_60:
        objc_msgSend(a1, "setRequiresAuthentication:", v28 != 0);
        goto LABEL_65;
      case 6u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_64:
        objc_msgSend(a1, "setRequiresProtectedData:", v34 != 0);
        goto LABEL_65;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_65;
    }
  }
}

const __CFString *INSearchForMessagesIntentResponseCodeGetName(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 0:
      result = CFSTR("INSearchForMessagesIntentResponseCodeUnspecified");
      break;
    case 1:
      result = CFSTR("INSearchForMessagesIntentResponseCodeReady");
      break;
    case 2:
      result = CFSTR("INSearchForMessagesIntentResponseCodeInProgress");
      break;
    case 3:
      result = CFSTR("INSearchForMessagesIntentResponseCodeSuccess");
      break;
    case 4:
      result = CFSTR("INSearchForMessagesIntentResponseCodeFailure");
      break;
    case 5:
      result = CFSTR("INSearchForMessagesIntentResponseCodeFailureRequiringAppLaunch");
      break;
    case 6:
      result = CFSTR("INSearchForMessagesIntentResponseCodeFailureMessageServiceNotAvailable");
      break;
    case 7:
      result = CFSTR("INSearchForMessagesIntentResponseCodeFailureMessageTooManyResults");
      break;
    case 8:
      result = CFSTR("INSearchForMessagesIntentResponseCodeFailureRequiringInAppAuthentication");
      break;
    default:
      if (a1 == 1000)
        result = CFSTR("INSearchForMessagesIntentResponseCodeFailureScreenTimeRestrictionEnabled");
      else
        result = 0;
      break;
  }
  return result;
}

id INCacheableGetSerializationQueue()
{
  if (INCacheableGetSerializationQueue_onceToken != -1)
    dispatch_once(&INCacheableGetSerializationQueue_onceToken, &__block_literal_global_39801);
  return (id)INCacheableGetSerializationQueue_queue;
}

uint64_t INMessageAttributeHasBackingType(unint64_t a1)
{
  return (a1 < 6) & (0x3Eu >> a1);
}

uint64_t INMessageAttributeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INMessageAttributeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 4)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INMessageAttributeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E228C960[a1 - 1];
}

uint64_t INMessageAttributeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("read")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("unread")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("flagged")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("unflagged")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("played")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessageAttributeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("read");
      goto LABEL_8;
    case 2:
      v4 = CFSTR("unread");
      goto LABEL_8;
    case 3:
      v4 = CFSTR("flagged");
      goto LABEL_8;
    case 4:
      v4 = CFSTR("unflagged");
      goto LABEL_8;
    case 5:
      v4 = CFSTR("played");
LABEL_8:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBIntegerListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setConditionType:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBInteger);
    if (!PBReaderPlaceMark() || !_INPBIntegerReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDataString:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C00BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _INPBDistanceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDistanceValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDistanceValue);
        if (!PBReaderPlaceMark() || !_INPBDistanceValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INDateSearchTypeHasBackingType(unint64_t a1)
{
  return a1 < 4;
}

uint64_t INDateSearchTypeGetBackingType(unint64_t a1)
{
  if (a1 >= 4)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1);
}

uint64_t INDateSearchTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 3;
  v3 = 2;
  if (a2 != 20)
    v3 = a2 == 10;
  if (a2 != 30)
    v2 = v3;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INDateSearchTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E228C9D0[a1 - 1];
}

uint64_t INDateSearchTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("byDueDate")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("byModifiedDate")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("byCreatedDate")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INDateSearchTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("by created date");
      break;
    case 2:
      v4 = CFSTR("by modified date");
      break;
    case 1:
      v4 = CFSTR("by due date");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

BOOL INCallRecordTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

uint64_t INCallRecordTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return 0x7FFFFFFFLL;
  else
    return dword_18C311748[a1 - 1];
}

uint64_t INCallRecordTypeGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 2) <= 8)
    return qword_18C311768[a2 - 2];
  else
    return 0;
}

const __CFString *INCallRecordTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E228C9E8[a1 - 1];
}

uint64_t INCallRecordTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("outgoing")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("missed")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("received")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("latest")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("voicemail")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ringing")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inProgress")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("onHold")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallRecordTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("outgoing");
      goto LABEL_11;
    case 2:
      v4 = CFSTR("missed");
      goto LABEL_11;
    case 3:
      v4 = CFSTR("received");
      goto LABEL_11;
    case 4:
      v4 = CFSTR("latest");
      goto LABEL_11;
    case 5:
      v4 = CFSTR("voicemail");
      goto LABEL_11;
    case 6:
      v4 = CFSTR("ringing");
      goto LABEL_11;
    case 7:
      v4 = CFSTR("in progress");
      goto LABEL_11;
    case 8:
      v4 = CFSTR("on hold");
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBBillDetailsValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(_INPBBillPayeeValue);
        if (!PBReaderPlaceMark() || !_INPBBillPayeeValueReadFrom(v17, a2))
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBillPayee:", v17, 0, 0);
        goto LABEL_42;
      case 3u:
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2))
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAmountDue:", v17, 0, 0);
        goto LABEL_42;
      case 4u:
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2))
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMinimumDue:", v17, 0, 0);
        goto LABEL_42;
      case 5u:
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2))
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLateFee:", v17, 0, 0);
        goto LABEL_42;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (!PBReaderPlaceMark() || (_INPBDateTimeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDueDate:", v17, 0, 0);
        goto LABEL_42;
      case 7u:
        v17 = objc_alloc_init(_INPBDateTime);
        if (PBReaderPlaceMark() && (_INPBDateTimeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPaymentDate:", v17, 0, 0);
LABEL_42:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_70:

        return 0;
      case 8u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_63:
        objc_msgSend(a1, "setBillType:", v25);
        goto LABEL_43;
      case 9u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_68:
        objc_msgSend(a1, "setStatus:", v32);
        goto LABEL_43;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

INContactRelationship *INIntentSlotValueTransformFromContactRelationship(void *a1)
{
  id v1;
  INContactRelationship *v2;
  void *v3;
  void *v4;
  INContactRelationship *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INContactRelationship alloc];
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "relation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = -[INContactRelationship initWithName:relation:](v2, "initWithName:relation:", v3, v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBContactRelationship *INIntentSlotValueTransformToContactRelationship(void *a1)
{
  id v1;
  _INPBContactRelationship *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBContactRelationship);
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactRelationship setName:](v2, "setName:", v3);

    objc_msgSend(v1, "relation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBContactRelationship setRelation:](v2, "setRelation:", v4);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromContactRelationships(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromContactRelationship(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToContactRelationships(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToContactRelationship(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedContactRelationshipFromContactRelationship(void *a1)
{
  return a1;
}

INTemporalEventTrigger *INIntentSlotValueTransformFromTemporalEventTrigger(void *a1)
{
  id v1;
  INTemporalEventTrigger *v2;
  void *v3;
  void *v4;
  INTemporalEventTrigger *v5;

  if (a1)
  {
    v1 = a1;
    v2 = [INTemporalEventTrigger alloc];
    objc_msgSend(v1, "dateTime");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromDateTimeRangeValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[INTemporalEventTrigger initWithDateComponentsRange:](v2, "initWithDateComponentsRange:", v4);

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

_INPBTemporalEventTrigger *INIntentSlotValueTransformToTemporalEventTrigger(void *a1)
{
  id v1;
  _INPBTemporalEventTrigger *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBTemporalEventTrigger);
    objc_msgSend(v1, "dateComponentsRange");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToDateTimeRangeValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTemporalEventTrigger setDateTime:](v2, "setDateTime:", v4);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromTemporalEventTriggers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTemporalEventTrigger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTemporalEventTriggers(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTemporalEventTrigger(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTemporalEventTriggerFromTemporalEventTrigger(void *a1)
{
  return a1;
}

uint64_t INHomeDeviceTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0x2E) & (0x3FFFFFFFFFFEuLL >> a1);
}

uint64_t INHomeDeviceTypeGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x2C)
    return 0x7FFFFFFFLL;
  else
    return dword_18C3117B0[a1 - 1];
}

uint64_t INHomeDeviceTypeGetFacadeType(int a1, unsigned int a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 0x31)
  {
    if (a1)
      return qword_18C311868[a2];
  }
  return result;
}

const __CFString *INHomeDeviceTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x2C)
    return CFSTR("unknown");
  else
    return off_1E228CB20[a1 - 1];
}

uint64_t INHomeDeviceTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lightbulb")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("switch")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("thermostat")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("garageDoorOpener")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fan")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("outlet")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("doorLock")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airQualitySensor")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("battery")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonDioxideSensor")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carbonMonoxideSensor")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("contactSensor")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("door")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humiditySensor")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("leakSensor")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lightSensor")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motionSensor")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("occupancySensor")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("securitySystem")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("smokeSensor")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("temperatureSensor")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("window")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shades")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ipCamera")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("microphone")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("speaker")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motorizedDoor")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("motorizedWindow")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("heaterCooler")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("humidifierDehumidifier")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("slat")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sprinkler")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("valve")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("faucet")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shower")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("television")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("custom")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("doorBell")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airPurifier")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("filter")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AppleTV")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cameraRecording")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sensor")) & 1) != 0)
  {
    v2 = 43;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("airportExpress")) & 1) != 0)
  {
    v2 = 44;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("sink")))
  {
    v2 = 45;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INHomeDeviceTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("lightbulb");
      goto LABEL_48;
    case 2:
      v4 = CFSTR("switch");
      goto LABEL_48;
    case 3:
      v4 = CFSTR("thermostat");
      goto LABEL_48;
    case 4:
      v4 = CFSTR("garage door opener");
      goto LABEL_48;
    case 5:
      v4 = CFSTR("fan");
      goto LABEL_48;
    case 6:
      v4 = CFSTR("outlet");
      goto LABEL_48;
    case 7:
      v4 = CFSTR("door lock");
      goto LABEL_48;
    case 8:
      v4 = CFSTR("air quality sensor");
      goto LABEL_48;
    case 9:
      v4 = CFSTR("battery");
      goto LABEL_48;
    case 10:
      v4 = CFSTR("carbon dioxide sensor");
      goto LABEL_48;
    case 11:
      v4 = CFSTR("carbon monoxide sensor");
      goto LABEL_48;
    case 12:
      v4 = CFSTR("contact sensor");
      goto LABEL_48;
    case 13:
      v4 = CFSTR("door");
      goto LABEL_48;
    case 14:
      v4 = CFSTR("humidity sensor");
      goto LABEL_48;
    case 15:
      v4 = CFSTR("leak sensor");
      goto LABEL_48;
    case 16:
      v4 = CFSTR("light sensor");
      goto LABEL_48;
    case 17:
      v4 = CFSTR("motion sensor");
      goto LABEL_48;
    case 18:
      v4 = CFSTR("occupancy sensor");
      goto LABEL_48;
    case 19:
      v4 = CFSTR("security system");
      goto LABEL_48;
    case 20:
      v4 = CFSTR("smoke sensor");
      goto LABEL_48;
    case 21:
      v4 = CFSTR("temperature sensor");
      goto LABEL_48;
    case 22:
      v4 = CFSTR("window");
      goto LABEL_48;
    case 23:
      v4 = CFSTR("shades");
      goto LABEL_48;
    case 24:
      v4 = CFSTR("ip camera");
      goto LABEL_48;
    case 25:
      v4 = CFSTR("microphone");
      goto LABEL_48;
    case 26:
      v4 = CFSTR("speaker");
      goto LABEL_48;
    case 27:
      v4 = CFSTR("motorized door");
      goto LABEL_48;
    case 28:
      v4 = CFSTR("motorized window");
      goto LABEL_48;
    case 29:
      v4 = CFSTR("heater cooler");
      goto LABEL_48;
    case 30:
      v4 = CFSTR("humidifier dehumidifier");
      goto LABEL_48;
    case 31:
      v4 = CFSTR("slat");
      goto LABEL_48;
    case 32:
      v4 = CFSTR("sprinkler");
      goto LABEL_48;
    case 33:
      v4 = CFSTR("valve");
      goto LABEL_48;
    case 34:
      v4 = CFSTR("faucet");
      goto LABEL_48;
    case 35:
      v4 = CFSTR("shower");
      goto LABEL_48;
    case 36:
      v4 = CFSTR("television");
      goto LABEL_48;
    case 37:
      v4 = CFSTR("custom");
      goto LABEL_48;
    case 38:
      v4 = CFSTR("door bell");
      goto LABEL_48;
    case 39:
      v4 = CFSTR("air purifier");
      goto LABEL_48;
    case 40:
      v4 = CFSTR("filter");
      goto LABEL_48;
    case 41:
      v4 = CFSTR("Apple TV");
      goto LABEL_48;
    case 42:
      v4 = CFSTR("camera recording");
      goto LABEL_48;
    case 43:
      v4 = CFSTR("sensor");
      goto LABEL_48;
    case 44:
      v4 = CFSTR("airport express");
      goto LABEL_48;
    case 45:
      v4 = CFSTR("sink");
LABEL_48:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL INPaymentMethodTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

uint64_t INPaymentMethodTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 8)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INPaymentMethodTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 7)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INPaymentMethodTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E228CC88[a1 - 1];
}

uint64_t INPaymentMethodTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("checking")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("savings")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("brokerage")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("debit")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("credit")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("prepaid")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("store")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("applePay")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPaymentMethodTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("checking");
      goto LABEL_11;
    case 2:
      v4 = CFSTR("savings");
      goto LABEL_11;
    case 3:
      v4 = CFSTR("brokerage");
      goto LABEL_11;
    case 4:
      v4 = CFSTR("debit");
      goto LABEL_11;
    case 5:
      v4 = CFSTR("credit");
      goto LABEL_11;
    case 6:
      v4 = CFSTR("prepaid");
      goto LABEL_11;
    case 7:
      v4 = CFSTR("store");
      goto LABEL_11;
    case 8:
      v4 = CFSTR("apple pay");
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

INHomeAttributeValue *INIntentSlotValueTransformFromHomeAttributeValue(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  INHomeAttributeValue *v7;
  double v8;
  double v9;
  uint64_t v10;
  void *v11;
  INHomeAttributeRange *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  INHomeAttributeRange *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "hasValueType");
    v4 = objc_msgSend(v2, "valueType");
    if (((v4 < 6) & v3) != 0)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (objc_msgSend(v2, "hasBooleanValue"))
      v6 = objc_msgSend(v2, "BOOLeanValue");
    else
      v6 = 0;
    v8 = 0.0;
    if (objc_msgSend(v2, "hasDoubleValue"))
    {
      objc_msgSend(v2, "doubleValue");
      v8 = v9;
    }
    if (objc_msgSend(v2, "hasIntegerValue"))
      v10 = objc_msgSend(v2, "integerValue");
    else
      v10 = 0;
    if (objc_msgSend(v2, "hasStringValue"))
    {
      objc_msgSend(v2, "stringValue");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
    if (objc_msgSend(v2, "hasRangeValue"))
    {
      v12 = [INHomeAttributeRange alloc];
      objc_msgSend(v2, "rangeValue");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "lowerValue");
      v15 = v14;
      objc_msgSend(v2, "rangeValue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "upperValue");
      v18 = -[INHomeAttributeRange initWithRange:upperValue:](v12, "initWithRange:upperValue:", v15, v17);

    }
    else
    {
      v18 = 0;
    }
    v19 = objc_msgSend(v2, "hasLimitValue");
    v20 = objc_msgSend(v2, "limitValue");
    v21 = 2 * (v20 == 2);
    if (v20 == 1)
      v21 = 1;
    if (v19)
      v22 = v21;
    else
      v22 = 0;
    v23 = objc_msgSend(v2, "hasUnit");
    v24 = objc_msgSend(v2, "unit") - 1;
    if (v24 <= 4)
      v25 = v24 + 1;
    else
      v25 = 0;
    if (v23)
      v26 = v25;
    else
      v26 = 0;
    v7 = -[INHomeAttributeValue initWithType:BOOLValue:doubleValue:integerValue:stringValue:limitValue:unit:rangeValue:]([INHomeAttributeValue alloc], "initWithType:BOOLValue:doubleValue:integerValue:stringValue:limitValue:unit:rangeValue:", v5, v6, v10, v11, v22, v26, v8, v18);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

_INPBHomeAttributeValue *INIntentSlotValueTransformToHomeAttributeValue(void *a1)
{
  id v1;
  _INPBHomeAttributeValue *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _INPBHomeAttributeRange *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBHomeAttributeValue);
    v3 = objc_msgSend(v1, "type");
    if (v3 <= 6 && ((0x7Eu >> v3) & 1) != 0)
    {
      v4 = objc_msgSend(v1, "type") - 1;
      if (v4 >= 6)
        v5 = 0x7FFFFFFFLL;
      else
        v5 = v4;
      -[_INPBHomeAttributeValue setValueType:](v2, "setValueType:", v5);
    }
    v6 = objc_msgSend(v1, "unit");
    if (v6 <= 5 && ((0x3Eu >> v6) & 1) != 0)
    {
      v7 = objc_msgSend(v1, "unit") - 1;
      if (v7 < 5)
        v8 = (v7 + 1);
      else
        v8 = 0x7FFFFFFFLL;
      -[_INPBHomeAttributeValue setUnit:](v2, "setUnit:", v8);
    }
    switch(objc_msgSend(v1, "type"))
    {
      case 1:
        -[_INPBHomeAttributeValue setBooleanValue:](v2, "setBooleanValue:", objc_msgSend(v1, "BOOLValue"));
        break;
      case 2:
        objc_msgSend(v1, "doubleValue");
        -[_INPBHomeAttributeValue setDoubleValue:](v2, "setDoubleValue:");
        break;
      case 3:
        objc_msgSend(v1, "stringValue");
        v9 = (_INPBHomeAttributeRange *)objc_claimAutoreleasedReturnValue();
        -[_INPBHomeAttributeValue setStringValue:](v2, "setStringValue:", v9);
        goto LABEL_29;
      case 4:
        -[_INPBHomeAttributeValue setIntegerValue:](v2, "setIntegerValue:", objc_msgSend(v1, "integerValue"));
        break;
      case 5:
        if ((unint64_t)(objc_msgSend(v1, "limitValue") - 1) <= 1)
        {
          v10 = objc_msgSend(v1, "limitValue");
          if (v10 == 1)
            v11 = 1;
          else
            v11 = 0x7FFFFFFF;
          if (v10 == 2)
            v12 = 2;
          else
            v12 = v11;
          -[_INPBHomeAttributeValue setLimitValue:](v2, "setLimitValue:", v12);
        }
        break;
      case 6:
        v9 = objc_alloc_init(_INPBHomeAttributeRange);
        objc_msgSend(v1, "rangeValue");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "lowerValue");
        -[_INPBHomeAttributeRange setLowerValue:](v9, "setLowerValue:");

        objc_msgSend(v1, "rangeValue");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "upperValue");
        -[_INPBHomeAttributeRange setUpperValue:](v9, "setUpperValue:");

        -[_INPBHomeAttributeValue setRangeValue:](v2, "setRangeValue:", v9);
LABEL_29:

        break;
      default:
        break;
    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromHomeAttributeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromHomeAttributeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToHomeAttributeValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToHomeAttributeValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t INKeyImageUtilitiesDefaultCompareSubProducers(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(a1, "_keyImage");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_keyImage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = 1;
  if (!v4)
    v6 = -1;
  if ((v4 != 0) != (v5 != 0))
    v7 = v6;
  else
    v7 = 0;

  return v7;
}

BOOL INUserNotificationTypeHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INUserNotificationTypeGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INUserNotificationTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INUserNotificationTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("deliveryFailure");
  if (a1 == 1)
    return CFSTR("announcement");
  else
    return v1;
}

uint64_t INUserNotificationTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("announcement")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("deliveryFailure")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INUserNotificationTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("delivery failure");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("announcement");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBCreateFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_44;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_49:
        objc_msgSend(a1, "setEntityType:", v25);
        goto LABEL_55;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v17, 0, 0);
        goto LABEL_44;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_54:
        objc_msgSend(a1, "setDestinationType:", v32);
        goto LABEL_55;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDestinationName:", v17, 0, 0);
LABEL_44:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_57:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t INEditDistanceBetweenStrings(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "length");
  v6 = objc_msgSend(v4, "length");
  if (v5)
  {
    v7 = objc_msgSend(v3, "length");
    if (v6)
    {
      if (v7 || objc_msgSend(v4, "length"))
      {
        v8 = objc_msgSend(v3, "length");
        v9 = v8 + 1;
        v43 = v4;
        v40 = objc_msgSend(v4, "length");
        v10 = (id)objc_opt_new();
        v11 = (void *)objc_opt_new();
        v12 = 0x1E0CB3000uLL;
        if (v8 != -1)
        {
          v13 = 0;
          do
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "addObject:", v14);

            ++v13;
          }
          while (v9 != v13);
        }
        if ((unint64_t)(v40 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v15 = 1;
          v16 = v11;
          v39 = v8 + 1;
          v42 = v3;
          do
          {
            v11 = v10;
            v41 = v15;
            v17 = v15 - 1;
            objc_msgSend(*(id *)(v12 + 2024), "numberWithUnsignedInteger:", v15 - 1, v39);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "insertObject:atIndex:", v18, 0);

            if (v9 >= 2)
            {
              v19 = 0;
              v44 = v17;
              do
              {
                v20 = v19 + 1;
                v21 = objc_msgSend(v3, "characterAtIndex:", v19);
                v22 = objc_msgSend(v4, "characterAtIndex:", v17);
                objc_msgSend(v16, "objectAtIndex:", v19);
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                v24 = objc_msgSend(v23, "integerValue");

                objc_msgSend(v11, "objectAtIndex:", v19 + 1);
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v26 = v16;
                v27 = v8;
                v28 = objc_msgSend(v25, "integerValue");

                objc_msgSend(v11, "objectAtIndex:", v19);
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                v30 = objc_msgSend(v29, "integerValue");
                v31 = v21 == v22;
                v3 = v42;
                v32 = v28 + 1;
                if (v31)
                  v33 = v30;
                else
                  v33 = v30 + 1;

                if (v32 >= v24 + 1)
                  v34 = v24 + 1;
                else
                  v34 = v32;
                v8 = v27;
                v16 = v26;
                v4 = v43;
                if (v34 >= v33)
                  v35 = v33;
                else
                  v35 = v34;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v35);
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v26, "insertObject:atIndex:", v36, v20);

                v17 = v44;
                v19 = v20;
              }
              while (v8 != v20);
            }
            v10 = v16;

            v15 = v41 + 1;
            v16 = v11;
            v9 = v39;
            v12 = 0x1E0CB3000;
          }
          while (v41 != v40);
        }
        objc_msgSend(v10, "objectAtIndex:", v8);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v37, "integerValue");

      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = v7;
    }
  }

  return v6;
}

id INIntentSlotValueTransformFromContactCard(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (a1)
  {
    v1 = a1;
    NSPersonNameComponentsForPBContactCard(v1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "contactIdentifier");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v1, "isMe");
    objc_msgSend(v1, "image");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromImageValue(v23);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "organizationName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "departmentName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "jobTitle");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "phoneNumbers");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    CNLabeledValueForPBContactHandle(v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "emailAddresses");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    CNLabeledValueForPBContactHandle(v21);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "postalAddresses");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    CNLabeledValueForPBContactHandle(v19);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "urlAddresses");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    CNLabeledValueForPBContactHandle(v15);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "contactRelations");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    CNContactRelationForPBContactHandle(v13);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "instantMessageAddresses");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    CNLabeledValueForPBContactHandle(v12);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "birthday");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    NSDateComponentsForINDateComponents(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dates");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    NSLabeledDatesForINDateComponents(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[INContactCard initWithContactIdentifier:nameComponents:isMe:image:organizationName:departmentName:jobTitle:phoneNumbers:emailAddresses:postalAddresses:urlAddresses:contactRelations:instantMessageAddresses:birthday:dates:](INContactCard, "initWithContactIdentifier:nameComponents:isMe:image:organizationName:departmentName:jobTitle:phoneNumbers:emailAddresses:postalAddresses:urlAddresses:contactRelations:instantMessageAddresses:birthday:dates:", v26, v27, v18, v17, v16, v14, v25, v24, v11, v10, v2, v3, v4, v6, v8);
    v20 = objc_claimAutoreleasedReturnValue();

    a1 = (void *)v20;
  }
  return a1;
}

id NSPersonNameComponentsForPBContactCard(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v1 = (objc_class *)MEMORY[0x1E0CB3850];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v2, "lastName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setFamilyName:", v4);

  objc_msgSend(v2, "firstName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setGivenName:", v5);

  objc_msgSend(v2, "middleName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setMiddleName:", v6);

  objc_msgSend(v2, "namePrefix");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNamePrefix:", v7);

  objc_msgSend(v2, "nameSuffix");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNameSuffix:", v8);

  objc_msgSend(v2, "nickName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNickname:", v9);

  v10 = (void *)objc_opt_new();
  objc_msgSend(v2, "phoneticLastName");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setFamilyName:", v11);

  objc_msgSend(v2, "phoneticFirstName");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setGivenName:", v12);

  objc_msgSend(v2, "phoneticMiddleName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setMiddleName:", v13);

  objc_msgSend(v2, "phoneticNamePrefix");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setNamePrefix:", v14);

  objc_msgSend(v2, "phoneticNameSuffix");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setNameSuffix:", v15);

  objc_msgSend(v2, "phoneticNickName");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "setNickname:", v16);
  objc_msgSend(v3, "setPhoneticRepresentation:", v10);

  return v3;
}

id CNLabeledValueForPBContactHandle(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "label", (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "value");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        soft_initWithPersonHandle(v9, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v2, "addObject:", v11);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return v2;
}

id CNContactRelationForPBContactHandle(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "label", (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "value");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        soft_initWithPersonHandle(v9, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v2, "addObject:", v11);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return v2;
}

id NSDateComponentsForINDateComponents(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  INIntentSlotValueTransformFromDateTimeRangeValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "startDateComponents");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99D78], "init");
  objc_msgSend(v2, "calendar");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCalendar:", v4);

  objc_msgSend(v3, "setMonth:", objc_msgSend(v2, "month"));
  objc_msgSend(v3, "setDay:", objc_msgSend(v2, "day"));
  objc_msgSend(v3, "setYear:", objc_msgSend(v2, "year"));

  return v3;
}

id NSLabeledDatesForINDateComponents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        NSDateComponentsForINDateComponents(v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "name");
        v9 = (id)objc_claimAutoreleasedReturnValue();
        v10 = v8;
        v19 = 0;
        v20 = &v19;
        v21 = 0x2020000000;
        v11 = getlabeledValueWithLabelSymbolLoc_ptr;
        v22 = getlabeledValueWithLabelSymbolLoc_ptr;
        if (!getlabeledValueWithLabelSymbolLoc_ptr)
        {
          v12 = (void *)ContactsLibrary_41777();
          v11 = dlsym(v12, "labeledValueWithLabel");
          v20[3] = (uint64_t)v11;
          getlabeledValueWithLabelSymbolLoc_ptr = v11;
        }
        _Block_object_dispose(&v19, 8);
        if (!v11)
        {
          dlerror();
          abort_report_np();
          __break(1u);
        }
        ((void (*)(id, id))v11)(v9, v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v2, "addObject:", v13);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    }
    while (v4);
  }

  return v2;
}

void sub_18C015390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ContactsLibrary_41777()
{
  uint64_t v0;
  void *v2;

  if (ContactsLibraryCore_frameworkLibrary_41780)
    return ContactsLibraryCore_frameworkLibrary_41780;
  ContactsLibraryCore_frameworkLibrary_41780 = _sl_dlopen();
  v0 = ContactsLibraryCore_frameworkLibrary_41780;
  if (!ContactsLibraryCore_frameworkLibrary_41780)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id soft_initWithPersonHandle(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _Unwind_Exception *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v3 = a1;
  v4 = a2;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v5 = getinitWithLabelSymbolLoc_ptr;
  v13 = getinitWithLabelSymbolLoc_ptr;
  if (!getinitWithLabelSymbolLoc_ptr)
  {
    v6 = (void *)ContactsLibrary_41777();
    v5 = dlsym(v6, "initWithLabel");
    v11[3] = (uint64_t)v5;
    getinitWithLabelSymbolLoc_ptr = v5;
  }
  _Block_object_dispose(&v10, 8);
  if (!v5)
  {
    dlerror();
    v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  ((void (*)(id, id))v5)(v3, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

_INPBContactCard *INIntentSlotValueTransformToContactCard(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _INPBContactCard *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  v1 = a1;
  objc_msgSend(v1, "nameComponents");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "phoneticRepresentation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v4 = objc_alloc_init(_INPBContactCard);
    objc_msgSend(v1, "contactIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setContactIdentifier:](v4, "setContactIdentifier:", v5);

    objc_msgSend(v2, "namePrefix");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setNamePrefix:](v4, "setNamePrefix:", v6);

    objc_msgSend(v2, "givenName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setFirstName:](v4, "setFirstName:", v7);

    objc_msgSend(v2, "middleName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setMiddleName:](v4, "setMiddleName:", v8);

    objc_msgSend(v2, "familyName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setLastName:](v4, "setLastName:", v9);

    objc_msgSend(v2, "nameSuffix");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setNameSuffix:](v4, "setNameSuffix:", v10);

    objc_msgSend(v2, "nickname");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setNickName:](v4, "setNickName:", v11);

    objc_msgSend(v3, "namePrefix");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneticNamePrefix:](v4, "setPhoneticNamePrefix:", v12);

    objc_msgSend(v3, "givenName");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneticFirstName:](v4, "setPhoneticFirstName:", v13);

    objc_msgSend(v3, "middleName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneticMiddleName:](v4, "setPhoneticMiddleName:", v14);

    objc_msgSend(v3, "familyName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneticLastName:](v4, "setPhoneticLastName:", v15);

    objc_msgSend(v3, "nameSuffix");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneticNameSuffix:](v4, "setPhoneticNameSuffix:", v16);

    objc_msgSend(v3, "nickname");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneticNickName:](v4, "setPhoneticNickName:", v17);

    -[_INPBContactCard setIsMe:](v4, "setIsMe:", objc_msgSend(v1, "isMe"));
    objc_msgSend(v1, "image");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToImageValue(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setImage:](v4, "setImage:", v19);

    objc_msgSend(v1, "organizationName");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setOrganizationName:](v4, "setOrganizationName:", v20);

    objc_msgSend(v1, "departmentName");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setDepartmentName:](v4, "setDepartmentName:", v21);

    objc_msgSend(v1, "jobTitle");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setJobTitle:](v4, "setJobTitle:", v22);

    objc_msgSend(v1, "phoneNumbers");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    PBContactHandleForCNLabeledValue(v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPhoneNumbers:](v4, "setPhoneNumbers:", v24);

    objc_msgSend(v1, "emailAddresses");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    PBContactHandleForCNLabeledValue(v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setEmailAddresses:](v4, "setEmailAddresses:", v26);

    objc_msgSend(v1, "postalAddresses");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    PBContactHandleForCNLabeledValue(v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setPostalAddresses:](v4, "setPostalAddresses:", v28);

    objc_msgSend(v1, "urlAddresses");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    PBContactHandleForCNLabeledValue(v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setUrlAddresses:](v4, "setUrlAddresses:", v30);

    objc_msgSend(v1, "contactRelations");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    PBContactRelationshipForCNContactRelation(v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setContactRelations:](v4, "setContactRelations:", v32);

    objc_msgSend(v1, "instantMessageAddresses");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    PBContactHandleForCNLabeledValue(v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setInstantMessageAddresses:](v4, "setInstantMessageAddresses:", v34);

    objc_msgSend(v1, "birthday");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    INDateComponentsForNSDateComponents(v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setBirthday:](v4, "setBirthday:", v36);

    objc_msgSend(v1, "dates");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    INDateComponentsForNSLabeledDates(v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactCard setDates:](v4, "setDates:", v38);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PBContactHandleForCNLabeledValue(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _INPBContactHandle *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v7);
        v9 = objc_alloc_init(_INPBContactHandle);
        objc_msgSend(v8, "label", (_QWORD)v13);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBContactHandle setLabel:](v9, "setLabel:", v10);

        objc_msgSend(v8, "value");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBContactHandle setValue:](v9, "setValue:", v11);

        objc_msgSend(v2, "addObject:", v9);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return v2;
}

id PBContactRelationshipForCNContactRelation(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _INPBContactRelationship *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v7);
        v9 = objc_alloc_init(_INPBContactRelationship);
        objc_msgSend(v8, "label", (_QWORD)v13);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBContactRelationship setRelation:](v9, "setRelation:", v10);

        objc_msgSend(v8, "value");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[_INPBContactRelationship setName:](v9, "setName:", v11);

        objc_msgSend(v2, "addObject:", v9);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return v2;
}

id INDateComponentsForNSDateComponents(void *a1)
{
  id v1;
  INDateComponentsRange *v2;
  void *v3;

  v1 = a1;
  v2 = -[INDateComponentsRange initWithStartDateComponents:endDateComponents:]([INDateComponentsRange alloc], "initWithStartDateComponents:endDateComponents:", v1, v1);

  INIntentSlotValueTransformToDateTimeRangeValue(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id INDateComponentsForNSLabeledDates(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "value", (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        INDateComponentsForNSDateComponents(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v8, "label");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setName:", v11);

        objc_msgSend(v2, "addObject:", v10);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformFromContactCards(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromContactCard(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToContactCards(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToContactCard(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedContactCardFromContactCard(void *a1)
{
  return a1;
}

uint64_t _INPBScanVisualCodeIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INSexualActivityValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INSexualActivityValueTypeGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INSexualActivityValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INSexualActivityValueTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("unprotected");
  if (a1 == 1)
    return CFSTR("protected");
  else
    return v1;
}

uint64_t INSexualActivityValueTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("protected")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("unprotected")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSexualActivityValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("unprotected");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("protected");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBSetClimateSettingsInCarIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t result;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_132;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_92;
      case 2u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_98:
        objc_msgSend(a1, "setEnableFan:", v20 != 0);
        goto LABEL_93;
      case 3u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_102:
        objc_msgSend(a1, "setEnableAirConditioner:", v26 != 0);
        goto LABEL_93;
      case 4u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_106:
        objc_msgSend(a1, "setEnableClimateControl:", v32 != 0);
        goto LABEL_93;
      case 5u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_110:
        objc_msgSend(a1, "setEnableAutoMode:", v38 != 0);
        goto LABEL_93;
      case 6u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v48 = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
        else
          v48 = v44;
LABEL_115:
        objc_msgSend(a1, "setAirCirculationMode:", v48);
        goto LABEL_93;
      case 7u:
        v17 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_132;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFanSpeedIndex:", v17, 0, 0);
        goto LABEL_92;
      case 8u:
        v17 = objc_alloc_init(_INPBDouble);
        if (!PBReaderPlaceMark() || (_INPBDoubleReadFrom(v17, a2) & 1) == 0)
          goto LABEL_132;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFanSpeedPercentage:", v17, 0, 0);
        goto LABEL_92;
      case 9u:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 1;
            v51 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v14 = v50++ >= 9;
              if (v14)
              {
                v55 = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
        else
          v55 = v51;
LABEL_120:
        objc_msgSend(a1, "setRelativeFanSpeedSetting:", v55);
        goto LABEL_93;
      case 0xBu:
        v17 = objc_alloc_init(_INPBTemperature);
        if (!PBReaderPlaceMark() || (_INPBTemperatureReadFrom(v17, a2) & 1) == 0)
          goto LABEL_132;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTemperature:", v17, 0, 0);
        goto LABEL_92;
      case 0xCu:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        while (2)
        {
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v61 + 1;
            v59 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              v14 = v58++ >= 9;
              if (v14)
              {
                v63 = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v63 = 0;
        else
          v63 = v59;
LABEL_125:
        objc_msgSend(a1, "setRelativeTemperatureSetting:", v63);
        goto LABEL_93;
      case 0xDu:
        v64 = 0;
        v65 = 0;
        v66 = 0;
        while (2)
        {
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
            *(_QWORD *)(a2 + v67) = v68 + 1;
            v66 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              v14 = v65++ >= 9;
              if (v14)
              {
                v70 = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v70 = 0;
        else
          v70 = v66;
LABEL_130:
        objc_msgSend(a1, "setClimateZone:", v70);
        goto LABEL_93;
      case 0xEu:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_92:

LABEL_93:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_132:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_93;
    }
  }
}

uint64_t _INPBRequestRideIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBRideStatus *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBRideStatus);
        if (!PBReaderPlaceMark() || (_INPBRideStatusReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRideStatus:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBListRideOptionsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBRideOption *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBRideOption);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBRideOptionReadFrom(v17, a2))
          goto LABEL_46;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addRideOptions:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(_INPBPaymentMethodValue);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark() || !_INPBPaymentMethodValueReadFrom(v17, a2))
          goto LABEL_46;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addPaymentMethods:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_43:
        objc_msgSend(a1, "setSupportsApplePayForPayment:", v21 != 0, v25, v26);
        goto LABEL_44;
      case 4u:
        v17 = objc_alloc_init(_INPBTimestamp);
        if (PBReaderPlaceMark() && (_INPBTimestampReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setExpirationDate:", v17, 0, 0);
LABEL_39:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

void sub_18C01F148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,char a30)
{
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getUIIntentForwardingActionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!UIKitLibraryCore_frameworkLibrary)
  {
    UIKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!UIKitLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("UIIntentForwardingAction");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getUIIntentForwardingActionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t INAccountTypeHasBackingType(unint64_t a1)
{
  return (a1 < 8) & (0xFEu >> a1);
}

uint64_t INAccountTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 7)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INAccountTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 6)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INAccountTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E228D078[a1 - 1];
}

uint64_t INAccountTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("checking")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("credit")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("debit")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("investment")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mortgage")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("prepaid")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("saving")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAccountTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("checking");
      goto LABEL_10;
    case 2:
      v4 = CFSTR("credit");
      goto LABEL_10;
    case 3:
      v4 = CFSTR("debit");
      goto LABEL_10;
    case 4:
      v4 = CFSTR("investment");
      goto LABEL_10;
    case 5:
      v4 = CFSTR("mortgage");
      goto LABEL_10;
    case 6:
      v4 = CFSTR("prepaid");
      goto LABEL_10;
    case 7:
      v4 = CFSTR("saving");
LABEL_10:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBRideDriverReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBContactValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBContactValue);
        if (!PBReaderPlaceMark() || (_INPBContactValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_33;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPerson:", v17, 0, 0);
        goto LABEL_29;
      case 2u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (PBReaderPlaceMark() && (_INPBImageValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setImage:", v17, 0, 0);
LABEL_29:

LABEL_30:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_33:

        return 0;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBContactValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRating:", v17);
        goto LABEL_29;
      case 4u:
        PBReaderReadString();
        v17 = (_INPBContactValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPhoneNumber:", v17);
        goto LABEL_29;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_30;
    }
  }
}

INRideOption *INIntentSlotValueTransformFromRideOption(void *a1)
{
  id v1;
  INRideOption *v2;
  void *v3;
  void *v4;
  void *v5;
  INRideOption *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  INRidePartySizeOption *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  INRidePartySizeOption *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  INRideFareLineItem *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  INRideFareLineItem *v38;
  INRideOption *v39;
  void *v40;
  void *v41;
  void *v42;
  INRideOption *v44;
  void *v45;
  id obj;
  id obja;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = [INRideOption alloc];
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "estimatedPickupDate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[INRideOption initWithName:estimatedPickupDate:](v2, "initWithName:estimatedPickupDate:", v3, v5);

    if (objc_msgSend(v1, "hasPriceRange"))
    {
      objc_msgSend(v1, "priceRange");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      +[INPriceRange _priceWithPriceRangeValue:](INPriceRange, "_priceWithPriceRangeValue:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideOption setPriceRange:](v6, "setPriceRange:", v8);

    }
    objc_msgSend(v1, "disclaimerMessage");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = v6;
    -[INRideOption setDisclaimerMessage:](v6, "setDisclaimerMessage:", v9);

    v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "availablePartySizeOptionsCount"));
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v45 = v1;
    objc_msgSend(v1, "availablePartySizeOptions");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v54 != v12)
            objc_enumerationMutation(obj);
          v14 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
          objc_msgSend(v14, "partySizeRange");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "priceRange");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          +[INPriceRange _priceWithPriceRangeValue:](INPriceRange, "_priceWithPriceRangeValue:", v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = [INRidePartySizeOption alloc];
          if (v15)
          {
            v19 = objc_msgSend(v15, "location");
            v20 = objc_msgSend(v15, "length");
          }
          else
          {
            v19 = 0x7FFFFFFFFFFFFFFFLL;
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          objc_msgSend(v14, "sizeDescription");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = -[INRidePartySizeOption initWithPartySizeRange:sizeDescription:priceRange:](v18, "initWithPartySizeRange:sizeDescription:priceRange:", v19, v20, v21, v17);

          objc_msgSend(v48, "addObject:", v22);
        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
      }
      while (v11);
    }

    -[INRideOption setAvailablePartySizeOptions:](v44, "setAvailablePartySizeOptions:", v48);
    objc_msgSend(v45, "availablePartySizeOptionsSelectionPrompt");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideOption setAvailablePartySizeOptionsSelectionPrompt:](v44, "setAvailablePartySizeOptionsSelectionPrompt:", v23);

    objc_msgSend(v45, "specialPricing");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideOption setSpecialPricing:](v44, "setSpecialPricing:", v24);

    objc_msgSend(v45, "specialPricingBadgeImage");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromImageValue(v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideOption setSpecialPricingBadgeImage:](v44, "setSpecialPricingBadgeImage:", v26);

    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v45, "fareLineItemsCount"));
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    objc_msgSend(v45, "fareLineItems");
    obja = (id)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v50;
      do
      {
        for (j = 0; j != v29; ++j)
        {
          if (*(_QWORD *)v50 != v30)
            objc_enumerationMutation(obja);
          v32 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * j);
          v33 = [INRideFareLineItem alloc];
          objc_msgSend(v32, "title");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "price");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformFromDecimalNumberValue(v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "currencyCode");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = -[INRideFareLineItem initWithTitle:price:currencyCode:](v33, "initWithTitle:price:currencyCode:", v34, v36, v37);

          objc_msgSend(v27, "addObject:", v38);
        }
        v29 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
      }
      while (v29);
    }

    v39 = v44;
    -[INRideOption setFareLineItems:](v44, "setFareLineItems:", v27);
    v1 = v45;
    if ((objc_msgSend(v45, "hasUsesMeteredFare") & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v45, "usesMeteredFare"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      -[INRideOption setUsesMeteredFare:](v44, "setUsesMeteredFare:", v40);

    }
    else
    {
      -[INRideOption setUsesMeteredFare:](v44, "setUsesMeteredFare:", 0);
    }
    objc_msgSend(v45, "userActivityForBookingInApplication");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    INUserActivityDeserializeFromBackingStore(v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRideOption setUserActivityForBookingInApplication:](v44, "setUserActivityForBookingInApplication:", v42);

  }
  else
  {
    v39 = 0;
  }

  return v39;
}

_INPBRideOption *INIntentSlotValueTransformToRideOption(void *a1)
{
  id v1;
  _INPBRideOption *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _INPBPriceRangeValue *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _INPBRideOption *v16;
  uint64_t i;
  void *v18;
  _INPBRidePartySizeOption *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _INPBRangeValue *v25;
  void *v26;
  _INPBPriceRangeValue *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  void *v43;
  _INPBRideFareLineItem *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v54;
  void *v55;
  id obj;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBRideOption);
    objc_msgSend(v1, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setName:](v2, "setName:", v3);

    objc_msgSend(v1, "estimatedPickupDate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setEstimatedPickupDate:](v2, "setEstimatedPickupDate:", v5);

    objc_msgSend(v1, "priceRange");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = objc_alloc_init(_INPBPriceRangeValue);
      objc_msgSend(v6, "minimumPrice");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToDecimalNumberValue(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBPriceRangeValue setMinimumPrice:](v7, "setMinimumPrice:", v9);

      objc_msgSend(v6, "maximumPrice");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToDecimalNumberValue(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBPriceRangeValue setMaximumPrice:](v7, "setMaximumPrice:", v11);

      objc_msgSend(v6, "currencyCode");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBPriceRangeValue setCurrencyCode:](v7, "setCurrencyCode:", v12);

      -[_INPBRideOption setPriceRange:](v2, "setPriceRange:", v7);
    }
    objc_msgSend(v1, "disclaimerMessage", v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setDisclaimerMessage:](v2, "setDisclaimerMessage:", v13);

    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v55 = v1;
    objc_msgSend(v1, "availablePartySizeOptions");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v67, 16);
    if (v14)
    {
      v15 = v14;
      v57 = *(_QWORD *)v63;
      v16 = v2;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v63 != v57)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
          v19 = objc_alloc_init(_INPBRidePartySizeOption);
          v20 = objc_msgSend(v18, "partySizeRange");
          if (v20 != 0x7FFFFFFFFFFFFFFFLL && v21 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v23 = v20;
            v24 = v21;
            v25 = objc_alloc_init(_INPBRangeValue);
            -[_INPBRangeValue setLocation:](v25, "setLocation:", v23);
            -[_INPBRangeValue setLength:](v25, "setLength:", v24);
            -[_INPBRidePartySizeOption setPartySizeRange:](v19, "setPartySizeRange:", v25);

            v2 = v16;
          }
          objc_msgSend(v18, "priceRange");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (v26)
          {
            v27 = objc_alloc_init(_INPBPriceRangeValue);
            objc_msgSend(v26, "minimumPrice");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            INIntentSlotValueTransformToDecimalNumberValue(v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBPriceRangeValue setMinimumPrice:](v27, "setMinimumPrice:", v29);

            objc_msgSend(v26, "maximumPrice");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            INIntentSlotValueTransformToDecimalNumberValue(v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBPriceRangeValue setMaximumPrice:](v27, "setMaximumPrice:", v31);

            v2 = v16;
            objc_msgSend(v26, "currencyCode");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBPriceRangeValue setCurrencyCode:](v27, "setCurrencyCode:", v32);

            -[_INPBRidePartySizeOption setPriceRange:](v19, "setPriceRange:", v27);
          }
          objc_msgSend(v18, "sizeDescription");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          -[_INPBRidePartySizeOption setSizeDescription:](v19, "setSizeDescription:", v33);

          -[_INPBRideOption addAvailablePartySizeOptions:](v2, "addAvailablePartySizeOptions:", v19);
        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v67, 16);
      }
      while (v15);
    }

    objc_msgSend(v55, "availablePartySizeOptionsSelectionPrompt");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setAvailablePartySizeOptionsSelectionPrompt:](v2, "setAvailablePartySizeOptionsSelectionPrompt:", v34);

    objc_msgSend(v55, "specialPricing");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setSpecialPricing:](v2, "setSpecialPricing:", v35);

    objc_msgSend(v55, "specialPricingBadgeImage");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToImageValue(v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setSpecialPricingBadgeImage:](v2, "setSpecialPricingBadgeImage:", v37);

    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    objc_msgSend(v55, "fareLineItems");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
    if (v39)
    {
      v40 = v39;
      v41 = *(_QWORD *)v59;
      do
      {
        for (j = 0; j != v40; ++j)
        {
          if (*(_QWORD *)v59 != v41)
            objc_enumerationMutation(v38);
          v43 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * j);
          v44 = objc_alloc_init(_INPBRideFareLineItem);
          objc_msgSend(v43, "title");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          -[_INPBRideFareLineItem setTitle:](v44, "setTitle:", v45);

          objc_msgSend(v43, "price");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          INIntentSlotValueTransformToDecimalNumberValue(v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          -[_INPBRideFareLineItem setPrice:](v44, "setPrice:", v47);

          objc_msgSend(v43, "currencyCode");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[_INPBRideFareLineItem setCurrencyCode:](v44, "setCurrencyCode:", v48);

          -[_INPBRideOption addFareLineItems:](v2, "addFareLineItems:", v44);
        }
        v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
      }
      while (v40);
    }

    v1 = v55;
    objc_msgSend(v55, "usesMeteredFare");
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    if (v49)
    {
      objc_msgSend(v55, "usesMeteredFare");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBRideOption setUsesMeteredFare:](v2, "setUsesMeteredFare:", objc_msgSend(v50, "BOOLValue"));

    }
    else
    {
      -[_INPBRideOption setHasUsesMeteredFare:](v2, "setHasUsesMeteredFare:", 0);
    }
    objc_msgSend(v55, "userActivityForBookingInApplication");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    INUserActivitySerializeToBackingStore(v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRideOption setUserActivityForBookingInApplication:](v2, "setUserActivityForBookingInApplication:", v52);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromRideOptions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromRideOption(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToRideOptions(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToRideOption(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

uint64_t INBillTypeHasBackingType(unint64_t a1)
{
  return (a1 < 0x17) & (0x7FFFFEu >> a1);
}

uint64_t INBillTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0x16)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INBillTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 0x15)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INBillTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x15)
    return CFSTR("unknown");
  else
    return off_1E228D0B0[a1 - 1];
}

uint64_t INBillTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("autoInsurance")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cable")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carLease")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carLoan")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("creditCard")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("electricity")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("gas")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("garbageAndRecycling")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("healthInsurance")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("homeInsurance")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("internet")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lifeInsurance")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mortgage")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("musicStreaming")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("phone")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rent")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sewer")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("studentLoan")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("trafficTicket")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tuition")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("utilities")) & 1) != 0)
  {
    v2 = 21;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("water")))
  {
    v2 = 22;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INBillTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("auto insurance");
      goto LABEL_25;
    case 2:
      v4 = CFSTR("cable");
      goto LABEL_25;
    case 3:
      v4 = CFSTR("car lease");
      goto LABEL_25;
    case 4:
      v4 = CFSTR("car loan");
      goto LABEL_25;
    case 5:
      v4 = CFSTR("credit card");
      goto LABEL_25;
    case 6:
      v4 = CFSTR("electricity");
      goto LABEL_25;
    case 7:
      v4 = CFSTR("gas");
      goto LABEL_25;
    case 8:
      v4 = CFSTR("garbage and recycling");
      goto LABEL_25;
    case 9:
      v4 = CFSTR("health insurance");
      goto LABEL_25;
    case 10:
      v4 = CFSTR("home insurance");
      goto LABEL_25;
    case 11:
      v4 = CFSTR("internet");
      goto LABEL_25;
    case 12:
      v4 = CFSTR("life insurance");
      goto LABEL_25;
    case 13:
      v4 = CFSTR("mortgage");
      goto LABEL_25;
    case 14:
      v4 = CFSTR("music streaming");
      goto LABEL_25;
    case 15:
      v4 = CFSTR("phone");
      goto LABEL_25;
    case 16:
      v4 = CFSTR("rent");
      goto LABEL_25;
    case 17:
      v4 = CFSTR("sewer");
      goto LABEL_25;
    case 18:
      v4 = CFSTR("student loan");
      goto LABEL_25;
    case 19:
      v4 = CFSTR("traffic ticket");
      goto LABEL_25;
    case 20:
      v4 = CFSTR("tuition");
      goto LABEL_25;
    case 21:
      v4 = CFSTR("utilities");
      goto LABEL_25;
    case 22:
      v4 = CFSTR("water");
LABEL_25:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

BOOL _INPBPlayVoicemailIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id INCodableAttributeClassFromType(uint64_t a1)
{
  void *v2;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 - 1) >= 5)
  {
    v2 = (void *)INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_FAULT))
    {
      v4 = (void *)MEMORY[0x1E0CB37E8];
      v5 = v2;
      objc_msgSend(v4, "numberWithInteger:", a1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 136315394;
      v8 = "INCodableAttributeClassFromType";
      v9 = 2112;
      v10 = v6;
      _os_log_fault_impl(&dword_18BEBC000, v5, OS_LOG_TYPE_FAULT, "%s Unknown type for codable attribute of type: %@", (uint8_t *)&v7, 0x16u);

    }
  }
  objc_opt_class();
  return (id)objc_claimAutoreleasedReturnValue();
}

id INIntentSlotValueTransformFromContact(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  INScoredPerson *v19;
  void *v20;
  id v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v22 = a1;
  objc_msgSend(v22, "values");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v26;
    v23 = *(_QWORD *)v26;
    v24 = v1;
    while (1)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v1);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        if (!v5)
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "valueMetadata");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = INPrivacyEntitlementOptionsForValueMetadata(v9);

          if (!v10)
          {
            v5 = v8;
            continue;
          }
        }
        INIntentSlotValueTransformFromContactValueWithAlternatives(v8, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          if (!v4)
            v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (objc_msgSend(v8, "hasValueMetadata"))
          {
            objc_msgSend(v8, "valueMetadata");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v12, "hasConfidenceScore"))
            {
              objc_msgSend(v8, "valueMetadata");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "confidenceScore");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = objc_msgSend(v14, "hasAggregateScore");

              if (v15)
              {
                v16 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(v8, "valueMetadata");
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "confidenceScore");
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "aggregateScore");
                objc_msgSend(v16, "numberWithFloat:");
                v18 = (void *)objc_claimAutoreleasedReturnValue();

                v6 = v23;
                v1 = v24;
                goto LABEL_18;
              }
              v18 = 0;
              v6 = v23;
              v1 = v24;
            }
            else
            {
              v18 = 0;
LABEL_18:

            }
          }
          else
          {
            v18 = 0;
          }
          v19 = -[INScoredPerson initWithPerson:score:]([INScoredPerson alloc], "initWithPerson:score:", v11, v18);
          objc_msgSend(v4, "addObject:", v19);

        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (!v3)
        goto LABEL_26;
    }
  }
  v4 = 0;
  v5 = 0;
LABEL_26:

  INIntentSlotValueTransformFromContactValueWithScoredAlternatives(v5, v4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id INIntentSlotValueTransformFromContactValueWithAlternatives(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  INScoredPerson *v12;
  INScoredPerson *v13;
  void *v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v4, "count"));
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v18 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
          v12 = [INScoredPerson alloc];
          v13 = -[INScoredPerson initWithPerson:score:](v12, "initWithPerson:score:", v11, 0, (_QWORD)v17);
          objc_msgSend(v5, "addObject:", v13);

        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v8);
    }

  }
  else
  {
    v5 = 0;
  }
  v14 = (void *)objc_msgSend(v5, "copy", (_QWORD)v17);
  INIntentSlotValueTransformFromContactValueWithScoredAlternatives(v3, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id INIntentSlotValueTransformFromContactValueWithScoredAlternatives(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  char v31;
  char v32;
  INPerson *v33;
  int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(v3, "valueMetadata");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v5);

    if (objc_msgSend(v3, "hasValueMetadata"))
    {
      objc_msgSend(v3, "valueMetadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v6, "hasInput"))
      {
        objc_msgSend(v6, "input");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v54 = 0;
      }
      if (objc_msgSend(v6, "hasUuid"))
      {
        objc_msgSend(v6, "uuid");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v53 = 0;
      }

    }
    else
    {
      v53 = 0;
      v54 = 0;
    }
    if ((objc_msgSend(v3, "hasNamePrefix") & 1) != 0
      || (objc_msgSend(v3, "hasFirstName") & 1) != 0
      || (objc_msgSend(v3, "hasMiddleName") & 1) != 0
      || (objc_msgSend(v3, "hasLastName") & 1) != 0
      || (objc_msgSend(v3, "hasNameSuffix") & 1) != 0
      || (objc_msgSend(v3, "hasNickName") & 1) != 0
      || (objc_msgSend(v3, "hasPhoneticNamePrefix") & 1) != 0
      || (objc_msgSend(v3, "hasPhoneticFirstName") & 1) != 0
      || (objc_msgSend(v3, "hasPhoneticMiddleName") & 1) != 0
      || (objc_msgSend(v3, "hasPhoneticLastName") & 1) != 0
      || objc_msgSend(v3, "hasPhoneticNameSuffix"))
    {
      v8 = objc_alloc_init(MEMORY[0x1E0CB3850]);
      if (objc_msgSend(v3, "hasNamePrefix"))
      {
        objc_msgSend(v3, "namePrefix");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setNamePrefix:", v9);

      }
      if (objc_msgSend(v3, "hasFirstName"))
      {
        objc_msgSend(v3, "firstName");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setGivenName:", v10);

      }
      if (objc_msgSend(v3, "hasMiddleName"))
      {
        objc_msgSend(v3, "middleName");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setMiddleName:", v11);

      }
      if (objc_msgSend(v3, "hasLastName"))
      {
        objc_msgSend(v3, "lastName");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setFamilyName:", v12);

      }
      if (objc_msgSend(v3, "hasNameSuffix"))
      {
        objc_msgSend(v3, "nameSuffix");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setNameSuffix:", v13);

      }
      if (objc_msgSend(v3, "hasNickName"))
      {
        objc_msgSend(v3, "nickName");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setNickname:", v14);

      }
      if ((objc_msgSend(v3, "hasPhoneticNamePrefix") & 1) != 0
        || (objc_msgSend(v3, "hasPhoneticFirstName") & 1) != 0
        || (objc_msgSend(v3, "hasPhoneticMiddleName") & 1) != 0
        || (objc_msgSend(v3, "hasPhoneticLastName") & 1) != 0
        || objc_msgSend(v3, "hasPhoneticNameSuffix"))
      {
        v15 = objc_alloc_init(MEMORY[0x1E0CB3850]);
        if (objc_msgSend(v3, "hasPhoneticNamePrefix"))
        {
          objc_msgSend(v3, "phoneticNamePrefix");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setNamePrefix:", v16);

        }
        if (objc_msgSend(v3, "hasPhoneticFirstName"))
        {
          objc_msgSend(v3, "phoneticFirstName");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setGivenName:", v17);

        }
        if (objc_msgSend(v3, "hasPhoneticMiddleName"))
        {
          objc_msgSend(v3, "phoneticMiddleName");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setMiddleName:", v18);

        }
        if (objc_msgSend(v3, "hasPhoneticLastName"))
        {
          objc_msgSend(v3, "phoneticLastName");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setFamilyName:", v19);

        }
        if (objc_msgSend(v3, "hasPhoneticNameSuffix"))
        {
          objc_msgSend(v3, "phoneticNameSuffix");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setNameSuffix:", v20);

        }
        objc_msgSend(v8, "setPhoneticRepresentation:", v15);

      }
    }
    else
    {
      v8 = 0;
    }
    if (objc_msgSend(v3, "hasFullName"))
    {
      objc_msgSend(v3, "fullName");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v51 = 0;
    }
    if (objc_msgSend(v3, "hasContactHandle"))
    {
      objc_msgSend(v3, "contactHandle");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromContactHandle(v21);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v49 = 0;
    }
    if (objc_msgSend(v3, "hasImage"))
    {
      objc_msgSend(v3, "image");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromImageValue(v22);
      v48 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v48 = 0;
    }
    if (objc_msgSend(v3, "hasCustomIdentifier"))
    {
      objc_msgSend(v3, "customIdentifier");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v47 = 0;
    }
    if (objc_msgSend(v3, "hasPhonemeData"))
    {
      objc_msgSend(v3, "phonemeData");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v46 = 0;
    }
    objc_msgSend(v3, "aliases");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = v4;
    v52 = v8;
    if (objc_msgSend(v23, "count"))
      v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v23, "count"));
    else
      v24 = 0;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v25 = v23;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v56;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v56 != v28)
            objc_enumerationMutation(v25);
          INIntentSlotValueTransformFromContactHandle(*(void **)(*((_QWORD *)&v55 + 1) + 8 * i));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          if (v30)
            objc_msgSend(v24, "addObject:", v30);

        }
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
      }
      while (v27);
    }

    if (objc_msgSend(v3, "hasRelationship"))
    {
      objc_msgSend(v3, "relationship");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v45 = 0;
    }
    if (objc_msgSend(v3, "hasIsMe"))
      v31 = objc_msgSend(v3, "isMe");
    else
      v31 = 0;
    if (objc_msgSend(v3, "hasIsContactSuggestion"))
      v32 = objc_msgSend(v3, "isContactSuggestion");
    else
      v32 = 0;
    v33 = [INPerson alloc];
    v34 = objc_msgSend(v3, "suggestionType");
    if (v34 == 2)
      v35 = 2;
    else
      v35 = v34 == 1;
    objc_msgSend(v3, "valueMetadata");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "sourceAppBundleIdentifier");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v3, "searchProvider") - 1;
    if (v37 < 3)
      v38 = v37 + 1;
    else
      v38 = 0;
    LOBYTE(v42) = v32;
    v4 = v50;
    LOBYTE(v41) = v31;
    v44 = -[INPerson _initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:aliases:suggestionType:isMe:scoredAlternatives:sourceAppBundleIdentifier:phonemeData:isContactSuggestion:searchProvider:](v33, "_initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:aliases:suggestionType:isMe:scoredAlternatives:sourceAppBundleIdentifier:phonemeData:isContactSuggestion:searchProvider:", v54, v49, v52, v51, v48, v53, v47, v45, v24, v35, v41, v50, v36, v46, v42,
            v38);

    v7 = v44;
  }
  else
  {
    v7 = 0;
  }
  v39 = v7;

  return v39;
}

INPersonHandle *INIntentSlotValueTransformFromContactHandle(void *a1)
{
  id v1;
  INPersonHandle *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  INPersonHandle *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v1 = a1;
  if (v1)
  {
    v2 = [INPersonHandle alloc];
    objc_msgSend(v1, "value");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v1, "type") - 1;
    if (v4 > 3)
      v5 = 0;
    else
      v5 = qword_18C311A38[v4];
    objc_msgSend(v1, "label");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v1, "emergencyType");
    v9 = 2;
    if (v8 == 2)
      v10 = 2;
    else
      v10 = v8 == 1;
    v11 = objc_msgSend(v1, "faceTimeType");
    if (v11 != 2)
      v9 = v11 == 1;
    v6 = -[INPersonHandle initWithValue:type:label:emergencyType:faceTimeType:suggested:](v2, "initWithValue:type:label:emergencyType:faceTimeType:suggested:", v3, v5, v7, v10, v9, objc_msgSend(v1, "suggested"));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

_INPBContact *INIntentSlotValueTransformToContact(void *a1)
{
  id v1;
  void *v2;
  _INPBContact *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  INIntentSlotValueTransformToContactValue(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = objc_alloc_init(_INPBContact);
    -[_INPBContact addValue:](v3, "addValue:", v2);
  }
  else
  {
    v3 = 0;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(v1, "scoredAlternatives", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      v9 = v2;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        INIntentSlotValueTransformToScoredContactValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v8));
        v2 = (void *)objc_claimAutoreleasedReturnValue();

        if (v2)
          -[_INPBContact addValue:](v3, "addValue:", v2);
        ++v8;
        v9 = v2;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

_INPBContactValue *INIntentSlotValueTransformToContactValue(void *a1)
{
  id v1;
  _INPBContactValue *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  __CFString *v36;
  _INPBValueMetadata *v37;
  _INPBValueMetadata *v38;
  const __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v2 = 0;
    goto LABEL_32;
  }
  v2 = objc_alloc_init(_INPBContactValue);
  objc_msgSend(v1, "nameComponents");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "namePrefix");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setNamePrefix:](v2, "setNamePrefix:", v4);

  objc_msgSend(v3, "phoneticRepresentation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "namePrefix");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setPhoneticNamePrefix:](v2, "setPhoneticNamePrefix:", v6);

  objc_msgSend(v3, "givenName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setFirstName:](v2, "setFirstName:", v7);

  objc_msgSend(v3, "phoneticRepresentation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "givenName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setPhoneticFirstName:](v2, "setPhoneticFirstName:", v9);

  objc_msgSend(v3, "middleName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setMiddleName:](v2, "setMiddleName:", v10);

  objc_msgSend(v3, "phoneticRepresentation");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "middleName");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setPhoneticMiddleName:](v2, "setPhoneticMiddleName:", v12);

  objc_msgSend(v3, "familyName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setLastName:](v2, "setLastName:", v13);

  objc_msgSend(v3, "phoneticRepresentation");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "familyName");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setPhoneticLastName:](v2, "setPhoneticLastName:", v15);

  objc_msgSend(v3, "nameSuffix");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setNameSuffix:](v2, "setNameSuffix:", v16);

  objc_msgSend(v3, "phoneticRepresentation");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "nameSuffix");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setPhoneticNameSuffix:](v2, "setPhoneticNameSuffix:", v18);

  objc_msgSend(v3, "nickname");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setNickName:](v2, "setNickName:", v19);

  objc_msgSend(v1, "displayName");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setFullName:](v2, "setFullName:", v20);

  objc_msgSend(v1, "personHandle");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformToContactHandle(v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setContactHandle:](v2, "setContactHandle:", v22);

  objc_msgSend(v1, "image");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformToImageValue(v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setImage:](v2, "setImage:", v24);

  v25 = objc_msgSend(v1, "suggestionType");
  if (v25 == 2)
    v26 = 2;
  else
    v26 = v25 == 1;
  -[_INPBContactValue setSuggestionType:](v2, "setSuggestionType:", v26);
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  objc_msgSend(v1, "aliases", 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v29; ++i)
      {
        if (*(_QWORD *)v47 != v30)
          objc_enumerationMutation(v27);
        INIntentSlotValueTransformToContactHandle(*(void **)(*((_QWORD *)&v46 + 1) + 8 * i));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        if (v32)
          -[_INPBContactValue addAliases:](v2, "addAliases:", v32);

      }
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    }
    while (v29);
  }

  objc_msgSend(v1, "_userInput");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "contactIdentifier");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sourceAppBundleIdentifier");
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = (__CFString *)v35;
  if (v33 || v34 || v35)
  {
    v37 = objc_alloc_init(_INPBValueMetadata);
    v38 = v37;
    if (v33)
      -[_INPBValueMetadata setInput:](v37, "setInput:", v33);
    if (v34)
      -[_INPBValueMetadata setUuid:](v38, "setUuid:", v34);
    if (-[__CFString isEqualToString:](v36, "isEqualToString:", CFSTR("com.apple.MobileAddressBook")))
    {
      -[_INPBValueMetadata addRequiredEntitlement:](v38, "addRequiredEntitlement:", 1);
      v39 = CFSTR("device");
    }
    else
    {
      if (!v36)
      {
LABEL_27:
        -[_INPBContactValue setValueMetadata:](v2, "setValueMetadata:", v38);

        goto LABEL_28;
      }
      -[_INPBValueMetadata setSourceAppBundleIdentifier:](v38, "setSourceAppBundleIdentifier:", v36);
      v39 = v36;
    }
    -[_INPBValueMetadata setSource:](v38, "setSource:", v39);
    goto LABEL_27;
  }
LABEL_28:
  objc_msgSend(v1, "customIdentifier");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setCustomIdentifier:](v2, "setCustomIdentifier:", v40);

  objc_msgSend(v1, "relationship");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setRelationship:](v2, "setRelationship:", v41);

  -[_INPBContactValue setIsMe:](v2, "setIsMe:", objc_msgSend(v1, "isMe"));
  objc_msgSend(v1, "phonemeData");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  -[_INPBContactValue setPhonemeData:](v2, "setPhonemeData:", v42);

  -[_INPBContactValue setIsContactSuggestion:](v2, "setIsContactSuggestion:", objc_msgSend(v1, "isContactSuggestion"));
  v43 = objc_msgSend(v1, "searchProvider") - 1;
  if (v43 < 3)
    v44 = (v43 + 1);
  else
    v44 = 0;
  -[_INPBContactValue setSearchProvider:](v2, "setSearchProvider:", v44);

LABEL_32:
  return v2;
}

id INIntentSlotValueTransformToScoredContactValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  _INPBConfidenceScore *v5;
  void *v6;
  _INPBValueMetadata *v7;

  v1 = a1;
  objc_msgSend(v1, "person");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  INIntentSlotValueTransformToContactValue(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "score");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = objc_alloc_init(_INPBConfidenceScore);
    objc_msgSend(v1, "score");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "floatValue");
    -[_INPBConfidenceScore setAggregateScore:](v5, "setAggregateScore:");

    if (objc_msgSend(v3, "hasValueMetadata"))
    {
      objc_msgSend(v3, "valueMetadata");
      v7 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
      -[_INPBValueMetadata setConfidenceScore:](v7, "setConfidenceScore:", v5);
    }
    else
    {
      v7 = objc_alloc_init(_INPBValueMetadata);
      -[_INPBValueMetadata setConfidenceScore:](v7, "setConfidenceScore:", v5);
      objc_msgSend(v3, "setValueMetadata:", v7);
    }

  }
  return v3;
}

_INPBContactHandle *INIntentSlotValueTransformToContactHandle(void *a1)
{
  id v1;
  _INPBContactHandle *v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBContactHandle);
    if (v2)
    {
      objc_msgSend(v1, "value");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBContactHandle setValue:](v2, "setValue:", v3);

      v4 = objc_msgSend(v1, "type");
      v5 = 2 * (v4 == 2);
      if (v4 == 1)
        v5 = 1;
      if (v4 == 104)
        v5 = 4;
      if (v4 == 103)
        v6 = 3;
      else
        v6 = v5;
      -[_INPBContactHandle setType:](v2, "setType:", v6);
      objc_msgSend(v1, "label");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBContactHandle setLabel:](v2, "setLabel:", v7);

      v8 = objc_msgSend(v1, "emergencyType");
      if (v8 == 2)
        v9 = 2;
      else
        v9 = v8 == 1;
      -[_INPBContactHandle setEmergencyType:](v2, "setEmergencyType:", v9);
      v10 = objc_msgSend(v1, "faceTimeType");
      if (v10 == 2)
        v11 = 2;
      else
        v11 = v10 == 1;
      -[_INPBContactHandle setFaceTimeType:](v2, "setFaceTimeType:", v11);
      -[_INPBContactHandle setSuggested:](v2, "setSuggested:", objc_msgSend(v1, "isSuggested"));
    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromContactValue(void *a1)
{
  return INIntentSlotValueTransformFromContactValueWithAlternatives(a1, 0);
}

id INIntentSlotValueTransformFromContactValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromContactValueWithAlternatives(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i), 0);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformFromContacts(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromContact(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToContactValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToContactValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToContacts(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToContact(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBContactValue *INIntentSlotValueRedactedValueFromContactValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _INPBContactValue *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "valueMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
    goto LABEL_2;
  objc_msgSend(v5, "valueMetadata");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sourceAppBundleIdentifier");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v11)
  {

LABEL_7:
    v9 = objc_alloc_init(_INPBContactValue);
    objc_msgSend(v5, "image");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedImageValueFromImageValue(v16, a2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setImage:](v9, "setImage:", v17);

    objc_msgSend(v5, "namePrefix");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setNamePrefix:](v9, "setNamePrefix:", v18);

    objc_msgSend(v5, "phoneticNamePrefix");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setPhoneticNamePrefix:](v9, "setPhoneticNamePrefix:", v19);

    objc_msgSend(v5, "firstName");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setFirstName:](v9, "setFirstName:", v20);

    objc_msgSend(v5, "phoneticFirstName");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setPhoneticFirstName:](v9, "setPhoneticFirstName:", v21);

    objc_msgSend(v5, "middleName");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setMiddleName:](v9, "setMiddleName:", v22);

    objc_msgSend(v5, "phoneticMiddleName");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setPhoneticMiddleName:](v9, "setPhoneticMiddleName:", v23);

    objc_msgSend(v5, "lastName");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setLastName:](v9, "setLastName:", v24);

    objc_msgSend(v5, "phoneticLastName");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setPhoneticLastName:](v9, "setPhoneticLastName:", v25);

    objc_msgSend(v5, "nameSuffix");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setNameSuffix:](v9, "setNameSuffix:", v26);

    objc_msgSend(v5, "phoneticNameSuffix");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setPhoneticNameSuffix:](v9, "setPhoneticNameSuffix:", v27);

    objc_msgSend(v5, "nickName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setNickName:](v9, "setNickName:", v28);

    objc_msgSend(v5, "fullName");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setFullName:](v9, "setFullName:", v29);

    objc_msgSend(v5, "contactHandle");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setContactHandle:](v9, "setContactHandle:", v30);

    objc_msgSend(v5, "valueMetadata");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setValueMetadata:](v9, "setValueMetadata:", v31);

    objc_msgSend(v5, "customIdentifier");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBContactValue setCustomIdentifier:](v9, "setCustomIdentifier:", v32);

    -[_INPBContactValue setIsContactSuggestion:](v9, "setIsContactSuggestion:", objc_msgSend(v5, "isContactSuggestion"));
    -[_INPBContactValue setSearchProvider:](v9, "setSearchProvider:", objc_msgSend(v5, "searchProvider"));
    goto LABEL_8;
  }
  v12 = (void *)v11;
  objc_msgSend(v5, "valueMetadata");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "sourceAppBundleIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v6, "isEqualToString:", v14);

  if (v15)
    goto LABEL_7;
LABEL_2:
  v9 = 0;
LABEL_8:

  return v9;
}

_INPBContact *INIntentSlotValueRedactedContactFromContact(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBContact *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBContact);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromContactValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2, v6);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBContact addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedContactsFromContacts(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedContactFromContact(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

id INIntentSlotValueTransformFromDialingContact(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v23 = a1;
  objc_msgSend(v23, "values");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (!v2)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_21;
  }
  v3 = v2;
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)v25;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v25 != v6)
        objc_enumerationMutation(v1);
      v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
      if (v5
        || (objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "dialingContact"),
            v9 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v9, "valueMetadata"),
            v10 = (void *)objc_claimAutoreleasedReturnValue(),
            v11 = INPrivacyEntitlementOptionsForValueMetadata(v10),
            v10,
            v9,
            v11))
      {
        v12 = v8;
        if (!v12)
          continue;
        v13 = v12;
        if (objc_msgSend(v12, "hasDialingContact")
          && (objc_msgSend(v13, "dialingContact"),
              v14 = (void *)objc_claimAutoreleasedReturnValue(),
              INIntentSlotValueTransformFromContactValueWithAlternatives(v14, 0),
              v15 = (id)objc_claimAutoreleasedReturnValue(),
              v14,
              v15))
        {

        }
        else
        {
          LOBYTE(v22) = 0;
          LOBYTE(v21) = 0;
          v15 = -[INPerson _initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:aliases:suggestionType:isMe:alternatives:sourceAppBundleIdentifier:phonemeData:isContactSuggestion:]([INPerson alloc], "_initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:aliases:suggestionType:isMe:alternatives:sourceAppBundleIdentifier:phonemeData:isContactSuggestion:", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v21, 0, 0, 0, v22);

          if (!v15)
            continue;
        }
        if (!v4)
          v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v4, "addObject:", v15);

      }
      else
      {
        v5 = v8;
      }
    }
    v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  }
  while (v3);
LABEL_21:

  v16 = v5;
  v17 = v4;
  if (v16)
  {
    if (!objc_msgSend(v16, "hasDialingContact")
      || (objc_msgSend(v16, "dialingContact"),
          v18 = (void *)objc_claimAutoreleasedReturnValue(),
          INIntentSlotValueTransformFromContactValueWithAlternatives(v18, v17),
          v19 = (id)objc_claimAutoreleasedReturnValue(),
          v18,
          !v19))
    {
      LOBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      v19 = -[INPerson _initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:aliases:suggestionType:isMe:alternatives:sourceAppBundleIdentifier:phonemeData:isContactSuggestion:]([INPerson alloc], "_initWithUserInput:personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:aliases:suggestionType:isMe:alternatives:sourceAppBundleIdentifier:phonemeData:isContactSuggestion:", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v21, v17, 0, 0, v22);
    }
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

_INPBDialingContact *INIntentSlotValueTransformToDialingContact(void *a1)
{
  id v1;
  void *v2;
  _INPBDialingContact *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  _INIntentSlotValueTransformToDialingContactValue(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = objc_alloc_init(_INPBDialingContact);
    -[_INPBDialingContact addValue:](v3, "addValue:", v2);
  }
  else
  {
    v3 = 0;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(v1, "alternatives", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      v9 = v2;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        _INIntentSlotValueTransformToDialingContactValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v8));
        v2 = (void *)objc_claimAutoreleasedReturnValue();

        if (v2)
          -[_INPBDialingContact addValue:](v3, "addValue:", v2);
        ++v8;
        v9 = v2;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

_INPBDialingContactValue *_INIntentSlotValueTransformToDialingContactValue(void *a1)
{
  id v1;
  _INPBDialingContactValue *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBDialingContactValue);
    INIntentSlotValueTransformToContactValue(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    -[_INPBDialingContactValue setDialingContact:](v2, "setDialingContact:", v3);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromDialingContacts(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDialingContact(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDialingContacts(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDialingContact(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

_INPBDialingContact *INIntentSlotValueRedactedDialingContactFromDialingContact(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _INPBDialingContactValue *v16;
  void *v17;
  void *v18;
  id v20;
  id obj;
  _INPBDialingContact *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v22 = objc_alloc_init(_INPBDialingContact);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v20 = v5;
    objc_msgSend(v5, "values");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v24;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v24 != v9)
            objc_enumerationMutation(obj);
          v11 = *(id *)(*((_QWORD *)&v23 + 1) + 8 * v10);
          v12 = v6;
          objc_msgSend(v11, "dialingContact");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "valueMetadata");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = INPrivacyEntitlementOptionsForValueMetadata(v14);

          if ((v15 & a2) != 0)
          {
            v16 = 0;
          }
          else
          {
            v16 = objc_alloc_init(_INPBDialingContactValue);
            objc_msgSend(v11, "dialingContact");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            INIntentSlotValueRedactedValueFromContactValue(v17, a2, v12);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            -[_INPBDialingContactValue setDialingContact:](v16, "setDialingContact:", v18);

          }
          if (v16)
            -[_INPBDialingContact addValue:](v22, "addValue:", v16);

          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v8);
    }

    v5 = v20;
  }
  else
  {
    v22 = 0;
  }

  return v22;
}

id INIntentSlotValueRedactedDialingContactsFromDialingContacts(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedDialingContactFromDialingContact(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

uint64_t _INPBResumeTimerIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setResumeMultiple:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INAmountTypeHasBackingType(unint64_t a1)
{
  return (a1 < 7) & (0x7Eu >> a1);
}

uint64_t INAmountTypeGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 6)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INAmountTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 5)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INAmountTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E228D238[a1 - 1];
}

uint64_t INAmountTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("minimumDue")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("amountDue")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("currentBalance")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("maximumTransferAmount")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("minimumTransferAmount")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("statementBalance")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INAmountTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("minimum due");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("amount due");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("current balance");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("maximum transfer amount");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("minimum transfer amount");
      goto LABEL_9;
    case 6:
      v4 = CFSTR("statement balance");
LABEL_9:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

__CFString *INSearchForBillsIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228D268[a1];
}

__CFString *INSetTaskAttributeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228D2A8[a1];
}

uint64_t _INPBAddTasksIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_54;
      case 2u:
        v17 = objc_alloc_init(_INPBTaskList);
        if (!PBReaderPlaceMark() || !_INPBTaskListReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTaskList:", v17, 0, 0);
        goto LABEL_54;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTaskTitles:", v17, 0, 0);
        goto LABEL_54;
      case 5u:
        v17 = objc_alloc_init(_INPBSpatialEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBSpatialEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpatialEventTrigger:", v17, 0, 0);
        goto LABEL_54;
      case 6u:
        v17 = objc_alloc_init(_INPBTemporalEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBTemporalEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTemporalEventTrigger:", v17, 0, 0);
        goto LABEL_54;
      case 7u:
        v17 = objc_alloc_init(_INPBContactEventTrigger);
        if (!PBReaderPlaceMark() || (_INPBContactEventTriggerReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactEventTrigger:", v17, 0, 0);
        goto LABEL_54;
      case 8u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_68:
        objc_msgSend(a1, "setTaskReference:", v25, v33, v34);
        goto LABEL_55;
      case 9u:
        v17 = objc_alloc_init(_INPBIntent);
        if (!PBReaderPlaceMark() || (_INPBIntentReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntent:", v17, 0, 0);
        goto LABEL_54;
      case 0xAu:
        v17 = objc_alloc_init(_INPBContact);
        v33 = 0;
        v34 = 0;
        if (PBReaderPlaceMark() && _INPBContactReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addTargetTaskListMembers:", v17, 0, 0);
LABEL_54:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_75:

        return 0;
      case 0xBu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_73:
        objc_msgSend(a1, "setPriority:", v32, v33, v34);
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

__CFString *INPayBillIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228D2F0[a1];
}

void INCallRecordTypeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_12;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 2);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
  v3 = v4;
  if ((a1 & 8) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
  v3 = v4;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 7);
  v3 = v4;
  if ((a1 & 0x20) == 0)
  {
LABEL_9:
    if ((a1 & 0x40) == 0)
      goto LABEL_10;
LABEL_19:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 9);
    v3 = v4;
    if ((a1 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_18:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 8);
  v3 = v4;
  if ((a1 & 0x40) != 0)
    goto LABEL_19;
LABEL_10:
  if ((a1 & 0x80) != 0)
  {
LABEL_11:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 10);
    v3 = v4;
  }
LABEL_12:

}

uint64_t INCallRecordTypeOptionsContainsBackingType(uint64_t result, int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = result;
    result = 0;
    switch(a2)
    {
      case 2:
        result = v2 & 1;
        break;
      case 3:
        result = (v2 >> 1) & 1;
        break;
      case 4:
        result = (v2 >> 2) & 1;
        break;
      case 5:
        result = (v2 >> 3) & 1;
        break;
      case 7:
        result = (v2 >> 4) & 1;
        break;
      case 8:
        result = (v2 >> 5) & 1;
        break;
      case 9:
        result = (v2 >> 6) & 1;
        break;
      case 10:
        result = (v2 >> 7) & 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t *INCallRecordTypeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 2:
        v2 |= 1uLL;
        break;
      case 3:
        v2 |= 2uLL;
        break;
      case 4:
        v2 |= 4uLL;
        break;
      case 5:
        v2 |= 8uLL;
        break;
      case 7:
        v2 |= 0x10uLL;
        break;
      case 8:
        v2 |= 0x20uLL;
        break;
      case 9:
        v2 |= 0x40uLL;
        break;
      case 10:
        v2 |= 0x80uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INCallRecordTypeOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 2:
        v2 &= ~1uLL;
        break;
      case 3:
        v2 &= ~2uLL;
        break;
      case 4:
        v2 &= ~4uLL;
        break;
      case 5:
        v2 &= ~8uLL;
        break;
      case 7:
        v2 &= ~0x10uLL;
        break;
      case 8:
        v2 &= ~0x20uLL;
        break;
      case 9:
        v2 &= ~0x40uLL;
        break;
      case 10:
        v2 &= ~0x80uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INCallRecordTypeOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("outgoing"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("missed"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("received"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("latest"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  objc_msgSend(v3, "addObject:", CFSTR("voicemail"));
  if ((v1 & 0x20) == 0)
  {
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_9;
LABEL_20:
    objc_msgSend(v3, "addObject:", CFSTR("inProgress"));
    if ((v1 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  objc_msgSend(v3, "addObject:", CFSTR("ringing"));
  if ((v1 & 0x40) != 0)
    goto LABEL_20;
LABEL_9:
  if (v1 < 0)
LABEL_10:
    objc_msgSend(v3, "addObject:", CFSTR("onHold"));
LABEL_11:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INCallRecordTypeOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("outgoing"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("missed")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("received")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("latest")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("voicemail")))
          v3 |= 0x10uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("ringing")))
          v3 |= 0x20uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("inProgress")))
          v3 |= 0x40uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("onHold")))
          v3 |= 0x80uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INCallRecordTypeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_13;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("outgoing"), CFSTR("outgoing"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("missed"), CFSTR("missed"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  INLocalizedStringWithLocalizer(CFSTR("received"), CFSTR("received"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  INLocalizedStringWithLocalizer(CFSTR("latest"), CFSTR("latest"), v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v11);

  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  INLocalizedStringWithLocalizer(CFSTR("voicemail"), CFSTR("voicemail"), v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v12);

  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0)
      goto LABEL_9;
LABEL_20:
    INLocalizedStringWithLocalizer(CFSTR("in progress"), CFSTR("in progress"), v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v14);

    if ((a1 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  INLocalizedStringWithLocalizer(CFSTR("ringing"), CFSTR("ringing"), v3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v13);

  if ((a1 & 0x40) != 0)
    goto LABEL_20;
LABEL_9:
  if ((a1 & 0x80) != 0)
  {
LABEL_10:
    INLocalizedStringWithLocalizer(CFSTR("on hold"), CFSTR("on hold"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_11:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_13:
  return v6;
}

uint64_t _INPBSearchForPhotosIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBLocation *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 2)
      {
        v25 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocationCreated:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 4)
        {
          if ((_DWORD)v17 == 7)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_39:
            objc_msgSend(a1, "setSearchResultsCount:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (_INPBLocation *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAlbumName:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPayloadConfirmationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _INPBSelectionItem *v46;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 999)
      {
        if ((_DWORD)v17 == 1)
        {
          v46 = objc_alloc_init(_INPBSelectionItem);
          if (!PBReaderPlaceMark() || !_INPBSelectionItemReadFrom(v46, a2))
          {

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setConfirmationItem:", v46, 0, 0);

        }
        else
        {
          if ((_DWORD)v17 != 2)
          {
LABEL_55:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if ((v30 & 0x80) == 0)
              goto LABEL_63;
            v25 += 7;
            v14 = v26++ >= 9;
            if (v14)
            {
              v31 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_66:
          objc_msgSend(a1, "setReason:", v31);
        }
      }
      else
      {
        switch((_DWORD)v17)
        {
          case 0x654:
            v32 = 0;
            v33 = 0;
            v34 = 0;
            while (1)
            {
              v35 = *v3;
              v36 = *(_QWORD *)(a2 + v35);
              if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
                break;
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if ((v37 & 0x80) == 0)
                goto LABEL_68;
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_71;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_68:
            if (*(_BYTE *)(a2 + *v5))
              v38 = 0;
            else
              v38 = v34;
LABEL_71:
            objc_msgSend(a1, "setSendAnnouncementIntentAnnouncementConfirmationReason:", v38);
            break;
          case 0x514:
            v39 = 0;
            v40 = 0;
            v41 = 0;
            while (1)
            {
              v42 = *v3;
              v43 = *(_QWORD *)(a2 + v42);
              if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
                break;
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if ((v44 & 0x80) == 0)
                goto LABEL_73;
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_76;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_73:
            if (*(_BYTE *)(a2 + *v5))
              v45 = 0;
            else
              v45 = v41;
LABEL_76:
            objc_msgSend(a1, "setStartCallIntentContactsConfirmationReason:", v45);
            break;
          case 0x3E8:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_58;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_61;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_61:
            objc_msgSend(a1, "setAddTasksIntentTargetTaskListConfirmationReason:", v24);
            break;
          default:
            goto LABEL_55;
        }
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromIntent(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_5;
  v3 = objc_msgSend(v1, "encodingFormat");
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      objc_msgSend(v2, "encodedIntent");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "dataUsingEncoding:", 4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentCreate(0, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
LABEL_5:
    v6 = 0;
    goto LABEL_9;
  }
  objc_msgSend(v2, "intentTypeName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_alloc(MEMORY[0x1E0C99D50]);
  objc_msgSend(v2, "encodedIntent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "initWithBase64EncodedString:options:", v5, 0);
  INIntentCreate(v4, v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_7:
  objc_msgSend(v6, "launchId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend(v2, "appIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "bundleIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_setLaunchId:", v11);

  }
LABEL_9:

  return v6;
}

_INPBIntent *INIntentSlotValueTransformToIntent(void *a1)
{
  id v1;
  _INPBIntent *v2;
  _INPBAppIdentifier *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBIntent);
    v3 = objc_alloc_init(_INPBAppIdentifier);
    objc_msgSend(v1, "launchId");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBAppIdentifier setBundleIdentifier:](v3, "setBundleIdentifier:", v4);

    -[_INPBIntent setAppIdentifier:](v2, "setAppIdentifier:", v3);
    -[_INPBIntent setEncodingFormat:](v2, "setEncodingFormat:", 1);
    objc_msgSend(v1, "typeName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBIntent setIntentTypeName:](v2, "setIntentTypeName:", v5);

    objc_msgSend(v1, "_JSONDictionaryRepresentation");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "if_JSONStringRepresentation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBIntent setEncodedIntent:](v2, "setEncodedIntent:", v7);

    objc_msgSend(v1, "_codableDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "schema");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[INStringLocalizer siriLocalizer](INStringLocalizer, "siriLocalizer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "dictionaryRepresentationForIntent:localizer:", v1, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "if_JSONStringRepresentation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBIntent setEncodedIntentDefinition:](v2, "setEncodedIntentDefinition:", v12);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromIntents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromIntent(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToIntents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToIntent(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_18C0314EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45829(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45830(uint64_t a1)
{

}

uint64_t _INPBDeleteFilePermanentlyIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromImageValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromImageValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToImageValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToImageValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedImageValueFromImageValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = v3;

  return v6;
}

uint64_t _INPBBalanceAmountValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBValueMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_42:
        objc_msgSend(a1, "setType:", v25);
        goto LABEL_43;
      case 3u:
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrencyAmount:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(_INPBDecimalNumberValue);
        if (PBReaderPlaceMark() && (_INPBDecimalNumberValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCustomAmount:", v17, 0, 0);
LABEL_37:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

__CFString *INStartVideoCallIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return off_1E228D410[a1];
}

uint64_t _INPBBoolValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _INPBValueMetadata *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v23, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        objc_msgSend(a1, "setValue:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCurrencyAmountReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCurrencyAmountValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBCancelWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDoubleValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  _INPBValueMetadata *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v22 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v22, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v22, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(double *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0.0;
        }
        objc_msgSend(a1, "setValue:", v21);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSetCarLockStatusIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setLocked:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v24, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCarName:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBEventParticipantReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBContact *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(_INPBContact);
          if (PBReaderPlaceMark() && (_INPBContactReadFrom(v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setPerson:", v17, 0, 0);

            continue;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_46;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_49;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_49:
          objc_msgSend(a1, "setStatus:", v25);
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_53:
          objc_msgSend(a1, "setIsUser:", v28 != 0);
          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_55;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          v34 = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        v34 = 0;
LABEL_57:
      objc_msgSend(a1, "setIsEventOrganizer:", v34 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPlayMediaIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDictionary *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDictionary);
        if (!PBReaderPlaceMark() || (_INPBDictionaryReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNowPlayingInfo:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INCreateNoteIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228D498[a1];
}

id INIntentSlotValueTransformFromSpeed(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromSpeedValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromSpeedValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  objc_msgSend(v1, "valueMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  INPrivacyEntitlementValidateValueMetadata(v3);

  if (!objc_msgSend(v2, "hasUnit"))
    goto LABEL_10;
  switch(objc_msgSend(v2, "unit"))
  {
    case 1u:
      objc_msgSend(MEMORY[0x1E0CB3AF8], "metersPerSecond");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 2u:
      objc_msgSend(MEMORY[0x1E0CB3AF8], "kilometersPerHour");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 3u:
      objc_msgSend(MEMORY[0x1E0CB3AF8], "milesPerHour");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 4u:
      objc_msgSend(MEMORY[0x1E0CB3AF8], "knots");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      goto LABEL_10;
  }
  v5 = (void *)v4;
  if (!v4)
  {
LABEL_10:
    v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "INIntentSlotValueTransformFromSpeedValue";
      _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s _INPBSpeedValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v10, 0xCu);
    }
    goto LABEL_12;
  }
  v6 = objc_alloc(MEMORY[0x1E0CB3758]);
  objc_msgSend(v2, "magnitude");
  v7 = (void *)objc_msgSend(v6, "initWithDoubleValue:unit:", v5);

LABEL_13:
  return v7;
}

_INPBSpeed *INIntentSlotValueTransformToSpeed(void *a1)
{
  void *v1;
  _INPBSpeed *v2;

  INIntentSlotValueTransformToSpeedValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBSpeed);
    -[_INPBSpeed addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBSpeedValue *INIntentSlotValueTransformToSpeedValue(void *a1)
{
  id v1;
  _INPBSpeedValue *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  int v14;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBSpeedValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    v5 = v4;

    -[_INPBSpeedValue setMagnitude:](v2, "setMagnitude:", v5);
    objc_msgSend(MEMORY[0x1E0CB3AF8], "kilometersPerHour");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v3, "isEqual:", v6);

    if ((v7 & 1) != 0)
    {
      v8 = 2;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3AF8], "knots");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v3, "isEqual:", v9);

      if ((v10 & 1) != 0)
      {
        v8 = 4;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3AF8], "metersPerSecond");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v3, "isEqual:", v11);

        if ((v12 & 1) != 0)
        {
          v8 = 1;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3AF8], "milesPerHour");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v3, "isEqual:", v13);

          if (!v14)
          {
LABEL_12:

            return v2;
          }
          v8 = 3;
        }
      }
    }
    -[_INPBSpeedValue setUnit:](v2, "setUnit:", v8);
    goto LABEL_12;
  }
  v2 = 0;
  return v2;
}

id INIntentSlotValueTransformFromSpeedValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromSpeedValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromSpeeds(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromSpeed(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToSpeedValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToSpeedValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToSpeeds(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToSpeed(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromSpeedValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

_INPBSpeed *INIntentSlotValueRedactedSpeedFromSpeed(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBSpeed *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBSpeed);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromSpeedValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBSpeed addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedSpeedsFromSpeeds(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedSpeedFromSpeed(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

BOOL _INPBScanVisualCodeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

const __CFString *INCodableStringAttributeMetadataCapitalizationAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("None");
  else
    return off_1E228D4C8[a1 - 1];
}

id _INExtensionAuxiliaryVendingXPCInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE061A88);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_confirmIntent_withCompletion_, 2, 1);

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_handleIntent_withCompletion_, 2, 1);

  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend(v7, "setWithObjects:", v8, v9, objc_opt_class(), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v10, sel_resolveIntentSlots_forIntent_completionBlock_, 2, 1);

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0B84D0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)MEMORY[0x1E0C99E60];
  v13 = objc_opt_class();
  objc_msgSend(v12, "setWithObjects:", v13, objc_opt_class(), 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setClasses:forSelector:argumentIndex:ofReply:", v14, sel_intentResponseDidUpdate_withSerializedCacheItems_, 1, 0);

  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", v11, sel_startSendingUpdatesForIntent_toObserver_, 1, 0);
  return v0;
}

__CFString *INSetCarLockStatusIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228D4E0[a1];
}

id INIntentSlotValueTransformFromMass(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromMassValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromMassValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  objc_msgSend(v1, "valueMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  INPrivacyEntitlementValidateValueMetadata(v3);

  if (!objc_msgSend(v2, "hasUnit"))
    goto LABEL_22;
  switch(objc_msgSend(v2, "unit"))
  {
    case 1u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "kilograms");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 2u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "grams");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 3u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "decigrams");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 4u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "centigrams");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 5u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "milligrams");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 6u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "micrograms");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 7u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "nanograms");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 8u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "picograms");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 9u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "ounces");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xAu:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "poundsMass");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xBu:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "stones");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xCu:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "metricTons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xDu:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "shortTons");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xEu:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "carats");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0xFu:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "ouncesTroy");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    case 0x10u:
      objc_msgSend(MEMORY[0x1E0CB3AE0], "slugs");
      v4 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      goto LABEL_22;
  }
  v5 = (void *)v4;
  if (!v4)
  {
LABEL_22:
    v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "INIntentSlotValueTransformFromMassValue";
      _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s _INPBMassValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v10, 0xCu);
    }
    goto LABEL_24;
  }
  v6 = objc_alloc(MEMORY[0x1E0CB3758]);
  objc_msgSend(v2, "magnitude");
  v7 = (void *)objc_msgSend(v6, "initWithDoubleValue:unit:", v5);

LABEL_25:
  return v7;
}

_INPBMass *INIntentSlotValueTransformToMass(void *a1)
{
  void *v1;
  _INPBMass *v2;

  INIntentSlotValueTransformToMassValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBMass);
    -[_INPBMass addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBMassValue *INIntentSlotValueTransformToMassValue(void *a1)
{
  id v1;
  _INPBMassValue *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  int v38;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBMassValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    v5 = v4;

    -[_INPBMassValue setMagnitude:](v2, "setMagnitude:", v5);
    objc_msgSend(MEMORY[0x1E0CB3AE0], "carats");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v3, "isEqual:", v6);

    if ((v7 & 1) != 0)
    {
      v8 = 14;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3AE0], "centigrams");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v3, "isEqual:", v9);

      if ((v10 & 1) != 0)
      {
        v8 = 4;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3AE0], "decigrams");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v3, "isEqual:", v11);

        if ((v12 & 1) != 0)
        {
          v8 = 3;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3AE0], "grams");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v3, "isEqual:", v13);

          if ((v14 & 1) != 0)
          {
            v8 = 2;
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3AE0], "kilograms");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v3, "isEqual:", v15);

            if ((v16 & 1) != 0)
            {
              v8 = 1;
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3AE0], "metricTons");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v3, "isEqual:", v17);

              if ((v18 & 1) != 0)
              {
                v8 = 12;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB3AE0], "micrograms");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                v20 = objc_msgSend(v3, "isEqual:", v19);

                if ((v20 & 1) != 0)
                {
                  v8 = 6;
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB3AE0], "milligrams");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v3, "isEqual:", v21);

                  if ((v22 & 1) != 0)
                  {
                    v8 = 5;
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB3AE0], "nanograms");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    v24 = objc_msgSend(v3, "isEqual:", v23);

                    if ((v24 & 1) != 0)
                    {
                      v8 = 7;
                    }
                    else
                    {
                      objc_msgSend(MEMORY[0x1E0CB3AE0], "ounces");
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      v26 = objc_msgSend(v3, "isEqual:", v25);

                      if ((v26 & 1) != 0)
                      {
                        v8 = 9;
                      }
                      else
                      {
                        objc_msgSend(MEMORY[0x1E0CB3AE0], "ouncesTroy");
                        v27 = (void *)objc_claimAutoreleasedReturnValue();
                        v28 = objc_msgSend(v3, "isEqual:", v27);

                        if ((v28 & 1) != 0)
                        {
                          v8 = 15;
                        }
                        else
                        {
                          objc_msgSend(MEMORY[0x1E0CB3AE0], "picograms");
                          v29 = (void *)objc_claimAutoreleasedReturnValue();
                          v30 = objc_msgSend(v3, "isEqual:", v29);

                          if ((v30 & 1) != 0)
                          {
                            v8 = 8;
                          }
                          else
                          {
                            objc_msgSend(MEMORY[0x1E0CB3AE0], "poundsMass");
                            v31 = (void *)objc_claimAutoreleasedReturnValue();
                            v32 = objc_msgSend(v3, "isEqual:", v31);

                            if ((v32 & 1) != 0)
                            {
                              v8 = 10;
                            }
                            else
                            {
                              objc_msgSend(MEMORY[0x1E0CB3AE0], "shortTons");
                              v33 = (void *)objc_claimAutoreleasedReturnValue();
                              v34 = objc_msgSend(v3, "isEqual:", v33);

                              if ((v34 & 1) != 0)
                              {
                                v8 = 13;
                              }
                              else
                              {
                                objc_msgSend(MEMORY[0x1E0CB3AE0], "slugs");
                                v35 = (void *)objc_claimAutoreleasedReturnValue();
                                v36 = objc_msgSend(v3, "isEqual:", v35);

                                if ((v36 & 1) != 0)
                                {
                                  v8 = 16;
                                }
                                else
                                {
                                  objc_msgSend(MEMORY[0x1E0CB3AE0], "stones");
                                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                                  v38 = objc_msgSend(v3, "isEqual:", v37);

                                  if (!v38)
                                  {
LABEL_36:

                                    return v2;
                                  }
                                  v8 = 11;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    -[_INPBMassValue setUnit:](v2, "setUnit:", v8);
    goto LABEL_36;
  }
  v2 = 0;
  return v2;
}

id INIntentSlotValueTransformFromMassValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromMassValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromMasses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromMass(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToMassValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToMassValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToMasses(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToMass(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromMassValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

_INPBMass *INIntentSlotValueRedactedMassFromMass(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBMass *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBMass);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromMassValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBMass addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedMassesFromMasses(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedMassFromMass(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

BOOL _INPBListRideOptionsIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = objc_alloc_init(_INPBLocation);
        if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDropOffLocation:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBLocation);
    if (!PBReaderPlaceMark() || (_INPBLocationReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setPickupLocation:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCompressFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _INPBString *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v23, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        objc_msgSend(a1, "setSuccess:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBDateTimeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBLocalDate *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBLocalDate);
        if (!PBReaderPlaceMark() || (_INPBLocalDateReadFrom(v17, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDate:", v17, 0, 0);
        goto LABEL_28;
      case 2u:
        v17 = objc_alloc_init(_INPBLocalTime);
        if (PBReaderPlaceMark() && (_INPBLocalTimeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTime:", v17, 0, 0);
LABEL_28:

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      case 3u:
        PBReaderReadString();
        v17 = (_INPBLocalDate *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTimeZoneID:", v17);
        goto LABEL_28;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_40:
        objc_msgSend(a1, "setCalendarSystem:", v25);
        goto LABEL_41;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sub_18C045C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C045F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C0460A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C0463EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__50154(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__50155(uint64_t a1)
{

}

uint64_t _INPBCreateFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _INPBString *v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_50;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_52;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_52:
        objc_msgSend(a1, "setOverwrite:", v19 != 0);
        goto LABEL_62;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_56:
        objc_msgSend(a1, "setSuccess:", v26 != 0);
        goto LABEL_62;
      case 3u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v36 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
        else
          v36 = v32;
LABEL_61:
        objc_msgSend(a1, "setEntityType:", v36);
        goto LABEL_62;
      case 4u:
        v37 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v37, a2) & 1) == 0)
          goto LABEL_64;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v37, 0, 0);
        goto LABEL_48;
      case 5u:
        v37 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v37, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDestinationName:", v37, 0, 0);
LABEL_48:

LABEL_62:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_64:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

BOOL _INPBSelectionItemReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBIntentSlotValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 4)
      {
        v18 = objc_alloc_init(_INPBIntentSlotValue);
        if (!PBReaderPlaceMark() || (_INPBIntentSlotValueReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = (_INPBIntentSlotValue *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUuid:", v18);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBIntentSlotValue *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setVocabularyValue:", v18);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

Class __getAFPreferencesClass_block_invoke_50537(uint64_t a1)
{
  Class result;
  void *v3;

  if (!AssistantServicesLibraryCore_frameworkLibrary_50538)
  {
    AssistantServicesLibraryCore_frameworkLibrary_50538 = _sl_dlopen();
    if (!AssistantServicesLibraryCore_frameworkLibrary_50538)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("AFPreferences");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getAFPreferencesClass_softClass_50536 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18C048EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__50547(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__50548(uint64_t a1)
{

}

BOOL INTaskTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

uint64_t INTaskTypeGetBackingType(unint64_t a1)
{
  if (a1 >= 3)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1);
}

uint64_t INTaskTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 10;
  if (a2 == 20)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INTaskTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("completable");
  if (a1 == 1)
    return CFSTR("notCompletable");
  else
    return v1;
}

uint64_t INTaskTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("notCompletable")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("completable")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTaskTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("completable");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("not completable");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL INBloodValueTypeHasBackingType(unint64_t a1)
{
  return a1 < 9;
}

unint64_t INBloodValueTypeGetBackingType(unint64_t result)
{
  if (result >= 9)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INBloodValueTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 7)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INBloodValueTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return *(&off_1E228D810 + a1 - 1);
}

uint64_t INBloodValueTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("apositive")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("anegative")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bpositive")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bnegative")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("abpositive")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("abnegative")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("opositive")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("onegative")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INBloodValueTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("apositive");
      goto LABEL_11;
    case 2:
      v4 = CFSTR("anegative");
      goto LABEL_11;
    case 3:
      v4 = CFSTR("bpositive");
      goto LABEL_11;
    case 4:
      v4 = CFSTR("bnegative");
      goto LABEL_11;
    case 5:
      v4 = CFSTR("abpositive");
      goto LABEL_11;
    case 6:
      v4 = CFSTR("abnegative");
      goto LABEL_11;
    case 7:
      v4 = CFSTR("opositive");
      goto LABEL_11;
    case 8:
      v4 = CFSTR("onegative");
LABEL_11:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBLocationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBLocationValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValue:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INMessage *INIntentSlotValueTransformFromMessage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  INMessage *v7;
  INMessage *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  INMessageLinkMetadata *v26;
  void *v27;
  INMessageLinkMetadata *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  INMessage *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "audioMessageFile");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v4 = (void *)MEMORY[0x1E0C99D20];
      objc_msgSend(v2, "audioMessageFile");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "arrayWithObject:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v2, "attachmentFiles");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }

    v8 = [INMessage alloc];
    objc_msgSend(v2, "identifier");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "conversationIdentifier");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "content");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateSent");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v8;
    if (v52)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "dateSent");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromDateTime(v39);
      v40 = v9;
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "dateFromComponents:");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v54 = 0;
    }
    objc_msgSend(v2, "sender");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContact(v10);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "recipients");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContacts(v11);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "speakableGroupName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v12);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateLastMessageRead");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if (v49)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "dateLastMessageRead");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformFromDateTime(v36);
      v37 = v13;
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "dateFromComponents:");
      v14 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v14 = 0;
    }
    objc_msgSend(v2, "numberOfAttachments");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromInteger(v15);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v2, "type") - 1;
    v48 = (void *)v14;
    if (v16 > 0x21)
      v17 = 0;
    else
      v17 = qword_18C311AB8[v16];
    v18 = objc_msgSend(v2, "hasEffect");
    v19 = objc_msgSend(v2, "effect");
    v50 = v12;
    v47 = v15;
    if (v18)
    {
      v20 = (v19 - 1);
      v21 = v17;
      if (v20 > 0xC)
        v43 = 0;
      else
        v43 = v20 + 1;
    }
    else
    {
      v43 = 0;
      v21 = v17;
    }
    objc_msgSend(v2, "referencedMessage");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMessage();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "serviceName");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reaction");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMessageReaction(v44);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = v6;
    INIntentSlotValueTransformFromFiles(v6);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "location");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocation(v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "linkMetadata");
    v26 = (INMessageLinkMetadata *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMessageLinkMetadata(v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[INMessage initWithIdentifier:conversationIdentifier:content:dateSent:sender:recipients:groupName:dateMessageWasLastRead:numberOfAttachments:messageType:messageEffectType:referencedMessage:serviceName:reaction:attachmentFiles:location:linkMetadata:](v51, "initWithIdentifier:conversationIdentifier:content:dateSent:sender:recipients:groupName:dateMessageWasLastRead:numberOfAttachments:messageType:messageEffectType:referencedMessage:serviceName:reaction:attachmentFiles:location:linkMetadata:", v60, v59, v58, v54, v57, v56, v55, v48, v46, v21, v43, v42, v41, v22, v23,
           v25,
           v27);

    if (v49)
    {

    }
    if (v52)
    {

    }
    objc_msgSend(v2, "linkMetadata");
    v28 = (INMessageLinkMetadata *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromMessageLinkMetadata(v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessage setLinkMetadata:](v7, "setLinkMetadata:", v29);

    objc_msgSend(v2, "paymentAmount");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromCurrencyAmountValue(v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessage setPaymentAmount:](v7, "setPaymentAmount:", v31);

    objc_msgSend(v2, "locationName");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessage setLocationName:](v7, "setLocationName:", v32);

    objc_msgSend(v2, "fileExtension");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[INMessage setFileExtension:](v7, "setFileExtension:", v33);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

_INPBMessage *INIntentSlotValueTransformToMessage(void *a1)
{
  id v1;
  _INPBMessage *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v48;
  void *v49;
  void *v50;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBMessage);
    objc_msgSend(v1, "identifier");
    v3 = objc_claimAutoreleasedReturnValue();
    if (v3)
      -[_INPBMessage setIdentifier:](v2, "setIdentifier:", v3);
    objc_msgSend(v1, "conversationIdentifier");
    v4 = objc_claimAutoreleasedReturnValue();
    if (v4)
      -[_INPBMessage setConversationIdentifier:](v2, "setConversationIdentifier:", v4);
    v49 = (void *)v4;
    v50 = (void *)v3;
    objc_msgSend(v1, "content");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      -[_INPBMessage setContent:](v2, "setContent:", v5);
    objc_msgSend(v1, "dateSent");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "components:fromDate:", 3178748, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToDateTime(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBMessage setDateSent:](v2, "setDateSent:", v9);

    }
    objc_msgSend(v1, "sender");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      INIntentSlotValueTransformToContact(v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBMessage setSender:](v2, "setSender:", v12);

    }
    objc_msgSend(v1, "recipients");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContacts(v48);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setRecipients:](v2, "setRecipients:", v13);

    objc_msgSend(v1, "groupName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      INIntentSlotValueTransformToDataString(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBMessage setSpeakableGroupName:](v2, "setSpeakableGroupName:", v16);

    }
    objc_msgSend(v1, "dateMessageWasLastRead");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "components:fromDate:", 3178748, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToDateTime(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBMessage setDateLastMessageRead:](v2, "setDateLastMessageRead:", v20);

    }
    objc_msgSend(v1, "numberOfAttachments");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v21)
    {
      INIntentSlotValueTransformToInteger(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[_INPBMessage setNumberOfAttachments:](v2, "setNumberOfAttachments:", v23);

    }
    v24 = objc_msgSend(v1, "messageType");
    switch(v24)
    {
      case 1:
        v25 = 1;
        break;
      case 2:
        v25 = 2;
        break;
      case 3:
        v25 = 3;
        break;
      case 4:
        v25 = 4;
        break;
      case 5:
        v25 = 5;
        break;
      case 6:
        v25 = 6;
        break;
      case 7:
        v25 = 7;
        break;
      case 8:
        v25 = 8;
        break;
      case 9:
        v25 = 9;
        break;
      case 10:
        v25 = 10;
        break;
      case 11:
        v25 = 11;
        break;
      case 12:
        v25 = 12;
        break;
      case 13:
        v25 = 13;
        break;
      case 14:
        v25 = 14;
        break;
      case 15:
        v25 = 15;
        break;
      case 16:
        v25 = 16;
        break;
      case 17:
        v25 = 17;
        break;
      case 18:
        v25 = 18;
        break;
      case 19:
        v25 = 19;
        break;
      case 20:
        v25 = 20;
        break;
      case 21:
        v25 = 21;
        break;
      case 22:
        v25 = 22;
        break;
      case 23:
        v25 = 23;
        break;
      case 24:
        v25 = 24;
        break;
      case 25:
        v25 = 25;
        break;
      case 26:
        v25 = 26;
        break;
      case 27:
        v25 = 33;
        break;
      case 28:
        v25 = 34;
        break;
      default:
        switch(v24)
        {
          case 1000:
            v25 = 27;
            break;
          case 1001:
            v25 = 28;
            break;
          case 1002:
            v25 = 29;
            break;
          case 1003:
            v25 = 30;
            break;
          case 1004:
            v25 = 31;
            break;
          case 1005:
            v25 = 32;
            break;
          default:
            v25 = 0;
            break;
        }
        break;
    }
    -[_INPBMessage setType:](v2, "setType:", v25);
    v26 = objc_msgSend(v1, "messageEffectType") - 1;
    if (v26 < 0xD)
      v27 = (v26 + 1);
    else
      v27 = 0x7FFFFFFFLL;
    -[_INPBMessage setEffect:](v2, "setEffect:", v27);
    objc_msgSend(v1, "referencedMessage");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMessage();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setReferencedMessage:](v2, "setReferencedMessage:", v29);

    objc_msgSend(v1, "linkMetadata");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMessageLinkMetadata(v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setLinkMetadata:](v2, "setLinkMetadata:", v31);

    objc_msgSend(v1, "paymentAmount");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCurrencyAmountValue(v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setPaymentAmount:](v2, "setPaymentAmount:", v33);

    objc_msgSend(v1, "locationName");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setLocationName:](v2, "setLocationName:", v34);

    objc_msgSend(v1, "fileExtension");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setFileExtension:](v2, "setFileExtension:", v35);

    objc_msgSend(v1, "serviceName");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setServiceName:](v2, "setServiceName:", v36);

    objc_msgSend(v1, "audioMessageFile");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToFile(v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setAudioMessageFile:](v2, "setAudioMessageFile:", v38);

    objc_msgSend(v1, "attachmentFiles");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToFiles(v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setAttachmentFiles:](v2, "setAttachmentFiles:", v40);

    objc_msgSend(v1, "reaction");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMessageReaction(v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setReaction:](v2, "setReaction:", v42);

    objc_msgSend(v1, "location");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocation(v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setLocation:](v2, "setLocation:", v44);

    objc_msgSend(v1, "linkMetadata");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToMessageLinkMetadata(v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBMessage setLinkMetadata:](v2, "setLinkMetadata:", v46);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INIntentSlotValueTransformFromMessages(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromMessage(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToMessages(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToMessage(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

void INMessageAttributeOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_9;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
    v3 = v4;
    if ((a1 & 2) == 0)
    {
LABEL_5:
      if ((a1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
  v3 = v4;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0)
      goto LABEL_7;
LABEL_13:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 4);
    v3 = v4;
    if ((a1 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_12:
  (*((void (**)(id, uint64_t))v3 + 2))(v4, 3);
  v3 = v4;
  if ((a1 & 8) != 0)
    goto LABEL_13;
LABEL_7:
  if ((a1 & 0x10) != 0)
  {
LABEL_8:
    (*((void (**)(id, uint64_t))v3 + 2))(v4, 5);
    v3 = v4;
  }
LABEL_9:

}

unint64_t INMessageAttributeOptionsContainsBackingType(unint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        result &= 1u;
        break;
      case 2:
        result = (result >> 1) & 1;
        break;
      case 3:
        result = (result >> 2) & 1;
        break;
      case 4:
        result = (result >> 3) & 1;
        break;
      case 5:
        result = (result >> 4) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *INMessageAttributeOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 |= 1uLL;
        break;
      case 2:
        v2 |= 2uLL;
        break;
      case 3:
        v2 |= 4uLL;
        break;
      case 4:
        v2 |= 8uLL;
        break;
      case 5:
        v2 |= 0x10uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

uint64_t *INMessageAttributeOptionsRemoveBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    switch(a2)
    {
      case 1:
        v2 &= ~1uLL;
        break;
      case 2:
        v2 &= ~2uLL;
        break;
      case 3:
        v2 &= ~4uLL;
        break;
      case 4:
        v2 &= ~8uLL;
        break;
      case 5:
        v2 &= ~0x10uLL;
        break;
      default:
        break;
    }
    *result = v2;
  }
  return result;
}

id INMessageAttributeOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("read"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("unread"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
LABEL_14:
    objc_msgSend(v3, "addObject:", CFSTR("unflagged"));
    if ((v1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  objc_msgSend(v3, "addObject:", CFSTR("flagged"));
  if ((v1 & 8) != 0)
    goto LABEL_14;
LABEL_6:
  if ((v1 & 0x10) != 0)
LABEL_7:
    objc_msgSend(v3, "addObject:", CFSTR("played"));
LABEL_8:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t INMessageAttributeOptionsWithNames(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  id obj;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v3 |= objc_msgSend(v6, "isEqualToString:", CFSTR("read"));
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("unread")))
          v3 |= 2uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("flagged")))
          v3 |= 4uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("unflagged")))
          v3 |= 8uLL;
        if (objc_msgSend(v6, "isEqualToString:", CFSTR("played")))
          v3 |= 0x10uLL;
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id INMessageAttributeOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a2;
  if (!a1)
  {
    v6 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_10;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((a1 & 1) != 0)
  {
    INLocalizedStringWithLocalizer(CFSTR("read"), CFSTR("read"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  INLocalizedStringWithLocalizer(CFSTR("unread"), CFSTR("unread"), v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
LABEL_14:
    INLocalizedStringWithLocalizer(CFSTR("unflagged"), CFSTR("unflagged"), v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v11);

    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  INLocalizedStringWithLocalizer(CFSTR("flagged"), CFSTR("flagged"), v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v10);

  if ((a1 & 8) != 0)
    goto LABEL_14;
LABEL_6:
  if ((a1 & 0x10) != 0)
  {
LABEL_7:
    INLocalizedStringWithLocalizer(CFSTR("played"), CFSTR("played"), v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
LABEL_8:
  v6 = (void *)objc_msgSend(v4, "copy");

LABEL_10:
  return v6;
}

uint64_t _INPBLanguageTagReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTag:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *INCodableTimeIntervalAttributeMetadataUnitAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Seconds");
  else
    return *(&off_1E228D850 + a1 - 1);
}

uint64_t INCodableTimeIntervalAttributeMetadataUnitAsCalendarUnit(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return 128;
  else
    return qword_18C311BC8[a1 - 1];
}

BOOL _INPBDateTimeRangeListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDateTimeRange);
    if (!PBReaderPlaceMark() || !_INPBDateTimeRangeReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDateRange:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBWellnessUnitTypeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_92;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_95;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_92:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_95:
          objc_msgSend(a1, "setMassUnit:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_100;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_100:
          objc_msgSend(a1, "setLengthUnit:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_105:
          objc_msgSend(a1, "setVolumeUnit:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_110;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_110:
          objc_msgSend(a1, "setTimeUnit:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_115:
          objc_msgSend(a1, "setTemperatureUnit:", v52);
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_120;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
          else
            v59 = v55;
LABEL_120:
          objc_msgSend(a1, "setBloodPressureUnit:", v59);
          continue;
        case 7u:
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
              *(_QWORD *)(a2 + v63) = v64 + 1;
              v62 |= (unint64_t)(v65 & 0x7F) << v60;
              if (v65 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  v66 = 0;
                  goto LABEL_125;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v66 = 0;
          else
            v66 = v62;
LABEL_125:
          objc_msgSend(a1, "setHeartRateUnit:", v66);
          continue;
        case 8u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v14 = v68++ >= 9;
                if (v14)
                {
                  v73 = 0;
                  goto LABEL_130;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v73 = 0;
          else
            v73 = v69;
LABEL_130:
          objc_msgSend(a1, "setRespiratoryRateUnit:", v73);
          continue;
        case 9u:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v78 + 1;
              v76 |= (unint64_t)(v79 & 0x7F) << v74;
              if (v79 < 0)
              {
                v74 += 7;
                v14 = v75++ >= 9;
                if (v14)
                {
                  v80 = 0;
                  goto LABEL_135;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v80 = 0;
          else
            v80 = v76;
LABEL_135:
          objc_msgSend(a1, "setEnergyUnit:", v80);
          continue;
        case 0xAu:
          v81 = 0;
          v82 = 0;
          v83 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v84 = *v3;
        v85 = *(_QWORD *)(a2 + v84);
        if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
          break;
        v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
        *(_QWORD *)(a2 + v84) = v85 + 1;
        v83 |= (unint64_t)(v86 & 0x7F) << v81;
        if ((v86 & 0x80) == 0)
          goto LABEL_137;
        v81 += 7;
        v14 = v82++ >= 9;
        if (v14)
        {
          v87 = 0;
          goto LABEL_140;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_137:
      v87 = *(_BYTE *)(a2 + *v5) ? 0 : v83;
LABEL_140:
      objc_msgSend(a1, "setBloodGlucoseUnit:", v87);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

INBillDetails *INIntentSlotValueTransformFromBillDetailsValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  INBillDetails *v18;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  INBillDetails *v25;
  void *v26;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    v25 = [INBillDetails alloc];
    v4 = objc_msgSend(v2, "hasBillType");
    v5 = objc_msgSend(v2, "billType") - 1;
    if (v5 <= 0x15)
      v6 = v5 + 1;
    else
      v6 = 0;
    if (!v4)
      v6 = 0;
    v23 = v6;
    v7 = objc_msgSend(v2, "hasStatus");
    v8 = objc_msgSend(v2, "status") - 1;
    if (v8 <= 4)
      v9 = v8 + 1;
    else
      v9 = 0;
    if (!v7)
      v9 = 0;
    v21 = v9;
    objc_msgSend(v2, "billPayee");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromBillPayeeValue(v26);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "amountDue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromCurrencyAmountValue(v24);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "minimumDue");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromCurrencyAmountValue(v22);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "lateFee");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromCurrencyAmountValue(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dueDate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "paymentDate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTime(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[INBillDetails initWithBillType:paymentStatus:billPayee:amountDue:minimumDue:lateFee:dueDate:paymentDate:](v25, "initWithBillType:paymentStatus:billPayee:amountDue:minimumDue:lateFee:dueDate:paymentDate:", v23, v21, v20, v10, v11, v13, v15, v17);

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

_INPBBillDetailsValue *INIntentSlotValueTransformToBillDetailsValue(void *a1)
{
  id v1;
  _INPBBillDetailsValue *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBBillDetailsValue);
    objc_msgSend(v1, "billPayee");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToBillPayeeValue(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setBillPayee:](v2, "setBillPayee:", v4);

    objc_msgSend(v1, "amountDue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCurrencyAmountValue(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setAmountDue:](v2, "setAmountDue:", v6);

    objc_msgSend(v1, "minimumDue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCurrencyAmountValue(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setMinimumDue:](v2, "setMinimumDue:", v8);

    objc_msgSend(v1, "lateFee");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCurrencyAmountValue(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setLateFee:](v2, "setLateFee:", v10);

    objc_msgSend(v1, "dueDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setDueDate:](v2, "setDueDate:", v12);

    objc_msgSend(v1, "paymentDate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTime(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setPaymentDate:](v2, "setPaymentDate:", v14);

    v15 = objc_msgSend(v1, "billType") - 1;
    if (v15 < 0x16)
      v16 = (v15 + 1);
    else
      v16 = 0x7FFFFFFFLL;
    -[_INPBBillDetailsValue setBillType:](v2, "setBillType:", v16);
    v17 = objc_msgSend(v1, "paymentStatus");

    if ((unint64_t)(v17 - 1) < 5)
      v18 = v17;
    else
      v18 = 0x7FFFFFFFLL;
    -[_INPBBillDetailsValue setStatus:](v2, "setStatus:", v18);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromBillDetailsValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromBillDetailsValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToBillDetailsValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToBillDetailsValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

_INPBBillDetailsValue *INIntentSlotValueRedactedBillDetailsValueFromBillDetailsValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _INPBBillDetailsValue *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "valueMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_alloc_init(_INPBBillDetailsValue);
    objc_msgSend(v5, "billPayee");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedBillPayeeValueFromBillPayeeValue(v10, a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setBillPayee:](v9, "setBillPayee:", v11);

    objc_msgSend(v5, "amountDue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedCurrencyAmountValueFromCurrencyAmountValue(v12, a2, v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setAmountDue:](v9, "setAmountDue:", v13);

    objc_msgSend(v5, "minimumDue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedCurrencyAmountValueFromCurrencyAmountValue(v14, a2, v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setMinimumDue:](v9, "setMinimumDue:", v15);

    objc_msgSend(v5, "lateFee");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedCurrencyAmountValueFromCurrencyAmountValue(v16, a2, v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setLateFee:](v9, "setLateFee:", v17);

    objc_msgSend(v5, "dueDate");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setDueDate:](v9, "setDueDate:", v18);

    objc_msgSend(v5, "paymentDate");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBBillDetailsValue setPaymentDate:](v9, "setPaymentDate:", v19);

    -[_INPBBillDetailsValue setBillType:](v9, "setBillType:", objc_msgSend(v5, "billType"));
    -[_INPBBillDetailsValue setStatus:](v9, "setStatus:", objc_msgSend(v5, "status"));
  }

  return v9;
}

void INCarSignalOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (a1 && v3)
  {
    v4 = v3;
    if ((a1 & 1) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
      v3 = v4;
    }
    if ((a1 & 2) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
      v3 = v4;
    }
  }

}

uint64_t INCarSignalOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = (a1 >> 1) & 1;
  v3 = a1 & 1;
  if (a2 != 1)
    v3 = 0;
  if (a2 != 2)
    LODWORD(v2) = v3;
  if (a1)
    return v2;
  else
    return 0;
}

uint64_t *INCarSignalOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result | 1;
    if (a2 == 2)
      v2 = *result | 2;
    *result = v2;
  }
  return result;
}

unint64_t *INCarSignalOptionsRemoveBackingType(unint64_t *result, int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (a2 == 2)
      v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    *result = v2;
  }
  return result;
}

id INCarSignalOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("audible"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("visible"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t INCarSignalOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("audible"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("visible")))
          v4 |= 2uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INCarSignalOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((a1 & 1) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("audible"), CFSTR("audible"), v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v5);

    }
    if ((a1 & 2) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("visible"), CFSTR("visible"), v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);

    }
    v7 = (void *)objc_msgSend(v4, "copy");

  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v7;
}

BOOL _INPBSetSeatSettingsInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBPlaceListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBPlace);
    if (!PBReaderPlaceMark() || !_INPBPlaceReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addPlace:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBSetAudioSourceInCarIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBLocalDateReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setYear:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setMonth:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setDayOfMonth:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v45 = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      v45 = *(_BYTE *)(a2 + *v5) ? 0 : v41;
LABEL_68:
      objc_msgSend(a1, "setDayOfWeek:", v45);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id INIntentSlotValueTransformFromDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  int v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  void *v32;
  int v33;
  void *v34;
  int v35;
  void *v36;
  int v37;
  void *v38;
  int v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v3 = 0;
    goto LABEL_70;
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v1, "pairsCount"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  objc_msgSend(v2, "pairs", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (!v5)
    goto LABEL_68;
  v6 = v5;
  v7 = *(_QWORD *)v47;
  do
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v47 != v7)
        objc_enumerationMutation(v4);
      v9 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
      if (objc_msgSend(v9, "pairStringValuesCount"))
      {
        v10 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairStringValues");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v10)
        {
          INIntentSlotValueTransformFromStringValues(v11);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v11, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromStringValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
LABEL_64:
        v43 = (void *)v18;
        objc_msgSend(v9, "key");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKey:", v43, v44);

        goto LABEL_65;
      }
      objc_msgSend(v9, "pairDataValues");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        v15 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairDataValues");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v16;
        if (v15)
        {
          INIntentSlotValueTransformFromDataValues(v16);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v16, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDataValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairUrlValuesCount"))
      {
        v19 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairUrlValues");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v20;
        if (v19)
        {
          INIntentSlotValueTransformFromURLValues(v20);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v20, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromURLValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairDoubleValuesCount"))
      {
        v21 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairDoubleValues");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v22;
        if (v21)
        {
          INIntentSlotValueTransformFromDoubleValues(v22);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v22, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDoubleValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairIntegerValuesCount"))
      {
        v23 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairIntegerValues");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v24;
        if (v23)
        {
          INIntentSlotValueTransformFromIntegerValues(v24);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v24, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromIntegerValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairDistanceValuesCount"))
      {
        v25 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairDistanceValues");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v26;
        if (v25)
        {
          INIntentSlotValueTransformFromDistanceValues(v26);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v26, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDistanceValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairTemperatureValuesCount"))
      {
        v27 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairTemperatureValues");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v28;
        if (v27)
        {
          INIntentSlotValueTransformFromTemperatureValues(v28);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v28, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromTemperatureValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairLocationValuesCount"))
      {
        v29 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairLocationValues");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v30;
        if (v29)
        {
          INIntentSlotValueTransformFromLocationValues(v30);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v30, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromLocationValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairPersonValuesCount"))
      {
        v31 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairPersonValues");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v32;
        if (v31)
        {
          INIntentSlotValueTransformFromContactValues(v32);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v32, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromContactValueWithAlternatives(v17, 0);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairCurrencyAmountValuesCount"))
      {
        v33 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairCurrencyAmountValues");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v34;
        if (v33)
        {
          INIntentSlotValueTransformFromCurrencyAmountValues(v34);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v34, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromCurrencyAmountValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairImageValuesCount"))
      {
        v35 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairImageValues");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v36;
        if (v35)
        {
          INIntentSlotValueTransformFromImageValues(v36);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v36, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromImageValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairPaymentMethodValuesCount"))
      {
        v37 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairPaymentMethodValues");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v38;
        if (v37)
        {
          INIntentSlotValueTransformFromPaymentMethodValues(v38);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v38, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromPaymentMethodValue(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (objc_msgSend(v9, "pairDataStringsCount"))
      {
        v39 = objc_msgSend(v9, "repeated");
        objc_msgSend(v9, "pairDataStrings");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v40;
        if (v39)
        {
          INIntentSlotValueTransformFromDataStrings(v40);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_61;
        }
        objc_msgSend(v40, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDataString(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      if (!objc_msgSend(v9, "pairCustomObjectsCount"))
        continue;
      v41 = objc_msgSend(v9, "repeated");
      objc_msgSend(v9, "pairCustomObjects");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v42;
      if (!v41)
      {
        objc_msgSend(v42, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromCustomObject(v17);
        v18 = objc_claimAutoreleasedReturnValue();
        goto LABEL_64;
      }
      INIntentSlotValueTransformFromCustomObjects(v42);
      v13 = objc_claimAutoreleasedReturnValue();
LABEL_61:
      v17 = (void *)v13;
      objc_msgSend(v9, "key");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setObject:forKey:", v17, v43);
LABEL_65:

    }
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  }
  while (v6);
LABEL_68:

LABEL_70:
  return v3;
}

_INPBDictionary *INIntentSlotValueTransformToDictionary(void *a1)
{
  id v1;
  _INPBDictionary *v2;
  _INPBDictionary *v3;
  _QWORD v5[4];
  _INPBDictionary *v6;

  if (!a1)
    return (_INPBDictionary *)0;
  v1 = a1;
  v2 = objc_alloc_init(_INPBDictionary);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __INIntentSlotValueTransformToDictionary_block_invoke;
  v5[3] = &unk_1E2291AC0;
  v3 = v2;
  v6 = v3;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v5);

  return v3;
}

BOOL _INPBSetRadioStationIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBIntentSlotVocabularyPolicyReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentSlotVocabularyConcept *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (_INPBIntentSlotVocabularyConcept *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addIntentSlotNames:", v17);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentSlotVocabularyConcept);
    if (!PBReaderPlaceMark() || !_INPBIntentSlotVocabularyConceptReadFrom(v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addIntentSlotVocabularyConcepts:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBTimerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _INPBDataString *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = objc_alloc_init(_INPBDataString);
          if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v19, a2))
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setLabel:", v19, 0, 0);
            goto LABEL_31;
          }

          return 0;
        case 2u:
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v23 = 0.0;
          }
          objc_msgSend(a1, "setDuration:", v23);
          continue;
        case 3u:
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v26 = *(double *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v26 = 0.0;
          }
          objc_msgSend(a1, "setRemainingTime:", v26);
          continue;
        case 4u:
          PBReaderReadString();
          v19 = (_INPBDataString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setIdentifier:", v19);
LABEL_31:

          continue;
        case 5u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (2)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
              *(_QWORD *)(a2 + v30) = v32;
              v29 |= (unint64_t)(v33 & 0x7F) << v27;
              if (v33 < 0)
              {
                v27 += 7;
                v15 = v28++ >= 9;
                if (v15)
                {
                  v34 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v34 = 0;
          else
            v34 = v29;
LABEL_50:
          objc_msgSend(a1, "setState:", v34);
          continue;
        case 6u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
        *(_QWORD *)(a2 + v38) = v40;
        v37 |= (unint64_t)(v41 & 0x7F) << v35;
        if ((v41 & 0x80) == 0)
          goto LABEL_52;
        v35 += 7;
        v15 = v36++ >= 9;
        if (v15)
        {
          v42 = 0;
          goto LABEL_55;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      v42 = *(_BYTE *)(a2 + *v5) ? 0 : v37;
LABEL_55:
      objc_msgSend(a1, "setType:", v42);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBSearchForFilesIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  _INPBString *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_40;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_42:
        objc_msgSend(a1, "setSuccess:", v19 != 0);
        goto LABEL_43;
      case 2u:
        v24 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v24, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addEntities:", v24, 0, 0);
        goto LABEL_38;
      case 3u:
        v24 = objc_alloc_init(_INPBInteger);
        if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v24, a2) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNumResults:", v24, 0, 0);
        goto LABEL_38;
      case 4u:
        v24 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v24, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setQuery:", v24, 0, 0);
LABEL_38:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

id getHKUnitClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getHKUnitClass_softClass;
  v7 = getHKUnitClass_softClass;
  if (!getHKUnitClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getHKUnitClass_block_invoke;
    v3[3] = &unk_1E22953C0;
    v3[4] = &v4;
    __getHKUnitClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18C059BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKUnitClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!HealthKitLibraryCore_frameworkLibrary)
  {
    HealthKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!HealthKitLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("HKUnit");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getHKUnitClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *INDeleteHealthSampleIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E228DBB0[a1];
}

uint64_t _INPBSendMessageIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_76;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_62;
      case 2u:
        v17 = objc_alloc_init(_INPBContact);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
          goto LABEL_76;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addRecipient:", v17, 0, 0);
        goto LABEL_62;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_76;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContent:", v17, 0, 0);
        goto LABEL_62;
      case 6u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_76;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGroupName:", v17, 0, 0);
        goto LABEL_62;
      case 7u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_76;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeakableGroupName:", v17, 0, 0);
        goto LABEL_62;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConversationIdentifier:", v17);
        goto LABEL_62;
      case 9u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setServiceName:", v17);
        goto LABEL_62;
      case 0xAu:
        v17 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v17, a2) & 1) == 0)
          goto LABEL_76;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSender:", v17, 0, 0);
        goto LABEL_62;
      case 0xCu:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_69:
        objc_msgSend(a1, "setEffect:", v25, v33, v34);
        goto LABEL_63;
      case 0xDu:
        v17 = objc_alloc_init(_INPBSendMessageAttachment);
        v33 = 0;
        v34 = 0;
        if (PBReaderPlaceMark() && _INPBSendMessageAttachmentReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addAttachments:", v17, 0, 0);
LABEL_62:

LABEL_63:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_76:

        return 0;
      case 0xEu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_74:
        objc_msgSend(a1, "setOutgoingMessageType:", v32, v33, v34);
        goto LABEL_63;
      case 0xFu:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setNotificationThreadIdentifier:", v17);
        goto LABEL_62;
      case 0x10u:
        PBReaderReadString();
        v17 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAlternativeConversationIdentifier:", v17);
        goto LABEL_62;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
    }
  }
}

void sub_18C05E1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18C05E29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCKKnowledgeStoreClass_block_invoke(uint64_t a1)
{
  CoreKnowledgeLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKKnowledgeStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCKKnowledgeStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    CoreKnowledgeLibrary();
  }
}

void CoreKnowledgeLibrary()
{
  void *v0;

  if (!CoreKnowledgeLibraryCore_frameworkLibrary)
  {
    CoreKnowledgeLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!CoreKnowledgeLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getCKGenericConditionClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  CoreKnowledgeLibrary();
  result = objc_getClass("CKGenericCondition");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCKGenericConditionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__56__INUserContextStore_userContextOfClass_withCompletion___block_invoke(v3);
  }
  return result;
}

BOOL _INPBContactListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBCondition *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBCondition);
        if (!PBReaderPlaceMark() || (_INPBConditionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCondition:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBContact);
    if (!PBReaderPlaceMark() || !_INPBContactReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addContact:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPayBillIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_49;
      case 2u:
        v17 = objc_alloc_init(_INPBBillPayeeValue);
        if (!PBReaderPlaceMark() || !_INPBBillPayeeValueReadFrom(v17, a2))
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBillPayee:", v17, 0, 0);
        goto LABEL_49;
      case 4u:
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || (_INPBFinancialAccountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFromAccount:", v17, 0, 0);
        goto LABEL_49;
      case 5u:
        v17 = objc_alloc_init(_INPBPaymentAmountValue);
        if (!PBReaderPlaceMark() || (_INPBPaymentAmountValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionAmount:", v17, 0, 0);
        goto LABEL_49;
      case 6u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionScheduledDate:", v17, 0, 0);
        goto LABEL_49;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTransactionNote:", v17, 0, 0);
        goto LABEL_49;
      case 8u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_56:
        objc_msgSend(a1, "setBillType:", v25);
        goto LABEL_50;
      case 9u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDueDate:", v17, 0, 0);
LABEL_49:

LABEL_50:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_58:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

Class __getCSSearchableIndexClass_block_invoke_54947(uint64_t a1)
{
  Class result;
  void *v3;

  if (!CoreSpotlightLibraryCore_frameworkLibrary_54948)
  {
    CoreSpotlightLibraryCore_frameworkLibrary_54948 = _sl_dlopen();
    if (!CoreSpotlightLibraryCore_frameworkLibrary_54948)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CSSearchableIndex");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCSSearchableIndexClass_softClass_54946 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

INRentalCarReservation *INIntentSlotValueTransformFromRentalCarReservation(INRentalCarReservation *a1)
{
  INRentalCarReservation *v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  INRentalCarReservation *v20;
  INRentalCarReservation *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (a1)
  {
    v1 = a1;
    -[INRentalCarReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = [INRentalCarReservation alloc];
    objc_msgSend(v2, "itemReference");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v24);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "hasReservationStatus");
    v4 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v4 <= 3)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (!v3)
      v5 = 0;
    v18 = v5;
    objc_msgSend(v2, "reservationHolderName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v23);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v22);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRentalCarReservation rentalCar](v1, "rentalCar");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromRentalCar(v19);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRentalCarReservation rentalDuration](v1, "rentalDuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRentalCarReservation pickupLocation](v1, "pickupLocation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromLocationValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[INRentalCarReservation dropOffLocation](v1, "dropOffLocation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromLocationValue(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[INRentalCarReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:rentalCar:rentalDuration:pickupLocation:dropOffLocation:](v20, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:rentalCar:rentalDuration:pickupLocation:dropOffLocation:", v27, v26, v17, v18, v16, v15, v14, v13, v7, v9, v11);

    a1 = v21;
  }
  return a1;
}

_INPBRentalCarReservation *INIntentSlotValueTransformToRentalCarReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBRentalCarReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBRentalCarReservation);
    -[_INPBRentalCarReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "rentalCar");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToRentalCar(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCarReservation setRentalCar:](v15, "setRentalCar:", v17);

    objc_msgSend(v1, "rentalDuration");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCarReservation setRentalDuration:](v15, "setRentalDuration:", v19);

    objc_msgSend(v1, "pickupLocation");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToLocationValue(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCarReservation setPickupLocation:](v15, "setPickupLocation:", v21);

    objc_msgSend(v1, "dropOffLocation");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToLocationValue(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBRentalCarReservation setDropOffLocation:](v15, "setDropOffLocation:", v23);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromRentalCarReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromRentalCarReservation(*(INRentalCarReservation **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToRentalCarReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToRentalCarReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedRentalCarReservationFromRentalCarReservation(void *a1)
{
  return a1;
}

uint64_t _INPBRecurrenceValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)(a2 + v21);
                if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                  break;
                v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0)
                  goto LABEL_56;
                v18 += 7;
                v14 = v19++ >= 9;
                if (v14)
                {
                  v24 = 0;
                  goto LABEL_59;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
              if (*(_BYTE *)(a2 + *v5))
                v24 = 0;
              else
                v24 = v20;
LABEL_59:
              objc_msgSend(a1, "setOrdinal:", v24, v52, v53);
              goto LABEL_80;
            case 2u:
              v25 = 0;
              v26 = 0;
              v27 = 0;
              while (2)
              {
                v28 = *v3;
                v29 = *(_QWORD *)(a2 + v28);
                if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
                  *(_QWORD *)(a2 + v28) = v29 + 1;
                  v27 |= (unint64_t)(v30 & 0x7F) << v25;
                  if (v30 < 0)
                  {
                    v25 += 7;
                    v14 = v26++ >= 9;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_64;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v31 = 0;
              else
                v31 = v27;
LABEL_64:
              objc_msgSend(a1, "setInterval:", v31, v52, v53);
              goto LABEL_80;
            case 3u:
              v32 = 0;
              v33 = 0;
              v34 = 0;
              while (2)
              {
                v35 = *v3;
                v36 = *(_QWORD *)(a2 + v35);
                if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
                  *(_QWORD *)(a2 + v35) = v36 + 1;
                  v34 |= (unint64_t)(v37 & 0x7F) << v32;
                  if (v37 < 0)
                  {
                    v32 += 7;
                    v14 = v33++ >= 9;
                    if (v14)
                    {
                      v38 = 0;
                      goto LABEL_69;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v38 = 0;
              else
                v38 = v34;
LABEL_69:
              objc_msgSend(a1, "setFrequency:", v38, v52, v53);
              goto LABEL_80;
            case 4u:
              if (v16 == 2)
              {
                v52 = 0;
                v53 = 0;
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v39 = 0;
                  v40 = 0;
                  v41 = 0;
                  while (1)
                  {
                    v42 = *v3;
                    v43 = *(_QWORD *)(a2 + v42);
                    if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
                    *(_QWORD *)(a2 + v42) = v43 + 1;
                    v41 |= (unint64_t)(v44 & 0x7F) << v39;
                    if (v44 < 0)
                    {
                      v39 += 7;
                      v14 = v40++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_54;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
                  PBRepeatedInt32Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v45 = 0;
                v46 = 0;
                v47 = 0;
                while (1)
                {
                  v48 = *v3;
                  v49 = *(_QWORD *)(a2 + v48);
                  if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
                  *(_QWORD *)(a2 + v48) = v49 + 1;
                  v47 |= (unint64_t)(v50 & 0x7F) << v45;
                  if (v50 < 0)
                  {
                    v45 += 7;
                    v14 = v46++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_79;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_79:
                PBRepeatedInt32Add();
              }
LABEL_80:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_80;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INPreferredCallProviderHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INPreferredCallProviderGetBackingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 0x7FFFFFFFLL;
  else
    return (a1 + 1);
}

uint64_t INPreferredCallProviderGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 2);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INPreferredCallProviderGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E228E138[a1 - 1];
}

uint64_t INPreferredCallProviderWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("telephonyProvider")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("facetimeProvider")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("thirdPartyProvider")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INPreferredCallProviderGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("third party provider");
      break;
    case 2:
      v4 = CFSTR("facetime provider");
      break;
    case 1:
      v4 = CFSTR("telephony provider");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

void sub_18C067A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDNDAvailabilityServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!DoNotDisturbLibraryCore_frameworkLibrary)
  {
    DoNotDisturbLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!DoNotDisturbLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("DNDAvailabilityService");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getDNDAvailabilityServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL INRelativeReferenceHasBackingType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t INRelativeReferenceGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    return 2;
  else
    return v1;
}

uint64_t INRelativeReferenceGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = 2 * (a2 == 2);
  if (a2 == 1)
    v2 = 1;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INRelativeReferenceGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("previous");
  if (a1 == 1)
    return CFSTR("next");
  else
    return v1;
}

uint64_t INRelativeReferenceWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("next")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("previous")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INRelativeReferenceGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("previous");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("next");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

void sub_18C068D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCNLabeledValueClass_55949(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  id v9;
  void *v11;
  uint64_t v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2050000000;
  v8 = (void *)getCNLabeledValueClass_softClass_55975;
  v16 = getCNLabeledValueClass_softClass_55975;
  if (!getCNLabeledValueClass_softClass_55975)
  {
    __getCNLabeledValueClass_block_invoke_55976((uint64_t)&v12, a2, a3, a4, a5, a6, a7, a8, v11, MEMORY[0x1E0C809B0], (void *)0xC0000000, __getCNLabeledValueClass_block_invoke_55976, &unk_1E22953C0, &v13, v13, v14, (void *)v15);
    v8 = v14[3];
  }
  v9 = v8;
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_18C068F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNPhoneNumberClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ContactsLibrary_55961();
  result = objc_getClass("CNPhoneNumber");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCNPostalAddressClass_block_invoke(v3);
  }
  return result;
}

Class __getCNPostalAddressClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ContactsLibrary_55961();
  result = objc_getClass("CNPostalAddress");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNPostalAddressClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCNContactRelationClass_block_invoke(v3);
  }
  return result;
}

Class __getCNContactRelationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  ContactsLibrary_55961();
  result = objc_getClass("CNContactRelation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNContactRelationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getCNInstantMessageAddressClass_block_invoke(v3);
  }
  return result;
}

void __getCNInstantMessageAddressClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_55961();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CNInstantMessageAddress");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNInstantMessageAddressClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    ContactsLibrary_55961();
  }
}

void ContactsLibrary_55961()
{
  void *v0;

  if (!ContactsLibraryCore_frameworkLibrary_55964)
  {
    ContactsLibraryCore_frameworkLibrary_55964 = _sl_dlopen();
    if (!ContactsLibraryCore_frameworkLibrary_55964)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getCNLabeledValueClass_block_invoke_55976(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  Class result;
  void *v19;
  SEL v20;
  id v21;
  id v22;
  BOOL v23;
  id v24;
  id v25;
  id v26;

  ContactsLibrary_55961();
  result = objc_getClass("CNLabeledValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_55975 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v19 = (void *)abort_report_np();
    return (Class)+[INContactCard initWithContactIdentifier:nameComponents:isMe:image:organizationName:departmentName:jobTitle:phoneNumbers:emailAddresses:postalAddresses:urlAddresses:contactRelations:instantMessageAddresses:birthday:dates:](v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

__CFString *INUpdateEventIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228E1C8[a1];
}

BOOL _INPBEndWorkoutIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL _INPBSaveProfileInCarIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBString *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProfileName:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_INPBInteger);
    if (!PBReaderPlaceMark() || (_INPBIntegerReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setProfileNumber:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPaymentAmountValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBCurrencyAmountValue *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValue:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setAmountType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBRideStatusReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBRideVehicle *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBRideVehicle *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRideIdentifier:", v17);
        goto LABEL_70;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_77:
        objc_msgSend(a1, "setPhase:", v25, v26, v27);
        goto LABEL_71;
      case 3u:
        v17 = objc_alloc_init(_INPBRideVehicle);
        if (!PBReaderPlaceMark() || !_INPBRideVehicleReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVehicle:", v17, 0, 0);
        goto LABEL_70;
      case 4u:
        v17 = objc_alloc_init(_INPBRideDriver);
        if (!PBReaderPlaceMark() || !_INPBRideDriverReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDriver:", v17, 0, 0);
        goto LABEL_70;
      case 5u:
        v17 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v17, a2) & 1) == 0)
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEstimatedPickupDate:", v17, 0, 0);
        goto LABEL_70;
      case 6u:
        v17 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v17, a2) & 1) == 0)
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEstimatedDropOffDate:", v17, 0, 0);
        goto LABEL_70;
      case 7u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPickupLocation:", v17, 0, 0);
        goto LABEL_70;
      case 8u:
        v17 = objc_alloc_init(_INPBLocationValue);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addWaypoints:", v17, 0, 0);
        goto LABEL_70;
      case 9u:
        v17 = objc_alloc_init(_INPBLocationValue);
        if (!PBReaderPlaceMark() || !_INPBLocationValueReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDropOffLocation:", v17, 0, 0);
        goto LABEL_70;
      case 0xAu:
        v17 = objc_alloc_init(_INPBRideOption);
        if (!PBReaderPlaceMark() || (_INPBRideOptionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRideOption:", v17, 0, 0);
        goto LABEL_70;
      case 0xBu:
        v17 = objc_alloc_init(_INPBUserActivity);
        if (!PBReaderPlaceMark() || !_INPBUserActivityReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserActivityForCancelingInApplication:", v17, 0, 0);
        goto LABEL_70;
      case 0xCu:
        v17 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v17, a2) & 1) == 0)
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEstimatedPickupEndDate:", v17, 0, 0);
        goto LABEL_70;
      case 0xDu:
        v17 = objc_alloc_init(_INPBRideCompletionStatus);
        if (!PBReaderPlaceMark() || (_INPBRideCompletionStatusReadFrom(v17, a2) & 1) == 0)
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCompletionStatus:", v17, 0, 0);
        goto LABEL_70;
      case 0xEu:
        v17 = objc_alloc_init(_INPBUserActivity);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBUserActivityReadFrom(v17, a2))
          goto LABEL_79;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAdditionalActionItems:", v17, 0, 0);
        goto LABEL_70;
      case 0xFu:
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (PBReaderPlaceMark() && (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setScheduledPickupTime:", v17, 0, 0);
LABEL_70:

LABEL_71:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_79:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_71;
    }
  }
}

id INLocalizedStringFromBundle(void *a1, void *a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  id v21;
  _QWORD *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  if (a5)
  {
    v23 = a6;
    v24 = v12;
    objc_msgSend(a4, "preferredLocalizationsForBundle:", a5);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v26;
      while (2)
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v26 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
          v20 = (void *)CFBundleCopyLocalizedStringForLocalization();
          if ((objc_msgSend(v20, "isEqualToString:", CFSTR("<invalid_language>")) & 1) == 0)
          {
            if (v23)
              *v23 = objc_retainAutorelease(v19);
            objc_msgSend(v20, "variantFittingPresentationWidth:", 20);
            v21 = (id)objc_claimAutoreleasedReturnValue();

            v12 = v24;
            goto LABEL_14;
          }

        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        if (v16)
          continue;
        break;
      }
    }

    v12 = v24;
    v21 = v24;
LABEL_14:

  }
  else
  {
    v21 = v12;
  }

  return v21;
}

id INLocalizedStringFromCodable(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  const void *v14;
  void (**v15)(_QWORD);
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v21[5];

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  objc_msgSend(v11, "bundleIdentifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (const void *)objc_msgSend(v12, "bundleWithIdentifier:fileURL:", v13, 0);

  if (v14)
  {
    CFRetain(v14);
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __INLocalizedStringFromCodable_block_invoke;
    v21[3] = &__block_descriptor_40_e5_v8__0l;
    v21[4] = v14;
    v15 = (void (**)(_QWORD))MEMORY[0x18D7812C4](v21);
    objc_msgSend(v11, "tableName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INLocalizedStringFromBundle(v9, v9, v16, v12, (uint64_t)v14, a5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v17, "isEqualToString:", v9))
      v18 = v10;
    else
      v18 = v17;
    v19 = v18;

    v15[2](v15);
  }
  else
  {
    v19 = v10;
  }

  return v19;
}

void sub_18C06FBE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id INLocalizedFormatStringFromSlotComposing(void *a1, void *a2, void *a3, __CFBundle *a4, void *a5, void *a6, void *a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  id (*v30)(uint64_t, void *, uint64_t *);
  void *v31;
  id v32;
  id v33;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = (void *)objc_msgSend(v16, "mutableCopy");
  if (!a4)
  {
    *a8 = CFSTR("en");
LABEL_7:
    if (!v16)
      goto LABEL_13;
    goto LABEL_11;
  }
  CFBundleGetDevelopmentRegion(a4);
  *a8 = (id)objc_claimAutoreleasedReturnValue();
  if (!v15)
    goto LABEL_7;
  INLocalizedStringFromBundle(v15, v15, v17, v18, (uint64_t)a4, a8);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v22, "length") && (objc_msgSend(v15, "isEqualToString:", v22) & 1) == 0)
  {
    v24 = objc_msgSend(v22, "mutableCopy");
  }
  else
  {
    INLocalizedStringFromBundle(v16, v16, v17, v18, (uint64_t)a4, a8);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "mutableCopy");

    v21 = v23;
  }

  v21 = (void *)v24;
  if (v16)
  {
LABEL_11:
    if (v21)
    {
      v28 = MEMORY[0x1E0C809B0];
      v29 = 3221225472;
      v30 = __INLocalizedFormatStringFromSlotComposing_block_invoke;
      v31 = &unk_1E228E2C8;
      v32 = v20;
      v33 = v19;
      INFillOutStringWithStringsDict(v16, v21, &v28);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "mutableCopy", v28, v29, v30, v31);

      v21 = (void *)v26;
    }
  }
LABEL_13:

  return v21;
}

id INFillOutStringWithStringsDict(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  id obj;
  void *v152;
  void *v153;
  uint64_t v154;
  void (**v155)(id, void *, _QWORD *);
  id v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  id v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _BYTE v174[128];
  _BYTE v175[128];
  _BYTE v176[128];
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v156 = a2;
  v155 = a3;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedFormatRegularExpression");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "matchesInString:options:range:", v5, 0, 0, objc_msgSend(v5, "length"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v159 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v170 = 0u;
    v171 = 0u;
    v172 = 0u;
    v173 = 0u;
    v8 = v7;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v170, v176, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v171;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v171 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v170 + 1) + 8 * i), "resultByAdjustingRangesWithOffset:", 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "rangeAtIndex:", 1);
          objc_msgSend(v5, "substringWithRange:", v14, v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v169 = v16;
          _INStringExtractKeyPathAndFunctions(&v169, 0);
          v17 = v169;

          objc_msgSend(v159, "if_addObjectIfNonNil:", v17);
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v170, v176, 16);
      }
      while (v10);
    }
    v150 = v5;

    objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedStringsDictFormatRegularExpression");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "matchesInString:options:range:", v156, 0, 0, objc_msgSend(v156, "length"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v19, "count"));
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v19, "count"));
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    obj = v19;
    v157 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v165, v175, 16);
    if (v157)
    {
      v154 = *(_QWORD *)v166;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v166 != v154)
            objc_enumerationMutation(obj);
          v158 = v20;
          v21 = objc_msgSend(*(id *)(*((_QWORD *)&v165 + 1) + 8 * v20), "rangeAtIndex:", 1);
          objc_msgSend(v156, "substringWithRange:", v21, v22);
          v23 = (id)objc_claimAutoreleasedReturnValue();
          v161 = 0u;
          v162 = 0u;
          v163 = 0u;
          v164 = 0u;
          v24 = v159;
          v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v161, v174, 16);
          v26 = v23;
          if (v25)
          {
            v27 = v25;
            v28 = *(_QWORD *)v162;
            v26 = v23;
            do
            {
              for (j = 0; j != v27; ++j)
              {
                if (*(_QWORD *)v162 != v28)
                  objc_enumerationMutation(v24);
                v30 = *(void **)(*((_QWORD *)&v161 + 1) + 8 * j);
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".%@"), v23);
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                v32 = objc_msgSend(v30, "hasSuffix:", v31);

                if (v32)
                {
                  v33 = v30;

                  v26 = v33;
                }
              }
              v27 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v161, v174, 16);
            }
            while (v27);
          }

          v160 = 0;
          v155[2](v155, v26, &v160);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          if (v34)
          {
            objc_msgSend(v152, "addObject:", v34);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v160);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v153, "addObject:", v35);

          }
          v20 = v158 + 1;
        }
        while (v158 + 1 != v157);
        v157 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v165, v175, 16);
      }
      while (v157);
    }

    if (objc_msgSend(v152, "count") == 1)
    {
      objc_msgSend(v153, "objectAtIndexedSubscript:", 0);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v36, "integerValue");

      v5 = v150;
      switch(v37)
      {
        case 2:
          v57 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "doubleValue");
          objc_msgSend(v57, "localizedStringWithFormat:", v156, v58);
LABEL_55:
          v41 = (id)objc_claimAutoreleasedReturnValue();
LABEL_77:

LABEL_122:
          goto LABEL_123;
        case 1:
          v38 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = objc_msgSend(v39, "longValue");
          goto LABEL_54;
        case 0:
          v38 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = objc_msgSend(v39, "intValue");
LABEL_54:
          objc_msgSend(v38, "localizedStringWithFormat:", v156, v40);
          goto LABEL_55;
      }
LABEL_121:
      v41 = v156;
      goto LABEL_122;
    }
    v5 = v150;
    if (objc_msgSend(v152, "count") == 2)
    {
      objc_msgSend(v153, "objectAtIndexedSubscript:", 0);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "integerValue");

      if (v43 == 2)
        goto LABEL_61;
      if (v43 != 1)
      {
        if (v43)
          goto LABEL_121;
        objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v44, "integerValue");

        switch(v45)
        {
          case 2:
            v75 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v76 = objc_msgSend(v39, "intValue");
            goto LABEL_75;
          case 1:
            v46 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend(v39, "intValue");
            goto LABEL_72;
          case 0:
            v46 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend(v39, "intValue");
LABEL_60:
            objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            v62 = objc_msgSend(v61, "intValue");
LABEL_73:
            objc_msgSend(v46, "localizedStringWithFormat:", v156, v47, v62);
LABEL_76:
            v41 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_77;
        }
      }
      objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = objc_msgSend(v59, "integerValue");

      if (v60 != 2)
      {
        if (v60 != 1)
        {
          if (!v60)
          {
            v46 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend(v39, "longValue");
            goto LABEL_60;
          }
LABEL_61:
          objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = objc_msgSend(v63, "integerValue");

          if (v64 == 2)
          {
            v70 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "doubleValue");
            v72 = v71;
            objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "doubleValue");
            objc_msgSend(v70, "localizedStringWithFormat:", v156, v72, v73);
          }
          else
          {
            if (v64 == 1)
            {
              v65 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "doubleValue");
              v67 = v74;
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              v69 = objc_msgSend(v68, "longValue");
            }
            else
            {
              if (v64)
                goto LABEL_121;
              v65 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "doubleValue");
              v67 = v66;
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              v69 = objc_msgSend(v68, "intValue");
            }
            objc_msgSend(v65, "localizedStringWithFormat:", v156, v67, v69);
          }
          v41 = (id)objc_claimAutoreleasedReturnValue();

          goto LABEL_77;
        }
        v46 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = objc_msgSend(v39, "longValue");
LABEL_72:
        objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = objc_msgSend(v61, "longValue");
        goto LABEL_73;
      }
      v75 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = objc_msgSend(v39, "longValue");
LABEL_75:
      objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v61, "doubleValue");
      objc_msgSend(v75, "localizedStringWithFormat:", v156, v76, v77);
      goto LABEL_76;
    }
    if (objc_msgSend(v152, "count") != 3)
      goto LABEL_121;
    objc_msgSend(v153, "objectAtIndexedSubscript:", 0);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend(v48, "integerValue");

    if (v49 == 2)
      goto LABEL_105;
    if (v49 != 1)
    {
      if (v49)
        goto LABEL_121;
      objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v50, "integerValue");

      switch(v51)
      {
        case 2:
LABEL_82:
          objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          v81 = objc_msgSend(v80, "integerValue");

          switch(v81)
          {
            case 2:
              v137 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v138 = objc_msgSend(v55, "intValue");
              goto LABEL_147;
            case 1:
              v82 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v83 = objc_msgSend(v55, "intValue");
              goto LABEL_144;
            case 0:
              v82 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v83 = objc_msgSend(v55, "intValue");
LABEL_104:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v88, "doubleValue");
              v97 = v96;
              objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
              v98 = (void *)objc_claimAutoreleasedReturnValue();
              v99 = objc_msgSend(v98, "intValue");
LABEL_145:
              objc_msgSend(v82, "localizedStringWithFormat:", v156, v83, v97, v99);
LABEL_148:
              v41 = (id)objc_claimAutoreleasedReturnValue();

LABEL_161:
              goto LABEL_162;
          }
          break;
        case 1:
LABEL_78:
          objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = objc_msgSend(v78, "integerValue");

          switch(v79)
          {
            case 2:
              v139 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v140 = objc_msgSend(v55, "intValue");
LABEL_150:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v148 = objc_msgSend(v88, "longValue");
LABEL_159:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
              v92 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v92, "doubleValue");
              objc_msgSend(v139, "localizedStringWithFormat:", v156, v140, v148, v149);
              goto LABEL_160;
            case 1:
              v54 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = objc_msgSend(v55, "intValue");
LABEL_152:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v89 = objc_msgSend(v88, "longValue");
LABEL_155:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
              v92 = (void *)objc_claimAutoreleasedReturnValue();
              v93 = objc_msgSend(v92, "longValue");
              goto LABEL_156;
            case 0:
              v54 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = objc_msgSend(v55, "intValue");
LABEL_98:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v89 = objc_msgSend(v88, "longValue");
              goto LABEL_99;
          }
          goto LABEL_82;
        case 0:
          objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v53 = objc_msgSend(v52, "integerValue");

          switch(v53)
          {
            case 2:
              v139 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v140 = objc_msgSend(v55, "intValue");
              goto LABEL_158;
            case 1:
              v54 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = objc_msgSend(v55, "intValue");
              goto LABEL_154;
            case 0:
              v54 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = objc_msgSend(v55, "intValue");
LABEL_93:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v89 = objc_msgSend(v88, "intValue");
LABEL_99:
              objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
              v92 = (void *)objc_claimAutoreleasedReturnValue();
              v93 = objc_msgSend(v92, "intValue");
LABEL_156:
              objc_msgSend(v54, "localizedStringWithFormat:", v156, v56, v89, v93);
LABEL_160:
              v41 = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_161;
          }
          goto LABEL_78;
      }
    }
    objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend(v84, "integerValue");

    if (v85 == 2)
    {
LABEL_100:
      objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = objc_msgSend(v94, "integerValue");

      if (v95 != 2)
      {
        if (v95 != 1)
        {
          if (!v95)
          {
            v82 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            v83 = objc_msgSend(v55, "longValue");
            goto LABEL_104;
          }
LABEL_105:
          objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          v101 = objc_msgSend(v100, "integerValue");

          if (v101 == 2)
            goto LABEL_117;
          if (v101 != 1)
          {
            if (v101)
              goto LABEL_121;
            objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            v103 = objc_msgSend(v102, "integerValue");

            switch(v103)
            {
              case 2:
                v132 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v55, "doubleValue");
                v134 = v141;
                objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                v135 = objc_msgSend(v107, "intValue");
                goto LABEL_135;
              case 1:
                v104 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v55, "doubleValue");
                v106 = v143;
                objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                v108 = objc_msgSend(v107, "intValue");
                goto LABEL_137;
              case 0:
                v104 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v55, "doubleValue");
                v106 = v105;
                objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                v108 = objc_msgSend(v107, "intValue");
LABEL_116:
                objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
                v112 = (void *)objc_claimAutoreleasedReturnValue();
                v113 = objc_msgSend(v112, "intValue");
LABEL_138:
                objc_msgSend(v104, "localizedStringWithFormat:", v156, v106, v108, v113);
                goto LABEL_139;
            }
          }
          objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          v110 = objc_msgSend(v109, "integerValue");

          if (v110 != 2)
          {
            if (v110 != 1)
            {
              if (!v110)
              {
                v104 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v55, "doubleValue");
                v106 = v111;
                objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                v108 = objc_msgSend(v107, "longValue");
                goto LABEL_116;
              }
LABEL_117:
              objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              v115 = objc_msgSend(v114, "integerValue");

              if (v115 == 2)
              {
                v124 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                v55 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v55, "doubleValue");
                v126 = v125;
                objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v107, "doubleValue");
                v128 = v127;
                objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
                v121 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v121, "doubleValue");
                objc_msgSend(v124, "localizedStringWithFormat:", v156, v126, v128, v129);
              }
              else
              {
                if (v115 == 1)
                {
                  v116 = (void *)MEMORY[0x1E0CB3940];
                  objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "doubleValue");
                  v118 = v130;
                  objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                  v107 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v107, "doubleValue");
                  v120 = v131;
                  objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
                  v121 = (void *)objc_claimAutoreleasedReturnValue();
                  v122 = objc_msgSend(v121, "longValue");
                }
                else
                {
                  if (v115)
                    goto LABEL_121;
                  v116 = (void *)MEMORY[0x1E0CB3940];
                  objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "doubleValue");
                  v118 = v117;
                  objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
                  v107 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v107, "doubleValue");
                  v120 = v119;
                  objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
                  v121 = (void *)objc_claimAutoreleasedReturnValue();
                  v122 = objc_msgSend(v121, "intValue");
                }
                objc_msgSend(v116, "localizedStringWithFormat:", v156, v118, v120, v122);
              }
              v41 = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_140;
            }
            v104 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "doubleValue");
            v106 = v136;
            objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
            v107 = (void *)objc_claimAutoreleasedReturnValue();
            v108 = objc_msgSend(v107, "longValue");
LABEL_137:
            objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            v113 = objc_msgSend(v112, "longValue");
            goto LABEL_138;
          }
          v132 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "doubleValue");
          v134 = v133;
          objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          v135 = objc_msgSend(v107, "longValue");
LABEL_135:
          objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v112, "doubleValue");
          objc_msgSend(v132, "localizedStringWithFormat:", v156, v134, v135, v142);
LABEL_139:
          v41 = (id)objc_claimAutoreleasedReturnValue();

LABEL_140:
LABEL_162:

          goto LABEL_122;
        }
        v82 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v83 = objc_msgSend(v55, "longValue");
LABEL_144:
        objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v88, "doubleValue");
        v97 = v144;
        objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        v99 = objc_msgSend(v98, "longValue");
        goto LABEL_145;
      }
      v137 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v138 = objc_msgSend(v55, "longValue");
LABEL_147:
      objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "doubleValue");
      v146 = v145;
      objc_msgSend(v152, "objectAtIndexedSubscript:", 2);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "doubleValue");
      objc_msgSend(v137, "localizedStringWithFormat:", v156, v138, v146, v147);
      goto LABEL_148;
    }
    if (v85 == 1)
      goto LABEL_94;
    if (v85)
      goto LABEL_105;
    objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = objc_msgSend(v86, "integerValue");

    if (v87 != 2)
    {
      if (v87 != 1)
      {
        if (!v87)
        {
          v54 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = objc_msgSend(v55, "longValue");
          goto LABEL_93;
        }
LABEL_94:
        objc_msgSend(v153, "objectAtIndexedSubscript:", 1);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = objc_msgSend(v90, "integerValue");

        if (v91 != 2)
        {
          if (v91 != 1)
          {
            if (!v91)
            {
              v54 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = objc_msgSend(v55, "longValue");
              goto LABEL_98;
            }
            goto LABEL_100;
          }
          v54 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = objc_msgSend(v55, "longValue");
          goto LABEL_152;
        }
        v139 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = objc_msgSend(v55, "longValue");
        goto LABEL_150;
      }
      v54 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = objc_msgSend(v55, "longValue");
LABEL_154:
      objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      v89 = objc_msgSend(v88, "intValue");
      goto LABEL_155;
    }
    v139 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v152, "objectAtIndexedSubscript:", 0);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v140 = objc_msgSend(v55, "longValue");
LABEL_158:
    objc_msgSend(v152, "objectAtIndexedSubscript:", 1);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v148 = objc_msgSend(v88, "intValue");
    goto LABEL_159;
  }
  v41 = 0;
LABEL_123:

  return v41;
}

void _INStringExtractKeyPathAndFunctions(id *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = (void *)objc_msgSend(*a1, "mutableCopy");
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedFunctionRegularExpression");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "matchesInString:options:range:", *a1, 0, 0, objc_msgSend(*a1, "length"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v20 != v9)
            objc_enumerationMutation(obj);
          objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * i), "resultByAdjustingRangesWithOffset:", 0);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = *a1;
          v13 = objc_msgSend(v11, "rangeAtIndex:", 1);
          objc_msgSend(v12, "substringWithRange:", v13, v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v15);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".%@"), v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "replaceOccurrencesOfString:withString:options:range:", v16, &stru_1E2295770, 0, 0, objc_msgSend(v3, "length"));

        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v8);
    }

    if (a2)
      *a2 = (id)objc_msgSend(v4, "copy");
    *a1 = (id)objc_msgSend(v3, "copy");

  }
}

id INLocalizedFormatStringFromCodable(void *a1, void *a2, void *a3, __CFBundle *a4, void *a5, void *a6, void *a7, const __CFString **a8, unsigned __int8 a9)
{
  id v16;
  id v17;
  id v18;
  CFURLRef v19;
  CFURLRef v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t i;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  const __CFString *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v66;
  _QWORD *v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  id obj;
  id obja;
  uint64_t v79;
  id v80;
  id v81;
  _QWORD v82[4];
  id v83;
  id v84;
  id v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[128];
  void *v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v72 = a1;
  v16 = a2;
  v17 = a3;
  v80 = a5;
  v81 = a6;
  v18 = a7;
  if (a4)
  {
    v19 = CFBundleCopyBundleURL(a4);
    if (v19)
    {
      v20 = v19;
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithURL:", v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      CFRelease(v20);
      v22 = (void *)MEMORY[0x1E0D3E560];
      objc_msgSend(v80, "languageCode");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "grammarCollectionNamed:bundle:language:", v17, v21, v23);
      v24 = (id)objc_claimAutoreleasedReturnValue();

      v25 = v72;
      if (v24)
      {
        objc_msgSend(v24, "sentenceWithIdentifier:", v72);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        if (v75
          || (objc_msgSend(v24, "sentenceWithIdentifier:", v16),
              (v75 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
        {
          v68 = v18;
          v70 = v17;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          objc_msgSend(v81, "_nonNilAttributes", v16);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v75;
          v79 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v91, v97, 16);
          if (!v79)
            goto LABEL_23;
          obj = *(id *)v92;
          v73 = v26;
          while (1)
          {
            for (i = 0; i != v79; ++i)
            {
              if (*(id *)v92 != obj)
                objc_enumerationMutation(v26);
              v29 = *(_QWORD *)(*((_QWORD *)&v91 + 1) + 8 * i);
              objc_msgSend(v81, "_objectDescription");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v30, "attributeByName:", v29);
              v31 = (void *)objc_claimAutoreleasedReturnValue();

              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(v31, "typeName");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v32, "isEqualToString:", CFSTR("Long")))
                {

                }
                else
                {
                  objc_msgSend(v31, "typeName");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  v40 = objc_msgSend(v39, "isEqualToString:", CFSTR("Double"));

                  if (!v40)
                    goto LABEL_21;
                }
                objc_msgSend(v81, "valueForKey:", v29);
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v27, "setNumber:forPlaceholder:", v34, v29);
              }
              else
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_21;
                v33 = v21;
                objc_msgSend(v81, "valueForKey:", v29);
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v31, "valueForIndex:", objc_msgSend(v34, "unsignedIntegerValue"));
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v35, "displayNameLocID");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "tokenWithIdentifier:", v36);
                v37 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v37)
                {
                  objc_msgSend(v35, "displayName");
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "tokenWithIdentifier:", v38);
                  v37 = (void *)objc_claimAutoreleasedReturnValue();

                }
                v27 = v75;
                objc_msgSend(v75, "setToken:forPlaceholder:", v37, v29);

                v21 = v33;
                v26 = v73;
              }

LABEL_21:
            }
            v79 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v91, v97, 16);
            if (!v79)
            {
LABEL_23:

              objc_msgSend(v27, "resolvedSentence");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = v68;
              v17 = v70;
              v42 = v27;
              v16 = v66;
              goto LABEL_53;
            }
          }
        }
      }

      v76 = (void *)objc_msgSend(v16, "mutableCopy");
      if (a8)
        goto LABEL_29;
    }
    else
    {
      v76 = (void *)objc_msgSend(v16, "mutableCopy");
      v25 = v72;
      if (a8)
      {
LABEL_29:
        CFBundleGetDevelopmentRegion(a4);
        v43 = (const __CFString *)(id)objc_claimAutoreleasedReturnValue();
        goto LABEL_30;
      }
    }
LABEL_31:
    if (v25)
      goto LABEL_32;
LABEL_47:
    v21 = 0;
    v24 = 0;
    v63 = v76;
    if (v76)
      goto LABEL_52;
LABEL_48:
    v41 = 0;
    goto LABEL_54;
  }
  v76 = (void *)objc_msgSend(v16, "mutableCopy");
  if (a8)
  {
    v43 = CFSTR("en");
    v25 = v72;
LABEL_30:
    *a8 = v43;
    goto LABEL_31;
  }
  v25 = v72;
  if (!v72)
    goto LABEL_47;
LABEL_32:
  v74 = (uint64_t)a4;
  v69 = v18;
  v71 = v17;
  v44 = objc_msgSend(v25, "mutableCopy", a8);
  v45 = v16;
  v24 = (id)objc_msgSend(v16, "mutableCopy");
  objc_msgSend(v81, "_nonNilAttributes");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3928], "sortDescriptorWithKey:ascending:", 0, 1);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v96 = v47;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v96, 1);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "sortedArrayUsingDescriptors:", v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  obja = v49;
  v50 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v87, v95, 16);
  if (v50)
  {
    v51 = v50;
    v52 = *(_QWORD *)v88;
    v21 = (void *)v44;
    do
    {
      v53 = 0;
      v54 = v21;
      v55 = v24;
      do
      {
        if (*(_QWORD *)v88 != v52)
          objc_enumerationMutation(obja);
        v56 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * v53);
        objc_msgSend(v81, "_objectDescription");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "attributeByName:", v56);
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        v85 = v55;
        v86 = v54;
        _INUpdateFinalLocalizedString(v81, v45, v58, v56, a9, v80, &v86, &v85);
        v21 = v86;

        v24 = v85;
        ++v53;
        v54 = v21;
        v55 = v24;
      }
      while (v51 != v53);
      v51 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v87, v95, 16);
    }
    while (v51);
  }
  else
  {
    v21 = (void *)v44;
  }

  if (v74)
  {
    v17 = v71;
    INLocalizedStringFromBundle(v21, v21, v71, v80, v74, v67);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v69;
    v60 = v76;
    if (objc_msgSend(v59, "length") && (objc_msgSend(v21, "isEqualToString:", v59) & 1) == 0)
    {
      v63 = (void *)objc_msgSend(v59, "mutableCopy");
    }
    else
    {
      INLocalizedStringFromBundle(v24, v24, v71, v80, v74, v67);
      v61 = v21;
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = (void *)objc_msgSend(v62, "mutableCopy");

      v60 = v62;
      v21 = v61;
    }

    v16 = v45;
  }
  else
  {
    v16 = v45;
    v18 = v69;
    v17 = v71;
    v63 = v76;
  }

  if (!v63)
    goto LABEL_48;
LABEL_52:
  v82[0] = MEMORY[0x1E0C809B0];
  v82[1] = 3221225472;
  v82[2] = __INLocalizedFormatStringFromCodable_block_invoke;
  v82[3] = &unk_1E228E2C8;
  v83 = v18;
  v84 = v81;
  INFillOutStringWithStringsDict(v24, v63, v82);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = (void *)objc_msgSend(v64, "mutableCopy");

  v42 = v83;
LABEL_53:

LABEL_54:
  return v41;
}

void _INUpdateFinalLocalizedString(void *a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6, void **a7, id *a8)
{
  id v14;
  id v15;
  id v16;
  void *v17;
  int v18;
  void *v19;
  char isKindOfClass;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  int v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t j;
  id v58;
  void *v59;
  id v60;
  char v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  id *v77;
  id v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t k;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  void *v94;
  void *v95;
  int v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t m;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  id v118;
  void *v119;
  id v120;
  int v121;
  void *v122;
  void *v123;
  id v124;
  void *v125;
  void *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  id v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  id obj;
  id obja;
  id objb;
  id objc;
  id v139;
  id v140;
  unsigned int v141;
  unsigned int v142;
  id *v143;
  id *v144;
  id *v145;
  id *v146;
  id v147;
  id v148;
  id v149;
  void *v150;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[128];
  _BYTE v169[128];
  _BYTE v170[128];
  _BYTE v171[128];
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v148 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v147 = a6;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("${%@}"), v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v14, "containsString:", v17);
  if ((v18 & 1) != 0 || !a5)
    goto LABEL_6;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\\(%@)"), v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v14, "containsString:", v19) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%@)"), v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = objc_msgSend(v14, "containsString:", v17);
LABEL_6:
    v19 = v17;
    goto LABEL_7;
  }
  v18 = 1;
LABEL_7:
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v149 = v15;
  if (v18 && (isKindOfClass & 1) != 0)
  {
    objc_msgSend(v148, "valueForKeyPath:", v16);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v132 = v19;
      obj = v14;
      v139 = v16;
      v143 = a8;
      v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v164 = 0u;
      v165 = 0u;
      v166 = 0u;
      v167 = 0u;
      v23 = v21;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v164, v171, 16);
      v25 = v23;
      if (v24)
      {
        v26 = v24;
        v27 = *(_QWORD *)v165;
        do
        {
          for (i = 0; i != v26; ++i)
          {
            if (*(_QWORD *)v165 != v27)
              objc_enumerationMutation(v25);
            objc_msgSend(v15, "valueForIndex:", objc_msgSend(*(id *)(*((_QWORD *)&v164 + 1) + 8 * i), "unsignedIntegerValue"));
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = v29;
            if (v29)
            {
              objc_msgSend(v29, "displayName");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v32 = v31;
              if (v31)
              {
                v33 = v31;
              }
              else
              {
                objc_msgSend(v30, "name");
                v33 = (id)objc_claimAutoreleasedReturnValue();
              }
              v34 = v33;

              v35 = *a7;
              objc_msgSend(v30, "displayNameLocID");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "appendFormat:", CFSTR("-%@"), v36);

              objc_msgSend(v22, "addObject:", v34);
              v15 = v149;
            }

          }
          v23 = v25;
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v164, v171, 16);
        }
        while (v26);
      }

      v37 = *v143;
      objc_msgSend(v22, "_intents_readableTitleWithLocalizer:", v147);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v25;
      v19 = v132;
      objc_msgSend(v37, "replaceOccurrencesOfString:withString:options:range:", v132, v38, 0, 0, objc_msgSend(*v143, "length"));

      v14 = obj;
      v16 = v139;
    }
    else
    {
      objc_msgSend(v15, "valueForIndex:", objc_msgSend(v21, "unsignedIntegerValue"));
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = v71;
      if (v71)
      {
        v73 = v19;
        v74 = v21;
        objc_msgSend(v71, "displayName");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v76 = v75;
        v77 = a8;
        if (v75)
        {
          v78 = v75;
        }
        else
        {
          objc_msgSend(v72, "name");
          v78 = (id)objc_claimAutoreleasedReturnValue();
        }
        v97 = v78;

        v98 = *a7;
        objc_msgSend(v72, "displayNameLocID");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "appendFormat:", CFSTR("-%@"), v99);

        objc_msgSend(*v77, "replaceOccurrencesOfString:withString:options:range:", v73, v97, 0, 0, objc_msgSend(*v77, "length"));
        v19 = v73;
        v21 = v74;
      }

    }
    goto LABEL_90;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v15, "metadata");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v40 = objc_opt_isKindOfClass() & v18;

    if (v40 == 1)
    {
      objc_msgSend(v15, "metadata");
      v21 = (id)objc_claimAutoreleasedReturnValue();
      if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_msgSend(v21, "trueDisplayName");
        v41 = objc_claimAutoreleasedReturnValue();
        if (v41)
        {
          v42 = (void *)v41;
          v43 = v19;
          objc_msgSend(v21, "falseDisplayName");
          v44 = objc_claimAutoreleasedReturnValue();
          if (v44)
          {
            v45 = (void *)v44;
            objc_msgSend(v21, "trueDisplayNameID");
            v46 = objc_claimAutoreleasedReturnValue();
            if (v46)
            {
              v47 = (void *)v46;
              v144 = a8;
              objc_msgSend(v21, "falseDisplayNameID");
              v48 = objc_claimAutoreleasedReturnValue();
              if (v48)
              {
                v49 = (void *)v48;
                v50 = objc_msgSend(v14, "containsString:", v43);

                if (v50)
                {
                  objc_msgSend(v148, "valueForKeyPath:", v16);
                  v51 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_opt_class();
                  v150 = v51;
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    v133 = v43;
                    obja = v14;
                    v140 = v16;
                    v52 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                    v160 = 0u;
                    v161 = 0u;
                    v162 = 0u;
                    v163 = 0u;
                    v53 = v51;
                    v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v160, v170, 16);
                    if (v54)
                    {
                      v55 = v54;
                      v56 = *(_QWORD *)v161;
                      do
                      {
                        for (j = 0; j != v55; ++j)
                        {
                          if (*(_QWORD *)v161 != v56)
                            objc_enumerationMutation(v53);
                          v58 = *(id *)(*((_QWORD *)&v160 + 1) + 8 * j);
                          if (v58)
                          {
                            objc_opt_class();
                            if ((objc_opt_isKindOfClass() & 1) != 0)
                              v59 = v58;
                            else
                              v59 = 0;
                          }
                          else
                          {
                            v59 = 0;
                          }
                          v60 = v59;

                          v61 = objc_msgSend(v60, "BOOLValue");
                          v62 = *a7;
                          if ((v61 & 1) != 0)
                          {
                            objc_msgSend(v21, "trueDisplayNameID");
                            v63 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v62, "appendFormat:", CFSTR("-%@"), v63);

                            objc_msgSend(v21, "trueDisplayName");
                          }
                          else
                          {
                            objc_msgSend(v21, "falseDisplayNameID");
                            v64 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v62, "appendFormat:", CFSTR("-%@"), v64);

                            objc_msgSend(v21, "falseDisplayName");
                          }
                          v65 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v52, "addObject:", v65);

                        }
                        v55 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v160, v170, 16);
                      }
                      while (v55);
                    }

                    v66 = *v144;
                    objc_msgSend(v52, "_intents_readableTitleWithLocalizer:", v147);
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    v19 = v133;
                    objc_msgSend(v66, "replaceOccurrencesOfString:withString:options:range:", v133, v67, 0, 0, objc_msgSend(*v144, "length"));

                    v14 = obja;
                    v16 = v140;
                  }
                  else
                  {
                    v118 = v51;
                    if (v118)
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v119 = v118;
                      else
                        v119 = 0;
                    }
                    else
                    {
                      v119 = 0;
                    }
                    v120 = v119;

                    v121 = objc_msgSend(v120, "BOOLValue");
                    v122 = *a7;
                    if (v121)
                    {
                      objc_msgSend(v21, "trueDisplayNameID");
                      v123 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v122, "appendFormat:", CFSTR("-%@"), v123);

                      v124 = *v144;
                      objc_msgSend(v21, "trueDisplayName");
                    }
                    else
                    {
                      objc_msgSend(v21, "falseDisplayNameID");
                      v125 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v122, "appendFormat:", CFSTR("-%@"), v125);

                      v124 = *v144;
                      objc_msgSend(v21, "falseDisplayName");
                    }
                    v126 = (void *)objc_claimAutoreleasedReturnValue();
                    v127 = objc_msgSend(*v144, "length");
                    v128 = v124;
                    v19 = v43;
                    objc_msgSend(v128, "replaceOccurrencesOfString:withString:options:range:", v43, v126, 0, 0, v127);

                  }
                  goto LABEL_90;
                }
                goto LABEL_95;
              }

            }
          }

LABEL_95:
          v19 = v43;
        }
      }
      else
      {

        v21 = 0;
      }
LABEL_90:

      goto LABEL_91;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v145 = a8;
    v68 = v15;
    v141 = a5;
    v69 = v14;
    if (v68)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v70 = v68;
      else
        v70 = 0;
    }
    else
    {
      v70 = 0;
    }
    v82 = v70;

    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v130 = v82;
    objc_msgSend(v82, "codableDescription");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "attributes");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "allValues");
    v85 = (void *)objc_claimAutoreleasedReturnValue();

    objb = v85;
    v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v156, v169, 16);
    if (v86)
    {
      v87 = v86;
      v88 = *(_QWORD *)v157;
      do
      {
        for (k = 0; k != v87; ++k)
        {
          if (*(_QWORD *)v157 != v88)
            objc_enumerationMutation(objb);
          v90 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * k);
          v91 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v90, "propertyName");
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v93 = v16;
          objc_msgSend(v91, "stringWithFormat:", CFSTR("%@.%@"), v16, v92);
          v94 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("${%@"), v94);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          v96 = objc_msgSend(v69, "containsString:", v95);

          if (v96)
            _INUpdateFinalLocalizedString(v148, v69, v90, v94, v141, v147, a7, v145);

          v16 = v93;
        }
        v87 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v156, v169, 16);
      }
      while (v87);
    }

    v14 = v69;
    v15 = v149;
    v21 = v130;
    goto LABEL_90;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v79 = v15;
    v134 = v19;
    v142 = a5;
    v80 = v14;
    if (v79)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v81 = v79;
      else
        v81 = 0;
    }
    else
    {
      v81 = 0;
    }
    v21 = v81;

    +[INSchema systemSchema](INSchema, "systemSchema");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "_types");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "typeName");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentDefinitionNamespacedName((uint64_t)CFSTR("System"), v102);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v101, "objectForKeyedSubscript:", v103);
    v104 = objc_claimAutoreleasedReturnValue();

    v105 = (void *)v104;
    if (v104)
    {
      v129 = (void *)v104;
      v131 = v21;
      v146 = a8;
      v106 = v16;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      objc_msgSend(v105, "attributes");
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v107, "allValues");
      v108 = (void *)objc_claimAutoreleasedReturnValue();

      objc = v108;
      v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v152, v168, 16);
      if (v109)
      {
        v110 = v109;
        v111 = *(_QWORD *)v153;
        do
        {
          for (m = 0; m != v110; ++m)
          {
            if (*(_QWORD *)v153 != v111)
              objc_enumerationMutation(objc);
            v113 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * m);
            v114 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v113, "propertyName");
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "stringWithFormat:", CFSTR("%@.%@"), v106, v115);
            v116 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("${%@"), v116);
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v115) = objc_msgSend(v80, "containsString:", v117);

            if ((_DWORD)v115)
              _INUpdateFinalLocalizedString(v148, v80, v113, v116, v142, v147, a7, v146);

          }
          v110 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v152, v168, 16);
        }
        while (v110);
      }

      v15 = v149;
      v16 = v106;
      v105 = v129;
      v21 = v131;
    }

    v19 = v134;
    v14 = v80;
    goto LABEL_90;
  }
LABEL_91:

}

id INReplaceVariablesInFormatStringFromSlotComposing(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v36 = a2;
  v5 = a3;
  v6 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedFormatRegularExpression");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "matchesInString:options:range:", v6, 0, 0, objc_msgSend(v6, "length"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v9 = v8;
  v32 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v32)
  {
    v10 = 0;
    v33 = *(_QWORD *)v44;
    v34 = v9;
    v35 = v6;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v44 != v33)
          objc_enumerationMutation(v9);
        v37 = v11;
        v38 = v10;
        objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v11), "resultByAdjustingRangesWithOffset:", v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "rangeAtIndex:", 1);
        objc_msgSend(v6, "substringWithRange:", v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v16 = v5;
        objc_msgSend(v5, "intentSlotDescriptions");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
        if (!v18)
        {
LABEL_19:

          v5 = v16;
LABEL_20:

          v9 = v34;
          v30 = 0;
          v6 = v35;
          goto LABEL_21;
        }
        v19 = v18;
        v20 = *(_QWORD *)v40;
LABEL_8:
        v21 = 0;
        while (1)
        {
          if (*(_QWORD *)v40 != v20)
            objc_enumerationMutation(v17);
          v22 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v21);
          objc_msgSend(v22, "facadePropertyName");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "isEqualToString:", v15);

          if ((v24 & 1) != 0)
            break;
          if (v19 == ++v21)
          {
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
            if (v19)
              goto LABEL_8;
            goto LABEL_19;
          }
        }
        v5 = v16;
        objc_msgSend(v16, "localizeValueOfSlotDescription:withLocalizer:", v22, v36);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v25)
          goto LABEL_20;
        v26 = objc_msgSend(v12, "range");
        v6 = v35;
        objc_msgSend(v35, "replaceCharactersInRange:withString:", v26, v27, v25);
        v28 = objc_msgSend(v25, "length");
        objc_msgSend(v12, "range");
        v10 = v28 - v29 + v38;

        v11 = v37 + 1;
        v9 = v34;
      }
      while (v37 + 1 != v32);
      v32 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      if (v32)
        continue;
      break;
    }
  }

  v30 = v6;
LABEL_21:

  return v30;
}

id INReplaceVariablesInFormatStringFromCodable(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  char isKindOfClass;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  id v63;
  void *v64;
  id v65;
  char v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  id v87;
  char v88;
  uint64_t v89;
  id v90;
  void *v91;
  NSObject *v92;
  void *v93;
  void *v94;
  void *v95;
  NSObject *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  uint64_t v113;
  void *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  id v123;
  id v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[128];
  _BYTE v134[128];
  uint8_t v135[128];
  uint8_t buf[4];
  const char *v137;
  __int16 v138;
  void *v139;
  __int16 v140;
  id v141;
  __int16 v142;
  void *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v106 = a2;
  v10 = a3;
  v107 = a4;
  v100 = v9;
  if (v9)
  {
    v11 = (void *)objc_msgSend(v9, "mutableCopy", v9);
    objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedFormatRegularExpression");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "matchesInString:options:range:", v11, 0, 0, objc_msgSend(v11, "length"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (a5 && !objc_msgSend(v13, "count"))
    {
      objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedOldFormatRegularExpression");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "matchesInString:options:range:", v11, 0, 0, objc_msgSend(v11, "length"));
      v15 = objc_claimAutoreleasedReturnValue();

      v13 = (void *)v15;
    }
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v16 = v13;
    v105 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v125, v135, 16);
    if (v105)
    {
      v17 = 0;
      v103 = v16;
      v104 = *(_QWORD *)v126;
      v101 = v11;
      v102 = v10;
LABEL_7:
      v18 = 0;
LABEL_8:
      if (*(_QWORD *)v126 != v104)
        objc_enumerationMutation(v16);
      v113 = v18;
      objc_msgSend(*(id *)(*((_QWORD *)&v125 + 1) + 8 * v18), "resultByAdjustingRangesWithOffset:", v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "rangeAtIndex:", 1);
      objc_msgSend(v11, "substringWithRange:", v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        objc_msgSend(v107, "objectForKeyedSubscript:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend(v107, "objectForKeyedSubscript:", v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "_intents_readableTitleWithLocalizer:", v106);
          v25 = (id)objc_claimAutoreleasedReturnValue();

          if (v25)
          {
            v26 = objc_msgSend(v19, "range");
            objc_msgSend(v11, "replaceCharactersInRange:withString:", v26, v27, v25);
            v28 = objc_msgSend(v25, "length");
            objc_msgSend(v19, "range");
            v30 = v28 - v29;
            v114 = v22;
            goto LABEL_80;
          }
        }
      }
      v108 = v17;
      v110 = v19;
      v123 = 0;
      v124 = v22;
      _INStringExtractKeyPathAndFunctions(&v124, &v123);
      v31 = v124;

      v32 = v123;
      objc_msgSend(v10, "_objectDescription");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "attributeByKeyPath:", v31);
      v34 = (void *)objc_claimAutoreleasedReturnValue();

      if (v34)
      {
        objc_msgSend(v10, "valueForKeyPath:", v31);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v114 = v31;
        if (v35)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v36 = v35;
          else
            v36 = 0;
        }
        else
        {
          v36 = 0;
        }
        v37 = v36;
        objc_msgSend(v37, "if_flatMap:", &__block_literal_global_57231);
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = (void *)v38;
        if (v38)
          v40 = (void *)v38;
        else
          v40 = v35;
        v41 = v40;

        objc_opt_class();
        v109 = v41;
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v42 = v32;
            v43 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v44 = v41;
            v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v119, v134, 16);
            if (v45)
            {
              v46 = v45;
              v47 = *(_QWORD *)v120;
              do
              {
                for (i = 0; i != v46; ++i)
                {
                  if (*(_QWORD *)v120 != v47)
                    objc_enumerationMutation(v44);
                  objc_msgSend(v34, "valueForIndex:", objc_msgSend(*(id *)(*((_QWORD *)&v119 + 1) + 8 * i), "unsignedIntegerValue"));
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v49, "displayName");
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v43, "if_addObjectIfNonNil:", v50);

                }
                v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v119, v134, 16);
              }
              while (v46);
            }

            objc_msgSend(v43, "_intents_readableTitleWithLocalizer:", v106);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = v42;
            goto LABEL_59;
          }
          objc_msgSend(v34, "valueForIndex:", objc_msgSend(v41, "unsignedIntegerValue"));
          v43 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "displayName");
          v68 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0
            && (objc_msgSend(v34, "metadata"),
                v52 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_opt_class(),
                isKindOfClass = objc_opt_isKindOfClass(),
                v52,
                (isKindOfClass & 1) != 0))
          {
            objc_msgSend(v34, "metadata");
            v43 = (id)objc_claimAutoreleasedReturnValue();
            if (!v43 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            {

              v43 = 0;
LABEL_97:

LABEL_98:
              v95 = (void *)INSiriLogContextIntents;
              v10 = v102;
              if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
              {
                v97 = v95;
                objc_msgSend(v102, "_objectDescription");
                v98 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v98, "className");
                v99 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136315906;
                v137 = "INReplaceVariablesInFormatStringFromCodable";
                v138 = 2112;
                v139 = v99;
                v140 = 2112;
                v141 = v34;
                v142 = 2112;
                v143 = v109;
                _os_log_error_impl(&dword_18BEBC000, v97, OS_LOG_TYPE_ERROR, "%s [%@] No displayable value for %@ with value %@", buf, 0x2Au);

              }
              v11 = v101;
              v31 = v114;
              goto LABEL_101;
            }
            objc_msgSend(v43, "trueDisplayName");
            v54 = objc_claimAutoreleasedReturnValue();
            if (!v54)
              goto LABEL_97;
            v55 = (void *)v54;
            objc_msgSend(v43, "falseDisplayName");
            v56 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v56)
              goto LABEL_97;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v111 = v32;
              v57 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v118 = 0u;
              v58 = v41;
              v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v115, v133, 16);
              if (v59)
              {
                v60 = v59;
                v61 = *(_QWORD *)v116;
                do
                {
                  for (j = 0; j != v60; ++j)
                  {
                    if (*(_QWORD *)v116 != v61)
                      objc_enumerationMutation(v58);
                    v63 = *(id *)(*((_QWORD *)&v115 + 1) + 8 * j);
                    if (v63)
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                        v64 = v63;
                      else
                        v64 = 0;
                    }
                    else
                    {
                      v64 = 0;
                    }
                    v65 = v64;

                    v66 = objc_msgSend(v65, "BOOLValue");
                    if ((v66 & 1) != 0)
                      objc_msgSend(v43, "trueDisplayName");
                    else
                      objc_msgSend(v43, "falseDisplayName");
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v57, "if_addObjectIfNonNil:", v67);

                  }
                  v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v115, v133, 16);
                }
                while (v60);
              }

              objc_msgSend(v57, "_intents_readableTitleWithLocalizer:", v106);
              v51 = (void *)objc_claimAutoreleasedReturnValue();

              v32 = v111;
              goto LABEL_59;
            }
            v85 = v41;
            if (v85)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v86 = v85;
              else
                v86 = 0;
            }
            else
            {
              v86 = 0;
            }
            v87 = v86;

            v88 = objc_msgSend(v87, "BOOLValue");
            if ((v88 & 1) != 0)
              objc_msgSend(v43, "trueDisplayName");
            else
              objc_msgSend(v43, "falseDisplayName");
            v68 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            objc_msgSend(v34, "metadata");
            v43 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "_intents_readableTitleWithLocalizer:metadata:", v106, v43);
            v68 = objc_claimAutoreleasedReturnValue();
          }
        }
        v51 = (void *)v68;
LABEL_59:

        if (!v51)
          goto LABEL_98;
        v25 = v51;
        v69 = v32;
        v129 = 0u;
        v130 = 0u;
        v131 = 0u;
        v132 = 0u;
        v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v129, buf, 16);
        v112 = v25;
        if (!v70)
          goto LABEL_79;
        v71 = v70;
        v72 = *(_QWORD *)v130;
        while (1)
        {
          v73 = 0;
          do
          {
            if (*(_QWORD *)v130 != v72)
              objc_enumerationMutation(v69);
            v74 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * v73);
            v75 = v25;
            v76 = v74;
            if (objc_msgSend(v76, "isEqualToString:", CFSTR("uppercased()")))
            {
              objc_msgSend(v75, "localizedUppercaseString");
              v77 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_69:
              v78 = v77;
              v25 = (id)objc_msgSend(v77, "copy");

              goto LABEL_70;
            }
            if (objc_msgSend(v76, "isEqualToString:", CFSTR("lowercased()")))
            {
              objc_msgSend(v75, "localizedLowercaseString");
              v77 = (void *)objc_claimAutoreleasedReturnValue();
              goto LABEL_69;
            }
            if (objc_msgSend(v76, "isEqualToString:", CFSTR("uppercaseFirstCharacter()")))
            {
              objc_msgSend(v75, "if_stringByUppercasingFirstCharacter");
              v79 = objc_claimAutoreleasedReturnValue();
              goto LABEL_77;
            }
            v25 = v75;
            if (objc_msgSend(v76, "isEqualToString:", CFSTR("lowercaseFirstCharacter()")))
            {
              objc_msgSend(v75, "if_stringByLowercasingFirstCharacter");
              v79 = objc_claimAutoreleasedReturnValue();
LABEL_77:
              v25 = (id)v79;
              v78 = v75;
LABEL_70:

            }
            ++v73;
          }
          while (v71 != v73);
          v80 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v129, buf, 16);
          v71 = v80;
          if (!v80)
          {
LABEL_79:

            v19 = v110;
            v81 = objc_msgSend(v110, "range");
            v11 = v101;
            objc_msgSend(v101, "replaceCharactersInRange:withString:", v81, v82, v25);
            v83 = objc_msgSend(v25, "length");
            objc_msgSend(v110, "range");
            v30 = v83 - v84;

            v10 = v102;
            v16 = v103;
            v17 = v108;
LABEL_80:

            v17 += v30;
            v18 = v113 + 1;
            if (v113 + 1 == v105)
            {
              v89 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v125, v135, 16);
              v105 = v89;
              if (!v89)
                goto LABEL_92;
              goto LABEL_7;
            }
            goto LABEL_8;
          }
        }
      }
      v91 = (void *)INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        v92 = v91;
        objc_msgSend(v10, "_objectDescription");
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v93, "className");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315650;
        v137 = "INReplaceVariablesInFormatStringFromCodable";
        v138 = 2112;
        v139 = v94;
        v140 = 2112;
        v141 = v31;
        _os_log_error_impl(&dword_18BEBC000, v92, OS_LOG_TYPE_ERROR, "%s [%@] No codable attribute for parameter key path %@", buf, 0x20u);

      }
LABEL_101:

      v16 = v103;
      v90 = 0;
    }
    else
    {
LABEL_92:

      v90 = v11;
    }

  }
  else
  {
    v90 = 0;
  }

  return v90;
}

id INStringsDictEntryForKeyInTable(void *a1, _QWORD *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  __CFBundle *v13;
  void *v14;
  __CFString *v15;
  CFURLRef v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v56;
  const __CFURL *v57;
  __CFString *v58;
  id v59;
  id v60;
  id v61;
  _QWORD *v62;
  id obj;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[128];
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a4;
  objc_msgSend(v10, "bundleIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (__CFBundle *)objc_msgSend(v11, "bundleWithIdentifier:fileURL:", v12, 0);

  if (v13)
  {
    objc_msgSend(v11, "preferredLocalizationsForBundle:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "firstObject");
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (a5)
      *a5 = objc_retainAutorelease(v15);
    v16 = CFBundleCopyResourceURLForLocalization(v13, (CFStringRef)objc_msgSend(v10, "tableName"), CFSTR("stringsdict"), 0, v15);
    if (v16)
    {
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v17
        && ((objc_msgSend(v17, "objectForKey:", v9), (v19 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
         || (objc_msgSend(v18, "objectForKey:", *a2), (v19 = (void *)objc_claimAutoreleasedReturnValue()) != 0)))
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "objectForKey:", CFSTR("NSStringLocalizedFormatKey"));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = a2;
        if (v20)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v21 = v20;
          else
            v21 = 0;
        }
        else
        {
          v21 = 0;
        }
        v23 = v21;

        v24 = (void *)objc_msgSend(v23, "mutableCopy");
        if (v24)
        {
          v56 = v18;
          v57 = v16;
          v58 = v15;
          v59 = v11;
          v60 = v10;
          v61 = v9;
          objc_msgSend(MEMORY[0x1E0CB38E8], "_intents_sharedStringsDictFormatRegularExpression");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "matchesInString:options:range:", v24, 0, 0, objc_msgSend(v24, "length"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          obj = v26;
          v27 = v66;
          v28 = 0x1E0CB3000uLL;
          v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v84, 16);
          if (v68)
          {
            v29 = 0;
            v67 = *(_QWORD *)v80;
            v64 = v24;
            v65 = v19;
            do
            {
              v30 = 0;
              do
              {
                if (*(_QWORD *)v80 != v67)
                  objc_enumerationMutation(obj);
                v72 = v30;
                objc_msgSend(*(id *)(*((_QWORD *)&v79 + 1) + 8 * v30), "resultByAdjustingRangesWithOffset:", v29);
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                v32 = objc_msgSend(v31, "rangeAtIndex:", 1);
                objc_msgSend(v24, "substringWithRange:", v32, v33);
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                v71 = v31;
                v35 = objc_msgSend(v31, "range");
                v37 = v36;
                objc_msgSend(*(id *)(v28 + 2368), "stringWithFormat:", CFSTR("${%@}"), v34);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "replaceCharactersInRange:withString:", v35, v37, v38);

                objc_msgSend(v19, "objectForKey:", v34);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v39, "objectForKey:", CFSTR("NSStringFormatValueTypeKey"));
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                if (v40)
                {
                  v74 = v34;
                  v41 = (void *)MEMORY[0x1E0CB38E8];
                  v69 = v40;
                  objc_msgSend(*(id *)(v28 + 2368), "stringWithFormat:", CFSTR("%%(.[0-9])?%@"), v40);
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v41, "regularExpressionWithPattern:options:error:", v42, 0, 0);
                  v73 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  v75 = 0u;
                  v76 = 0u;
                  v77 = 0u;
                  v78 = 0u;
                  v70 = v29;
                  if (_INStringsDictAcceptedKeys_onceToken != -1)
                    dispatch_once(&_INStringsDictAcceptedKeys_onceToken, &__block_literal_global_52);
                  v44 = (id)_INStringsDictAcceptedKeys_acceptedKeys;
                  v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
                  if (v45)
                  {
                    v46 = v45;
                    v47 = *(_QWORD *)v76;
                    do
                    {
                      for (i = 0; i != v46; ++i)
                      {
                        if (*(_QWORD *)v76 != v47)
                          objc_enumerationMutation(v44);
                        v49 = *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * i);
                        objc_msgSend(v39, "objectForKey:", v49);
                        v50 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v50)
                        {
                          v51 = v50;
                          v52 = objc_msgSend(v50, "length");
                          objc_msgSend(*(id *)(v28 + 2368), "stringWithFormat:", CFSTR("${%@}"), v74);
                          v53 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v73, "stringByReplacingMatchesInString:options:range:withTemplate:", v51, 0, 0, v52, v53);
                          v54 = (void *)objc_claimAutoreleasedReturnValue();

                          v28 = 0x1E0CB3000;
                          objc_msgSend(v43, "setObject:forKey:", v54, v49);

                        }
                      }
                      v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
                    }
                    while (v46);
                  }

                  v27 = v66;
                  v34 = v74;
                  objc_msgSend(v66, "setObject:forKey:", v43, v74);

                  v24 = v64;
                  v19 = v65;
                  v40 = v69;
                  v29 = v70;
                }
                --v29;

                v30 = v72 + 1;
              }
              while (v72 + 1 != v68);
              v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v84, 16);
            }
            while (v68);
          }

          *v62 = (id)objc_msgSend(v24, "copy");
          v22 = v27;

          v10 = v60;
          v9 = v61;
          v15 = v58;
          v11 = v59;
          v18 = v56;
          v16 = v57;
        }
        else
        {
          v22 = 0;
          v27 = v66;
        }

      }
      else
      {
        v22 = 0;
      }

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

BOOL _INPBSaveHealthSampleIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSampleUuids:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecordDate:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDefaultUnit:", v17, 0, 0);
        goto LABEL_45;
      case 4u:
        v17 = objc_alloc_init(_INPBWellnessValue);
        if (!PBReaderPlaceMark() || !_INPBWellnessValueReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValuesDefaultUnit:", v17, 0, 0);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserProvidedUnit:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        v17 = objc_alloc_init(_INPBWellnessValue);
        if (!PBReaderPlaceMark() || !_INPBWellnessValueReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValuesUserProvidedUnit:", v17, 0, 0);
        goto LABEL_45;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPunchoutUrl:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_46;
    }
  }
}

id INIntentSlotValueTransformFromCurrencyAmount(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromCurrencyAmountValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

INCurrencyAmount *INIntentSlotValueTransformFromCurrencyAmountValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  INCurrencyAmount *v4;
  void *v5;
  void *v6;
  void *v7;
  INCurrencyAmount *v8;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    v4 = [INCurrencyAmount alloc];
    objc_msgSend(v2, "amount");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDecimalNumberValue(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "currencyCode");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[INCurrencyAmount initWithAmount:currencyCode:](v4, "initWithAmount:currencyCode:", v6, v7);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

_INPBCurrencyAmount *INIntentSlotValueTransformToCurrencyAmount(void *a1)
{
  void *v1;
  _INPBCurrencyAmount *v2;

  INIntentSlotValueTransformToCurrencyAmountValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBCurrencyAmount);
    -[_INPBCurrencyAmount addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBCurrencyAmountValue *INIntentSlotValueTransformToCurrencyAmountValue(void *a1)
{
  id v1;
  _INPBCurrencyAmountValue *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBCurrencyAmountValue);
    objc_msgSend(v1, "currencyCode");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCurrencyAmountValue setCurrencyCode:](v2, "setCurrencyCode:", v3);

    objc_msgSend(v1, "amount");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToDecimalNumberValue(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCurrencyAmountValue setAmount:](v2, "setAmount:", v5);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromCurrencyAmounts(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromCurrencyAmount(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromCurrencyAmountValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromCurrencyAmountValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToCurrencyAmounts(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToCurrencyAmount(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToCurrencyAmountValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToCurrencyAmountValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

_INPBCurrencyAmountValue *INIntentSlotValueRedactedCurrencyAmountValueFromCurrencyAmountValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _INPBCurrencyAmountValue *v9;
  void *v10;
  void *v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "valueMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = INPrivacyEntitlementOptionsForValueMetadata(v7);

  if ((v8 & a2) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_alloc_init(_INPBCurrencyAmountValue);
    objc_msgSend(v5, "amount");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueRedactedValueFromDecimalNumberValue(v10, a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCurrencyAmountValue setAmount:](v9, "setAmount:", v11);

    objc_msgSend(v5, "currencyCode");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBCurrencyAmountValue setCurrencyCode:](v9, "setCurrencyCode:", v12);

  }
  return v9;
}

_INPBCurrencyAmount *INIntentSlotValueRedactedCurrencyAmountFromCurrencyAmount(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBCurrencyAmount *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBCurrencyAmount);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedCurrencyAmountValueFromCurrencyAmountValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2, v6);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBCurrencyAmount addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedCurrencyAmountsFromCurrencyAmounts(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedCurrencyAmountFromCurrencyAmount(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

uint64_t _INPBGetFileInformationIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_53:
        objc_msgSend(a1, "setEntityType:", v25);
        goto LABEL_64;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEntityName:", v17, 0, 0);
LABEL_34:

LABEL_64:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_66:

        return 0;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_58:
        objc_msgSend(a1, "setPropertyName:", v32);
        goto LABEL_64;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_63:
        objc_msgSend(a1, "setQualifier:", v39);
        goto LABEL_64;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_64;
    }
  }
}

uint64_t _INPBRideOptionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBTimestamp *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (_INPBTimestamp *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v17);
        goto LABEL_46;
      case 2u:
        PBReaderReadString();
        v17 = (_INPBTimestamp *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSubtitle:", v17);
        goto LABEL_46;
      case 3u:
        v17 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v17, a2) & 1) == 0)
          goto LABEL_61;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEstimatedPickupDate:", v17, 0, 0);
        goto LABEL_46;
      case 4u:
        v17 = objc_alloc_init(_INPBPriceRangeValue);
        if (!PBReaderPlaceMark() || !_INPBPriceRangeValueReadFrom(v17, a2))
          goto LABEL_61;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPriceRange:", v17, 0, 0);
        goto LABEL_46;
      case 5u:
        PBReaderReadString();
        v17 = (_INPBTimestamp *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDisclaimerMessage:", v17);
        goto LABEL_46;
      case 6u:
        v17 = objc_alloc_init(_INPBRidePartySizeOption);
        if (!PBReaderPlaceMark() || !_INPBRidePartySizeOptionReadFrom(v17, a2))
          goto LABEL_61;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAvailablePartySizeOptions:", v17, 0, 0);
        goto LABEL_46;
      case 7u:
        PBReaderReadString();
        v17 = (_INPBTimestamp *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAvailablePartySizeOptionsSelectionPrompt:", v17);
        goto LABEL_46;
      case 8u:
        PBReaderReadString();
        v17 = (_INPBTimestamp *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSpecialPricing:", v17);
        goto LABEL_46;
      case 9u:
        v17 = objc_alloc_init(_INPBImageValue);
        if (!PBReaderPlaceMark() || (_INPBImageValueReadFrom(v17, a2) & 1) == 0)
          goto LABEL_61;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpecialPricingBadgeImage:", v17, 0, 0);
        goto LABEL_46;
      case 0xAu:
        v17 = objc_alloc_init(_INPBRideFareLineItem);
        if (!PBReaderPlaceMark() || !_INPBRideFareLineItemReadFrom(v17, a2))
          goto LABEL_61;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addFareLineItems:", v17, 0, 0);
        goto LABEL_46;
      case 0xBu:
        v17 = objc_alloc_init(_INPBUserActivity);
        if (PBReaderPlaceMark() && _INPBUserActivityReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUserActivityForBookingInApplication:", v17, 0, 0);
LABEL_46:

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_61:

        return 0;
      case 0xCu:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_59:
        objc_msgSend(a1, "setUsesMeteredFare:", v21 != 0);
        goto LABEL_47;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

BOOL INSpatialEventHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

uint64_t INSpatialEventGetBackingType(unint64_t a1)
{
  if (a1 >= 3)
    return 0x7FFFFFFFLL;
  else
    return (10 * a1);
}

uint64_t INSpatialEventGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 10;
  if (a2 == 20)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INSpatialEventGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("depart");
  if (a1 == 1)
    return CFSTR("arrive");
  else
    return v1;
}

uint64_t INSpatialEventWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("arrive")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("depart")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INSpatialEventGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("depart");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("arrive");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBSetMessageAttributeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _INPBPayloadNeedsDisambiguationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBSelectionItem *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBSelectionItem);
        if (!PBReaderPlaceMark() || !_INPBSelectionItemReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addDisambiguationItems:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *INSendMessageIntentResponseCodeGetName(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 0:
      result = CFSTR("INSendMessageIntentResponseCodeUnspecified");
      break;
    case 1:
      result = CFSTR("INSendMessageIntentResponseCodeReady");
      break;
    case 2:
      result = CFSTR("INSendMessageIntentResponseCodeInProgress");
      break;
    case 3:
      result = CFSTR("INSendMessageIntentResponseCodeSuccess");
      break;
    case 4:
      result = CFSTR("INSendMessageIntentResponseCodeFailure");
      break;
    case 5:
      result = CFSTR("INSendMessageIntentResponseCodeFailureRequiringAppLaunch");
      break;
    case 6:
      result = CFSTR("INSendMessageIntentResponseCodeFailureMessageServiceNotAvailable");
      break;
    case 7:
      result = CFSTR("INSendMessageIntentResponseCodeFailureRequiringInAppAuthentication");
      break;
    default:
      switch(a1)
      {
        case 1000:
          result = CFSTR("INSendMessageIntentResponseCodeFailureMessageAttachmentError");
          break;
        case 1001:
          result = CFSTR("INSendMessageIntentResponseCodeFailureMessageLocationNotAllowed");
          break;
        case 1002:
          result = CFSTR("INSendMessageIntentResponseCodeFailureScreenTimeRestrictionEnabled");
          break;
        case 1003:
          result = CFSTR("INSendMessageIntentResponseCodeFailureNotAMemberOfConversation");
          break;
        case 1004:
          result = CFSTR("INSendMessageIntentResponseCodeFailureMessageLocationAuthorizationNotDetermined");
          break;
        case 1005:
          result = CFSTR("INSendMessageIntentResponseCodeFailureMessagePreciseLocationNotAuthorized");
          break;
        default:
          result = 0;
          break;
      }
      break;
  }
  return result;
}

INTicketedEventReservation *INIntentSlotValueTransformFromTicketedEventReservation(INTicketedEventReservation *a1)
{
  INTicketedEventReservation *v1;
  void *v2;
  INTicketedEventReservation *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  id v16;
  INTicketedEventReservation *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    -[INTicketedEventReservation reservation](v1, "reservation");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = [INTicketedEventReservation alloc];
    objc_msgSend(v2, "itemReference");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDataString(v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "reservationNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bookingTime");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromTimestamp(v21);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v2, "hasReservationStatus");
    v6 = objc_msgSend(v2, "reservationStatus") - 2;
    if (v6 <= 3)
      v7 = (void *)(v6 + 1);
    else
      v7 = 0;
    if (!v5)
      v7 = 0;
    v16 = v7;
    objc_msgSend(v2, "reservationHolderName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "actions");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromReservationActions(v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "url");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromURLValue(v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[INTicketedEventReservation reservedSeat](v1, "reservedSeat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromSeat(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[INTicketedEventReservation event](v1, "event");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromTicketedEvent(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[INTicketedEventReservation initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:event:](v3, "initWithItemReference:reservationNumber:bookingTime:reservationStatus:reservationHolderName:actions:URL:reservedSeat:event:", v23, v4, v19, v16, v15, v14, v8, v10, v12);

    a1 = v17;
  }
  return a1;
}

_INPBTicketedEventReservation *INIntentSlotValueTransformToTicketedEventReservation(void *a1)
{
  id v1;
  _INPBReservation *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _INPBTicketedEventReservation *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBReservation);
    objc_msgSend(v1, "itemReference");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDataString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setItemReference:](v2, "setItemReference:", v4);

    objc_msgSend(v1, "reservationNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationNumber:](v2, "setReservationNumber:", v5);

    objc_msgSend(v1, "bookingTime");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTimestamp(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setBookingTime:](v2, "setBookingTime:", v7);

    v8 = objc_msgSend(v1, "reservationStatus");
    if (v8 < 5)
      v9 = (v8 + 1);
    else
      v9 = 0x7FFFFFFFLL;
    -[_INPBReservation setReservationStatus:](v2, "setReservationStatus:", v9);
    objc_msgSend(v1, "reservationHolderName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setReservationHolderName:](v2, "setReservationHolderName:", v10);

    objc_msgSend(v1, "actions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToReservationActions(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setActions:](v2, "setActions:", v12);

    objc_msgSend(v1, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToURLValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBReservation setUrl:](v2, "setUrl:", v14);

    v15 = objc_alloc_init(_INPBTicketedEventReservation);
    -[_INPBTicketedEventReservation setReservation:](v15, "setReservation:", v2);
    objc_msgSend(v1, "event");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToTicketedEvent(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTicketedEventReservation setEvent:](v15, "setEvent:", v17);

    objc_msgSend(v1, "reservedSeat");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToSeat(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBTicketedEventReservation setReservedSeat:](v15, "setReservedSeat:", v19);

  }
  else
  {
    v15 = 0;
  }
  return v15;
}

id INIntentSlotValueTransformFromTicketedEventReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromTicketedEventReservation(*(INTicketedEventReservation **)(*((_QWORD *)&v11 + 1)
                                                                                                + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToTicketedEventReservations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToTicketedEventReservation(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedTicketedEventReservationFromTicketedEventReservation(void *a1)
{
  return a1;
}

uint64_t _INPBStartAudioCallIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  _INPBCallMetrics *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2)
        break;
      if ((_DWORD)v17 == 1000)
      {
        v18 = objc_alloc_init(_INPBCallMetrics);
        if (!PBReaderPlaceMark() || (_INPBCallMetricsReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetrics:", v18, 0, 0);
LABEL_36:

        goto LABEL_44;
      }
      if ((_DWORD)v17 != 3)
      {
LABEL_37:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
      }
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_40;
        v19 += 7;
        v14 = v20++ >= 9;
        if (v14)
        {
          v25 = 0;
          goto LABEL_43;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + *v5))
        v25 = 0;
      else
        v25 = v21;
LABEL_43:
      objc_msgSend(a1, "setAudioRoute:", v25);
LABEL_44:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 1)
    {
      PBReaderReadString();
      v18 = (_INPBCallMetrics *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "setStatus:", v18);
    }
    else
    {
      if ((_DWORD)v17 != 2)
        goto LABEL_37;
      PBReaderReadString();
      v18 = (_INPBCallMetrics *)objc_claimAutoreleasedReturnValue();
      if (v18)
        objc_msgSend(a1, "addTargetContacts:", v18);
    }
    goto LABEL_36;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *INDeleteEventIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228E3F8[a1];
}

uint64_t _INPBCreateNoteIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBNote *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBNote);
        if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCreatedNote:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBHomeAttributeReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBHomeAttributeValue *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(_INPBHomeAttributeValue);
        if (!PBReaderPlaceMark() || (_INPBHomeAttributeValueReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAttributeValue:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setAttributeType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C081924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__59941(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__59942(uint64_t a1)
{

}

BOOL _INPBGetCarPowerLevelStatusIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDataString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCarName:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBIntentMetadata);
    if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPlayMediaIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  _INPBIntentMetadata *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v19 = v10 >> 3;
    switch((v10 >> 3))
    {
      case 1u:
        v20 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v20, 0, 0);
        goto LABEL_114;
      case 2u:
        v20 = objc_alloc_init(_INPBMediaItemValue);
        v63 = 0;
        v64 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemValueReadFrom(v20, a2))
          goto LABEL_145;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addMediaItems:", v20, 0, 0);
        goto LABEL_114;
      case 3u:
        v20 = objc_alloc_init(_INPBMediaItemValue);
        if (!PBReaderPlaceMark() || (_INPBMediaItemValueReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaContainer:", v20, 0, 0);
        goto LABEL_114;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                v23 = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_122:
        objc_msgSend(a1, "setPlayShuffled:", v23 != 0);
        goto LABEL_115;
      case 5u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                v35 = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
        else
          v35 = v30;
LABEL_127:
        objc_msgSend(a1, "setPlaybackRepeatMode:", v35, v63, v64);
        goto LABEL_115;
      case 6u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v15 = v37++ >= 9;
              if (v15)
              {
                v38 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_131:
        objc_msgSend(a1, "setResumePlayback:", v38 != 0);
        goto LABEL_115;
      case 7u:
        v20 = objc_alloc_init(_INPBTimestamp);
        if (!PBReaderPlaceMark() || (_INPBTimestampReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setExpirationDate:", v20, 0, 0);
        goto LABEL_114;
      case 8u:
        v20 = objc_alloc_init(_INPBDataString);
        v63 = 0;
        v64 = 0;
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v20, a2))
          goto LABEL_145;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addBucket:", v20, 0, 0);
        goto LABEL_114;
      case 9u:
        PBReaderReadString();
        v20 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRecoID:", v20);
        goto LABEL_114;
      case 0xAu:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v15 = v44++ >= 9;
              if (v15)
              {
                v50 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
        else
          v50 = v45;
LABEL_136:
        objc_msgSend(a1, "setPlaybackQueueLocation:", v50, v63, v64);
        goto LABEL_115;
      case 0xBu:
        v51 = *v3;
        v52 = *(_QWORD *)(a2 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v53 = *(double *)(*(_QWORD *)(a2 + *v7) + v52);
          *(_QWORD *)(a2 + v51) = v52 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v53 = 0.0;
        }
        objc_msgSend(a1, "setPlaybackSpeed:", v53, v63, v64);
        goto LABEL_115;
      case 0xCu:
        v20 = objc_alloc_init(_INPBMediaSearch);
        if (!PBReaderPlaceMark() || (_INPBMediaSearchReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaSearch:", v20, 0, 0);
        goto LABEL_114;
      case 0xDu:
        v20 = objc_alloc_init(_INPBString);
        v63 = 0;
        v64 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v20, a2))
          goto LABEL_145;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addHashedRouteUIDs:", v20, 0, 0);
        goto LABEL_114;
      case 0xEu:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaylistTitle:", v20, 0, 0);
        goto LABEL_114;
      case 0xFu:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMusicArtistName:", v20, 0, 0);
        goto LABEL_114;
      case 0x10u:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudiobookTitle:", v20, 0, 0);
        goto LABEL_114;
      case 0x11u:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudiobookAuthor:", v20, 0, 0);
        goto LABEL_114;
      case 0x12u:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setShowTitle:", v20, 0, 0);
        goto LABEL_114;
      case 0x13u:
        v20 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v20, a2) & 1) == 0)
          goto LABEL_145;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaUserContext:", v20, 0, 0);
        goto LABEL_114;
      case 0x14u:
        v20 = objc_alloc_init(_INPBMediaItemGroup);
        v63 = 0;
        v64 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemGroupReadFrom(v20, a2))
          goto LABEL_145;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addAudioSearchResults:", v20, 0, 0);
        goto LABEL_114;
      case 0x15u:
        v20 = objc_alloc_init(_INPBMediaItemGroup);
        v63 = 0;
        v64 = 0;
        if (!PBReaderPlaceMark() || !_INPBMediaItemGroupReadFrom(v20, a2))
          goto LABEL_145;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addAlternativeResults:", v20, 0, 0);
        goto LABEL_114;
      case 0x16u:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              v15 = v55++ >= 9;
              if (v15)
              {
                v61 = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v61 = 0;
        else
          v61 = v56;
LABEL_141:
        objc_msgSend(a1, "setParsecCategory:", v61, v63, v64);
        goto LABEL_115;
      default:
        if ((_DWORD)v19 == 100)
        {
          PBReaderReadString();
          v20 = (_INPBIntentMetadata *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setProxiedBundleIdentifier:", v20);
          goto LABEL_114;
        }
        if ((_DWORD)v19 != 110)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
LABEL_115:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v20 = objc_alloc_init(_INPBPrivatePlayMediaIntentData);
        if (PBReaderPlaceMark() && (_INPBPrivatePlayMediaIntentDataReadFrom(v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPrivatePlayMediaIntentData:", v20, 0, 0);
LABEL_114:

          goto LABEL_115;
        }
LABEL_145:

        return 0;
    }
  }
}

__CFString *INSendRideFeedbackIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E228E710[a1];
}

BOOL INVisualCodeTypeHasBackingType(unint64_t a1)
{
  return a1 < 7;
}

unint64_t INVisualCodeTypeGetBackingType(unint64_t result)
{
  if (result >= 7)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INVisualCodeTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 5)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INVisualCodeTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E228E730[a1 - 1];
}

uint64_t INVisualCodeTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("contact")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("requestPayment")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sendPayment")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("transit")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bus")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("subway")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INVisualCodeTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("contact");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("request payment");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("send payment");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("transit");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("bus");
      goto LABEL_9;
    case 6:
      v4 = CFSTR("subway");
LABEL_9:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t _INPBRideCompletionStatusReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBUserActivity *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t result;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBUserActivity);
        if (!PBReaderPlaceMark() || !_INPBUserActivityReadFrom(v18, a2))
          goto LABEL_113;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCompletionUserActivity:", v18, 0, 0);
        goto LABEL_79;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_83:
        objc_msgSend(a1, "setCompleted:", v21 != 0, v62, v63);
        goto LABEL_110;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_87:
        objc_msgSend(a1, "setCanceled:", v27 != 0);
        goto LABEL_110;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_91:
        objc_msgSend(a1, "setMissedPickup:", v33 != 0);
        goto LABEL_110;
      case 5u:
        v18 = objc_alloc_init(_INPBCurrencyAmountValue);
        if (!PBReaderPlaceMark() || !_INPBCurrencyAmountValueReadFrom(v18, a2))
          goto LABEL_113;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPaymentAmount:", v18, 0, 0);
        goto LABEL_79;
      case 6u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_95:
        objc_msgSend(a1, "setOutstanding:", v39 != 0);
        goto LABEL_110;
      case 7u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
LABEL_99:
        objc_msgSend(a1, "setCanceledByService:", v45 != 0);
        goto LABEL_110;
      case 8u:
        if (v16 == 2)
        {
          v62 = 0;
          v63 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v50 = 0;
            v51 = 0;
            v52 = 0;
            while (1)
            {
              v53 = *v3;
              v54 = *(_QWORD *)(a2 + v53);
              if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
                break;
              v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
              *(_QWORD *)(a2 + v53) = v54 + 1;
              v52 |= (unint64_t)(v55 & 0x7F) << v50;
              if (v55 < 0)
              {
                v50 += 7;
                v14 = v51++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_74;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          while (1)
          {
            v59 = *v3;
            v60 = *(_QWORD *)(a2 + v59);
            if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v4))
              break;
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v60 + 1;
            v58 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v14 = v57++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_109;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_109:
          PBRepeatedInt32Add();
        }
        goto LABEL_110;
      case 9u:
        v18 = objc_alloc_init(_INPBCurrencyAmountValue);
        v62 = 0;
        v63 = 0;
        if (PBReaderPlaceMark() && _INPBCurrencyAmountValueReadFrom(v18, a2))
        {
          PBReaderRecallMark();
          if (v18)
            objc_msgSend(a1, "addDefaultTippingOptions:", v18, 0, 0);
LABEL_79:

LABEL_110:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_113:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_110;
    }
  }
}

uint64_t _INPBResetTimerIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBTimer *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || !_INPBTimerReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addResetTimers:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C089D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getACXDeviceConnectionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!AppConduitLibraryCore_frameworkLibrary)
  {
    AppConduitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!AppConduitLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("ACXDeviceConnection");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getACXDeviceConnectionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _INPBMessageReactionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  _INPBSticker *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_35;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_38;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_38:
        objc_msgSend(a1, "setReactionType:", v23);
        goto LABEL_39;
      case 2u:
        PBReaderReadString();
        v25 = (_INPBSticker *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setReactionDescription:", v25);
        goto LABEL_33;
      case 3u:
        PBReaderReadString();
        v25 = (_INPBSticker *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEmoji:", v25);
        goto LABEL_33;
      case 4u:
        v25 = objc_alloc_init(_INPBSticker);
        if (PBReaderPlaceMark() && (_INPBStickerReadFrom(v25, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSticker:", v25, 0, 0);
LABEL_33:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

BOOL INMessagePlaybackStateHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

uint64_t INMessagePlaybackStateGetBackingType(unint64_t a1)
{
  if (a1 < 3)
    return (a1 + 1);
  else
    return 0x7FFFFFFFLL;
}

uint64_t INMessagePlaybackStateGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 2;
  if (a2 == 3)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INMessagePlaybackStateGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("playing");
  if (a1 == 1)
    return CFSTR("stopped");
  else
    return v1;
}

uint64_t INMessagePlaybackStateWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("stopped")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("playing")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INMessagePlaybackStateGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("playing");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("stopped");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

uint64_t _INPBCompressFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _INPBIntentMetadata *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setEntityType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v25, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPayloadUnsupportedReadFrom(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v5;
  int *v6;
  int *v7;
  int *v9;
  __objc2_class **v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __objc2_class **v100;
  id v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t result;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  uint64_t v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  char v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  char v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  uint64_t v228;
  char v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char v241;
  uint64_t v242;
  char v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char v248;
  uint64_t v249;
  char v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char v262;
  uint64_t v263;
  char v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  uint64_t v270;
  char v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char v276;
  uint64_t v277;
  char v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char v283;
  uint64_t v284;
  char v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char v290;
  uint64_t v291;
  char v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char v297;
  uint64_t v298;
  char v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char v304;
  uint64_t v305;
  char v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char v318;
  uint64_t v319;
  char v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  uint64_t v326;
  char v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char v332;
  uint64_t v333;
  char v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;

  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = off_1E2287000;
    do
    {
      if (*(_BYTE *)(a2 + *v7))
        return *(_BYTE *)(a2 + *v7) == 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *v5;
        v15 = *(_QWORD *)(a2 + v14);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v6))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v15);
        *(_QWORD *)(a2 + v14) = v15 + 1;
        v13 |= (unint64_t)(v16 & 0x7F) << v11;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v11 += 7;
        v17 = v12++ >= 9;
        if (v17)
        {
          v13 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v7);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v7) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v7);
      if (*(_BYTE *)(a2 + *v7))
        v13 = 0;
LABEL_14:
      if (v18 || (v13 & 7) == 4)
        return *(_BYTE *)(a2 + *v7) == 0;
      v20 = v13 >> 3;
      if ((int)(v13 >> 3) <= 1299)
      {
        if ((int)v20 > 1149)
        {
          switch((int)v20)
          {
            case 1200:
              v49 = 0;
              v50 = 0;
              v51 = 0;
              while (1)
              {
                v52 = *v5;
                v53 = *(_QWORD *)(a2 + v52);
                if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v6))
                  break;
                v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v53);
                *(_QWORD *)(a2 + v52) = v53 + 1;
                v51 |= (unint64_t)(v54 & 0x7F) << v49;
                if ((v54 & 0x80) == 0)
                  goto LABEL_392;
                v49 += 7;
                v17 = v50++ >= 9;
                if (v17)
                {
                  v55 = 0;
                  goto LABEL_395;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_392:
              if (*(_BYTE *)(a2 + *v7))
                v55 = 0;
              else
                v55 = v51;
LABEL_395:
              objc_msgSend(a1, "setRunWorkflowIntentWorkflowUnsupportedReason:", v55, v341, v342);
              continue;
            case 1201:
              v229 = 0;
              v230 = 0;
              v231 = 0;
              while (2)
              {
                v232 = *v5;
                v233 = *(_QWORD *)(a2 + v232);
                if (v233 == -1 || v233 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v234 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v233);
                  *(_QWORD *)(a2 + v232) = v233 + 1;
                  v231 |= (unint64_t)(v234 & 0x7F) << v229;
                  if (v234 < 0)
                  {
                    v229 += 7;
                    v17 = v230++ >= 9;
                    if (v17)
                    {
                      v235 = 0;
                      goto LABEL_505;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v235 = 0;
              else
                v235 = v231;
LABEL_505:
              objc_msgSend(a1, "setStopShareETAIntentRecipientUnsupportedReason:", v235, v341, v342);
              continue;
            case 1202:
              v236 = 0;
              v237 = 0;
              v238 = 0;
              while (2)
              {
                v239 = *v5;
                v240 = *(_QWORD *)(a2 + v239);
                if (v240 == -1 || v240 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v241 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v240);
                  *(_QWORD *)(a2 + v239) = v240 + 1;
                  v238 |= (unint64_t)(v241 & 0x7F) << v236;
                  if (v241 < 0)
                  {
                    v236 += 7;
                    v17 = v237++ >= 9;
                    if (v17)
                    {
                      v242 = 0;
                      goto LABEL_510;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v242 = 0;
              else
                v242 = v238;
LABEL_510:
              objc_msgSend(a1, "setShareETAIntentRecipientUnsupportedReason:", v242, v341, v342);
              continue;
            case 1203:
              v243 = 0;
              v244 = 0;
              v245 = 0;
              while (2)
              {
                v246 = *v5;
                v247 = *(_QWORD *)(a2 + v246);
                if (v247 == -1 || v247 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v248 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v247);
                  *(_QWORD *)(a2 + v246) = v247 + 1;
                  v245 |= (unint64_t)(v248 & 0x7F) << v243;
                  if (v248 < 0)
                  {
                    v243 += 7;
                    v17 = v244++ >= 9;
                    if (v17)
                    {
                      v249 = 0;
                      goto LABEL_515;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v249 = 0;
              else
                v249 = v245;
LABEL_515:
              objc_msgSend(a1, "setReportIncidentIntentIncidentTypeUnsupportedReason:", v249, v341, v342);
              continue;
            default:
              if ((_DWORD)v20 == 1150)
              {
                v257 = 0;
                v258 = 0;
                v259 = 0;
                while (1)
                {
                  v260 = *v5;
                  v261 = *(_QWORD *)(a2 + v260);
                  if (v261 == -1 || v261 >= *(_QWORD *)(a2 + *v6))
                    break;
                  v262 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v261);
                  *(_QWORD *)(a2 + v260) = v261 + 1;
                  v259 |= (unint64_t)(v262 & 0x7F) << v257;
                  if ((v262 & 0x80) == 0)
                    goto LABEL_522;
                  v257 += 7;
                  v17 = v258++ >= 9;
                  if (v17)
                  {
                    v263 = 0;
                    goto LABEL_525;
                  }
                }
                *(_BYTE *)(a2 + *v7) = 1;
LABEL_522:
                if (*(_BYTE *)(a2 + *v7))
                  v263 = 0;
                else
                  v263 = v259;
LABEL_525:
                objc_msgSend(a1, "setCreateTimerIntentLabelUnsupportedReason:", v263, v341, v342);
              }
              else
              {
                if ((_DWORD)v20 != 1151)
                  goto LABEL_147;
                v70 = 0;
                v71 = 0;
                v72 = 0;
                while (1)
                {
                  v73 = *v5;
                  v74 = *(_QWORD *)(a2 + v73);
                  if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v6))
                    break;
                  v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v74);
                  *(_QWORD *)(a2 + v73) = v74 + 1;
                  v72 |= (unint64_t)(v75 & 0x7F) << v70;
                  if ((v75 & 0x80) == 0)
                    goto LABEL_402;
                  v70 += 7;
                  v17 = v71++ >= 9;
                  if (v17)
                  {
                    v76 = 0;
                    goto LABEL_405;
                  }
                }
                *(_BYTE *)(a2 + *v7) = 1;
LABEL_402:
                if (*(_BYTE *)(a2 + *v7))
                  v76 = 0;
                else
                  v76 = v72;
LABEL_405:
                objc_msgSend(a1, "setSetTimerAttributeIntentTargetTimerUnsupportedReason:", v76, v341, v342);
              }
              break;
          }
          continue;
        }
        if ((int)v20 <= 1009)
        {
          switch((_DWORD)v20)
          {
            case 1:
              v91 = 0;
              v92 = 0;
              v93 = 0;
              while (1)
              {
                v94 = *v5;
                v95 = *(_QWORD *)(a2 + v94);
                if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v6))
                  break;
                v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v95);
                *(_QWORD *)(a2 + v94) = v95 + 1;
                v93 |= (unint64_t)(v96 & 0x7F) << v91;
                if ((v96 & 0x80) == 0)
                  goto LABEL_372;
                v91 += 7;
                v17 = v92++ >= 9;
                if (v17)
                {
                  v97 = 0;
                  goto LABEL_375;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_372:
              if (*(_BYTE *)(a2 + *v7))
                v97 = 0;
              else
                v97 = v93;
LABEL_375:
              objc_msgSend(a1, "setReason:", v97, v341, v342);
              break;
            case 2:
              v98 = v3;
              v99 = v2;
              v100 = v10;
              v101 = objc_alloc_init(v10[42]);
              v341 = 0;
              v342 = 0;
              if (!PBReaderPlaceMark() || !_INPBConflictingParameterReadFrom(v101, a2))
              {

                return 0;
              }
              PBReaderRecallMark();
              if (v101)
                objc_msgSend(a1, "addConflictingParameters:", v101, 0, 0);

              v10 = v100;
              v2 = v99;
              v3 = v98;
              break;
            case 0x3E8:
              v56 = 0;
              v57 = 0;
              v58 = 0;
              while (1)
              {
                v59 = *v5;
                v60 = *(_QWORD *)(a2 + v59);
                if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v6))
                  break;
                v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v60);
                *(_QWORD *)(a2 + v59) = v60 + 1;
                v58 |= (unint64_t)(v61 & 0x7F) << v56;
                if ((v61 & 0x80) == 0)
                  goto LABEL_367;
                v56 += 7;
                v17 = v57++ >= 9;
                if (v17)
                {
                  v62 = 0;
                  goto LABEL_370;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_367:
              if (*(_BYTE *)(a2 + *v7))
                v62 = 0;
              else
                v62 = v58;
LABEL_370:
              objc_msgSend(a1, "setSendMessageIntentRecipientUnsupportedReason:", v62, v341, v342);
              break;
            default:
              goto LABEL_147;
          }
        }
        else
        {
          switch((int)v20)
          {
            case 1100:
              v28 = 0;
              v29 = 0;
              v30 = 0;
              while (1)
              {
                v31 = *v5;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v6))
                  break;
                v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v32);
                *(_QWORD *)(a2 + v31) = v32 + 1;
                v30 |= (unint64_t)(v33 & 0x7F) << v28;
                if ((v33 & 0x80) == 0)
                  goto LABEL_537;
                v28 += 7;
                v17 = v29++ >= 9;
                if (v17)
                {
                  v34 = 0;
                  goto LABEL_540;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_537:
              if (*(_BYTE *)(a2 + *v7))
                v34 = 0;
              else
                v34 = v30;
LABEL_540:
              objc_msgSend(a1, "setSendPaymentIntentPayeeUnsupportedReason:", v34, v341, v342);
              break;
            case 1101:
              v278 = 0;
              v279 = 0;
              v280 = 0;
              while (1)
              {
                v281 = *v5;
                v282 = *(_QWORD *)(a2 + v281);
                if (v282 == -1 || v282 >= *(_QWORD *)(a2 + *v6))
                  break;
                v283 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v282);
                *(_QWORD *)(a2 + v281) = v282 + 1;
                v280 |= (unint64_t)(v283 & 0x7F) << v278;
                if ((v283 & 0x80) == 0)
                  goto LABEL_547;
                v278 += 7;
                v17 = v279++ >= 9;
                if (v17)
                {
                  v284 = 0;
                  goto LABEL_550;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_547:
              if (*(_BYTE *)(a2 + *v7))
                v284 = 0;
              else
                v284 = v280;
LABEL_550:
              objc_msgSend(a1, "setSendPaymentIntentCurrencyAmountUnsupportedReason:", v284, v341, v342);
              break;
            case 1102:
              v285 = 0;
              v286 = 0;
              v287 = 0;
              while (1)
              {
                v288 = *v5;
                v289 = *(_QWORD *)(a2 + v288);
                if (v289 == -1 || v289 >= *(_QWORD *)(a2 + *v6))
                  break;
                v290 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v289);
                *(_QWORD *)(a2 + v288) = v289 + 1;
                v287 |= (unint64_t)(v290 & 0x7F) << v285;
                if ((v290 & 0x80) == 0)
                  goto LABEL_552;
                v285 += 7;
                v17 = v286++ >= 9;
                if (v17)
                {
                  v291 = 0;
                  goto LABEL_555;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_552:
              if (*(_BYTE *)(a2 + *v7))
                v291 = 0;
              else
                v291 = v287;
LABEL_555:
              objc_msgSend(a1, "setRequestPaymentIntentPayerUnsupportedReason:", v291, v341, v342);
              break;
            case 1103:
              v292 = 0;
              v293 = 0;
              v294 = 0;
              while (1)
              {
                v295 = *v5;
                v296 = *(_QWORD *)(a2 + v295);
                if (v296 == -1 || v296 >= *(_QWORD *)(a2 + *v6))
                  break;
                v297 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v296);
                *(_QWORD *)(a2 + v295) = v296 + 1;
                v294 |= (unint64_t)(v297 & 0x7F) << v292;
                if ((v297 & 0x80) == 0)
                  goto LABEL_557;
                v292 += 7;
                v17 = v293++ >= 9;
                if (v17)
                {
                  v298 = 0;
                  goto LABEL_560;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_557:
              if (*(_BYTE *)(a2 + *v7))
                v298 = 0;
              else
                v298 = v294;
LABEL_560:
              objc_msgSend(a1, "setRequestPaymentIntentCurrencyAmountUnsupportedReason:", v298, v341, v342);
              break;
            case 1104:
              v299 = 0;
              v300 = 0;
              v301 = 0;
              while (1)
              {
                v302 = *v5;
                v303 = *(_QWORD *)(a2 + v302);
                if (v303 == -1 || v303 >= *(_QWORD *)(a2 + *v6))
                  break;
                v304 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v303);
                *(_QWORD *)(a2 + v302) = v303 + 1;
                v301 |= (unint64_t)(v304 & 0x7F) << v299;
                if ((v304 & 0x80) == 0)
                  goto LABEL_562;
                v299 += 7;
                v17 = v300++ >= 9;
                if (v17)
                {
                  v305 = 0;
                  goto LABEL_565;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_562:
              if (*(_BYTE *)(a2 + *v7))
                v305 = 0;
              else
                v305 = v301;
LABEL_565:
              objc_msgSend(a1, "setPlayMediaIntentMediaItemsUnsupportedReason:", v305, v341, v342);
              break;
            case 1105:
              v306 = 0;
              v307 = 0;
              v308 = 0;
              while (1)
              {
                v309 = *v5;
                v310 = *(_QWORD *)(a2 + v309);
                if (v310 == -1 || v310 >= *(_QWORD *)(a2 + *v6))
                  break;
                v311 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v310);
                *(_QWORD *)(a2 + v309) = v310 + 1;
                v308 |= (unint64_t)(v311 & 0x7F) << v306;
                if ((v311 & 0x80) == 0)
                  goto LABEL_567;
                v306 += 7;
                v17 = v307++ >= 9;
                if (v17)
                {
                  v312 = 0;
                  goto LABEL_570;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_567:
              if (*(_BYTE *)(a2 + *v7))
                v312 = 0;
              else
                v312 = v308;
LABEL_570:
              objc_msgSend(a1, "setPlayMediaIntentPlaybackSpeedUnsupportedReason:", v312, v341, v342);
              break;
            case 1106:
              v313 = 0;
              v314 = 0;
              v315 = 0;
              while (1)
              {
                v316 = *v5;
                v317 = *(_QWORD *)(a2 + v316);
                if (v317 == -1 || v317 >= *(_QWORD *)(a2 + *v6))
                  break;
                v318 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v317);
                *(_QWORD *)(a2 + v316) = v317 + 1;
                v315 |= (unint64_t)(v318 & 0x7F) << v313;
                if ((v318 & 0x80) == 0)
                  goto LABEL_572;
                v313 += 7;
                v17 = v314++ >= 9;
                if (v17)
                {
                  v319 = 0;
                  goto LABEL_575;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_572:
              if (*(_BYTE *)(a2 + *v7))
                v319 = 0;
              else
                v319 = v315;
LABEL_575:
              objc_msgSend(a1, "setSearchForMediaIntentMediaItemsUnsupportedReason:", v319, v341, v342);
              break;
            case 1107:
              v320 = 0;
              v321 = 0;
              v322 = 0;
              while (1)
              {
                v323 = *v5;
                v324 = *(_QWORD *)(a2 + v323);
                if (v324 == -1 || v324 >= *(_QWORD *)(a2 + *v6))
                  break;
                v325 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v324);
                *(_QWORD *)(a2 + v323) = v324 + 1;
                v322 |= (unint64_t)(v325 & 0x7F) << v320;
                if ((v325 & 0x80) == 0)
                  goto LABEL_577;
                v320 += 7;
                v17 = v321++ >= 9;
                if (v17)
                {
                  v326 = 0;
                  goto LABEL_580;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_577:
              if (*(_BYTE *)(a2 + *v7))
                v326 = 0;
              else
                v326 = v322;
LABEL_580:
              objc_msgSend(a1, "setAddMediaIntentMediaItemsUnsupportedReason:", v326, v341, v342);
              break;
            case 1108:
              v327 = 0;
              v328 = 0;
              v329 = 0;
              while (1)
              {
                v330 = *v5;
                v331 = *(_QWORD *)(a2 + v330);
                if (v331 == -1 || v331 >= *(_QWORD *)(a2 + *v6))
                  break;
                v332 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v331);
                *(_QWORD *)(a2 + v330) = v331 + 1;
                v329 |= (unint64_t)(v332 & 0x7F) << v327;
                if ((v332 & 0x80) == 0)
                  goto LABEL_582;
                v327 += 7;
                v17 = v328++ >= 9;
                if (v17)
                {
                  v333 = 0;
                  goto LABEL_585;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_582:
              if (*(_BYTE *)(a2 + *v7))
                v333 = 0;
              else
                v333 = v329;
LABEL_585:
              objc_msgSend(a1, "setAddMediaIntentMediaDestinationUnsupportedReason:", v333, v341, v342);
              break;
            case 1109:
              v334 = 0;
              v335 = 0;
              v336 = 0;
              while (1)
              {
                v337 = *v5;
                v338 = *(_QWORD *)(a2 + v337);
                if (v338 == -1 || v338 >= *(_QWORD *)(a2 + *v6))
                  break;
                v339 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v338);
                *(_QWORD *)(a2 + v337) = v338 + 1;
                v336 |= (unint64_t)(v339 & 0x7F) << v334;
                if ((v339 & 0x80) == 0)
                  goto LABEL_587;
                v334 += 7;
                v17 = v335++ >= 9;
                if (v17)
                {
                  v340 = 0;
                  goto LABEL_590;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_587:
              if (*(_BYTE *)(a2 + *v7))
                v340 = 0;
              else
                v340 = v336;
LABEL_590:
              objc_msgSend(a1, "setUpdateMediaAffinityIntentMediaItemsUnsupportedReason:", v340, v341, v342);
              break;
            default:
              if ((_DWORD)v20 != 1010)
                goto LABEL_147;
              v116 = 0;
              v117 = 0;
              v118 = 0;
              while (1)
              {
                v119 = *v5;
                v120 = *(_QWORD *)(a2 + v119);
                if (v120 == -1 || v120 >= *(_QWORD *)(a2 + *v6))
                  break;
                v121 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v120);
                *(_QWORD *)(a2 + v119) = v120 + 1;
                v118 |= (unint64_t)(v121 & 0x7F) << v116;
                if ((v121 & 0x80) == 0)
                  goto LABEL_542;
                v116 += 7;
                v17 = v117++ >= 9;
                if (v17)
                {
                  v122 = 0;
                  goto LABEL_545;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_542:
              if (*(_BYTE *)(a2 + *v7))
                v122 = 0;
              else
                v122 = v118;
LABEL_545:
              objc_msgSend(a1, "setSaveHealthSampleIntentRecordDateUnsupportedReason:", v122, v341, v342);
              break;
          }
        }
      }
      else if ((int)v20 <= 1550)
      {
        if ((int)v20 > 1399)
        {
          if ((int)v20 > 1401)
          {
            if ((_DWORD)v20 == 1402)
            {
              v271 = 0;
              v272 = 0;
              v273 = 0;
              while (1)
              {
                v274 = *v5;
                v275 = *(_QWORD *)(a2 + v274);
                if (v275 == -1 || v275 >= *(_QWORD *)(a2 + *v6))
                  break;
                v276 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v275);
                *(_QWORD *)(a2 + v274) = v275 + 1;
                v273 |= (unint64_t)(v276 & 0x7F) << v271;
                if ((v276 & 0x80) == 0)
                  goto LABEL_532;
                v271 += 7;
                v17 = v272++ >= 9;
                if (v17)
                {
                  v277 = 0;
                  goto LABEL_535;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_532:
              if (*(_BYTE *)(a2 + *v7))
                v277 = 0;
              else
                v277 = v273;
LABEL_535:
              objc_msgSend(a1, "setTargetEventUnsupportedReason:", v277, v341, v342);
            }
            else
            {
              if ((_DWORD)v20 != 1500)
              {
LABEL_147:
                result = PBReaderSkipValueWithTag();
                if (!(_DWORD)result)
                  return result;
                continue;
              }
              v84 = 0;
              v85 = 0;
              v86 = 0;
              while (1)
              {
                v87 = *v5;
                v88 = *(_QWORD *)(a2 + v87);
                if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v6))
                  break;
                v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v88);
                *(_QWORD *)(a2 + v87) = v88 + 1;
                v86 |= (unint64_t)(v89 & 0x7F) << v84;
                if ((v89 & 0x80) == 0)
                  goto LABEL_412;
                v84 += 7;
                v17 = v85++ >= 9;
                if (v17)
                {
                  v90 = 0;
                  goto LABEL_415;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_412:
              if (*(_BYTE *)(a2 + *v7))
                v90 = 0;
              else
                v90 = v86;
LABEL_415:
              objc_msgSend(a1, "setSnoozeTasksIntentTaskUnsupportedReason:", v90, v341, v342);
            }
          }
          else if ((_DWORD)v20 == 1400)
          {
            v250 = 0;
            v251 = 0;
            v252 = 0;
            while (1)
            {
              v253 = *v5;
              v254 = *(_QWORD *)(a2 + v253);
              if (v254 == -1 || v254 >= *(_QWORD *)(a2 + *v6))
                break;
              v255 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v254);
              *(_QWORD *)(a2 + v253) = v254 + 1;
              v252 |= (unint64_t)(v255 & 0x7F) << v250;
              if ((v255 & 0x80) == 0)
                goto LABEL_517;
              v250 += 7;
              v17 = v251++ >= 9;
              if (v17)
              {
                v256 = 0;
                goto LABEL_520;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_517:
            if (*(_BYTE *)(a2 + *v7))
              v256 = 0;
            else
              v256 = v252;
LABEL_520:
            objc_msgSend(a1, "setDateTimeRangeUnsupportedReason:", v256, v341, v342);
          }
          else
          {
            v63 = 0;
            v64 = 0;
            v65 = 0;
            while (1)
            {
              v66 = *v5;
              v67 = *(_QWORD *)(a2 + v66);
              if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v6))
                break;
              v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v67);
              *(_QWORD *)(a2 + v66) = v67 + 1;
              v65 |= (unint64_t)(v68 & 0x7F) << v63;
              if ((v68 & 0x80) == 0)
                goto LABEL_397;
              v63 += 7;
              v17 = v64++ >= 9;
              if (v17)
              {
                v69 = 0;
                goto LABEL_400;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_397:
            if (*(_BYTE *)(a2 + *v7))
              v69 = 0;
            else
              v69 = v65;
LABEL_400:
            objc_msgSend(a1, "setParticipantUnsupportedReason:", v69, v341, v342);
          }
        }
        else
        {
          switch((int)v20)
          {
            case 1300:
              v35 = 0;
              v36 = 0;
              v37 = 0;
              while (2)
              {
                v38 = *v5;
                v39 = *(_QWORD *)(a2 + v38);
                if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v39);
                  *(_QWORD *)(a2 + v38) = v39 + 1;
                  v37 |= (unint64_t)(v40 & 0x7F) << v35;
                  if (v40 < 0)
                  {
                    v35 += 7;
                    v17 = v36++ >= 9;
                    if (v17)
                    {
                      v41 = 0;
                      goto LABEL_385;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v41 = 0;
              else
                v41 = v37;
LABEL_385:
              objc_msgSend(a1, "setStartCallIntentContactsUnsupportedReason:", v41, v341, v342);
              continue;
            case 1301:
              v166 = 0;
              v167 = 0;
              v168 = 0;
              while (2)
              {
                v169 = *v5;
                v170 = *(_QWORD *)(a2 + v169);
                if (v170 == -1 || v170 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v171 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v170);
                  *(_QWORD *)(a2 + v169) = v170 + 1;
                  v168 |= (unint64_t)(v171 & 0x7F) << v166;
                  if (v171 < 0)
                  {
                    v166 += 7;
                    v17 = v167++ >= 9;
                    if (v17)
                    {
                      v172 = 0;
                      goto LABEL_460;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v172 = 0;
              else
                v172 = v168;
LABEL_460:
              objc_msgSend(a1, "setStartCallIntentCallCapabilityUnsupportedReason:", v172, v341, v342);
              continue;
            case 1302:
              v173 = 0;
              v174 = 0;
              v175 = 0;
              while (2)
              {
                v176 = *v5;
                v177 = *(_QWORD *)(a2 + v176);
                if (v177 == -1 || v177 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v178 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v177);
                  *(_QWORD *)(a2 + v176) = v177 + 1;
                  v175 |= (unint64_t)(v178 & 0x7F) << v173;
                  if (v178 < 0)
                  {
                    v173 += 7;
                    v17 = v174++ >= 9;
                    if (v17)
                    {
                      v179 = 0;
                      goto LABEL_465;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v179 = 0;
              else
                v179 = v175;
LABEL_465:
              objc_msgSend(a1, "setStartCallIntentPreferredCallProviderUnsupportedReason:", v179, v341, v342);
              continue;
            case 1303:
              v180 = 0;
              v181 = 0;
              v182 = 0;
              while (2)
              {
                v183 = *v5;
                v184 = *(_QWORD *)(a2 + v183);
                if (v184 == -1 || v184 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v185 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v184);
                  *(_QWORD *)(a2 + v183) = v184 + 1;
                  v182 |= (unint64_t)(v185 & 0x7F) << v180;
                  if (v185 < 0)
                  {
                    v180 += 7;
                    v17 = v181++ >= 9;
                    if (v17)
                    {
                      v186 = 0;
                      goto LABEL_470;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v186 = 0;
              else
                v186 = v182;
LABEL_470:
              objc_msgSend(a1, "setStartCallIntentCallRecordToCallBackUnsupportedReason:", v186, v341, v342);
              continue;
            case 1304:
              v187 = 0;
              v188 = 0;
              v189 = 0;
              while (2)
              {
                v190 = *v5;
                v191 = *(_QWORD *)(a2 + v190);
                if (v191 == -1 || v191 >= *(_QWORD *)(a2 + *v6))
                {
                  *(_BYTE *)(a2 + *v7) = 1;
                }
                else
                {
                  v192 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v191);
                  *(_QWORD *)(a2 + v190) = v191 + 1;
                  v189 |= (unint64_t)(v192 & 0x7F) << v187;
                  if (v192 < 0)
                  {
                    v187 += 7;
                    v17 = v188++ >= 9;
                    if (v17)
                    {
                      v193 = 0;
                      goto LABEL_475;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v7))
                v193 = 0;
              else
                v193 = v189;
LABEL_475:
              objc_msgSend(a1, "setJoinCallIntentGroupConversationUnsupportedReason:", v193, v341, v342);
              continue;
            case 1305:
              v194 = 0;
              v195 = 0;
              v196 = 0;
              break;
            default:
              goto LABEL_147;
          }
          while (1)
          {
            v197 = *v5;
            v198 = *(_QWORD *)(a2 + v197);
            if (v198 == -1 || v198 >= *(_QWORD *)(a2 + *v6))
              break;
            v199 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v198);
            *(_QWORD *)(a2 + v197) = v198 + 1;
            v196 |= (unint64_t)(v199 & 0x7F) << v194;
            if ((v199 & 0x80) == 0)
              goto LABEL_477;
            v194 += 7;
            v17 = v195++ >= 9;
            if (v17)
            {
              v200 = 0;
              goto LABEL_480;
            }
          }
          *(_BYTE *)(a2 + *v7) = 1;
LABEL_477:
          if (*(_BYTE *)(a2 + *v7))
            v200 = 0;
          else
            v200 = v196;
LABEL_480:
          objc_msgSend(a1, "setAddCallParticipantIntentParticipantsUnsupportedReason:", v200, v341, v342);
        }
      }
      else if ((int)v20 > 1600)
      {
        if ((int)v20 > 1649)
        {
          if ((_DWORD)v20 == 1650)
          {
            v264 = 0;
            v265 = 0;
            v266 = 0;
            while (1)
            {
              v267 = *v5;
              v268 = *(_QWORD *)(a2 + v267);
              if (v268 == -1 || v268 >= *(_QWORD *)(a2 + *v6))
                break;
              v269 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v268);
              *(_QWORD *)(a2 + v267) = v268 + 1;
              v266 |= (unint64_t)(v269 & 0x7F) << v264;
              if ((v269 & 0x80) == 0)
                goto LABEL_527;
              v264 += 7;
              v17 = v265++ >= 9;
              if (v17)
              {
                v270 = 0;
                goto LABEL_530;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_527:
            if (*(_BYTE *)(a2 + *v7))
              v270 = 0;
            else
              v270 = v266;
LABEL_530:
            objc_msgSend(a1, "setFindDeviceAndPlaySoundIntentDeviceUnsupportedReason:", v270, v341, v342);
          }
          else
          {
            if ((_DWORD)v20 != 2000)
              goto LABEL_147;
            v77 = 0;
            v78 = 0;
            v79 = 0;
            while (1)
            {
              v80 = *v5;
              v81 = *(_QWORD *)(a2 + v80);
              if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v6))
                break;
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v81);
              *(_QWORD *)(a2 + v80) = v81 + 1;
              v79 |= (unint64_t)(v82 & 0x7F) << v77;
              if ((v82 & 0x80) == 0)
                goto LABEL_407;
              v77 += 7;
              v17 = v78++ >= 9;
              if (v17)
              {
                v83 = 0;
                goto LABEL_410;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_407:
            if (*(_BYTE *)(a2 + *v7))
              v83 = 0;
            else
              v83 = v79;
LABEL_410:
            objc_msgSend(a1, "setCustomUnsupportedReason:", v83, v341, v342);
          }
        }
        else
        {
          switch((int)v20)
          {
            case 1621:
              v42 = 0;
              v43 = 0;
              v44 = 0;
              while (1)
              {
                v45 = *v5;
                v46 = *(_QWORD *)(a2 + v45);
                if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v6))
                  break;
                v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
                *(_QWORD *)(a2 + v45) = v46 + 1;
                v44 |= (unint64_t)(v47 & 0x7F) << v42;
                if ((v47 & 0x80) == 0)
                  goto LABEL_387;
                v42 += 7;
                v17 = v43++ >= 9;
                if (v17)
                {
                  v48 = 0;
                  goto LABEL_390;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_387:
              if (*(_BYTE *)(a2 + *v7))
                v48 = 0;
              else
                v48 = v44;
LABEL_390:
              objc_msgSend(a1, "setChangeAlarmStatusIntentAlarmsUnsupportedReason:", v48, v341, v342);
              break;
            case 1622:
              v201 = 0;
              v202 = 0;
              v203 = 0;
              while (1)
              {
                v204 = *v5;
                v205 = *(_QWORD *)(a2 + v204);
                if (v205 == -1 || v205 >= *(_QWORD *)(a2 + *v6))
                  break;
                v206 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v205);
                *(_QWORD *)(a2 + v204) = v205 + 1;
                v203 |= (unint64_t)(v206 & 0x7F) << v201;
                if ((v206 & 0x80) == 0)
                  goto LABEL_482;
                v201 += 7;
                v17 = v202++ >= 9;
                if (v17)
                {
                  v207 = 0;
                  goto LABEL_485;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_482:
              if (*(_BYTE *)(a2 + *v7))
                v207 = 0;
              else
                v207 = v203;
LABEL_485:
              objc_msgSend(a1, "setUpdateAlarmIntentAlarmUnsupportedReason:", v207, v341, v342);
              break;
            case 1623:
              v208 = 0;
              v209 = 0;
              v210 = 0;
              while (1)
              {
                v211 = *v5;
                v212 = *(_QWORD *)(a2 + v211);
                if (v212 == -1 || v212 >= *(_QWORD *)(a2 + *v6))
                  break;
                v213 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v212);
                *(_QWORD *)(a2 + v211) = v212 + 1;
                v210 |= (unint64_t)(v213 & 0x7F) << v208;
                if ((v213 & 0x80) == 0)
                  goto LABEL_487;
                v208 += 7;
                v17 = v209++ >= 9;
                if (v17)
                {
                  v214 = 0;
                  goto LABEL_490;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_487:
              if (*(_BYTE *)(a2 + *v7))
                v214 = 0;
              else
                v214 = v210;
LABEL_490:
              objc_msgSend(a1, "setDeleteAlarmIntentAlarmsUnsupportedReason:", v214, v341, v342);
              break;
            case 1624:
              v215 = 0;
              v216 = 0;
              v217 = 0;
              while (1)
              {
                v218 = *v5;
                v219 = *(_QWORD *)(a2 + v218);
                if (v219 == -1 || v219 >= *(_QWORD *)(a2 + *v6))
                  break;
                v220 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v219);
                *(_QWORD *)(a2 + v218) = v219 + 1;
                v217 |= (unint64_t)(v220 & 0x7F) << v215;
                if ((v220 & 0x80) == 0)
                  goto LABEL_492;
                v215 += 7;
                v17 = v216++ >= 9;
                if (v17)
                {
                  v221 = 0;
                  goto LABEL_495;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_492:
              if (*(_BYTE *)(a2 + *v7))
                v221 = 0;
              else
                v221 = v217;
LABEL_495:
              objc_msgSend(a1, "setSnoozeAlarmIntentAlarmsUnsupportedReason:", v221, v341, v342);
              break;
            case 1625:
              v222 = 0;
              v223 = 0;
              v224 = 0;
              while (1)
              {
                v225 = *v5;
                v226 = *(_QWORD *)(a2 + v225);
                if (v226 == -1 || v226 >= *(_QWORD *)(a2 + *v6))
                  break;
                v227 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v226);
                *(_QWORD *)(a2 + v225) = v226 + 1;
                v224 |= (unint64_t)(v227 & 0x7F) << v222;
                if ((v227 & 0x80) == 0)
                  goto LABEL_497;
                v222 += 7;
                v17 = v223++ >= 9;
                if (v17)
                {
                  v228 = 0;
                  goto LABEL_500;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_497:
              if (*(_BYTE *)(a2 + *v7))
                v228 = 0;
              else
                v228 = v224;
LABEL_500:
              objc_msgSend(a1, "setSearchAlarmIntentAlarmsUnsupportedReason:", v228, v341, v342);
              break;
            default:
              if ((_DWORD)v20 != 1601)
                goto LABEL_147;
              v109 = 0;
              v110 = 0;
              v111 = 0;
              while (1)
              {
                v112 = *v5;
                v113 = *(_QWORD *)(a2 + v112);
                if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v6))
                  break;
                v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v113);
                *(_QWORD *)(a2 + v112) = v113 + 1;
                v111 |= (unint64_t)(v114 & 0x7F) << v109;
                if ((v114 & 0x80) == 0)
                  goto LABEL_422;
                v109 += 7;
                v17 = v110++ >= 9;
                if (v17)
                {
                  v115 = 0;
                  goto LABEL_425;
                }
              }
              *(_BYTE *)(a2 + *v7) = 1;
LABEL_422:
              if (*(_BYTE *)(a2 + *v7))
                v115 = 0;
              else
                v115 = v111;
LABEL_425:
              objc_msgSend(a1, "setSendAnnouncementIntentAnnouncementUnsupportedReason:", v115, v341, v342);
              break;
          }
        }
      }
      else
      {
        switch((int)v20)
        {
          case 1551:
            v21 = 0;
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = *v5;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v6))
                break;
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if ((v26 & 0x80) == 0)
                goto LABEL_377;
              v21 += 7;
              v17 = v22++ >= 9;
              if (v17)
              {
                v27 = 0;
                goto LABEL_380;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_377:
            if (*(_BYTE *)(a2 + *v7))
              v27 = 0;
            else
              v27 = v23;
LABEL_380:
            objc_msgSend(a1, "setDeleteTasksIntentTaskUnsupportedReason:", v27, v341, v342);
            break;
          case 1552:
            v124 = 0;
            v125 = 0;
            v126 = 0;
            while (1)
            {
              v127 = *v5;
              v128 = *(_QWORD *)(a2 + v127);
              if (v128 == -1 || v128 >= *(_QWORD *)(a2 + *v6))
                break;
              v129 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v128);
              *(_QWORD *)(a2 + v127) = v128 + 1;
              v126 |= (unint64_t)(v129 & 0x7F) << v124;
              if ((v129 & 0x80) == 0)
                goto LABEL_427;
              v124 += 7;
              v17 = v125++ >= 9;
              if (v17)
              {
                v130 = 0;
                goto LABEL_430;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_427:
            if (*(_BYTE *)(a2 + *v7))
              v130 = 0;
            else
              v130 = v126;
LABEL_430:
            objc_msgSend(a1, "setDeleteTasksIntentTaskListUnsupportedReason:", v130, v341, v342);
            break;
          case 1553:
            v131 = 0;
            v132 = 0;
            v133 = 0;
            while (1)
            {
              v134 = *v5;
              v135 = *(_QWORD *)(a2 + v134);
              if (v135 == -1 || v135 >= *(_QWORD *)(a2 + *v6))
                break;
              v136 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v135);
              *(_QWORD *)(a2 + v134) = v135 + 1;
              v133 |= (unint64_t)(v136 & 0x7F) << v131;
              if ((v136 & 0x80) == 0)
                goto LABEL_432;
              v131 += 7;
              v17 = v132++ >= 9;
              if (v17)
              {
                v137 = 0;
                goto LABEL_435;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_432:
            if (*(_BYTE *)(a2 + *v7))
              v137 = 0;
            else
              v137 = v133;
LABEL_435:
            objc_msgSend(a1, "setAddTasksIntentTemporalEventTriggerUnsupportedReason:", v137, v341, v342);
            break;
          case 1554:
            v138 = 0;
            v139 = 0;
            v140 = 0;
            while (1)
            {
              v141 = *v5;
              v142 = *(_QWORD *)(a2 + v141);
              if (v142 == -1 || v142 >= *(_QWORD *)(a2 + *v6))
                break;
              v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v142);
              *(_QWORD *)(a2 + v141) = v142 + 1;
              v140 |= (unint64_t)(v143 & 0x7F) << v138;
              if ((v143 & 0x80) == 0)
                goto LABEL_437;
              v138 += 7;
              v17 = v139++ >= 9;
              if (v17)
              {
                v144 = 0;
                goto LABEL_440;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_437:
            if (*(_BYTE *)(a2 + *v7))
              v144 = 0;
            else
              v144 = v140;
LABEL_440:
            objc_msgSend(a1, "setAddTasksIntentContactEventTriggerUnsupportedReason:", v144, v341, v342);
            break;
          case 1555:
            v145 = 0;
            v146 = 0;
            v147 = 0;
            while (1)
            {
              v148 = *v5;
              v149 = *(_QWORD *)(a2 + v148);
              if (v149 == -1 || v149 >= *(_QWORD *)(a2 + *v6))
                break;
              v150 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v149);
              *(_QWORD *)(a2 + v148) = v149 + 1;
              v147 |= (unint64_t)(v150 & 0x7F) << v145;
              if ((v150 & 0x80) == 0)
                goto LABEL_442;
              v145 += 7;
              v17 = v146++ >= 9;
              if (v17)
              {
                v151 = 0;
                goto LABEL_445;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_442:
            if (*(_BYTE *)(a2 + *v7))
              v151 = 0;
            else
              v151 = v147;
LABEL_445:
            objc_msgSend(a1, "setAddTasksIntentTargetTaskListMembersUnsupportedReason:", v151, v341, v342);
            break;
          case 1556:
            v152 = 0;
            v153 = 0;
            v154 = 0;
            while (1)
            {
              v155 = *v5;
              v156 = *(_QWORD *)(a2 + v155);
              if (v156 == -1 || v156 >= *(_QWORD *)(a2 + *v6))
                break;
              v157 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v156);
              *(_QWORD *)(a2 + v155) = v156 + 1;
              v154 |= (unint64_t)(v157 & 0x7F) << v152;
              if ((v157 & 0x80) == 0)
                goto LABEL_447;
              v152 += 7;
              v17 = v153++ >= 9;
              if (v17)
              {
                v158 = 0;
                goto LABEL_450;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_447:
            if (*(_BYTE *)(a2 + *v7))
              v158 = 0;
            else
              v158 = v154;
LABEL_450:
            objc_msgSend(a1, "setSetTaskAttributeIntentTemporalEventTriggerUnsupportedReason:", v158, v341, v342);
            break;
          case 1557:
            v159 = 0;
            v160 = 0;
            v161 = 0;
            while (1)
            {
              v162 = *v5;
              v163 = *(_QWORD *)(a2 + v162);
              if (v163 == -1 || v163 >= *(_QWORD *)(a2 + *v6))
                break;
              v164 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v163);
              *(_QWORD *)(a2 + v162) = v163 + 1;
              v161 |= (unint64_t)(v164 & 0x7F) << v159;
              if ((v164 & 0x80) == 0)
                goto LABEL_452;
              v159 += 7;
              v17 = v160++ >= 9;
              if (v17)
              {
                v165 = 0;
                goto LABEL_455;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_452:
            if (*(_BYTE *)(a2 + *v7))
              v165 = 0;
            else
              v165 = v161;
LABEL_455:
            objc_msgSend(a1, "setSetTaskAttributeIntentContactEventTriggerUnsupportedReason:", v165, v341, v342);
            break;
          default:
            if ((_DWORD)v20 != 1600)
              goto LABEL_147;
            v102 = 0;
            v103 = 0;
            v104 = 0;
            while (1)
            {
              v105 = *v5;
              v106 = *(_QWORD *)(a2 + v105);
              if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v6))
                break;
              v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v106);
              *(_QWORD *)(a2 + v105) = v106 + 1;
              v104 |= (unint64_t)(v107 & 0x7F) << v102;
              if ((v107 & 0x80) == 0)
                goto LABEL_417;
              v102 += 7;
              v17 = v103++ >= 9;
              if (v17)
              {
                v108 = 0;
                goto LABEL_420;
              }
            }
            *(_BYTE *)(a2 + *v7) = 1;
LABEL_417:
            if (*(_BYTE *)(a2 + *v7))
              v108 = 0;
            else
              v108 = v104;
LABEL_420:
            objc_msgSend(a1, "setSendAnnouncementIntentRecipientsUnsupportedReason:", v108, v341, v342);
            break;
        }
      }
    }
    while (*(_QWORD *)(a2 + *v5) < *(_QWORD *)(a2 + *v6));
  }
  return *(_BYTE *)(a2 + *v7) == 0;
}

uint64_t INCarDefrosterHasBackingType(unint64_t a1)
{
  return (a1 < 4) & (0xEu >> (a1 & 0xF));
}

uint64_t INCarDefrosterGetBackingType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return result;
  else
    return 0x7FFFFFFFLL;
}

uint64_t INCarDefrosterGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 2)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INCarDefrosterGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E228EAC8[a1 - 1];
}

uint64_t INCarDefrosterWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("front")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rear")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("all")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCarDefrosterGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 3:
      v4 = CFSTR("all");
      break;
    case 2:
      v4 = CFSTR("rear");
      break;
    case 1:
      v4 = CFSTR("front");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

uint64_t _INPBTemporalEventTriggerReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBDateTimeRangeValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBDateTimeRangeValue);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeValueReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateTime:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBActivityReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBString *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addActivityDescriptors:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBString);
    if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setActivityType:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBAppNamesReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAppName:", v17);
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setDisplayName:", v17);
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSpotlightName:", v17);
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAxSpokenName:", v17);
LABEL_25:

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18C099914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18C09A33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18C09A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18C09A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__62826(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__62827(uint64_t a1)
{

}

id _INSchemasByIdentifierWithSchemaURLsByIdentifier(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  void *v21;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = (void *)objc_opt_new();
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v23 = v1;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v33 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * i);
          objc_msgSend(v3, "objectForKeyedSubscript:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v31 = 0u;
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
          if (v10)
          {
            v11 = v10;
            v12 = *(_QWORD *)v29;
            do
            {
              for (j = 0; j != v11; ++j)
              {
                if (*(_QWORD *)v29 != v12)
                  objc_enumerationMutation(v9);
                objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * j), "startAccessingSecurityScopedResource");
              }
              v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
            }
            while (v11);
          }
          if (objc_msgSend(v9, "count"))
          {
            objc_msgSend(v9, "allObjects");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            +[INSchema _schemaWithIntentDefinitionURLs:bundleIdentifier:mainBundleIdentifier:contentOptions:](INSchema, "_schemaWithIntentDefinitionURLs:bundleIdentifier:mainBundleIdentifier:contentOptions:", v14, v8, v8, 31);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, v8);

          }
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v16 = v9;
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v25;
            do
            {
              for (k = 0; k != v18; ++k)
              {
                if (*(_QWORD *)v25 != v19)
                  objc_enumerationMutation(v16);
                objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * k), "stopAccessingSecurityScopedResource");
              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
            }
            while (v18);
          }

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      }
      while (v5);
    }

    if (objc_msgSend(v2, "count"))
      v21 = (void *)objc_msgSend(v2, "copy");
    else
      v21 = 0;

    v1 = v23;
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

uint64_t _INPBMoveFileIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  _INPBString *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_60;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_62;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_62:
        objc_msgSend(a1, "setOverwrite:", v20 != 0);
        goto LABEL_77;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_66:
        objc_msgSend(a1, "setSuccess:", v26 != 0, v44, v45);
        goto LABEL_77;
      case 3u:
        if (v16 == 2)
        {
          v44 = 0;
          v45 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            while (1)
            {
              v34 = *v3;
              v35 = *(_QWORD *)(a2 + v34);
              if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
                break;
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_47;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (1)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
              break;
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_76;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
        goto LABEL_77;
      case 4u:
        v37 = objc_alloc_init(_INPBString);
        v44 = 0;
        v45 = 0;
        if (!PBReaderPlaceMark() || !_INPBStringReadFrom(v37, a2))
          goto LABEL_80;
        PBReaderRecallMark();
        if (v37)
          objc_msgSend(a1, "addEntityName:", v37, 0, 0);
        goto LABEL_58;
      case 5u:
        v37 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v37, a2) & 1) == 0)
          goto LABEL_80;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSourceName:", v37, 0, 0);
        goto LABEL_58;
      case 6u:
        v37 = objc_alloc_init(_INPBString);
        if (PBReaderPlaceMark() && (_INPBStringReadFrom(v37, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setDestinationName:", v37, 0, 0);
LABEL_58:

LABEL_77:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_80:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_77;
    }
  }
}

INPaymentRecord *INIntentSlotValueTransformFromPaymentRecord(void *a1)
{
  id v1;
  INPaymentRecord *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  INPaymentRecord *v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a1)
  {
    v1 = a1;
    v2 = [INPaymentRecord alloc];
    objc_msgSend(v1, "payee");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContact(v20);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "payer");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromContact(v19);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "currencyAmount");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromCurrencyAmount(v18);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "paymentMethod");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromPaymentMethodValue(v17);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "note");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v1, "hasStatus");
    v9 = objc_msgSend(v1, "status") - 1;
    if (v9 <= 4)
      v10 = v9 + 1;
    else
      v10 = 0;
    if (v8)
      v11 = v10;
    else
      v11 = 0;
    objc_msgSend(v1, "feeAmount");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromCurrencyAmount(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[INPaymentRecord initWithPayee:payer:currencyAmount:paymentMethod:note:status:feeAmount:](v2, "initWithPayee:payer:currencyAmount:paymentMethod:note:status:feeAmount:", v3, v4, v16, v5, v7, v11, v13);

  }
  else
  {
    v14 = 0;
  }
  return v14;
}

_INPBPaymentRecord *INIntentSlotValueTransformToPaymentRecord(void *a1)
{
  id v1;
  _INPBPaymentRecord *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBPaymentRecord);
    objc_msgSend(v1, "payee");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContact(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentRecord setPayee:](v2, "setPayee:", v4);

    objc_msgSend(v1, "payer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToContact(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentRecord setPayer:](v2, "setPayer:", v6);

    objc_msgSend(v1, "currencyAmount");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToCurrencyAmount(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentRecord setCurrencyAmount:](v2, "setCurrencyAmount:", v8);

    objc_msgSend(v1, "note");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentRecord setNote:](v2, "setNote:", v10);

    v11 = objc_msgSend(v1, "status") - 1;
    if (v11 < 5)
      v12 = (v11 + 1);
    else
      v12 = 0x7FFFFFFFLL;
    -[_INPBPaymentRecord setStatus:](v2, "setStatus:", v12);
    objc_msgSend(v1, "paymentMethod");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToPaymentMethodValue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentRecord setPaymentMethod:](v2, "setPaymentMethod:", v14);

    objc_msgSend(v1, "feeAmount");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformToCurrencyAmount(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBPaymentRecord setFeeAmount:](v2, "setFeeAmount:", v16);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromPaymentRecords(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromPaymentRecord(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToPaymentRecords(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToPaymentRecord(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueRedactedPaymentRecordFromPaymentRecord(void *a1)
{
  return a1;
}

uint64_t __Block_byref_object_copy__63584(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__63585(uint64_t a1)
{

}

uint64_t _INPBSearchCallHistoryIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  _INPBIntentMetadata *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_135;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v18, 0, 0);
        goto LABEL_53;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_99:
        objc_msgSend(a1, "setCallType:", v25, v76, v77);
        goto LABEL_132;
      case 3u:
        v18 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v18, a2) & 1) == 0)
          goto LABEL_135;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetContact:", v18, 0, 0);
        goto LABEL_53;
      case 4u:
        if (v16 != 2)
        {
          v58 = 0;
          v59 = 0;
          v60 = 0;
          while (1)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
              goto LABEL_130;
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v14 = v59++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_131;
          }
        }
        v76 = 0;
        v77 = 0;
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_46;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
          PBRepeatedInt32Add();
        }
        goto LABEL_80;
      case 5u:
        v18 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v18, a2) & 1) == 0)
          goto LABEL_135;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDateCreated:", v18, 0, 0);
        goto LABEL_53;
      case 6u:
        v18 = objc_alloc_init(_INPBContact);
        if (PBReaderPlaceMark() && (_INPBContactReadFrom(v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRecipient:", v18, 0, 0);
LABEL_53:

LABEL_132:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_135:

        return 0;
      case 7u:
        if (v16 != 2)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          while (1)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
              goto LABEL_130;
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
            *(_QWORD *)(a2 + v67) = v68 + 1;
            v66 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              v14 = v65++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_131;
          }
        }
        v76 = 0;
        v77 = 0;
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (1)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
              break;
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_66;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_66:
          PBRepeatedInt32Add();
        }
        goto LABEL_80;
      case 8u:
        if (v16 == 2)
        {
          v76 = 0;
          v77 = 0;
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            while (1)
            {
              v42 = *v3;
              v43 = *(_QWORD *)(a2 + v42);
              if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
                break;
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_79;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_79:
            PBRepeatedInt32Add();
          }
LABEL_80:
          PBReaderRecallMark();
        }
        else
        {
          v70 = 0;
          v71 = 0;
          v72 = 0;
          while (1)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
              break;
            v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v74);
            *(_QWORD *)(a2 + v73) = v74 + 1;
            v72 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              v14 = v71++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_131;
          }
LABEL_130:
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_131:
          PBRepeatedInt32Add();
        }
        goto LABEL_132;
      case 9u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v51 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
        else
          v51 = v47;
LABEL_104:
        objc_msgSend(a1, "setPreferredCallProvider:", v51, v76, v77);
        goto LABEL_132;
      case 0xAu:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v54 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v54 = 0;
LABEL_108:
        objc_msgSend(a1, "setUnseen:", v54 != 0);
        goto LABEL_132;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_132;
    }
  }
}

uint64_t _INPBShareDestinationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _INPBContact *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBContact);
        if (!PBReaderPlaceMark() || (_INPBContactReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContact:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setDeviceType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBCopyFileIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_77;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_58;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_65:
        objc_msgSend(a1, "setEntityType:", v25, v40, v41);
        goto LABEL_59;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_77;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityName:", v17, 0, 0);
        goto LABEL_58;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_70:
        objc_msgSend(a1, "setSourceType:", v32, v40, v41);
        goto LABEL_59;
      case 5u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_77;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSourceName:", v17, 0, 0);
        goto LABEL_58;
      case 6u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_75:
        objc_msgSend(a1, "setDestinationType:", v39, v40, v41);
        goto LABEL_59;
      case 7u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_77;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDestinationName:", v17, 0, 0);
        goto LABEL_58;
      case 8u:
        v17 = objc_alloc_init(_INPBFileProperty);
        v40 = 0;
        v41 = 0;
        if (PBReaderPlaceMark() && _INPBFilePropertyReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addProperties:", v17, 0, 0);
LABEL_58:

LABEL_59:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_77:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_59;
    }
  }
}

uint64_t INCallAudioRouteHasBackingType(uint64_t a1)
{
  _BOOL4 v1;

  v1 = a1 == 2 || a1 == 1;
  return a1 == 1000 || v1;
}

uint64_t INCallAudioRouteGetBackingType(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 2;
  else
    v1 = 0x7FFFFFFF;
  if (a1 == 2)
    v1 = 3;
  if (a1 == 1000)
    return 4;
  else
    return v1;
}

uint64_t INCallAudioRouteGetFacadeType(int a1, int a2)
{
  if (a1 && (a2 - 2) <= 2)
    return qword_18C311CB0[a2 - 2];
  else
    return 0;
}

const __CFString *INCallAudioRouteGetName(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;

  v1 = CFSTR("heySiriAudioRoute");
  v2 = CFSTR("unknown");
  if (a1 == 2)
    v2 = CFSTR("bluetoothAudioRoute");
  if (a1 != 1000)
    v1 = v2;
  if (a1 == 1)
    return CFSTR("speakerphoneAudioRoute");
  else
    return v1;
}

uint64_t INCallAudioRouteWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("speakerphoneAudioRoute")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bluetoothAudioRoute")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("heySiriAudioRoute")))
  {
    v2 = 1000;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INCallAudioRouteGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1000:
      v4 = CFSTR("hey siri audio route");
      break;
    case 2:
      v4 = CFSTR("bluetooth audio route");
      break;
    case 1:
      v4 = CFSTR("speakerphone audio route");
      break;
    default:
      v5 = 0;
      goto LABEL_9;
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v5;
}

__CFString *INScanVisualCodeIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E228F090[a1];
}

uint64_t _INPBAppendToNoteIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBNote *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBNote);
        if (!PBReaderPlaceMark() || !_INPBNoteReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNote:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBPauseTimerIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _INPBIntentMetadata *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setPauseMultiple:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_INPBTimer);
        if (!PBReaderPlaceMark() || (_INPBTimerReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTargetTimer:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBArchivedObjectReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMessageData:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setTypeName:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _INPBIntentResponsePayloadFailureReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_44;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v27 = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_46:
        objc_msgSend(a1, "setAppLaunchRequested:", v27 != 0);
      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEnumTypeName:", v31);

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        objc_msgSend(a1, "setErrorCode:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INTimerTypeHasBackingType(unint64_t a1)
{
  return a1 < 3;
}

unint64_t INTimerTypeGetBackingType(unint64_t result)
{
  if (result >= 3)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INTimerTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;

  v2 = a2 == 1;
  if (a2 == 2)
    v2 = 2;
  if (a1)
    return v2;
  else
    return 0;
}

const __CFString *INTimerTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("sleepTimer");
  if (a1 == 1)
    return CFSTR("defaultType");
  else
    return v1;
}

uint64_t INTimerTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("defaultType")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("sleepTimer")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INTimerTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  if (a1 == 2)
  {
    v4 = CFSTR("sleep timer");
  }
  else
  {
    if (a1 != 1)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = CFSTR("default type");
  }
  INLocalizedStringWithLocalizer(v4, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v5;
}

BOOL _INPBResumeWorkoutIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_INPBDataString);
    if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setWorkoutName:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__66162(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__66163(uint64_t a1)
{

}

void INLogInitIfNeeded()
{
  if (INLogInitIfNeeded_once != -1)
    dispatch_once(&INLogInitIfNeeded_once, &__block_literal_global_66271);
}

void INAppResolverLogInitIfNeeded()
{
  if (INAppResolverLogInitIfNeeded_once != -1)
    dispatch_once(&INAppResolverLogInitIfNeeded_once, &__block_literal_global_5);
}

__CFString *INPersonHandleLabelGetFacadeObject(int a1, unsigned int a2)
{
  __CFString *result;

  result = 0;
  if (a2 <= 9)
  {
    if (a1)
      return off_1E228F228[a2];
  }
  return result;
}

uint64_t INPersonHandleLabelGetBackingType(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Home")) & 1) != 0)
    {
      v3 = 0;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Work")) & 1) != 0)
    {
      v3 = 1;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.iPhone")) & 1) != 0)
    {
      v3 = 2;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Mobile")) & 1) != 0)
    {
      v3 = 3;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Main")) & 1) != 0)
    {
      v3 = 4;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Home_Fax")) & 1) != 0)
    {
      v3 = 5;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Work_Fax")) & 1) != 0)
    {
      v3 = 6;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Pager")) & 1) != 0)
    {
      v3 = 7;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.Other")) & 1) != 0)
    {
      v3 = 8;
    }
    else if (objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.intents.PersonHandleLabel.School")))
    {
      v3 = 9;
    }
    else
    {
      v3 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFLL;
  }

  return v3;
}

__CFString *INPersonHandleLabelValueAsString(void *a1)
{
  uint64_t BackingType;

  if (a1)
  {
    BackingType = INPersonHandleLabelGetBackingType(a1);
    if (BackingType < 0xA)
      return off_1E228F278[BackingType];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), BackingType);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return (__CFString *)a1;
}

uint64_t _INPBSaveHealthSampleIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBIntentMetadata *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_54;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(_INPBDateTimeRange);
        if (!PBReaderPlaceMark() || (_INPBDateTimeRangeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_54;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecordDate:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_52:
        objc_msgSend(a1, "setObjectType:", v25, v26, v27);
        goto LABEL_46;
      case 4u:
        v17 = objc_alloc_init(_INPBWellnessValue);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !_INPBWellnessValueReadFrom(v17, a2))
          goto LABEL_54;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addValues:", v17, 0, 0);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(_INPBWellnessUnitType);
        if (!PBReaderPlaceMark() || (_INPBWellnessUnitTypeReadFrom(v17, a2) & 1) == 0)
          goto LABEL_54;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnit:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        v17 = objc_alloc_init(_INPBWellnessMetadataPair);
        v26 = 0;
        v27 = 0;
        if (PBReaderPlaceMark() && _INPBWellnessMetadataPairReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addSampleMetadata:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_54:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

INWellnessMetadataPair *INIntentSlotValueTransformFromWellnessMetadataPair(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  INWellnessMetadataPair *v11;
  int v12;
  void *v13;
  void *v14;
  INWellnessMetadataPair *v15;
  int v16;
  void *v17;
  void *v18;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasKey"))
  {
    objc_msgSend(v2, "key");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v2, "hasValue"))
    {
      objc_msgSend(v2, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasPbDoubleValue");

      objc_msgSend(v2, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v6)
      {
        objc_msgSend(v7, "pbDoubleValue");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromDouble(v9);
        v10 = objc_claimAutoreleasedReturnValue();
LABEL_9:
        v14 = (void *)v10;

        v15 = -[INWellnessMetadataPair initWithNumber:key:]([INWellnessMetadataPair alloc], "initWithNumber:key:", v14, v4);
LABEL_10:
        v11 = v15;

LABEL_14:
        goto LABEL_15;
      }
      v12 = objc_msgSend(v7, "hasOrdinalValue");

      objc_msgSend(v2, "value");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v13;
      if (v12)
      {
        objc_msgSend(v13, "ordinalValue");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromInteger(v9);
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      }
      v16 = objc_msgSend(v13, "hasPbStringValue");

      if (v16)
      {
        objc_msgSend(v2, "value");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "pbStringValue");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformFromString(v18);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        v15 = -[INWellnessMetadataPair initWithString:key:]([INWellnessMetadataPair alloc], "initWithString:key:", v14, v4);
        goto LABEL_10;
      }
    }
    v11 = 0;
    goto LABEL_14;
  }
  v11 = 0;
LABEL_15:

  return v11;
}

_INPBWellnessMetadataPair *INIntentSlotValueTransformToWellnessMetadataPair(void *a1)
{
  id v1;
  _INPBWellnessMetadataPair *v2;
  void *v3;
  void *v4;
  _INPBWellnessMetadataValue *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFNumber *v11;
  CFNumberType Type;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBWellnessMetadataPair);
    objc_msgSend(v1, "key");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWellnessMetadataPair setKey:](v2, "setKey:", v4);

    v5 = objc_alloc_init(_INPBWellnessMetadataValue);
    -[_INPBWellnessMetadataPair setValue:](v2, "setValue:", v5);

    objc_msgSend(v1, "stringValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[_INPBWellnessMetadataPair value](v2, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "stringValue");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      INIntentSlotValueTransformToString(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setPbStringValue:", v9);
LABEL_10:

      goto LABEL_11;
    }
    objc_msgSend(v1, "numberValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v1, "numberValue");
      v11 = (const __CFNumber *)objc_claimAutoreleasedReturnValue();
      Type = CFNumberGetType(v11);

      if ((unint64_t)Type <= kCFNumberDoubleType && ((1 << Type) & 0x3060) != 0)
      {
        -[_INPBWellnessMetadataPair value](v2, "value");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "numberValue");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformToDouble(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setPbDoubleValue:", v9);
      }
      else
      {
        -[_INPBWellnessMetadataPair value](v2, "value");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "numberValue");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        INIntentSlotValueTransformToInteger(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setOrdinalValue:", v9);
      }
      goto LABEL_10;
    }
  }
  else
  {
    v2 = 0;
  }
LABEL_11:

  return v2;
}

id INIntentSlotValueTransformFromWellnessMetadataPairs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromWellnessMetadataPair(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWellnessMetadataPairs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToWellnessMetadataPair(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void INCallCapabilityOptionsEnumerateBackingTypes(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (a1 && v3)
  {
    v4 = v3;
    if ((a1 & 1) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
      v3 = v4;
    }
    if ((a1 & 2) != 0)
    {
      (*((void (**)(id, uint64_t))v3 + 2))(v4, 2);
      v3 = v4;
    }
  }

}

uint64_t INCallCapabilityOptionsContainsBackingType(unint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = (a1 >> 1) & 1;
  v3 = a1 & 1;
  if (a2 != 1)
    v3 = 0;
  if (a2 != 2)
    LODWORD(v2) = v3;
  if (a1)
    return v2;
  else
    return 0;
}

uint64_t *INCallCapabilityOptionsAddBackingType(uint64_t *result, int a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result | 1;
    if (a2 == 2)
      v2 = *result | 2;
    *result = v2;
  }
  return result;
}

unint64_t *INCallCapabilityOptionsRemoveBackingType(unint64_t *result, int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = *result;
    if (a2 == 1)
      v2 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (a2 == 2)
      v2 = *result & 0xFFFFFFFFFFFFFFFDLL;
    *result = v2;
  }
  return result;
}

id INCallCapabilityOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("audioCall"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("videoCall"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t INCallCapabilityOptionsWithNames(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        v4 |= objc_msgSend(v7, "isEqualToString:", CFSTR("audioCall"));
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("videoCall")))
          v4 |= 2uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id INCallCapabilityOptionsGetLocalizedNames(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((a1 & 1) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("audio call"), CFSTR("audio call"), v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v5);

    }
    if ((a1 & 2) != 0)
    {
      INLocalizedStringWithLocalizer(CFSTR("video call"), CFSTR("video call"), v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);

    }
    v7 = (void *)objc_msgSend(v4, "copy");

  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v7;
}

__CFString *INPlayVoicemailIntentResponseCodeGetName(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E228F520[a1];
}

uint64_t _INPBPlaceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _INPBString *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaceType:", v17, 0, 0);
        goto LABEL_31;
      case 2u:
        v17 = objc_alloc_init(_INPBString);
        if (!PBReaderPlaceMark() || (_INPBStringReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlaceSubType:", v17, 0, 0);
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(_INPBString);
        v26 = 0;
        v27 = 0;
        if (PBReaderPlaceMark() && _INPBStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addPlaceDescriptors:", v17, 0, 0);
LABEL_31:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_43:
        objc_msgSend(a1, "setPersonalPlaceType:", v25, v26, v27);
        goto LABEL_44;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

BOOL INWellnessQuestionTypeHasBackingType(unint64_t a1)
{
  return a1 < 8;
}

unint64_t INWellnessQuestionTypeGetBackingType(unint64_t result)
{
  if (result >= 8)
    return 0x7FFFFFFFLL;
  else
    return result;
}

uint64_t INWellnessQuestionTypeGetFacadeType(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  if (v2 <= 6)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (a1)
    return v3;
  else
    return 0;
}

const __CFString *INWellnessQuestionTypeGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E228F560[a1 - 1];
}

uint64_t INWellnessQuestionTypeWithString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("verification")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("quantification")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("temporal")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("comparison")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("quality")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("speedRate")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("instanceCount")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INWellnessQuestionTypeGetLocalizedName(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;

  v3 = a2;
  switch(a1)
  {
    case 1:
      v4 = CFSTR("verification");
      goto LABEL_10;
    case 2:
      v4 = CFSTR("quantification");
      goto LABEL_10;
    case 3:
      v4 = CFSTR("temporal");
      goto LABEL_10;
    case 4:
      v4 = CFSTR("comparison");
      goto LABEL_10;
    case 5:
      v4 = CFSTR("quality");
      goto LABEL_10;
    case 6:
      v4 = CFSTR("speed rate");
      goto LABEL_10;
    case 7:
      v4 = CFSTR("instance count");
LABEL_10:
      INLocalizedStringWithLocalizer(v4, v4, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = 0;
      break;
  }

  return v5;
}

uint64_t INIntentSlotValueTransformFromNull()
{
  return objc_msgSend(MEMORY[0x1E0C99E38], "null");
}

id INIntentSlotValueTransformFromNulls(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (1)
    {
      if (*(_QWORD *)v11 != v6)
        objc_enumerationMutation(v3);
      objc_msgSend(MEMORY[0x1E0C99E38], "null", v10);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        objc_msgSend(v2, "addObject:", v7);

      if (!--v5)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (!v5)
          break;
      }
    }
  }

  v8 = (void *)objc_msgSend(v2, "copy");
  return v8;
}

_INPBEmpty *INIntentSlotValueTransformToNull()
{
  return objc_alloc_init(_INPBEmpty);
}

id INIntentSlotValueTransformToNulls(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _INPBEmpty *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    while (1)
    {
      if (*(_QWORD *)v10 != v6)
        objc_enumerationMutation(v3);
      v7 = objc_alloc_init(_INPBEmpty);
      if (v7)
        objc_msgSend(v2, "addObject:", v7, v9);

      if (!--v5)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (!v5)
          break;
      }
    }
  }

  return v2;
}

uint64_t _INPBSearchForAccountsIntentResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBFinancialAccountValue *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_INPBFinancialAccountValue);
        if (!PBReaderPlaceMark() || !_INPBFinancialAccountValueReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAccounts:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBCreateTaskListIntentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _INPBIntentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_INPBIntentMetadata);
        if (!PBReaderPlaceMark() || (_INPBIntentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_37;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentMetadata:", v17, 0, 0);
        goto LABEL_34;
      case 2u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_37;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTitle:", v17, 0, 0);
        goto LABEL_34;
      case 3u:
        v17 = objc_alloc_init(_INPBDataString);
        if (!PBReaderPlaceMark() || !_INPBDataStringReadFrom(v17, a2))
          goto LABEL_37;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTaskTitles:", v17, 0, 0);
        goto LABEL_34;
      case 4u:
        v17 = objc_alloc_init(_INPBDataString);
        if (PBReaderPlaceMark() && _INPBDataStringReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setGroupName:", v17, 0, 0);
LABEL_34:

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_35;
    }
  }
}

INWellnessObjectResultValue *INIntentSlotValueTransformFromWellnessObjectResultValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  INWellnessObjectResultValue *v12;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "unit");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromString(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "recordDate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformFromDateTimeRange(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = objc_msgSend(v1, "hasResultType");
    v7 = objc_msgSend(v1, "resultType") - 1;
    if (v7 <= 8)
      v8 = v7 + 1;
    else
      v8 = 0;
    if (v6)
      v9 = v8;
    else
      v9 = 0;
    objc_msgSend(v1, "values");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    INIntentSlotValueTransformFromWellnessValues(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = -[INWellnessObjectResultValue initWithRecordDate:unit:values:resultType:]([INWellnessObjectResultValue alloc], "initWithRecordDate:unit:values:resultType:", v5, v3, v11, v9);
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

_INPBWellnessObjectResultValue *INIntentSlotValueTransformToWellnessObjectResultValue(void *a1)
{
  id v1;
  _INPBWellnessObjectResultValue *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(_INPBWellnessObjectResultValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToString(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWellnessObjectResultValue setUnit:](v2, "setUnit:", v4);

    objc_msgSend(v1, "recordDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToDateTimeRange(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWellnessObjectResultValue setRecordDate:](v2, "setRecordDate:", v6);

    objc_msgSend(v1, "values");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    INIntentSlotValueTransformToWellnessValues(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_INPBWellnessObjectResultValue setValues:](v2, "setValues:", v8);

    v9 = objc_msgSend(v1, "resultType");
    if (v9 >= 0xA)
      v10 = 0x7FFFFFFFLL;
    else
      v10 = v9;
    -[_INPBWellnessObjectResultValue setResultType:](v2, "setResultType:", v10);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id INIntentSlotValueTransformFromWellnessObjectResultValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformFromWellnessObjectResultValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id INIntentSlotValueTransformToWellnessObjectResultValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          INIntentSlotValueTransformToWellnessObjectResultValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v9 = (void *)objc_msgSend(v2, "copy");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

BOOL _INPBCurrencyAmountValueReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _INPBValueMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_INPBValueMetadata);
        if (!PBReaderPlaceMark() || (_INPBValueMetadataReadFrom(v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setValueMetadata:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_INPBDecimalNumberValue);
        if (!PBReaderPlaceMark() || (_INPBDecimalNumberValueReadFrom(v18, a2) & 1) == 0)
          goto LABEL_33;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAmount:", v18, 0, 0);
        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (_INPBValueMetadata *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setCurrencyCode:", v18);
LABEL_28:

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _INPBQueryHomeIntentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

id INIntentSlotValueTransformFromGEOLatLng(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0C9E3B8];
    v2 = a1;
    v3 = [v1 alloc];
    objc_msgSend(v2, "lat");
    v5 = v4;
    objc_msgSend(v2, "lng");
    v7 = v6;

    a1 = (void *)objc_msgSend(v3, "initWithLatitude:longitude:", v5, v7);
  }
  return a1;
}

id INIntentSlotValueTransformToGEOLatLng(void *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;

  if (a1)
  {
    objc_msgSend(a1, "coordinate");
    v2 = v1;
    v4 = v3;
    v5 = objc_alloc_init(MEMORY[0x1E0D27140]);
    objc_msgSend(v5, "setLat:", v2);
    objc_msgSend(v5, "setLng:", v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id INIntentSlotValueTransformFromGEOLatLngs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromGEOLatLng(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToGEOLatLngs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToGEOLatLng(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromDistance(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "values", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        INIntentSlotValueTransformFromDistanceValue(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v5));
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

id INIntentSlotValueTransformFromDistanceValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "valueMetadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    INPrivacyEntitlementValidateValueMetadata(v3);

    if (!objc_msgSend(v2, "hasUnit"))
      goto LABEL_28;
    switch(objc_msgSend(v2, "unit"))
    {
      case 1u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "meters");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 2u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "miles");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 3u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "centimeters");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 4u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "feet");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 5u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "inches");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 6u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "yards");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 7u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "kilometers");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 8u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "megameters");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 9u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "hectometers");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0xAu:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "decameters");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0xBu:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "decimeters");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0xCu:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "millimeters");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0xDu:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "micrometers");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0xEu:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "nanometers");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0xFu:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "picometers");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x10u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "scandinavianMiles");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x11u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "lightyears");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x12u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "nauticalMiles");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x13u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "fathoms");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x14u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "furlongs");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x15u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "astronomicalUnits");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      case 0x16u:
        objc_msgSend(MEMORY[0x1E0CB3AD8], "parsecs");
        v4 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_28;
    }
    v6 = (void *)v4;
    if (!v4)
    {
LABEL_28:
      v7 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
      {
        v11 = 136315138;
        v12 = "INIntentSlotValueTransformFromDistanceValue";
        _os_log_error_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_ERROR, "%s _INPBDistanceValue must contain a unit. Otherwise ambiguous magnitude for NSMeasurement", (uint8_t *)&v11, 0xCu);
      }
      objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "usesMetricSystem") & 1) != 0)
        objc_msgSend(MEMORY[0x1E0CB3AD8], "meters");
      else
        objc_msgSend(MEMORY[0x1E0CB3AD8], "miles");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v9 = objc_alloc(MEMORY[0x1E0CB3758]);
    objc_msgSend(v2, "magnitude");
    v5 = (void *)objc_msgSend(v9, "initWithDoubleValue:unit:", v6);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

_INPBDistance *INIntentSlotValueTransformToDistance(void *a1)
{
  void *v1;
  _INPBDistance *v2;

  INIntentSlotValueTransformToDistanceValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = objc_alloc_init(_INPBDistance);
    -[_INPBDistance addValue:](v2, "addValue:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

_INPBDistanceValue *INIntentSlotValueTransformToDistanceValue(void *a1)
{
  id v1;
  _INPBDistanceValue *v2;
  void *v3;
  void *v4;
  int v5;
  _INPBDistanceValue *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  int v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  void *v32;
  int v33;
  void *v34;
  int v35;
  void *v36;
  int v37;
  void *v38;
  int v39;
  void *v40;
  int v41;
  void *v42;
  int v43;
  void *v44;
  int v45;
  void *v46;
  int v47;
  void *v48;
  int v49;
  NSObject *v51;
  void *v52;
  int v53;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57;
  const char *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBDistanceValue);
    objc_msgSend(v1, "unit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValue");
    -[_INPBDistanceValue setMagnitude:](v2, "setMagnitude:");
    objc_msgSend(MEMORY[0x1E0CB3AD8], "kilometers");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v3, "isEqual:", v4);

    if (v5)
    {
      v6 = v2;
      v7 = 7;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3AD8], "meters");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v3, "isEqual:", v8);

      if (v9)
      {
        v6 = v2;
        v7 = 1;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3AD8], "centimeters");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v3, "isEqual:", v10);

        if (v11)
        {
          v6 = v2;
          v7 = 3;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3AD8], "inches");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v3, "isEqual:", v12);

          if (v13)
          {
            v6 = v2;
            v7 = 5;
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3AD8], "feet");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v3, "isEqual:", v14);

            if (v15)
            {
              v6 = v2;
              v7 = 4;
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB3AD8], "yards");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v3, "isEqual:", v16);

              if (v17)
              {
                v6 = v2;
                v7 = 6;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB3AD8], "miles");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                v19 = objc_msgSend(v3, "isEqual:", v18);

                if (v19)
                {
                  v6 = v2;
                  v7 = 2;
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB3AD8], "megameters");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v21 = objc_msgSend(v3, "isEqual:", v20);

                  if (v21)
                  {
                    v6 = v2;
                    v7 = 8;
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB3AD8], "hectometers");
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    v23 = objc_msgSend(v3, "isEqual:", v22);

                    if (v23)
                    {
                      v6 = v2;
                      v7 = 9;
                    }
                    else
                    {
                      objc_msgSend(MEMORY[0x1E0CB3AD8], "decameters");
                      v24 = (void *)objc_claimAutoreleasedReturnValue();
                      v25 = objc_msgSend(v3, "isEqual:", v24);

                      if (v25)
                      {
                        v6 = v2;
                        v7 = 10;
                      }
                      else
                      {
                        objc_msgSend(MEMORY[0x1E0CB3AD8], "decimeters");
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        v27 = objc_msgSend(v3, "isEqual:", v26);

                        if (v27)
                        {
                          v6 = v2;
                          v7 = 11;
                        }
                        else
                        {
                          objc_msgSend(MEMORY[0x1E0CB3AD8], "millimeters");
                          v28 = (void *)objc_claimAutoreleasedReturnValue();
                          v29 = objc_msgSend(v3, "isEqual:", v28);

                          if (v29)
                          {
                            v6 = v2;
                            v7 = 12;
                          }
                          else
                          {
                            objc_msgSend(MEMORY[0x1E0CB3AD8], "micrometers");
                            v30 = (void *)objc_claimAutoreleasedReturnValue();
                            v31 = objc_msgSend(v3, "isEqual:", v30);

                            if (v31)
                            {
                              v6 = v2;
                              v7 = 13;
                            }
                            else
                            {
                              objc_msgSend(MEMORY[0x1E0CB3AD8], "nanometers");
                              v32 = (void *)objc_claimAutoreleasedReturnValue();
                              v33 = objc_msgSend(v3, "isEqual:", v32);

                              if (v33)
                              {
                                v6 = v2;
                                v7 = 14;
                              }
                              else
                              {
                                objc_msgSend(MEMORY[0x1E0CB3AD8], "picometers");
                                v34 = (void *)objc_claimAutoreleasedReturnValue();
                                v35 = objc_msgSend(v3, "isEqual:", v34);

                                if (v35)
                                {
                                  v6 = v2;
                                  v7 = 15;
                                }
                                else
                                {
                                  objc_msgSend(MEMORY[0x1E0CB3AD8], "scandinavianMiles");
                                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                                  v37 = objc_msgSend(v3, "isEqual:", v36);

                                  if (v37)
                                  {
                                    v6 = v2;
                                    v7 = 16;
                                  }
                                  else
                                  {
                                    objc_msgSend(MEMORY[0x1E0CB3AD8], "lightyears");
                                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                                    v39 = objc_msgSend(v3, "isEqual:", v38);

                                    if (v39)
                                    {
                                      v6 = v2;
                                      v7 = 17;
                                    }
                                    else
                                    {
                                      objc_msgSend(MEMORY[0x1E0CB3AD8], "nauticalMiles");
                                      v40 = (void *)objc_claimAutoreleasedReturnValue();
                                      v41 = objc_msgSend(v3, "isEqual:", v40);

                                      if (v41)
                                      {
                                        v6 = v2;
                                        v7 = 18;
                                      }
                                      else
                                      {
                                        objc_msgSend(MEMORY[0x1E0CB3AD8], "fathoms");
                                        v42 = (void *)objc_claimAutoreleasedReturnValue();
                                        v43 = objc_msgSend(v3, "isEqual:", v42);

                                        if (v43)
                                        {
                                          v6 = v2;
                                          v7 = 19;
                                        }
                                        else
                                        {
                                          objc_msgSend(MEMORY[0x1E0CB3AD8], "furlongs");
                                          v44 = (void *)objc_claimAutoreleasedReturnValue();
                                          v45 = objc_msgSend(v3, "isEqual:", v44);

                                          if (v45)
                                          {
                                            v6 = v2;
                                            v7 = 20;
                                          }
                                          else
                                          {
                                            objc_msgSend(MEMORY[0x1E0CB3AD8], "astronomicalUnits");
                                            v46 = (void *)objc_claimAutoreleasedReturnValue();
                                            v47 = objc_msgSend(v3, "isEqual:", v46);

                                            if (v47)
                                            {
                                              v6 = v2;
                                              v7 = 21;
                                            }
                                            else
                                            {
                                              objc_msgSend(MEMORY[0x1E0CB3AD8], "parsecs");
                                              v48 = (void *)objc_claimAutoreleasedReturnValue();
                                              v49 = objc_msgSend(v3, "isEqual:", v48);

                                              if (!v49)
                                              {
                                                v51 = INSiriLogContextIntents;
                                                if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
                                                {
                                                  v57 = 136315394;
                                                  v58 = "INIntentSlotValueTransformToDistanceValue";
                                                  v59 = 2112;
                                                  v60 = v3;
                                                  _os_log_error_impl(&dword_18BEBC000, v51, OS_LOG_TYPE_ERROR, "%s NSMeasurement<NSUnitLength *> distance unit is %@. Only meters and miles are supported", (uint8_t *)&v57, 0x16u);
                                                }
                                                objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
                                                v52 = (void *)objc_claimAutoreleasedReturnValue();
                                                v53 = objc_msgSend(v52, "usesMetricSystem");

                                                if (v53)
                                                  v54 = 1;
                                                else
                                                  v54 = 2;
                                                -[_INPBDistanceValue setUnit:](v2, "setUnit:", v54);
                                                if (v53)
                                                  objc_msgSend(MEMORY[0x1E0CB3AD8], "meters");
                                                else
                                                  objc_msgSend(MEMORY[0x1E0CB3AD8], "miles");
                                                v55 = (void *)objc_claimAutoreleasedReturnValue();
                                                objc_msgSend(v1, "measurementByConvertingToUnit:", v55);
                                                v56 = (void *)objc_claimAutoreleasedReturnValue();
                                                objc_msgSend(v56, "doubleValue");
                                                -[_INPBDistanceValue setMagnitude:](v2, "setMagnitude:");

                                                goto LABEL_48;
                                              }
                                              v6 = v2;
                                              v7 = 22;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    -[_INPBDistanceValue setUnit:](v6, "setUnit:", v7);
LABEL_48:

    goto LABEL_49;
  }
  v2 = 0;
LABEL_49:

  return v2;
}

id INIntentSlotValueTransformFromDistanceValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDistanceValue(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformFromDistances(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformFromDistance(*(void **)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v2, "copy");
  return v9;
}

id INIntentSlotValueTransformToDistanceValues(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDistanceValue(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueTransformToDistances(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        INIntentSlotValueTransformToDistance(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INIntentSlotValueRedactedValueFromDistanceValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  objc_msgSend(v3, "valueMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = INPrivacyEntitlementOptionsForValueMetadata(v4);

  if ((v5 & a2) != 0)
    v6 = 0;
  else
    v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

_INPBDistance *INIntentSlotValueRedactedDistanceFromDistance(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  _INPBDistance *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = objc_alloc_init(_INPBDistance);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v5, "values", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          INIntentSlotValueRedactedValueFromDistanceValue(*(void **)(*((_QWORD *)&v15 + 1) + 8 * v12), a2);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            -[_INPBDistance addValue:](v7, "addValue:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INIntentSlotValueRedactedDistancesFromDistances(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        INIntentSlotValueRedactedDistanceFromDistance(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v12), a2, v6);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v13, (_QWORD)v16);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_msgSend(v7, "copy");
  return v14;
}

BOOL INIsDeviceLocked()
{
  return MKBGetDeviceLockState() - 1 < 2;
}

uint64_t INProcessHasEntitlement(_OWORD *a1, void *a2)
{
  id v3;
  __int128 v4;
  __SecTask *v5;
  __SecTask *v6;
  uint64_t HasEntitlement;
  NSObject *v8;
  audit_token_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[1];
  *(_OWORD *)v10.val = *a1;
  *(_OWORD *)&v10.val[4] = v4;
  v5 = SecTaskCreateWithAuditToken(0, &v10);
  if (v5)
  {
    v6 = v5;
    HasEntitlement = _INProcessHasEntitlement(v5, v3);
    CFRelease(v6);
  }
  else
  {
    v8 = INSiriLogContextIntents;
    if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_ERROR))
    {
      v10.val[0] = 136315138;
      *(_QWORD *)&v10.val[1] = "INProcessHasEntitlement";
      _os_log_error_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_ERROR, "%s SecTaskCreateWithAuditToken() failed, assuming the process is NOT entitled.", (uint8_t *)&v10, 0xCu);
    }
    HasEntitlement = 0;
  }

  return HasEntitlement;
}

uint64_t INThisProcessHasSiriDeveloperEntitlement()
{
  return INThisProcessHasEntitlement(CFSTR("com.apple.developer.siri"), 1);
}

uint64_t INThisProcessHasSiriDeveloperEntitlementWithoutCheckingBundle()
{
  return INThisProcessHasEntitlement(CFSTR("com.apple.developer.siri"), 0);
}

uint64_t INThisProcessIsAssistantd()
{
  if (INThisProcessIsAssistantd_onceToken != -1)
    dispatch_once(&INThisProcessIsAssistantd_onceToken, &__block_literal_global_68956);
  return INThisProcessIsAssistantd_isAssistantd;
}

uint64_t INThisProcessIsSiri()
{
  if (INThisProcessIsSiri_onceToken != -1)
    dispatch_once(&INThisProcessIsSiri_onceToken, &__block_literal_global_27);
  return INThisProcessIsSiri_isSiri;
}

uint64_t INThisProcessIsCarousel()
{
  if (INThisProcessIsCarousel_onceToken != -1)
    dispatch_once(&INThisProcessIsCarousel_onceToken, &__block_literal_global_29);
  return INThisProcessIsCarousel_isCarousel;
}

uint64_t INThisProcessIsSystemProcess()
{
  if (INThisProcessIsSystemProcess_onceToken != -1)
    dispatch_once(&INThisProcessIsSystemProcess_onceToken, &__block_literal_global_32_68971);
  return INThisProcessIsSystemProcess_isSystemProcess;
}

BOOL INThisProcessIsRunningAsInstance()
{
  if (_INProcessGetInstanceUUID_onceToken != -1)
    dispatch_once(&_INProcessGetInstanceUUID_onceToken, &__block_literal_global_251);
  return _INProcessGetInstanceUUID_instanceUUID != 0;
}

uint64_t INAppHasExtensionForIntent(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CA5860], "applicationProxyForIdentifier:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    +[INAppInfo appInfoWithAppProxy:](INAppInfo, "appInfoWithAppProxy:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "supportedActionsByExtensions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "containsObject:", v3);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id INAppIntentVocabularyInBundleProxy(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  void *v12;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0CB34D0];
  objc_msgSend(a1, "bundleURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "bundleWithURL:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "localizations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v4, "count"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v3, "URLForResource:withExtension:subdirectory:localization:", CFSTR("AppIntentVocabulary"), CFSTR("plist"), 0, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfURL:", v11);
          if (v12)
            objc_msgSend(v14, "setObject:forKey:", v12, v10);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v7);
  }

  return v14;
}

uint64_t INSupportsPairedDevice()
{
  if (INSupportsPairedDevice_onceToken != -1)
    dispatch_once(&INSupportsPairedDevice_onceToken, &__block_literal_global_55_69005);
  return INSupportsPairedDevice_supportsPairedDevice;
}

uint64_t INIsHomepod()
{
  if (INIsHomepod_onceToken != -1)
    dispatch_once(&INIsHomepod_onceToken, &__block_literal_global_58_69008);
  return INIsHomepod_isHomepod;
}

id INSupportedIntentsByExtensions(void *a1, _QWORD *a2)
{
  return _INSupportedIntentsByExtensions(0, a1, a2);
}

id _INSupportedIntentsByExtensions(int a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id obj;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = v5;
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v33;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v33 != v23)
          objc_enumerationMutation(obj);
        v25 = v7;
        v8 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v7);
        objc_msgSend(v8, "objectForInfoDictionaryKey:ofClass:inScope:", CFSTR("IntentsSupported"), objc_opt_class(), 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if (!a3)
        {
          objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v9);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = ___INSupportedIntentsByExtensions_block_invoke;
          v26[3] = &unk_1E228F840;
          v27 = a1;
          v26[4] = v8;
          objc_msgSend(v19, "objectsPassingTest:", v26);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v6, "unionSet:", v20);
          goto LABEL_24;
        }
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        if (!v11)
          goto LABEL_24;
        v12 = v11;
        v13 = *(_QWORD *)v29;
        do
        {
          v14 = 0;
          do
          {
            if (*(_QWORD *)v29 != v13)
              objc_enumerationMutation(v10);
            v15 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v14);
            if (objc_msgSend(v6, "containsObject:", v15))
            {
              v16 = (void *)MEMORY[0x1E0CB35C8];
              v17 = 2001;
LABEL_14:
              objc_msgSend(v16, "errorWithDomain:code:userInfo:", CFSTR("IntentsErrorDomain"), v17, 0);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_18;
            }
            if ((_INIsValidIntentNameForBundleProxy(a1, v15, v8) & 1) != 0)
            {
              objc_msgSend(v6, "addObject:", v15);
            }
            else if ((_INIsValidCustomIntentNameForBundleProxy(v15, v8) & 1) == 0)
            {
              v16 = (void *)MEMORY[0x1E0CB35C8];
              v17 = 2004;
              goto LABEL_14;
            }
LABEL_18:
            ++v14;
          }
          while (v12 != v14);
          v18 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
          v12 = v18;
        }
        while (v18);
LABEL_24:

        v7 = v25 + 1;
      }
      while (v25 + 1 != v24);
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v24);
  }

  return v6;
}

uint64_t _INIsValidIntentNameForBundleProxy(int a1, void *a2, void *a3)
{
  NSString *v5;
  id v6;
  objc_class *v7;
  uint64_t v8;
  unsigned int valid;

  v5 = a2;
  v6 = a3;
  v7 = NSClassFromString(v5);
  INIntentSchemaGetIntentDescriptionWithFacadeClass(v7);
  v8 = objc_claimAutoreleasedReturnValue();

  if (!a1 || v8)
  {
    if (v6 && (objc_msgSend(v6, "if_isSystem") & 1) == 0)
    {
      valid = _INIsValidCustomIntentNameForBundleProxy(v5, v6);
      if (v8)
        v8 = 1;
      else
        v8 = valid;
    }
    else
    {
      v8 = 1;
    }
  }

  return v8;
}

uint64_t _INIsValidCustomIntentNameForBundleProxy(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = a1;
  _INContainingBundleProxyWithBundleProxy(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = (void *)MEMORY[0x1E0C99E60];
      objc_msgSend(v4, "siriActionDefinitionURLs");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "allKeys");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setWithArray:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v9 = objc_msgSend(v8, "containsObject:", v3);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

id INIntentsRestrictedWhileLocked(void *a1, _QWORD *a2)
{
  return _INIntentsSetForExtensionAttributesKey(0, a1, CFSTR("IntentsRestrictedWhileLocked"), a2);
}

id _INIntentsSetForExtensionAttributesKey(char a1, void *a2, void *a3, _QWORD *a4)
{
  id v5;
  id v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  objc_class *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id obj;
  uint64_t v26;
  id v28;
  uint64_t v29;
  void *v31;
  void *v32;
  _QWORD v33[5];
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[4];
  id v40;
  id v41;
  _BYTE v42[128];
  _QWORD v43[2];
  _QWORD v44[4];

  v44[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v28 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v5;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
  if (v29)
  {
    v26 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v29; ++i)
      {
        if (*(_QWORD *)v36 != v26)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        objc_msgSend(v8, "objectForInfoDictionaryKey:ofClass:inScope:", v6, objc_opt_class(), 0);
        v9 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectForInfoDictionaryKey:ofClass:inScope:", CFSTR("IntentsSupported"), objc_opt_class(), 0);
        v10 = objc_claimAutoreleasedReturnValue();
        v32 = (void *)v9;
        objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___INIntentsSetForExtensionAttributesKey_block_invoke;
        v33[3] = &unk_1E228F840;
        v34 = a1;
        v33[4] = v8;
        objc_msgSend(v11, "objectsPassingTest:", v33);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        v31 = (void *)v10;
        objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (a4 && (objc_msgSend(v12, "isSubsetOfSet:", v13) & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IntentsErrorDomain"), 2002, 0);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(v28, "intersectSet:", v13);
        v14 = v6;
        v43[0] = CFSTR("IntentsRestrictedWhileLocked");
        v15 = (objc_class *)MEMORY[0x1E0C99E60];
        v16 = v13;
        v17 = (void *)objc_msgSend([v15 alloc], "initWithObjects:", CFSTR("INRequestRideIntent"), CFSTR("INRequestPaymentIntent"), CFSTR("INSendPaymentIntent"), CFSTR("INPayBillIntent"), CFSTR("INSearchForBillsIntent"), CFSTR("INSearchForAccountsIntent"), CFSTR("INTransferMoneyIntent"), CFSTR("INSearchForNotebookItemsIntent"), CFSTR("INSearchCallHistoryIntent"), CFSTR("INGetVisualCodeIntent"), CFSTR("INSearchForPhotosIntent"), CFSTR("INStartPhotoPlaybackIntent"), CFSTR("INGetCarLockStatusIntent"), CFSTR("INSetCarLockStatusIntent"), CFSTR("INGetCarPowerLevelStatusIntent"), CFSTR("INActivateCarSignalIntent"), 0);
        v43[1] = CFSTR("IntentsRestrictedWhileProtectedDataUnavailable");
        v44[0] = v17;
        objc_msgSend(MEMORY[0x1E0C99E60], "set");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v44[1] = v18;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44, v43, 2);
        v19 = v6;
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        v39[0] = MEMORY[0x1E0C809B0];
        v39[1] = 3221225472;
        v39[2] = ___INRequiredIntentsSetForExtensionAttributesKey_block_invoke;
        v39[3] = &unk_1E228F868;
        v40 = v20;
        v41 = v14;
        v21 = v20;
        v22 = v14;
        objc_msgSend(v16, "objectsPassingTest:", v39);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        v6 = v19;
        objc_msgSend(v28, "unionSet:", v23);

        objc_msgSend(v28, "unionSet:", v12);
      }
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
    }
    while (v29);
  }

  return v28;
}

id INIntentsRestrictedWhileProtectedDataUnavailable(void *a1, _QWORD *a2)
{
  return _INIntentsSetForExtensionAttributesKey(0, a1, CFSTR("IntentsRestrictedWhileProtectedDataUnavailable"), a2);
}

id INSiriSupportedIntentsByExtensions(void *a1, _QWORD *a2)
{
  return _INSupportedIntentsByExtensions(1, a1, a2);
}

id INSiriIntentsRestrictedWhileLocked(void *a1, _QWORD *a2)
{
  return _INIntentsSetForExtensionAttributesKey(1, a1, CFSTR("IntentsRestrictedWhileLocked"), a2);
}

id INSiriIntentsRestrictedWhileProtectedDataUnavailable(void *a1, _QWORD *a2)
{
  return _INIntentsSetForExtensionAttributesKey(1, a1, CFSTR("IntentsRestrictedWhileProtectedDataUnavailable"), a2);
}

void INSupportedActionsForAppProxy(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  +[INAppInfo appInfoWithAppProxy:](INAppInfo, "appInfoWithAppProxy:", a1);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "supportedActions");
  *a2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "actionsRestrictedWhileLocked");
  *a3 = (id)objc_claimAutoreleasedReturnValue();

}

id INLocalAppBundleIdentifierForIntentBundleIdentifier(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  void *v17;
  void *v19;
  _BOOL4 v20;
  NSObject *v21;
  void *v22;
  _BYTE v23[24];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = INSiriLogContextIntents;
  if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v23 = 136315394;
    *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    *(_WORD *)&v23[12] = 2112;
    *(_QWORD *)&v23[14] = v1;
    _os_log_impl(&dword_18BEBC000, v2, OS_LOG_TYPE_INFO, "%s Looking for local app bundle identifier for intent bundle identifier: %@", v23, 0x16u);
  }
  if (v1 && objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForIdentifier:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v4 = v3;
      v5 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v23 = 136315394;
        *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
        *(_WORD *)&v23[12] = 2112;
        *(_QWORD *)&v23[14] = v4;
        _os_log_impl(&dword_18BEBC000, v5, OS_LOG_TYPE_INFO, "%s originalBundleProxy is a LSApplicationProxy: %@", v23, 0x16u);
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = INSiriLogContextIntents;
        if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v23 = 136315138;
          *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
          _os_log_impl(&dword_18BEBC000, v7, OS_LOG_TYPE_INFO, "%s originalBundleProxy is a LSPlugInKitProxy", v23, 0xCu);
        }
        _INContainingBundleProxyWithBundleProxy(v3);
        v4 = (id)objc_claimAutoreleasedReturnValue();
        v8 = INSiriLogContextIntents;
        if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v23 = 136315394;
          *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
          *(_WORD *)&v23[12] = 2112;
          *(_QWORD *)&v23[14] = v4;
          _os_log_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_INFO, "%s Containing bundle proxy: %@", v23, 0x16u);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v19 = (void *)INSiriLogContextIntents;
          v20 = os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO);
          if (!v4)
          {
            if (v20)
            {
              v21 = v19;
              objc_msgSend(0, "bundleIdentifier");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v23 = 136315394;
              *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
              *(_WORD *)&v23[12] = 2114;
              *(_QWORD *)&v23[14] = v22;
              _os_log_impl(&dword_18BEBC000, v21, OS_LOG_TYPE_INFO, "%s Original bundle proxy (with bundleID=%{public}@) is not app and containingBundleProxy is nil but it still exists; choosing that",
                v23,
                0x16u);

            }
            v17 = v3;
            goto LABEL_24;
          }
          if (!v20)
          {
LABEL_23:
            v17 = v4;
LABEL_24:
            objc_msgSend(v17, "bundleIdentifier", *(_OWORD *)v23, *(_QWORD *)&v23[16]);
            v6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_30:

            goto LABEL_31;
          }
          v14 = v19;
          objc_msgSend(v4, "bundleIdentifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v23 = 136315394;
          *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
          *(_WORD *)&v23[12] = 2114;
          *(_QWORD *)&v23[14] = v15;
          v16 = "%s Containing bundle proxy is not app (with bundleID=%{public}@) but it still exists; choosing that";
LABEL_22:
          _os_log_impl(&dword_18BEBC000, v14, OS_LOG_TYPE_INFO, v16, v23, 0x16u);

          goto LABEL_23;
        }
        v4 = v4;
        v9 = INSiriLogContextIntents;
        if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v23 = 136315394;
          *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
          *(_WORD *)&v23[12] = 2112;
          *(_QWORD *)&v23[14] = v4;
          _os_log_impl(&dword_18BEBC000, v9, OS_LOG_TYPE_INFO, "%s containing bundle proxy is a LSApplicationProxy: %@", v23, 0x16u);
        }

      }
      else
      {
        v4 = 0;
      }
    }
    objc_msgSend(v4, "appState");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isInstalled");

    v12 = INSiriLogContextIntents;
    v13 = os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)v23 = 136315394;
        *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
        *(_WORD *)&v23[12] = 2112;
        *(_QWORD *)&v23[14] = v4;
        _os_log_impl(&dword_18BEBC000, v12, OS_LOG_TYPE_INFO, "%s Has app proxy but it is not installed: %@", v23, 0x16u);
        v12 = INSiriLogContextIntents;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v23 = 136315650;
        *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
        *(_WORD *)&v23[12] = 2112;
        *(_QWORD *)&v23[14] = v3;
        *(_WORD *)&v23[22] = 2112;
        v24 = v4;
        _os_log_error_impl(&dword_18BEBC000, v12, OS_LOG_TYPE_ERROR, "%s Didn't find any installed apps for originalBundleProxy: %@, appProxy: %@; returning nil",
          v23,
          0x20u);
      }
      v6 = 0;
      goto LABEL_30;
    }
    if (!v13)
      goto LABEL_23;
    v14 = v12;
    objc_msgSend(v4, "bundleIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v23 = 136315394;
    *(_QWORD *)&v23[4] = "INLocalAppBundleIdentifierForIntentBundleIdentifier";
    *(_WORD *)&v23[12] = 2114;
    *(_QWORD *)&v23[14] = v15;
    v16 = "%s Original app (with bundleID=%{public}@) is installed; choosing that";
    goto LABEL_22;
  }
  v6 = v1;
LABEL_31:

  return v6;
}

id INSupportedMediaCategories(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "objectForInfoDictionaryKey:ofClass:inScope:", CFSTR("SupportedMediaCategories"), objc_opt_class(), 0, (_QWORD)v10);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObjectsFromArray:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id INAppProxyForAppOrContainedPluginWithBundleIdentifier(uint64_t a1)
{
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForIdentifier:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      _INContainingBundleProxyWithBundleProxy(v1);
      v2 = (id)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        goto LABEL_7;

    }
    v2 = 0;
    goto LABEL_7;
  }
  v2 = v1;
LABEL_7:

  return v2;
}

__CFString *INDisplayableOrLaunchableBundleIdForBundleIdFromUserActivity(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char v4;
  __CFString *v5;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CA58F0], "pluginKitProxyForIdentifier:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "protocol");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.fileprovider-nonui"));

  if ((v4 & 1) != 0)
    v5 = CFSTR("com.apple.DocumentsApp");
  else
    v5 = (__CFString *)v1;

  return v5;
}

id INUserActivityGetSerializationQueue()
{
  if (INUserActivityGetSerializationQueue_onceToken != -1)
    dispatch_once(&INUserActivityGetSerializationQueue_onceToken, &__block_literal_global_68);
  return (id)INUserActivityGetSerializationQueue_queue;
}

id INUserActivitySerializeToData(void *a1)
{
  id v1;
  void *v2;
  dispatch_semaphore_t v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v9;
  dispatch_semaphore_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "_intentsPrepareForEncoding");
    v12 = 0;
    v13 = &v12;
    v14 = 0x3032000000;
    v15 = __Block_byref_object_copy__69069;
    v16 = __Block_byref_object_dispose__69070;
    v17 = 0;
    v3 = dispatch_semaphore_create(0);
    INUserActivityGetSerializationQueue();
    v4 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __INUserActivitySerializeToData_block_invoke;
    block[3] = &unk_1E228F728;
    v10 = v3;
    v11 = &v12;
    v9 = v2;
    v5 = v3;
    dispatch_async(v4, block);

    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    v6 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t __Block_byref_object_copy__69069(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__69070(uint64_t a1)
{

}

id INUserActivityDeserializeFromData(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  id v4;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0CA5920];
    v2 = a1;
    v3 = (void *)objc_msgSend([v1 alloc], "_initWithUserActivityData:", v2);

    v4 = (id)objc_msgSend(v3, "_intentsIdentifier");
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

_INPBUserActivity *INUserActivitySerializeToBackingStore(void *a1)
{
  id v1;
  _INPBUserActivity *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(_INPBUserActivity);
    objc_msgSend(v1, "_intentsIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
      -[_INPBUserActivity setUri:](v2, "setUri:", v3);
    INUserActivitySerializeToData(v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      -[_INPBUserActivity setData:](v2, "setData:", v4);

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id INUserActivityDeserializeFromBackingStore(void *a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(a1, "data");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    INUserActivityDeserializeFromData(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void INFindMatchingAppsForIntent(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    if (v3)
    {
      if (INFindMatchingAppsForIntent_onceToken != -1)
        dispatch_once(&INFindMatchingAppsForIntent_onceToken, &__block_literal_global_75);
      v5 = (void *)INFindMatchingAppsForIntent_matchingSystemAppBundleIdentifiersByIntentName;
      objc_msgSend(v3, "_className");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKeyedSubscript:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = INSiriLogContextIntents;
      if (os_log_type_enabled((os_log_t)INSiriLogContextIntents, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v16 = "INFindMatchingAppsForIntent";
        v17 = 2112;
        v18 = v7;
        v19 = 2112;
        v20 = v3;
        _os_log_impl(&dword_18BEBC000, v8, OS_LOG_TYPE_INFO, "%s found matching system apps: %@ for intent: %@", buf, 0x20u);
      }
      v9 = (void *)MEMORY[0x1E0CB35D8];
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __INFindMatchingAppsForIntent_block_invoke_154;
      v11[3] = &unk_1E228F798;
      v12 = v7;
      v13 = v3;
      v14 = v4;
      v10 = v7;
      objc_msgSend(v9, "_intents_matchExtensionsForIntent:shouldIgnoreLaunchId:completion:", v13, 1, v11);

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IntentsErrorDomain"), 2004, 0);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, id))v4 + 2))(v4, 0, v10);
    }

  }
}

void sub_18C0BCF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id INContainingAppBundleIdentifierForBundle(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0CA5890];
  objc_msgSend(a1, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "bundleProxyForIdentifier:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  _INContainingBundleProxyWithBundleProxy(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "bundleIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t INIsInternalInstall()
{
  if (INIsInternalInstall_onceToken != -1)
    dispatch_once(&INIsInternalInstall_onceToken, &__block_literal_global_162);
  return INIsInternalInstall_isInternal;
}

SEL INSetterFromString(void *a1, objc_class *a2)
{
  const char *v3;
  objc_property *Property;
  char *v5;
  char *v6;
  NSString *v7;
  void *v8;
  void *v9;
  SEL v10;

  v3 = (const char *)objc_msgSend(objc_retainAutorelease(a1), "cStringUsingEncoding:", 1);
  Property = class_getProperty(a2, v3);
  v5 = property_copyAttributeValue(Property, "S");
  if (v5)
  {
    v6 = v5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v5, 1);
    v7 = (NSString *)objc_claimAutoreleasedReturnValue();
    free(v6);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%c"), (char)__toupper(*v3));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v3 + 1, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("set%@%@:"), v8, v9);
    v7 = (NSString *)objc_claimAutoreleasedReturnValue();

  }
  v10 = NSSelectorFromString(v7);

  return v10;
}

id INTypedObjectWithCustomObject(void *a1)
{
  id v1;
  void *v2;
  NSString *v3;
  objc_class *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  char isKindOfClass;
  uint64_t v26;
  void *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "codableDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "className");
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  v4 = NSClassFromString(v3);

  if (!v4)
  {
    v8 = 0;
    goto LABEL_30;
  }
  v5 = [v4 alloc];
  objc_msgSend(v1, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "displayString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v5, "initWithIdentifier:displayString:", v6, v7);

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v28 = v2;
  objc_msgSend(v2, "attributes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "allValues");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (!v30)
    goto LABEL_28;
  v11 = *(_QWORD *)v32;
  v29 = v8;
  do
  {
    for (i = 0; i != v30; ++i)
    {
      if (*(_QWORD *)v32 != v11)
        objc_enumerationMutation(v10);
      v13 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
      objc_msgSend(v13, "propertyName");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "valueForKey:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v13;
      if (v16)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v17 = v16;
        else
          v17 = 0;
      }
      else
      {
        v17 = 0;
      }
      v18 = v17;

      if (v15)
        v19 = v18 == 0;
      else
        v19 = 1;
      if (!v19)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v15, "if_flatMap:", &__block_literal_global_172);
          v20 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v21 = v11;
          v22 = v10;
          v23 = v1;
          v24 = v15;
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0)
          {
            v15 = v24;
            v1 = v23;
            v10 = v22;
            v11 = v21;
            v8 = v29;
            goto LABEL_22;
          }
          INTypedObjectWithCustomObject(v24);
          v20 = objc_claimAutoreleasedReturnValue();
          v1 = v23;
          v10 = v22;
          v11 = v21;
          v8 = v29;
        }

        v15 = (void *)v20;
      }
LABEL_22:
      v26 = objc_msgSend(v16, "setter");
      if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        objc_msgSend(v8, "performSelector:withObject:", v26, v15);
      else
        objc_msgSend(v8, "setValue:forKey:", v15, v14);

    }
    v30 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  }
  while (v30);
LABEL_28:

  v2 = v28;
LABEL_30:

  return v8;
}

id INObjectWithTypedObject(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a1;
  v4 = a2;
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v4, "codableDescription");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    _INObjectWithTypedObject(v3, v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {

    v6 = v3;
  }

  return v6;
}

INCustomObject *_INObjectWithTypedObject(void *a1, void *a2)
{
  id v3;
  id v4;
  INCustomObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  char isKindOfClass;
  void *v24;
  id obj;
  _QWORD v26[4];
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = -[INCustomObject initWithObject:codableDescription:]([INCustomObject alloc], "initWithObject:codableDescription:", v3, v4);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v24 = v4;
  objc_msgSend(v4, "attributes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allValues");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  obj = v7;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        objc_msgSend(v12, "propertyName");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "valueForKey:", v13);
        v14 = (id)objc_claimAutoreleasedReturnValue();
        v15 = v12;
        if (v15)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v16 = v15;
          else
            v16 = 0;
        }
        else
        {
          v16 = 0;
        }
        v17 = v16;

        objc_msgSend(v17, "codableDescription");
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = (void *)v18;
        if (v14)
          v20 = v18 == 0;
        else
          v20 = 1;
        if (!v20)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v26[0] = MEMORY[0x1E0C809B0];
            v26[1] = 3221225472;
            v26[2] = ___INObjectWithTypedObject_block_invoke;
            v26[3] = &unk_1E2293880;
            v27 = v19;
            objc_msgSend(v14, "if_flatMap:", v26);
            v21 = objc_claimAutoreleasedReturnValue();

            v14 = v27;
          }
          else
          {
            v14 = v14;
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) == 0)
              goto LABEL_20;
            _INObjectWithTypedObject(v14, v19);
            v21 = objc_claimAutoreleasedReturnValue();
          }

          v14 = (id)v21;
        }
LABEL_20:
        -[INCustomObject setValue:forKey:](v5, "setValue:forKey:", v14, v13);

      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v9);
  }

  return v5;
}

